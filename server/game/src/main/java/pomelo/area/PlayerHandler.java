/*       */ package pomelo.area;
/*       */ 
/*       */ import com.google.protobuf.AbstractMessage;
/*       */ import com.google.protobuf.AbstractMessageLite;
/*       */ import com.google.protobuf.AbstractParser;
/*       */ import com.google.protobuf.ByteString;
/*       */ import com.google.protobuf.CodedInputStream;
/*       */ import com.google.protobuf.CodedOutputStream;
/*       */ import com.google.protobuf.Descriptors;
/*       */ import com.google.protobuf.ExtensionRegistry;
/*       */ import com.google.protobuf.ExtensionRegistryLite;
/*       */ import com.google.protobuf.GeneratedMessage;
/*       */ import com.google.protobuf.InvalidProtocolBufferException;
/*       */ import com.google.protobuf.LazyStringArrayList;
/*       */ import com.google.protobuf.LazyStringList;
/*       */ import com.google.protobuf.Message;
/*       */ import com.google.protobuf.MessageLite;
/*       */ import com.google.protobuf.MessageOrBuilder;
/*       */ import com.google.protobuf.Parser;
/*       */ import com.google.protobuf.ProtocolStringList;
/*       */ import com.google.protobuf.RepeatedFieldBuilder;
/*       */ import com.google.protobuf.SingleFieldBuilder;
/*       */ import com.google.protobuf.UnknownFieldSet;
/*       */ import java.io.IOException;
/*       */ import java.io.InputStream;
/*       */ import java.io.ObjectStreamException;
/*       */ import java.util.ArrayList;
/*       */ import java.util.Collection;
/*       */ import java.util.Collections;
/*       */ import java.util.List;
/*       */ import pomelo.Common;
/*       */ import pomelo.item.ItemOuterClass;
/*       */ import pomelo.player.PlayerOuterClass;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ public final class PlayerHandler
/*       */ {
/*       */   public static void registerAllExtensions(ExtensionRegistry registry) {}
/*       */   
/*       */   public static final class EnterSceneRequest
/*       */     extends GeneratedMessage
/*       */     implements EnterSceneRequestOrBuilder
/*       */   {
/*   488 */     private static final EnterSceneRequest defaultInstance = new EnterSceneRequest(true); private final UnknownFieldSet unknownFields; private EnterSceneRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private EnterSceneRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static EnterSceneRequest getDefaultInstance() { return defaultInstance; } public EnterSceneRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private EnterSceneRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2SInstanceId_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_EnterSceneRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_EnterSceneRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(EnterSceneRequest.class, Builder.class); } public static Parser<EnterSceneRequest> PARSER = (Parser<EnterSceneRequest>)new AbstractParser<EnterSceneRequest>() { public PlayerHandler.EnterSceneRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.EnterSceneRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_INSTANCEID_FIELD_NUMBER = 1; private Object c2SInstanceId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<EnterSceneRequest> getParserForType() { return PARSER; } public boolean hasC2SInstanceId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SInstanceId() { Object ref = this.c2SInstanceId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SInstanceId_ = s;  return s; } public ByteString getC2SInstanceIdBytes() { Object ref = this.c2SInstanceId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SInstanceId_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.c2SInstanceId_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SInstanceIdBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SInstanceIdBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static EnterSceneRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (EnterSceneRequest)PARSER.parseFrom(data); } public static EnterSceneRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (EnterSceneRequest)PARSER.parseFrom(data, extensionRegistry); } public static EnterSceneRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (EnterSceneRequest)PARSER.parseFrom(data); } public static EnterSceneRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (EnterSceneRequest)PARSER.parseFrom(data, extensionRegistry); } public static EnterSceneRequest parseFrom(InputStream input) throws IOException { return (EnterSceneRequest)PARSER.parseFrom(input); } public static EnterSceneRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (EnterSceneRequest)PARSER.parseFrom(input, extensionRegistry); } public static EnterSceneRequest parseDelimitedFrom(InputStream input) throws IOException { return (EnterSceneRequest)PARSER.parseDelimitedFrom(input); } public static EnterSceneRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (EnterSceneRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static EnterSceneRequest parseFrom(CodedInputStream input) throws IOException { return (EnterSceneRequest)PARSER.parseFrom(input); } public static EnterSceneRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (EnterSceneRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(EnterSceneRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.EnterSceneRequestOrBuilder {
/*   489 */       private int bitField0_; private Object c2SInstanceId_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_EnterSceneRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_EnterSceneRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.EnterSceneRequest.class, Builder.class); } private Builder() { this.c2SInstanceId_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SInstanceId_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.EnterSceneRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SInstanceId_ = ""; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_EnterSceneRequest_descriptor; } public PlayerHandler.EnterSceneRequest getDefaultInstanceForType() { return PlayerHandler.EnterSceneRequest.getDefaultInstance(); } public PlayerHandler.EnterSceneRequest build() { PlayerHandler.EnterSceneRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.EnterSceneRequest buildPartial() { PlayerHandler.EnterSceneRequest result = new PlayerHandler.EnterSceneRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SInstanceId_ = this.c2SInstanceId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.EnterSceneRequest) return mergeFrom((PlayerHandler.EnterSceneRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.EnterSceneRequest other) { if (other == PlayerHandler.EnterSceneRequest.getDefaultInstance()) return this;  if (other.hasC2SInstanceId()) { this.bitField0_ |= 0x1; this.c2SInstanceId_ = other.c2SInstanceId_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.EnterSceneRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.EnterSceneRequest)PlayerHandler.EnterSceneRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.EnterSceneRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SInstanceId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SInstanceId() { Object ref = this.c2SInstanceId_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SInstanceId_ = s;  return s; }  return (String)ref; } public ByteString getC2SInstanceIdBytes() { Object ref = this.c2SInstanceId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SInstanceId_ = b; return b; }  return (ByteString)ref; } public Builder setC2SInstanceId(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SInstanceId_ = value; onChanged(); return this; } public Builder clearC2SInstanceId() { this.bitField0_ &= 0xFFFFFFFE; this.c2SInstanceId_ = PlayerHandler.EnterSceneRequest.getDefaultInstance().getC2SInstanceId(); onChanged(); return this; } public Builder setC2SInstanceIdBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SInstanceId_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class EnterSceneResponse
/*       */     extends GeneratedMessage
/*       */     implements EnterSceneResponseOrBuilder
/*       */   {
/*  1293 */     private static final EnterSceneResponse defaultInstance = new EnterSceneResponse(true); private final UnknownFieldSet unknownFields; private EnterSceneResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private EnterSceneResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static EnterSceneResponse getDefaultInstance() { return defaultInstance; } public EnterSceneResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private EnterSceneResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: bs = input.readBytes(); this.bitField0_ |= 0x4; this.s2CInstanceId_ = bs; break;case 32: this.bitField0_ |= 0x8; this.s2CAreaIndex_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_EnterSceneResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_EnterSceneResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(EnterSceneResponse.class, Builder.class); } public static Parser<EnterSceneResponse> PARSER = (Parser<EnterSceneResponse>)new AbstractParser<EnterSceneResponse>() { public PlayerHandler.EnterSceneResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.EnterSceneResponse(input, extensionRegistry); } }
/*  1294 */     ; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_INSTANCEID_FIELD_NUMBER = 3; private Object s2CInstanceId_; public static final int S2C_AREAINDEX_FIELD_NUMBER = 4; private int s2CAreaIndex_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<EnterSceneResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } static { defaultInstance.initFields(); }
/*       */     
/*       */     public ByteString getS2CMsgBytes() {
/*       */       Object ref = this.s2CMsg_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.s2CMsg_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref;
/*       */     }
/*       */     public boolean hasS2CInstanceId() {
/*       */       return ((this.bitField0_ & 0x4) == 4);
/*       */     }
/*       */     public String getS2CInstanceId() {
/*       */       Object ref = this.s2CInstanceId_;
/*       */       if (ref instanceof String)
/*       */         return (String)ref; 
/*       */       ByteString bs = (ByteString)ref;
/*       */       String s = bs.toStringUtf8();
/*       */       if (bs.isValidUtf8())
/*       */         this.s2CInstanceId_ = s; 
/*       */       return s;
/*       */     }
/*       */     public ByteString getS2CInstanceIdBytes() {
/*       */       Object ref = this.s2CInstanceId_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.s2CInstanceId_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref;
/*       */     }
/*       */     public boolean hasS2CAreaIndex() {
/*       */       return ((this.bitField0_ & 0x8) == 8);
/*       */     }
/*       */     public int getS2CAreaIndex() {
/*       */       return this.s2CAreaIndex_;
/*       */     }
/*       */     private void initFields() {
/*       */       this.s2CCode_ = 0;
/*       */       this.s2CMsg_ = "";
/*       */       this.s2CInstanceId_ = "";
/*       */       this.s2CAreaIndex_ = 0;
/*       */     }
/*       */     public final boolean isInitialized() {
/*       */       byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1)
/*       */         return true; 
/*       */       if (isInitialized == 0)
/*       */         return false; 
/*       */       if (!hasS2CCode()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true;
/*       */     }
/*       */     public void writeTo(CodedOutputStream output) throws IOException {
/*       */       getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1)
/*       */         output.writeInt32(1, this.s2CCode_); 
/*       */       if ((this.bitField0_ & 0x2) == 2)
/*       */         output.writeBytes(2, getS2CMsgBytes()); 
/*       */       if ((this.bitField0_ & 0x4) == 4)
/*       */         output.writeBytes(3, getS2CInstanceIdBytes()); 
/*       */       if ((this.bitField0_ & 0x8) == 8)
/*       */         output.writeInt32(4, this.s2CAreaIndex_); 
/*       */       getUnknownFields().writeTo(output);
/*       */     }
/*       */     public int getSerializedSize() {
/*       */       int size = this.memoizedSerializedSize;
/*       */       if (size != -1)
/*       */         return size; 
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1)
/*       */         size += CodedOutputStream.computeInt32Size(1, this.s2CCode_); 
/*       */       if ((this.bitField0_ & 0x2) == 2)
/*       */         size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes()); 
/*       */       if ((this.bitField0_ & 0x4) == 4)
/*       */         size += CodedOutputStream.computeBytesSize(3, getS2CInstanceIdBytes()); 
/*       */       if ((this.bitField0_ & 0x8) == 8)
/*       */         size += CodedOutputStream.computeInt32Size(4, this.s2CAreaIndex_); 
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size;
/*       */     }
/*       */     protected Object writeReplace() throws ObjectStreamException {
/*       */       return super.writeReplace();
/*       */     }
/*       */     public static EnterSceneResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
/*       */       return (EnterSceneResponse)PARSER.parseFrom(data);
/*       */     }
/*       */     public static EnterSceneResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (EnterSceneResponse)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */     public static EnterSceneResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
/*       */       return (EnterSceneResponse)PARSER.parseFrom(data);
/*       */     }
/*       */     public static EnterSceneResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (EnterSceneResponse)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */     public static EnterSceneResponse parseFrom(InputStream input) throws IOException {
/*       */       return (EnterSceneResponse)PARSER.parseFrom(input);
/*       */     }
/*       */     public static EnterSceneResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (EnterSceneResponse)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */     public static EnterSceneResponse parseDelimitedFrom(InputStream input) throws IOException {
/*       */       return (EnterSceneResponse)PARSER.parseDelimitedFrom(input);
/*       */     }
/*       */     public static EnterSceneResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (EnterSceneResponse)PARSER.parseDelimitedFrom(input, extensionRegistry);
/*       */     }
/*       */     public static EnterSceneResponse parseFrom(CodedInputStream input) throws IOException {
/*       */       return (EnterSceneResponse)PARSER.parseFrom(input);
/*       */     }
/*       */     public static EnterSceneResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (EnterSceneResponse)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */     public static Builder newBuilder() {
/*       */       return Builder.create();
/*       */     }
/*       */     public Builder newBuilderForType() {
/*       */       return newBuilder();
/*       */     }
/*       */     public static Builder newBuilder(EnterSceneResponse prototype) {
/*       */       return newBuilder().mergeFrom(prototype);
/*       */     }
/*       */     public Builder toBuilder() {
/*       */       return newBuilder(this);
/*       */     }
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
/*       */       Builder builder = new Builder(parent);
/*       */       return builder;
/*       */     }
/*       */     public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.EnterSceneResponseOrBuilder { private int bitField0_; private int s2CCode_; private Object s2CMsg_; private Object s2CInstanceId_;
/*       */       private int s2CAreaIndex_;
/*       */       
/*       */       public static final Descriptors.Descriptor getDescriptor() {
/*       */         return PlayerHandler.internal_static_pomelo_area_EnterSceneResponse_descriptor;
/*       */       }
/*       */       
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */         return PlayerHandler.internal_static_pomelo_area_EnterSceneResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.EnterSceneResponse.class, Builder.class);
/*       */       }
/*       */       
/*       */       private Builder() {
/*       */         this.s2CMsg_ = "";
/*       */         this.s2CInstanceId_ = "";
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */       
/*       */       private Builder(GeneratedMessage.BuilderParent parent) {
/*       */         super(parent);
/*       */         this.s2CMsg_ = "";
/*       */         this.s2CInstanceId_ = "";
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */       
/*       */       private void maybeForceBuilderInitialization() {
/*       */         if (PlayerHandler.EnterSceneResponse.alwaysUseFieldBuilders);
/*       */       }
/*       */       
/*       */       private static Builder create() {
/*       */         return new Builder();
/*       */       }
/*       */       
/*       */       public Builder clear() {
/*       */         super.clear();
/*       */         this.s2CCode_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CMsg_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.s2CInstanceId_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.s2CAreaIndex_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clone() {
/*       */         return create().mergeFrom(buildPartial());
/*       */       }
/*       */       
/*       */       public Descriptors.Descriptor getDescriptorForType() {
/*       */         return PlayerHandler.internal_static_pomelo_area_EnterSceneResponse_descriptor;
/*       */       }
/*       */       
/*       */       public PlayerHandler.EnterSceneResponse getDefaultInstanceForType() {
/*       */         return PlayerHandler.EnterSceneResponse.getDefaultInstance();
/*       */       }
/*       */       
/*       */       public PlayerHandler.EnterSceneResponse build() {
/*       */         PlayerHandler.EnterSceneResponse result = buildPartial();
/*       */         if (!result.isInitialized())
/*       */           throw newUninitializedMessageException(result); 
/*       */         return result;
/*       */       }
/*       */       
/*       */       public PlayerHandler.EnterSceneResponse buildPartial() {
/*       */         PlayerHandler.EnterSceneResponse result = new PlayerHandler.EnterSceneResponse(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1)
/*       */           to_bitField0_ |= 0x1; 
/*       */         result.s2CCode_ = this.s2CCode_;
/*       */         if ((from_bitField0_ & 0x2) == 2)
/*       */           to_bitField0_ |= 0x2; 
/*       */         result.s2CMsg_ = this.s2CMsg_;
/*       */         if ((from_bitField0_ & 0x4) == 4)
/*       */           to_bitField0_ |= 0x4; 
/*       */         result.s2CInstanceId_ = this.s2CInstanceId_;
/*       */         if ((from_bitField0_ & 0x8) == 8)
/*       */           to_bitField0_ |= 0x8; 
/*       */         result.s2CAreaIndex_ = this.s2CAreaIndex_;
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result;
/*       */       }
/*       */       
/*       */       public Builder mergeFrom(Message other) {
/*       */         if (other instanceof PlayerHandler.EnterSceneResponse)
/*       */           return mergeFrom((PlayerHandler.EnterSceneResponse)other); 
/*       */         super.mergeFrom(other);
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder mergeFrom(PlayerHandler.EnterSceneResponse other) {
/*       */         if (other == PlayerHandler.EnterSceneResponse.getDefaultInstance())
/*       */           return this; 
/*       */         if (other.hasS2CCode())
/*       */           setS2CCode(other.getS2CCode()); 
/*       */         if (other.hasS2CMsg()) {
/*       */           this.bitField0_ |= 0x2;
/*       */           this.s2CMsg_ = other.s2CMsg_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasS2CInstanceId()) {
/*       */           this.bitField0_ |= 0x4;
/*       */           this.s2CInstanceId_ = other.s2CInstanceId_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasS2CAreaIndex())
/*       */           setS2CAreaIndex(other.getS2CAreaIndex()); 
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this;
/*       */       }
/*       */       
/*       */       public final boolean isInitialized() {
/*       */         if (!hasS2CCode())
/*       */           return false; 
/*       */         return true;
/*       */       }
/*       */       
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */         PlayerHandler.EnterSceneResponse parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (PlayerHandler.EnterSceneResponse)PlayerHandler.EnterSceneResponse.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (PlayerHandler.EnterSceneResponse)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null)
/*       */             mergeFrom(parsedMessage); 
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public boolean hasS2CCode() {
/*       */         return ((this.bitField0_ & 0x1) == 1);
/*       */       }
/*       */       
/*       */       public int getS2CCode() {
/*       */         return this.s2CCode_;
/*       */       }
/*       */       
/*       */       public Builder setS2CCode(int value) {
/*       */         this.bitField0_ |= 0x1;
/*       */         this.s2CCode_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearS2CCode() {
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CCode_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public boolean hasS2CMsg() {
/*       */         return ((this.bitField0_ & 0x2) == 2);
/*       */       }
/*       */       
/*       */       public String getS2CMsg() {
/*       */         Object ref = this.s2CMsg_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.s2CMsg_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */       
/*       */       public ByteString getS2CMsgBytes() {
/*       */         Object ref = this.s2CMsg_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CMsg_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */       
/*       */       public Builder setS2CMsg(String value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearS2CMsg() {
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.s2CMsg_ = PlayerHandler.EnterSceneResponse.getDefaultInstance().getS2CMsg();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder setS2CMsgBytes(ByteString value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public boolean hasS2CInstanceId() {
/*       */         return ((this.bitField0_ & 0x4) == 4);
/*       */       }
/*       */       
/*       */       public String getS2CInstanceId() {
/*       */         Object ref = this.s2CInstanceId_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.s2CInstanceId_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */       
/*       */       public ByteString getS2CInstanceIdBytes() {
/*       */         Object ref = this.s2CInstanceId_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CInstanceId_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */       
/*       */       public Builder setS2CInstanceId(String value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x4;
/*       */         this.s2CInstanceId_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearS2CInstanceId() {
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.s2CInstanceId_ = PlayerHandler.EnterSceneResponse.getDefaultInstance().getS2CInstanceId();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder setS2CInstanceIdBytes(ByteString value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x4;
/*       */         this.s2CInstanceId_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public boolean hasS2CAreaIndex() {
/*       */         return ((this.bitField0_ & 0x8) == 8);
/*       */       }
/*       */       
/*       */       public int getS2CAreaIndex() {
/*       */         return this.s2CAreaIndex_;
/*       */       }
/*       */       
/*       */       public Builder setS2CAreaIndex(int value) {
/*       */         this.bitField0_ |= 0x8;
/*       */         this.s2CAreaIndex_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearS2CAreaIndex() {
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.s2CAreaIndex_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       } } }
/*       */   
/*  1709 */   public static final class BattleEventNotify extends GeneratedMessage implements BattleEventNotifyOrBuilder { private static final BattleEventNotify defaultInstance = new BattleEventNotify(true); private final UnknownFieldSet unknownFields; private BattleEventNotify(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private BattleEventNotify(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static BattleEventNotify getDefaultInstance() { return defaultInstance; } public BattleEventNotify getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private BattleEventNotify(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: this.bitField0_ |= 0x1; this.c2SData_ = input.readBytes(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_BattleEventNotify_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_BattleEventNotify_fieldAccessorTable.ensureFieldAccessorsInitialized(BattleEventNotify.class, Builder.class); } public static Parser<BattleEventNotify> PARSER = (Parser<BattleEventNotify>)new AbstractParser<BattleEventNotify>() { public PlayerHandler.BattleEventNotify parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.BattleEventNotify(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_DATA_FIELD_NUMBER = 1; private ByteString c2SData_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<BattleEventNotify> getParserForType() { return PARSER; } public boolean hasC2SData() { return ((this.bitField0_ & 0x1) == 1); } public ByteString getC2SData() { return this.c2SData_; } private void initFields() { this.c2SData_ = ByteString.EMPTY; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SData()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, this.c2SData_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, this.c2SData_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static BattleEventNotify parseFrom(ByteString data) throws InvalidProtocolBufferException { return (BattleEventNotify)PARSER.parseFrom(data); } public static BattleEventNotify parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (BattleEventNotify)PARSER.parseFrom(data, extensionRegistry); } public static BattleEventNotify parseFrom(byte[] data) throws InvalidProtocolBufferException { return (BattleEventNotify)PARSER.parseFrom(data); } public static BattleEventNotify parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (BattleEventNotify)PARSER.parseFrom(data, extensionRegistry); } public static BattleEventNotify parseFrom(InputStream input) throws IOException { return (BattleEventNotify)PARSER.parseFrom(input); } public static BattleEventNotify parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (BattleEventNotify)PARSER.parseFrom(input, extensionRegistry); } public static BattleEventNotify parseDelimitedFrom(InputStream input) throws IOException { return (BattleEventNotify)PARSER.parseDelimitedFrom(input); } public static BattleEventNotify parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (BattleEventNotify)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static BattleEventNotify parseFrom(CodedInputStream input) throws IOException { return (BattleEventNotify)PARSER.parseFrom(input); } public static BattleEventNotify parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (BattleEventNotify)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(BattleEventNotify prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.BattleEventNotifyOrBuilder {
/*  1710 */       private int bitField0_; private ByteString c2SData_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_BattleEventNotify_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_BattleEventNotify_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.BattleEventNotify.class, Builder.class); } private Builder() { this.c2SData_ = ByteString.EMPTY; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SData_ = ByteString.EMPTY; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.BattleEventNotify.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SData_ = ByteString.EMPTY; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_BattleEventNotify_descriptor; } public PlayerHandler.BattleEventNotify getDefaultInstanceForType() { return PlayerHandler.BattleEventNotify.getDefaultInstance(); } public PlayerHandler.BattleEventNotify build() { PlayerHandler.BattleEventNotify result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.BattleEventNotify buildPartial() { PlayerHandler.BattleEventNotify result = new PlayerHandler.BattleEventNotify(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SData_ = this.c2SData_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.BattleEventNotify) return mergeFrom((PlayerHandler.BattleEventNotify)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.BattleEventNotify other) { if (other == PlayerHandler.BattleEventNotify.getDefaultInstance()) return this;  if (other.hasC2SData()) setC2SData(other.getC2SData());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SData()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.BattleEventNotify parsedMessage = null; try { parsedMessage = (PlayerHandler.BattleEventNotify)PlayerHandler.BattleEventNotify.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.BattleEventNotify)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SData() { return ((this.bitField0_ & 0x1) == 1); } public ByteString getC2SData() { return this.c2SData_; } public Builder setC2SData(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SData_ = value; onChanged(); return this; } public Builder clearC2SData() { this.bitField0_ &= 0xFFFFFFFE; this.c2SData_ = PlayerHandler.BattleEventNotify.getDefaultInstance().getC2SData(); onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */      }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class PickItemRequest
/*       */     extends GeneratedMessage
/*       */     implements PickItemRequestOrBuilder
/*       */   {
/*  2366 */     private static final PickItemRequest defaultInstance = new PickItemRequest(true); private final UnknownFieldSet unknownFields; private PickItemRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private PickItemRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static PickItemRequest getDefaultInstance() { return defaultInstance; } public PickItemRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private PickItemRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2SInstanceId_ = bs; break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.c2SItemId_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_PickItemRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_PickItemRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PickItemRequest.class, Builder.class); } public static Parser<PickItemRequest> PARSER = (Parser<PickItemRequest>)new AbstractParser<PickItemRequest>() { public PlayerHandler.PickItemRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.PickItemRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_INSTANCEID_FIELD_NUMBER = 1; private Object c2SInstanceId_; public static final int C2S_ITEMID_FIELD_NUMBER = 2; private Object c2SItemId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<PickItemRequest> getParserForType() { return PARSER; } public boolean hasC2SInstanceId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SInstanceId() { Object ref = this.c2SInstanceId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SInstanceId_ = s;  return s; } public ByteString getC2SInstanceIdBytes() { Object ref = this.c2SInstanceId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SInstanceId_ = b; return b; }  return (ByteString)ref; } public boolean hasC2SItemId() { return ((this.bitField0_ & 0x2) == 2); } public String getC2SItemId() { Object ref = this.c2SItemId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SItemId_ = s;  return s; } public ByteString getC2SItemIdBytes() { Object ref = this.c2SItemId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SItemId_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.c2SInstanceId_ = ""; this.c2SItemId_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SInstanceId()) { this.memoizedIsInitialized = 0; return false; }  if (!hasC2SItemId()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SInstanceIdBytes());  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getC2SItemIdBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SInstanceIdBytes());  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getC2SItemIdBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static PickItemRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (PickItemRequest)PARSER.parseFrom(data); } public static PickItemRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PickItemRequest)PARSER.parseFrom(data, extensionRegistry); } public static PickItemRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (PickItemRequest)PARSER.parseFrom(data); } public static PickItemRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PickItemRequest)PARSER.parseFrom(data, extensionRegistry); } public static PickItemRequest parseFrom(InputStream input) throws IOException { return (PickItemRequest)PARSER.parseFrom(input); } public static PickItemRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PickItemRequest)PARSER.parseFrom(input, extensionRegistry); } public static PickItemRequest parseDelimitedFrom(InputStream input) throws IOException { return (PickItemRequest)PARSER.parseDelimitedFrom(input); } public static PickItemRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PickItemRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static PickItemRequest parseFrom(CodedInputStream input) throws IOException { return (PickItemRequest)PARSER.parseFrom(input); } public static PickItemRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PickItemRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(PickItemRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.PickItemRequestOrBuilder {
/*  2367 */       private int bitField0_; private Object c2SInstanceId_; private Object c2SItemId_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_PickItemRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_PickItemRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.PickItemRequest.class, Builder.class); } private Builder() { this.c2SInstanceId_ = ""; this.c2SItemId_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SInstanceId_ = ""; this.c2SItemId_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.PickItemRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SInstanceId_ = ""; this.bitField0_ &= 0xFFFFFFFE; this.c2SItemId_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_PickItemRequest_descriptor; } public PlayerHandler.PickItemRequest getDefaultInstanceForType() { return PlayerHandler.PickItemRequest.getDefaultInstance(); } public PlayerHandler.PickItemRequest build() { PlayerHandler.PickItemRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.PickItemRequest buildPartial() { PlayerHandler.PickItemRequest result = new PlayerHandler.PickItemRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SInstanceId_ = this.c2SInstanceId_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.c2SItemId_ = this.c2SItemId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.PickItemRequest) return mergeFrom((PlayerHandler.PickItemRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.PickItemRequest other) { if (other == PlayerHandler.PickItemRequest.getDefaultInstance()) return this;  if (other.hasC2SInstanceId()) { this.bitField0_ |= 0x1; this.c2SInstanceId_ = other.c2SInstanceId_; onChanged(); }  if (other.hasC2SItemId()) { this.bitField0_ |= 0x2; this.c2SItemId_ = other.c2SItemId_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SInstanceId()) return false;  if (!hasC2SItemId()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.PickItemRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.PickItemRequest)PlayerHandler.PickItemRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.PickItemRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SInstanceId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SInstanceId() { Object ref = this.c2SInstanceId_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SInstanceId_ = s;  return s; }  return (String)ref; } public ByteString getC2SInstanceIdBytes() { Object ref = this.c2SInstanceId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SInstanceId_ = b; return b; }  return (ByteString)ref; } public Builder setC2SInstanceId(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SInstanceId_ = value; onChanged(); return this; } public Builder clearC2SInstanceId() { this.bitField0_ &= 0xFFFFFFFE; this.c2SInstanceId_ = PlayerHandler.PickItemRequest.getDefaultInstance().getC2SInstanceId(); onChanged(); return this; } public Builder setC2SInstanceIdBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SInstanceId_ = value; onChanged(); return this; } public boolean hasC2SItemId() { return ((this.bitField0_ & 0x2) == 2); } public String getC2SItemId() { Object ref = this.c2SItemId_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SItemId_ = s;  return s; }  return (String)ref; } public ByteString getC2SItemIdBytes() { Object ref = this.c2SItemId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SItemId_ = b; return b; }  return (ByteString)ref; } public Builder setC2SItemId(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.c2SItemId_ = value; onChanged(); return this; } public Builder clearC2SItemId() { this.bitField0_ &= 0xFFFFFFFD; this.c2SItemId_ = PlayerHandler.PickItemRequest.getDefaultInstance().getC2SItemId(); onChanged(); return this; } public Builder setC2SItemIdBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.c2SItemId_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class PickItemResponse
/*       */     extends GeneratedMessage
/*       */     implements PickItemResponseOrBuilder
/*       */   {
/*  2936 */     private static final PickItemResponse defaultInstance = new PickItemResponse(true); private final UnknownFieldSet unknownFields; private PickItemResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private PickItemResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static PickItemResponse getDefaultInstance() { return defaultInstance; } public PickItemResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private PickItemResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_PickItemResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_PickItemResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PickItemResponse.class, Builder.class); } public static Parser<PickItemResponse> PARSER = (Parser<PickItemResponse>)new AbstractParser<PickItemResponse>() { public PlayerHandler.PickItemResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.PickItemResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<PickItemResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static PickItemResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (PickItemResponse)PARSER.parseFrom(data); } public static PickItemResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PickItemResponse)PARSER.parseFrom(data, extensionRegistry); } public static PickItemResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (PickItemResponse)PARSER.parseFrom(data); } public static PickItemResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PickItemResponse)PARSER.parseFrom(data, extensionRegistry); } public static PickItemResponse parseFrom(InputStream input) throws IOException { return (PickItemResponse)PARSER.parseFrom(input); } public static PickItemResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PickItemResponse)PARSER.parseFrom(input, extensionRegistry); } public static PickItemResponse parseDelimitedFrom(InputStream input) throws IOException { return (PickItemResponse)PARSER.parseDelimitedFrom(input); } public static PickItemResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PickItemResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static PickItemResponse parseFrom(CodedInputStream input) throws IOException { return (PickItemResponse)PARSER.parseFrom(input); } public static PickItemResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PickItemResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(PickItemResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.PickItemResponseOrBuilder {
/*  2937 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_PickItemResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_PickItemResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.PickItemResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.PickItemResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_PickItemResponse_descriptor; } public PlayerHandler.PickItemResponse getDefaultInstanceForType() { return PlayerHandler.PickItemResponse.getDefaultInstance(); } public PlayerHandler.PickItemResponse build() { PlayerHandler.PickItemResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.PickItemResponse buildPartial() { PlayerHandler.PickItemResponse result = new PlayerHandler.PickItemResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.PickItemResponse) return mergeFrom((PlayerHandler.PickItemResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.PickItemResponse other) { if (other == PlayerHandler.PickItemResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.PickItemResponse parsedMessage = null; try { parsedMessage = (PlayerHandler.PickItemResponse)PlayerHandler.PickItemResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.PickItemResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = PlayerHandler.PickItemResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ChangeAreaXYRequest
/*       */     extends GeneratedMessage
/*       */     implements ChangeAreaXYRequestOrBuilder
/*       */   {
/*  3662 */     private static final ChangeAreaXYRequest defaultInstance = new ChangeAreaXYRequest(true); private final UnknownFieldSet unknownFields; private ChangeAreaXYRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ChangeAreaXYRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ChangeAreaXYRequest getDefaultInstance() { return defaultInstance; } public ChangeAreaXYRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ChangeAreaXYRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.mapId_ = input.readInt32(); break;case 16: this.bitField0_ |= 0x2; this.posx_ = input.readInt32(); break;case 24: this.bitField0_ |= 0x4; this.posy_ = input.readInt32(); break;case 34: bs = input.readBytes(); this.bitField0_ |= 0x8; this.instanceId_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ChangeAreaXYRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ChangeAreaXYRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ChangeAreaXYRequest.class, Builder.class); } public static Parser<ChangeAreaXYRequest> PARSER = (Parser<ChangeAreaXYRequest>)new AbstractParser<ChangeAreaXYRequest>() { public PlayerHandler.ChangeAreaXYRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.ChangeAreaXYRequest(input, extensionRegistry); } }
/*  3663 */     ; private int bitField0_; public static final int MAPID_FIELD_NUMBER = 1; private int mapId_; public static final int POSX_FIELD_NUMBER = 2; private int posx_; public static final int POSY_FIELD_NUMBER = 3; private int posy_; public static final int INSTANCEID_FIELD_NUMBER = 4; private Object instanceId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ChangeAreaXYRequest> getParserForType() { return PARSER; } public boolean hasMapId() { return ((this.bitField0_ & 0x1) == 1); } public int getMapId() { return this.mapId_; } public boolean hasPosx() { return ((this.bitField0_ & 0x2) == 2); } static { defaultInstance.initFields(); }
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getPosx() {
/*       */       return this.posx_;
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public boolean hasPosy() {
/*       */       return ((this.bitField0_ & 0x4) == 4);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public int getPosy() {
/*       */       return this.posy_;
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public boolean hasInstanceId() {
/*       */       return ((this.bitField0_ & 0x8) == 8);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public String getInstanceId() {
/*       */       Object ref = this.instanceId_;
/*       */       if (ref instanceof String) {
/*       */         return (String)ref;
/*       */       }
/*       */       ByteString bs = (ByteString)ref;
/*       */       String s = bs.toStringUtf8();
/*       */       if (bs.isValidUtf8()) {
/*       */         this.instanceId_ = s;
/*       */       }
/*       */       return s;
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public ByteString getInstanceIdBytes() {
/*       */       Object ref = this.instanceId_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.instanceId_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref;
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     private void initFields() {
/*       */       this.mapId_ = 0;
/*       */       this.posx_ = 0;
/*       */       this.posy_ = 0;
/*       */       this.instanceId_ = "";
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public final boolean isInitialized() {
/*       */       byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1) {
/*       */         return true;
/*       */       }
/*       */       if (isInitialized == 0) {
/*       */         return false;
/*       */       }
/*       */       if (!hasMapId()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true;
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public void writeTo(CodedOutputStream output) throws IOException {
/*       */       getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         output.writeInt32(1, this.mapId_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         output.writeInt32(2, this.posx_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x4) == 4) {
/*       */         output.writeInt32(3, this.posy_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x8) == 8) {
/*       */         output.writeBytes(4, getInstanceIdBytes());
/*       */       }
/*       */       getUnknownFields().writeTo(output);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public int getSerializedSize() {
/*       */       int size = this.memoizedSerializedSize;
/*       */       if (size != -1) {
/*       */         return size;
/*       */       }
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         size += CodedOutputStream.computeInt32Size(1, this.mapId_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         size += CodedOutputStream.computeInt32Size(2, this.posx_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x4) == 4) {
/*       */         size += CodedOutputStream.computeInt32Size(3, this.posy_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x8) == 8) {
/*       */         size += CodedOutputStream.computeBytesSize(4, getInstanceIdBytes());
/*       */       }
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size;
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     protected Object writeReplace() throws ObjectStreamException {
/*       */       return super.writeReplace();
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static ChangeAreaXYRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
/*       */       return (ChangeAreaXYRequest)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static ChangeAreaXYRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (ChangeAreaXYRequest)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static ChangeAreaXYRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
/*       */       return (ChangeAreaXYRequest)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static ChangeAreaXYRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (ChangeAreaXYRequest)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static ChangeAreaXYRequest parseFrom(InputStream input) throws IOException {
/*       */       return (ChangeAreaXYRequest)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static ChangeAreaXYRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (ChangeAreaXYRequest)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static ChangeAreaXYRequest parseDelimitedFrom(InputStream input) throws IOException {
/*       */       return (ChangeAreaXYRequest)PARSER.parseDelimitedFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static ChangeAreaXYRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (ChangeAreaXYRequest)PARSER.parseDelimitedFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static ChangeAreaXYRequest parseFrom(CodedInputStream input) throws IOException {
/*       */       return (ChangeAreaXYRequest)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static ChangeAreaXYRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (ChangeAreaXYRequest)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static Builder newBuilder() {
/*       */       return Builder.create();
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public Builder newBuilderForType() {
/*       */       return newBuilder();
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static Builder newBuilder(ChangeAreaXYRequest prototype) {
/*       */       return newBuilder().mergeFrom(prototype);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public Builder toBuilder() {
/*       */       return newBuilder(this);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
/*       */       Builder builder = new Builder(parent);
/*       */       return builder;
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static final class Builder
/*       */       extends GeneratedMessage.Builder<Builder>
/*       */       implements PlayerHandler.ChangeAreaXYRequestOrBuilder
/*       */     {
/*       */       private int bitField0_;
/*       */ 
/*       */       
/*       */       private int mapId_;
/*       */ 
/*       */       
/*       */       private int posx_;
/*       */ 
/*       */       
/*       */       private int posy_;
/*       */ 
/*       */       
/*       */       private Object instanceId_;
/*       */ 
/*       */ 
/*       */       
/*       */       public static final Descriptors.Descriptor getDescriptor() {
/*       */         return PlayerHandler.internal_static_pomelo_area_ChangeAreaXYRequest_descriptor;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */         return PlayerHandler.internal_static_pomelo_area_ChangeAreaXYRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.ChangeAreaXYRequest.class, Builder.class);
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       private Builder() {
/*       */         this.instanceId_ = "";
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       private Builder(GeneratedMessage.BuilderParent parent) {
/*       */         super(parent);
/*       */         this.instanceId_ = "";
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       private void maybeForceBuilderInitialization() {
/*       */         if (PlayerHandler.ChangeAreaXYRequest.alwaysUseFieldBuilders);
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       private static Builder create() {
/*       */         return new Builder();
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clear() {
/*       */         super.clear();
/*       */         this.mapId_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.posx_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.posy_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.instanceId_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clone() {
/*       */         return create().mergeFrom(buildPartial());
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Descriptors.Descriptor getDescriptorForType() {
/*       */         return PlayerHandler.internal_static_pomelo_area_ChangeAreaXYRequest_descriptor;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.ChangeAreaXYRequest getDefaultInstanceForType() {
/*       */         return PlayerHandler.ChangeAreaXYRequest.getDefaultInstance();
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.ChangeAreaXYRequest build() {
/*       */         PlayerHandler.ChangeAreaXYRequest result = buildPartial();
/*       */         if (!result.isInitialized()) {
/*       */           throw newUninitializedMessageException(result);
/*       */         }
/*       */         return result;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.ChangeAreaXYRequest buildPartial() {
/*       */         PlayerHandler.ChangeAreaXYRequest result = new PlayerHandler.ChangeAreaXYRequest(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1) {
/*       */           to_bitField0_ |= 0x1;
/*       */         }
/*       */         result.mapId_ = this.mapId_;
/*       */         if ((from_bitField0_ & 0x2) == 2) {
/*       */           to_bitField0_ |= 0x2;
/*       */         }
/*       */         result.posx_ = this.posx_;
/*       */         if ((from_bitField0_ & 0x4) == 4) {
/*       */           to_bitField0_ |= 0x4;
/*       */         }
/*       */         result.posy_ = this.posy_;
/*       */         if ((from_bitField0_ & 0x8) == 8) {
/*       */           to_bitField0_ |= 0x8;
/*       */         }
/*       */         result.instanceId_ = this.instanceId_;
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(Message other) {
/*       */         if (other instanceof PlayerHandler.ChangeAreaXYRequest) {
/*       */           return mergeFrom((PlayerHandler.ChangeAreaXYRequest)other);
/*       */         }
/*       */         super.mergeFrom(other);
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(PlayerHandler.ChangeAreaXYRequest other) {
/*       */         if (other == PlayerHandler.ChangeAreaXYRequest.getDefaultInstance()) {
/*       */           return this;
/*       */         }
/*       */         if (other.hasMapId()) {
/*       */           setMapId(other.getMapId());
/*       */         }
/*       */         if (other.hasPosx()) {
/*       */           setPosx(other.getPosx());
/*       */         }
/*       */         if (other.hasPosy()) {
/*       */           setPosy(other.getPosy());
/*       */         }
/*       */         if (other.hasInstanceId()) {
/*       */           this.bitField0_ |= 0x8;
/*       */           this.instanceId_ = other.instanceId_;
/*       */           onChanged();
/*       */         } 
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public final boolean isInitialized() {
/*       */         if (!hasMapId()) {
/*       */           return false;
/*       */         }
/*       */         return true;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */         PlayerHandler.ChangeAreaXYRequest parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (PlayerHandler.ChangeAreaXYRequest)PlayerHandler.ChangeAreaXYRequest.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (PlayerHandler.ChangeAreaXYRequest)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null) {
/*       */             mergeFrom(parsedMessage);
/*       */           }
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasMapId() {
/*       */         return ((this.bitField0_ & 0x1) == 1);
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public int getMapId() {
/*       */         return this.mapId_;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setMapId(int value) {
/*       */         this.bitField0_ |= 0x1;
/*       */         this.mapId_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearMapId() {
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.mapId_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasPosx() {
/*       */         return ((this.bitField0_ & 0x2) == 2);
/*       */       }
/*       */ 
/*       */       
/*       */       public int getPosx() {
/*       */         return this.posx_;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder setPosx(int value) {
/*       */         this.bitField0_ |= 0x2;
/*       */         this.posx_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder clearPosx() {
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.posx_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public boolean hasPosy() {
/*       */         return ((this.bitField0_ & 0x4) == 4);
/*       */       }
/*       */ 
/*       */       
/*       */       public int getPosy() {
/*       */         return this.posy_;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder setPosy(int value) {
/*       */         this.bitField0_ |= 0x4;
/*       */         this.posy_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder clearPosy() {
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.posy_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public boolean hasInstanceId() {
/*       */         return ((this.bitField0_ & 0x8) == 8);
/*       */       }
/*       */ 
/*       */       
/*       */       public String getInstanceId() {
/*       */         Object ref = this.instanceId_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8()) {
/*       */             this.instanceId_ = s;
/*       */           }
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */ 
/*       */       
/*       */       public ByteString getInstanceIdBytes() {
/*       */         Object ref = this.instanceId_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.instanceId_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder setInstanceId(String value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x8;
/*       */         this.instanceId_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder clearInstanceId() {
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.instanceId_ = PlayerHandler.ChangeAreaXYRequest.getDefaultInstance().getInstanceId();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder setInstanceIdBytes(ByteString value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x8;
/*       */         this.instanceId_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */     }
/*       */   }
/*       */ 
/*       */   
/*       */   public static final class ChangeAreaXYResponse
/*       */     extends GeneratedMessage
/*       */     implements ChangeAreaXYResponseOrBuilder
/*       */   {
/*  4224 */     private static final ChangeAreaXYResponse defaultInstance = new ChangeAreaXYResponse(true); private final UnknownFieldSet unknownFields; private ChangeAreaXYResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ChangeAreaXYResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ChangeAreaXYResponse getDefaultInstance() { return defaultInstance; } public ChangeAreaXYResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ChangeAreaXYResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ChangeAreaXYResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ChangeAreaXYResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ChangeAreaXYResponse.class, Builder.class); } public static Parser<ChangeAreaXYResponse> PARSER = (Parser<ChangeAreaXYResponse>)new AbstractParser<ChangeAreaXYResponse>() { public PlayerHandler.ChangeAreaXYResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.ChangeAreaXYResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ChangeAreaXYResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ChangeAreaXYResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ChangeAreaXYResponse)PARSER.parseFrom(data); } public static ChangeAreaXYResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ChangeAreaXYResponse)PARSER.parseFrom(data, extensionRegistry); } public static ChangeAreaXYResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ChangeAreaXYResponse)PARSER.parseFrom(data); } public static ChangeAreaXYResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ChangeAreaXYResponse)PARSER.parseFrom(data, extensionRegistry); } public static ChangeAreaXYResponse parseFrom(InputStream input) throws IOException { return (ChangeAreaXYResponse)PARSER.parseFrom(input); } public static ChangeAreaXYResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ChangeAreaXYResponse)PARSER.parseFrom(input, extensionRegistry); } public static ChangeAreaXYResponse parseDelimitedFrom(InputStream input) throws IOException { return (ChangeAreaXYResponse)PARSER.parseDelimitedFrom(input); } public static ChangeAreaXYResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ChangeAreaXYResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ChangeAreaXYResponse parseFrom(CodedInputStream input) throws IOException { return (ChangeAreaXYResponse)PARSER.parseFrom(input); } public static ChangeAreaXYResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ChangeAreaXYResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ChangeAreaXYResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.ChangeAreaXYResponseOrBuilder {
/*  4225 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ChangeAreaXYResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ChangeAreaXYResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.ChangeAreaXYResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.ChangeAreaXYResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_ChangeAreaXYResponse_descriptor; } public PlayerHandler.ChangeAreaXYResponse getDefaultInstanceForType() { return PlayerHandler.ChangeAreaXYResponse.getDefaultInstance(); } public PlayerHandler.ChangeAreaXYResponse build() { PlayerHandler.ChangeAreaXYResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.ChangeAreaXYResponse buildPartial() { PlayerHandler.ChangeAreaXYResponse result = new PlayerHandler.ChangeAreaXYResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.ChangeAreaXYResponse) return mergeFrom((PlayerHandler.ChangeAreaXYResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.ChangeAreaXYResponse other) { if (other == PlayerHandler.ChangeAreaXYResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.ChangeAreaXYResponse parsedMessage = null; try { parsedMessage = (PlayerHandler.ChangeAreaXYResponse)PlayerHandler.ChangeAreaXYResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.ChangeAreaXYResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = PlayerHandler.ChangeAreaXYResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ChangeAreaByTaskRequest
/*       */     extends GeneratedMessage
/*       */     implements ChangeAreaByTaskRequestOrBuilder
/*       */   {
/*  4973 */     private static final ChangeAreaByTaskRequest defaultInstance = new ChangeAreaByTaskRequest(true); private final UnknownFieldSet unknownFields; private ChangeAreaByTaskRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ChangeAreaByTaskRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ChangeAreaByTaskRequest getDefaultInstance() { return defaultInstance; } public ChangeAreaByTaskRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ChangeAreaByTaskRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.mapId_ = input.readInt32(); break;case 16: this.bitField0_ |= 0x2; this.taskId_ = input.readInt32(); break;case 24: this.bitField0_ |= 0x4; this.posx_ = input.readInt32(); break;case 32: this.bitField0_ |= 0x8; this.posy_ = input.readInt32(); break;case 40: this.bitField0_ |= 0x10; this.point_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ChangeAreaByTaskRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ChangeAreaByTaskRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ChangeAreaByTaskRequest.class, Builder.class); } public static Parser<ChangeAreaByTaskRequest> PARSER = (Parser<ChangeAreaByTaskRequest>)new AbstractParser<ChangeAreaByTaskRequest>() { public PlayerHandler.ChangeAreaByTaskRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.ChangeAreaByTaskRequest(input, extensionRegistry); } }
/*  4974 */     ; private int bitField0_; public static final int MAPID_FIELD_NUMBER = 1; private int mapId_; public static final int TASKID_FIELD_NUMBER = 2; private int taskId_; public static final int POSX_FIELD_NUMBER = 3; private int posx_; public static final int POSY_FIELD_NUMBER = 4; private int posy_; public static final int POINT_FIELD_NUMBER = 5; private int point_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ChangeAreaByTaskRequest> getParserForType() { return PARSER; } public boolean hasMapId() { return ((this.bitField0_ & 0x1) == 1); } public int getMapId() { return this.mapId_; } public boolean hasTaskId() { return ((this.bitField0_ & 0x2) == 2); } static { defaultInstance.initFields(); }
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getTaskId() {
/*       */       return this.taskId_;
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public boolean hasPosx() {
/*       */       return ((this.bitField0_ & 0x4) == 4);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public int getPosx() {
/*       */       return this.posx_;
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public boolean hasPosy() {
/*       */       return ((this.bitField0_ & 0x8) == 8);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public int getPosy() {
/*       */       return this.posy_;
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public boolean hasPoint() {
/*       */       return ((this.bitField0_ & 0x10) == 16);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public int getPoint() {
/*       */       return this.point_;
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     private void initFields() {
/*       */       this.mapId_ = 0;
/*       */       this.taskId_ = 0;
/*       */       this.posx_ = 0;
/*       */       this.posy_ = 0;
/*       */       this.point_ = 0;
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public final boolean isInitialized() {
/*       */       byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1) {
/*       */         return true;
/*       */       }
/*       */       if (isInitialized == 0) {
/*       */         return false;
/*       */       }
/*       */       if (!hasMapId()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasTaskId()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasPosx()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasPosy()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true;
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public void writeTo(CodedOutputStream output) throws IOException {
/*       */       getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         output.writeInt32(1, this.mapId_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         output.writeInt32(2, this.taskId_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x4) == 4) {
/*       */         output.writeInt32(3, this.posx_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x8) == 8) {
/*       */         output.writeInt32(4, this.posy_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x10) == 16) {
/*       */         output.writeInt32(5, this.point_);
/*       */       }
/*       */       getUnknownFields().writeTo(output);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public int getSerializedSize() {
/*       */       int size = this.memoizedSerializedSize;
/*       */       if (size != -1) {
/*       */         return size;
/*       */       }
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         size += CodedOutputStream.computeInt32Size(1, this.mapId_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         size += CodedOutputStream.computeInt32Size(2, this.taskId_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x4) == 4) {
/*       */         size += CodedOutputStream.computeInt32Size(3, this.posx_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x8) == 8) {
/*       */         size += CodedOutputStream.computeInt32Size(4, this.posy_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x10) == 16) {
/*       */         size += CodedOutputStream.computeInt32Size(5, this.point_);
/*       */       }
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size;
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     protected Object writeReplace() throws ObjectStreamException {
/*       */       return super.writeReplace();
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static ChangeAreaByTaskRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
/*       */       return (ChangeAreaByTaskRequest)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static ChangeAreaByTaskRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (ChangeAreaByTaskRequest)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static ChangeAreaByTaskRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
/*       */       return (ChangeAreaByTaskRequest)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static ChangeAreaByTaskRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (ChangeAreaByTaskRequest)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static ChangeAreaByTaskRequest parseFrom(InputStream input) throws IOException {
/*       */       return (ChangeAreaByTaskRequest)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static ChangeAreaByTaskRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (ChangeAreaByTaskRequest)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static ChangeAreaByTaskRequest parseDelimitedFrom(InputStream input) throws IOException {
/*       */       return (ChangeAreaByTaskRequest)PARSER.parseDelimitedFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static ChangeAreaByTaskRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (ChangeAreaByTaskRequest)PARSER.parseDelimitedFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static ChangeAreaByTaskRequest parseFrom(CodedInputStream input) throws IOException {
/*       */       return (ChangeAreaByTaskRequest)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static ChangeAreaByTaskRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (ChangeAreaByTaskRequest)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static Builder newBuilder() {
/*       */       return Builder.create();
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public Builder newBuilderForType() {
/*       */       return newBuilder();
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static Builder newBuilder(ChangeAreaByTaskRequest prototype) {
/*       */       return newBuilder().mergeFrom(prototype);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public Builder toBuilder() {
/*       */       return newBuilder(this);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
/*       */       Builder builder = new Builder(parent);
/*       */       return builder;
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static final class Builder
/*       */       extends GeneratedMessage.Builder<Builder>
/*       */       implements PlayerHandler.ChangeAreaByTaskRequestOrBuilder
/*       */     {
/*       */       private int bitField0_;
/*       */ 
/*       */       
/*       */       private int mapId_;
/*       */ 
/*       */       
/*       */       private int taskId_;
/*       */ 
/*       */       
/*       */       private int posx_;
/*       */ 
/*       */       
/*       */       private int posy_;
/*       */ 
/*       */       
/*       */       private int point_;
/*       */ 
/*       */ 
/*       */       
/*       */       public static final Descriptors.Descriptor getDescriptor() {
/*       */         return PlayerHandler.internal_static_pomelo_area_ChangeAreaByTaskRequest_descriptor;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */         return PlayerHandler.internal_static_pomelo_area_ChangeAreaByTaskRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.ChangeAreaByTaskRequest.class, Builder.class);
/*       */       }
/*       */ 
/*       */       
/*       */       private Builder() {
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */       
/*       */       private Builder(GeneratedMessage.BuilderParent parent) {
/*       */         super(parent);
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */       
/*       */       private void maybeForceBuilderInitialization() {
/*       */         if (PlayerHandler.ChangeAreaByTaskRequest.alwaysUseFieldBuilders);
/*       */       }
/*       */ 
/*       */       
/*       */       private static Builder create() {
/*       */         return new Builder();
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder clear() {
/*       */         super.clear();
/*       */         this.mapId_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.taskId_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.posx_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.posy_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.point_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFEF;
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder clone() {
/*       */         return create().mergeFrom(buildPartial());
/*       */       }
/*       */ 
/*       */       
/*       */       public Descriptors.Descriptor getDescriptorForType() {
/*       */         return PlayerHandler.internal_static_pomelo_area_ChangeAreaByTaskRequest_descriptor;
/*       */       }
/*       */ 
/*       */       
/*       */       public PlayerHandler.ChangeAreaByTaskRequest getDefaultInstanceForType() {
/*       */         return PlayerHandler.ChangeAreaByTaskRequest.getDefaultInstance();
/*       */       }
/*       */ 
/*       */       
/*       */       public PlayerHandler.ChangeAreaByTaskRequest build() {
/*       */         PlayerHandler.ChangeAreaByTaskRequest result = buildPartial();
/*       */         if (!result.isInitialized()) {
/*       */           throw newUninitializedMessageException(result);
/*       */         }
/*       */         return result;
/*       */       }
/*       */ 
/*       */       
/*       */       public PlayerHandler.ChangeAreaByTaskRequest buildPartial() {
/*       */         PlayerHandler.ChangeAreaByTaskRequest result = new PlayerHandler.ChangeAreaByTaskRequest(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1) {
/*       */           to_bitField0_ |= 0x1;
/*       */         }
/*       */         result.mapId_ = this.mapId_;
/*       */         if ((from_bitField0_ & 0x2) == 2) {
/*       */           to_bitField0_ |= 0x2;
/*       */         }
/*       */         result.taskId_ = this.taskId_;
/*       */         if ((from_bitField0_ & 0x4) == 4) {
/*       */           to_bitField0_ |= 0x4;
/*       */         }
/*       */         result.posx_ = this.posx_;
/*       */         if ((from_bitField0_ & 0x8) == 8) {
/*       */           to_bitField0_ |= 0x8;
/*       */         }
/*       */         result.posy_ = this.posy_;
/*       */         if ((from_bitField0_ & 0x10) == 16) {
/*       */           to_bitField0_ |= 0x10;
/*       */         }
/*       */         result.point_ = this.point_;
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(Message other) {
/*       */         if (other instanceof PlayerHandler.ChangeAreaByTaskRequest) {
/*       */           return mergeFrom((PlayerHandler.ChangeAreaByTaskRequest)other);
/*       */         }
/*       */         super.mergeFrom(other);
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(PlayerHandler.ChangeAreaByTaskRequest other) {
/*       */         if (other == PlayerHandler.ChangeAreaByTaskRequest.getDefaultInstance()) {
/*       */           return this;
/*       */         }
/*       */         if (other.hasMapId()) {
/*       */           setMapId(other.getMapId());
/*       */         }
/*       */         if (other.hasTaskId()) {
/*       */           setTaskId(other.getTaskId());
/*       */         }
/*       */         if (other.hasPosx()) {
/*       */           setPosx(other.getPosx());
/*       */         }
/*       */         if (other.hasPosy()) {
/*       */           setPosy(other.getPosy());
/*       */         }
/*       */         if (other.hasPoint()) {
/*       */           setPoint(other.getPoint());
/*       */         }
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public final boolean isInitialized() {
/*       */         if (!hasMapId()) {
/*       */           return false;
/*       */         }
/*       */         if (!hasTaskId()) {
/*       */           return false;
/*       */         }
/*       */         if (!hasPosx()) {
/*       */           return false;
/*       */         }
/*       */         if (!hasPosy()) {
/*       */           return false;
/*       */         }
/*       */         return true;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */         PlayerHandler.ChangeAreaByTaskRequest parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (PlayerHandler.ChangeAreaByTaskRequest)PlayerHandler.ChangeAreaByTaskRequest.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (PlayerHandler.ChangeAreaByTaskRequest)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null) {
/*       */             mergeFrom(parsedMessage);
/*       */           }
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public boolean hasMapId() {
/*       */         return ((this.bitField0_ & 0x1) == 1);
/*       */       }
/*       */ 
/*       */       
/*       */       public int getMapId() {
/*       */         return this.mapId_;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder setMapId(int value) {
/*       */         this.bitField0_ |= 0x1;
/*       */         this.mapId_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder clearMapId() {
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.mapId_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public boolean hasTaskId() {
/*       */         return ((this.bitField0_ & 0x2) == 2);
/*       */       }
/*       */ 
/*       */       
/*       */       public int getTaskId() {
/*       */         return this.taskId_;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder setTaskId(int value) {
/*       */         this.bitField0_ |= 0x2;
/*       */         this.taskId_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder clearTaskId() {
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.taskId_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public boolean hasPosx() {
/*       */         return ((this.bitField0_ & 0x4) == 4);
/*       */       }
/*       */ 
/*       */       
/*       */       public int getPosx() {
/*       */         return this.posx_;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder setPosx(int value) {
/*       */         this.bitField0_ |= 0x4;
/*       */         this.posx_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder clearPosx() {
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.posx_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public boolean hasPosy() {
/*       */         return ((this.bitField0_ & 0x8) == 8);
/*       */       }
/*       */ 
/*       */       
/*       */       public int getPosy() {
/*       */         return this.posy_;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder setPosy(int value) {
/*       */         this.bitField0_ |= 0x8;
/*       */         this.posy_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder clearPosy() {
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.posy_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public boolean hasPoint() {
/*       */         return ((this.bitField0_ & 0x10) == 16);
/*       */       }
/*       */ 
/*       */       
/*       */       public int getPoint() {
/*       */         return this.point_;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder setPoint(int value) {
/*       */         this.bitField0_ |= 0x10;
/*       */         this.point_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder clearPoint() {
/*       */         this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.point_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */     }
/*       */   }
/*       */ 
/*       */   
/*       */   public static final class ChangeAreaByTaskResponse
/*       */     extends GeneratedMessage
/*       */     implements ChangeAreaByTaskResponseOrBuilder
/*       */   {
/*  5535 */     private static final ChangeAreaByTaskResponse defaultInstance = new ChangeAreaByTaskResponse(true); private final UnknownFieldSet unknownFields; private ChangeAreaByTaskResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ChangeAreaByTaskResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ChangeAreaByTaskResponse getDefaultInstance() { return defaultInstance; } public ChangeAreaByTaskResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ChangeAreaByTaskResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ChangeAreaByTaskResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ChangeAreaByTaskResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ChangeAreaByTaskResponse.class, Builder.class); } public static Parser<ChangeAreaByTaskResponse> PARSER = (Parser<ChangeAreaByTaskResponse>)new AbstractParser<ChangeAreaByTaskResponse>() { public PlayerHandler.ChangeAreaByTaskResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.ChangeAreaByTaskResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ChangeAreaByTaskResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ChangeAreaByTaskResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ChangeAreaByTaskResponse)PARSER.parseFrom(data); } public static ChangeAreaByTaskResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ChangeAreaByTaskResponse)PARSER.parseFrom(data, extensionRegistry); } public static ChangeAreaByTaskResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ChangeAreaByTaskResponse)PARSER.parseFrom(data); } public static ChangeAreaByTaskResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ChangeAreaByTaskResponse)PARSER.parseFrom(data, extensionRegistry); } public static ChangeAreaByTaskResponse parseFrom(InputStream input) throws IOException { return (ChangeAreaByTaskResponse)PARSER.parseFrom(input); } public static ChangeAreaByTaskResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ChangeAreaByTaskResponse)PARSER.parseFrom(input, extensionRegistry); } public static ChangeAreaByTaskResponse parseDelimitedFrom(InputStream input) throws IOException { return (ChangeAreaByTaskResponse)PARSER.parseDelimitedFrom(input); } public static ChangeAreaByTaskResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ChangeAreaByTaskResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ChangeAreaByTaskResponse parseFrom(CodedInputStream input) throws IOException { return (ChangeAreaByTaskResponse)PARSER.parseFrom(input); } public static ChangeAreaByTaskResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ChangeAreaByTaskResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ChangeAreaByTaskResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.ChangeAreaByTaskResponseOrBuilder {
/*  5536 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ChangeAreaByTaskResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ChangeAreaByTaskResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.ChangeAreaByTaskResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.ChangeAreaByTaskResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_ChangeAreaByTaskResponse_descriptor; } public PlayerHandler.ChangeAreaByTaskResponse getDefaultInstanceForType() { return PlayerHandler.ChangeAreaByTaskResponse.getDefaultInstance(); } public PlayerHandler.ChangeAreaByTaskResponse build() { PlayerHandler.ChangeAreaByTaskResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.ChangeAreaByTaskResponse buildPartial() { PlayerHandler.ChangeAreaByTaskResponse result = new PlayerHandler.ChangeAreaByTaskResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.ChangeAreaByTaskResponse) return mergeFrom((PlayerHandler.ChangeAreaByTaskResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.ChangeAreaByTaskResponse other) { if (other == PlayerHandler.ChangeAreaByTaskResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.ChangeAreaByTaskResponse parsedMessage = null; try { parsedMessage = (PlayerHandler.ChangeAreaByTaskResponse)PlayerHandler.ChangeAreaByTaskResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.ChangeAreaByTaskResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = PlayerHandler.ChangeAreaByTaskResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ChangeAreaRequest
/*       */     extends GeneratedMessage
/*       */     implements ChangeAreaRequestOrBuilder
/*       */   {
/*  6145 */     private static final ChangeAreaRequest defaultInstance = new ChangeAreaRequest(true); private final UnknownFieldSet unknownFields; private ChangeAreaRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ChangeAreaRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ChangeAreaRequest getDefaultInstance() { return defaultInstance; } public ChangeAreaRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ChangeAreaRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2SPointId_ = bs; break;case 16: this.bitField0_ |= 0x2; this.c2SType_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ChangeAreaRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ChangeAreaRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ChangeAreaRequest.class, Builder.class); } public static Parser<ChangeAreaRequest> PARSER = (Parser<ChangeAreaRequest>)new AbstractParser<ChangeAreaRequest>() { public PlayerHandler.ChangeAreaRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.ChangeAreaRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_POINTID_FIELD_NUMBER = 1; private Object c2SPointId_; public static final int C2S_TYPE_FIELD_NUMBER = 2; private int c2SType_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ChangeAreaRequest> getParserForType() { return PARSER; } public boolean hasC2SPointId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SPointId() { Object ref = this.c2SPointId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SPointId_ = s;  return s; } public ByteString getC2SPointIdBytes() { Object ref = this.c2SPointId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SPointId_ = b; return b; }  return (ByteString)ref; } public boolean hasC2SType() { return ((this.bitField0_ & 0x2) == 2); } public int getC2SType() { return this.c2SType_; } private void initFields() { this.c2SPointId_ = ""; this.c2SType_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SPointId()) { this.memoizedIsInitialized = 0; return false; }  if (!hasC2SType()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SPointIdBytes());  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.c2SType_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SPointIdBytes());  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.c2SType_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ChangeAreaRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ChangeAreaRequest)PARSER.parseFrom(data); } public static ChangeAreaRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ChangeAreaRequest)PARSER.parseFrom(data, extensionRegistry); } public static ChangeAreaRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ChangeAreaRequest)PARSER.parseFrom(data); } public static ChangeAreaRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ChangeAreaRequest)PARSER.parseFrom(data, extensionRegistry); } public static ChangeAreaRequest parseFrom(InputStream input) throws IOException { return (ChangeAreaRequest)PARSER.parseFrom(input); } public static ChangeAreaRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ChangeAreaRequest)PARSER.parseFrom(input, extensionRegistry); } public static ChangeAreaRequest parseDelimitedFrom(InputStream input) throws IOException { return (ChangeAreaRequest)PARSER.parseDelimitedFrom(input); } public static ChangeAreaRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ChangeAreaRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ChangeAreaRequest parseFrom(CodedInputStream input) throws IOException { return (ChangeAreaRequest)PARSER.parseFrom(input); } public static ChangeAreaRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ChangeAreaRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ChangeAreaRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.ChangeAreaRequestOrBuilder {
/*  6146 */       private int bitField0_; private Object c2SPointId_; private int c2SType_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ChangeAreaRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ChangeAreaRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.ChangeAreaRequest.class, Builder.class); } private Builder() { this.c2SPointId_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SPointId_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.ChangeAreaRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SPointId_ = ""; this.bitField0_ &= 0xFFFFFFFE; this.c2SType_ = 0; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_ChangeAreaRequest_descriptor; } public PlayerHandler.ChangeAreaRequest getDefaultInstanceForType() { return PlayerHandler.ChangeAreaRequest.getDefaultInstance(); } public PlayerHandler.ChangeAreaRequest build() { PlayerHandler.ChangeAreaRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.ChangeAreaRequest buildPartial() { PlayerHandler.ChangeAreaRequest result = new PlayerHandler.ChangeAreaRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SPointId_ = this.c2SPointId_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.c2SType_ = this.c2SType_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.ChangeAreaRequest) return mergeFrom((PlayerHandler.ChangeAreaRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.ChangeAreaRequest other) { if (other == PlayerHandler.ChangeAreaRequest.getDefaultInstance()) return this;  if (other.hasC2SPointId()) { this.bitField0_ |= 0x1; this.c2SPointId_ = other.c2SPointId_; onChanged(); }  if (other.hasC2SType()) setC2SType(other.getC2SType());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SPointId()) return false;  if (!hasC2SType()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.ChangeAreaRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.ChangeAreaRequest)PlayerHandler.ChangeAreaRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.ChangeAreaRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SPointId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SPointId() { Object ref = this.c2SPointId_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SPointId_ = s;  return s; }  return (String)ref; } public ByteString getC2SPointIdBytes() { Object ref = this.c2SPointId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SPointId_ = b; return b; }  return (ByteString)ref; } public Builder setC2SPointId(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SPointId_ = value; onChanged(); return this; } public Builder clearC2SPointId() { this.bitField0_ &= 0xFFFFFFFE; this.c2SPointId_ = PlayerHandler.ChangeAreaRequest.getDefaultInstance().getC2SPointId(); onChanged(); return this; } public Builder setC2SPointIdBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SPointId_ = value; onChanged(); return this; } public boolean hasC2SType() { return ((this.bitField0_ & 0x2) == 2); } public int getC2SType() { return this.c2SType_; } public Builder setC2SType(int value) { this.bitField0_ |= 0x2; this.c2SType_ = value; onChanged(); return this; } public Builder clearC2SType() { this.bitField0_ &= 0xFFFFFFFD; this.c2SType_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ChangeAreaResponse
/*       */     extends GeneratedMessage
/*       */     implements ChangeAreaResponseOrBuilder
/*       */   {
/*  6872 */     private static final ChangeAreaResponse defaultInstance = new ChangeAreaResponse(true); private final UnknownFieldSet unknownFields; private ChangeAreaResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ChangeAreaResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ChangeAreaResponse getDefaultInstance() { return defaultInstance; } public ChangeAreaResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ChangeAreaResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: bs = input.readBytes(); this.bitField0_ |= 0x4; this.s2CEnterTips_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ChangeAreaResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ChangeAreaResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ChangeAreaResponse.class, Builder.class); } public static Parser<ChangeAreaResponse> PARSER = (Parser<ChangeAreaResponse>)new AbstractParser<ChangeAreaResponse>() { public PlayerHandler.ChangeAreaResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.ChangeAreaResponse(input, extensionRegistry); } }
/*  6873 */     ; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_ENTERTIPS_FIELD_NUMBER = 3; private Object s2CEnterTips_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ChangeAreaResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } static { defaultInstance.initFields(); }
/*       */ 
/*       */     
/*       */     public ByteString getS2CMsgBytes() {
/*       */       Object ref = this.s2CMsg_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.s2CMsg_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref;
/*       */     }
/*       */     
/*       */     public boolean hasS2CEnterTips() {
/*       */       return ((this.bitField0_ & 0x4) == 4);
/*       */     }
/*       */     
/*       */     public String getS2CEnterTips() {
/*       */       Object ref = this.s2CEnterTips_;
/*       */       if (ref instanceof String)
/*       */         return (String)ref; 
/*       */       ByteString bs = (ByteString)ref;
/*       */       String s = bs.toStringUtf8();
/*       */       if (bs.isValidUtf8())
/*       */         this.s2CEnterTips_ = s; 
/*       */       return s;
/*       */     }
/*       */     
/*       */     public ByteString getS2CEnterTipsBytes() {
/*       */       Object ref = this.s2CEnterTips_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.s2CEnterTips_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref;
/*       */     }
/*       */     
/*       */     private void initFields() {
/*       */       this.s2CCode_ = 0;
/*       */       this.s2CMsg_ = "";
/*       */       this.s2CEnterTips_ = "";
/*       */     }
/*       */     
/*       */     public final boolean isInitialized() {
/*       */       byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1)
/*       */         return true; 
/*       */       if (isInitialized == 0)
/*       */         return false; 
/*       */       if (!hasS2CCode()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true;
/*       */     }
/*       */     
/*       */     public void writeTo(CodedOutputStream output) throws IOException {
/*       */       getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1)
/*       */         output.writeInt32(1, this.s2CCode_); 
/*       */       if ((this.bitField0_ & 0x2) == 2)
/*       */         output.writeBytes(2, getS2CMsgBytes()); 
/*       */       if ((this.bitField0_ & 0x4) == 4)
/*       */         output.writeBytes(3, getS2CEnterTipsBytes()); 
/*       */       getUnknownFields().writeTo(output);
/*       */     }
/*       */     
/*       */     public int getSerializedSize() {
/*       */       int size = this.memoizedSerializedSize;
/*       */       if (size != -1)
/*       */         return size; 
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1)
/*       */         size += CodedOutputStream.computeInt32Size(1, this.s2CCode_); 
/*       */       if ((this.bitField0_ & 0x2) == 2)
/*       */         size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes()); 
/*       */       if ((this.bitField0_ & 0x4) == 4)
/*       */         size += CodedOutputStream.computeBytesSize(3, getS2CEnterTipsBytes()); 
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size;
/*       */     }
/*       */     
/*       */     protected Object writeReplace() throws ObjectStreamException {
/*       */       return super.writeReplace();
/*       */     }
/*       */     
/*       */     public static ChangeAreaResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
/*       */       return (ChangeAreaResponse)PARSER.parseFrom(data);
/*       */     }
/*       */     
/*       */     public static ChangeAreaResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (ChangeAreaResponse)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */     
/*       */     public static ChangeAreaResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
/*       */       return (ChangeAreaResponse)PARSER.parseFrom(data);
/*       */     }
/*       */     
/*       */     public static ChangeAreaResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (ChangeAreaResponse)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */     
/*       */     public static ChangeAreaResponse parseFrom(InputStream input) throws IOException {
/*       */       return (ChangeAreaResponse)PARSER.parseFrom(input);
/*       */     }
/*       */     
/*       */     public static ChangeAreaResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (ChangeAreaResponse)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */     
/*       */     public static ChangeAreaResponse parseDelimitedFrom(InputStream input) throws IOException {
/*       */       return (ChangeAreaResponse)PARSER.parseDelimitedFrom(input);
/*       */     }
/*       */     
/*       */     public static ChangeAreaResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (ChangeAreaResponse)PARSER.parseDelimitedFrom(input, extensionRegistry);
/*       */     }
/*       */     
/*       */     public static ChangeAreaResponse parseFrom(CodedInputStream input) throws IOException {
/*       */       return (ChangeAreaResponse)PARSER.parseFrom(input);
/*       */     }
/*       */     
/*       */     public static ChangeAreaResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (ChangeAreaResponse)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */     
/*       */     public static Builder newBuilder() {
/*       */       return Builder.create();
/*       */     }
/*       */     
/*       */     public Builder newBuilderForType() {
/*       */       return newBuilder();
/*       */     }
/*       */     
/*       */     public static Builder newBuilder(ChangeAreaResponse prototype) {
/*       */       return newBuilder().mergeFrom(prototype);
/*       */     }
/*       */     
/*       */     public Builder toBuilder() {
/*       */       return newBuilder(this);
/*       */     }
/*       */     
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
/*       */       Builder builder = new Builder(parent);
/*       */       return builder;
/*       */     }
/*       */     
/*       */     public static final class Builder
/*       */       extends GeneratedMessage.Builder<Builder>
/*       */       implements PlayerHandler.ChangeAreaResponseOrBuilder
/*       */     {
/*       */       private int bitField0_;
/*       */       private int s2CCode_;
/*       */       private Object s2CMsg_;
/*       */       private Object s2CEnterTips_;
/*       */       
/*       */       public static final Descriptors.Descriptor getDescriptor() {
/*       */         return PlayerHandler.internal_static_pomelo_area_ChangeAreaResponse_descriptor;
/*       */       }
/*       */       
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */         return PlayerHandler.internal_static_pomelo_area_ChangeAreaResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.ChangeAreaResponse.class, Builder.class);
/*       */       }
/*       */       
/*       */       private Builder() {
/*       */         this.s2CMsg_ = "";
/*       */         this.s2CEnterTips_ = "";
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */       
/*       */       private Builder(GeneratedMessage.BuilderParent parent) {
/*       */         super(parent);
/*       */         this.s2CMsg_ = "";
/*       */         this.s2CEnterTips_ = "";
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */       
/*       */       private void maybeForceBuilderInitialization() {
/*       */         if (PlayerHandler.ChangeAreaResponse.alwaysUseFieldBuilders);
/*       */       }
/*       */       
/*       */       private static Builder create() {
/*       */         return new Builder();
/*       */       }
/*       */       
/*       */       public Builder clear() {
/*       */         super.clear();
/*       */         this.s2CCode_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CMsg_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.s2CEnterTips_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clone() {
/*       */         return create().mergeFrom(buildPartial());
/*       */       }
/*       */       
/*       */       public Descriptors.Descriptor getDescriptorForType() {
/*       */         return PlayerHandler.internal_static_pomelo_area_ChangeAreaResponse_descriptor;
/*       */       }
/*       */       
/*       */       public PlayerHandler.ChangeAreaResponse getDefaultInstanceForType() {
/*       */         return PlayerHandler.ChangeAreaResponse.getDefaultInstance();
/*       */       }
/*       */       
/*       */       public PlayerHandler.ChangeAreaResponse build() {
/*       */         PlayerHandler.ChangeAreaResponse result = buildPartial();
/*       */         if (!result.isInitialized())
/*       */           throw newUninitializedMessageException(result); 
/*       */         return result;
/*       */       }
/*       */       
/*       */       public PlayerHandler.ChangeAreaResponse buildPartial() {
/*       */         PlayerHandler.ChangeAreaResponse result = new PlayerHandler.ChangeAreaResponse(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1)
/*       */           to_bitField0_ |= 0x1; 
/*       */         result.s2CCode_ = this.s2CCode_;
/*       */         if ((from_bitField0_ & 0x2) == 2)
/*       */           to_bitField0_ |= 0x2; 
/*       */         result.s2CMsg_ = this.s2CMsg_;
/*       */         if ((from_bitField0_ & 0x4) == 4)
/*       */           to_bitField0_ |= 0x4; 
/*       */         result.s2CEnterTips_ = this.s2CEnterTips_;
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result;
/*       */       }
/*       */       
/*       */       public Builder mergeFrom(Message other) {
/*       */         if (other instanceof PlayerHandler.ChangeAreaResponse)
/*       */           return mergeFrom((PlayerHandler.ChangeAreaResponse)other); 
/*       */         super.mergeFrom(other);
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder mergeFrom(PlayerHandler.ChangeAreaResponse other) {
/*       */         if (other == PlayerHandler.ChangeAreaResponse.getDefaultInstance())
/*       */           return this; 
/*       */         if (other.hasS2CCode())
/*       */           setS2CCode(other.getS2CCode()); 
/*       */         if (other.hasS2CMsg()) {
/*       */           this.bitField0_ |= 0x2;
/*       */           this.s2CMsg_ = other.s2CMsg_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasS2CEnterTips()) {
/*       */           this.bitField0_ |= 0x4;
/*       */           this.s2CEnterTips_ = other.s2CEnterTips_;
/*       */           onChanged();
/*       */         } 
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this;
/*       */       }
/*       */       
/*       */       public final boolean isInitialized() {
/*       */         if (!hasS2CCode())
/*       */           return false; 
/*       */         return true;
/*       */       }
/*       */       
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */         PlayerHandler.ChangeAreaResponse parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (PlayerHandler.ChangeAreaResponse)PlayerHandler.ChangeAreaResponse.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (PlayerHandler.ChangeAreaResponse)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null)
/*       */             mergeFrom(parsedMessage); 
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public boolean hasS2CCode() {
/*       */         return ((this.bitField0_ & 0x1) == 1);
/*       */       }
/*       */       
/*       */       public int getS2CCode() {
/*       */         return this.s2CCode_;
/*       */       }
/*       */       
/*       */       public Builder setS2CCode(int value) {
/*       */         this.bitField0_ |= 0x1;
/*       */         this.s2CCode_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearS2CCode() {
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CCode_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public boolean hasS2CMsg() {
/*       */         return ((this.bitField0_ & 0x2) == 2);
/*       */       }
/*       */       
/*       */       public String getS2CMsg() {
/*       */         Object ref = this.s2CMsg_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.s2CMsg_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */       
/*       */       public ByteString getS2CMsgBytes() {
/*       */         Object ref = this.s2CMsg_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CMsg_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */       
/*       */       public Builder setS2CMsg(String value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearS2CMsg() {
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.s2CMsg_ = PlayerHandler.ChangeAreaResponse.getDefaultInstance().getS2CMsg();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder setS2CMsgBytes(ByteString value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public boolean hasS2CEnterTips() {
/*       */         return ((this.bitField0_ & 0x4) == 4);
/*       */       }
/*       */       
/*       */       public String getS2CEnterTips() {
/*       */         Object ref = this.s2CEnterTips_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.s2CEnterTips_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */       
/*       */       public ByteString getS2CEnterTipsBytes() {
/*       */         Object ref = this.s2CEnterTips_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CEnterTips_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */       
/*       */       public Builder setS2CEnterTips(String value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x4;
/*       */         this.s2CEnterTips_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearS2CEnterTips() {
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.s2CEnterTips_ = PlayerHandler.ChangeAreaResponse.getDefaultInstance().getS2CEnterTips();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder setS2CEnterTipsBytes(ByteString value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x4;
/*       */         this.s2CEnterTips_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */     }
/*       */   }
/*       */   
/*       */   public static final class TransByAreaIdRequest
/*       */     extends GeneratedMessage
/*       */     implements TransByAreaIdRequestOrBuilder
/*       */   {
/*  7285 */     private static final TransByAreaIdRequest defaultInstance = new TransByAreaIdRequest(true); private final UnknownFieldSet unknownFields; private TransByAreaIdRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private TransByAreaIdRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static TransByAreaIdRequest getDefaultInstance() { return defaultInstance; } public TransByAreaIdRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private TransByAreaIdRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.c2SAreaId_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_TransByAreaIdRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_TransByAreaIdRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TransByAreaIdRequest.class, Builder.class); } public static Parser<TransByAreaIdRequest> PARSER = (Parser<TransByAreaIdRequest>)new AbstractParser<TransByAreaIdRequest>() { public PlayerHandler.TransByAreaIdRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.TransByAreaIdRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_AREAID_FIELD_NUMBER = 1; private int c2SAreaId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<TransByAreaIdRequest> getParserForType() { return PARSER; } public boolean hasC2SAreaId() { return ((this.bitField0_ & 0x1) == 1); } public int getC2SAreaId() { return this.c2SAreaId_; } private void initFields() { this.c2SAreaId_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SAreaId()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.c2SAreaId_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.c2SAreaId_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static TransByAreaIdRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (TransByAreaIdRequest)PARSER.parseFrom(data); } public static TransByAreaIdRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (TransByAreaIdRequest)PARSER.parseFrom(data, extensionRegistry); } public static TransByAreaIdRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (TransByAreaIdRequest)PARSER.parseFrom(data); } public static TransByAreaIdRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (TransByAreaIdRequest)PARSER.parseFrom(data, extensionRegistry); } public static TransByAreaIdRequest parseFrom(InputStream input) throws IOException { return (TransByAreaIdRequest)PARSER.parseFrom(input); } public static TransByAreaIdRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (TransByAreaIdRequest)PARSER.parseFrom(input, extensionRegistry); } public static TransByAreaIdRequest parseDelimitedFrom(InputStream input) throws IOException { return (TransByAreaIdRequest)PARSER.parseDelimitedFrom(input); } public static TransByAreaIdRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (TransByAreaIdRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static TransByAreaIdRequest parseFrom(CodedInputStream input) throws IOException { return (TransByAreaIdRequest)PARSER.parseFrom(input); } public static TransByAreaIdRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (TransByAreaIdRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(TransByAreaIdRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.TransByAreaIdRequestOrBuilder {
/*  7286 */       private int bitField0_; private int c2SAreaId_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_TransByAreaIdRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_TransByAreaIdRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.TransByAreaIdRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.TransByAreaIdRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SAreaId_ = 0; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_TransByAreaIdRequest_descriptor; } public PlayerHandler.TransByAreaIdRequest getDefaultInstanceForType() { return PlayerHandler.TransByAreaIdRequest.getDefaultInstance(); } public PlayerHandler.TransByAreaIdRequest build() { PlayerHandler.TransByAreaIdRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.TransByAreaIdRequest buildPartial() { PlayerHandler.TransByAreaIdRequest result = new PlayerHandler.TransByAreaIdRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SAreaId_ = this.c2SAreaId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.TransByAreaIdRequest) return mergeFrom((PlayerHandler.TransByAreaIdRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.TransByAreaIdRequest other) { if (other == PlayerHandler.TransByAreaIdRequest.getDefaultInstance()) return this;  if (other.hasC2SAreaId()) setC2SAreaId(other.getC2SAreaId());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SAreaId()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.TransByAreaIdRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.TransByAreaIdRequest)PlayerHandler.TransByAreaIdRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.TransByAreaIdRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SAreaId() { return ((this.bitField0_ & 0x1) == 1); } public int getC2SAreaId() { return this.c2SAreaId_; } public Builder setC2SAreaId(int value) { this.bitField0_ |= 0x1; this.c2SAreaId_ = value; onChanged(); return this; } public Builder clearC2SAreaId() { this.bitField0_ &= 0xFFFFFFFE; this.c2SAreaId_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class TransByAreaIdResponse
/*       */     extends GeneratedMessage
/*       */     implements TransByAreaIdResponseOrBuilder
/*       */   {
/*  7855 */     private static final TransByAreaIdResponse defaultInstance = new TransByAreaIdResponse(true); private final UnknownFieldSet unknownFields; private TransByAreaIdResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private TransByAreaIdResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static TransByAreaIdResponse getDefaultInstance() { return defaultInstance; } public TransByAreaIdResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private TransByAreaIdResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_TransByAreaIdResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_TransByAreaIdResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TransByAreaIdResponse.class, Builder.class); } public static Parser<TransByAreaIdResponse> PARSER = (Parser<TransByAreaIdResponse>)new AbstractParser<TransByAreaIdResponse>() { public PlayerHandler.TransByAreaIdResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.TransByAreaIdResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<TransByAreaIdResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static TransByAreaIdResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (TransByAreaIdResponse)PARSER.parseFrom(data); } public static TransByAreaIdResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (TransByAreaIdResponse)PARSER.parseFrom(data, extensionRegistry); } public static TransByAreaIdResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (TransByAreaIdResponse)PARSER.parseFrom(data); } public static TransByAreaIdResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (TransByAreaIdResponse)PARSER.parseFrom(data, extensionRegistry); } public static TransByAreaIdResponse parseFrom(InputStream input) throws IOException { return (TransByAreaIdResponse)PARSER.parseFrom(input); } public static TransByAreaIdResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (TransByAreaIdResponse)PARSER.parseFrom(input, extensionRegistry); } public static TransByAreaIdResponse parseDelimitedFrom(InputStream input) throws IOException { return (TransByAreaIdResponse)PARSER.parseDelimitedFrom(input); } public static TransByAreaIdResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (TransByAreaIdResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static TransByAreaIdResponse parseFrom(CodedInputStream input) throws IOException { return (TransByAreaIdResponse)PARSER.parseFrom(input); } public static TransByAreaIdResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (TransByAreaIdResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(TransByAreaIdResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.TransByAreaIdResponseOrBuilder {
/*  7856 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_TransByAreaIdResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_TransByAreaIdResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.TransByAreaIdResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.TransByAreaIdResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_TransByAreaIdResponse_descriptor; } public PlayerHandler.TransByAreaIdResponse getDefaultInstanceForType() { return PlayerHandler.TransByAreaIdResponse.getDefaultInstance(); } public PlayerHandler.TransByAreaIdResponse build() { PlayerHandler.TransByAreaIdResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.TransByAreaIdResponse buildPartial() { PlayerHandler.TransByAreaIdResponse result = new PlayerHandler.TransByAreaIdResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.TransByAreaIdResponse) return mergeFrom((PlayerHandler.TransByAreaIdResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.TransByAreaIdResponse other) { if (other == PlayerHandler.TransByAreaIdResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.TransByAreaIdResponse parsedMessage = null; try { parsedMessage = (PlayerHandler.TransByAreaIdResponse)PlayerHandler.TransByAreaIdResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.TransByAreaIdResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = PlayerHandler.TransByAreaIdResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class TransByInstanceIdRequest
/*       */     extends GeneratedMessage
/*       */     implements TransByInstanceIdRequestOrBuilder
/*       */   {
/*  8339 */     private static final TransByInstanceIdRequest defaultInstance = new TransByInstanceIdRequest(true); private final UnknownFieldSet unknownFields; private TransByInstanceIdRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private TransByInstanceIdRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static TransByInstanceIdRequest getDefaultInstance() { return defaultInstance; } public TransByInstanceIdRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private TransByInstanceIdRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2SInstanceId_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_TransByInstanceIdRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_TransByInstanceIdRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TransByInstanceIdRequest.class, Builder.class); } public static Parser<TransByInstanceIdRequest> PARSER = (Parser<TransByInstanceIdRequest>)new AbstractParser<TransByInstanceIdRequest>() { public PlayerHandler.TransByInstanceIdRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.TransByInstanceIdRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_INSTANCEID_FIELD_NUMBER = 1; private Object c2SInstanceId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<TransByInstanceIdRequest> getParserForType() { return PARSER; } public boolean hasC2SInstanceId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SInstanceId() { Object ref = this.c2SInstanceId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SInstanceId_ = s;  return s; } public ByteString getC2SInstanceIdBytes() { Object ref = this.c2SInstanceId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SInstanceId_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.c2SInstanceId_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SInstanceId()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SInstanceIdBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SInstanceIdBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static TransByInstanceIdRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (TransByInstanceIdRequest)PARSER.parseFrom(data); } public static TransByInstanceIdRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (TransByInstanceIdRequest)PARSER.parseFrom(data, extensionRegistry); } public static TransByInstanceIdRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (TransByInstanceIdRequest)PARSER.parseFrom(data); } public static TransByInstanceIdRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (TransByInstanceIdRequest)PARSER.parseFrom(data, extensionRegistry); } public static TransByInstanceIdRequest parseFrom(InputStream input) throws IOException { return (TransByInstanceIdRequest)PARSER.parseFrom(input); } public static TransByInstanceIdRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (TransByInstanceIdRequest)PARSER.parseFrom(input, extensionRegistry); } public static TransByInstanceIdRequest parseDelimitedFrom(InputStream input) throws IOException { return (TransByInstanceIdRequest)PARSER.parseDelimitedFrom(input); } public static TransByInstanceIdRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (TransByInstanceIdRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static TransByInstanceIdRequest parseFrom(CodedInputStream input) throws IOException { return (TransByInstanceIdRequest)PARSER.parseFrom(input); } public static TransByInstanceIdRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (TransByInstanceIdRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(TransByInstanceIdRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.TransByInstanceIdRequestOrBuilder {
/*  8340 */       private int bitField0_; private Object c2SInstanceId_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_TransByInstanceIdRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_TransByInstanceIdRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.TransByInstanceIdRequest.class, Builder.class); } private Builder() { this.c2SInstanceId_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SInstanceId_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.TransByInstanceIdRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SInstanceId_ = ""; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_TransByInstanceIdRequest_descriptor; } public PlayerHandler.TransByInstanceIdRequest getDefaultInstanceForType() { return PlayerHandler.TransByInstanceIdRequest.getDefaultInstance(); } public PlayerHandler.TransByInstanceIdRequest build() { PlayerHandler.TransByInstanceIdRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.TransByInstanceIdRequest buildPartial() { PlayerHandler.TransByInstanceIdRequest result = new PlayerHandler.TransByInstanceIdRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SInstanceId_ = this.c2SInstanceId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.TransByInstanceIdRequest) return mergeFrom((PlayerHandler.TransByInstanceIdRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.TransByInstanceIdRequest other) { if (other == PlayerHandler.TransByInstanceIdRequest.getDefaultInstance()) return this;  if (other.hasC2SInstanceId()) { this.bitField0_ |= 0x1; this.c2SInstanceId_ = other.c2SInstanceId_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SInstanceId()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.TransByInstanceIdRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.TransByInstanceIdRequest)PlayerHandler.TransByInstanceIdRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.TransByInstanceIdRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SInstanceId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SInstanceId() { Object ref = this.c2SInstanceId_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SInstanceId_ = s;  return s; }  return (String)ref; } public ByteString getC2SInstanceIdBytes() { Object ref = this.c2SInstanceId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SInstanceId_ = b; return b; }  return (ByteString)ref; } public Builder setC2SInstanceId(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SInstanceId_ = value; onChanged(); return this; } public Builder clearC2SInstanceId() { this.bitField0_ &= 0xFFFFFFFE; this.c2SInstanceId_ = PlayerHandler.TransByInstanceIdRequest.getDefaultInstance().getC2SInstanceId(); onChanged(); return this; } public Builder setC2SInstanceIdBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SInstanceId_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class TransByInstanceIdResponse
/*       */     extends GeneratedMessage
/*       */     implements TransByInstanceIdResponseOrBuilder
/*       */   {
/*  8901 */     private static final TransByInstanceIdResponse defaultInstance = new TransByInstanceIdResponse(true); private final UnknownFieldSet unknownFields; private TransByInstanceIdResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private TransByInstanceIdResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static TransByInstanceIdResponse getDefaultInstance() { return defaultInstance; } public TransByInstanceIdResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private TransByInstanceIdResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_TransByInstanceIdResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_TransByInstanceIdResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TransByInstanceIdResponse.class, Builder.class); } public static Parser<TransByInstanceIdResponse> PARSER = (Parser<TransByInstanceIdResponse>)new AbstractParser<TransByInstanceIdResponse>() { public PlayerHandler.TransByInstanceIdResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.TransByInstanceIdResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<TransByInstanceIdResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static TransByInstanceIdResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (TransByInstanceIdResponse)PARSER.parseFrom(data); } public static TransByInstanceIdResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (TransByInstanceIdResponse)PARSER.parseFrom(data, extensionRegistry); } public static TransByInstanceIdResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (TransByInstanceIdResponse)PARSER.parseFrom(data); } public static TransByInstanceIdResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (TransByInstanceIdResponse)PARSER.parseFrom(data, extensionRegistry); } public static TransByInstanceIdResponse parseFrom(InputStream input) throws IOException { return (TransByInstanceIdResponse)PARSER.parseFrom(input); } public static TransByInstanceIdResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (TransByInstanceIdResponse)PARSER.parseFrom(input, extensionRegistry); } public static TransByInstanceIdResponse parseDelimitedFrom(InputStream input) throws IOException { return (TransByInstanceIdResponse)PARSER.parseDelimitedFrom(input); } public static TransByInstanceIdResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (TransByInstanceIdResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static TransByInstanceIdResponse parseFrom(CodedInputStream input) throws IOException { return (TransByInstanceIdResponse)PARSER.parseFrom(input); } public static TransByInstanceIdResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (TransByInstanceIdResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(TransByInstanceIdResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.TransByInstanceIdResponseOrBuilder {
/*  8902 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_TransByInstanceIdResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_TransByInstanceIdResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.TransByInstanceIdResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.TransByInstanceIdResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_TransByInstanceIdResponse_descriptor; } public PlayerHandler.TransByInstanceIdResponse getDefaultInstanceForType() { return PlayerHandler.TransByInstanceIdResponse.getDefaultInstance(); } public PlayerHandler.TransByInstanceIdResponse build() { PlayerHandler.TransByInstanceIdResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.TransByInstanceIdResponse buildPartial() { PlayerHandler.TransByInstanceIdResponse result = new PlayerHandler.TransByInstanceIdResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.TransByInstanceIdResponse) return mergeFrom((PlayerHandler.TransByInstanceIdResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.TransByInstanceIdResponse other) { if (other == PlayerHandler.TransByInstanceIdResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.TransByInstanceIdResponse parsedMessage = null; try { parsedMessage = (PlayerHandler.TransByInstanceIdResponse)PlayerHandler.TransByInstanceIdResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.TransByInstanceIdResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = PlayerHandler.TransByInstanceIdResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class LeaveAreaRequest
/*       */     extends GeneratedMessage
/*       */     implements LeaveAreaRequestOrBuilder
/*       */   {
/*  9222 */     private static final LeaveAreaRequest defaultInstance = new LeaveAreaRequest(true); private final UnknownFieldSet unknownFields; private LeaveAreaRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private LeaveAreaRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static LeaveAreaRequest getDefaultInstance() { return defaultInstance; } public LeaveAreaRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private LeaveAreaRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_LeaveAreaRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_LeaveAreaRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(LeaveAreaRequest.class, Builder.class); } public static Parser<LeaveAreaRequest> PARSER = (Parser<LeaveAreaRequest>)new AbstractParser<LeaveAreaRequest>() { public PlayerHandler.LeaveAreaRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.LeaveAreaRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<LeaveAreaRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static LeaveAreaRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (LeaveAreaRequest)PARSER.parseFrom(data); } public static LeaveAreaRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (LeaveAreaRequest)PARSER.parseFrom(data, extensionRegistry); } public static LeaveAreaRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (LeaveAreaRequest)PARSER.parseFrom(data); } public static LeaveAreaRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (LeaveAreaRequest)PARSER.parseFrom(data, extensionRegistry); } public static LeaveAreaRequest parseFrom(InputStream input) throws IOException { return (LeaveAreaRequest)PARSER.parseFrom(input); } public static LeaveAreaRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (LeaveAreaRequest)PARSER.parseFrom(input, extensionRegistry); } public static LeaveAreaRequest parseDelimitedFrom(InputStream input) throws IOException { return (LeaveAreaRequest)PARSER.parseDelimitedFrom(input); } public static LeaveAreaRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (LeaveAreaRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static LeaveAreaRequest parseFrom(CodedInputStream input) throws IOException { return (LeaveAreaRequest)PARSER.parseFrom(input); } public static LeaveAreaRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (LeaveAreaRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(LeaveAreaRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.LeaveAreaRequestOrBuilder {
/*  9223 */       public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_LeaveAreaRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_LeaveAreaRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.LeaveAreaRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.LeaveAreaRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_LeaveAreaRequest_descriptor; } public PlayerHandler.LeaveAreaRequest getDefaultInstanceForType() { return PlayerHandler.LeaveAreaRequest.getDefaultInstance(); } public PlayerHandler.LeaveAreaRequest build() { PlayerHandler.LeaveAreaRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.LeaveAreaRequest buildPartial() { PlayerHandler.LeaveAreaRequest result = new PlayerHandler.LeaveAreaRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.LeaveAreaRequest) return mergeFrom((PlayerHandler.LeaveAreaRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.LeaveAreaRequest other) { if (other == PlayerHandler.LeaveAreaRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.LeaveAreaRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.LeaveAreaRequest)PlayerHandler.LeaveAreaRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.LeaveAreaRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class LeaveAreaResponse
/*       */     extends GeneratedMessage
/*       */     implements LeaveAreaResponseOrBuilder
/*       */   {
/*  9784 */     private static final LeaveAreaResponse defaultInstance = new LeaveAreaResponse(true); private final UnknownFieldSet unknownFields; private LeaveAreaResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private LeaveAreaResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static LeaveAreaResponse getDefaultInstance() { return defaultInstance; } public LeaveAreaResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private LeaveAreaResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_LeaveAreaResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_LeaveAreaResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(LeaveAreaResponse.class, Builder.class); } public static Parser<LeaveAreaResponse> PARSER = (Parser<LeaveAreaResponse>)new AbstractParser<LeaveAreaResponse>() { public PlayerHandler.LeaveAreaResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.LeaveAreaResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<LeaveAreaResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static LeaveAreaResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (LeaveAreaResponse)PARSER.parseFrom(data); } public static LeaveAreaResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (LeaveAreaResponse)PARSER.parseFrom(data, extensionRegistry); } public static LeaveAreaResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (LeaveAreaResponse)PARSER.parseFrom(data); } public static LeaveAreaResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (LeaveAreaResponse)PARSER.parseFrom(data, extensionRegistry); } public static LeaveAreaResponse parseFrom(InputStream input) throws IOException { return (LeaveAreaResponse)PARSER.parseFrom(input); } public static LeaveAreaResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (LeaveAreaResponse)PARSER.parseFrom(input, extensionRegistry); } public static LeaveAreaResponse parseDelimitedFrom(InputStream input) throws IOException { return (LeaveAreaResponse)PARSER.parseDelimitedFrom(input); } public static LeaveAreaResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (LeaveAreaResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static LeaveAreaResponse parseFrom(CodedInputStream input) throws IOException { return (LeaveAreaResponse)PARSER.parseFrom(input); } public static LeaveAreaResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (LeaveAreaResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(LeaveAreaResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.LeaveAreaResponseOrBuilder {
/*  9785 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_LeaveAreaResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_LeaveAreaResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.LeaveAreaResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.LeaveAreaResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_LeaveAreaResponse_descriptor; } public PlayerHandler.LeaveAreaResponse getDefaultInstanceForType() { return PlayerHandler.LeaveAreaResponse.getDefaultInstance(); } public PlayerHandler.LeaveAreaResponse build() { PlayerHandler.LeaveAreaResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.LeaveAreaResponse buildPartial() { PlayerHandler.LeaveAreaResponse result = new PlayerHandler.LeaveAreaResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.LeaveAreaResponse) return mergeFrom((PlayerHandler.LeaveAreaResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.LeaveAreaResponse other) { if (other == PlayerHandler.LeaveAreaResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.LeaveAreaResponse parsedMessage = null; try { parsedMessage = (PlayerHandler.LeaveAreaResponse)PlayerHandler.LeaveAreaResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.LeaveAreaResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = PlayerHandler.LeaveAreaResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class QueryLoadWayRequest
/*       */     extends GeneratedMessage
/*       */     implements QueryLoadWayRequestOrBuilder
/*       */   {
/* 10362 */     private static final QueryLoadWayRequest defaultInstance = new QueryLoadWayRequest(true); private final UnknownFieldSet unknownFields; private QueryLoadWayRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private QueryLoadWayRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static QueryLoadWayRequest getDefaultInstance() { return defaultInstance; } public QueryLoadWayRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private QueryLoadWayRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.c2SAreaId_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.c2SPointId_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_QueryLoadWayRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_QueryLoadWayRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryLoadWayRequest.class, Builder.class); } public static Parser<QueryLoadWayRequest> PARSER = (Parser<QueryLoadWayRequest>)new AbstractParser<QueryLoadWayRequest>() { public PlayerHandler.QueryLoadWayRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.QueryLoadWayRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_AREAID_FIELD_NUMBER = 1; private int c2SAreaId_; public static final int C2S_POINTID_FIELD_NUMBER = 2; private Object c2SPointId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<QueryLoadWayRequest> getParserForType() { return PARSER; } public boolean hasC2SAreaId() { return ((this.bitField0_ & 0x1) == 1); } public int getC2SAreaId() { return this.c2SAreaId_; } public boolean hasC2SPointId() { return ((this.bitField0_ & 0x2) == 2); } public String getC2SPointId() { Object ref = this.c2SPointId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SPointId_ = s;  return s; } public ByteString getC2SPointIdBytes() { Object ref = this.c2SPointId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SPointId_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.c2SAreaId_ = 0; this.c2SPointId_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SAreaId()) { this.memoizedIsInitialized = 0; return false; }  if (!hasC2SPointId()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.c2SAreaId_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getC2SPointIdBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.c2SAreaId_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getC2SPointIdBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static QueryLoadWayRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (QueryLoadWayRequest)PARSER.parseFrom(data); } public static QueryLoadWayRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (QueryLoadWayRequest)PARSER.parseFrom(data, extensionRegistry); } public static QueryLoadWayRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (QueryLoadWayRequest)PARSER.parseFrom(data); } public static QueryLoadWayRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (QueryLoadWayRequest)PARSER.parseFrom(data, extensionRegistry); } public static QueryLoadWayRequest parseFrom(InputStream input) throws IOException { return (QueryLoadWayRequest)PARSER.parseFrom(input); } public static QueryLoadWayRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (QueryLoadWayRequest)PARSER.parseFrom(input, extensionRegistry); } public static QueryLoadWayRequest parseDelimitedFrom(InputStream input) throws IOException { return (QueryLoadWayRequest)PARSER.parseDelimitedFrom(input); } public static QueryLoadWayRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (QueryLoadWayRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static QueryLoadWayRequest parseFrom(CodedInputStream input) throws IOException { return (QueryLoadWayRequest)PARSER.parseFrom(input); } public static QueryLoadWayRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (QueryLoadWayRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(QueryLoadWayRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.QueryLoadWayRequestOrBuilder {
/* 10363 */       private int bitField0_; private int c2SAreaId_; private Object c2SPointId_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_QueryLoadWayRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_QueryLoadWayRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.QueryLoadWayRequest.class, Builder.class); } private Builder() { this.c2SPointId_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SPointId_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.QueryLoadWayRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SAreaId_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.c2SPointId_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_QueryLoadWayRequest_descriptor; } public PlayerHandler.QueryLoadWayRequest getDefaultInstanceForType() { return PlayerHandler.QueryLoadWayRequest.getDefaultInstance(); } public PlayerHandler.QueryLoadWayRequest build() { PlayerHandler.QueryLoadWayRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.QueryLoadWayRequest buildPartial() { PlayerHandler.QueryLoadWayRequest result = new PlayerHandler.QueryLoadWayRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SAreaId_ = this.c2SAreaId_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.c2SPointId_ = this.c2SPointId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.QueryLoadWayRequest) return mergeFrom((PlayerHandler.QueryLoadWayRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.QueryLoadWayRequest other) { if (other == PlayerHandler.QueryLoadWayRequest.getDefaultInstance()) return this;  if (other.hasC2SAreaId()) setC2SAreaId(other.getC2SAreaId());  if (other.hasC2SPointId()) { this.bitField0_ |= 0x2; this.c2SPointId_ = other.c2SPointId_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SAreaId()) return false;  if (!hasC2SPointId()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.QueryLoadWayRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.QueryLoadWayRequest)PlayerHandler.QueryLoadWayRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.QueryLoadWayRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SAreaId() { return ((this.bitField0_ & 0x1) == 1); } public int getC2SAreaId() { return this.c2SAreaId_; } public Builder setC2SAreaId(int value) { this.bitField0_ |= 0x1; this.c2SAreaId_ = value; onChanged(); return this; } public Builder clearC2SAreaId() { this.bitField0_ &= 0xFFFFFFFE; this.c2SAreaId_ = 0; onChanged(); return this; } public boolean hasC2SPointId() { return ((this.bitField0_ & 0x2) == 2); } public String getC2SPointId() { Object ref = this.c2SPointId_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SPointId_ = s;  return s; }  return (String)ref; } public ByteString getC2SPointIdBytes() { Object ref = this.c2SPointId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SPointId_ = b; return b; }  return (ByteString)ref; } public Builder setC2SPointId(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.c2SPointId_ = value; onChanged(); return this; } public Builder clearC2SPointId() { this.bitField0_ &= 0xFFFFFFFD; this.c2SPointId_ = PlayerHandler.QueryLoadWayRequest.getDefaultInstance().getC2SPointId(); onChanged(); return this; } public Builder setC2SPointIdBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.c2SPointId_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class QueryLoadWayResponse
/*       */     extends GeneratedMessage
/*       */     implements QueryLoadWayResponseOrBuilder
/*       */   {
/* 11089 */     private static final QueryLoadWayResponse defaultInstance = new QueryLoadWayResponse(true); private final UnknownFieldSet unknownFields; private QueryLoadWayResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private QueryLoadWayResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static QueryLoadWayResponse getDefaultInstance() { return defaultInstance; } public QueryLoadWayResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private QueryLoadWayResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: bs = input.readBytes(); this.bitField0_ |= 0x4; this.s2CPointId_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_QueryLoadWayResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_QueryLoadWayResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryLoadWayResponse.class, Builder.class); } public static Parser<QueryLoadWayResponse> PARSER = (Parser<QueryLoadWayResponse>)new AbstractParser<QueryLoadWayResponse>() { public PlayerHandler.QueryLoadWayResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.QueryLoadWayResponse(input, extensionRegistry); } }
/* 11090 */     ; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_POINTID_FIELD_NUMBER = 3; private Object s2CPointId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<QueryLoadWayResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } static { defaultInstance.initFields(); }
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public ByteString getS2CMsgBytes() {
/*       */       Object ref = this.s2CMsg_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.s2CMsg_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref;
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public boolean hasS2CPointId() {
/*       */       return ((this.bitField0_ & 0x4) == 4);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public String getS2CPointId() {
/*       */       Object ref = this.s2CPointId_;
/*       */       if (ref instanceof String) {
/*       */         return (String)ref;
/*       */       }
/*       */       ByteString bs = (ByteString)ref;
/*       */       String s = bs.toStringUtf8();
/*       */       if (bs.isValidUtf8()) {
/*       */         this.s2CPointId_ = s;
/*       */       }
/*       */       return s;
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public ByteString getS2CPointIdBytes() {
/*       */       Object ref = this.s2CPointId_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.s2CPointId_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref;
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     private void initFields() {
/*       */       this.s2CCode_ = 0;
/*       */       this.s2CMsg_ = "";
/*       */       this.s2CPointId_ = "";
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public final boolean isInitialized() {
/*       */       byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1) {
/*       */         return true;
/*       */       }
/*       */       if (isInitialized == 0) {
/*       */         return false;
/*       */       }
/*       */       if (!hasS2CCode()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true;
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public void writeTo(CodedOutputStream output) throws IOException {
/*       */       getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         output.writeInt32(1, this.s2CCode_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         output.writeBytes(2, getS2CMsgBytes());
/*       */       }
/*       */       if ((this.bitField0_ & 0x4) == 4) {
/*       */         output.writeBytes(3, getS2CPointIdBytes());
/*       */       }
/*       */       getUnknownFields().writeTo(output);
/*       */     }
/*       */ 
/*       */     
/*       */     public int getSerializedSize() {
/*       */       int size = this.memoizedSerializedSize;
/*       */       if (size != -1) {
/*       */         return size;
/*       */       }
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
/*       */       }
/*       */       if ((this.bitField0_ & 0x4) == 4) {
/*       */         size += CodedOutputStream.computeBytesSize(3, getS2CPointIdBytes());
/*       */       }
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size;
/*       */     }
/*       */ 
/*       */     
/*       */     protected Object writeReplace() throws ObjectStreamException {
/*       */       return super.writeReplace();
/*       */     }
/*       */ 
/*       */     
/*       */     public static QueryLoadWayResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
/*       */       return (QueryLoadWayResponse)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */     
/*       */     public static QueryLoadWayResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (QueryLoadWayResponse)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */     
/*       */     public static QueryLoadWayResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
/*       */       return (QueryLoadWayResponse)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */     
/*       */     public static QueryLoadWayResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (QueryLoadWayResponse)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */     
/*       */     public static QueryLoadWayResponse parseFrom(InputStream input) throws IOException {
/*       */       return (QueryLoadWayResponse)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */     
/*       */     public static QueryLoadWayResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (QueryLoadWayResponse)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */     
/*       */     public static QueryLoadWayResponse parseDelimitedFrom(InputStream input) throws IOException {
/*       */       return (QueryLoadWayResponse)PARSER.parseDelimitedFrom(input);
/*       */     }
/*       */ 
/*       */     
/*       */     public static QueryLoadWayResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (QueryLoadWayResponse)PARSER.parseDelimitedFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */     
/*       */     public static QueryLoadWayResponse parseFrom(CodedInputStream input) throws IOException {
/*       */       return (QueryLoadWayResponse)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */     
/*       */     public static QueryLoadWayResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (QueryLoadWayResponse)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */     
/*       */     public static Builder newBuilder() {
/*       */       return Builder.create();
/*       */     }
/*       */ 
/*       */     
/*       */     public Builder newBuilderForType() {
/*       */       return newBuilder();
/*       */     }
/*       */ 
/*       */     
/*       */     public static Builder newBuilder(QueryLoadWayResponse prototype) {
/*       */       return newBuilder().mergeFrom(prototype);
/*       */     }
/*       */ 
/*       */     
/*       */     public Builder toBuilder() {
/*       */       return newBuilder(this);
/*       */     }
/*       */ 
/*       */     
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
/*       */       Builder builder = new Builder(parent);
/*       */       return builder;
/*       */     }
/*       */ 
/*       */     
/*       */     public static final class Builder
/*       */       extends GeneratedMessage.Builder<Builder>
/*       */       implements PlayerHandler.QueryLoadWayResponseOrBuilder
/*       */     {
/*       */       private int bitField0_;
/*       */       
/*       */       private int s2CCode_;
/*       */       
/*       */       private Object s2CMsg_;
/*       */       
/*       */       private Object s2CPointId_;
/*       */ 
/*       */       
/*       */       public static final Descriptors.Descriptor getDescriptor() {
/*       */         return PlayerHandler.internal_static_pomelo_area_QueryLoadWayResponse_descriptor;
/*       */       }
/*       */ 
/*       */       
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */         return PlayerHandler.internal_static_pomelo_area_QueryLoadWayResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.QueryLoadWayResponse.class, Builder.class);
/*       */       }
/*       */ 
/*       */       
/*       */       private Builder() {
/*       */         this.s2CMsg_ = "";
/*       */         this.s2CPointId_ = "";
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */       
/*       */       private Builder(GeneratedMessage.BuilderParent parent) {
/*       */         super(parent);
/*       */         this.s2CMsg_ = "";
/*       */         this.s2CPointId_ = "";
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */       
/*       */       private void maybeForceBuilderInitialization() {
/*       */         if (PlayerHandler.QueryLoadWayResponse.alwaysUseFieldBuilders);
/*       */       }
/*       */ 
/*       */       
/*       */       private static Builder create() {
/*       */         return new Builder();
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder clear() {
/*       */         super.clear();
/*       */         this.s2CCode_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CMsg_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.s2CPointId_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder clone() {
/*       */         return create().mergeFrom(buildPartial());
/*       */       }
/*       */ 
/*       */       
/*       */       public Descriptors.Descriptor getDescriptorForType() {
/*       */         return PlayerHandler.internal_static_pomelo_area_QueryLoadWayResponse_descriptor;
/*       */       }
/*       */ 
/*       */       
/*       */       public PlayerHandler.QueryLoadWayResponse getDefaultInstanceForType() {
/*       */         return PlayerHandler.QueryLoadWayResponse.getDefaultInstance();
/*       */       }
/*       */ 
/*       */       
/*       */       public PlayerHandler.QueryLoadWayResponse build() {
/*       */         PlayerHandler.QueryLoadWayResponse result = buildPartial();
/*       */         if (!result.isInitialized()) {
/*       */           throw newUninitializedMessageException(result);
/*       */         }
/*       */         return result;
/*       */       }
/*       */ 
/*       */       
/*       */       public PlayerHandler.QueryLoadWayResponse buildPartial() {
/*       */         PlayerHandler.QueryLoadWayResponse result = new PlayerHandler.QueryLoadWayResponse(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1) {
/*       */           to_bitField0_ |= 0x1;
/*       */         }
/*       */         result.s2CCode_ = this.s2CCode_;
/*       */         if ((from_bitField0_ & 0x2) == 2) {
/*       */           to_bitField0_ |= 0x2;
/*       */         }
/*       */         result.s2CMsg_ = this.s2CMsg_;
/*       */         if ((from_bitField0_ & 0x4) == 4) {
/*       */           to_bitField0_ |= 0x4;
/*       */         }
/*       */         result.s2CPointId_ = this.s2CPointId_;
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(Message other) {
/*       */         if (other instanceof PlayerHandler.QueryLoadWayResponse) {
/*       */           return mergeFrom((PlayerHandler.QueryLoadWayResponse)other);
/*       */         }
/*       */         super.mergeFrom(other);
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(PlayerHandler.QueryLoadWayResponse other) {
/*       */         if (other == PlayerHandler.QueryLoadWayResponse.getDefaultInstance()) {
/*       */           return this;
/*       */         }
/*       */         if (other.hasS2CCode()) {
/*       */           setS2CCode(other.getS2CCode());
/*       */         }
/*       */         if (other.hasS2CMsg()) {
/*       */           this.bitField0_ |= 0x2;
/*       */           this.s2CMsg_ = other.s2CMsg_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasS2CPointId()) {
/*       */           this.bitField0_ |= 0x4;
/*       */           this.s2CPointId_ = other.s2CPointId_;
/*       */           onChanged();
/*       */         } 
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public final boolean isInitialized() {
/*       */         if (!hasS2CCode()) {
/*       */           return false;
/*       */         }
/*       */         return true;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */         PlayerHandler.QueryLoadWayResponse parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (PlayerHandler.QueryLoadWayResponse)PlayerHandler.QueryLoadWayResponse.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (PlayerHandler.QueryLoadWayResponse)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null) {
/*       */             mergeFrom(parsedMessage);
/*       */           }
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public boolean hasS2CCode() {
/*       */         return ((this.bitField0_ & 0x1) == 1);
/*       */       }
/*       */ 
/*       */       
/*       */       public int getS2CCode() {
/*       */         return this.s2CCode_;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder setS2CCode(int value) {
/*       */         this.bitField0_ |= 0x1;
/*       */         this.s2CCode_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder clearS2CCode() {
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CCode_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public boolean hasS2CMsg() {
/*       */         return ((this.bitField0_ & 0x2) == 2);
/*       */       }
/*       */ 
/*       */       
/*       */       public String getS2CMsg() {
/*       */         Object ref = this.s2CMsg_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8()) {
/*       */             this.s2CMsg_ = s;
/*       */           }
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */ 
/*       */       
/*       */       public ByteString getS2CMsgBytes() {
/*       */         Object ref = this.s2CMsg_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CMsg_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder setS2CMsg(String value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder clearS2CMsg() {
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.s2CMsg_ = PlayerHandler.QueryLoadWayResponse.getDefaultInstance().getS2CMsg();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder setS2CMsgBytes(ByteString value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public boolean hasS2CPointId() {
/*       */         return ((this.bitField0_ & 0x4) == 4);
/*       */       }
/*       */ 
/*       */       
/*       */       public String getS2CPointId() {
/*       */         Object ref = this.s2CPointId_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8()) {
/*       */             this.s2CPointId_ = s;
/*       */           }
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */ 
/*       */       
/*       */       public ByteString getS2CPointIdBytes() {
/*       */         Object ref = this.s2CPointId_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CPointId_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder setS2CPointId(String value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x4;
/*       */         this.s2CPointId_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder clearS2CPointId() {
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.s2CPointId_ = PlayerHandler.QueryLoadWayResponse.getDefaultInstance().getS2CPointId();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder setS2CPointIdBytes(ByteString value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x4;
/*       */         this.s2CPointId_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */     }
/*       */   }
/*       */ 
/*       */   
/*       */   public static final class RecentContactsRequest
/*       */     extends GeneratedMessage
/*       */     implements RecentContactsRequestOrBuilder
/*       */   {
/* 11596 */     private static final RecentContactsRequest defaultInstance = new RecentContactsRequest(true); private final UnknownFieldSet unknownFields; private RecentContactsRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private RecentContactsRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static RecentContactsRequest getDefaultInstance() { return defaultInstance; } public RecentContactsRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private RecentContactsRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); if ((mutable_bitField0_ & 0x1) != 1) { this.c2SIds_ = (LazyStringList)new LazyStringArrayList(); mutable_bitField0_ |= 0x1; }  this.c2SIds_.add(bs); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x1) == 1) this.c2SIds_ = this.c2SIds_.getUnmodifiableView();  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_RecentContactsRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_RecentContactsRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(RecentContactsRequest.class, Builder.class); } public static Parser<RecentContactsRequest> PARSER = (Parser<RecentContactsRequest>)new AbstractParser<RecentContactsRequest>() { public PlayerHandler.RecentContactsRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.RecentContactsRequest(input, extensionRegistry); } }; public static final int C2S_IDS_FIELD_NUMBER = 1; private LazyStringList c2SIds_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<RecentContactsRequest> getParserForType() { return PARSER; } public ProtocolStringList getC2SIdsList() { return (ProtocolStringList)this.c2SIds_; } public int getC2SIdsCount() { return this.c2SIds_.size(); } public String getC2SIds(int index) { return (String)this.c2SIds_.get(index); } public ByteString getC2SIdsBytes(int index) { return this.c2SIds_.getByteString(index); } private void initFields() { this.c2SIds_ = LazyStringArrayList.EMPTY; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); for (int i = 0; i < this.c2SIds_.size(); i++) output.writeBytes(1, this.c2SIds_.getByteString(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; int dataSize = 0; for (int i = 0; i < this.c2SIds_.size(); i++) dataSize += CodedOutputStream.computeBytesSizeNoTag(this.c2SIds_.getByteString(i));  size += dataSize; size += 1 * getC2SIdsList().size(); size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static RecentContactsRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (RecentContactsRequest)PARSER.parseFrom(data); } public static RecentContactsRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (RecentContactsRequest)PARSER.parseFrom(data, extensionRegistry); } public static RecentContactsRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (RecentContactsRequest)PARSER.parseFrom(data); } public static RecentContactsRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (RecentContactsRequest)PARSER.parseFrom(data, extensionRegistry); } public static RecentContactsRequest parseFrom(InputStream input) throws IOException { return (RecentContactsRequest)PARSER.parseFrom(input); } public static RecentContactsRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (RecentContactsRequest)PARSER.parseFrom(input, extensionRegistry); } public static RecentContactsRequest parseDelimitedFrom(InputStream input) throws IOException { return (RecentContactsRequest)PARSER.parseDelimitedFrom(input); } public static RecentContactsRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (RecentContactsRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static RecentContactsRequest parseFrom(CodedInputStream input) throws IOException { return (RecentContactsRequest)PARSER.parseFrom(input); } public static RecentContactsRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (RecentContactsRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(RecentContactsRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.RecentContactsRequestOrBuilder {
/* 11597 */       private int bitField0_; private LazyStringList c2SIds_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_RecentContactsRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_RecentContactsRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.RecentContactsRequest.class, Builder.class); } private Builder() { this.c2SIds_ = LazyStringArrayList.EMPTY; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SIds_ = LazyStringArrayList.EMPTY; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.RecentContactsRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SIds_ = LazyStringArrayList.EMPTY; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_RecentContactsRequest_descriptor; } public PlayerHandler.RecentContactsRequest getDefaultInstanceForType() { return PlayerHandler.RecentContactsRequest.getDefaultInstance(); } public PlayerHandler.RecentContactsRequest build() { PlayerHandler.RecentContactsRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.RecentContactsRequest buildPartial() { PlayerHandler.RecentContactsRequest result = new PlayerHandler.RecentContactsRequest(this); int from_bitField0_ = this.bitField0_; if ((this.bitField0_ & 0x1) == 1) { this.c2SIds_ = this.c2SIds_.getUnmodifiableView(); this.bitField0_ &= 0xFFFFFFFE; }  result.c2SIds_ = this.c2SIds_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.RecentContactsRequest) return mergeFrom((PlayerHandler.RecentContactsRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.RecentContactsRequest other) { if (other == PlayerHandler.RecentContactsRequest.getDefaultInstance()) return this;  if (!other.c2SIds_.isEmpty()) { if (this.c2SIds_.isEmpty()) { this.c2SIds_ = other.c2SIds_; this.bitField0_ &= 0xFFFFFFFE; } else { ensureC2SIdsIsMutable(); this.c2SIds_.addAll((Collection)other.c2SIds_); }  onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.RecentContactsRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.RecentContactsRequest)PlayerHandler.RecentContactsRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.RecentContactsRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } private void ensureC2SIdsIsMutable() { if ((this.bitField0_ & 0x1) != 1) { this.c2SIds_ = (LazyStringList)new LazyStringArrayList(this.c2SIds_); this.bitField0_ |= 0x1; }  } public ProtocolStringList getC2SIdsList() { return (ProtocolStringList)this.c2SIds_.getUnmodifiableView(); } public int getC2SIdsCount() { return this.c2SIds_.size(); } public String getC2SIds(int index) { return (String)this.c2SIds_.get(index); } public ByteString getC2SIdsBytes(int index) { return this.c2SIds_.getByteString(index); } public Builder setC2SIds(int index, String value) { if (value == null) throw new NullPointerException();  ensureC2SIdsIsMutable(); this.c2SIds_.set(index, value); onChanged(); return this; } public Builder addC2SIds(String value) { if (value == null) throw new NullPointerException();  ensureC2SIdsIsMutable(); this.c2SIds_.add(value); onChanged(); return this; } public Builder addAllC2SIds(Iterable<String> values) { ensureC2SIdsIsMutable(); AbstractMessageLite.Builder.addAll(values, (Collection)this.c2SIds_); onChanged(); return this; } public Builder clearC2SIds() { this.c2SIds_ = LazyStringArrayList.EMPTY; this.bitField0_ &= 0xFFFFFFFE; onChanged(); return this; } public Builder addC2SIdsBytes(ByteString value) { if (value == null) throw new NullPointerException();  ensureC2SIdsIsMutable(); this.c2SIds_.add(value); onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class recentContactInfo
/*       */     extends GeneratedMessage
/*       */     implements recentContactInfoOrBuilder
/*       */   {
/* 12511 */     private static final recentContactInfo defaultInstance = new recentContactInfo(true); private final UnknownFieldSet unknownFields; private recentContactInfo(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private recentContactInfo(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static recentContactInfo getDefaultInstance() { return defaultInstance; } public recentContactInfo getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private recentContactInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.id_ = bs; break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.name_ = bs; break;case 24: this.bitField0_ |= 0x4; this.level_ = input.readInt32(); break;case 32: this.bitField0_ |= 0x8; this.pro_ = input.readInt32(); break;case 40: this.bitField0_ |= 0x10; this.isFriend_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_recentContactInfo_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_recentContactInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(recentContactInfo.class, Builder.class); } public static Parser<recentContactInfo> PARSER = (Parser<recentContactInfo>)new AbstractParser<recentContactInfo>() { public PlayerHandler.recentContactInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.recentContactInfo(input, extensionRegistry); } }
/* 12512 */     ; private int bitField0_; public static final int ID_FIELD_NUMBER = 1; private Object id_; public static final int NAME_FIELD_NUMBER = 2; private Object name_; public static final int LEVEL_FIELD_NUMBER = 3; private int level_; public static final int PRO_FIELD_NUMBER = 4; private int pro_; public static final int ISFRIEND_FIELD_NUMBER = 5; private int isFriend_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<recentContactInfo> getParserForType() { return PARSER; } public boolean hasId() { return ((this.bitField0_ & 0x1) == 1); } public String getId() { Object ref = this.id_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.id_ = s;  return s; } public ByteString getIdBytes() { Object ref = this.id_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.id_ = b; return b; }  return (ByteString)ref; } public boolean hasName() { return ((this.bitField0_ & 0x2) == 2); } static { defaultInstance.initFields(); }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public String getName() {
/*       */       Object ref = this.name_;
/*       */       if (ref instanceof String) {
/*       */         return (String)ref;
/*       */       }
/*       */       ByteString bs = (ByteString)ref;
/*       */       String s = bs.toStringUtf8();
/*       */       if (bs.isValidUtf8()) {
/*       */         this.name_ = s;
/*       */       }
/*       */       return s;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public ByteString getNameBytes() {
/*       */       Object ref = this.name_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.name_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public boolean hasLevel() {
/*       */       return ((this.bitField0_ & 0x4) == 4);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getLevel() {
/*       */       return this.level_;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public boolean hasPro() {
/*       */       return ((this.bitField0_ & 0x8) == 8);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getPro() {
/*       */       return this.pro_;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public boolean hasIsFriend() {
/*       */       return ((this.bitField0_ & 0x10) == 16);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getIsFriend() {
/*       */       return this.isFriend_;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private void initFields() {
/*       */       this.id_ = "";
/*       */       this.name_ = "";
/*       */       this.level_ = 0;
/*       */       this.pro_ = 0;
/*       */       this.isFriend_ = 0;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public final boolean isInitialized() {
/*       */       byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1) {
/*       */         return true;
/*       */       }
/*       */       if (isInitialized == 0) {
/*       */         return false;
/*       */       }
/*       */       if (!hasId()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasName()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasLevel()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasPro()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasIsFriend()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public void writeTo(CodedOutputStream output) throws IOException {
/*       */       getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         output.writeBytes(1, getIdBytes());
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         output.writeBytes(2, getNameBytes());
/*       */       }
/*       */       if ((this.bitField0_ & 0x4) == 4) {
/*       */         output.writeInt32(3, this.level_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x8) == 8) {
/*       */         output.writeInt32(4, this.pro_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x10) == 16) {
/*       */         output.writeInt32(5, this.isFriend_);
/*       */       }
/*       */       getUnknownFields().writeTo(output);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getSerializedSize() {
/*       */       int size = this.memoizedSerializedSize;
/*       */       if (size != -1) {
/*       */         return size;
/*       */       }
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         size += CodedOutputStream.computeBytesSize(1, getIdBytes());
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         size += CodedOutputStream.computeBytesSize(2, getNameBytes());
/*       */       }
/*       */       if ((this.bitField0_ & 0x4) == 4) {
/*       */         size += CodedOutputStream.computeInt32Size(3, this.level_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x8) == 8) {
/*       */         size += CodedOutputStream.computeInt32Size(4, this.pro_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x10) == 16) {
/*       */         size += CodedOutputStream.computeInt32Size(5, this.isFriend_);
/*       */       }
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     protected Object writeReplace() throws ObjectStreamException {
/*       */       return super.writeReplace();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static recentContactInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
/*       */       return (recentContactInfo)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static recentContactInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (recentContactInfo)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static recentContactInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
/*       */       return (recentContactInfo)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static recentContactInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (recentContactInfo)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static recentContactInfo parseFrom(InputStream input) throws IOException {
/*       */       return (recentContactInfo)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static recentContactInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (recentContactInfo)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static recentContactInfo parseDelimitedFrom(InputStream input) throws IOException {
/*       */       return (recentContactInfo)PARSER.parseDelimitedFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static recentContactInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (recentContactInfo)PARSER.parseDelimitedFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static recentContactInfo parseFrom(CodedInputStream input) throws IOException {
/*       */       return (recentContactInfo)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static recentContactInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (recentContactInfo)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static Builder newBuilder() {
/*       */       return Builder.create();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public Builder newBuilderForType() {
/*       */       return newBuilder();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static Builder newBuilder(recentContactInfo prototype) {
/*       */       return newBuilder().mergeFrom(prototype);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public Builder toBuilder() {
/*       */       return newBuilder(this);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
/*       */       Builder builder = new Builder(parent);
/*       */       return builder;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static final class Builder
/*       */       extends GeneratedMessage.Builder<Builder>
/*       */       implements PlayerHandler.recentContactInfoOrBuilder
/*       */     {
/*       */       private int bitField0_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private Object id_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private Object name_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private int level_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private int pro_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private int isFriend_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public static final Descriptors.Descriptor getDescriptor() {
/*       */         return PlayerHandler.internal_static_pomelo_area_recentContactInfo_descriptor;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */         return PlayerHandler.internal_static_pomelo_area_recentContactInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.recentContactInfo.class, Builder.class);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private Builder() {
/*       */         this.id_ = "";
/*       */         this.name_ = "";
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private Builder(GeneratedMessage.BuilderParent parent) {
/*       */         super(parent);
/*       */         this.id_ = "";
/*       */         this.name_ = "";
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private void maybeForceBuilderInitialization() {
/*       */         if (PlayerHandler.recentContactInfo.alwaysUseFieldBuilders);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private static Builder create() {
/*       */         return new Builder();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clear() {
/*       */         super.clear();
/*       */         this.id_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.name_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.level_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.pro_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.isFriend_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFEF;
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clone() {
/*       */         return create().mergeFrom(buildPartial());
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Descriptors.Descriptor getDescriptorForType() {
/*       */         return PlayerHandler.internal_static_pomelo_area_recentContactInfo_descriptor;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.recentContactInfo getDefaultInstanceForType() {
/*       */         return PlayerHandler.recentContactInfo.getDefaultInstance();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.recentContactInfo build() {
/*       */         PlayerHandler.recentContactInfo result = buildPartial();
/*       */         if (!result.isInitialized()) {
/*       */           throw newUninitializedMessageException(result);
/*       */         }
/*       */         return result;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.recentContactInfo buildPartial() {
/*       */         PlayerHandler.recentContactInfo result = new PlayerHandler.recentContactInfo(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1) {
/*       */           to_bitField0_ |= 0x1;
/*       */         }
/*       */         result.id_ = this.id_;
/*       */         if ((from_bitField0_ & 0x2) == 2) {
/*       */           to_bitField0_ |= 0x2;
/*       */         }
/*       */         result.name_ = this.name_;
/*       */         if ((from_bitField0_ & 0x4) == 4) {
/*       */           to_bitField0_ |= 0x4;
/*       */         }
/*       */         result.level_ = this.level_;
/*       */         if ((from_bitField0_ & 0x8) == 8) {
/*       */           to_bitField0_ |= 0x8;
/*       */         }
/*       */         result.pro_ = this.pro_;
/*       */         if ((from_bitField0_ & 0x10) == 16) {
/*       */           to_bitField0_ |= 0x10;
/*       */         }
/*       */         result.isFriend_ = this.isFriend_;
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(Message other) {
/*       */         if (other instanceof PlayerHandler.recentContactInfo) {
/*       */           return mergeFrom((PlayerHandler.recentContactInfo)other);
/*       */         }
/*       */         super.mergeFrom(other);
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(PlayerHandler.recentContactInfo other) {
/*       */         if (other == PlayerHandler.recentContactInfo.getDefaultInstance()) {
/*       */           return this;
/*       */         }
/*       */         if (other.hasId()) {
/*       */           this.bitField0_ |= 0x1;
/*       */           this.id_ = other.id_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasName()) {
/*       */           this.bitField0_ |= 0x2;
/*       */           this.name_ = other.name_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasLevel()) {
/*       */           setLevel(other.getLevel());
/*       */         }
/*       */         if (other.hasPro()) {
/*       */           setPro(other.getPro());
/*       */         }
/*       */         if (other.hasIsFriend()) {
/*       */           setIsFriend(other.getIsFriend());
/*       */         }
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public final boolean isInitialized() {
/*       */         if (!hasId()) {
/*       */           return false;
/*       */         }
/*       */         if (!hasName()) {
/*       */           return false;
/*       */         }
/*       */         if (!hasLevel()) {
/*       */           return false;
/*       */         }
/*       */         if (!hasPro()) {
/*       */           return false;
/*       */         }
/*       */         if (!hasIsFriend()) {
/*       */           return false;
/*       */         }
/*       */         return true;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */         PlayerHandler.recentContactInfo parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (PlayerHandler.recentContactInfo)PlayerHandler.recentContactInfo.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (PlayerHandler.recentContactInfo)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null) {
/*       */             mergeFrom(parsedMessage);
/*       */           }
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasId() {
/*       */         return ((this.bitField0_ & 0x1) == 1);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public String getId() {
/*       */         Object ref = this.id_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8()) {
/*       */             this.id_ = s;
/*       */           }
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ByteString getIdBytes() {
/*       */         Object ref = this.id_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.id_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setId(String value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x1;
/*       */         this.id_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearId() {
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.id_ = PlayerHandler.recentContactInfo.getDefaultInstance().getId();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setIdBytes(ByteString value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x1;
/*       */         this.id_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasName() {
/*       */         return ((this.bitField0_ & 0x2) == 2);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public String getName() {
/*       */         Object ref = this.name_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8()) {
/*       */             this.name_ = s;
/*       */           }
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ByteString getNameBytes() {
/*       */         Object ref = this.name_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.name_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setName(String value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x2;
/*       */         this.name_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearName() {
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.name_ = PlayerHandler.recentContactInfo.getDefaultInstance().getName();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setNameBytes(ByteString value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x2;
/*       */         this.name_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasLevel() {
/*       */         return ((this.bitField0_ & 0x4) == 4);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public int getLevel() {
/*       */         return this.level_;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setLevel(int value) {
/*       */         this.bitField0_ |= 0x4;
/*       */         this.level_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearLevel() {
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.level_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasPro() {
/*       */         return ((this.bitField0_ & 0x8) == 8);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public int getPro() {
/*       */         return this.pro_;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setPro(int value) {
/*       */         this.bitField0_ |= 0x8;
/*       */         this.pro_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearPro() {
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.pro_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasIsFriend() {
/*       */         return ((this.bitField0_ & 0x10) == 16);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public int getIsFriend() {
/*       */         return this.isFriend_;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setIsFriend(int value) {
/*       */         this.bitField0_ |= 0x10;
/*       */         this.isFriend_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearIsFriend() {
/*       */         this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.isFriend_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */     }
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class RecentContactsResponse
/*       */     extends GeneratedMessage
/*       */     implements RecentContactsResponseOrBuilder
/*       */   {
/* 13453 */     private static final RecentContactsResponse defaultInstance = new RecentContactsResponse(true); private final UnknownFieldSet unknownFields; private RecentContactsResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private RecentContactsResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static RecentContactsResponse getDefaultInstance() { return defaultInstance; } public RecentContactsResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private RecentContactsResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: if ((mutable_bitField0_ & 0x2) != 2) { this.s2CData_ = new ArrayList<>(); mutable_bitField0_ |= 0x2; }  this.s2CData_.add(input.readMessage(PlayerHandler.recentContactInfo.PARSER, extensionRegistry)); break;case 26: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x2) == 2) this.s2CData_ = Collections.unmodifiableList(this.s2CData_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_RecentContactsResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_RecentContactsResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(RecentContactsResponse.class, Builder.class); } public static Parser<RecentContactsResponse> PARSER = (Parser<RecentContactsResponse>)new AbstractParser<RecentContactsResponse>() { public PlayerHandler.RecentContactsResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.RecentContactsResponse(input, extensionRegistry); } }
/* 13454 */     ; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_DATA_FIELD_NUMBER = 2; private List<PlayerHandler.recentContactInfo> s2CData_; public static final int S2C_MSG_FIELD_NUMBER = 3; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<RecentContactsResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public List<PlayerHandler.recentContactInfo> getS2CDataList() { return this.s2CData_; } public List<? extends PlayerHandler.recentContactInfoOrBuilder> getS2CDataOrBuilderList() { return (List)this.s2CData_; } public int getS2CDataCount() { return this.s2CData_.size(); } static { defaultInstance.initFields(); }
/*       */ 
/*       */ 
/*       */     
/*       */     public PlayerHandler.recentContactInfo getS2CData(int index) {
/*       */       return this.s2CData_.get(index);
/*       */     }
/*       */ 
/*       */     
/*       */     public PlayerHandler.recentContactInfoOrBuilder getS2CDataOrBuilder(int index) {
/*       */       return this.s2CData_.get(index);
/*       */     }
/*       */ 
/*       */     
/*       */     public boolean hasS2CMsg() {
/*       */       return ((this.bitField0_ & 0x2) == 2);
/*       */     }
/*       */ 
/*       */     
/*       */     public String getS2CMsg() {
/*       */       Object ref = this.s2CMsg_;
/*       */       if (ref instanceof String) {
/*       */         return (String)ref;
/*       */       }
/*       */       ByteString bs = (ByteString)ref;
/*       */       String s = bs.toStringUtf8();
/*       */       if (bs.isValidUtf8()) {
/*       */         this.s2CMsg_ = s;
/*       */       }
/*       */       return s;
/*       */     }
/*       */ 
/*       */     
/*       */     public ByteString getS2CMsgBytes() {
/*       */       Object ref = this.s2CMsg_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.s2CMsg_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref;
/*       */     }
/*       */ 
/*       */     
/*       */     private void initFields() {
/*       */       this.s2CCode_ = 0;
/*       */       this.s2CData_ = Collections.emptyList();
/*       */       this.s2CMsg_ = "";
/*       */     }
/*       */ 
/*       */     
/*       */     public final boolean isInitialized() {
/*       */       byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1) {
/*       */         return true;
/*       */       }
/*       */       if (isInitialized == 0) {
/*       */         return false;
/*       */       }
/*       */       if (!hasS2CCode()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       for (int i = 0; i < getS2CDataCount(); i++) {
/*       */         if (!getS2CData(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0;
/*       */           return false;
/*       */         } 
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true;
/*       */     }
/*       */ 
/*       */     
/*       */     public void writeTo(CodedOutputStream output) throws IOException {
/*       */       getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         output.writeInt32(1, this.s2CCode_);
/*       */       }
/*       */       for (int i = 0; i < this.s2CData_.size(); i++) {
/*       */         output.writeMessage(2, (MessageLite)this.s2CData_.get(i));
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         output.writeBytes(3, getS2CMsgBytes());
/*       */       }
/*       */       getUnknownFields().writeTo(output);
/*       */     }
/*       */ 
/*       */     
/*       */     public int getSerializedSize() {
/*       */       int size = this.memoizedSerializedSize;
/*       */       if (size != -1) {
/*       */         return size;
/*       */       }
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
/*       */       }
/*       */       for (int i = 0; i < this.s2CData_.size(); i++) {
/*       */         size += CodedOutputStream.computeMessageSize(2, (MessageLite)this.s2CData_.get(i));
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         size += CodedOutputStream.computeBytesSize(3, getS2CMsgBytes());
/*       */       }
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size;
/*       */     }
/*       */ 
/*       */     
/*       */     protected Object writeReplace() throws ObjectStreamException {
/*       */       return super.writeReplace();
/*       */     }
/*       */ 
/*       */     
/*       */     public static RecentContactsResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
/*       */       return (RecentContactsResponse)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */     
/*       */     public static RecentContactsResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (RecentContactsResponse)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */     
/*       */     public static RecentContactsResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
/*       */       return (RecentContactsResponse)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */     
/*       */     public static RecentContactsResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (RecentContactsResponse)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */     
/*       */     public static RecentContactsResponse parseFrom(InputStream input) throws IOException {
/*       */       return (RecentContactsResponse)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */     
/*       */     public static RecentContactsResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (RecentContactsResponse)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */     
/*       */     public static RecentContactsResponse parseDelimitedFrom(InputStream input) throws IOException {
/*       */       return (RecentContactsResponse)PARSER.parseDelimitedFrom(input);
/*       */     }
/*       */ 
/*       */     
/*       */     public static RecentContactsResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (RecentContactsResponse)PARSER.parseDelimitedFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */     
/*       */     public static RecentContactsResponse parseFrom(CodedInputStream input) throws IOException {
/*       */       return (RecentContactsResponse)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */     
/*       */     public static RecentContactsResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (RecentContactsResponse)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */     
/*       */     public static Builder newBuilder() {
/*       */       return Builder.create();
/*       */     }
/*       */ 
/*       */     
/*       */     public Builder newBuilderForType() {
/*       */       return newBuilder();
/*       */     }
/*       */ 
/*       */     
/*       */     public static Builder newBuilder(RecentContactsResponse prototype) {
/*       */       return newBuilder().mergeFrom(prototype);
/*       */     }
/*       */ 
/*       */     
/*       */     public Builder toBuilder() {
/*       */       return newBuilder(this);
/*       */     }
/*       */ 
/*       */     
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
/*       */       Builder builder = new Builder(parent);
/*       */       return builder;
/*       */     }
/*       */ 
/*       */     
/*       */     public static final class Builder
/*       */       extends GeneratedMessage.Builder<Builder>
/*       */       implements PlayerHandler.RecentContactsResponseOrBuilder
/*       */     {
/*       */       private int bitField0_;
/*       */       
/*       */       private int s2CCode_;
/*       */       
/*       */       private List<PlayerHandler.recentContactInfo> s2CData_;
/*       */       
/*       */       private RepeatedFieldBuilder<PlayerHandler.recentContactInfo, PlayerHandler.recentContactInfo.Builder, PlayerHandler.recentContactInfoOrBuilder> s2CDataBuilder_;
/*       */       
/*       */       private Object s2CMsg_;
/*       */ 
/*       */       
/*       */       public static final Descriptors.Descriptor getDescriptor() {
/*       */         return PlayerHandler.internal_static_pomelo_area_RecentContactsResponse_descriptor;
/*       */       }
/*       */ 
/*       */       
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */         return PlayerHandler.internal_static_pomelo_area_RecentContactsResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.RecentContactsResponse.class, Builder.class);
/*       */       }
/*       */ 
/*       */       
/*       */       private Builder() {
/*       */         this.s2CData_ = Collections.emptyList();
/*       */         this.s2CMsg_ = "";
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */       
/*       */       private Builder(GeneratedMessage.BuilderParent parent) {
/*       */         super(parent);
/*       */         this.s2CData_ = Collections.emptyList();
/*       */         this.s2CMsg_ = "";
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */       
/*       */       private void maybeForceBuilderInitialization() {
/*       */         if (PlayerHandler.RecentContactsResponse.alwaysUseFieldBuilders) {
/*       */           getS2CDataFieldBuilder();
/*       */         }
/*       */       }
/*       */ 
/*       */       
/*       */       private static Builder create() {
/*       */         return new Builder();
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder clear() {
/*       */         super.clear();
/*       */         this.s2CCode_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           this.s2CData_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFFD;
/*       */         } else {
/*       */           this.s2CDataBuilder_.clear();
/*       */         } 
/*       */         this.s2CMsg_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder clone() {
/*       */         return create().mergeFrom(buildPartial());
/*       */       }
/*       */ 
/*       */       
/*       */       public Descriptors.Descriptor getDescriptorForType() {
/*       */         return PlayerHandler.internal_static_pomelo_area_RecentContactsResponse_descriptor;
/*       */       }
/*       */ 
/*       */       
/*       */       public PlayerHandler.RecentContactsResponse getDefaultInstanceForType() {
/*       */         return PlayerHandler.RecentContactsResponse.getDefaultInstance();
/*       */       }
/*       */ 
/*       */       
/*       */       public PlayerHandler.RecentContactsResponse build() {
/*       */         PlayerHandler.RecentContactsResponse result = buildPartial();
/*       */         if (!result.isInitialized()) {
/*       */           throw newUninitializedMessageException(result);
/*       */         }
/*       */         return result;
/*       */       }
/*       */ 
/*       */       
/*       */       public PlayerHandler.RecentContactsResponse buildPartial() {
/*       */         PlayerHandler.RecentContactsResponse result = new PlayerHandler.RecentContactsResponse(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1) {
/*       */           to_bitField0_ |= 0x1;
/*       */         }
/*       */         result.s2CCode_ = this.s2CCode_;
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x2) == 2) {
/*       */             this.s2CData_ = Collections.unmodifiableList(this.s2CData_);
/*       */             this.bitField0_ &= 0xFFFFFFFD;
/*       */           } 
/*       */           result.s2CData_ = this.s2CData_;
/*       */         } else {
/*       */           result.s2CData_ = this.s2CDataBuilder_.build();
/*       */         } 
/*       */         if ((from_bitField0_ & 0x4) == 4) {
/*       */           to_bitField0_ |= 0x2;
/*       */         }
/*       */         result.s2CMsg_ = this.s2CMsg_;
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(Message other) {
/*       */         if (other instanceof PlayerHandler.RecentContactsResponse) {
/*       */           return mergeFrom((PlayerHandler.RecentContactsResponse)other);
/*       */         }
/*       */         super.mergeFrom(other);
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(PlayerHandler.RecentContactsResponse other) {
/*       */         if (other == PlayerHandler.RecentContactsResponse.getDefaultInstance()) {
/*       */           return this;
/*       */         }
/*       */         if (other.hasS2CCode()) {
/*       */           setS2CCode(other.getS2CCode());
/*       */         }
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           if (!other.s2CData_.isEmpty()) {
/*       */             if (this.s2CData_.isEmpty()) {
/*       */               this.s2CData_ = other.s2CData_;
/*       */               this.bitField0_ &= 0xFFFFFFFD;
/*       */             } else {
/*       */               ensureS2CDataIsMutable();
/*       */               this.s2CData_.addAll(other.s2CData_);
/*       */             } 
/*       */             onChanged();
/*       */           } 
/*       */         } else if (!other.s2CData_.isEmpty()) {
/*       */           if (this.s2CDataBuilder_.isEmpty()) {
/*       */             this.s2CDataBuilder_.dispose();
/*       */             this.s2CDataBuilder_ = null;
/*       */             this.s2CData_ = other.s2CData_;
/*       */             this.bitField0_ &= 0xFFFFFFFD;
/*       */             this.s2CDataBuilder_ = PlayerHandler.RecentContactsResponse.alwaysUseFieldBuilders ? getS2CDataFieldBuilder() : null;
/*       */           } else {
/*       */             this.s2CDataBuilder_.addAllMessages(other.s2CData_);
/*       */           } 
/*       */         } 
/*       */         if (other.hasS2CMsg()) {
/*       */           this.bitField0_ |= 0x4;
/*       */           this.s2CMsg_ = other.s2CMsg_;
/*       */           onChanged();
/*       */         } 
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public final boolean isInitialized() {
/*       */         if (!hasS2CCode()) {
/*       */           return false;
/*       */         }
/*       */         for (int i = 0; i < getS2CDataCount(); i++) {
/*       */           if (!getS2CData(i).isInitialized()) {
/*       */             return false;
/*       */           }
/*       */         } 
/*       */         return true;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */         PlayerHandler.RecentContactsResponse parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (PlayerHandler.RecentContactsResponse)PlayerHandler.RecentContactsResponse.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (PlayerHandler.RecentContactsResponse)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null) {
/*       */             mergeFrom(parsedMessage);
/*       */           }
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public boolean hasS2CCode() {
/*       */         return ((this.bitField0_ & 0x1) == 1);
/*       */       }
/*       */ 
/*       */       
/*       */       public int getS2CCode() {
/*       */         return this.s2CCode_;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder setS2CCode(int value) {
/*       */         this.bitField0_ |= 0x1;
/*       */         this.s2CCode_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder clearS2CCode() {
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CCode_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       private void ensureS2CDataIsMutable() {
/*       */         if ((this.bitField0_ & 0x2) != 2) {
/*       */           this.s2CData_ = new ArrayList<>(this.s2CData_);
/*       */           this.bitField0_ |= 0x2;
/*       */         } 
/*       */       }
/*       */ 
/*       */       
/*       */       public List<PlayerHandler.recentContactInfo> getS2CDataList() {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           return Collections.unmodifiableList(this.s2CData_);
/*       */         }
/*       */         return this.s2CDataBuilder_.getMessageList();
/*       */       }
/*       */ 
/*       */       
/*       */       public int getS2CDataCount() {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           return this.s2CData_.size();
/*       */         }
/*       */         return this.s2CDataBuilder_.getCount();
/*       */       }
/*       */ 
/*       */       
/*       */       public PlayerHandler.recentContactInfo getS2CData(int index) {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           return this.s2CData_.get(index);
/*       */         }
/*       */         return (PlayerHandler.recentContactInfo)this.s2CDataBuilder_.getMessage(index);
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder setS2CData(int index, PlayerHandler.recentContactInfo value) {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           if (value == null) {
/*       */             throw new NullPointerException();
/*       */           }
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.setMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder setS2CData(int index, PlayerHandler.recentContactInfo.Builder builderForValue) {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.setMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder addS2CData(PlayerHandler.recentContactInfo value) {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           if (value == null) {
/*       */             throw new NullPointerException();
/*       */           }
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.addMessage(value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder addS2CData(int index, PlayerHandler.recentContactInfo value) {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           if (value == null) {
/*       */             throw new NullPointerException();
/*       */           }
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.addMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder addS2CData(PlayerHandler.recentContactInfo.Builder builderForValue) {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.addMessage(builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder addS2CData(int index, PlayerHandler.recentContactInfo.Builder builderForValue) {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.addMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder addAllS2CData(Iterable<? extends PlayerHandler.recentContactInfo> values) {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           ensureS2CDataIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.s2CData_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder clearS2CData() {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           this.s2CData_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFFD;
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.clear();
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder removeS2CData(int index) {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.remove(index);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public PlayerHandler.recentContactInfo.Builder getS2CDataBuilder(int index) {
/*       */         return (PlayerHandler.recentContactInfo.Builder)getS2CDataFieldBuilder().getBuilder(index);
/*       */       }
/*       */ 
/*       */       
/*       */       public PlayerHandler.recentContactInfoOrBuilder getS2CDataOrBuilder(int index) {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           return this.s2CData_.get(index);
/*       */         }
/*       */         return (PlayerHandler.recentContactInfoOrBuilder)this.s2CDataBuilder_.getMessageOrBuilder(index);
/*       */       }
/*       */ 
/*       */       
/*       */       public List<? extends PlayerHandler.recentContactInfoOrBuilder> getS2CDataOrBuilderList() {
/*       */         if (this.s2CDataBuilder_ != null) {
/*       */           return this.s2CDataBuilder_.getMessageOrBuilderList();
/*       */         }
/*       */         return Collections.unmodifiableList((List)this.s2CData_);
/*       */       }
/*       */ 
/*       */       
/*       */       public PlayerHandler.recentContactInfo.Builder addS2CDataBuilder() {
/*       */         return (PlayerHandler.recentContactInfo.Builder)getS2CDataFieldBuilder().addBuilder(PlayerHandler.recentContactInfo.getDefaultInstance());
/*       */       }
/*       */ 
/*       */       
/*       */       public PlayerHandler.recentContactInfo.Builder addS2CDataBuilder(int index) {
/*       */         return (PlayerHandler.recentContactInfo.Builder)getS2CDataFieldBuilder().addBuilder(index, PlayerHandler.recentContactInfo.getDefaultInstance());
/*       */       }
/*       */ 
/*       */       
/*       */       public List<PlayerHandler.recentContactInfo.Builder> getS2CDataBuilderList() {
/*       */         return getS2CDataFieldBuilder().getBuilderList();
/*       */       }
/*       */ 
/*       */       
/*       */       private RepeatedFieldBuilder<PlayerHandler.recentContactInfo, PlayerHandler.recentContactInfo.Builder, PlayerHandler.recentContactInfoOrBuilder> getS2CDataFieldBuilder() {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           this.s2CDataBuilder_ = new RepeatedFieldBuilder(this.s2CData_, ((this.bitField0_ & 0x2) == 2), getParentForChildren(), isClean());
/*       */           this.s2CData_ = null;
/*       */         } 
/*       */         return this.s2CDataBuilder_;
/*       */       }
/*       */ 
/*       */       
/*       */       public boolean hasS2CMsg() {
/*       */         return ((this.bitField0_ & 0x4) == 4);
/*       */       }
/*       */ 
/*       */       
/*       */       public String getS2CMsg() {
/*       */         Object ref = this.s2CMsg_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8()) {
/*       */             this.s2CMsg_ = s;
/*       */           }
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */ 
/*       */       
/*       */       public ByteString getS2CMsgBytes() {
/*       */         Object ref = this.s2CMsg_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CMsg_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder setS2CMsg(String value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x4;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearS2CMsg() {
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.s2CMsg_ = PlayerHandler.RecentContactsResponse.getDefaultInstance().getS2CMsg();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder setS2CMsgBytes(ByteString value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x4;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */     }
/*       */   }
/*       */   
/*       */   public static final class RewardBasicData
/*       */     extends GeneratedMessage
/*       */     implements RewardBasicDataOrBuilder
/*       */   {
/* 14124 */     private static final RewardBasicData defaultInstance = new RewardBasicData(true); private final UnknownFieldSet unknownFields; private RewardBasicData(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private RewardBasicData(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static RewardBasicData getDefaultInstance() { return defaultInstance; } public RewardBasicData getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private RewardBasicData(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.templateId_ = input.readInt32(); break;case 16: this.bitField0_ |= 0x2; this.num_ = input.readInt32(); break;case 24: this.bitField0_ |= 0x4; this.icon_ = input.readInt32(); break;case 32: this.bitField0_ |= 0x8; this.quality_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_RewardBasicData_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_RewardBasicData_fieldAccessorTable.ensureFieldAccessorsInitialized(RewardBasicData.class, Builder.class); } public static Parser<RewardBasicData> PARSER = (Parser<RewardBasicData>)new AbstractParser<RewardBasicData>() { public PlayerHandler.RewardBasicData parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.RewardBasicData(input, extensionRegistry); } }; private int bitField0_; public static final int TEMPLATEID_FIELD_NUMBER = 1; private int templateId_; public static final int NUM_FIELD_NUMBER = 2; private int num_; public static final int ICON_FIELD_NUMBER = 3; private int icon_; public static final int QUALITY_FIELD_NUMBER = 4; private int quality_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<RewardBasicData> getParserForType() { return PARSER; } public boolean hasTemplateId() { return ((this.bitField0_ & 0x1) == 1); } public int getTemplateId() { return this.templateId_; } public boolean hasNum() { return ((this.bitField0_ & 0x2) == 2); } public int getNum() { return this.num_; } public boolean hasIcon() { return ((this.bitField0_ & 0x4) == 4); } public int getIcon() { return this.icon_; } public boolean hasQuality() { return ((this.bitField0_ & 0x8) == 8); } public int getQuality() { return this.quality_; } private void initFields() { this.templateId_ = 0; this.num_ = 0; this.icon_ = 0; this.quality_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasTemplateId()) { this.memoizedIsInitialized = 0; return false; }  if (!hasNum()) { this.memoizedIsInitialized = 0; return false; }  if (!hasIcon()) { this.memoizedIsInitialized = 0; return false; }  if (!hasQuality()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.templateId_);  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.num_);  if ((this.bitField0_ & 0x4) == 4) output.writeInt32(3, this.icon_);  if ((this.bitField0_ & 0x8) == 8) output.writeInt32(4, this.quality_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.templateId_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.num_);  if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt32Size(3, this.icon_);  if ((this.bitField0_ & 0x8) == 8) size += CodedOutputStream.computeInt32Size(4, this.quality_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static RewardBasicData parseFrom(ByteString data) throws InvalidProtocolBufferException { return (RewardBasicData)PARSER.parseFrom(data); } public static RewardBasicData parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (RewardBasicData)PARSER.parseFrom(data, extensionRegistry); } public static RewardBasicData parseFrom(byte[] data) throws InvalidProtocolBufferException { return (RewardBasicData)PARSER.parseFrom(data); } public static RewardBasicData parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (RewardBasicData)PARSER.parseFrom(data, extensionRegistry); } public static RewardBasicData parseFrom(InputStream input) throws IOException { return (RewardBasicData)PARSER.parseFrom(input); } public static RewardBasicData parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (RewardBasicData)PARSER.parseFrom(input, extensionRegistry); } public static RewardBasicData parseDelimitedFrom(InputStream input) throws IOException { return (RewardBasicData)PARSER.parseDelimitedFrom(input); } public static RewardBasicData parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (RewardBasicData)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static RewardBasicData parseFrom(CodedInputStream input) throws IOException { return (RewardBasicData)PARSER.parseFrom(input); } public static RewardBasicData parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (RewardBasicData)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(RewardBasicData prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.RewardBasicDataOrBuilder {
/* 14125 */       private int bitField0_; private int templateId_; private int num_; private int icon_; private int quality_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_RewardBasicData_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_RewardBasicData_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.RewardBasicData.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.RewardBasicData.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.templateId_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.num_ = 0; this.bitField0_ &= 0xFFFFFFFD; this.icon_ = 0; this.bitField0_ &= 0xFFFFFFFB; this.quality_ = 0; this.bitField0_ &= 0xFFFFFFF7; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_RewardBasicData_descriptor; } public PlayerHandler.RewardBasicData getDefaultInstanceForType() { return PlayerHandler.RewardBasicData.getDefaultInstance(); } public PlayerHandler.RewardBasicData build() { PlayerHandler.RewardBasicData result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.RewardBasicData buildPartial() { PlayerHandler.RewardBasicData result = new PlayerHandler.RewardBasicData(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.templateId_ = this.templateId_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.num_ = this.num_; if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;  result.icon_ = this.icon_; if ((from_bitField0_ & 0x8) == 8) to_bitField0_ |= 0x8;  result.quality_ = this.quality_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.RewardBasicData) return mergeFrom((PlayerHandler.RewardBasicData)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.RewardBasicData other) { if (other == PlayerHandler.RewardBasicData.getDefaultInstance()) return this;  if (other.hasTemplateId()) setTemplateId(other.getTemplateId());  if (other.hasNum()) setNum(other.getNum());  if (other.hasIcon()) setIcon(other.getIcon());  if (other.hasQuality()) setQuality(other.getQuality());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasTemplateId()) return false;  if (!hasNum()) return false;  if (!hasIcon()) return false;  if (!hasQuality()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.RewardBasicData parsedMessage = null; try { parsedMessage = (PlayerHandler.RewardBasicData)PlayerHandler.RewardBasicData.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.RewardBasicData)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasTemplateId() { return ((this.bitField0_ & 0x1) == 1); } public int getTemplateId() { return this.templateId_; } public Builder setTemplateId(int value) { this.bitField0_ |= 0x1; this.templateId_ = value; onChanged(); return this; } public Builder clearTemplateId() { this.bitField0_ &= 0xFFFFFFFE; this.templateId_ = 0; onChanged(); return this; } public boolean hasNum() { return ((this.bitField0_ & 0x2) == 2); } public int getNum() { return this.num_; } public Builder setNum(int value) { this.bitField0_ |= 0x2; this.num_ = value; onChanged(); return this; } public Builder clearNum() { this.bitField0_ &= 0xFFFFFFFD; this.num_ = 0; onChanged(); return this; } public boolean hasIcon() { return ((this.bitField0_ & 0x4) == 4); } public int getIcon() { return this.icon_; } public Builder setIcon(int value) { this.bitField0_ |= 0x4; this.icon_ = value; onChanged(); return this; } public Builder clearIcon() { this.bitField0_ &= 0xFFFFFFFB; this.icon_ = 0; onChanged(); return this; } public boolean hasQuality() { return ((this.bitField0_ & 0x8) == 8); } public int getQuality() { return this.quality_; } public Builder setQuality(int value) { this.bitField0_ |= 0x8; this.quality_ = value; onChanged(); return this; } public Builder clearQuality() { this.bitField0_ &= 0xFFFFFFF7; this.quality_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class DailyReward
/*       */     extends GeneratedMessage
/*       */     implements DailyRewardOrBuilder
/*       */   {
/* 15081 */     private static final DailyReward defaultInstance = new DailyReward(true); private final UnknownFieldSet unknownFields; private DailyReward(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private DailyReward(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static DailyReward getDefaultInstance() { return defaultInstance; } public DailyReward getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private DailyReward(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.id_ = input.readInt32(); break;case 18: if ((mutable_bitField0_ & 0x2) != 2) { this.rewards_ = new ArrayList<>(); mutable_bitField0_ |= 0x2; }  this.rewards_.add(input.readMessage(PlayerHandler.RewardBasicData.PARSER, extensionRegistry)); break;case 24: this.bitField0_ |= 0x2; this.score_ = input.readInt32(); break;case 32: this.bitField0_ |= 0x4; this.isGet_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x2) == 2) this.rewards_ = Collections.unmodifiableList(this.rewards_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_DailyReward_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_DailyReward_fieldAccessorTable.ensureFieldAccessorsInitialized(DailyReward.class, Builder.class); } public static Parser<DailyReward> PARSER = (Parser<DailyReward>)new AbstractParser<DailyReward>() { public PlayerHandler.DailyReward parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.DailyReward(input, extensionRegistry); } }
/* 15082 */     ; private int bitField0_; public static final int ID_FIELD_NUMBER = 1; private int id_; public static final int REWARDS_FIELD_NUMBER = 2; private List<PlayerHandler.RewardBasicData> rewards_; public static final int SCORE_FIELD_NUMBER = 3; private int score_; public static final int ISGET_FIELD_NUMBER = 4; private int isGet_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<DailyReward> getParserForType() { return PARSER; } public boolean hasId() { return ((this.bitField0_ & 0x1) == 1); } public int getId() { return this.id_; } public List<PlayerHandler.RewardBasicData> getRewardsList() { return this.rewards_; } public List<? extends PlayerHandler.RewardBasicDataOrBuilder> getRewardsOrBuilderList() { return (List)this.rewards_; } static { defaultInstance.initFields(); }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getRewardsCount() {
/*       */       return this.rewards_.size();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public PlayerHandler.RewardBasicData getRewards(int index) {
/*       */       return this.rewards_.get(index);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public PlayerHandler.RewardBasicDataOrBuilder getRewardsOrBuilder(int index) {
/*       */       return this.rewards_.get(index);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public boolean hasScore() {
/*       */       return ((this.bitField0_ & 0x2) == 2);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getScore() {
/*       */       return this.score_;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public boolean hasIsGet() {
/*       */       return ((this.bitField0_ & 0x4) == 4);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getIsGet() {
/*       */       return this.isGet_;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private void initFields() {
/*       */       this.id_ = 0;
/*       */       this.rewards_ = Collections.emptyList();
/*       */       this.score_ = 0;
/*       */       this.isGet_ = 0;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public final boolean isInitialized() {
/*       */       byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1) {
/*       */         return true;
/*       */       }
/*       */       if (isInitialized == 0) {
/*       */         return false;
/*       */       }
/*       */       if (!hasId()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasScore()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasIsGet()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       for (int i = 0; i < getRewardsCount(); i++) {
/*       */         if (!getRewards(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0;
/*       */           return false;
/*       */         } 
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public void writeTo(CodedOutputStream output) throws IOException {
/*       */       getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         output.writeInt32(1, this.id_);
/*       */       }
/*       */       for (int i = 0; i < this.rewards_.size(); i++) {
/*       */         output.writeMessage(2, (MessageLite)this.rewards_.get(i));
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         output.writeInt32(3, this.score_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x4) == 4) {
/*       */         output.writeInt32(4, this.isGet_);
/*       */       }
/*       */       getUnknownFields().writeTo(output);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getSerializedSize() {
/*       */       int size = this.memoizedSerializedSize;
/*       */       if (size != -1) {
/*       */         return size;
/*       */       }
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         size += CodedOutputStream.computeInt32Size(1, this.id_);
/*       */       }
/*       */       for (int i = 0; i < this.rewards_.size(); i++) {
/*       */         size += CodedOutputStream.computeMessageSize(2, (MessageLite)this.rewards_.get(i));
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         size += CodedOutputStream.computeInt32Size(3, this.score_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x4) == 4) {
/*       */         size += CodedOutputStream.computeInt32Size(4, this.isGet_);
/*       */       }
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     protected Object writeReplace() throws ObjectStreamException {
/*       */       return super.writeReplace();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static DailyReward parseFrom(ByteString data) throws InvalidProtocolBufferException {
/*       */       return (DailyReward)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static DailyReward parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (DailyReward)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static DailyReward parseFrom(byte[] data) throws InvalidProtocolBufferException {
/*       */       return (DailyReward)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static DailyReward parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (DailyReward)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static DailyReward parseFrom(InputStream input) throws IOException {
/*       */       return (DailyReward)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static DailyReward parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (DailyReward)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static DailyReward parseDelimitedFrom(InputStream input) throws IOException {
/*       */       return (DailyReward)PARSER.parseDelimitedFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static DailyReward parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (DailyReward)PARSER.parseDelimitedFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static DailyReward parseFrom(CodedInputStream input) throws IOException {
/*       */       return (DailyReward)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static DailyReward parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (DailyReward)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static Builder newBuilder() {
/*       */       return Builder.create();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public Builder newBuilderForType() {
/*       */       return newBuilder();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static Builder newBuilder(DailyReward prototype) {
/*       */       return newBuilder().mergeFrom(prototype);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public Builder toBuilder() {
/*       */       return newBuilder(this);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
/*       */       Builder builder = new Builder(parent);
/*       */       return builder;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static final class Builder
/*       */       extends GeneratedMessage.Builder<Builder>
/*       */       implements PlayerHandler.DailyRewardOrBuilder
/*       */     {
/*       */       private int bitField0_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private int id_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private List<PlayerHandler.RewardBasicData> rewards_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private RepeatedFieldBuilder<PlayerHandler.RewardBasicData, PlayerHandler.RewardBasicData.Builder, PlayerHandler.RewardBasicDataOrBuilder> rewardsBuilder_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private int score_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private int isGet_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public static final Descriptors.Descriptor getDescriptor() {
/*       */         return PlayerHandler.internal_static_pomelo_area_DailyReward_descriptor;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */         return PlayerHandler.internal_static_pomelo_area_DailyReward_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.DailyReward.class, Builder.class);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private Builder() {
/*       */         this.rewards_ = Collections.emptyList();
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private Builder(GeneratedMessage.BuilderParent parent) {
/*       */         super(parent);
/*       */         this.rewards_ = Collections.emptyList();
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private void maybeForceBuilderInitialization() {
/*       */         if (PlayerHandler.DailyReward.alwaysUseFieldBuilders) {
/*       */           getRewardsFieldBuilder();
/*       */         }
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private static Builder create() {
/*       */         return new Builder();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clear() {
/*       */         super.clear();
/*       */         this.id_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         if (this.rewardsBuilder_ == null) {
/*       */           this.rewards_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFFD;
/*       */         } else {
/*       */           this.rewardsBuilder_.clear();
/*       */         } 
/*       */         this.score_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.isGet_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clone() {
/*       */         return create().mergeFrom(buildPartial());
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Descriptors.Descriptor getDescriptorForType() {
/*       */         return PlayerHandler.internal_static_pomelo_area_DailyReward_descriptor;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.DailyReward getDefaultInstanceForType() {
/*       */         return PlayerHandler.DailyReward.getDefaultInstance();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.DailyReward build() {
/*       */         PlayerHandler.DailyReward result = buildPartial();
/*       */         if (!result.isInitialized()) {
/*       */           throw newUninitializedMessageException(result);
/*       */         }
/*       */         return result;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.DailyReward buildPartial() {
/*       */         PlayerHandler.DailyReward result = new PlayerHandler.DailyReward(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1) {
/*       */           to_bitField0_ |= 0x1;
/*       */         }
/*       */         result.id_ = this.id_;
/*       */         if (this.rewardsBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x2) == 2) {
/*       */             this.rewards_ = Collections.unmodifiableList(this.rewards_);
/*       */             this.bitField0_ &= 0xFFFFFFFD;
/*       */           } 
/*       */           result.rewards_ = this.rewards_;
/*       */         } else {
/*       */           result.rewards_ = this.rewardsBuilder_.build();
/*       */         } 
/*       */         if ((from_bitField0_ & 0x4) == 4) {
/*       */           to_bitField0_ |= 0x2;
/*       */         }
/*       */         result.score_ = this.score_;
/*       */         if ((from_bitField0_ & 0x8) == 8) {
/*       */           to_bitField0_ |= 0x4;
/*       */         }
/*       */         result.isGet_ = this.isGet_;
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(Message other) {
/*       */         if (other instanceof PlayerHandler.DailyReward) {
/*       */           return mergeFrom((PlayerHandler.DailyReward)other);
/*       */         }
/*       */         super.mergeFrom(other);
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(PlayerHandler.DailyReward other) {
/*       */         if (other == PlayerHandler.DailyReward.getDefaultInstance()) {
/*       */           return this;
/*       */         }
/*       */         if (other.hasId()) {
/*       */           setId(other.getId());
/*       */         }
/*       */         if (this.rewardsBuilder_ == null) {
/*       */           if (!other.rewards_.isEmpty()) {
/*       */             if (this.rewards_.isEmpty()) {
/*       */               this.rewards_ = other.rewards_;
/*       */               this.bitField0_ &= 0xFFFFFFFD;
/*       */             } else {
/*       */               ensureRewardsIsMutable();
/*       */               this.rewards_.addAll(other.rewards_);
/*       */             } 
/*       */             onChanged();
/*       */           } 
/*       */         } else if (!other.rewards_.isEmpty()) {
/*       */           if (this.rewardsBuilder_.isEmpty()) {
/*       */             this.rewardsBuilder_.dispose();
/*       */             this.rewardsBuilder_ = null;
/*       */             this.rewards_ = other.rewards_;
/*       */             this.bitField0_ &= 0xFFFFFFFD;
/*       */             this.rewardsBuilder_ = PlayerHandler.DailyReward.alwaysUseFieldBuilders ? getRewardsFieldBuilder() : null;
/*       */           } else {
/*       */             this.rewardsBuilder_.addAllMessages(other.rewards_);
/*       */           } 
/*       */         } 
/*       */         if (other.hasScore()) {
/*       */           setScore(other.getScore());
/*       */         }
/*       */         if (other.hasIsGet()) {
/*       */           setIsGet(other.getIsGet());
/*       */         }
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public final boolean isInitialized() {
/*       */         if (!hasId()) {
/*       */           return false;
/*       */         }
/*       */         if (!hasScore()) {
/*       */           return false;
/*       */         }
/*       */         if (!hasIsGet()) {
/*       */           return false;
/*       */         }
/*       */         for (int i = 0; i < getRewardsCount(); i++) {
/*       */           if (!getRewards(i).isInitialized()) {
/*       */             return false;
/*       */           }
/*       */         } 
/*       */         return true;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */         PlayerHandler.DailyReward parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (PlayerHandler.DailyReward)PlayerHandler.DailyReward.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (PlayerHandler.DailyReward)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null) {
/*       */             mergeFrom(parsedMessage);
/*       */           }
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasId() {
/*       */         return ((this.bitField0_ & 0x1) == 1);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public int getId() {
/*       */         return this.id_;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setId(int value) {
/*       */         this.bitField0_ |= 0x1;
/*       */         this.id_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearId() {
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.id_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private void ensureRewardsIsMutable() {
/*       */         if ((this.bitField0_ & 0x2) != 2) {
/*       */           this.rewards_ = new ArrayList<>(this.rewards_);
/*       */           this.bitField0_ |= 0x2;
/*       */         } 
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public List<PlayerHandler.RewardBasicData> getRewardsList() {
/*       */         if (this.rewardsBuilder_ == null) {
/*       */           return Collections.unmodifiableList(this.rewards_);
/*       */         }
/*       */         return this.rewardsBuilder_.getMessageList();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public int getRewardsCount() {
/*       */         if (this.rewardsBuilder_ == null) {
/*       */           return this.rewards_.size();
/*       */         }
/*       */         return this.rewardsBuilder_.getCount();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.RewardBasicData getRewards(int index) {
/*       */         if (this.rewardsBuilder_ == null) {
/*       */           return this.rewards_.get(index);
/*       */         }
/*       */         return (PlayerHandler.RewardBasicData)this.rewardsBuilder_.getMessage(index);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setRewards(int index, PlayerHandler.RewardBasicData value) {
/*       */         if (this.rewardsBuilder_ == null) {
/*       */           if (value == null) {
/*       */             throw new NullPointerException();
/*       */           }
/*       */           ensureRewardsIsMutable();
/*       */           this.rewards_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.rewardsBuilder_.setMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setRewards(int index, PlayerHandler.RewardBasicData.Builder builderForValue) {
/*       */         if (this.rewardsBuilder_ == null) {
/*       */           ensureRewardsIsMutable();
/*       */           this.rewards_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.rewardsBuilder_.setMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addRewards(PlayerHandler.RewardBasicData value) {
/*       */         if (this.rewardsBuilder_ == null) {
/*       */           if (value == null) {
/*       */             throw new NullPointerException();
/*       */           }
/*       */           ensureRewardsIsMutable();
/*       */           this.rewards_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.rewardsBuilder_.addMessage(value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addRewards(int index, PlayerHandler.RewardBasicData value) {
/*       */         if (this.rewardsBuilder_ == null) {
/*       */           if (value == null) {
/*       */             throw new NullPointerException();
/*       */           }
/*       */           ensureRewardsIsMutable();
/*       */           this.rewards_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.rewardsBuilder_.addMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addRewards(PlayerHandler.RewardBasicData.Builder builderForValue) {
/*       */         if (this.rewardsBuilder_ == null) {
/*       */           ensureRewardsIsMutable();
/*       */           this.rewards_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.rewardsBuilder_.addMessage(builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addRewards(int index, PlayerHandler.RewardBasicData.Builder builderForValue) {
/*       */         if (this.rewardsBuilder_ == null) {
/*       */           ensureRewardsIsMutable();
/*       */           this.rewards_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.rewardsBuilder_.addMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addAllRewards(Iterable<? extends PlayerHandler.RewardBasicData> values) {
/*       */         if (this.rewardsBuilder_ == null) {
/*       */           ensureRewardsIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.rewards_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.rewardsBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearRewards() {
/*       */         if (this.rewardsBuilder_ == null) {
/*       */           this.rewards_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFFD;
/*       */           onChanged();
/*       */         } else {
/*       */           this.rewardsBuilder_.clear();
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder removeRewards(int index) {
/*       */         if (this.rewardsBuilder_ == null) {
/*       */           ensureRewardsIsMutable();
/*       */           this.rewards_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.rewardsBuilder_.remove(index);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.RewardBasicData.Builder getRewardsBuilder(int index) {
/*       */         return (PlayerHandler.RewardBasicData.Builder)getRewardsFieldBuilder().getBuilder(index);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.RewardBasicDataOrBuilder getRewardsOrBuilder(int index) {
/*       */         if (this.rewardsBuilder_ == null) {
/*       */           return this.rewards_.get(index);
/*       */         }
/*       */         return (PlayerHandler.RewardBasicDataOrBuilder)this.rewardsBuilder_.getMessageOrBuilder(index);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public List<? extends PlayerHandler.RewardBasicDataOrBuilder> getRewardsOrBuilderList() {
/*       */         if (this.rewardsBuilder_ != null) {
/*       */           return this.rewardsBuilder_.getMessageOrBuilderList();
/*       */         }
/*       */         return Collections.unmodifiableList((List)this.rewards_);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.RewardBasicData.Builder addRewardsBuilder() {
/*       */         return (PlayerHandler.RewardBasicData.Builder)getRewardsFieldBuilder().addBuilder(PlayerHandler.RewardBasicData.getDefaultInstance());
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.RewardBasicData.Builder addRewardsBuilder(int index) {
/*       */         return (PlayerHandler.RewardBasicData.Builder)getRewardsFieldBuilder().addBuilder(index, PlayerHandler.RewardBasicData.getDefaultInstance());
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public List<PlayerHandler.RewardBasicData.Builder> getRewardsBuilderList() {
/*       */         return getRewardsFieldBuilder().getBuilderList();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private RepeatedFieldBuilder<PlayerHandler.RewardBasicData, PlayerHandler.RewardBasicData.Builder, PlayerHandler.RewardBasicDataOrBuilder> getRewardsFieldBuilder() {
/*       */         if (this.rewardsBuilder_ == null) {
/*       */           this.rewardsBuilder_ = new RepeatedFieldBuilder(this.rewards_, ((this.bitField0_ & 0x2) == 2), getParentForChildren(), isClean());
/*       */           this.rewards_ = null;
/*       */         } 
/*       */         return this.rewardsBuilder_;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasScore() {
/*       */         return ((this.bitField0_ & 0x4) == 4);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public int getScore() {
/*       */         return this.score_;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setScore(int value) {
/*       */         this.bitField0_ |= 0x4;
/*       */         this.score_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearScore() {
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.score_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasIsGet() {
/*       */         return ((this.bitField0_ & 0x8) == 8);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public int getIsGet() {
/*       */         return this.isGet_;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setIsGet(int value) {
/*       */         this.bitField0_ |= 0x8;
/*       */         this.isGet_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearIsGet() {
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.isGet_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */     }
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class DailyActivity
/*       */     extends GeneratedMessage
/*       */     implements DailyActivityOrBuilder
/*       */   {
/* 16254 */     private static final DailyActivity defaultInstance = new DailyActivity(true); private final UnknownFieldSet unknownFields; private DailyActivity(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private DailyActivity(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static DailyActivity getDefaultInstance() { return defaultInstance; } public DailyActivity getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private DailyActivity(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.id_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.name_ = bs; break;case 24: this.bitField0_ |= 0x4; this.score_ = input.readInt32(); break;case 32: this.bitField0_ |= 0x8; this.scoreLimit_ = input.readInt32(); break;case 42: bs = input.readBytes(); this.bitField0_ |= 0x10; this.rule_ = bs; break;case 48: this.bitField0_ |= 0x20; this.target_ = input.readInt32(); break;case 56: this.bitField0_ |= 0x40; this.level_ = input.readInt32(); break;case 64: this.bitField0_ |= 0x80; this.sort_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_DailyActivity_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_DailyActivity_fieldAccessorTable.ensureFieldAccessorsInitialized(DailyActivity.class, Builder.class); } public static Parser<DailyActivity> PARSER = (Parser<DailyActivity>)new AbstractParser<DailyActivity>() { public PlayerHandler.DailyActivity parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.DailyActivity(input, extensionRegistry); } }
/* 16255 */     ; private int bitField0_; public static final int ID_FIELD_NUMBER = 1; private int id_; public static final int NAME_FIELD_NUMBER = 2; private Object name_; public static final int SCORE_FIELD_NUMBER = 3; private int score_; public static final int SCORELIMIT_FIELD_NUMBER = 4; private int scoreLimit_; public static final int RULE_FIELD_NUMBER = 5; private Object rule_; public static final int TARGET_FIELD_NUMBER = 6; private int target_; public static final int LEVEL_FIELD_NUMBER = 7; private int level_; public static final int SORT_FIELD_NUMBER = 8; private int sort_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<DailyActivity> getParserForType() { return PARSER; } public boolean hasId() { return ((this.bitField0_ & 0x1) == 1); } public int getId() { return this.id_; } public boolean hasName() { return ((this.bitField0_ & 0x2) == 2); } public String getName() { Object ref = this.name_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.name_ = s;  return s; } static { defaultInstance.initFields(); }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public ByteString getNameBytes() {
/*       */       Object ref = this.name_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.name_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public boolean hasScore() {
/*       */       return ((this.bitField0_ & 0x4) == 4);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getScore() {
/*       */       return this.score_;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public boolean hasScoreLimit() {
/*       */       return ((this.bitField0_ & 0x8) == 8);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getScoreLimit() {
/*       */       return this.scoreLimit_;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public boolean hasRule() {
/*       */       return ((this.bitField0_ & 0x10) == 16);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public String getRule() {
/*       */       Object ref = this.rule_;
/*       */       if (ref instanceof String) {
/*       */         return (String)ref;
/*       */       }
/*       */       ByteString bs = (ByteString)ref;
/*       */       String s = bs.toStringUtf8();
/*       */       if (bs.isValidUtf8()) {
/*       */         this.rule_ = s;
/*       */       }
/*       */       return s;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public ByteString getRuleBytes() {
/*       */       Object ref = this.rule_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.rule_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public boolean hasTarget() {
/*       */       return ((this.bitField0_ & 0x20) == 32);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getTarget() {
/*       */       return this.target_;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public boolean hasLevel() {
/*       */       return ((this.bitField0_ & 0x40) == 64);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getLevel() {
/*       */       return this.level_;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public boolean hasSort() {
/*       */       return ((this.bitField0_ & 0x80) == 128);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getSort() {
/*       */       return this.sort_;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private void initFields() {
/*       */       this.id_ = 0;
/*       */       this.name_ = "";
/*       */       this.score_ = 0;
/*       */       this.scoreLimit_ = 0;
/*       */       this.rule_ = "";
/*       */       this.target_ = 0;
/*       */       this.level_ = 0;
/*       */       this.sort_ = 0;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public final boolean isInitialized() {
/*       */       byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1) {
/*       */         return true;
/*       */       }
/*       */       if (isInitialized == 0) {
/*       */         return false;
/*       */       }
/*       */       if (!hasId()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasName()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasScore()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasScoreLimit()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasRule()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasTarget()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasLevel()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasSort()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public void writeTo(CodedOutputStream output) throws IOException {
/*       */       getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         output.writeInt32(1, this.id_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         output.writeBytes(2, getNameBytes());
/*       */       }
/*       */       if ((this.bitField0_ & 0x4) == 4) {
/*       */         output.writeInt32(3, this.score_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x8) == 8) {
/*       */         output.writeInt32(4, this.scoreLimit_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x10) == 16) {
/*       */         output.writeBytes(5, getRuleBytes());
/*       */       }
/*       */       if ((this.bitField0_ & 0x20) == 32) {
/*       */         output.writeInt32(6, this.target_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x40) == 64) {
/*       */         output.writeInt32(7, this.level_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x80) == 128) {
/*       */         output.writeInt32(8, this.sort_);
/*       */       }
/*       */       getUnknownFields().writeTo(output);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getSerializedSize() {
/*       */       int size = this.memoizedSerializedSize;
/*       */       if (size != -1) {
/*       */         return size;
/*       */       }
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         size += CodedOutputStream.computeInt32Size(1, this.id_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         size += CodedOutputStream.computeBytesSize(2, getNameBytes());
/*       */       }
/*       */       if ((this.bitField0_ & 0x4) == 4) {
/*       */         size += CodedOutputStream.computeInt32Size(3, this.score_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x8) == 8) {
/*       */         size += CodedOutputStream.computeInt32Size(4, this.scoreLimit_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x10) == 16) {
/*       */         size += CodedOutputStream.computeBytesSize(5, getRuleBytes());
/*       */       }
/*       */       if ((this.bitField0_ & 0x20) == 32) {
/*       */         size += CodedOutputStream.computeInt32Size(6, this.target_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x40) == 64) {
/*       */         size += CodedOutputStream.computeInt32Size(7, this.level_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x80) == 128) {
/*       */         size += CodedOutputStream.computeInt32Size(8, this.sort_);
/*       */       }
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     protected Object writeReplace() throws ObjectStreamException {
/*       */       return super.writeReplace();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static DailyActivity parseFrom(ByteString data) throws InvalidProtocolBufferException {
/*       */       return (DailyActivity)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static DailyActivity parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (DailyActivity)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static DailyActivity parseFrom(byte[] data) throws InvalidProtocolBufferException {
/*       */       return (DailyActivity)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static DailyActivity parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (DailyActivity)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static DailyActivity parseFrom(InputStream input) throws IOException {
/*       */       return (DailyActivity)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static DailyActivity parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (DailyActivity)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static DailyActivity parseDelimitedFrom(InputStream input) throws IOException {
/*       */       return (DailyActivity)PARSER.parseDelimitedFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static DailyActivity parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (DailyActivity)PARSER.parseDelimitedFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static DailyActivity parseFrom(CodedInputStream input) throws IOException {
/*       */       return (DailyActivity)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static DailyActivity parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (DailyActivity)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static Builder newBuilder() {
/*       */       return Builder.create();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public Builder newBuilderForType() {
/*       */       return newBuilder();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static Builder newBuilder(DailyActivity prototype) {
/*       */       return newBuilder().mergeFrom(prototype);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public Builder toBuilder() {
/*       */       return newBuilder(this);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
/*       */       Builder builder = new Builder(parent);
/*       */       return builder;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static final class Builder
/*       */       extends GeneratedMessage.Builder<Builder>
/*       */       implements PlayerHandler.DailyActivityOrBuilder
/*       */     {
/*       */       private int bitField0_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private int id_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private Object name_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private int score_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private int scoreLimit_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private Object rule_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private int target_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private int level_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private int sort_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public static final Descriptors.Descriptor getDescriptor() {
/*       */         return PlayerHandler.internal_static_pomelo_area_DailyActivity_descriptor;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */         return PlayerHandler.internal_static_pomelo_area_DailyActivity_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.DailyActivity.class, Builder.class);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private Builder() {
/*       */         this.name_ = "";
/*       */         this.rule_ = "";
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private Builder(GeneratedMessage.BuilderParent parent) {
/*       */         super(parent);
/*       */         this.name_ = "";
/*       */         this.rule_ = "";
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private void maybeForceBuilderInitialization() {
/*       */         if (PlayerHandler.DailyActivity.alwaysUseFieldBuilders);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private static Builder create() {
/*       */         return new Builder();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clear() {
/*       */         super.clear();
/*       */         this.id_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.name_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.score_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.scoreLimit_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.rule_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.target_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFDF;
/*       */         this.level_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFBF;
/*       */         this.sort_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFF7F;
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clone() {
/*       */         return create().mergeFrom(buildPartial());
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Descriptors.Descriptor getDescriptorForType() {
/*       */         return PlayerHandler.internal_static_pomelo_area_DailyActivity_descriptor;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.DailyActivity getDefaultInstanceForType() {
/*       */         return PlayerHandler.DailyActivity.getDefaultInstance();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.DailyActivity build() {
/*       */         PlayerHandler.DailyActivity result = buildPartial();
/*       */         if (!result.isInitialized()) {
/*       */           throw newUninitializedMessageException(result);
/*       */         }
/*       */         return result;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.DailyActivity buildPartial() {
/*       */         PlayerHandler.DailyActivity result = new PlayerHandler.DailyActivity(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1) {
/*       */           to_bitField0_ |= 0x1;
/*       */         }
/*       */         result.id_ = this.id_;
/*       */         if ((from_bitField0_ & 0x2) == 2) {
/*       */           to_bitField0_ |= 0x2;
/*       */         }
/*       */         result.name_ = this.name_;
/*       */         if ((from_bitField0_ & 0x4) == 4) {
/*       */           to_bitField0_ |= 0x4;
/*       */         }
/*       */         result.score_ = this.score_;
/*       */         if ((from_bitField0_ & 0x8) == 8) {
/*       */           to_bitField0_ |= 0x8;
/*       */         }
/*       */         result.scoreLimit_ = this.scoreLimit_;
/*       */         if ((from_bitField0_ & 0x10) == 16) {
/*       */           to_bitField0_ |= 0x10;
/*       */         }
/*       */         result.rule_ = this.rule_;
/*       */         if ((from_bitField0_ & 0x20) == 32) {
/*       */           to_bitField0_ |= 0x20;
/*       */         }
/*       */         result.target_ = this.target_;
/*       */         if ((from_bitField0_ & 0x40) == 64) {
/*       */           to_bitField0_ |= 0x40;
/*       */         }
/*       */         result.level_ = this.level_;
/*       */         if ((from_bitField0_ & 0x80) == 128) {
/*       */           to_bitField0_ |= 0x80;
/*       */         }
/*       */         result.sort_ = this.sort_;
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(Message other) {
/*       */         if (other instanceof PlayerHandler.DailyActivity) {
/*       */           return mergeFrom((PlayerHandler.DailyActivity)other);
/*       */         }
/*       */         super.mergeFrom(other);
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(PlayerHandler.DailyActivity other) {
/*       */         if (other == PlayerHandler.DailyActivity.getDefaultInstance()) {
/*       */           return this;
/*       */         }
/*       */         if (other.hasId()) {
/*       */           setId(other.getId());
/*       */         }
/*       */         if (other.hasName()) {
/*       */           this.bitField0_ |= 0x2;
/*       */           this.name_ = other.name_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasScore()) {
/*       */           setScore(other.getScore());
/*       */         }
/*       */         if (other.hasScoreLimit()) {
/*       */           setScoreLimit(other.getScoreLimit());
/*       */         }
/*       */         if (other.hasRule()) {
/*       */           this.bitField0_ |= 0x10;
/*       */           this.rule_ = other.rule_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasTarget()) {
/*       */           setTarget(other.getTarget());
/*       */         }
/*       */         if (other.hasLevel()) {
/*       */           setLevel(other.getLevel());
/*       */         }
/*       */         if (other.hasSort()) {
/*       */           setSort(other.getSort());
/*       */         }
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public final boolean isInitialized() {
/*       */         if (!hasId()) {
/*       */           return false;
/*       */         }
/*       */         if (!hasName()) {
/*       */           return false;
/*       */         }
/*       */         if (!hasScore()) {
/*       */           return false;
/*       */         }
/*       */         if (!hasScoreLimit()) {
/*       */           return false;
/*       */         }
/*       */         if (!hasRule()) {
/*       */           return false;
/*       */         }
/*       */         if (!hasTarget()) {
/*       */           return false;
/*       */         }
/*       */         if (!hasLevel()) {
/*       */           return false;
/*       */         }
/*       */         if (!hasSort()) {
/*       */           return false;
/*       */         }
/*       */         return true;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */         PlayerHandler.DailyActivity parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (PlayerHandler.DailyActivity)PlayerHandler.DailyActivity.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (PlayerHandler.DailyActivity)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null) {
/*       */             mergeFrom(parsedMessage);
/*       */           }
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasId() {
/*       */         return ((this.bitField0_ & 0x1) == 1);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public int getId() {
/*       */         return this.id_;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setId(int value) {
/*       */         this.bitField0_ |= 0x1;
/*       */         this.id_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearId() {
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.id_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasName() {
/*       */         return ((this.bitField0_ & 0x2) == 2);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public String getName() {
/*       */         Object ref = this.name_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8()) {
/*       */             this.name_ = s;
/*       */           }
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ByteString getNameBytes() {
/*       */         Object ref = this.name_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.name_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setName(String value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x2;
/*       */         this.name_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearName() {
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.name_ = PlayerHandler.DailyActivity.getDefaultInstance().getName();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setNameBytes(ByteString value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x2;
/*       */         this.name_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasScore() {
/*       */         return ((this.bitField0_ & 0x4) == 4);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public int getScore() {
/*       */         return this.score_;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setScore(int value) {
/*       */         this.bitField0_ |= 0x4;
/*       */         this.score_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearScore() {
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.score_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasScoreLimit() {
/*       */         return ((this.bitField0_ & 0x8) == 8);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public int getScoreLimit() {
/*       */         return this.scoreLimit_;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setScoreLimit(int value) {
/*       */         this.bitField0_ |= 0x8;
/*       */         this.scoreLimit_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearScoreLimit() {
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.scoreLimit_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasRule() {
/*       */         return ((this.bitField0_ & 0x10) == 16);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public String getRule() {
/*       */         Object ref = this.rule_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8()) {
/*       */             this.rule_ = s;
/*       */           }
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ByteString getRuleBytes() {
/*       */         Object ref = this.rule_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.rule_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setRule(String value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x10;
/*       */         this.rule_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearRule() {
/*       */         this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.rule_ = PlayerHandler.DailyActivity.getDefaultInstance().getRule();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setRuleBytes(ByteString value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x10;
/*       */         this.rule_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasTarget() {
/*       */         return ((this.bitField0_ & 0x20) == 32);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public int getTarget() {
/*       */         return this.target_;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setTarget(int value) {
/*       */         this.bitField0_ |= 0x20;
/*       */         this.target_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearTarget() {
/*       */         this.bitField0_ &= 0xFFFFFFDF;
/*       */         this.target_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasLevel() {
/*       */         return ((this.bitField0_ & 0x40) == 64);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public int getLevel() {
/*       */         return this.level_;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setLevel(int value) {
/*       */         this.bitField0_ |= 0x40;
/*       */         this.level_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearLevel() {
/*       */         this.bitField0_ &= 0xFFFFFFBF;
/*       */         this.level_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasSort() {
/*       */         return ((this.bitField0_ & 0x80) == 128);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public int getSort() {
/*       */         return this.sort_;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setSort(int value) {
/*       */         this.bitField0_ |= 0x80;
/*       */         this.sort_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearSort() {
/*       */         this.bitField0_ &= 0xFFFFFF7F;
/*       */         this.sort_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */     }
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class DailyActivities
/*       */     extends GeneratedMessage
/*       */     implements DailyActivitiesOrBuilder
/*       */   {
/* 17411 */     private static final DailyActivities defaultInstance = new DailyActivities(true); private final UnknownFieldSet unknownFields; private DailyActivities(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private DailyActivities(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static DailyActivities getDefaultInstance() { return defaultInstance; } public DailyActivities getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private DailyActivities(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.totalScore_ = input.readInt32(); break;case 18: if ((mutable_bitField0_ & 0x2) != 2) { this.dayActivities_ = new ArrayList<>(); mutable_bitField0_ |= 0x2; }  this.dayActivities_.add(input.readMessage(PlayerHandler.DailyActivity.PARSER, extensionRegistry)); break;case 26: if ((mutable_bitField0_ & 0x4) != 4) { this.dayReward_ = new ArrayList<>(); mutable_bitField0_ |= 0x4; }  this.dayReward_.add(input.readMessage(PlayerHandler.DailyReward.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x2) == 2) this.dayActivities_ = Collections.unmodifiableList(this.dayActivities_);  if ((mutable_bitField0_ & 0x4) == 4) this.dayReward_ = Collections.unmodifiableList(this.dayReward_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_DailyActivities_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_DailyActivities_fieldAccessorTable.ensureFieldAccessorsInitialized(DailyActivities.class, Builder.class); } public static Parser<DailyActivities> PARSER = (Parser<DailyActivities>)new AbstractParser<DailyActivities>() { public PlayerHandler.DailyActivities parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.DailyActivities(input, extensionRegistry); } }
/* 17412 */     ; private int bitField0_; public static final int TOTALSCORE_FIELD_NUMBER = 1; private int totalScore_; public static final int DAYACTIVITIES_FIELD_NUMBER = 2; private List<PlayerHandler.DailyActivity> dayActivities_; public static final int DAYREWARD_FIELD_NUMBER = 3; private List<PlayerHandler.DailyReward> dayReward_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<DailyActivities> getParserForType() { return PARSER; } public boolean hasTotalScore() { return ((this.bitField0_ & 0x1) == 1); } public int getTotalScore() { return this.totalScore_; } public List<PlayerHandler.DailyActivity> getDayActivitiesList() { return this.dayActivities_; } public List<? extends PlayerHandler.DailyActivityOrBuilder> getDayActivitiesOrBuilderList() { return (List)this.dayActivities_; } public int getDayActivitiesCount() { return this.dayActivities_.size(); } public PlayerHandler.DailyActivity getDayActivities(int index) { return this.dayActivities_.get(index); } static { defaultInstance.initFields(); }
/*       */      public PlayerHandler.DailyActivityOrBuilder getDayActivitiesOrBuilder(int index) {
/*       */       return this.dayActivities_.get(index);
/*       */     } public List<PlayerHandler.DailyReward> getDayRewardList() {
/*       */       return this.dayReward_;
/*       */     } public List<? extends PlayerHandler.DailyRewardOrBuilder> getDayRewardOrBuilderList() {
/*       */       return (List)this.dayReward_;
/*       */     } public int getDayRewardCount() {
/*       */       return this.dayReward_.size();
/*       */     } public PlayerHandler.DailyReward getDayReward(int index) {
/*       */       return this.dayReward_.get(index);
/*       */     } public PlayerHandler.DailyRewardOrBuilder getDayRewardOrBuilder(int index) {
/*       */       return this.dayReward_.get(index);
/*       */     } private void initFields() {
/*       */       this.totalScore_ = 0;
/*       */       this.dayActivities_ = Collections.emptyList();
/*       */       this.dayReward_ = Collections.emptyList();
/*       */     } public final boolean isInitialized() {
/*       */       byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1)
/*       */         return true; 
/*       */       if (isInitialized == 0)
/*       */         return false; 
/*       */       if (!hasTotalScore()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       int i;
/*       */       for (i = 0; i < getDayActivitiesCount(); i++) {
/*       */         if (!getDayActivities(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0;
/*       */           return false;
/*       */         } 
/*       */       } 
/*       */       for (i = 0; i < getDayRewardCount(); i++) {
/*       */         if (!getDayReward(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0;
/*       */           return false;
/*       */         } 
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true;
/*       */     } public void writeTo(CodedOutputStream output) throws IOException {
/*       */       getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1)
/*       */         output.writeInt32(1, this.totalScore_); 
/*       */       int i;
/*       */       for (i = 0; i < this.dayActivities_.size(); i++)
/*       */         output.writeMessage(2, (MessageLite)this.dayActivities_.get(i)); 
/*       */       for (i = 0; i < this.dayReward_.size(); i++)
/*       */         output.writeMessage(3, (MessageLite)this.dayReward_.get(i)); 
/*       */       getUnknownFields().writeTo(output);
/*       */     } public int getSerializedSize() {
/*       */       int size = this.memoizedSerializedSize;
/*       */       if (size != -1)
/*       */         return size; 
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1)
/*       */         size += CodedOutputStream.computeInt32Size(1, this.totalScore_); 
/*       */       int i;
/*       */       for (i = 0; i < this.dayActivities_.size(); i++)
/*       */         size += CodedOutputStream.computeMessageSize(2, (MessageLite)this.dayActivities_.get(i)); 
/*       */       for (i = 0; i < this.dayReward_.size(); i++)
/*       */         size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.dayReward_.get(i)); 
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size;
/*       */     } protected Object writeReplace() throws ObjectStreamException {
/*       */       return super.writeReplace();
/*       */     } public static DailyActivities parseFrom(ByteString data) throws InvalidProtocolBufferException {
/*       */       return (DailyActivities)PARSER.parseFrom(data);
/*       */     } public static DailyActivities parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (DailyActivities)PARSER.parseFrom(data, extensionRegistry);
/*       */     } public static DailyActivities parseFrom(byte[] data) throws InvalidProtocolBufferException {
/*       */       return (DailyActivities)PARSER.parseFrom(data);
/*       */     } public static DailyActivities parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (DailyActivities)PARSER.parseFrom(data, extensionRegistry);
/*       */     } public static DailyActivities parseFrom(InputStream input) throws IOException {
/*       */       return (DailyActivities)PARSER.parseFrom(input);
/*       */     } public static DailyActivities parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (DailyActivities)PARSER.parseFrom(input, extensionRegistry);
/*       */     } public static DailyActivities parseDelimitedFrom(InputStream input) throws IOException {
/*       */       return (DailyActivities)PARSER.parseDelimitedFrom(input);
/*       */     } public static DailyActivities parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (DailyActivities)PARSER.parseDelimitedFrom(input, extensionRegistry);
/*       */     } public static DailyActivities parseFrom(CodedInputStream input) throws IOException {
/*       */       return (DailyActivities)PARSER.parseFrom(input);
/*       */     } public static DailyActivities parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (DailyActivities)PARSER.parseFrom(input, extensionRegistry);
/*       */     } public static Builder newBuilder() {
/*       */       return Builder.create();
/*       */     } public Builder newBuilderForType() {
/*       */       return newBuilder();
/*       */     } public static Builder newBuilder(DailyActivities prototype) {
/*       */       return newBuilder().mergeFrom(prototype);
/*       */     } public Builder toBuilder() {
/*       */       return newBuilder(this);
/*       */     } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
/*       */       Builder builder = new Builder(parent);
/*       */       return builder;
/*       */     } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.DailyActivitiesOrBuilder { private int bitField0_; private int totalScore_; private List<PlayerHandler.DailyActivity> dayActivities_; private RepeatedFieldBuilder<PlayerHandler.DailyActivity, PlayerHandler.DailyActivity.Builder, PlayerHandler.DailyActivityOrBuilder> dayActivitiesBuilder_; private List<PlayerHandler.DailyReward> dayReward_; private RepeatedFieldBuilder<PlayerHandler.DailyReward, PlayerHandler.DailyReward.Builder, PlayerHandler.DailyRewardOrBuilder> dayRewardBuilder_; public static final Descriptors.Descriptor getDescriptor() {
/*       */         return PlayerHandler.internal_static_pomelo_area_DailyActivities_descriptor;
/*       */       } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */         return PlayerHandler.internal_static_pomelo_area_DailyActivities_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.DailyActivities.class, Builder.class);
/*       */       } private Builder() {
/*       */         this.dayActivities_ = Collections.emptyList();
/*       */         this.dayReward_ = Collections.emptyList();
/*       */         maybeForceBuilderInitialization();
/*       */       } private Builder(GeneratedMessage.BuilderParent parent) {
/*       */         super(parent);
/*       */         this.dayActivities_ = Collections.emptyList();
/*       */         this.dayReward_ = Collections.emptyList();
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */       private void maybeForceBuilderInitialization() {
/*       */         if (PlayerHandler.DailyActivities.alwaysUseFieldBuilders) {
/*       */           getDayActivitiesFieldBuilder();
/*       */           getDayRewardFieldBuilder();
/*       */         } 
/*       */       }
/*       */       private static Builder create() {
/*       */         return new Builder();
/*       */       }
/*       */       public Builder clear() {
/*       */         super.clear();
/*       */         this.totalScore_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         if (this.dayActivitiesBuilder_ == null) {
/*       */           this.dayActivities_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFFD;
/*       */         } else {
/*       */           this.dayActivitiesBuilder_.clear();
/*       */         } 
/*       */         if (this.dayRewardBuilder_ == null) {
/*       */           this.dayReward_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFFB;
/*       */         } else {
/*       */           this.dayRewardBuilder_.clear();
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder clone() {
/*       */         return create().mergeFrom(buildPartial());
/*       */       }
/*       */       public Descriptors.Descriptor getDescriptorForType() {
/*       */         return PlayerHandler.internal_static_pomelo_area_DailyActivities_descriptor;
/*       */       }
/*       */       public PlayerHandler.DailyActivities getDefaultInstanceForType() {
/*       */         return PlayerHandler.DailyActivities.getDefaultInstance();
/*       */       }
/*       */       public PlayerHandler.DailyActivities build() {
/*       */         PlayerHandler.DailyActivities result = buildPartial();
/*       */         if (!result.isInitialized())
/*       */           throw newUninitializedMessageException(result); 
/*       */         return result;
/*       */       }
/*       */       public PlayerHandler.DailyActivities buildPartial() {
/*       */         PlayerHandler.DailyActivities result = new PlayerHandler.DailyActivities(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1)
/*       */           to_bitField0_ |= 0x1; 
/*       */         result.totalScore_ = this.totalScore_;
/*       */         if (this.dayActivitiesBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x2) == 2) {
/*       */             this.dayActivities_ = Collections.unmodifiableList(this.dayActivities_);
/*       */             this.bitField0_ &= 0xFFFFFFFD;
/*       */           } 
/*       */           result.dayActivities_ = this.dayActivities_;
/*       */         } else {
/*       */           result.dayActivities_ = this.dayActivitiesBuilder_.build();
/*       */         } 
/*       */         if (this.dayRewardBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x4) == 4) {
/*       */             this.dayReward_ = Collections.unmodifiableList(this.dayReward_);
/*       */             this.bitField0_ &= 0xFFFFFFFB;
/*       */           } 
/*       */           result.dayReward_ = this.dayReward_;
/*       */         } else {
/*       */           result.dayReward_ = this.dayRewardBuilder_.build();
/*       */         } 
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result;
/*       */       }
/*       */       public Builder mergeFrom(Message other) {
/*       */         if (other instanceof PlayerHandler.DailyActivities)
/*       */           return mergeFrom((PlayerHandler.DailyActivities)other); 
/*       */         super.mergeFrom(other);
/*       */         return this;
/*       */       }
/*       */       public Builder mergeFrom(PlayerHandler.DailyActivities other) {
/*       */         if (other == PlayerHandler.DailyActivities.getDefaultInstance())
/*       */           return this; 
/*       */         if (other.hasTotalScore())
/*       */           setTotalScore(other.getTotalScore()); 
/*       */         if (this.dayActivitiesBuilder_ == null) {
/*       */           if (!other.dayActivities_.isEmpty()) {
/*       */             if (this.dayActivities_.isEmpty()) {
/*       */               this.dayActivities_ = other.dayActivities_;
/*       */               this.bitField0_ &= 0xFFFFFFFD;
/*       */             } else {
/*       */               ensureDayActivitiesIsMutable();
/*       */               this.dayActivities_.addAll(other.dayActivities_);
/*       */             } 
/*       */             onChanged();
/*       */           } 
/*       */         } else if (!other.dayActivities_.isEmpty()) {
/*       */           if (this.dayActivitiesBuilder_.isEmpty()) {
/*       */             this.dayActivitiesBuilder_.dispose();
/*       */             this.dayActivitiesBuilder_ = null;
/*       */             this.dayActivities_ = other.dayActivities_;
/*       */             this.bitField0_ &= 0xFFFFFFFD;
/*       */             this.dayActivitiesBuilder_ = PlayerHandler.DailyActivities.alwaysUseFieldBuilders ? getDayActivitiesFieldBuilder() : null;
/*       */           } else {
/*       */             this.dayActivitiesBuilder_.addAllMessages(other.dayActivities_);
/*       */           } 
/*       */         } 
/*       */         if (this.dayRewardBuilder_ == null) {
/*       */           if (!other.dayReward_.isEmpty()) {
/*       */             if (this.dayReward_.isEmpty()) {
/*       */               this.dayReward_ = other.dayReward_;
/*       */               this.bitField0_ &= 0xFFFFFFFB;
/*       */             } else {
/*       */               ensureDayRewardIsMutable();
/*       */               this.dayReward_.addAll(other.dayReward_);
/*       */             } 
/*       */             onChanged();
/*       */           } 
/*       */         } else if (!other.dayReward_.isEmpty()) {
/*       */           if (this.dayRewardBuilder_.isEmpty()) {
/*       */             this.dayRewardBuilder_.dispose();
/*       */             this.dayRewardBuilder_ = null;
/*       */             this.dayReward_ = other.dayReward_;
/*       */             this.bitField0_ &= 0xFFFFFFFB;
/*       */             this.dayRewardBuilder_ = PlayerHandler.DailyActivities.alwaysUseFieldBuilders ? getDayRewardFieldBuilder() : null;
/*       */           } else {
/*       */             this.dayRewardBuilder_.addAllMessages(other.dayReward_);
/*       */           } 
/*       */         } 
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this;
/*       */       }
/*       */       public final boolean isInitialized() {
/*       */         if (!hasTotalScore())
/*       */           return false; 
/*       */         int i;
/*       */         for (i = 0; i < getDayActivitiesCount(); i++) {
/*       */           if (!getDayActivities(i).isInitialized())
/*       */             return false; 
/*       */         } 
/*       */         for (i = 0; i < getDayRewardCount(); i++) {
/*       */           if (!getDayReward(i).isInitialized())
/*       */             return false; 
/*       */         } 
/*       */         return true;
/*       */       }
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */         PlayerHandler.DailyActivities parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (PlayerHandler.DailyActivities)PlayerHandler.DailyActivities.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (PlayerHandler.DailyActivities)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null)
/*       */             mergeFrom(parsedMessage); 
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public boolean hasTotalScore() {
/*       */         return ((this.bitField0_ & 0x1) == 1);
/*       */       }
/*       */       public int getTotalScore() {
/*       */         return this.totalScore_;
/*       */       }
/*       */       public Builder setTotalScore(int value) {
/*       */         this.bitField0_ |= 0x1;
/*       */         this.totalScore_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder clearTotalScore() {
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.totalScore_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       private void ensureDayActivitiesIsMutable() {
/*       */         if ((this.bitField0_ & 0x2) != 2) {
/*       */           this.dayActivities_ = new ArrayList<>(this.dayActivities_);
/*       */           this.bitField0_ |= 0x2;
/*       */         } 
/*       */       }
/*       */       public List<PlayerHandler.DailyActivity> getDayActivitiesList() {
/*       */         if (this.dayActivitiesBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.dayActivities_); 
/*       */         return this.dayActivitiesBuilder_.getMessageList();
/*       */       }
/*       */       public int getDayActivitiesCount() {
/*       */         if (this.dayActivitiesBuilder_ == null)
/*       */           return this.dayActivities_.size(); 
/*       */         return this.dayActivitiesBuilder_.getCount();
/*       */       }
/*       */       public PlayerHandler.DailyActivity getDayActivities(int index) {
/*       */         if (this.dayActivitiesBuilder_ == null)
/*       */           return this.dayActivities_.get(index); 
/*       */         return (PlayerHandler.DailyActivity)this.dayActivitiesBuilder_.getMessage(index);
/*       */       }
/*       */       public Builder setDayActivities(int index, PlayerHandler.DailyActivity value) {
/*       */         if (this.dayActivitiesBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureDayActivitiesIsMutable();
/*       */           this.dayActivities_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.dayActivitiesBuilder_.setMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder setDayActivities(int index, PlayerHandler.DailyActivity.Builder builderForValue) {
/*       */         if (this.dayActivitiesBuilder_ == null) {
/*       */           ensureDayActivitiesIsMutable();
/*       */           this.dayActivities_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.dayActivitiesBuilder_.setMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addDayActivities(PlayerHandler.DailyActivity value) {
/*       */         if (this.dayActivitiesBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureDayActivitiesIsMutable();
/*       */           this.dayActivities_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.dayActivitiesBuilder_.addMessage(value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addDayActivities(int index, PlayerHandler.DailyActivity value) {
/*       */         if (this.dayActivitiesBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureDayActivitiesIsMutable();
/*       */           this.dayActivities_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.dayActivitiesBuilder_.addMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addDayActivities(PlayerHandler.DailyActivity.Builder builderForValue) {
/*       */         if (this.dayActivitiesBuilder_ == null) {
/*       */           ensureDayActivitiesIsMutable();
/*       */           this.dayActivities_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.dayActivitiesBuilder_.addMessage(builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addDayActivities(int index, PlayerHandler.DailyActivity.Builder builderForValue) {
/*       */         if (this.dayActivitiesBuilder_ == null) {
/*       */           ensureDayActivitiesIsMutable();
/*       */           this.dayActivities_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.dayActivitiesBuilder_.addMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addAllDayActivities(Iterable<? extends PlayerHandler.DailyActivity> values) {
/*       */         if (this.dayActivitiesBuilder_ == null) {
/*       */           ensureDayActivitiesIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.dayActivities_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.dayActivitiesBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder clearDayActivities() {
/*       */         if (this.dayActivitiesBuilder_ == null) {
/*       */           this.dayActivities_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFFD;
/*       */           onChanged();
/*       */         } else {
/*       */           this.dayActivitiesBuilder_.clear();
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder removeDayActivities(int index) {
/*       */         if (this.dayActivitiesBuilder_ == null) {
/*       */           ensureDayActivitiesIsMutable();
/*       */           this.dayActivities_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.dayActivitiesBuilder_.remove(index);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public PlayerHandler.DailyActivity.Builder getDayActivitiesBuilder(int index) {
/*       */         return (PlayerHandler.DailyActivity.Builder)getDayActivitiesFieldBuilder().getBuilder(index);
/*       */       }
/*       */       public PlayerHandler.DailyActivityOrBuilder getDayActivitiesOrBuilder(int index) {
/*       */         if (this.dayActivitiesBuilder_ == null)
/*       */           return this.dayActivities_.get(index); 
/*       */         return (PlayerHandler.DailyActivityOrBuilder)this.dayActivitiesBuilder_.getMessageOrBuilder(index);
/*       */       }
/*       */       public List<? extends PlayerHandler.DailyActivityOrBuilder> getDayActivitiesOrBuilderList() {
/*       */         if (this.dayActivitiesBuilder_ != null)
/*       */           return this.dayActivitiesBuilder_.getMessageOrBuilderList(); 
/*       */         return Collections.unmodifiableList((List)this.dayActivities_);
/*       */       }
/*       */       public PlayerHandler.DailyActivity.Builder addDayActivitiesBuilder() {
/*       */         return (PlayerHandler.DailyActivity.Builder)getDayActivitiesFieldBuilder().addBuilder(PlayerHandler.DailyActivity.getDefaultInstance());
/*       */       }
/*       */       public PlayerHandler.DailyActivity.Builder addDayActivitiesBuilder(int index) {
/*       */         return (PlayerHandler.DailyActivity.Builder)getDayActivitiesFieldBuilder().addBuilder(index, PlayerHandler.DailyActivity.getDefaultInstance());
/*       */       }
/*       */       public List<PlayerHandler.DailyActivity.Builder> getDayActivitiesBuilderList() {
/*       */         return getDayActivitiesFieldBuilder().getBuilderList();
/*       */       }
/*       */       private RepeatedFieldBuilder<PlayerHandler.DailyActivity, PlayerHandler.DailyActivity.Builder, PlayerHandler.DailyActivityOrBuilder> getDayActivitiesFieldBuilder() {
/*       */         if (this.dayActivitiesBuilder_ == null) {
/*       */           this.dayActivitiesBuilder_ = new RepeatedFieldBuilder(this.dayActivities_, ((this.bitField0_ & 0x2) == 2), getParentForChildren(), isClean());
/*       */           this.dayActivities_ = null;
/*       */         } 
/*       */         return this.dayActivitiesBuilder_;
/*       */       }
/*       */       private void ensureDayRewardIsMutable() {
/*       */         if ((this.bitField0_ & 0x4) != 4) {
/*       */           this.dayReward_ = new ArrayList<>(this.dayReward_);
/*       */           this.bitField0_ |= 0x4;
/*       */         } 
/*       */       }
/*       */       public List<PlayerHandler.DailyReward> getDayRewardList() {
/*       */         if (this.dayRewardBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.dayReward_); 
/*       */         return this.dayRewardBuilder_.getMessageList();
/*       */       }
/*       */       public int getDayRewardCount() {
/*       */         if (this.dayRewardBuilder_ == null)
/*       */           return this.dayReward_.size(); 
/*       */         return this.dayRewardBuilder_.getCount();
/*       */       }
/*       */       public PlayerHandler.DailyReward getDayReward(int index) {
/*       */         if (this.dayRewardBuilder_ == null)
/*       */           return this.dayReward_.get(index); 
/*       */         return (PlayerHandler.DailyReward)this.dayRewardBuilder_.getMessage(index);
/*       */       }
/*       */       public Builder setDayReward(int index, PlayerHandler.DailyReward value) {
/*       */         if (this.dayRewardBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureDayRewardIsMutable();
/*       */           this.dayReward_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.dayRewardBuilder_.setMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder setDayReward(int index, PlayerHandler.DailyReward.Builder builderForValue) {
/*       */         if (this.dayRewardBuilder_ == null) {
/*       */           ensureDayRewardIsMutable();
/*       */           this.dayReward_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.dayRewardBuilder_.setMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addDayReward(PlayerHandler.DailyReward value) {
/*       */         if (this.dayRewardBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureDayRewardIsMutable();
/*       */           this.dayReward_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.dayRewardBuilder_.addMessage(value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addDayReward(int index, PlayerHandler.DailyReward value) {
/*       */         if (this.dayRewardBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureDayRewardIsMutable();
/*       */           this.dayReward_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.dayRewardBuilder_.addMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addDayReward(PlayerHandler.DailyReward.Builder builderForValue) {
/*       */         if (this.dayRewardBuilder_ == null) {
/*       */           ensureDayRewardIsMutable();
/*       */           this.dayReward_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.dayRewardBuilder_.addMessage(builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addDayReward(int index, PlayerHandler.DailyReward.Builder builderForValue) {
/*       */         if (this.dayRewardBuilder_ == null) {
/*       */           ensureDayRewardIsMutable();
/*       */           this.dayReward_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.dayRewardBuilder_.addMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addAllDayReward(Iterable<? extends PlayerHandler.DailyReward> values) {
/*       */         if (this.dayRewardBuilder_ == null) {
/*       */           ensureDayRewardIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.dayReward_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.dayRewardBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder clearDayReward() {
/*       */         if (this.dayRewardBuilder_ == null) {
/*       */           this.dayReward_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFFB;
/*       */           onChanged();
/*       */         } else {
/*       */           this.dayRewardBuilder_.clear();
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder removeDayReward(int index) {
/*       */         if (this.dayRewardBuilder_ == null) {
/*       */           ensureDayRewardIsMutable();
/*       */           this.dayReward_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.dayRewardBuilder_.remove(index);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public PlayerHandler.DailyReward.Builder getDayRewardBuilder(int index) {
/*       */         return (PlayerHandler.DailyReward.Builder)getDayRewardFieldBuilder().getBuilder(index);
/*       */       }
/*       */       public PlayerHandler.DailyRewardOrBuilder getDayRewardOrBuilder(int index) {
/*       */         if (this.dayRewardBuilder_ == null)
/*       */           return this.dayReward_.get(index); 
/*       */         return (PlayerHandler.DailyRewardOrBuilder)this.dayRewardBuilder_.getMessageOrBuilder(index);
/*       */       }
/*       */       public List<? extends PlayerHandler.DailyRewardOrBuilder> getDayRewardOrBuilderList() {
/*       */         if (this.dayRewardBuilder_ != null)
/*       */           return this.dayRewardBuilder_.getMessageOrBuilderList(); 
/*       */         return Collections.unmodifiableList((List)this.dayReward_);
/*       */       }
/*       */       public PlayerHandler.DailyReward.Builder addDayRewardBuilder() {
/*       */         return (PlayerHandler.DailyReward.Builder)getDayRewardFieldBuilder().addBuilder(PlayerHandler.DailyReward.getDefaultInstance());
/*       */       }
/*       */       public PlayerHandler.DailyReward.Builder addDayRewardBuilder(int index) {
/*       */         return (PlayerHandler.DailyReward.Builder)getDayRewardFieldBuilder().addBuilder(index, PlayerHandler.DailyReward.getDefaultInstance());
/*       */       }
/*       */       public List<PlayerHandler.DailyReward.Builder> getDayRewardBuilderList() {
/*       */         return getDayRewardFieldBuilder().getBuilderList();
/*       */       }
/*       */       private RepeatedFieldBuilder<PlayerHandler.DailyReward, PlayerHandler.DailyReward.Builder, PlayerHandler.DailyRewardOrBuilder> getDayRewardFieldBuilder() {
/*       */         if (this.dayRewardBuilder_ == null) {
/*       */           this.dayRewardBuilder_ = new RepeatedFieldBuilder(this.dayReward_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean());
/*       */           this.dayReward_ = null;
/*       */         } 
/*       */         return this.dayRewardBuilder_;
/*       */       } } }
/* 17992 */   public static final class BattleEventPush extends GeneratedMessage implements BattleEventPushOrBuilder { private static final BattleEventPush defaultInstance = new BattleEventPush(true); private final UnknownFieldSet unknownFields; private BattleEventPush(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private BattleEventPush(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static BattleEventPush getDefaultInstance() { return defaultInstance; } public BattleEventPush getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private BattleEventPush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.s2CName_ = bs; break;case 18: this.bitField0_ |= 0x2; this.s2CData_ = input.readBytes(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_BattleEventPush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_BattleEventPush_fieldAccessorTable.ensureFieldAccessorsInitialized(BattleEventPush.class, Builder.class); } public static Parser<BattleEventPush> PARSER = (Parser<BattleEventPush>)new AbstractParser<BattleEventPush>() { public PlayerHandler.BattleEventPush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.BattleEventPush(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_NAME_FIELD_NUMBER = 1; private Object s2CName_; public static final int S2C_DATA_FIELD_NUMBER = 2; private ByteString s2CData_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<BattleEventPush> getParserForType() { return PARSER; } public boolean hasS2CName() { return ((this.bitField0_ & 0x1) == 1); } public String getS2CName() { Object ref = this.s2CName_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CName_ = s;  return s; } public ByteString getS2CNameBytes() { Object ref = this.s2CName_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CName_ = b; return b; }  return (ByteString)ref; } public boolean hasS2CData() { return ((this.bitField0_ & 0x2) == 2); } public ByteString getS2CData() { return this.s2CData_; } private void initFields() { this.s2CName_ = ""; this.s2CData_ = ByteString.EMPTY; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CName()) { this.memoizedIsInitialized = 0; return false; }  if (!hasS2CData()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getS2CNameBytes());  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, this.s2CData_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getS2CNameBytes());  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, this.s2CData_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static BattleEventPush parseFrom(ByteString data) throws InvalidProtocolBufferException { return (BattleEventPush)PARSER.parseFrom(data); } public static BattleEventPush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (BattleEventPush)PARSER.parseFrom(data, extensionRegistry); } public static BattleEventPush parseFrom(byte[] data) throws InvalidProtocolBufferException { return (BattleEventPush)PARSER.parseFrom(data); } public static BattleEventPush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (BattleEventPush)PARSER.parseFrom(data, extensionRegistry); } public static BattleEventPush parseFrom(InputStream input) throws IOException { return (BattleEventPush)PARSER.parseFrom(input); } public static BattleEventPush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (BattleEventPush)PARSER.parseFrom(input, extensionRegistry); } public static BattleEventPush parseDelimitedFrom(InputStream input) throws IOException { return (BattleEventPush)PARSER.parseDelimitedFrom(input); } public static BattleEventPush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (BattleEventPush)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static BattleEventPush parseFrom(CodedInputStream input) throws IOException { return (BattleEventPush)PARSER.parseFrom(input); } public static BattleEventPush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (BattleEventPush)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(BattleEventPush prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.BattleEventPushOrBuilder {
/* 17993 */       private int bitField0_; private Object s2CName_; private ByteString s2CData_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_BattleEventPush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_BattleEventPush_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.BattleEventPush.class, Builder.class); } private Builder() { this.s2CName_ = ""; this.s2CData_ = ByteString.EMPTY; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CName_ = ""; this.s2CData_ = ByteString.EMPTY; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.BattleEventPush.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CName_ = ""; this.bitField0_ &= 0xFFFFFFFE; this.s2CData_ = ByteString.EMPTY; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_BattleEventPush_descriptor; } public PlayerHandler.BattleEventPush getDefaultInstanceForType() { return PlayerHandler.BattleEventPush.getDefaultInstance(); } public PlayerHandler.BattleEventPush build() { PlayerHandler.BattleEventPush result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.BattleEventPush buildPartial() { PlayerHandler.BattleEventPush result = new PlayerHandler.BattleEventPush(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CName_ = this.s2CName_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CData_ = this.s2CData_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.BattleEventPush) return mergeFrom((PlayerHandler.BattleEventPush)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.BattleEventPush other) { if (other == PlayerHandler.BattleEventPush.getDefaultInstance()) return this;  if (other.hasS2CName()) { this.bitField0_ |= 0x1; this.s2CName_ = other.s2CName_; onChanged(); }  if (other.hasS2CData()) setS2CData(other.getS2CData());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CName()) return false;  if (!hasS2CData()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.BattleEventPush parsedMessage = null; try { parsedMessage = (PlayerHandler.BattleEventPush)PlayerHandler.BattleEventPush.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.BattleEventPush)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CName() { return ((this.bitField0_ & 0x1) == 1); } public String getS2CName() { Object ref = this.s2CName_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CName_ = s;  return s; }  return (String)ref; } public ByteString getS2CNameBytes() { Object ref = this.s2CName_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CName_ = b; return b; }  return (ByteString)ref; } public Builder setS2CName(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.s2CName_ = value; onChanged(); return this; } public Builder clearS2CName() { this.bitField0_ &= 0xFFFFFFFE; this.s2CName_ = PlayerHandler.BattleEventPush.getDefaultInstance().getS2CName(); onChanged(); return this; } public Builder setS2CNameBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.s2CName_ = value; onChanged(); return this; } public boolean hasS2CData() { return ((this.bitField0_ & 0x2) == 2); } public ByteString getS2CData() { return this.s2CData_; } public Builder setS2CData(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CData_ = value; onChanged(); return this; } public Builder clearS2CData() { this.bitField0_ &= 0xFFFFFFFD; this.s2CData_ = PlayerHandler.BattleEventPush.getDefaultInstance().getS2CData(); onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */      }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class BattleClearPush
/*       */     extends GeneratedMessage
/*       */     implements BattleClearPushOrBuilder
/*       */   {
/* 18484 */     private static final BattleClearPush defaultInstance = new BattleClearPush(true); private final UnknownFieldSet unknownFields; private BattleClearPush(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private BattleClearPush(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static BattleClearPush getDefaultInstance() { return defaultInstance; } public BattleClearPush getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private BattleClearPush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.s2CName_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_BattleClearPush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_BattleClearPush_fieldAccessorTable.ensureFieldAccessorsInitialized(BattleClearPush.class, Builder.class); } public static Parser<BattleClearPush> PARSER = (Parser<BattleClearPush>)new AbstractParser<BattleClearPush>() { public PlayerHandler.BattleClearPush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.BattleClearPush(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_NAME_FIELD_NUMBER = 1; private Object s2CName_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<BattleClearPush> getParserForType() { return PARSER; } public boolean hasS2CName() { return ((this.bitField0_ & 0x1) == 1); } public String getS2CName() { Object ref = this.s2CName_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CName_ = s;  return s; } public ByteString getS2CNameBytes() { Object ref = this.s2CName_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CName_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CName_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CName()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getS2CNameBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getS2CNameBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static BattleClearPush parseFrom(ByteString data) throws InvalidProtocolBufferException { return (BattleClearPush)PARSER.parseFrom(data); } public static BattleClearPush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (BattleClearPush)PARSER.parseFrom(data, extensionRegistry); } public static BattleClearPush parseFrom(byte[] data) throws InvalidProtocolBufferException { return (BattleClearPush)PARSER.parseFrom(data); } public static BattleClearPush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (BattleClearPush)PARSER.parseFrom(data, extensionRegistry); } public static BattleClearPush parseFrom(InputStream input) throws IOException { return (BattleClearPush)PARSER.parseFrom(input); } public static BattleClearPush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (BattleClearPush)PARSER.parseFrom(input, extensionRegistry); } public static BattleClearPush parseDelimitedFrom(InputStream input) throws IOException { return (BattleClearPush)PARSER.parseDelimitedFrom(input); } public static BattleClearPush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (BattleClearPush)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static BattleClearPush parseFrom(CodedInputStream input) throws IOException { return (BattleClearPush)PARSER.parseFrom(input); } public static BattleClearPush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (BattleClearPush)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(BattleClearPush prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.BattleClearPushOrBuilder {
/* 18485 */       private int bitField0_; private Object s2CName_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_BattleClearPush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_BattleClearPush_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.BattleClearPush.class, Builder.class); } private Builder() { this.s2CName_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CName_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.BattleClearPush.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CName_ = ""; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_BattleClearPush_descriptor; } public PlayerHandler.BattleClearPush getDefaultInstanceForType() { return PlayerHandler.BattleClearPush.getDefaultInstance(); } public PlayerHandler.BattleClearPush build() { PlayerHandler.BattleClearPush result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.BattleClearPush buildPartial() { PlayerHandler.BattleClearPush result = new PlayerHandler.BattleClearPush(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CName_ = this.s2CName_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.BattleClearPush) return mergeFrom((PlayerHandler.BattleClearPush)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.BattleClearPush other) { if (other == PlayerHandler.BattleClearPush.getDefaultInstance()) return this;  if (other.hasS2CName()) { this.bitField0_ |= 0x1; this.s2CName_ = other.s2CName_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CName()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.BattleClearPush parsedMessage = null; try { parsedMessage = (PlayerHandler.BattleClearPush)PlayerHandler.BattleClearPush.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.BattleClearPush)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CName() { return ((this.bitField0_ & 0x1) == 1); } public String getS2CName() { Object ref = this.s2CName_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CName_ = s;  return s; }  return (String)ref; } public ByteString getS2CNameBytes() { Object ref = this.s2CName_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CName_ = b; return b; }  return (ByteString)ref; } public Builder setS2CName(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.s2CName_ = value; onChanged(); return this; } public Builder clearS2CName() { this.bitField0_ &= 0xFFFFFFFE; this.s2CName_ = PlayerHandler.BattleClearPush.getDefaultInstance().getS2CName(); onChanged(); return this; } public Builder setS2CNameBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.s2CName_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class SuperScriptType
/*       */     extends GeneratedMessage
/*       */     implements SuperScriptTypeOrBuilder
/*       */   {
/* 19015 */     private static final SuperScriptType defaultInstance = new SuperScriptType(true); private final UnknownFieldSet unknownFields; private SuperScriptType(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private SuperScriptType(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static SuperScriptType getDefaultInstance() { return defaultInstance; } public SuperScriptType getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private SuperScriptType(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.type_ = input.readInt32(); break;case 16: this.bitField0_ |= 0x2; this.number_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_SuperScriptType_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_SuperScriptType_fieldAccessorTable.ensureFieldAccessorsInitialized(SuperScriptType.class, Builder.class); } public static Parser<SuperScriptType> PARSER = (Parser<SuperScriptType>)new AbstractParser<SuperScriptType>() { public PlayerHandler.SuperScriptType parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.SuperScriptType(input, extensionRegistry); } }; private int bitField0_; public static final int TYPE_FIELD_NUMBER = 1; private int type_; public static final int NUMBER_FIELD_NUMBER = 2; private int number_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<SuperScriptType> getParserForType() { return PARSER; } public boolean hasType() { return ((this.bitField0_ & 0x1) == 1); } public int getType() { return this.type_; } public boolean hasNumber() { return ((this.bitField0_ & 0x2) == 2); } public int getNumber() { return this.number_; } private void initFields() { this.type_ = 0; this.number_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasType()) { this.memoizedIsInitialized = 0; return false; }  if (!hasNumber()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.type_);  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.number_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.type_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.number_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static SuperScriptType parseFrom(ByteString data) throws InvalidProtocolBufferException { return (SuperScriptType)PARSER.parseFrom(data); } public static SuperScriptType parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (SuperScriptType)PARSER.parseFrom(data, extensionRegistry); } public static SuperScriptType parseFrom(byte[] data) throws InvalidProtocolBufferException { return (SuperScriptType)PARSER.parseFrom(data); } public static SuperScriptType parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (SuperScriptType)PARSER.parseFrom(data, extensionRegistry); } public static SuperScriptType parseFrom(InputStream input) throws IOException { return (SuperScriptType)PARSER.parseFrom(input); } public static SuperScriptType parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (SuperScriptType)PARSER.parseFrom(input, extensionRegistry); } public static SuperScriptType parseDelimitedFrom(InputStream input) throws IOException { return (SuperScriptType)PARSER.parseDelimitedFrom(input); } public static SuperScriptType parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (SuperScriptType)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static SuperScriptType parseFrom(CodedInputStream input) throws IOException { return (SuperScriptType)PARSER.parseFrom(input); } public static SuperScriptType parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (SuperScriptType)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(SuperScriptType prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.SuperScriptTypeOrBuilder {
/* 19016 */       private int bitField0_; private int type_; private int number_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_SuperScriptType_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_SuperScriptType_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.SuperScriptType.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.SuperScriptType.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.type_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.number_ = 0; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_SuperScriptType_descriptor; } public PlayerHandler.SuperScriptType getDefaultInstanceForType() { return PlayerHandler.SuperScriptType.getDefaultInstance(); } public PlayerHandler.SuperScriptType build() { PlayerHandler.SuperScriptType result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.SuperScriptType buildPartial() { PlayerHandler.SuperScriptType result = new PlayerHandler.SuperScriptType(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.type_ = this.type_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.number_ = this.number_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.SuperScriptType) return mergeFrom((PlayerHandler.SuperScriptType)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.SuperScriptType other) { if (other == PlayerHandler.SuperScriptType.getDefaultInstance()) return this;  if (other.hasType()) setType(other.getType());  if (other.hasNumber()) setNumber(other.getNumber());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasType()) return false;  if (!hasNumber()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.SuperScriptType parsedMessage = null; try { parsedMessage = (PlayerHandler.SuperScriptType)PlayerHandler.SuperScriptType.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.SuperScriptType)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasType() { return ((this.bitField0_ & 0x1) == 1); } public int getType() { return this.type_; } public Builder setType(int value) { this.bitField0_ |= 0x1; this.type_ = value; onChanged(); return this; } public Builder clearType() { this.bitField0_ &= 0xFFFFFFFE; this.type_ = 0; onChanged(); return this; } public boolean hasNumber() { return ((this.bitField0_ & 0x2) == 2); } public int getNumber() { return this.number_; } public Builder setNumber(int value) { this.bitField0_ |= 0x2; this.number_ = value; onChanged(); return this; } public Builder clearNumber() { this.bitField0_ &= 0xFFFFFFFD; this.number_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class SuperScriptPush
/*       */     extends GeneratedMessage
/*       */     implements SuperScriptPushOrBuilder
/*       */   {
/*       */     private final UnknownFieldSet unknownFields;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private SuperScriptPush(GeneratedMessage.Builder<?> builder) {
/*       */       super(builder);
/*       */       this.memoizedIsInitialized = -1;
/*       */       this.memoizedSerializedSize = -1;
/*       */       this.unknownFields = builder.getUnknownFields();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private SuperScriptPush(boolean noInit) {
/*       */       this.memoizedIsInitialized = -1;
/*       */       this.memoizedSerializedSize = -1;
/*       */       this.unknownFields = UnknownFieldSet.getDefaultInstance();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static SuperScriptPush getDefaultInstance() {
/*       */       return defaultInstance;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public SuperScriptPush getDefaultInstanceForType() {
/*       */       return defaultInstance;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public final UnknownFieldSet getUnknownFields() {
/*       */       return this.unknownFields;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private SuperScriptPush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       this.memoizedIsInitialized = -1;
/*       */       this.memoizedSerializedSize = -1;
/*       */       initFields();
/*       */       int mutable_bitField0_ = 0;
/*       */       UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
/*       */       try {
/*       */         boolean done = false;
/*       */         while (!done) {
/*       */           int tag = input.readTag();
/*       */           switch (tag) {
/*       */             case 0:
/*       */               done = true;
/*       */               break;
/*       */             case 18:
/*       */               if ((mutable_bitField0_ & 0x1) != 1) {
/*       */                 this.s2CData_ = new ArrayList<>();
/*       */                 mutable_bitField0_ |= 0x1;
/*       */               } 
/*       */               this.s2CData_.add(input.readMessage(PlayerHandler.SuperScriptType.PARSER, extensionRegistry));
/*       */               break;
/*       */           } 
/*       */         } 
/*       */       } catch (InvalidProtocolBufferException e) {
/*       */         throw e.setUnfinishedMessage(this);
/*       */       } catch (IOException e) {
/*       */         throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
/*       */       } finally {
/*       */         if ((mutable_bitField0_ & 0x1) == 1) {
/*       */           this.s2CData_ = Collections.unmodifiableList(this.s2CData_);
/*       */         }
/*       */         this.unknownFields = unknownFields.build();
/*       */         makeExtensionsImmutable();
/*       */       } 
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static final Descriptors.Descriptor getDescriptor() {
/*       */       return PlayerHandler.internal_static_pomelo_area_SuperScriptPush_descriptor;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */       return PlayerHandler.internal_static_pomelo_area_SuperScriptPush_fieldAccessorTable.ensureFieldAccessorsInitialized(SuperScriptPush.class, Builder.class);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static Parser<SuperScriptPush> PARSER = (Parser<SuperScriptPush>)new AbstractParser<SuperScriptPush>()
/*       */       {
/*       */         public PlayerHandler.SuperScriptPush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */           return new PlayerHandler.SuperScriptPush(input, extensionRegistry);
/*       */         }
/*       */       };
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static final int S2C_DATA_FIELD_NUMBER = 2;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private List<PlayerHandler.SuperScriptType> s2CData_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private byte memoizedIsInitialized;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private int memoizedSerializedSize;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private static final long serialVersionUID = 0L;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public Parser<SuperScriptPush> getParserForType() {
/*       */       return PARSER;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public List<PlayerHandler.SuperScriptType> getS2CDataList() {
/*       */       return this.s2CData_;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public List<? extends PlayerHandler.SuperScriptTypeOrBuilder> getS2CDataOrBuilderList() {
/*       */       return (List)this.s2CData_;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getS2CDataCount() {
/*       */       return this.s2CData_.size();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public PlayerHandler.SuperScriptType getS2CData(int index) {
/*       */       return this.s2CData_.get(index);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public PlayerHandler.SuperScriptTypeOrBuilder getS2CDataOrBuilder(int index) {
/*       */       return this.s2CData_.get(index);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/* 19711 */     private static final SuperScriptPush defaultInstance = new SuperScriptPush(true); private void initFields() { this.s2CData_ = Collections.emptyList(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  for (int i = 0; i < getS2CDataCount(); i++) { if (!getS2CData(i).isInitialized()) { this.memoizedIsInitialized = 0; return false; }  }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); for (int i = 0; i < this.s2CData_.size(); i++) output.writeMessage(2, (MessageLite)this.s2CData_.get(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; for (int i = 0; i < this.s2CData_.size(); i++) size += CodedOutputStream.computeMessageSize(2, (MessageLite)this.s2CData_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static SuperScriptPush parseFrom(ByteString data) throws InvalidProtocolBufferException { return (SuperScriptPush)PARSER.parseFrom(data); } public static SuperScriptPush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (SuperScriptPush)PARSER.parseFrom(data, extensionRegistry); } public static SuperScriptPush parseFrom(byte[] data) throws InvalidProtocolBufferException { return (SuperScriptPush)PARSER.parseFrom(data); } public static SuperScriptPush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (SuperScriptPush)PARSER.parseFrom(data, extensionRegistry); } public static SuperScriptPush parseFrom(InputStream input) throws IOException { return (SuperScriptPush)PARSER.parseFrom(input); } public static SuperScriptPush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (SuperScriptPush)PARSER.parseFrom(input, extensionRegistry); } public static SuperScriptPush parseDelimitedFrom(InputStream input) throws IOException { return (SuperScriptPush)PARSER.parseDelimitedFrom(input); } public static SuperScriptPush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (SuperScriptPush)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static SuperScriptPush parseFrom(CodedInputStream input) throws IOException { return (SuperScriptPush)PARSER.parseFrom(input); } public static SuperScriptPush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (SuperScriptPush)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(SuperScriptPush prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.SuperScriptPushOrBuilder {
/* 19712 */       private int bitField0_; private List<PlayerHandler.SuperScriptType> s2CData_; private RepeatedFieldBuilder<PlayerHandler.SuperScriptType, PlayerHandler.SuperScriptType.Builder, PlayerHandler.SuperScriptTypeOrBuilder> s2CDataBuilder_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_SuperScriptPush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_SuperScriptPush_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.SuperScriptPush.class, Builder.class); } private Builder() { this.s2CData_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CData_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.SuperScriptPush.alwaysUseFieldBuilders) getS2CDataFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); if (this.s2CDataBuilder_ == null) { this.s2CData_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFE; } else { this.s2CDataBuilder_.clear(); }  return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_SuperScriptPush_descriptor; } public PlayerHandler.SuperScriptPush getDefaultInstanceForType() { return PlayerHandler.SuperScriptPush.getDefaultInstance(); } public PlayerHandler.SuperScriptPush build() { PlayerHandler.SuperScriptPush result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.SuperScriptPush buildPartial() { PlayerHandler.SuperScriptPush result = new PlayerHandler.SuperScriptPush(this); int from_bitField0_ = this.bitField0_; if (this.s2CDataBuilder_ == null) { if ((this.bitField0_ & 0x1) == 1) { this.s2CData_ = Collections.unmodifiableList(this.s2CData_); this.bitField0_ &= 0xFFFFFFFE; }  result.s2CData_ = this.s2CData_; } else { result.s2CData_ = this.s2CDataBuilder_.build(); }  onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.SuperScriptPush) return mergeFrom((PlayerHandler.SuperScriptPush)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.SuperScriptPush other) { if (other == PlayerHandler.SuperScriptPush.getDefaultInstance()) return this;  if (this.s2CDataBuilder_ == null) { if (!other.s2CData_.isEmpty()) { if (this.s2CData_.isEmpty()) { this.s2CData_ = other.s2CData_; this.bitField0_ &= 0xFFFFFFFE; } else { ensureS2CDataIsMutable(); this.s2CData_.addAll(other.s2CData_); }  onChanged(); }  } else if (!other.s2CData_.isEmpty()) { if (this.s2CDataBuilder_.isEmpty()) { this.s2CDataBuilder_.dispose(); this.s2CDataBuilder_ = null; this.s2CData_ = other.s2CData_; this.bitField0_ &= 0xFFFFFFFE; this.s2CDataBuilder_ = PlayerHandler.SuperScriptPush.alwaysUseFieldBuilders ? getS2CDataFieldBuilder() : null; } else { this.s2CDataBuilder_.addAllMessages(other.s2CData_); }  }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { for (int i = 0; i < getS2CDataCount(); i++) { if (!getS2CData(i).isInitialized()) return false;  }  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.SuperScriptPush parsedMessage = null; try { parsedMessage = (PlayerHandler.SuperScriptPush)PlayerHandler.SuperScriptPush.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.SuperScriptPush)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } private void ensureS2CDataIsMutable() { if ((this.bitField0_ & 0x1) != 1) { this.s2CData_ = new ArrayList<>(this.s2CData_); this.bitField0_ |= 0x1; }  } public List<PlayerHandler.SuperScriptType> getS2CDataList() { if (this.s2CDataBuilder_ == null) return Collections.unmodifiableList(this.s2CData_);  return this.s2CDataBuilder_.getMessageList(); } public int getS2CDataCount() { if (this.s2CDataBuilder_ == null) return this.s2CData_.size();  return this.s2CDataBuilder_.getCount(); } public PlayerHandler.SuperScriptType getS2CData(int index) { if (this.s2CDataBuilder_ == null) return this.s2CData_.get(index);  return (PlayerHandler.SuperScriptType)this.s2CDataBuilder_.getMessage(index); } public Builder setS2CData(int index, PlayerHandler.SuperScriptType value) { if (this.s2CDataBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CDataIsMutable(); this.s2CData_.set(index, value); onChanged(); } else { this.s2CDataBuilder_.setMessage(index, value); }  return this; } public Builder setS2CData(int index, PlayerHandler.SuperScriptType.Builder builderForValue) { if (this.s2CDataBuilder_ == null) { ensureS2CDataIsMutable(); this.s2CData_.set(index, builderForValue.build()); onChanged(); } else { this.s2CDataBuilder_.setMessage(index, builderForValue.build()); }  return this; } public Builder addS2CData(PlayerHandler.SuperScriptType value) { if (this.s2CDataBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CDataIsMutable(); this.s2CData_.add(value); onChanged(); } else { this.s2CDataBuilder_.addMessage(value); }  return this; } public Builder addS2CData(int index, PlayerHandler.SuperScriptType value) { if (this.s2CDataBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CDataIsMutable(); this.s2CData_.add(index, value); onChanged(); } else { this.s2CDataBuilder_.addMessage(index, value); }  return this; } public Builder addS2CData(PlayerHandler.SuperScriptType.Builder builderForValue) { if (this.s2CDataBuilder_ == null) { ensureS2CDataIsMutable(); this.s2CData_.add(builderForValue.build()); onChanged(); } else { this.s2CDataBuilder_.addMessage(builderForValue.build()); }  return this; } public Builder addS2CData(int index, PlayerHandler.SuperScriptType.Builder builderForValue) { if (this.s2CDataBuilder_ == null) { ensureS2CDataIsMutable(); this.s2CData_.add(index, builderForValue.build()); onChanged(); } else { this.s2CDataBuilder_.addMessage(index, builderForValue.build()); }  return this; } public Builder addAllS2CData(Iterable<? extends PlayerHandler.SuperScriptType> values) { if (this.s2CDataBuilder_ == null) { ensureS2CDataIsMutable(); AbstractMessageLite.Builder.addAll(values, this.s2CData_); onChanged(); } else { this.s2CDataBuilder_.addAllMessages(values); }  return this; } public Builder clearS2CData() { if (this.s2CDataBuilder_ == null) { this.s2CData_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFE; onChanged(); } else { this.s2CDataBuilder_.clear(); }  return this; } public Builder removeS2CData(int index) { if (this.s2CDataBuilder_ == null) { ensureS2CDataIsMutable(); this.s2CData_.remove(index); onChanged(); } else { this.s2CDataBuilder_.remove(index); }  return this; } public PlayerHandler.SuperScriptType.Builder getS2CDataBuilder(int index) { return (PlayerHandler.SuperScriptType.Builder)getS2CDataFieldBuilder().getBuilder(index); } public PlayerHandler.SuperScriptTypeOrBuilder getS2CDataOrBuilder(int index) { if (this.s2CDataBuilder_ == null) return this.s2CData_.get(index);  return (PlayerHandler.SuperScriptTypeOrBuilder)this.s2CDataBuilder_.getMessageOrBuilder(index); } public List<? extends PlayerHandler.SuperScriptTypeOrBuilder> getS2CDataOrBuilderList() { if (this.s2CDataBuilder_ != null) return this.s2CDataBuilder_.getMessageOrBuilderList();  return Collections.unmodifiableList((List)this.s2CData_); } public PlayerHandler.SuperScriptType.Builder addS2CDataBuilder() { return (PlayerHandler.SuperScriptType.Builder)getS2CDataFieldBuilder().addBuilder(PlayerHandler.SuperScriptType.getDefaultInstance()); } public PlayerHandler.SuperScriptType.Builder addS2CDataBuilder(int index) { return (PlayerHandler.SuperScriptType.Builder)getS2CDataFieldBuilder().addBuilder(index, PlayerHandler.SuperScriptType.getDefaultInstance()); } public List<PlayerHandler.SuperScriptType.Builder> getS2CDataBuilderList() { return getS2CDataFieldBuilder().getBuilderList(); } private RepeatedFieldBuilder<PlayerHandler.SuperScriptType, PlayerHandler.SuperScriptType.Builder, PlayerHandler.SuperScriptTypeOrBuilder> getS2CDataFieldBuilder() { if (this.s2CDataBuilder_ == null) { this.s2CDataBuilder_ = new RepeatedFieldBuilder(this.s2CData_, ((this.bitField0_ & 0x1) == 1), getParentForChildren(), isClean()); this.s2CData_ = null; }  return this.s2CDataBuilder_; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ChangeAreaPush
/*       */     extends GeneratedMessage
/*       */     implements ChangeAreaPushOrBuilder
/*       */   {
/* 20863 */     private static final ChangeAreaPush defaultInstance = new ChangeAreaPush(true); private final UnknownFieldSet unknownFields; private ChangeAreaPush(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ChangeAreaPush(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ChangeAreaPush getDefaultInstance() { return defaultInstance; } public ChangeAreaPush getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ChangeAreaPush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 16: this.bitField0_ |= 0x1; this.s2CMapId_ = input.readInt32(); break;case 24: this.bitField0_ |= 0x2; this.s2CSceneId_ = input.readInt32(); break;case 32: this.bitField0_ |= 0x4; this.s2CSceneType_ = input.readInt32(); break;case 40: this.bitField0_ |= 0x8; this.s2CSceneUseAgent_ = input.readInt32(); break;case 48: this.bitField0_ |= 0x10; this.s2CChangePkType_ = input.readInt32(); break;case 56: this.bitField0_ |= 0x20; this.s2CRideMount_ = input.readInt32(); break;case 66: bs = input.readBytes(); this.bitField0_ |= 0x40; this.s2CInstanceId_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ChangeAreaPush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ChangeAreaPush_fieldAccessorTable.ensureFieldAccessorsInitialized(ChangeAreaPush.class, Builder.class); } public static Parser<ChangeAreaPush> PARSER = (Parser<ChangeAreaPush>)new AbstractParser<ChangeAreaPush>() { public PlayerHandler.ChangeAreaPush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.ChangeAreaPush(input, extensionRegistry); } }
/* 20864 */     ; private int bitField0_; public static final int S2C_MAPID_FIELD_NUMBER = 2; private int s2CMapId_; public static final int S2C_SCENEID_FIELD_NUMBER = 3; private int s2CSceneId_; public static final int S2C_SCENETYPE_FIELD_NUMBER = 4; private int s2CSceneType_; public static final int S2C_SCENEUSEAGENT_FIELD_NUMBER = 5; private int s2CSceneUseAgent_; public static final int S2C_CHANGEPKTYPE_FIELD_NUMBER = 6; private int s2CChangePkType_; public static final int S2C_RIDEMOUNT_FIELD_NUMBER = 7; private int s2CRideMount_; public static final int S2C_INSTANCEID_FIELD_NUMBER = 8; private Object s2CInstanceId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ChangeAreaPush> getParserForType() { return PARSER; } public boolean hasS2CMapId() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CMapId() { return this.s2CMapId_; } public boolean hasS2CSceneId() { return ((this.bitField0_ & 0x2) == 2); } static { defaultInstance.initFields(); }
/*       */      public int getS2CSceneId() {
/*       */       return this.s2CSceneId_;
/*       */     } public boolean hasS2CSceneType() {
/*       */       return ((this.bitField0_ & 0x4) == 4);
/*       */     } public int getS2CSceneType() {
/*       */       return this.s2CSceneType_;
/*       */     } public boolean hasS2CSceneUseAgent() {
/*       */       return ((this.bitField0_ & 0x8) == 8);
/*       */     } public int getS2CSceneUseAgent() {
/*       */       return this.s2CSceneUseAgent_;
/*       */     } public boolean hasS2CChangePkType() {
/*       */       return ((this.bitField0_ & 0x10) == 16);
/*       */     } public int getS2CChangePkType() {
/*       */       return this.s2CChangePkType_;
/*       */     } public boolean hasS2CRideMount() {
/*       */       return ((this.bitField0_ & 0x20) == 32);
/*       */     } public int getS2CRideMount() {
/*       */       return this.s2CRideMount_;
/*       */     } public boolean hasS2CInstanceId() {
/*       */       return ((this.bitField0_ & 0x40) == 64);
/*       */     } public String getS2CInstanceId() {
/*       */       Object ref = this.s2CInstanceId_;
/*       */       if (ref instanceof String)
/*       */         return (String)ref; 
/*       */       ByteString bs = (ByteString)ref;
/*       */       String s = bs.toStringUtf8();
/*       */       if (bs.isValidUtf8())
/*       */         this.s2CInstanceId_ = s; 
/*       */       return s;
/*       */     } public ByteString getS2CInstanceIdBytes() {
/*       */       Object ref = this.s2CInstanceId_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.s2CInstanceId_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref;
/*       */     } private void initFields() {
/*       */       this.s2CMapId_ = 0;
/*       */       this.s2CSceneId_ = 0;
/*       */       this.s2CSceneType_ = 0;
/*       */       this.s2CSceneUseAgent_ = 0;
/*       */       this.s2CChangePkType_ = 0;
/*       */       this.s2CRideMount_ = 0;
/*       */       this.s2CInstanceId_ = "";
/*       */     } public final boolean isInitialized() {
/*       */       byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1)
/*       */         return true; 
/*       */       if (isInitialized == 0)
/*       */         return false; 
/*       */       if (!hasS2CMapId()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasS2CSceneId()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasS2CSceneType()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasS2CSceneUseAgent()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasS2CChangePkType()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasS2CRideMount()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasS2CInstanceId()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true;
/*       */     } public void writeTo(CodedOutputStream output) throws IOException {
/*       */       getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1)
/*       */         output.writeInt32(2, this.s2CMapId_); 
/*       */       if ((this.bitField0_ & 0x2) == 2)
/*       */         output.writeInt32(3, this.s2CSceneId_); 
/*       */       if ((this.bitField0_ & 0x4) == 4)
/*       */         output.writeInt32(4, this.s2CSceneType_); 
/*       */       if ((this.bitField0_ & 0x8) == 8)
/*       */         output.writeInt32(5, this.s2CSceneUseAgent_); 
/*       */       if ((this.bitField0_ & 0x10) == 16)
/*       */         output.writeInt32(6, this.s2CChangePkType_); 
/*       */       if ((this.bitField0_ & 0x20) == 32)
/*       */         output.writeInt32(7, this.s2CRideMount_); 
/*       */       if ((this.bitField0_ & 0x40) == 64)
/*       */         output.writeBytes(8, getS2CInstanceIdBytes()); 
/*       */       getUnknownFields().writeTo(output);
/*       */     } public int getSerializedSize() {
/*       */       int size = this.memoizedSerializedSize;
/*       */       if (size != -1)
/*       */         return size; 
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1)
/*       */         size += CodedOutputStream.computeInt32Size(2, this.s2CMapId_); 
/*       */       if ((this.bitField0_ & 0x2) == 2)
/*       */         size += CodedOutputStream.computeInt32Size(3, this.s2CSceneId_); 
/*       */       if ((this.bitField0_ & 0x4) == 4)
/*       */         size += CodedOutputStream.computeInt32Size(4, this.s2CSceneType_); 
/*       */       if ((this.bitField0_ & 0x8) == 8)
/*       */         size += CodedOutputStream.computeInt32Size(5, this.s2CSceneUseAgent_); 
/*       */       if ((this.bitField0_ & 0x10) == 16)
/*       */         size += CodedOutputStream.computeInt32Size(6, this.s2CChangePkType_); 
/*       */       if ((this.bitField0_ & 0x20) == 32)
/*       */         size += CodedOutputStream.computeInt32Size(7, this.s2CRideMount_); 
/*       */       if ((this.bitField0_ & 0x40) == 64)
/*       */         size += CodedOutputStream.computeBytesSize(8, getS2CInstanceIdBytes()); 
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size;
/*       */     } protected Object writeReplace() throws ObjectStreamException {
/*       */       return super.writeReplace();
/*       */     } public static ChangeAreaPush parseFrom(ByteString data) throws InvalidProtocolBufferException {
/*       */       return (ChangeAreaPush)PARSER.parseFrom(data);
/*       */     } public static ChangeAreaPush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (ChangeAreaPush)PARSER.parseFrom(data, extensionRegistry);
/*       */     } public static ChangeAreaPush parseFrom(byte[] data) throws InvalidProtocolBufferException {
/*       */       return (ChangeAreaPush)PARSER.parseFrom(data);
/*       */     } public static ChangeAreaPush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (ChangeAreaPush)PARSER.parseFrom(data, extensionRegistry);
/*       */     } public static ChangeAreaPush parseFrom(InputStream input) throws IOException {
/*       */       return (ChangeAreaPush)PARSER.parseFrom(input);
/*       */     } public static ChangeAreaPush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (ChangeAreaPush)PARSER.parseFrom(input, extensionRegistry);
/*       */     } public static ChangeAreaPush parseDelimitedFrom(InputStream input) throws IOException {
/*       */       return (ChangeAreaPush)PARSER.parseDelimitedFrom(input);
/*       */     } public static ChangeAreaPush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (ChangeAreaPush)PARSER.parseDelimitedFrom(input, extensionRegistry);
/*       */     } public static ChangeAreaPush parseFrom(CodedInputStream input) throws IOException {
/*       */       return (ChangeAreaPush)PARSER.parseFrom(input);
/*       */     } public static ChangeAreaPush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (ChangeAreaPush)PARSER.parseFrom(input, extensionRegistry);
/*       */     } public static Builder newBuilder() {
/*       */       return Builder.create();
/*       */     } public Builder newBuilderForType() {
/*       */       return newBuilder();
/*       */     } public static Builder newBuilder(ChangeAreaPush prototype) {
/*       */       return newBuilder().mergeFrom(prototype);
/*       */     } public Builder toBuilder() {
/*       */       return newBuilder(this);
/*       */     } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
/*       */       Builder builder = new Builder(parent);
/*       */       return builder;
/*       */     } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.ChangeAreaPushOrBuilder { private int bitField0_; private int s2CMapId_; private int s2CSceneId_; private int s2CSceneType_; private int s2CSceneUseAgent_; private int s2CChangePkType_; private int s2CRideMount_; private Object s2CInstanceId_; public static final Descriptors.Descriptor getDescriptor() {
/*       */         return PlayerHandler.internal_static_pomelo_area_ChangeAreaPush_descriptor;
/*       */       } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */         return PlayerHandler.internal_static_pomelo_area_ChangeAreaPush_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.ChangeAreaPush.class, Builder.class);
/*       */       } private Builder() {
/*       */         this.s2CInstanceId_ = "";
/*       */         maybeForceBuilderInitialization();
/*       */       } private Builder(GeneratedMessage.BuilderParent parent) {
/*       */         super(parent);
/*       */         this.s2CInstanceId_ = "";
/*       */         maybeForceBuilderInitialization();
/*       */       } private void maybeForceBuilderInitialization() {
/*       */         if (PlayerHandler.ChangeAreaPush.alwaysUseFieldBuilders);
/*       */       } private static Builder create() {
/*       */         return new Builder();
/*       */       } public Builder clear() {
/*       */         super.clear();
/*       */         this.s2CMapId_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CSceneId_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.s2CSceneType_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.s2CSceneUseAgent_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.s2CChangePkType_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.s2CRideMount_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFDF;
/*       */         this.s2CInstanceId_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFBF;
/*       */         return this;
/*       */       } public Builder clone() {
/*       */         return create().mergeFrom(buildPartial());
/*       */       } public Descriptors.Descriptor getDescriptorForType() {
/*       */         return PlayerHandler.internal_static_pomelo_area_ChangeAreaPush_descriptor;
/*       */       } public PlayerHandler.ChangeAreaPush getDefaultInstanceForType() {
/*       */         return PlayerHandler.ChangeAreaPush.getDefaultInstance();
/*       */       } public PlayerHandler.ChangeAreaPush build() {
/*       */         PlayerHandler.ChangeAreaPush result = buildPartial();
/*       */         if (!result.isInitialized())
/*       */           throw newUninitializedMessageException(result); 
/*       */         return result;
/*       */       } public PlayerHandler.ChangeAreaPush buildPartial() {
/*       */         PlayerHandler.ChangeAreaPush result = new PlayerHandler.ChangeAreaPush(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1)
/*       */           to_bitField0_ |= 0x1; 
/*       */         result.s2CMapId_ = this.s2CMapId_;
/*       */         if ((from_bitField0_ & 0x2) == 2)
/*       */           to_bitField0_ |= 0x2; 
/*       */         result.s2CSceneId_ = this.s2CSceneId_;
/*       */         if ((from_bitField0_ & 0x4) == 4)
/*       */           to_bitField0_ |= 0x4; 
/*       */         result.s2CSceneType_ = this.s2CSceneType_;
/*       */         if ((from_bitField0_ & 0x8) == 8)
/*       */           to_bitField0_ |= 0x8; 
/*       */         result.s2CSceneUseAgent_ = this.s2CSceneUseAgent_;
/*       */         if ((from_bitField0_ & 0x10) == 16)
/*       */           to_bitField0_ |= 0x10; 
/*       */         result.s2CChangePkType_ = this.s2CChangePkType_;
/*       */         if ((from_bitField0_ & 0x20) == 32)
/*       */           to_bitField0_ |= 0x20; 
/*       */         result.s2CRideMount_ = this.s2CRideMount_;
/*       */         if ((from_bitField0_ & 0x40) == 64)
/*       */           to_bitField0_ |= 0x40; 
/*       */         result.s2CInstanceId_ = this.s2CInstanceId_;
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result;
/*       */       } public Builder mergeFrom(Message other) {
/*       */         if (other instanceof PlayerHandler.ChangeAreaPush)
/*       */           return mergeFrom((PlayerHandler.ChangeAreaPush)other); 
/*       */         super.mergeFrom(other);
/*       */         return this;
/*       */       } public Builder mergeFrom(PlayerHandler.ChangeAreaPush other) {
/*       */         if (other == PlayerHandler.ChangeAreaPush.getDefaultInstance())
/*       */           return this; 
/*       */         if (other.hasS2CMapId())
/*       */           setS2CMapId(other.getS2CMapId()); 
/*       */         if (other.hasS2CSceneId())
/*       */           setS2CSceneId(other.getS2CSceneId()); 
/*       */         if (other.hasS2CSceneType())
/*       */           setS2CSceneType(other.getS2CSceneType()); 
/*       */         if (other.hasS2CSceneUseAgent())
/*       */           setS2CSceneUseAgent(other.getS2CSceneUseAgent()); 
/*       */         if (other.hasS2CChangePkType())
/*       */           setS2CChangePkType(other.getS2CChangePkType()); 
/*       */         if (other.hasS2CRideMount())
/*       */           setS2CRideMount(other.getS2CRideMount()); 
/*       */         if (other.hasS2CInstanceId()) {
/*       */           this.bitField0_ |= 0x40;
/*       */           this.s2CInstanceId_ = other.s2CInstanceId_;
/*       */           onChanged();
/*       */         } 
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this;
/*       */       } public final boolean isInitialized() {
/*       */         if (!hasS2CMapId())
/*       */           return false; 
/*       */         if (!hasS2CSceneId())
/*       */           return false; 
/*       */         if (!hasS2CSceneType())
/*       */           return false; 
/*       */         if (!hasS2CSceneUseAgent())
/*       */           return false; 
/*       */         if (!hasS2CChangePkType())
/*       */           return false; 
/*       */         if (!hasS2CRideMount())
/*       */           return false; 
/*       */         if (!hasS2CInstanceId())
/*       */           return false; 
/*       */         return true;
/*       */       } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */         PlayerHandler.ChangeAreaPush parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (PlayerHandler.ChangeAreaPush)PlayerHandler.ChangeAreaPush.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (PlayerHandler.ChangeAreaPush)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null)
/*       */             mergeFrom(parsedMessage); 
/*       */         } 
/*       */         return this;
/*       */       } public boolean hasS2CMapId() {
/*       */         return ((this.bitField0_ & 0x1) == 1);
/*       */       } public int getS2CMapId() {
/*       */         return this.s2CMapId_;
/*       */       } public Builder setS2CMapId(int value) {
/*       */         this.bitField0_ |= 0x1;
/*       */         this.s2CMapId_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       } public Builder clearS2CMapId() {
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CMapId_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       } public boolean hasS2CSceneId() {
/*       */         return ((this.bitField0_ & 0x2) == 2);
/*       */       } public int getS2CSceneId() {
/*       */         return this.s2CSceneId_;
/*       */       } public Builder setS2CSceneId(int value) {
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CSceneId_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       } public Builder clearS2CSceneId() {
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.s2CSceneId_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       } public boolean hasS2CSceneType() {
/*       */         return ((this.bitField0_ & 0x4) == 4);
/*       */       } public int getS2CSceneType() {
/*       */         return this.s2CSceneType_;
/*       */       } public Builder setS2CSceneType(int value) {
/*       */         this.bitField0_ |= 0x4;
/*       */         this.s2CSceneType_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       } public Builder clearS2CSceneType() {
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.s2CSceneType_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       } public boolean hasS2CSceneUseAgent() {
/*       */         return ((this.bitField0_ & 0x8) == 8);
/*       */       } public int getS2CSceneUseAgent() {
/*       */         return this.s2CSceneUseAgent_;
/*       */       } public Builder setS2CSceneUseAgent(int value) {
/*       */         this.bitField0_ |= 0x8;
/*       */         this.s2CSceneUseAgent_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       } public Builder clearS2CSceneUseAgent() {
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.s2CSceneUseAgent_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       } public boolean hasS2CChangePkType() {
/*       */         return ((this.bitField0_ & 0x10) == 16);
/*       */       } public int getS2CChangePkType() {
/*       */         return this.s2CChangePkType_;
/*       */       } public Builder setS2CChangePkType(int value) {
/*       */         this.bitField0_ |= 0x10;
/*       */         this.s2CChangePkType_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       } public Builder clearS2CChangePkType() {
/*       */         this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.s2CChangePkType_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       } public boolean hasS2CRideMount() {
/*       */         return ((this.bitField0_ & 0x20) == 32);
/*       */       } public int getS2CRideMount() {
/*       */         return this.s2CRideMount_;
/*       */       }
/*       */       public Builder setS2CRideMount(int value) {
/*       */         this.bitField0_ |= 0x20;
/*       */         this.s2CRideMount_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder clearS2CRideMount() {
/*       */         this.bitField0_ &= 0xFFFFFFDF;
/*       */         this.s2CRideMount_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public boolean hasS2CInstanceId() {
/*       */         return ((this.bitField0_ & 0x40) == 64);
/*       */       }
/*       */       public String getS2CInstanceId() {
/*       */         Object ref = this.s2CInstanceId_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.s2CInstanceId_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */       public ByteString getS2CInstanceIdBytes() {
/*       */         Object ref = this.s2CInstanceId_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CInstanceId_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */       public Builder setS2CInstanceId(String value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x40;
/*       */         this.s2CInstanceId_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder clearS2CInstanceId() {
/*       */         this.bitField0_ &= 0xFFFFFFBF;
/*       */         this.s2CInstanceId_ = PlayerHandler.ChangeAreaPush.getDefaultInstance().getS2CInstanceId();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder setS2CInstanceIdBytes(ByteString value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x40;
/*       */         this.s2CInstanceId_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       } } }
/* 21276 */   public static final class ChangPkModelRequest extends GeneratedMessage implements ChangPkModelRequestOrBuilder { private static final ChangPkModelRequest defaultInstance = new ChangPkModelRequest(true); private final UnknownFieldSet unknownFields; private ChangPkModelRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ChangPkModelRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ChangPkModelRequest getDefaultInstance() { return defaultInstance; } public ChangPkModelRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ChangPkModelRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.c2SModel_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ChangPkModelRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ChangPkModelRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ChangPkModelRequest.class, Builder.class); } public static Parser<ChangPkModelRequest> PARSER = (Parser<ChangPkModelRequest>)new AbstractParser<ChangPkModelRequest>() { public PlayerHandler.ChangPkModelRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.ChangPkModelRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_MODEL_FIELD_NUMBER = 1; private int c2SModel_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ChangPkModelRequest> getParserForType() { return PARSER; } public boolean hasC2SModel() { return ((this.bitField0_ & 0x1) == 1); } public int getC2SModel() { return this.c2SModel_; } private void initFields() { this.c2SModel_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SModel()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.c2SModel_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.c2SModel_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ChangPkModelRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ChangPkModelRequest)PARSER.parseFrom(data); } public static ChangPkModelRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ChangPkModelRequest)PARSER.parseFrom(data, extensionRegistry); } public static ChangPkModelRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ChangPkModelRequest)PARSER.parseFrom(data); } public static ChangPkModelRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ChangPkModelRequest)PARSER.parseFrom(data, extensionRegistry); } public static ChangPkModelRequest parseFrom(InputStream input) throws IOException { return (ChangPkModelRequest)PARSER.parseFrom(input); } public static ChangPkModelRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ChangPkModelRequest)PARSER.parseFrom(input, extensionRegistry); } public static ChangPkModelRequest parseDelimitedFrom(InputStream input) throws IOException { return (ChangPkModelRequest)PARSER.parseDelimitedFrom(input); } public static ChangPkModelRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ChangPkModelRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ChangPkModelRequest parseFrom(CodedInputStream input) throws IOException { return (ChangPkModelRequest)PARSER.parseFrom(input); } public static ChangPkModelRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ChangPkModelRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ChangPkModelRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.ChangPkModelRequestOrBuilder {
/* 21277 */       private int bitField0_; private int c2SModel_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ChangPkModelRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ChangPkModelRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.ChangPkModelRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.ChangPkModelRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SModel_ = 0; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_ChangPkModelRequest_descriptor; } public PlayerHandler.ChangPkModelRequest getDefaultInstanceForType() { return PlayerHandler.ChangPkModelRequest.getDefaultInstance(); } public PlayerHandler.ChangPkModelRequest build() { PlayerHandler.ChangPkModelRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.ChangPkModelRequest buildPartial() { PlayerHandler.ChangPkModelRequest result = new PlayerHandler.ChangPkModelRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SModel_ = this.c2SModel_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.ChangPkModelRequest) return mergeFrom((PlayerHandler.ChangPkModelRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.ChangPkModelRequest other) { if (other == PlayerHandler.ChangPkModelRequest.getDefaultInstance()) return this;  if (other.hasC2SModel()) setC2SModel(other.getC2SModel());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SModel()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.ChangPkModelRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.ChangPkModelRequest)PlayerHandler.ChangPkModelRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.ChangPkModelRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SModel() { return ((this.bitField0_ & 0x1) == 1); } public int getC2SModel() { return this.c2SModel_; } public Builder setC2SModel(int value) { this.bitField0_ |= 0x1; this.c2SModel_ = value; onChanged(); return this; } public Builder clearC2SModel() { this.bitField0_ &= 0xFFFFFFFE; this.c2SModel_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */      }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ChangPkModelRespone
/*       */     extends GeneratedMessage
/*       */     implements ChangPkModelResponeOrBuilder
/*       */   {
/* 21916 */     private static final ChangPkModelRespone defaultInstance = new ChangPkModelRespone(true); private final UnknownFieldSet unknownFields; private ChangPkModelRespone(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ChangPkModelRespone(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ChangPkModelRespone getDefaultInstance() { return defaultInstance; } public ChangPkModelRespone getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ChangPkModelRespone(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 24: this.bitField0_ |= 0x4; this.s2CCurrentModel_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ChangPkModelRespone_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ChangPkModelRespone_fieldAccessorTable.ensureFieldAccessorsInitialized(ChangPkModelRespone.class, Builder.class); } public static Parser<ChangPkModelRespone> PARSER = (Parser<ChangPkModelRespone>)new AbstractParser<ChangPkModelRespone>() { public PlayerHandler.ChangPkModelRespone parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.ChangPkModelRespone(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_CURRENTMODEL_FIELD_NUMBER = 3; private int s2CCurrentModel_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ChangPkModelRespone> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public boolean hasS2CCurrentModel() { return ((this.bitField0_ & 0x4) == 4); } public int getS2CCurrentModel() { return this.s2CCurrentModel_; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.s2CCurrentModel_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4) output.writeInt32(3, this.s2CCurrentModel_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt32Size(3, this.s2CCurrentModel_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ChangPkModelRespone parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ChangPkModelRespone)PARSER.parseFrom(data); } public static ChangPkModelRespone parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ChangPkModelRespone)PARSER.parseFrom(data, extensionRegistry); } public static ChangPkModelRespone parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ChangPkModelRespone)PARSER.parseFrom(data); } public static ChangPkModelRespone parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ChangPkModelRespone)PARSER.parseFrom(data, extensionRegistry); } public static ChangPkModelRespone parseFrom(InputStream input) throws IOException { return (ChangPkModelRespone)PARSER.parseFrom(input); } public static ChangPkModelRespone parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ChangPkModelRespone)PARSER.parseFrom(input, extensionRegistry); } public static ChangPkModelRespone parseDelimitedFrom(InputStream input) throws IOException { return (ChangPkModelRespone)PARSER.parseDelimitedFrom(input); } public static ChangPkModelRespone parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ChangPkModelRespone)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ChangPkModelRespone parseFrom(CodedInputStream input) throws IOException { return (ChangPkModelRespone)PARSER.parseFrom(input); } public static ChangPkModelRespone parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ChangPkModelRespone)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ChangPkModelRespone prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.ChangPkModelResponeOrBuilder {
/* 21917 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; private int s2CCurrentModel_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ChangPkModelRespone_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ChangPkModelRespone_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.ChangPkModelRespone.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.ChangPkModelRespone.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; this.s2CCurrentModel_ = 0; this.bitField0_ &= 0xFFFFFFFB; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_ChangPkModelRespone_descriptor; } public PlayerHandler.ChangPkModelRespone getDefaultInstanceForType() { return PlayerHandler.ChangPkModelRespone.getDefaultInstance(); } public PlayerHandler.ChangPkModelRespone build() { PlayerHandler.ChangPkModelRespone result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.ChangPkModelRespone buildPartial() { PlayerHandler.ChangPkModelRespone result = new PlayerHandler.ChangPkModelRespone(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;  result.s2CCurrentModel_ = this.s2CCurrentModel_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.ChangPkModelRespone) return mergeFrom((PlayerHandler.ChangPkModelRespone)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.ChangPkModelRespone other) { if (other == PlayerHandler.ChangPkModelRespone.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  if (other.hasS2CCurrentModel()) setS2CCurrentModel(other.getS2CCurrentModel());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.ChangPkModelRespone parsedMessage = null; try { parsedMessage = (PlayerHandler.ChangPkModelRespone)PlayerHandler.ChangPkModelRespone.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.ChangPkModelRespone)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = PlayerHandler.ChangPkModelRespone.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public boolean hasS2CCurrentModel() { return ((this.bitField0_ & 0x4) == 4); } public int getS2CCurrentModel() { return this.s2CCurrentModel_; } public Builder setS2CCurrentModel(int value) { this.bitField0_ |= 0x4; this.s2CCurrentModel_ = value; onChanged(); return this; } public Builder clearS2CCurrentModel() { this.bitField0_ &= 0xFFFFFFFB; this.s2CCurrentModel_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ReliveSendPosRequest
/*       */     extends GeneratedMessage
/*       */     implements ReliveSendPosRequestOrBuilder
/*       */   {
/* 22239 */     private static final ReliveSendPosRequest defaultInstance = new ReliveSendPosRequest(true); private final UnknownFieldSet unknownFields; private ReliveSendPosRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ReliveSendPosRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ReliveSendPosRequest getDefaultInstance() { return defaultInstance; } public ReliveSendPosRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ReliveSendPosRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ReliveSendPosRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ReliveSendPosRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ReliveSendPosRequest.class, Builder.class); } public static Parser<ReliveSendPosRequest> PARSER = (Parser<ReliveSendPosRequest>)new AbstractParser<ReliveSendPosRequest>() { public PlayerHandler.ReliveSendPosRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.ReliveSendPosRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ReliveSendPosRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ReliveSendPosRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ReliveSendPosRequest)PARSER.parseFrom(data); } public static ReliveSendPosRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ReliveSendPosRequest)PARSER.parseFrom(data, extensionRegistry); } public static ReliveSendPosRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ReliveSendPosRequest)PARSER.parseFrom(data); } public static ReliveSendPosRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ReliveSendPosRequest)PARSER.parseFrom(data, extensionRegistry); } public static ReliveSendPosRequest parseFrom(InputStream input) throws IOException { return (ReliveSendPosRequest)PARSER.parseFrom(input); } public static ReliveSendPosRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ReliveSendPosRequest)PARSER.parseFrom(input, extensionRegistry); } public static ReliveSendPosRequest parseDelimitedFrom(InputStream input) throws IOException { return (ReliveSendPosRequest)PARSER.parseDelimitedFrom(input); } public static ReliveSendPosRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ReliveSendPosRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ReliveSendPosRequest parseFrom(CodedInputStream input) throws IOException { return (ReliveSendPosRequest)PARSER.parseFrom(input); } public static ReliveSendPosRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ReliveSendPosRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ReliveSendPosRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.ReliveSendPosRequestOrBuilder {
/* 22240 */       public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ReliveSendPosRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ReliveSendPosRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.ReliveSendPosRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.ReliveSendPosRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_ReliveSendPosRequest_descriptor; } public PlayerHandler.ReliveSendPosRequest getDefaultInstanceForType() { return PlayerHandler.ReliveSendPosRequest.getDefaultInstance(); } public PlayerHandler.ReliveSendPosRequest build() { PlayerHandler.ReliveSendPosRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.ReliveSendPosRequest buildPartial() { PlayerHandler.ReliveSendPosRequest result = new PlayerHandler.ReliveSendPosRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.ReliveSendPosRequest) return mergeFrom((PlayerHandler.ReliveSendPosRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.ReliveSendPosRequest other) { if (other == PlayerHandler.ReliveSendPosRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.ReliveSendPosRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.ReliveSendPosRequest)PlayerHandler.ReliveSendPosRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.ReliveSendPosRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ReliveSendPosResponse
/*       */     extends GeneratedMessage
/*       */     implements ReliveSendPosResponseOrBuilder
/*       */   {
/* 22801 */     private static final ReliveSendPosResponse defaultInstance = new ReliveSendPosResponse(true); private final UnknownFieldSet unknownFields; private ReliveSendPosResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ReliveSendPosResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ReliveSendPosResponse getDefaultInstance() { return defaultInstance; } public ReliveSendPosResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ReliveSendPosResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ReliveSendPosResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ReliveSendPosResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ReliveSendPosResponse.class, Builder.class); } public static Parser<ReliveSendPosResponse> PARSER = (Parser<ReliveSendPosResponse>)new AbstractParser<ReliveSendPosResponse>() { public PlayerHandler.ReliveSendPosResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.ReliveSendPosResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ReliveSendPosResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ReliveSendPosResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ReliveSendPosResponse)PARSER.parseFrom(data); } public static ReliveSendPosResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ReliveSendPosResponse)PARSER.parseFrom(data, extensionRegistry); } public static ReliveSendPosResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ReliveSendPosResponse)PARSER.parseFrom(data); } public static ReliveSendPosResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ReliveSendPosResponse)PARSER.parseFrom(data, extensionRegistry); } public static ReliveSendPosResponse parseFrom(InputStream input) throws IOException { return (ReliveSendPosResponse)PARSER.parseFrom(input); } public static ReliveSendPosResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ReliveSendPosResponse)PARSER.parseFrom(input, extensionRegistry); } public static ReliveSendPosResponse parseDelimitedFrom(InputStream input) throws IOException { return (ReliveSendPosResponse)PARSER.parseDelimitedFrom(input); } public static ReliveSendPosResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ReliveSendPosResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ReliveSendPosResponse parseFrom(CodedInputStream input) throws IOException { return (ReliveSendPosResponse)PARSER.parseFrom(input); } public static ReliveSendPosResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ReliveSendPosResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ReliveSendPosResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.ReliveSendPosResponseOrBuilder {
/* 22802 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ReliveSendPosResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ReliveSendPosResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.ReliveSendPosResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.ReliveSendPosResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_ReliveSendPosResponse_descriptor; } public PlayerHandler.ReliveSendPosResponse getDefaultInstanceForType() { return PlayerHandler.ReliveSendPosResponse.getDefaultInstance(); } public PlayerHandler.ReliveSendPosResponse build() { PlayerHandler.ReliveSendPosResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.ReliveSendPosResponse buildPartial() { PlayerHandler.ReliveSendPosResponse result = new PlayerHandler.ReliveSendPosResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.ReliveSendPosResponse) return mergeFrom((PlayerHandler.ReliveSendPosResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.ReliveSendPosResponse other) { if (other == PlayerHandler.ReliveSendPosResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.ReliveSendPosResponse parsedMessage = null; try { parsedMessage = (PlayerHandler.ReliveSendPosResponse)PlayerHandler.ReliveSendPosResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.ReliveSendPosResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = PlayerHandler.ReliveSendPosResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ReliveRequest
/*       */     extends GeneratedMessage
/*       */     implements ReliveRequestOrBuilder
/*       */   {
/* 23356 */     private static final ReliveRequest defaultInstance = new ReliveRequest(true); private final UnknownFieldSet unknownFields; private ReliveRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ReliveRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ReliveRequest getDefaultInstance() { return defaultInstance; } public ReliveRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ReliveRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.type_ = input.readInt32(); break;case 16: this.bitField0_ |= 0x2; this.autoPay_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ReliveRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ReliveRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ReliveRequest.class, Builder.class); } public static Parser<ReliveRequest> PARSER = (Parser<ReliveRequest>)new AbstractParser<ReliveRequest>() { public PlayerHandler.ReliveRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.ReliveRequest(input, extensionRegistry); } }; private int bitField0_; public static final int TYPE_FIELD_NUMBER = 1; private int type_; public static final int AUTOPAY_FIELD_NUMBER = 2; private int autoPay_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ReliveRequest> getParserForType() { return PARSER; } public boolean hasType() { return ((this.bitField0_ & 0x1) == 1); } public int getType() { return this.type_; } public boolean hasAutoPay() { return ((this.bitField0_ & 0x2) == 2); } public int getAutoPay() { return this.autoPay_; } private void initFields() { this.type_ = 0; this.autoPay_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasType()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.type_);  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.autoPay_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.type_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.autoPay_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ReliveRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ReliveRequest)PARSER.parseFrom(data); } public static ReliveRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ReliveRequest)PARSER.parseFrom(data, extensionRegistry); } public static ReliveRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ReliveRequest)PARSER.parseFrom(data); } public static ReliveRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ReliveRequest)PARSER.parseFrom(data, extensionRegistry); } public static ReliveRequest parseFrom(InputStream input) throws IOException { return (ReliveRequest)PARSER.parseFrom(input); } public static ReliveRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ReliveRequest)PARSER.parseFrom(input, extensionRegistry); } public static ReliveRequest parseDelimitedFrom(InputStream input) throws IOException { return (ReliveRequest)PARSER.parseDelimitedFrom(input); } public static ReliveRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ReliveRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ReliveRequest parseFrom(CodedInputStream input) throws IOException { return (ReliveRequest)PARSER.parseFrom(input); } public static ReliveRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ReliveRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ReliveRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.ReliveRequestOrBuilder {
/* 23357 */       private int bitField0_; private int type_; private int autoPay_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ReliveRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ReliveRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.ReliveRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.ReliveRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.type_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.autoPay_ = 0; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_ReliveRequest_descriptor; } public PlayerHandler.ReliveRequest getDefaultInstanceForType() { return PlayerHandler.ReliveRequest.getDefaultInstance(); } public PlayerHandler.ReliveRequest build() { PlayerHandler.ReliveRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.ReliveRequest buildPartial() { PlayerHandler.ReliveRequest result = new PlayerHandler.ReliveRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.type_ = this.type_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.autoPay_ = this.autoPay_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.ReliveRequest) return mergeFrom((PlayerHandler.ReliveRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.ReliveRequest other) { if (other == PlayerHandler.ReliveRequest.getDefaultInstance()) return this;  if (other.hasType()) setType(other.getType());  if (other.hasAutoPay()) setAutoPay(other.getAutoPay());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasType()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.ReliveRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.ReliveRequest)PlayerHandler.ReliveRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.ReliveRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasType() { return ((this.bitField0_ & 0x1) == 1); } public int getType() { return this.type_; } public Builder setType(int value) { this.bitField0_ |= 0x1; this.type_ = value; onChanged(); return this; } public Builder clearType() { this.bitField0_ &= 0xFFFFFFFE; this.type_ = 0; onChanged(); return this; } public boolean hasAutoPay() { return ((this.bitField0_ & 0x2) == 2); } public int getAutoPay() { return this.autoPay_; } public Builder setAutoPay(int value) { this.bitField0_ |= 0x2; this.autoPay_ = value; onChanged(); return this; } public Builder clearAutoPay() { this.bitField0_ &= 0xFFFFFFFD; this.autoPay_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ReliveResponse
/*       */     extends GeneratedMessage
/*       */     implements ReliveResponseOrBuilder
/*       */   {
/* 23918 */     private static final ReliveResponse defaultInstance = new ReliveResponse(true); private final UnknownFieldSet unknownFields; private ReliveResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ReliveResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ReliveResponse getDefaultInstance() { return defaultInstance; } public ReliveResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ReliveResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ReliveResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ReliveResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ReliveResponse.class, Builder.class); } public static Parser<ReliveResponse> PARSER = (Parser<ReliveResponse>)new AbstractParser<ReliveResponse>() { public PlayerHandler.ReliveResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.ReliveResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ReliveResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ReliveResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ReliveResponse)PARSER.parseFrom(data); } public static ReliveResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ReliveResponse)PARSER.parseFrom(data, extensionRegistry); } public static ReliveResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ReliveResponse)PARSER.parseFrom(data); } public static ReliveResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ReliveResponse)PARSER.parseFrom(data, extensionRegistry); } public static ReliveResponse parseFrom(InputStream input) throws IOException { return (ReliveResponse)PARSER.parseFrom(input); } public static ReliveResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ReliveResponse)PARSER.parseFrom(input, extensionRegistry); } public static ReliveResponse parseDelimitedFrom(InputStream input) throws IOException { return (ReliveResponse)PARSER.parseDelimitedFrom(input); } public static ReliveResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ReliveResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ReliveResponse parseFrom(CodedInputStream input) throws IOException { return (ReliveResponse)PARSER.parseFrom(input); } public static ReliveResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ReliveResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ReliveResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.ReliveResponseOrBuilder {
/* 23919 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ReliveResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ReliveResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.ReliveResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.ReliveResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_ReliveResponse_descriptor; } public PlayerHandler.ReliveResponse getDefaultInstanceForType() { return PlayerHandler.ReliveResponse.getDefaultInstance(); } public PlayerHandler.ReliveResponse build() { PlayerHandler.ReliveResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.ReliveResponse buildPartial() { PlayerHandler.ReliveResponse result = new PlayerHandler.ReliveResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.ReliveResponse) return mergeFrom((PlayerHandler.ReliveResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.ReliveResponse other) { if (other == PlayerHandler.ReliveResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.ReliveResponse parsedMessage = null; try { parsedMessage = (PlayerHandler.ReliveResponse)PlayerHandler.ReliveResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.ReliveResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = PlayerHandler.ReliveResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class GetAreaLinesRequest
/*       */     extends GeneratedMessage
/*       */     implements GetAreaLinesRequestOrBuilder
/*       */   {
/* 24231 */     private static final GetAreaLinesRequest defaultInstance = new GetAreaLinesRequest(true); private final UnknownFieldSet unknownFields; private GetAreaLinesRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private GetAreaLinesRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static GetAreaLinesRequest getDefaultInstance() { return defaultInstance; } public GetAreaLinesRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private GetAreaLinesRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_GetAreaLinesRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_GetAreaLinesRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(GetAreaLinesRequest.class, Builder.class); } public static Parser<GetAreaLinesRequest> PARSER = (Parser<GetAreaLinesRequest>)new AbstractParser<GetAreaLinesRequest>() { public PlayerHandler.GetAreaLinesRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.GetAreaLinesRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<GetAreaLinesRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static GetAreaLinesRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (GetAreaLinesRequest)PARSER.parseFrom(data); } public static GetAreaLinesRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetAreaLinesRequest)PARSER.parseFrom(data, extensionRegistry); } public static GetAreaLinesRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (GetAreaLinesRequest)PARSER.parseFrom(data); } public static GetAreaLinesRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetAreaLinesRequest)PARSER.parseFrom(data, extensionRegistry); } public static GetAreaLinesRequest parseFrom(InputStream input) throws IOException { return (GetAreaLinesRequest)PARSER.parseFrom(input); } public static GetAreaLinesRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetAreaLinesRequest)PARSER.parseFrom(input, extensionRegistry); } public static GetAreaLinesRequest parseDelimitedFrom(InputStream input) throws IOException { return (GetAreaLinesRequest)PARSER.parseDelimitedFrom(input); } public static GetAreaLinesRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetAreaLinesRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static GetAreaLinesRequest parseFrom(CodedInputStream input) throws IOException { return (GetAreaLinesRequest)PARSER.parseFrom(input); } public static GetAreaLinesRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetAreaLinesRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(GetAreaLinesRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.GetAreaLinesRequestOrBuilder {
/* 24232 */       public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_GetAreaLinesRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_GetAreaLinesRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.GetAreaLinesRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.GetAreaLinesRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_GetAreaLinesRequest_descriptor; } public PlayerHandler.GetAreaLinesRequest getDefaultInstanceForType() { return PlayerHandler.GetAreaLinesRequest.getDefaultInstance(); } public PlayerHandler.GetAreaLinesRequest build() { PlayerHandler.GetAreaLinesRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.GetAreaLinesRequest buildPartial() { PlayerHandler.GetAreaLinesRequest result = new PlayerHandler.GetAreaLinesRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.GetAreaLinesRequest) return mergeFrom((PlayerHandler.GetAreaLinesRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.GetAreaLinesRequest other) { if (other == PlayerHandler.GetAreaLinesRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.GetAreaLinesRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.GetAreaLinesRequest)PlayerHandler.GetAreaLinesRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.GetAreaLinesRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class AreaLineData
/*       */     extends GeneratedMessage
/*       */     implements AreaLineDataOrBuilder
/*       */   {
/* 24919 */     private static final AreaLineData defaultInstance = new AreaLineData(true); private final UnknownFieldSet unknownFields; private AreaLineData(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private AreaLineData(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static AreaLineData getDefaultInstance() { return defaultInstance; } public AreaLineData getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private AreaLineData(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.instanceId_ = bs; break;case 16: this.bitField0_ |= 0x2; this.state_ = input.readInt32(); break;case 24: this.bitField0_ |= 0x4; this.index_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_AreaLineData_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_AreaLineData_fieldAccessorTable.ensureFieldAccessorsInitialized(AreaLineData.class, Builder.class); } public static Parser<AreaLineData> PARSER = (Parser<AreaLineData>)new AbstractParser<AreaLineData>() { public PlayerHandler.AreaLineData parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.AreaLineData(input, extensionRegistry); } }; private int bitField0_; public static final int INSTANCEID_FIELD_NUMBER = 1; private Object instanceId_; public static final int STATE_FIELD_NUMBER = 2; private int state_; public static final int INDEX_FIELD_NUMBER = 3; private int index_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<AreaLineData> getParserForType() { return PARSER; } public boolean hasInstanceId() { return ((this.bitField0_ & 0x1) == 1); } public String getInstanceId() { Object ref = this.instanceId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.instanceId_ = s;  return s; } public ByteString getInstanceIdBytes() { Object ref = this.instanceId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.instanceId_ = b; return b; }  return (ByteString)ref; } public boolean hasState() { return ((this.bitField0_ & 0x2) == 2); } public int getState() { return this.state_; } public boolean hasIndex() { return ((this.bitField0_ & 0x4) == 4); } public int getIndex() { return this.index_; } private void initFields() { this.instanceId_ = ""; this.state_ = 0; this.index_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasInstanceId()) { this.memoizedIsInitialized = 0; return false; }  if (!hasState()) { this.memoizedIsInitialized = 0; return false; }  if (!hasIndex()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getInstanceIdBytes());  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.state_);  if ((this.bitField0_ & 0x4) == 4) output.writeInt32(3, this.index_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getInstanceIdBytes());  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.state_);  if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt32Size(3, this.index_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static AreaLineData parseFrom(ByteString data) throws InvalidProtocolBufferException { return (AreaLineData)PARSER.parseFrom(data); } public static AreaLineData parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (AreaLineData)PARSER.parseFrom(data, extensionRegistry); } public static AreaLineData parseFrom(byte[] data) throws InvalidProtocolBufferException { return (AreaLineData)PARSER.parseFrom(data); } public static AreaLineData parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (AreaLineData)PARSER.parseFrom(data, extensionRegistry); } public static AreaLineData parseFrom(InputStream input) throws IOException { return (AreaLineData)PARSER.parseFrom(input); } public static AreaLineData parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (AreaLineData)PARSER.parseFrom(input, extensionRegistry); } public static AreaLineData parseDelimitedFrom(InputStream input) throws IOException { return (AreaLineData)PARSER.parseDelimitedFrom(input); } public static AreaLineData parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (AreaLineData)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static AreaLineData parseFrom(CodedInputStream input) throws IOException { return (AreaLineData)PARSER.parseFrom(input); } public static AreaLineData parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (AreaLineData)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(AreaLineData prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.AreaLineDataOrBuilder {
/* 24920 */       private int bitField0_; private Object instanceId_; private int state_; private int index_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_AreaLineData_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_AreaLineData_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.AreaLineData.class, Builder.class); } private Builder() { this.instanceId_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.instanceId_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.AreaLineData.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.instanceId_ = ""; this.bitField0_ &= 0xFFFFFFFE; this.state_ = 0; this.bitField0_ &= 0xFFFFFFFD; this.index_ = 0; this.bitField0_ &= 0xFFFFFFFB; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_AreaLineData_descriptor; } public PlayerHandler.AreaLineData getDefaultInstanceForType() { return PlayerHandler.AreaLineData.getDefaultInstance(); } public PlayerHandler.AreaLineData build() { PlayerHandler.AreaLineData result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.AreaLineData buildPartial() { PlayerHandler.AreaLineData result = new PlayerHandler.AreaLineData(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.instanceId_ = this.instanceId_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.state_ = this.state_; if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;  result.index_ = this.index_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.AreaLineData) return mergeFrom((PlayerHandler.AreaLineData)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.AreaLineData other) { if (other == PlayerHandler.AreaLineData.getDefaultInstance()) return this;  if (other.hasInstanceId()) { this.bitField0_ |= 0x1; this.instanceId_ = other.instanceId_; onChanged(); }  if (other.hasState()) setState(other.getState());  if (other.hasIndex()) setIndex(other.getIndex());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasInstanceId()) return false;  if (!hasState()) return false;  if (!hasIndex()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.AreaLineData parsedMessage = null; try { parsedMessage = (PlayerHandler.AreaLineData)PlayerHandler.AreaLineData.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.AreaLineData)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasInstanceId() { return ((this.bitField0_ & 0x1) == 1); } public String getInstanceId() { Object ref = this.instanceId_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.instanceId_ = s;  return s; }  return (String)ref; } public ByteString getInstanceIdBytes() { Object ref = this.instanceId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.instanceId_ = b; return b; }  return (ByteString)ref; } public Builder setInstanceId(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.instanceId_ = value; onChanged(); return this; } public Builder clearInstanceId() { this.bitField0_ &= 0xFFFFFFFE; this.instanceId_ = PlayerHandler.AreaLineData.getDefaultInstance().getInstanceId(); onChanged(); return this; } public Builder setInstanceIdBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.instanceId_ = value; onChanged(); return this; } public boolean hasState() { return ((this.bitField0_ & 0x2) == 2); } public int getState() { return this.state_; } public Builder setState(int value) { this.bitField0_ |= 0x2; this.state_ = value; onChanged(); return this; } public Builder clearState() { this.bitField0_ &= 0xFFFFFFFD; this.state_ = 0; onChanged(); return this; } public boolean hasIndex() { return ((this.bitField0_ & 0x4) == 4); } public int getIndex() { return this.index_; } public Builder setIndex(int value) { this.bitField0_ |= 0x4; this.index_ = value; onChanged(); return this; } public Builder clearIndex() { this.bitField0_ &= 0xFFFFFFFB; this.index_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class GetAreaLinesResponse
/*       */     extends GeneratedMessage
/*       */     implements GetAreaLinesResponseOrBuilder
/*       */   {
/* 25853 */     private static final GetAreaLinesResponse defaultInstance = new GetAreaLinesResponse(true); private final UnknownFieldSet unknownFields; private GetAreaLinesResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private GetAreaLinesResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static GetAreaLinesResponse getDefaultInstance() { return defaultInstance; } public GetAreaLinesResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private GetAreaLinesResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: if ((mutable_bitField0_ & 0x4) != 4) { this.s2CData_ = new ArrayList<>(); mutable_bitField0_ |= 0x4; }  this.s2CData_.add(input.readMessage(PlayerHandler.AreaLineData.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x4) == 4) this.s2CData_ = Collections.unmodifiableList(this.s2CData_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_GetAreaLinesResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_GetAreaLinesResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(GetAreaLinesResponse.class, Builder.class); } public static Parser<GetAreaLinesResponse> PARSER = (Parser<GetAreaLinesResponse>)new AbstractParser<GetAreaLinesResponse>() { public PlayerHandler.GetAreaLinesResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.GetAreaLinesResponse(input, extensionRegistry); } }
/* 25854 */     ; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_DATA_FIELD_NUMBER = 3; private List<PlayerHandler.AreaLineData> s2CData_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<GetAreaLinesResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } static { defaultInstance.initFields(); }
/*       */ 
/*       */ 
/*       */     
/*       */     public List<PlayerHandler.AreaLineData> getS2CDataList() {
/*       */       return this.s2CData_;
/*       */     }
/*       */ 
/*       */     
/*       */     public List<? extends PlayerHandler.AreaLineDataOrBuilder> getS2CDataOrBuilderList() {
/*       */       return (List)this.s2CData_;
/*       */     }
/*       */ 
/*       */     
/*       */     public int getS2CDataCount() {
/*       */       return this.s2CData_.size();
/*       */     }
/*       */ 
/*       */     
/*       */     public PlayerHandler.AreaLineData getS2CData(int index) {
/*       */       return this.s2CData_.get(index);
/*       */     }
/*       */ 
/*       */     
/*       */     public PlayerHandler.AreaLineDataOrBuilder getS2CDataOrBuilder(int index) {
/*       */       return this.s2CData_.get(index);
/*       */     }
/*       */ 
/*       */     
/*       */     private void initFields() {
/*       */       this.s2CCode_ = 0;
/*       */       this.s2CMsg_ = "";
/*       */       this.s2CData_ = Collections.emptyList();
/*       */     }
/*       */ 
/*       */     
/*       */     public final boolean isInitialized() {
/*       */       byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1) {
/*       */         return true;
/*       */       }
/*       */       if (isInitialized == 0) {
/*       */         return false;
/*       */       }
/*       */       if (!hasS2CCode()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       for (int i = 0; i < getS2CDataCount(); i++) {
/*       */         if (!getS2CData(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0;
/*       */           return false;
/*       */         } 
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true;
/*       */     }
/*       */ 
/*       */     
/*       */     public void writeTo(CodedOutputStream output) throws IOException {
/*       */       getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         output.writeInt32(1, this.s2CCode_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         output.writeBytes(2, getS2CMsgBytes());
/*       */       }
/*       */       for (int i = 0; i < this.s2CData_.size(); i++) {
/*       */         output.writeMessage(3, (MessageLite)this.s2CData_.get(i));
/*       */       }
/*       */       getUnknownFields().writeTo(output);
/*       */     }
/*       */ 
/*       */     
/*       */     public int getSerializedSize() {
/*       */       int size = this.memoizedSerializedSize;
/*       */       if (size != -1) {
/*       */         return size;
/*       */       }
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
/*       */       }
/*       */       for (int i = 0; i < this.s2CData_.size(); i++) {
/*       */         size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.s2CData_.get(i));
/*       */       }
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size;
/*       */     }
/*       */ 
/*       */     
/*       */     protected Object writeReplace() throws ObjectStreamException {
/*       */       return super.writeReplace();
/*       */     }
/*       */ 
/*       */     
/*       */     public static GetAreaLinesResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
/*       */       return (GetAreaLinesResponse)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */     
/*       */     public static GetAreaLinesResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (GetAreaLinesResponse)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */     
/*       */     public static GetAreaLinesResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
/*       */       return (GetAreaLinesResponse)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */     
/*       */     public static GetAreaLinesResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (GetAreaLinesResponse)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */     
/*       */     public static GetAreaLinesResponse parseFrom(InputStream input) throws IOException {
/*       */       return (GetAreaLinesResponse)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */     
/*       */     public static GetAreaLinesResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (GetAreaLinesResponse)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */     
/*       */     public static GetAreaLinesResponse parseDelimitedFrom(InputStream input) throws IOException {
/*       */       return (GetAreaLinesResponse)PARSER.parseDelimitedFrom(input);
/*       */     }
/*       */ 
/*       */     
/*       */     public static GetAreaLinesResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (GetAreaLinesResponse)PARSER.parseDelimitedFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */     
/*       */     public static GetAreaLinesResponse parseFrom(CodedInputStream input) throws IOException {
/*       */       return (GetAreaLinesResponse)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */     
/*       */     public static GetAreaLinesResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (GetAreaLinesResponse)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */     
/*       */     public static Builder newBuilder() {
/*       */       return Builder.create();
/*       */     }
/*       */     
/*       */     public Builder newBuilderForType() {
/*       */       return newBuilder();
/*       */     }
/*       */     
/*       */     public static Builder newBuilder(GetAreaLinesResponse prototype) {
/*       */       return newBuilder().mergeFrom(prototype);
/*       */     }
/*       */     
/*       */     public Builder toBuilder() {
/*       */       return newBuilder(this);
/*       */     }
/*       */     
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
/*       */       Builder builder = new Builder(parent);
/*       */       return builder;
/*       */     }
/*       */     
/*       */     public static final class Builder
/*       */       extends GeneratedMessage.Builder<Builder>
/*       */       implements PlayerHandler.GetAreaLinesResponseOrBuilder
/*       */     {
/*       */       private int bitField0_;
/*       */       private int s2CCode_;
/*       */       private Object s2CMsg_;
/*       */       private List<PlayerHandler.AreaLineData> s2CData_;
/*       */       private RepeatedFieldBuilder<PlayerHandler.AreaLineData, PlayerHandler.AreaLineData.Builder, PlayerHandler.AreaLineDataOrBuilder> s2CDataBuilder_;
/*       */       
/*       */       public static final Descriptors.Descriptor getDescriptor() {
/*       */         return PlayerHandler.internal_static_pomelo_area_GetAreaLinesResponse_descriptor;
/*       */       }
/*       */       
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */         return PlayerHandler.internal_static_pomelo_area_GetAreaLinesResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.GetAreaLinesResponse.class, Builder.class);
/*       */       }
/*       */       
/*       */       private Builder() {
/*       */         this.s2CMsg_ = "";
/*       */         this.s2CData_ = Collections.emptyList();
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */       
/*       */       private Builder(GeneratedMessage.BuilderParent parent) {
/*       */         super(parent);
/*       */         this.s2CMsg_ = "";
/*       */         this.s2CData_ = Collections.emptyList();
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */       
/*       */       private void maybeForceBuilderInitialization() {
/*       */         if (PlayerHandler.GetAreaLinesResponse.alwaysUseFieldBuilders) {
/*       */           getS2CDataFieldBuilder();
/*       */         }
/*       */       }
/*       */       
/*       */       private static Builder create() {
/*       */         return new Builder();
/*       */       }
/*       */       
/*       */       public Builder clear() {
/*       */         super.clear();
/*       */         this.s2CCode_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CMsg_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           this.s2CData_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFFB;
/*       */         } else {
/*       */           this.s2CDataBuilder_.clear();
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clone() {
/*       */         return create().mergeFrom(buildPartial());
/*       */       }
/*       */       
/*       */       public Descriptors.Descriptor getDescriptorForType() {
/*       */         return PlayerHandler.internal_static_pomelo_area_GetAreaLinesResponse_descriptor;
/*       */       }
/*       */       
/*       */       public PlayerHandler.GetAreaLinesResponse getDefaultInstanceForType() {
/*       */         return PlayerHandler.GetAreaLinesResponse.getDefaultInstance();
/*       */       }
/*       */       
/*       */       public PlayerHandler.GetAreaLinesResponse build() {
/*       */         PlayerHandler.GetAreaLinesResponse result = buildPartial();
/*       */         if (!result.isInitialized()) {
/*       */           throw newUninitializedMessageException(result);
/*       */         }
/*       */         return result;
/*       */       }
/*       */       
/*       */       public PlayerHandler.GetAreaLinesResponse buildPartial() {
/*       */         PlayerHandler.GetAreaLinesResponse result = new PlayerHandler.GetAreaLinesResponse(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1) {
/*       */           to_bitField0_ |= 0x1;
/*       */         }
/*       */         result.s2CCode_ = this.s2CCode_;
/*       */         if ((from_bitField0_ & 0x2) == 2) {
/*       */           to_bitField0_ |= 0x2;
/*       */         }
/*       */         result.s2CMsg_ = this.s2CMsg_;
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x4) == 4) {
/*       */             this.s2CData_ = Collections.unmodifiableList(this.s2CData_);
/*       */             this.bitField0_ &= 0xFFFFFFFB;
/*       */           } 
/*       */           result.s2CData_ = this.s2CData_;
/*       */         } else {
/*       */           result.s2CData_ = this.s2CDataBuilder_.build();
/*       */         } 
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result;
/*       */       }
/*       */       
/*       */       public Builder mergeFrom(Message other) {
/*       */         if (other instanceof PlayerHandler.GetAreaLinesResponse) {
/*       */           return mergeFrom((PlayerHandler.GetAreaLinesResponse)other);
/*       */         }
/*       */         super.mergeFrom(other);
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder mergeFrom(PlayerHandler.GetAreaLinesResponse other) {
/*       */         if (other == PlayerHandler.GetAreaLinesResponse.getDefaultInstance()) {
/*       */           return this;
/*       */         }
/*       */         if (other.hasS2CCode()) {
/*       */           setS2CCode(other.getS2CCode());
/*       */         }
/*       */         if (other.hasS2CMsg()) {
/*       */           this.bitField0_ |= 0x2;
/*       */           this.s2CMsg_ = other.s2CMsg_;
/*       */           onChanged();
/*       */         } 
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           if (!other.s2CData_.isEmpty()) {
/*       */             if (this.s2CData_.isEmpty()) {
/*       */               this.s2CData_ = other.s2CData_;
/*       */               this.bitField0_ &= 0xFFFFFFFB;
/*       */             } else {
/*       */               ensureS2CDataIsMutable();
/*       */               this.s2CData_.addAll(other.s2CData_);
/*       */             } 
/*       */             onChanged();
/*       */           } 
/*       */         } else if (!other.s2CData_.isEmpty()) {
/*       */           if (this.s2CDataBuilder_.isEmpty()) {
/*       */             this.s2CDataBuilder_.dispose();
/*       */             this.s2CDataBuilder_ = null;
/*       */             this.s2CData_ = other.s2CData_;
/*       */             this.bitField0_ &= 0xFFFFFFFB;
/*       */             this.s2CDataBuilder_ = PlayerHandler.GetAreaLinesResponse.alwaysUseFieldBuilders ? getS2CDataFieldBuilder() : null;
/*       */           } else {
/*       */             this.s2CDataBuilder_.addAllMessages(other.s2CData_);
/*       */           } 
/*       */         } 
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this;
/*       */       }
/*       */       
/*       */       public final boolean isInitialized() {
/*       */         if (!hasS2CCode()) {
/*       */           return false;
/*       */         }
/*       */         for (int i = 0; i < getS2CDataCount(); i++) {
/*       */           if (!getS2CData(i).isInitialized()) {
/*       */             return false;
/*       */           }
/*       */         } 
/*       */         return true;
/*       */       }
/*       */       
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */         PlayerHandler.GetAreaLinesResponse parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (PlayerHandler.GetAreaLinesResponse)PlayerHandler.GetAreaLinesResponse.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (PlayerHandler.GetAreaLinesResponse)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null) {
/*       */             mergeFrom(parsedMessage);
/*       */           }
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public boolean hasS2CCode() {
/*       */         return ((this.bitField0_ & 0x1) == 1);
/*       */       }
/*       */       
/*       */       public int getS2CCode() {
/*       */         return this.s2CCode_;
/*       */       }
/*       */       
/*       */       public Builder setS2CCode(int value) {
/*       */         this.bitField0_ |= 0x1;
/*       */         this.s2CCode_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearS2CCode() {
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CCode_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public boolean hasS2CMsg() {
/*       */         return ((this.bitField0_ & 0x2) == 2);
/*       */       }
/*       */       
/*       */       public String getS2CMsg() {
/*       */         Object ref = this.s2CMsg_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8()) {
/*       */             this.s2CMsg_ = s;
/*       */           }
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */       
/*       */       public ByteString getS2CMsgBytes() {
/*       */         Object ref = this.s2CMsg_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CMsg_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */       
/*       */       public Builder setS2CMsg(String value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearS2CMsg() {
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.s2CMsg_ = PlayerHandler.GetAreaLinesResponse.getDefaultInstance().getS2CMsg();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder setS2CMsgBytes(ByteString value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       private void ensureS2CDataIsMutable() {
/*       */         if ((this.bitField0_ & 0x4) != 4) {
/*       */           this.s2CData_ = new ArrayList<>(this.s2CData_);
/*       */           this.bitField0_ |= 0x4;
/*       */         } 
/*       */       }
/*       */       
/*       */       public List<PlayerHandler.AreaLineData> getS2CDataList() {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           return Collections.unmodifiableList(this.s2CData_);
/*       */         }
/*       */         return this.s2CDataBuilder_.getMessageList();
/*       */       }
/*       */       
/*       */       public int getS2CDataCount() {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           return this.s2CData_.size();
/*       */         }
/*       */         return this.s2CDataBuilder_.getCount();
/*       */       }
/*       */       
/*       */       public PlayerHandler.AreaLineData getS2CData(int index) {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           return this.s2CData_.get(index);
/*       */         }
/*       */         return (PlayerHandler.AreaLineData)this.s2CDataBuilder_.getMessage(index);
/*       */       }
/*       */       
/*       */       public Builder setS2CData(int index, PlayerHandler.AreaLineData value) {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           if (value == null) {
/*       */             throw new NullPointerException();
/*       */           }
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.setMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder setS2CData(int index, PlayerHandler.AreaLineData.Builder builderForValue) {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.setMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder addS2CData(PlayerHandler.AreaLineData value) {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           if (value == null) {
/*       */             throw new NullPointerException();
/*       */           }
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.addMessage(value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder addS2CData(int index, PlayerHandler.AreaLineData value) {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           if (value == null) {
/*       */             throw new NullPointerException();
/*       */           }
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.addMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder addS2CData(PlayerHandler.AreaLineData.Builder builderForValue) {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.addMessage(builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder addS2CData(int index, PlayerHandler.AreaLineData.Builder builderForValue) {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.addMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder addAllS2CData(Iterable<? extends PlayerHandler.AreaLineData> values) {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           ensureS2CDataIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.s2CData_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearS2CData() {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           this.s2CData_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFFB;
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.clear();
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder removeS2CData(int index) {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.remove(index);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public PlayerHandler.AreaLineData.Builder getS2CDataBuilder(int index) {
/*       */         return (PlayerHandler.AreaLineData.Builder)getS2CDataFieldBuilder().getBuilder(index);
/*       */       }
/*       */       
/*       */       public PlayerHandler.AreaLineDataOrBuilder getS2CDataOrBuilder(int index) {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           return this.s2CData_.get(index);
/*       */         }
/*       */         return (PlayerHandler.AreaLineDataOrBuilder)this.s2CDataBuilder_.getMessageOrBuilder(index);
/*       */       }
/*       */       
/*       */       public List<? extends PlayerHandler.AreaLineDataOrBuilder> getS2CDataOrBuilderList() {
/*       */         if (this.s2CDataBuilder_ != null) {
/*       */           return this.s2CDataBuilder_.getMessageOrBuilderList();
/*       */         }
/*       */         return Collections.unmodifiableList((List)this.s2CData_);
/*       */       }
/*       */       
/*       */       public PlayerHandler.AreaLineData.Builder addS2CDataBuilder() {
/*       */         return (PlayerHandler.AreaLineData.Builder)getS2CDataFieldBuilder().addBuilder(PlayerHandler.AreaLineData.getDefaultInstance());
/*       */       }
/*       */       
/*       */       public PlayerHandler.AreaLineData.Builder addS2CDataBuilder(int index) {
/*       */         return (PlayerHandler.AreaLineData.Builder)getS2CDataFieldBuilder().addBuilder(index, PlayerHandler.AreaLineData.getDefaultInstance());
/*       */       }
/*       */       
/*       */       public List<PlayerHandler.AreaLineData.Builder> getS2CDataBuilderList() {
/*       */         return getS2CDataFieldBuilder().getBuilderList();
/*       */       }
/*       */       
/*       */       private RepeatedFieldBuilder<PlayerHandler.AreaLineData, PlayerHandler.AreaLineData.Builder, PlayerHandler.AreaLineDataOrBuilder> getS2CDataFieldBuilder() {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           this.s2CDataBuilder_ = new RepeatedFieldBuilder(this.s2CData_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean());
/*       */           this.s2CData_ = null;
/*       */         } 
/*       */         return this.s2CDataBuilder_;
/*       */       }
/*       */     }
/*       */   }
/*       */   
/*       */   public static final class LookUpOtherPlayerRequest
/*       */     extends GeneratedMessage
/*       */     implements LookUpOtherPlayerRequestOrBuilder
/*       */   {
/* 26455 */     private static final LookUpOtherPlayerRequest defaultInstance = new LookUpOtherPlayerRequest(true); private final UnknownFieldSet unknownFields; private LookUpOtherPlayerRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private LookUpOtherPlayerRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static LookUpOtherPlayerRequest getDefaultInstance() { return defaultInstance; } public LookUpOtherPlayerRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private LookUpOtherPlayerRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2SPlayerId_ = bs; break;case 16: this.bitField0_ |= 0x2; this.c2SType_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_LookUpOtherPlayerRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_LookUpOtherPlayerRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(LookUpOtherPlayerRequest.class, Builder.class); } public static Parser<LookUpOtherPlayerRequest> PARSER = (Parser<LookUpOtherPlayerRequest>)new AbstractParser<LookUpOtherPlayerRequest>() { public PlayerHandler.LookUpOtherPlayerRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.LookUpOtherPlayerRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_PLAYERID_FIELD_NUMBER = 1; private Object c2SPlayerId_; public static final int C2S_TYPE_FIELD_NUMBER = 2; private int c2SType_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<LookUpOtherPlayerRequest> getParserForType() { return PARSER; } public boolean hasC2SPlayerId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SPlayerId() { Object ref = this.c2SPlayerId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SPlayerId_ = s;  return s; } public ByteString getC2SPlayerIdBytes() { Object ref = this.c2SPlayerId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SPlayerId_ = b; return b; }  return (ByteString)ref; } public boolean hasC2SType() { return ((this.bitField0_ & 0x2) == 2); } public int getC2SType() { return this.c2SType_; } private void initFields() { this.c2SPlayerId_ = ""; this.c2SType_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SPlayerId()) { this.memoizedIsInitialized = 0; return false; }  if (!hasC2SType()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SPlayerIdBytes());  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.c2SType_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SPlayerIdBytes());  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.c2SType_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static LookUpOtherPlayerRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (LookUpOtherPlayerRequest)PARSER.parseFrom(data); } public static LookUpOtherPlayerRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (LookUpOtherPlayerRequest)PARSER.parseFrom(data, extensionRegistry); } public static LookUpOtherPlayerRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (LookUpOtherPlayerRequest)PARSER.parseFrom(data); } public static LookUpOtherPlayerRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (LookUpOtherPlayerRequest)PARSER.parseFrom(data, extensionRegistry); } public static LookUpOtherPlayerRequest parseFrom(InputStream input) throws IOException { return (LookUpOtherPlayerRequest)PARSER.parseFrom(input); } public static LookUpOtherPlayerRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (LookUpOtherPlayerRequest)PARSER.parseFrom(input, extensionRegistry); } public static LookUpOtherPlayerRequest parseDelimitedFrom(InputStream input) throws IOException { return (LookUpOtherPlayerRequest)PARSER.parseDelimitedFrom(input); } public static LookUpOtherPlayerRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (LookUpOtherPlayerRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static LookUpOtherPlayerRequest parseFrom(CodedInputStream input) throws IOException { return (LookUpOtherPlayerRequest)PARSER.parseFrom(input); } public static LookUpOtherPlayerRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (LookUpOtherPlayerRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(LookUpOtherPlayerRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.LookUpOtherPlayerRequestOrBuilder {
/* 26456 */       private int bitField0_; private Object c2SPlayerId_; private int c2SType_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_LookUpOtherPlayerRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_LookUpOtherPlayerRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.LookUpOtherPlayerRequest.class, Builder.class); } private Builder() { this.c2SPlayerId_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SPlayerId_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.LookUpOtherPlayerRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SPlayerId_ = ""; this.bitField0_ &= 0xFFFFFFFE; this.c2SType_ = 0; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_LookUpOtherPlayerRequest_descriptor; } public PlayerHandler.LookUpOtherPlayerRequest getDefaultInstanceForType() { return PlayerHandler.LookUpOtherPlayerRequest.getDefaultInstance(); } public PlayerHandler.LookUpOtherPlayerRequest build() { PlayerHandler.LookUpOtherPlayerRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.LookUpOtherPlayerRequest buildPartial() { PlayerHandler.LookUpOtherPlayerRequest result = new PlayerHandler.LookUpOtherPlayerRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SPlayerId_ = this.c2SPlayerId_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.c2SType_ = this.c2SType_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.LookUpOtherPlayerRequest) return mergeFrom((PlayerHandler.LookUpOtherPlayerRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.LookUpOtherPlayerRequest other) { if (other == PlayerHandler.LookUpOtherPlayerRequest.getDefaultInstance()) return this;  if (other.hasC2SPlayerId()) { this.bitField0_ |= 0x1; this.c2SPlayerId_ = other.c2SPlayerId_; onChanged(); }  if (other.hasC2SType()) setC2SType(other.getC2SType());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SPlayerId()) return false;  if (!hasC2SType()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.LookUpOtherPlayerRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.LookUpOtherPlayerRequest)PlayerHandler.LookUpOtherPlayerRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.LookUpOtherPlayerRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SPlayerId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SPlayerId() { Object ref = this.c2SPlayerId_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SPlayerId_ = s;  return s; }  return (String)ref; } public ByteString getC2SPlayerIdBytes() { Object ref = this.c2SPlayerId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SPlayerId_ = b; return b; }  return (ByteString)ref; } public Builder setC2SPlayerId(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SPlayerId_ = value; onChanged(); return this; } public Builder clearC2SPlayerId() { this.bitField0_ &= 0xFFFFFFFE; this.c2SPlayerId_ = PlayerHandler.LookUpOtherPlayerRequest.getDefaultInstance().getC2SPlayerId(); onChanged(); return this; } public Builder setC2SPlayerIdBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SPlayerId_ = value; onChanged(); return this; } public boolean hasC2SType() { return ((this.bitField0_ & 0x2) == 2); } public int getC2SType() { return this.c2SType_; } public Builder setC2SType(int value) { this.bitField0_ |= 0x2; this.c2SType_ = value; onChanged(); return this; } public Builder clearC2SType() { this.bitField0_ &= 0xFFFFFFFD; this.c2SType_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class LookUpOtherPlayerResponse
/*       */     extends GeneratedMessage
/*       */     implements LookUpOtherPlayerResponseOrBuilder
/*       */   {
/* 27218 */     private static final LookUpOtherPlayerResponse defaultInstance = new LookUpOtherPlayerResponse(true); private final UnknownFieldSet unknownFields; private LookUpOtherPlayerResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private LookUpOtherPlayerResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static LookUpOtherPlayerResponse getDefaultInstance() { return defaultInstance; } public LookUpOtherPlayerResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private LookUpOtherPlayerResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; PlayerOuterClass.LookUpPlayer.Builder subBuilder; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: subBuilder = null; if ((this.bitField0_ & 0x4) == 4) subBuilder = this.s2CData_.toBuilder();  this.s2CData_ = (PlayerOuterClass.LookUpPlayer)input.readMessage(PlayerOuterClass.LookUpPlayer.PARSER, extensionRegistry); if (subBuilder != null) { subBuilder.mergeFrom(this.s2CData_); this.s2CData_ = subBuilder.buildPartial(); }  this.bitField0_ |= 0x4; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_LookUpOtherPlayerResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_LookUpOtherPlayerResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(LookUpOtherPlayerResponse.class, Builder.class); } public static Parser<LookUpOtherPlayerResponse> PARSER = (Parser<LookUpOtherPlayerResponse>)new AbstractParser<LookUpOtherPlayerResponse>() { public PlayerHandler.LookUpOtherPlayerResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.LookUpOtherPlayerResponse(input, extensionRegistry); } }
/* 27219 */     ; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_DATA_FIELD_NUMBER = 3; private PlayerOuterClass.LookUpPlayer s2CData_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<LookUpOtherPlayerResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } static { defaultInstance.initFields(); }
/*       */      public ByteString getS2CMsgBytes() {
/*       */       Object ref = this.s2CMsg_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.s2CMsg_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref;
/*       */     } public boolean hasS2CData() {
/*       */       return ((this.bitField0_ & 0x4) == 4);
/*       */     } public PlayerOuterClass.LookUpPlayer getS2CData() {
/*       */       return this.s2CData_;
/*       */     } public PlayerOuterClass.LookUpPlayerOrBuilder getS2CDataOrBuilder() {
/*       */       return (PlayerOuterClass.LookUpPlayerOrBuilder)this.s2CData_;
/*       */     } private void initFields() {
/*       */       this.s2CCode_ = 0;
/*       */       this.s2CMsg_ = "";
/*       */       this.s2CData_ = PlayerOuterClass.LookUpPlayer.getDefaultInstance();
/*       */     } public final boolean isInitialized() {
/*       */       byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1)
/*       */         return true; 
/*       */       if (isInitialized == 0)
/*       */         return false; 
/*       */       if (!hasS2CCode()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (hasS2CData() && !getS2CData().isInitialized()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true;
/*       */     } public void writeTo(CodedOutputStream output) throws IOException {
/*       */       getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1)
/*       */         output.writeInt32(1, this.s2CCode_); 
/*       */       if ((this.bitField0_ & 0x2) == 2)
/*       */         output.writeBytes(2, getS2CMsgBytes()); 
/*       */       if ((this.bitField0_ & 0x4) == 4)
/*       */         output.writeMessage(3, (MessageLite)this.s2CData_); 
/*       */       getUnknownFields().writeTo(output);
/*       */     } public int getSerializedSize() {
/*       */       int size = this.memoizedSerializedSize;
/*       */       if (size != -1)
/*       */         return size; 
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1)
/*       */         size += CodedOutputStream.computeInt32Size(1, this.s2CCode_); 
/*       */       if ((this.bitField0_ & 0x2) == 2)
/*       */         size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes()); 
/*       */       if ((this.bitField0_ & 0x4) == 4)
/*       */         size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.s2CData_); 
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size;
/*       */     } protected Object writeReplace() throws ObjectStreamException {
/*       */       return super.writeReplace();
/*       */     } public static LookUpOtherPlayerResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
/*       */       return (LookUpOtherPlayerResponse)PARSER.parseFrom(data);
/*       */     } public static LookUpOtherPlayerResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (LookUpOtherPlayerResponse)PARSER.parseFrom(data, extensionRegistry);
/*       */     } public static LookUpOtherPlayerResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
/*       */       return (LookUpOtherPlayerResponse)PARSER.parseFrom(data);
/*       */     } public static LookUpOtherPlayerResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (LookUpOtherPlayerResponse)PARSER.parseFrom(data, extensionRegistry);
/*       */     } public static LookUpOtherPlayerResponse parseFrom(InputStream input) throws IOException {
/*       */       return (LookUpOtherPlayerResponse)PARSER.parseFrom(input);
/*       */     } public static LookUpOtherPlayerResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (LookUpOtherPlayerResponse)PARSER.parseFrom(input, extensionRegistry);
/*       */     } public static LookUpOtherPlayerResponse parseDelimitedFrom(InputStream input) throws IOException {
/*       */       return (LookUpOtherPlayerResponse)PARSER.parseDelimitedFrom(input);
/*       */     } public static LookUpOtherPlayerResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (LookUpOtherPlayerResponse)PARSER.parseDelimitedFrom(input, extensionRegistry);
/*       */     } public static LookUpOtherPlayerResponse parseFrom(CodedInputStream input) throws IOException {
/*       */       return (LookUpOtherPlayerResponse)PARSER.parseFrom(input);
/*       */     } public static LookUpOtherPlayerResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (LookUpOtherPlayerResponse)PARSER.parseFrom(input, extensionRegistry);
/*       */     } public static Builder newBuilder() {
/*       */       return Builder.create();
/*       */     } public Builder newBuilderForType() {
/*       */       return newBuilder();
/*       */     } public static Builder newBuilder(LookUpOtherPlayerResponse prototype) {
/*       */       return newBuilder().mergeFrom(prototype);
/*       */     } public Builder toBuilder() {
/*       */       return newBuilder(this);
/*       */     } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
/*       */       Builder builder = new Builder(parent);
/*       */       return builder;
/*       */     } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.LookUpOtherPlayerResponseOrBuilder { private int bitField0_; private int s2CCode_; private Object s2CMsg_; private PlayerOuterClass.LookUpPlayer s2CData_; private SingleFieldBuilder<PlayerOuterClass.LookUpPlayer, PlayerOuterClass.LookUpPlayer.Builder, PlayerOuterClass.LookUpPlayerOrBuilder> s2CDataBuilder_; public static final Descriptors.Descriptor getDescriptor() {
/*       */         return PlayerHandler.internal_static_pomelo_area_LookUpOtherPlayerResponse_descriptor;
/*       */       } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */         return PlayerHandler.internal_static_pomelo_area_LookUpOtherPlayerResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.LookUpOtherPlayerResponse.class, Builder.class);
/*       */       } private Builder() {
/*       */         this.s2CMsg_ = "";
/*       */         this.s2CData_ = PlayerOuterClass.LookUpPlayer.getDefaultInstance();
/*       */         maybeForceBuilderInitialization();
/*       */       } private Builder(GeneratedMessage.BuilderParent parent) {
/*       */         super(parent);
/*       */         this.s2CMsg_ = "";
/*       */         this.s2CData_ = PlayerOuterClass.LookUpPlayer.getDefaultInstance();
/*       */         maybeForceBuilderInitialization();
/*       */       } private void maybeForceBuilderInitialization() {
/*       */         if (PlayerHandler.LookUpOtherPlayerResponse.alwaysUseFieldBuilders)
/*       */           getS2CDataFieldBuilder(); 
/*       */       } private static Builder create() {
/*       */         return new Builder();
/*       */       } public Builder clear() {
/*       */         super.clear();
/*       */         this.s2CCode_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CMsg_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           this.s2CData_ = PlayerOuterClass.LookUpPlayer.getDefaultInstance();
/*       */         } else {
/*       */           this.s2CDataBuilder_.clear();
/*       */         } 
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         return this;
/*       */       } public Builder clone() {
/*       */         return create().mergeFrom(buildPartial());
/*       */       } public Descriptors.Descriptor getDescriptorForType() {
/*       */         return PlayerHandler.internal_static_pomelo_area_LookUpOtherPlayerResponse_descriptor;
/*       */       } public PlayerHandler.LookUpOtherPlayerResponse getDefaultInstanceForType() {
/*       */         return PlayerHandler.LookUpOtherPlayerResponse.getDefaultInstance();
/*       */       } public PlayerHandler.LookUpOtherPlayerResponse build() {
/*       */         PlayerHandler.LookUpOtherPlayerResponse result = buildPartial();
/*       */         if (!result.isInitialized())
/*       */           throw newUninitializedMessageException(result); 
/*       */         return result;
/*       */       } public PlayerHandler.LookUpOtherPlayerResponse buildPartial() {
/*       */         PlayerHandler.LookUpOtherPlayerResponse result = new PlayerHandler.LookUpOtherPlayerResponse(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1)
/*       */           to_bitField0_ |= 0x1; 
/*       */         result.s2CCode_ = this.s2CCode_;
/*       */         if ((from_bitField0_ & 0x2) == 2)
/*       */           to_bitField0_ |= 0x2; 
/*       */         result.s2CMsg_ = this.s2CMsg_;
/*       */         if ((from_bitField0_ & 0x4) == 4)
/*       */           to_bitField0_ |= 0x4; 
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           result.s2CData_ = this.s2CData_;
/*       */         } else {
/*       */           result.s2CData_ = (PlayerOuterClass.LookUpPlayer)this.s2CDataBuilder_.build();
/*       */         } 
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result;
/*       */       } public Builder mergeFrom(Message other) {
/*       */         if (other instanceof PlayerHandler.LookUpOtherPlayerResponse)
/*       */           return mergeFrom((PlayerHandler.LookUpOtherPlayerResponse)other); 
/*       */         super.mergeFrom(other);
/*       */         return this;
/*       */       } public Builder mergeFrom(PlayerHandler.LookUpOtherPlayerResponse other) {
/*       */         if (other == PlayerHandler.LookUpOtherPlayerResponse.getDefaultInstance())
/*       */           return this; 
/*       */         if (other.hasS2CCode())
/*       */           setS2CCode(other.getS2CCode()); 
/*       */         if (other.hasS2CMsg()) {
/*       */           this.bitField0_ |= 0x2;
/*       */           this.s2CMsg_ = other.s2CMsg_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasS2CData())
/*       */           mergeS2CData(other.getS2CData()); 
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this;
/*       */       } public final boolean isInitialized() {
/*       */         if (!hasS2CCode())
/*       */           return false; 
/*       */         if (hasS2CData() && !getS2CData().isInitialized())
/*       */           return false; 
/*       */         return true;
/*       */       } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */         PlayerHandler.LookUpOtherPlayerResponse parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (PlayerHandler.LookUpOtherPlayerResponse)PlayerHandler.LookUpOtherPlayerResponse.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (PlayerHandler.LookUpOtherPlayerResponse)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null)
/*       */             mergeFrom(parsedMessage); 
/*       */         } 
/*       */         return this;
/*       */       } public boolean hasS2CCode() {
/*       */         return ((this.bitField0_ & 0x1) == 1);
/*       */       } public int getS2CCode() {
/*       */         return this.s2CCode_;
/*       */       } public Builder setS2CCode(int value) {
/*       */         this.bitField0_ |= 0x1;
/*       */         this.s2CCode_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       } public Builder clearS2CCode() {
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CCode_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       } public boolean hasS2CMsg() {
/*       */         return ((this.bitField0_ & 0x2) == 2);
/*       */       } public String getS2CMsg() {
/*       */         Object ref = this.s2CMsg_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.s2CMsg_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       } public ByteString getS2CMsgBytes() {
/*       */         Object ref = this.s2CMsg_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CMsg_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       } public Builder setS2CMsg(String value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       } public Builder clearS2CMsg() {
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.s2CMsg_ = PlayerHandler.LookUpOtherPlayerResponse.getDefaultInstance().getS2CMsg();
/*       */         onChanged();
/*       */         return this;
/*       */       } public Builder setS2CMsgBytes(ByteString value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       } public boolean hasS2CData() {
/*       */         return ((this.bitField0_ & 0x4) == 4);
/*       */       } public PlayerOuterClass.LookUpPlayer getS2CData() {
/*       */         if (this.s2CDataBuilder_ == null)
/*       */           return this.s2CData_; 
/*       */         return (PlayerOuterClass.LookUpPlayer)this.s2CDataBuilder_.getMessage();
/*       */       } public Builder setS2CData(PlayerOuterClass.LookUpPlayer value) {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           this.s2CData_ = value;
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.setMessage((GeneratedMessage)value);
/*       */         } 
/*       */         this.bitField0_ |= 0x4;
/*       */         return this;
/*       */       }
/*       */       public Builder setS2CData(PlayerOuterClass.LookUpPlayer.Builder builderForValue) {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           this.s2CData_ = builderForValue.build();
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.setMessage((GeneratedMessage)builderForValue.build());
/*       */         } 
/*       */         this.bitField0_ |= 0x4;
/*       */         return this;
/*       */       }
/*       */       public Builder mergeS2CData(PlayerOuterClass.LookUpPlayer value) {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x4) == 4 && this.s2CData_ != PlayerOuterClass.LookUpPlayer.getDefaultInstance()) {
/*       */             this.s2CData_ = PlayerOuterClass.LookUpPlayer.newBuilder(this.s2CData_).mergeFrom(value).buildPartial();
/*       */           } else {
/*       */             this.s2CData_ = value;
/*       */           } 
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.mergeFrom((GeneratedMessage)value);
/*       */         } 
/*       */         this.bitField0_ |= 0x4;
/*       */         return this;
/*       */       }
/*       */       public Builder clearS2CData() {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           this.s2CData_ = PlayerOuterClass.LookUpPlayer.getDefaultInstance();
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.clear();
/*       */         } 
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         return this;
/*       */       }
/*       */       public PlayerOuterClass.LookUpPlayer.Builder getS2CDataBuilder() {
/*       */         this.bitField0_ |= 0x4;
/*       */         onChanged();
/*       */         return (PlayerOuterClass.LookUpPlayer.Builder)getS2CDataFieldBuilder().getBuilder();
/*       */       }
/*       */       public PlayerOuterClass.LookUpPlayerOrBuilder getS2CDataOrBuilder() {
/*       */         if (this.s2CDataBuilder_ != null)
/*       */           return (PlayerOuterClass.LookUpPlayerOrBuilder)this.s2CDataBuilder_.getMessageOrBuilder(); 
/*       */         return (PlayerOuterClass.LookUpPlayerOrBuilder)this.s2CData_;
/*       */       }
/*       */       private SingleFieldBuilder<PlayerOuterClass.LookUpPlayer, PlayerOuterClass.LookUpPlayer.Builder, PlayerOuterClass.LookUpPlayerOrBuilder> getS2CDataFieldBuilder() {
/*       */         if (this.s2CDataBuilder_ == null) {
/*       */           this.s2CDataBuilder_ = new SingleFieldBuilder((GeneratedMessage)getS2CData(), getParentForChildren(), isClean());
/*       */           this.s2CData_ = null;
/*       */         } 
/*       */         return this.s2CDataBuilder_;
/*       */       } } }
/* 27531 */   public static final class AgreeRebirthRequest extends GeneratedMessage implements AgreeRebirthRequestOrBuilder { private static final AgreeRebirthRequest defaultInstance = new AgreeRebirthRequest(true); private final UnknownFieldSet unknownFields; private AgreeRebirthRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private AgreeRebirthRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static AgreeRebirthRequest getDefaultInstance() { return defaultInstance; } public AgreeRebirthRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private AgreeRebirthRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_AgreeRebirthRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_AgreeRebirthRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(AgreeRebirthRequest.class, Builder.class); } public static Parser<AgreeRebirthRequest> PARSER = (Parser<AgreeRebirthRequest>)new AbstractParser<AgreeRebirthRequest>() { public PlayerHandler.AgreeRebirthRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.AgreeRebirthRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<AgreeRebirthRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static AgreeRebirthRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (AgreeRebirthRequest)PARSER.parseFrom(data); } public static AgreeRebirthRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (AgreeRebirthRequest)PARSER.parseFrom(data, extensionRegistry); } public static AgreeRebirthRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (AgreeRebirthRequest)PARSER.parseFrom(data); } public static AgreeRebirthRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (AgreeRebirthRequest)PARSER.parseFrom(data, extensionRegistry); } public static AgreeRebirthRequest parseFrom(InputStream input) throws IOException { return (AgreeRebirthRequest)PARSER.parseFrom(input); } public static AgreeRebirthRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (AgreeRebirthRequest)PARSER.parseFrom(input, extensionRegistry); } public static AgreeRebirthRequest parseDelimitedFrom(InputStream input) throws IOException { return (AgreeRebirthRequest)PARSER.parseDelimitedFrom(input); } public static AgreeRebirthRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (AgreeRebirthRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static AgreeRebirthRequest parseFrom(CodedInputStream input) throws IOException { return (AgreeRebirthRequest)PARSER.parseFrom(input); } public static AgreeRebirthRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (AgreeRebirthRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(AgreeRebirthRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.AgreeRebirthRequestOrBuilder {
/* 27532 */       public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_AgreeRebirthRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_AgreeRebirthRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.AgreeRebirthRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.AgreeRebirthRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_AgreeRebirthRequest_descriptor; } public PlayerHandler.AgreeRebirthRequest getDefaultInstanceForType() { return PlayerHandler.AgreeRebirthRequest.getDefaultInstance(); } public PlayerHandler.AgreeRebirthRequest build() { PlayerHandler.AgreeRebirthRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.AgreeRebirthRequest buildPartial() { PlayerHandler.AgreeRebirthRequest result = new PlayerHandler.AgreeRebirthRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.AgreeRebirthRequest) return mergeFrom((PlayerHandler.AgreeRebirthRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.AgreeRebirthRequest other) { if (other == PlayerHandler.AgreeRebirthRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.AgreeRebirthRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.AgreeRebirthRequest)PlayerHandler.AgreeRebirthRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.AgreeRebirthRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */      }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class AgreeRebirthResponse
/*       */     extends GeneratedMessage
/*       */     implements AgreeRebirthResponseOrBuilder
/*       */   {
/* 28093 */     private static final AgreeRebirthResponse defaultInstance = new AgreeRebirthResponse(true); private final UnknownFieldSet unknownFields; private AgreeRebirthResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private AgreeRebirthResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static AgreeRebirthResponse getDefaultInstance() { return defaultInstance; } public AgreeRebirthResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private AgreeRebirthResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_AgreeRebirthResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_AgreeRebirthResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(AgreeRebirthResponse.class, Builder.class); } public static Parser<AgreeRebirthResponse> PARSER = (Parser<AgreeRebirthResponse>)new AbstractParser<AgreeRebirthResponse>() { public PlayerHandler.AgreeRebirthResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.AgreeRebirthResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<AgreeRebirthResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static AgreeRebirthResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (AgreeRebirthResponse)PARSER.parseFrom(data); } public static AgreeRebirthResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (AgreeRebirthResponse)PARSER.parseFrom(data, extensionRegistry); } public static AgreeRebirthResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (AgreeRebirthResponse)PARSER.parseFrom(data); } public static AgreeRebirthResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (AgreeRebirthResponse)PARSER.parseFrom(data, extensionRegistry); } public static AgreeRebirthResponse parseFrom(InputStream input) throws IOException { return (AgreeRebirthResponse)PARSER.parseFrom(input); } public static AgreeRebirthResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (AgreeRebirthResponse)PARSER.parseFrom(input, extensionRegistry); } public static AgreeRebirthResponse parseDelimitedFrom(InputStream input) throws IOException { return (AgreeRebirthResponse)PARSER.parseDelimitedFrom(input); } public static AgreeRebirthResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (AgreeRebirthResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static AgreeRebirthResponse parseFrom(CodedInputStream input) throws IOException { return (AgreeRebirthResponse)PARSER.parseFrom(input); } public static AgreeRebirthResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (AgreeRebirthResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(AgreeRebirthResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.AgreeRebirthResponseOrBuilder {
/* 28094 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_AgreeRebirthResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_AgreeRebirthResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.AgreeRebirthResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.AgreeRebirthResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_AgreeRebirthResponse_descriptor; } public PlayerHandler.AgreeRebirthResponse getDefaultInstanceForType() { return PlayerHandler.AgreeRebirthResponse.getDefaultInstance(); } public PlayerHandler.AgreeRebirthResponse build() { PlayerHandler.AgreeRebirthResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.AgreeRebirthResponse buildPartial() { PlayerHandler.AgreeRebirthResponse result = new PlayerHandler.AgreeRebirthResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.AgreeRebirthResponse) return mergeFrom((PlayerHandler.AgreeRebirthResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.AgreeRebirthResponse other) { if (other == PlayerHandler.AgreeRebirthResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.AgreeRebirthResponse parsedMessage = null; try { parsedMessage = (PlayerHandler.AgreeRebirthResponse)PlayerHandler.AgreeRebirthResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.AgreeRebirthResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = PlayerHandler.AgreeRebirthResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class CDKRequest
/*       */     extends GeneratedMessage
/*       */     implements CDKRequestOrBuilder
/*       */   {
/* 28663 */     private static final CDKRequest defaultInstance = new CDKRequest(true); private final UnknownFieldSet unknownFields; private CDKRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private CDKRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static CDKRequest getDefaultInstance() { return defaultInstance; } public CDKRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private CDKRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2SCdk_ = bs; break;case 16: this.bitField0_ |= 0x2; this.c2SChannel_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_CDKRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_CDKRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(CDKRequest.class, Builder.class); } public static Parser<CDKRequest> PARSER = (Parser<CDKRequest>)new AbstractParser<CDKRequest>() { public PlayerHandler.CDKRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.CDKRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_CDK_FIELD_NUMBER = 1; private Object c2SCdk_; public static final int C2S_CHANNEL_FIELD_NUMBER = 2; private int c2SChannel_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<CDKRequest> getParserForType() { return PARSER; } public boolean hasC2SCdk() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SCdk() { Object ref = this.c2SCdk_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SCdk_ = s;  return s; } public ByteString getC2SCdkBytes() { Object ref = this.c2SCdk_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SCdk_ = b; return b; }  return (ByteString)ref; } public boolean hasC2SChannel() { return ((this.bitField0_ & 0x2) == 2); } public int getC2SChannel() { return this.c2SChannel_; } private void initFields() { this.c2SCdk_ = ""; this.c2SChannel_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SCdk()) { this.memoizedIsInitialized = 0; return false; }  if (!hasC2SChannel()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SCdkBytes());  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.c2SChannel_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SCdkBytes());  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.c2SChannel_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static CDKRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (CDKRequest)PARSER.parseFrom(data); } public static CDKRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (CDKRequest)PARSER.parseFrom(data, extensionRegistry); } public static CDKRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (CDKRequest)PARSER.parseFrom(data); } public static CDKRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (CDKRequest)PARSER.parseFrom(data, extensionRegistry); } public static CDKRequest parseFrom(InputStream input) throws IOException { return (CDKRequest)PARSER.parseFrom(input); } public static CDKRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (CDKRequest)PARSER.parseFrom(input, extensionRegistry); } public static CDKRequest parseDelimitedFrom(InputStream input) throws IOException { return (CDKRequest)PARSER.parseDelimitedFrom(input); } public static CDKRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (CDKRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static CDKRequest parseFrom(CodedInputStream input) throws IOException { return (CDKRequest)PARSER.parseFrom(input); } public static CDKRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (CDKRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(CDKRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.CDKRequestOrBuilder {
/* 28664 */       private int bitField0_; private Object c2SCdk_; private int c2SChannel_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_CDKRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_CDKRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.CDKRequest.class, Builder.class); } private Builder() { this.c2SCdk_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SCdk_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.CDKRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SCdk_ = ""; this.bitField0_ &= 0xFFFFFFFE; this.c2SChannel_ = 0; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_CDKRequest_descriptor; } public PlayerHandler.CDKRequest getDefaultInstanceForType() { return PlayerHandler.CDKRequest.getDefaultInstance(); } public PlayerHandler.CDKRequest build() { PlayerHandler.CDKRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.CDKRequest buildPartial() { PlayerHandler.CDKRequest result = new PlayerHandler.CDKRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SCdk_ = this.c2SCdk_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.c2SChannel_ = this.c2SChannel_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.CDKRequest) return mergeFrom((PlayerHandler.CDKRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.CDKRequest other) { if (other == PlayerHandler.CDKRequest.getDefaultInstance()) return this;  if (other.hasC2SCdk()) { this.bitField0_ |= 0x1; this.c2SCdk_ = other.c2SCdk_; onChanged(); }  if (other.hasC2SChannel()) setC2SChannel(other.getC2SChannel());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SCdk()) return false;  if (!hasC2SChannel()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.CDKRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.CDKRequest)PlayerHandler.CDKRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.CDKRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SCdk() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SCdk() { Object ref = this.c2SCdk_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SCdk_ = s;  return s; }  return (String)ref; } public ByteString getC2SCdkBytes() { Object ref = this.c2SCdk_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SCdk_ = b; return b; }  return (ByteString)ref; } public Builder setC2SCdk(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SCdk_ = value; onChanged(); return this; } public Builder clearC2SCdk() { this.bitField0_ &= 0xFFFFFFFE; this.c2SCdk_ = PlayerHandler.CDKRequest.getDefaultInstance().getC2SCdk(); onChanged(); return this; } public Builder setC2SCdkBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SCdk_ = value; onChanged(); return this; } public boolean hasC2SChannel() { return ((this.bitField0_ & 0x2) == 2); } public int getC2SChannel() { return this.c2SChannel_; } public Builder setC2SChannel(int value) { this.bitField0_ |= 0x2; this.c2SChannel_ = value; onChanged(); return this; } public Builder clearC2SChannel() { this.bitField0_ &= 0xFFFFFFFD; this.c2SChannel_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class CDKResponse
/*       */     extends GeneratedMessage
/*       */     implements CDKResponseOrBuilder
/*       */   {
/* 29225 */     private static final CDKResponse defaultInstance = new CDKResponse(true); private final UnknownFieldSet unknownFields; private CDKResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private CDKResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static CDKResponse getDefaultInstance() { return defaultInstance; } public CDKResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private CDKResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_CDKResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_CDKResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(CDKResponse.class, Builder.class); } public static Parser<CDKResponse> PARSER = (Parser<CDKResponse>)new AbstractParser<CDKResponse>() { public PlayerHandler.CDKResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.CDKResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<CDKResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static CDKResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (CDKResponse)PARSER.parseFrom(data); } public static CDKResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (CDKResponse)PARSER.parseFrom(data, extensionRegistry); } public static CDKResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (CDKResponse)PARSER.parseFrom(data); } public static CDKResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (CDKResponse)PARSER.parseFrom(data, extensionRegistry); } public static CDKResponse parseFrom(InputStream input) throws IOException { return (CDKResponse)PARSER.parseFrom(input); } public static CDKResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (CDKResponse)PARSER.parseFrom(input, extensionRegistry); } public static CDKResponse parseDelimitedFrom(InputStream input) throws IOException { return (CDKResponse)PARSER.parseDelimitedFrom(input); } public static CDKResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (CDKResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static CDKResponse parseFrom(CodedInputStream input) throws IOException { return (CDKResponse)PARSER.parseFrom(input); } public static CDKResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (CDKResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(CDKResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.CDKResponseOrBuilder {
/* 29226 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_CDKResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_CDKResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.CDKResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.CDKResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_CDKResponse_descriptor; } public PlayerHandler.CDKResponse getDefaultInstanceForType() { return PlayerHandler.CDKResponse.getDefaultInstance(); } public PlayerHandler.CDKResponse build() { PlayerHandler.CDKResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.CDKResponse buildPartial() { PlayerHandler.CDKResponse result = new PlayerHandler.CDKResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.CDKResponse) return mergeFrom((PlayerHandler.CDKResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.CDKResponse other) { if (other == PlayerHandler.CDKResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.CDKResponse parsedMessage = null; try { parsedMessage = (PlayerHandler.CDKResponse)PlayerHandler.CDKResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.CDKResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = PlayerHandler.CDKResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class TransportRequest
/*       */     extends GeneratedMessage
/*       */     implements TransportRequestOrBuilder
/*       */   {
/* 29630 */     private static final TransportRequest defaultInstance = new TransportRequest(true); private final UnknownFieldSet unknownFields; private TransportRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private TransportRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static TransportRequest getDefaultInstance() { return defaultInstance; } public TransportRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private TransportRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.c2STransportId_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_TransportRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_TransportRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TransportRequest.class, Builder.class); } public static Parser<TransportRequest> PARSER = (Parser<TransportRequest>)new AbstractParser<TransportRequest>() { public PlayerHandler.TransportRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.TransportRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_TRANSPORTID_FIELD_NUMBER = 1; private int c2STransportId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<TransportRequest> getParserForType() { return PARSER; } public boolean hasC2STransportId() { return ((this.bitField0_ & 0x1) == 1); } public int getC2STransportId() { return this.c2STransportId_; } private void initFields() { this.c2STransportId_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2STransportId()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.c2STransportId_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.c2STransportId_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static TransportRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (TransportRequest)PARSER.parseFrom(data); } public static TransportRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (TransportRequest)PARSER.parseFrom(data, extensionRegistry); } public static TransportRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (TransportRequest)PARSER.parseFrom(data); } public static TransportRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (TransportRequest)PARSER.parseFrom(data, extensionRegistry); } public static TransportRequest parseFrom(InputStream input) throws IOException { return (TransportRequest)PARSER.parseFrom(input); } public static TransportRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (TransportRequest)PARSER.parseFrom(input, extensionRegistry); } public static TransportRequest parseDelimitedFrom(InputStream input) throws IOException { return (TransportRequest)PARSER.parseDelimitedFrom(input); } public static TransportRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (TransportRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static TransportRequest parseFrom(CodedInputStream input) throws IOException { return (TransportRequest)PARSER.parseFrom(input); } public static TransportRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (TransportRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(TransportRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.TransportRequestOrBuilder {
/* 29631 */       private int bitField0_; private int c2STransportId_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_TransportRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_TransportRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.TransportRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.TransportRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2STransportId_ = 0; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_TransportRequest_descriptor; } public PlayerHandler.TransportRequest getDefaultInstanceForType() { return PlayerHandler.TransportRequest.getDefaultInstance(); } public PlayerHandler.TransportRequest build() { PlayerHandler.TransportRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.TransportRequest buildPartial() { PlayerHandler.TransportRequest result = new PlayerHandler.TransportRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2STransportId_ = this.c2STransportId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.TransportRequest) return mergeFrom((PlayerHandler.TransportRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.TransportRequest other) { if (other == PlayerHandler.TransportRequest.getDefaultInstance()) return this;  if (other.hasC2STransportId()) setC2STransportId(other.getC2STransportId());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2STransportId()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.TransportRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.TransportRequest)PlayerHandler.TransportRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.TransportRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2STransportId() { return ((this.bitField0_ & 0x1) == 1); } public int getC2STransportId() { return this.c2STransportId_; } public Builder setC2STransportId(int value) { this.bitField0_ |= 0x1; this.c2STransportId_ = value; onChanged(); return this; } public Builder clearC2STransportId() { this.bitField0_ &= 0xFFFFFFFE; this.c2STransportId_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class TransportResponse
/*       */     extends GeneratedMessage
/*       */     implements TransportResponseOrBuilder
/*       */   {
/* 30192 */     private static final TransportResponse defaultInstance = new TransportResponse(true); private final UnknownFieldSet unknownFields; private TransportResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private TransportResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static TransportResponse getDefaultInstance() { return defaultInstance; } public TransportResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private TransportResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_TransportResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_TransportResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TransportResponse.class, Builder.class); } public static Parser<TransportResponse> PARSER = (Parser<TransportResponse>)new AbstractParser<TransportResponse>() { public PlayerHandler.TransportResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.TransportResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<TransportResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static TransportResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (TransportResponse)PARSER.parseFrom(data); } public static TransportResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (TransportResponse)PARSER.parseFrom(data, extensionRegistry); } public static TransportResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (TransportResponse)PARSER.parseFrom(data); } public static TransportResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (TransportResponse)PARSER.parseFrom(data, extensionRegistry); } public static TransportResponse parseFrom(InputStream input) throws IOException { return (TransportResponse)PARSER.parseFrom(input); } public static TransportResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (TransportResponse)PARSER.parseFrom(input, extensionRegistry); } public static TransportResponse parseDelimitedFrom(InputStream input) throws IOException { return (TransportResponse)PARSER.parseDelimitedFrom(input); } public static TransportResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (TransportResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static TransportResponse parseFrom(CodedInputStream input) throws IOException { return (TransportResponse)PARSER.parseFrom(input); } public static TransportResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (TransportResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(TransportResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.TransportResponseOrBuilder {
/* 30193 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_TransportResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_TransportResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.TransportResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.TransportResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_TransportResponse_descriptor; } public PlayerHandler.TransportResponse getDefaultInstanceForType() { return PlayerHandler.TransportResponse.getDefaultInstance(); } public PlayerHandler.TransportResponse build() { PlayerHandler.TransportResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.TransportResponse buildPartial() { PlayerHandler.TransportResponse result = new PlayerHandler.TransportResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.TransportResponse) return mergeFrom((PlayerHandler.TransportResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.TransportResponse other) { if (other == PlayerHandler.TransportResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.TransportResponse parsedMessage = null; try { parsedMessage = (PlayerHandler.TransportResponse)PlayerHandler.TransportResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.TransportResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = PlayerHandler.TransportResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class CustomConfigRequest
/*       */     extends GeneratedMessage
/*       */     implements CustomConfigRequestOrBuilder
/*       */   {
/* 30841 */     private static final CustomConfigRequest defaultInstance = new CustomConfigRequest(true); private final UnknownFieldSet unknownFields; private CustomConfigRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private CustomConfigRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static CustomConfigRequest getDefaultInstance() { return defaultInstance; } public CustomConfigRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private CustomConfigRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2SKey_ = bs; break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.c2SValue_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_CustomConfigRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_CustomConfigRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(CustomConfigRequest.class, Builder.class); } public static Parser<CustomConfigRequest> PARSER = (Parser<CustomConfigRequest>)new AbstractParser<CustomConfigRequest>() { public PlayerHandler.CustomConfigRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.CustomConfigRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_KEY_FIELD_NUMBER = 1; private Object c2SKey_; public static final int C2S_VALUE_FIELD_NUMBER = 2; private Object c2SValue_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<CustomConfigRequest> getParserForType() { return PARSER; } public boolean hasC2SKey() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SKey() { Object ref = this.c2SKey_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SKey_ = s;  return s; } public ByteString getC2SKeyBytes() { Object ref = this.c2SKey_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SKey_ = b; return b; }  return (ByteString)ref; } public boolean hasC2SValue() { return ((this.bitField0_ & 0x2) == 2); } public String getC2SValue() { Object ref = this.c2SValue_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SValue_ = s;  return s; } public ByteString getC2SValueBytes() { Object ref = this.c2SValue_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SValue_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.c2SKey_ = ""; this.c2SValue_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SKey()) { this.memoizedIsInitialized = 0; return false; }  if (!hasC2SValue()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SKeyBytes());  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getC2SValueBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SKeyBytes());  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getC2SValueBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static CustomConfigRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (CustomConfigRequest)PARSER.parseFrom(data); } public static CustomConfigRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (CustomConfigRequest)PARSER.parseFrom(data, extensionRegistry); } public static CustomConfigRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (CustomConfigRequest)PARSER.parseFrom(data); } public static CustomConfigRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (CustomConfigRequest)PARSER.parseFrom(data, extensionRegistry); } public static CustomConfigRequest parseFrom(InputStream input) throws IOException { return (CustomConfigRequest)PARSER.parseFrom(input); } public static CustomConfigRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (CustomConfigRequest)PARSER.parseFrom(input, extensionRegistry); } public static CustomConfigRequest parseDelimitedFrom(InputStream input) throws IOException { return (CustomConfigRequest)PARSER.parseDelimitedFrom(input); } public static CustomConfigRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (CustomConfigRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static CustomConfigRequest parseFrom(CodedInputStream input) throws IOException { return (CustomConfigRequest)PARSER.parseFrom(input); } public static CustomConfigRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (CustomConfigRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(CustomConfigRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.CustomConfigRequestOrBuilder {
/* 30842 */       private int bitField0_; private Object c2SKey_; private Object c2SValue_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_CustomConfigRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_CustomConfigRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.CustomConfigRequest.class, Builder.class); } private Builder() { this.c2SKey_ = ""; this.c2SValue_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SKey_ = ""; this.c2SValue_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.CustomConfigRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SKey_ = ""; this.bitField0_ &= 0xFFFFFFFE; this.c2SValue_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_CustomConfigRequest_descriptor; } public PlayerHandler.CustomConfigRequest getDefaultInstanceForType() { return PlayerHandler.CustomConfigRequest.getDefaultInstance(); } public PlayerHandler.CustomConfigRequest build() { PlayerHandler.CustomConfigRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.CustomConfigRequest buildPartial() { PlayerHandler.CustomConfigRequest result = new PlayerHandler.CustomConfigRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SKey_ = this.c2SKey_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.c2SValue_ = this.c2SValue_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.CustomConfigRequest) return mergeFrom((PlayerHandler.CustomConfigRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.CustomConfigRequest other) { if (other == PlayerHandler.CustomConfigRequest.getDefaultInstance()) return this;  if (other.hasC2SKey()) { this.bitField0_ |= 0x1; this.c2SKey_ = other.c2SKey_; onChanged(); }  if (other.hasC2SValue()) { this.bitField0_ |= 0x2; this.c2SValue_ = other.c2SValue_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SKey()) return false;  if (!hasC2SValue()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.CustomConfigRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.CustomConfigRequest)PlayerHandler.CustomConfigRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.CustomConfigRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SKey() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SKey() { Object ref = this.c2SKey_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SKey_ = s;  return s; }  return (String)ref; } public ByteString getC2SKeyBytes() { Object ref = this.c2SKey_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SKey_ = b; return b; }  return (ByteString)ref; } public Builder setC2SKey(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SKey_ = value; onChanged(); return this; } public Builder clearC2SKey() { this.bitField0_ &= 0xFFFFFFFE; this.c2SKey_ = PlayerHandler.CustomConfigRequest.getDefaultInstance().getC2SKey(); onChanged(); return this; } public Builder setC2SKeyBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SKey_ = value; onChanged(); return this; } public boolean hasC2SValue() { return ((this.bitField0_ & 0x2) == 2); } public String getC2SValue() { Object ref = this.c2SValue_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SValue_ = s;  return s; }  return (String)ref; } public ByteString getC2SValueBytes() { Object ref = this.c2SValue_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SValue_ = b; return b; }  return (ByteString)ref; } public Builder setC2SValue(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.c2SValue_ = value; onChanged(); return this; } public Builder clearC2SValue() { this.bitField0_ &= 0xFFFFFFFD; this.c2SValue_ = PlayerHandler.CustomConfigRequest.getDefaultInstance().getC2SValue(); onChanged(); return this; } public Builder setC2SValueBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.c2SValue_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class CustomConfigResponse
/*       */     extends GeneratedMessage
/*       */     implements CustomConfigResponseOrBuilder
/*       */   {
/* 31403 */     private static final CustomConfigResponse defaultInstance = new CustomConfigResponse(true); private final UnknownFieldSet unknownFields; private CustomConfigResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private CustomConfigResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static CustomConfigResponse getDefaultInstance() { return defaultInstance; } public CustomConfigResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private CustomConfigResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_CustomConfigResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_CustomConfigResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(CustomConfigResponse.class, Builder.class); } public static Parser<CustomConfigResponse> PARSER = (Parser<CustomConfigResponse>)new AbstractParser<CustomConfigResponse>() { public PlayerHandler.CustomConfigResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.CustomConfigResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<CustomConfigResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static CustomConfigResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (CustomConfigResponse)PARSER.parseFrom(data); } public static CustomConfigResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (CustomConfigResponse)PARSER.parseFrom(data, extensionRegistry); } public static CustomConfigResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (CustomConfigResponse)PARSER.parseFrom(data); } public static CustomConfigResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (CustomConfigResponse)PARSER.parseFrom(data, extensionRegistry); } public static CustomConfigResponse parseFrom(InputStream input) throws IOException { return (CustomConfigResponse)PARSER.parseFrom(input); } public static CustomConfigResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (CustomConfigResponse)PARSER.parseFrom(input, extensionRegistry); } public static CustomConfigResponse parseDelimitedFrom(InputStream input) throws IOException { return (CustomConfigResponse)PARSER.parseDelimitedFrom(input); } public static CustomConfigResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (CustomConfigResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static CustomConfigResponse parseFrom(CodedInputStream input) throws IOException { return (CustomConfigResponse)PARSER.parseFrom(input); } public static CustomConfigResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (CustomConfigResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(CustomConfigResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.CustomConfigResponseOrBuilder {
/* 31404 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_CustomConfigResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_CustomConfigResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.CustomConfigResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.CustomConfigResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_CustomConfigResponse_descriptor; } public PlayerHandler.CustomConfigResponse getDefaultInstanceForType() { return PlayerHandler.CustomConfigResponse.getDefaultInstance(); } public PlayerHandler.CustomConfigResponse build() { PlayerHandler.CustomConfigResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.CustomConfigResponse buildPartial() { PlayerHandler.CustomConfigResponse result = new PlayerHandler.CustomConfigResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.CustomConfigResponse) return mergeFrom((PlayerHandler.CustomConfigResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.CustomConfigResponse other) { if (other == PlayerHandler.CustomConfigResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.CustomConfigResponse parsedMessage = null; try { parsedMessage = (PlayerHandler.CustomConfigResponse)PlayerHandler.CustomConfigResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.CustomConfigResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = PlayerHandler.CustomConfigResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class SimulateDropByTcRequest
/*       */     extends GeneratedMessage
/*       */     implements SimulateDropByTcRequestOrBuilder
/*       */   {
/* 32087 */     private static final SimulateDropByTcRequest defaultInstance = new SimulateDropByTcRequest(true); private final UnknownFieldSet unknownFields; private SimulateDropByTcRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private SimulateDropByTcRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static SimulateDropByTcRequest getDefaultInstance() { return defaultInstance; } public SimulateDropByTcRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private SimulateDropByTcRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2STcCode_ = bs; break;case 16: this.bitField0_ |= 0x2; this.c2STcCount_ = input.readInt32(); break;case 24: this.bitField0_ |= 0x4; this.c2STcLevel_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_SimulateDropByTcRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_SimulateDropByTcRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(SimulateDropByTcRequest.class, Builder.class); } public static Parser<SimulateDropByTcRequest> PARSER = (Parser<SimulateDropByTcRequest>)new AbstractParser<SimulateDropByTcRequest>() { public PlayerHandler.SimulateDropByTcRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.SimulateDropByTcRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_TCCODE_FIELD_NUMBER = 1; private Object c2STcCode_; public static final int C2S_TCCOUNT_FIELD_NUMBER = 2; private int c2STcCount_; public static final int C2S_TCLEVEL_FIELD_NUMBER = 3; private int c2STcLevel_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<SimulateDropByTcRequest> getParserForType() { return PARSER; } public boolean hasC2STcCode() { return ((this.bitField0_ & 0x1) == 1); } public String getC2STcCode() { Object ref = this.c2STcCode_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2STcCode_ = s;  return s; } public ByteString getC2STcCodeBytes() { Object ref = this.c2STcCode_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2STcCode_ = b; return b; }  return (ByteString)ref; } public boolean hasC2STcCount() { return ((this.bitField0_ & 0x2) == 2); } public int getC2STcCount() { return this.c2STcCount_; } public boolean hasC2STcLevel() { return ((this.bitField0_ & 0x4) == 4); } public int getC2STcLevel() { return this.c2STcLevel_; } private void initFields() { this.c2STcCode_ = ""; this.c2STcCount_ = 0; this.c2STcLevel_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2STcCode()) { this.memoizedIsInitialized = 0; return false; }  if (!hasC2STcCount()) { this.memoizedIsInitialized = 0; return false; }  if (!hasC2STcLevel()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2STcCodeBytes());  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.c2STcCount_);  if ((this.bitField0_ & 0x4) == 4) output.writeInt32(3, this.c2STcLevel_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2STcCodeBytes());  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.c2STcCount_);  if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt32Size(3, this.c2STcLevel_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static SimulateDropByTcRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (SimulateDropByTcRequest)PARSER.parseFrom(data); } public static SimulateDropByTcRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (SimulateDropByTcRequest)PARSER.parseFrom(data, extensionRegistry); } public static SimulateDropByTcRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (SimulateDropByTcRequest)PARSER.parseFrom(data); } public static SimulateDropByTcRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (SimulateDropByTcRequest)PARSER.parseFrom(data, extensionRegistry); } public static SimulateDropByTcRequest parseFrom(InputStream input) throws IOException { return (SimulateDropByTcRequest)PARSER.parseFrom(input); } public static SimulateDropByTcRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (SimulateDropByTcRequest)PARSER.parseFrom(input, extensionRegistry); } public static SimulateDropByTcRequest parseDelimitedFrom(InputStream input) throws IOException { return (SimulateDropByTcRequest)PARSER.parseDelimitedFrom(input); } public static SimulateDropByTcRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (SimulateDropByTcRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static SimulateDropByTcRequest parseFrom(CodedInputStream input) throws IOException { return (SimulateDropByTcRequest)PARSER.parseFrom(input); } public static SimulateDropByTcRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (SimulateDropByTcRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(SimulateDropByTcRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.SimulateDropByTcRequestOrBuilder {
/* 32088 */       private int bitField0_; private Object c2STcCode_; private int c2STcCount_; private int c2STcLevel_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_SimulateDropByTcRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_SimulateDropByTcRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.SimulateDropByTcRequest.class, Builder.class); } private Builder() { this.c2STcCode_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2STcCode_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.SimulateDropByTcRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2STcCode_ = ""; this.bitField0_ &= 0xFFFFFFFE; this.c2STcCount_ = 0; this.bitField0_ &= 0xFFFFFFFD; this.c2STcLevel_ = 0; this.bitField0_ &= 0xFFFFFFFB; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_SimulateDropByTcRequest_descriptor; } public PlayerHandler.SimulateDropByTcRequest getDefaultInstanceForType() { return PlayerHandler.SimulateDropByTcRequest.getDefaultInstance(); } public PlayerHandler.SimulateDropByTcRequest build() { PlayerHandler.SimulateDropByTcRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.SimulateDropByTcRequest buildPartial() { PlayerHandler.SimulateDropByTcRequest result = new PlayerHandler.SimulateDropByTcRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2STcCode_ = this.c2STcCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.c2STcCount_ = this.c2STcCount_; if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;  result.c2STcLevel_ = this.c2STcLevel_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.SimulateDropByTcRequest) return mergeFrom((PlayerHandler.SimulateDropByTcRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.SimulateDropByTcRequest other) { if (other == PlayerHandler.SimulateDropByTcRequest.getDefaultInstance()) return this;  if (other.hasC2STcCode()) { this.bitField0_ |= 0x1; this.c2STcCode_ = other.c2STcCode_; onChanged(); }  if (other.hasC2STcCount()) setC2STcCount(other.getC2STcCount());  if (other.hasC2STcLevel()) setC2STcLevel(other.getC2STcLevel());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2STcCode()) return false;  if (!hasC2STcCount()) return false;  if (!hasC2STcLevel()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.SimulateDropByTcRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.SimulateDropByTcRequest)PlayerHandler.SimulateDropByTcRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.SimulateDropByTcRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2STcCode() { return ((this.bitField0_ & 0x1) == 1); } public String getC2STcCode() { Object ref = this.c2STcCode_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2STcCode_ = s;  return s; }  return (String)ref; } public ByteString getC2STcCodeBytes() { Object ref = this.c2STcCode_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2STcCode_ = b; return b; }  return (ByteString)ref; } public Builder setC2STcCode(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2STcCode_ = value; onChanged(); return this; } public Builder clearC2STcCode() { this.bitField0_ &= 0xFFFFFFFE; this.c2STcCode_ = PlayerHandler.SimulateDropByTcRequest.getDefaultInstance().getC2STcCode(); onChanged(); return this; } public Builder setC2STcCodeBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2STcCode_ = value; onChanged(); return this; } public boolean hasC2STcCount() { return ((this.bitField0_ & 0x2) == 2); } public int getC2STcCount() { return this.c2STcCount_; } public Builder setC2STcCount(int value) { this.bitField0_ |= 0x2; this.c2STcCount_ = value; onChanged(); return this; } public Builder clearC2STcCount() { this.bitField0_ &= 0xFFFFFFFD; this.c2STcCount_ = 0; onChanged(); return this; } public boolean hasC2STcLevel() { return ((this.bitField0_ & 0x4) == 4); } public int getC2STcLevel() { return this.c2STcLevel_; } public Builder setC2STcLevel(int value) { this.bitField0_ |= 0x4; this.c2STcLevel_ = value; onChanged(); return this; } public Builder clearC2STcLevel() { this.bitField0_ &= 0xFFFFFFFB; this.c2STcLevel_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class SimulateDropByTcResponse
/*       */     extends GeneratedMessage
/*       */     implements SimulateDropByTcResponseOrBuilder
/*       */   {
/* 32837 */     private static final SimulateDropByTcResponse defaultInstance = new SimulateDropByTcResponse(true); private final UnknownFieldSet unknownFields; private SimulateDropByTcResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private SimulateDropByTcResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static SimulateDropByTcResponse getDefaultInstance() { return defaultInstance; } public SimulateDropByTcResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private SimulateDropByTcResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 24: this.bitField0_ |= 0x4; this.s2CRunNum_ = input.readInt32(); break;case 32: this.bitField0_ |= 0x8; this.s2CSuccPer_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_SimulateDropByTcResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_SimulateDropByTcResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(SimulateDropByTcResponse.class, Builder.class); } public static Parser<SimulateDropByTcResponse> PARSER = (Parser<SimulateDropByTcResponse>)new AbstractParser<SimulateDropByTcResponse>() { public PlayerHandler.SimulateDropByTcResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.SimulateDropByTcResponse(input, extensionRegistry); } }
/* 32838 */     ; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_RUNNUM_FIELD_NUMBER = 3; private int s2CRunNum_; public static final int S2C_SUCCPER_FIELD_NUMBER = 4; private int s2CSuccPer_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<SimulateDropByTcResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } static { defaultInstance.initFields(); }
/*       */ 
/*       */ 
/*       */     
/*       */     public String getS2CMsg() {
/*       */       Object ref = this.s2CMsg_;
/*       */       if (ref instanceof String) {
/*       */         return (String)ref;
/*       */       }
/*       */       ByteString bs = (ByteString)ref;
/*       */       String s = bs.toStringUtf8();
/*       */       if (bs.isValidUtf8()) {
/*       */         this.s2CMsg_ = s;
/*       */       }
/*       */       return s;
/*       */     }
/*       */ 
/*       */     
/*       */     public ByteString getS2CMsgBytes() {
/*       */       Object ref = this.s2CMsg_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.s2CMsg_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref;
/*       */     }
/*       */ 
/*       */     
/*       */     public boolean hasS2CRunNum() {
/*       */       return ((this.bitField0_ & 0x4) == 4);
/*       */     }
/*       */ 
/*       */     
/*       */     public int getS2CRunNum() {
/*       */       return this.s2CRunNum_;
/*       */     }
/*       */ 
/*       */     
/*       */     public boolean hasS2CSuccPer() {
/*       */       return ((this.bitField0_ & 0x8) == 8);
/*       */     }
/*       */ 
/*       */     
/*       */     public int getS2CSuccPer() {
/*       */       return this.s2CSuccPer_;
/*       */     }
/*       */ 
/*       */     
/*       */     private void initFields() {
/*       */       this.s2CCode_ = 0;
/*       */       this.s2CMsg_ = "";
/*       */       this.s2CRunNum_ = 0;
/*       */       this.s2CSuccPer_ = 0;
/*       */     }
/*       */ 
/*       */     
/*       */     public final boolean isInitialized() {
/*       */       byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1) {
/*       */         return true;
/*       */       }
/*       */       if (isInitialized == 0) {
/*       */         return false;
/*       */       }
/*       */       if (!hasS2CCode()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true;
/*       */     }
/*       */ 
/*       */     
/*       */     public void writeTo(CodedOutputStream output) throws IOException {
/*       */       getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         output.writeInt32(1, this.s2CCode_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         output.writeBytes(2, getS2CMsgBytes());
/*       */       }
/*       */       if ((this.bitField0_ & 0x4) == 4) {
/*       */         output.writeInt32(3, this.s2CRunNum_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x8) == 8) {
/*       */         output.writeInt32(4, this.s2CSuccPer_);
/*       */       }
/*       */       getUnknownFields().writeTo(output);
/*       */     }
/*       */ 
/*       */     
/*       */     public int getSerializedSize() {
/*       */       int size = this.memoizedSerializedSize;
/*       */       if (size != -1) {
/*       */         return size;
/*       */       }
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
/*       */       }
/*       */       if ((this.bitField0_ & 0x4) == 4) {
/*       */         size += CodedOutputStream.computeInt32Size(3, this.s2CRunNum_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x8) == 8) {
/*       */         size += CodedOutputStream.computeInt32Size(4, this.s2CSuccPer_);
/*       */       }
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size;
/*       */     }
/*       */ 
/*       */     
/*       */     protected Object writeReplace() throws ObjectStreamException {
/*       */       return super.writeReplace();
/*       */     }
/*       */ 
/*       */     
/*       */     public static SimulateDropByTcResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
/*       */       return (SimulateDropByTcResponse)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */     
/*       */     public static SimulateDropByTcResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (SimulateDropByTcResponse)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */     
/*       */     public static SimulateDropByTcResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
/*       */       return (SimulateDropByTcResponse)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */     
/*       */     public static SimulateDropByTcResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (SimulateDropByTcResponse)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */     
/*       */     public static SimulateDropByTcResponse parseFrom(InputStream input) throws IOException {
/*       */       return (SimulateDropByTcResponse)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */     
/*       */     public static SimulateDropByTcResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (SimulateDropByTcResponse)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */     
/*       */     public static SimulateDropByTcResponse parseDelimitedFrom(InputStream input) throws IOException {
/*       */       return (SimulateDropByTcResponse)PARSER.parseDelimitedFrom(input);
/*       */     }
/*       */ 
/*       */     
/*       */     public static SimulateDropByTcResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (SimulateDropByTcResponse)PARSER.parseDelimitedFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */     
/*       */     public static SimulateDropByTcResponse parseFrom(CodedInputStream input) throws IOException {
/*       */       return (SimulateDropByTcResponse)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */     
/*       */     public static SimulateDropByTcResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (SimulateDropByTcResponse)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */     
/*       */     public static Builder newBuilder() {
/*       */       return Builder.create();
/*       */     }
/*       */ 
/*       */     
/*       */     public Builder newBuilderForType() {
/*       */       return newBuilder();
/*       */     }
/*       */ 
/*       */     
/*       */     public static Builder newBuilder(SimulateDropByTcResponse prototype) {
/*       */       return newBuilder().mergeFrom(prototype);
/*       */     }
/*       */ 
/*       */     
/*       */     public Builder toBuilder() {
/*       */       return newBuilder(this);
/*       */     }
/*       */ 
/*       */     
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
/*       */       Builder builder = new Builder(parent);
/*       */       return builder;
/*       */     }
/*       */ 
/*       */     
/*       */     public static final class Builder
/*       */       extends GeneratedMessage.Builder<Builder>
/*       */       implements PlayerHandler.SimulateDropByTcResponseOrBuilder
/*       */     {
/*       */       private int bitField0_;
/*       */       
/*       */       private int s2CCode_;
/*       */       
/*       */       private Object s2CMsg_;
/*       */       
/*       */       private int s2CRunNum_;
/*       */       
/*       */       private int s2CSuccPer_;
/*       */ 
/*       */       
/*       */       public static final Descriptors.Descriptor getDescriptor() {
/*       */         return PlayerHandler.internal_static_pomelo_area_SimulateDropByTcResponse_descriptor;
/*       */       }
/*       */ 
/*       */       
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */         return PlayerHandler.internal_static_pomelo_area_SimulateDropByTcResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.SimulateDropByTcResponse.class, Builder.class);
/*       */       }
/*       */ 
/*       */       
/*       */       private Builder() {
/*       */         this.s2CMsg_ = "";
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */       
/*       */       private Builder(GeneratedMessage.BuilderParent parent) {
/*       */         super(parent);
/*       */         this.s2CMsg_ = "";
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */       
/*       */       private void maybeForceBuilderInitialization() {
/*       */         if (PlayerHandler.SimulateDropByTcResponse.alwaysUseFieldBuilders);
/*       */       }
/*       */ 
/*       */       
/*       */       private static Builder create() {
/*       */         return new Builder();
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder clear() {
/*       */         super.clear();
/*       */         this.s2CCode_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CMsg_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.s2CRunNum_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.s2CSuccPer_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder clone() {
/*       */         return create().mergeFrom(buildPartial());
/*       */       }
/*       */ 
/*       */       
/*       */       public Descriptors.Descriptor getDescriptorForType() {
/*       */         return PlayerHandler.internal_static_pomelo_area_SimulateDropByTcResponse_descriptor;
/*       */       }
/*       */ 
/*       */       
/*       */       public PlayerHandler.SimulateDropByTcResponse getDefaultInstanceForType() {
/*       */         return PlayerHandler.SimulateDropByTcResponse.getDefaultInstance();
/*       */       }
/*       */ 
/*       */       
/*       */       public PlayerHandler.SimulateDropByTcResponse build() {
/*       */         PlayerHandler.SimulateDropByTcResponse result = buildPartial();
/*       */         if (!result.isInitialized()) {
/*       */           throw newUninitializedMessageException(result);
/*       */         }
/*       */         return result;
/*       */       }
/*       */ 
/*       */       
/*       */       public PlayerHandler.SimulateDropByTcResponse buildPartial() {
/*       */         PlayerHandler.SimulateDropByTcResponse result = new PlayerHandler.SimulateDropByTcResponse(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1) {
/*       */           to_bitField0_ |= 0x1;
/*       */         }
/*       */         result.s2CCode_ = this.s2CCode_;
/*       */         if ((from_bitField0_ & 0x2) == 2) {
/*       */           to_bitField0_ |= 0x2;
/*       */         }
/*       */         result.s2CMsg_ = this.s2CMsg_;
/*       */         if ((from_bitField0_ & 0x4) == 4) {
/*       */           to_bitField0_ |= 0x4;
/*       */         }
/*       */         result.s2CRunNum_ = this.s2CRunNum_;
/*       */         if ((from_bitField0_ & 0x8) == 8) {
/*       */           to_bitField0_ |= 0x8;
/*       */         }
/*       */         result.s2CSuccPer_ = this.s2CSuccPer_;
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(Message other) {
/*       */         if (other instanceof PlayerHandler.SimulateDropByTcResponse) {
/*       */           return mergeFrom((PlayerHandler.SimulateDropByTcResponse)other);
/*       */         }
/*       */         super.mergeFrom(other);
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(PlayerHandler.SimulateDropByTcResponse other) {
/*       */         if (other == PlayerHandler.SimulateDropByTcResponse.getDefaultInstance()) {
/*       */           return this;
/*       */         }
/*       */         if (other.hasS2CCode()) {
/*       */           setS2CCode(other.getS2CCode());
/*       */         }
/*       */         if (other.hasS2CMsg()) {
/*       */           this.bitField0_ |= 0x2;
/*       */           this.s2CMsg_ = other.s2CMsg_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasS2CRunNum()) {
/*       */           setS2CRunNum(other.getS2CRunNum());
/*       */         }
/*       */         if (other.hasS2CSuccPer()) {
/*       */           setS2CSuccPer(other.getS2CSuccPer());
/*       */         }
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public final boolean isInitialized() {
/*       */         if (!hasS2CCode()) {
/*       */           return false;
/*       */         }
/*       */         return true;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */         PlayerHandler.SimulateDropByTcResponse parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (PlayerHandler.SimulateDropByTcResponse)PlayerHandler.SimulateDropByTcResponse.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (PlayerHandler.SimulateDropByTcResponse)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null) {
/*       */             mergeFrom(parsedMessage);
/*       */           }
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public boolean hasS2CCode() {
/*       */         return ((this.bitField0_ & 0x1) == 1);
/*       */       }
/*       */ 
/*       */       
/*       */       public int getS2CCode() {
/*       */         return this.s2CCode_;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder setS2CCode(int value) {
/*       */         this.bitField0_ |= 0x1;
/*       */         this.s2CCode_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder clearS2CCode() {
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CCode_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public boolean hasS2CMsg() {
/*       */         return ((this.bitField0_ & 0x2) == 2);
/*       */       }
/*       */ 
/*       */       
/*       */       public String getS2CMsg() {
/*       */         Object ref = this.s2CMsg_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8()) {
/*       */             this.s2CMsg_ = s;
/*       */           }
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */ 
/*       */       
/*       */       public ByteString getS2CMsgBytes() {
/*       */         Object ref = this.s2CMsg_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CMsg_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder setS2CMsg(String value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder clearS2CMsg() {
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.s2CMsg_ = PlayerHandler.SimulateDropByTcResponse.getDefaultInstance().getS2CMsg();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder setS2CMsgBytes(ByteString value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */       
/*       */       public boolean hasS2CRunNum() {
/*       */         return ((this.bitField0_ & 0x4) == 4);
/*       */       }
/*       */ 
/*       */       
/*       */       public int getS2CRunNum() {
/*       */         return this.s2CRunNum_;
/*       */       }
/*       */ 
/*       */       
/*       */       public Builder setS2CRunNum(int value) {
/*       */         this.bitField0_ |= 0x4;
/*       */         this.s2CRunNum_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearS2CRunNum() {
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.s2CRunNum_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public boolean hasS2CSuccPer() {
/*       */         return ((this.bitField0_ & 0x8) == 8);
/*       */       }
/*       */       
/*       */       public int getS2CSuccPer() {
/*       */         return this.s2CSuccPer_;
/*       */       }
/*       */       
/*       */       public Builder setS2CSuccPer(int value) {
/*       */         this.bitField0_ |= 0x8;
/*       */         this.s2CSuccPer_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearS2CSuccPer() {
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.s2CSuccPer_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */     }
/*       */   }
/*       */   
/*       */   public static final class GetPlayerPositionRequest
/*       */     extends GeneratedMessage
/*       */     implements GetPlayerPositionRequestOrBuilder
/*       */   {
/* 33341 */     private static final GetPlayerPositionRequest defaultInstance = new GetPlayerPositionRequest(true); private final UnknownFieldSet unknownFields; private GetPlayerPositionRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private GetPlayerPositionRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static GetPlayerPositionRequest getDefaultInstance() { return defaultInstance; } public GetPlayerPositionRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private GetPlayerPositionRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.s2CPlayerId_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_GetPlayerPositionRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_GetPlayerPositionRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(GetPlayerPositionRequest.class, Builder.class); } public static Parser<GetPlayerPositionRequest> PARSER = (Parser<GetPlayerPositionRequest>)new AbstractParser<GetPlayerPositionRequest>() { public PlayerHandler.GetPlayerPositionRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.GetPlayerPositionRequest(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_PLAYERID_FIELD_NUMBER = 1; private Object s2CPlayerId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<GetPlayerPositionRequest> getParserForType() { return PARSER; } public boolean hasS2CPlayerId() { return ((this.bitField0_ & 0x1) == 1); } public String getS2CPlayerId() { Object ref = this.s2CPlayerId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CPlayerId_ = s;  return s; } public ByteString getS2CPlayerIdBytes() { Object ref = this.s2CPlayerId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CPlayerId_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CPlayerId_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CPlayerId()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getS2CPlayerIdBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getS2CPlayerIdBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static GetPlayerPositionRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (GetPlayerPositionRequest)PARSER.parseFrom(data); } public static GetPlayerPositionRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetPlayerPositionRequest)PARSER.parseFrom(data, extensionRegistry); } public static GetPlayerPositionRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (GetPlayerPositionRequest)PARSER.parseFrom(data); } public static GetPlayerPositionRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetPlayerPositionRequest)PARSER.parseFrom(data, extensionRegistry); } public static GetPlayerPositionRequest parseFrom(InputStream input) throws IOException { return (GetPlayerPositionRequest)PARSER.parseFrom(input); } public static GetPlayerPositionRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetPlayerPositionRequest)PARSER.parseFrom(input, extensionRegistry); } public static GetPlayerPositionRequest parseDelimitedFrom(InputStream input) throws IOException { return (GetPlayerPositionRequest)PARSER.parseDelimitedFrom(input); } public static GetPlayerPositionRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetPlayerPositionRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static GetPlayerPositionRequest parseFrom(CodedInputStream input) throws IOException { return (GetPlayerPositionRequest)PARSER.parseFrom(input); } public static GetPlayerPositionRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetPlayerPositionRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(GetPlayerPositionRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.GetPlayerPositionRequestOrBuilder {
/* 33342 */       private int bitField0_; private Object s2CPlayerId_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_GetPlayerPositionRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_GetPlayerPositionRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.GetPlayerPositionRequest.class, Builder.class); } private Builder() { this.s2CPlayerId_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CPlayerId_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.GetPlayerPositionRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CPlayerId_ = ""; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_GetPlayerPositionRequest_descriptor; } public PlayerHandler.GetPlayerPositionRequest getDefaultInstanceForType() { return PlayerHandler.GetPlayerPositionRequest.getDefaultInstance(); } public PlayerHandler.GetPlayerPositionRequest build() { PlayerHandler.GetPlayerPositionRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.GetPlayerPositionRequest buildPartial() { PlayerHandler.GetPlayerPositionRequest result = new PlayerHandler.GetPlayerPositionRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CPlayerId_ = this.s2CPlayerId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.GetPlayerPositionRequest) return mergeFrom((PlayerHandler.GetPlayerPositionRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.GetPlayerPositionRequest other) { if (other == PlayerHandler.GetPlayerPositionRequest.getDefaultInstance()) return this;  if (other.hasS2CPlayerId()) { this.bitField0_ |= 0x1; this.s2CPlayerId_ = other.s2CPlayerId_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CPlayerId()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.GetPlayerPositionRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.GetPlayerPositionRequest)PlayerHandler.GetPlayerPositionRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.GetPlayerPositionRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CPlayerId() { return ((this.bitField0_ & 0x1) == 1); } public String getS2CPlayerId() { Object ref = this.s2CPlayerId_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CPlayerId_ = s;  return s; }  return (String)ref; } public ByteString getS2CPlayerIdBytes() { Object ref = this.s2CPlayerId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CPlayerId_ = b; return b; }  return (ByteString)ref; } public Builder setS2CPlayerId(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.s2CPlayerId_ = value; onChanged(); return this; } public Builder clearS2CPlayerId() { this.bitField0_ &= 0xFFFFFFFE; this.s2CPlayerId_ = PlayerHandler.GetPlayerPositionRequest.getDefaultInstance().getS2CPlayerId(); onChanged(); return this; } public Builder setS2CPlayerIdBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.s2CPlayerId_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class GetPlayerPositionResponse
/*       */     extends GeneratedMessage
/*       */     implements GetPlayerPositionResponseOrBuilder
/*       */   {
/* 34372 */     private static final GetPlayerPositionResponse defaultInstance = new GetPlayerPositionResponse(true); private final UnknownFieldSet unknownFields; private GetPlayerPositionResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private GetPlayerPositionResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static GetPlayerPositionResponse getDefaultInstance() { return defaultInstance; } public GetPlayerPositionResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private GetPlayerPositionResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 24: this.bitField0_ |= 0x4; this.s2CAreaId_ = input.readInt32(); break;case 32: this.bitField0_ |= 0x8; this.s2CTemplateID_ = input.readInt32(); break;case 42: bs = input.readBytes(); this.bitField0_ |= 0x10; this.s2CInstanceId_ = bs; break;case 48: this.bitField0_ |= 0x20; this.s2CTargetX_ = input.readInt32(); break;case 56: this.bitField0_ |= 0x40; this.s2CTargetY_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_GetPlayerPositionResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_GetPlayerPositionResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(GetPlayerPositionResponse.class, Builder.class); } public static Parser<GetPlayerPositionResponse> PARSER = (Parser<GetPlayerPositionResponse>)new AbstractParser<GetPlayerPositionResponse>() { public PlayerHandler.GetPlayerPositionResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.GetPlayerPositionResponse(input, extensionRegistry); } }
/* 34373 */     ; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_AREAID_FIELD_NUMBER = 3; private int s2CAreaId_; public static final int S2C_TEMPLATEID_FIELD_NUMBER = 4; private int s2CTemplateID_; public static final int S2C_INSTANCEID_FIELD_NUMBER = 5; private Object s2CInstanceId_; public static final int S2C_TARGETX_FIELD_NUMBER = 6; private int s2CTargetX_; public static final int S2C_TARGETY_FIELD_NUMBER = 7; private int s2CTargetY_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<GetPlayerPositionResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } static { defaultInstance.initFields(); } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b;
/*       */       }  return (ByteString)ref; }
/*       */     public boolean hasS2CAreaId() { return ((this.bitField0_ & 0x4) == 4); }
/*       */     public int getS2CAreaId() { return this.s2CAreaId_; }
/*       */     public boolean hasS2CTemplateID() { return ((this.bitField0_ & 0x8) == 8); }
/*       */     public int getS2CTemplateID() { return this.s2CTemplateID_; }
/*       */     public boolean hasS2CInstanceId() { return ((this.bitField0_ & 0x10) == 16); }
/*       */     public String getS2CInstanceId() { Object ref = this.s2CInstanceId_; if (ref instanceof String)
/*       */         return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8())
/*       */         this.s2CInstanceId_ = s;  return s; }
/*       */     public ByteString getS2CInstanceIdBytes() { Object ref = this.s2CInstanceId_; if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CInstanceId_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref; }
/*       */     public boolean hasS2CTargetX() { return ((this.bitField0_ & 0x20) == 32); }
/*       */     public int getS2CTargetX() { return this.s2CTargetX_; }
/*       */     public boolean hasS2CTargetY() { return ((this.bitField0_ & 0x40) == 64); }
/*       */     public int getS2CTargetY() { return this.s2CTargetY_; }
/*       */     private void initFields() { this.s2CCode_ = 0;
/*       */       this.s2CMsg_ = "";
/*       */       this.s2CAreaId_ = 0;
/*       */       this.s2CTemplateID_ = 0;
/*       */       this.s2CInstanceId_ = "";
/*       */       this.s2CTargetX_ = 0;
/*       */       this.s2CTargetY_ = 0; }
/*       */     public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1)
/*       */         return true; 
/*       */       if (isInitialized == 0)
/*       */         return false; 
/*       */       if (!hasS2CCode()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true; }
/*       */     public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1)
/*       */         output.writeInt32(1, this.s2CCode_); 
/*       */       if ((this.bitField0_ & 0x2) == 2)
/*       */         output.writeBytes(2, getS2CMsgBytes()); 
/*       */       if ((this.bitField0_ & 0x4) == 4)
/*       */         output.writeInt32(3, this.s2CAreaId_); 
/*       */       if ((this.bitField0_ & 0x8) == 8)
/*       */         output.writeInt32(4, this.s2CTemplateID_); 
/*       */       if ((this.bitField0_ & 0x10) == 16)
/*       */         output.writeBytes(5, getS2CInstanceIdBytes()); 
/*       */       if ((this.bitField0_ & 0x20) == 32)
/*       */         output.writeInt32(6, this.s2CTargetX_); 
/*       */       if ((this.bitField0_ & 0x40) == 64)
/*       */         output.writeInt32(7, this.s2CTargetY_); 
/*       */       getUnknownFields().writeTo(output); }
/*       */     public int getSerializedSize() { int size = this.memoizedSerializedSize;
/*       */       if (size != -1)
/*       */         return size; 
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1)
/*       */         size += CodedOutputStream.computeInt32Size(1, this.s2CCode_); 
/*       */       if ((this.bitField0_ & 0x2) == 2)
/*       */         size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes()); 
/*       */       if ((this.bitField0_ & 0x4) == 4)
/*       */         size += CodedOutputStream.computeInt32Size(3, this.s2CAreaId_); 
/*       */       if ((this.bitField0_ & 0x8) == 8)
/*       */         size += CodedOutputStream.computeInt32Size(4, this.s2CTemplateID_); 
/*       */       if ((this.bitField0_ & 0x10) == 16)
/*       */         size += CodedOutputStream.computeBytesSize(5, getS2CInstanceIdBytes()); 
/*       */       if ((this.bitField0_ & 0x20) == 32)
/*       */         size += CodedOutputStream.computeInt32Size(6, this.s2CTargetX_); 
/*       */       if ((this.bitField0_ & 0x40) == 64)
/*       */         size += CodedOutputStream.computeInt32Size(7, this.s2CTargetY_); 
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size; }
/*       */     protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); }
/*       */     public static GetPlayerPositionResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (GetPlayerPositionResponse)PARSER.parseFrom(data); }
/*       */     public static GetPlayerPositionResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetPlayerPositionResponse)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static GetPlayerPositionResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (GetPlayerPositionResponse)PARSER.parseFrom(data); }
/*       */     public static GetPlayerPositionResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetPlayerPositionResponse)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static GetPlayerPositionResponse parseFrom(InputStream input) throws IOException { return (GetPlayerPositionResponse)PARSER.parseFrom(input); }
/*       */     public static GetPlayerPositionResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetPlayerPositionResponse)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static GetPlayerPositionResponse parseDelimitedFrom(InputStream input) throws IOException { return (GetPlayerPositionResponse)PARSER.parseDelimitedFrom(input); }
/*       */     public static GetPlayerPositionResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetPlayerPositionResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); }
/*       */     public static GetPlayerPositionResponse parseFrom(CodedInputStream input) throws IOException { return (GetPlayerPositionResponse)PARSER.parseFrom(input); }
/*       */     public static GetPlayerPositionResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetPlayerPositionResponse)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static Builder newBuilder() { return Builder.create(); }
/*       */     public Builder newBuilderForType() { return newBuilder(); }
/*       */     public static Builder newBuilder(GetPlayerPositionResponse prototype) { return newBuilder().mergeFrom(prototype); }
/*       */     public Builder toBuilder() { return newBuilder(this); }
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent);
/*       */       return builder; }
/*       */     public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.GetPlayerPositionResponseOrBuilder { private int bitField0_; private int s2CCode_; private Object s2CMsg_; private int s2CAreaId_; private int s2CTemplateID_; private Object s2CInstanceId_; private int s2CTargetX_; private int s2CTargetY_;
/*       */       public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_GetPlayerPositionResponse_descriptor; }
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_GetPlayerPositionResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.GetPlayerPositionResponse.class, Builder.class); }
/*       */       private Builder() { this.s2CMsg_ = "";
/*       */         this.s2CInstanceId_ = "";
/*       */         maybeForceBuilderInitialization(); }
/*       */       private Builder(GeneratedMessage.BuilderParent parent) { super(parent);
/*       */         this.s2CMsg_ = "";
/*       */         this.s2CInstanceId_ = "";
/*       */         maybeForceBuilderInitialization(); }
/*       */       private void maybeForceBuilderInitialization() { if (PlayerHandler.GetPlayerPositionResponse.alwaysUseFieldBuilders); }
/*       */       private static Builder create() { return new Builder(); }
/*       */       public Builder clear() { super.clear();
/*       */         this.s2CCode_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CMsg_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.s2CAreaId_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.s2CTemplateID_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.s2CInstanceId_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.s2CTargetX_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFDF;
/*       */         this.s2CTargetY_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFBF;
/*       */         return this; }
/*       */       public Builder clone() { return create().mergeFrom(buildPartial()); }
/*       */       public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_GetPlayerPositionResponse_descriptor; }
/*       */       public PlayerHandler.GetPlayerPositionResponse getDefaultInstanceForType() { return PlayerHandler.GetPlayerPositionResponse.getDefaultInstance(); }
/*       */       public PlayerHandler.GetPlayerPositionResponse build() { PlayerHandler.GetPlayerPositionResponse result = buildPartial();
/*       */         if (!result.isInitialized())
/*       */           throw newUninitializedMessageException(result); 
/*       */         return result; }
/*       */       public PlayerHandler.GetPlayerPositionResponse buildPartial() { PlayerHandler.GetPlayerPositionResponse result = new PlayerHandler.GetPlayerPositionResponse(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1)
/*       */           to_bitField0_ |= 0x1; 
/*       */         result.s2CCode_ = this.s2CCode_;
/*       */         if ((from_bitField0_ & 0x2) == 2)
/*       */           to_bitField0_ |= 0x2; 
/*       */         result.s2CMsg_ = this.s2CMsg_;
/*       */         if ((from_bitField0_ & 0x4) == 4)
/*       */           to_bitField0_ |= 0x4; 
/*       */         result.s2CAreaId_ = this.s2CAreaId_;
/*       */         if ((from_bitField0_ & 0x8) == 8)
/*       */           to_bitField0_ |= 0x8; 
/*       */         result.s2CTemplateID_ = this.s2CTemplateID_;
/*       */         if ((from_bitField0_ & 0x10) == 16)
/*       */           to_bitField0_ |= 0x10; 
/*       */         result.s2CInstanceId_ = this.s2CInstanceId_;
/*       */         if ((from_bitField0_ & 0x20) == 32)
/*       */           to_bitField0_ |= 0x20; 
/*       */         result.s2CTargetX_ = this.s2CTargetX_;
/*       */         if ((from_bitField0_ & 0x40) == 64)
/*       */           to_bitField0_ |= 0x40; 
/*       */         result.s2CTargetY_ = this.s2CTargetY_;
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result; }
/*       */       public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.GetPlayerPositionResponse)
/*       */           return mergeFrom((PlayerHandler.GetPlayerPositionResponse)other); 
/*       */         super.mergeFrom(other);
/*       */         return this; }
/*       */       public Builder mergeFrom(PlayerHandler.GetPlayerPositionResponse other) { if (other == PlayerHandler.GetPlayerPositionResponse.getDefaultInstance())
/*       */           return this; 
/*       */         if (other.hasS2CCode())
/*       */           setS2CCode(other.getS2CCode()); 
/*       */         if (other.hasS2CMsg()) {
/*       */           this.bitField0_ |= 0x2;
/*       */           this.s2CMsg_ = other.s2CMsg_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasS2CAreaId())
/*       */           setS2CAreaId(other.getS2CAreaId()); 
/*       */         if (other.hasS2CTemplateID())
/*       */           setS2CTemplateID(other.getS2CTemplateID()); 
/*       */         if (other.hasS2CInstanceId()) {
/*       */           this.bitField0_ |= 0x10;
/*       */           this.s2CInstanceId_ = other.s2CInstanceId_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasS2CTargetX())
/*       */           setS2CTargetX(other.getS2CTargetX()); 
/*       */         if (other.hasS2CTargetY())
/*       */           setS2CTargetY(other.getS2CTargetY()); 
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this; }
/*       */       public final boolean isInitialized() { if (!hasS2CCode())
/*       */           return false; 
/*       */         return true; }
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.GetPlayerPositionResponse parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (PlayerHandler.GetPlayerPositionResponse)PlayerHandler.GetPlayerPositionResponse.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (PlayerHandler.GetPlayerPositionResponse)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null)
/*       */             mergeFrom(parsedMessage); 
/*       */         } 
/*       */         return this; }
/*       */       public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); }
/*       */       public int getS2CCode() { return this.s2CCode_; }
/*       */       public Builder setS2CCode(int value) { this.bitField0_ |= 0x1;
/*       */         this.s2CCode_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CCode_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); }
/*       */       public String getS2CMsg() { Object ref = this.s2CMsg_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.s2CMsg_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref; }
/*       */       public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CMsg_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref; }
/*       */       public Builder setS2CMsg(String value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.s2CMsg_ = PlayerHandler.GetPlayerPositionResponse.getDefaultInstance().getS2CMsg();
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder setS2CMsgBytes(ByteString value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasS2CAreaId() { return ((this.bitField0_ & 0x4) == 4); }
/*       */       public int getS2CAreaId() { return this.s2CAreaId_; }
/*       */       public Builder setS2CAreaId(int value) { this.bitField0_ |= 0x4;
/*       */         this.s2CAreaId_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearS2CAreaId() { this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.s2CAreaId_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasS2CTemplateID() { return ((this.bitField0_ & 0x8) == 8); }
/*       */       public int getS2CTemplateID() { return this.s2CTemplateID_; }
/*       */       public Builder setS2CTemplateID(int value) { this.bitField0_ |= 0x8;
/*       */         this.s2CTemplateID_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearS2CTemplateID() { this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.s2CTemplateID_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasS2CInstanceId() { return ((this.bitField0_ & 0x10) == 16); }
/*       */       public String getS2CInstanceId() { Object ref = this.s2CInstanceId_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.s2CInstanceId_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref; }
/*       */       public ByteString getS2CInstanceIdBytes() { Object ref = this.s2CInstanceId_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CInstanceId_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref; }
/*       */       public Builder setS2CInstanceId(String value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x10;
/*       */         this.s2CInstanceId_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearS2CInstanceId() { this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.s2CInstanceId_ = PlayerHandler.GetPlayerPositionResponse.getDefaultInstance().getS2CInstanceId();
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder setS2CInstanceIdBytes(ByteString value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x10;
/*       */         this.s2CInstanceId_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasS2CTargetX() { return ((this.bitField0_ & 0x20) == 32); }
/*       */       public int getS2CTargetX() { return this.s2CTargetX_; }
/*       */       public Builder setS2CTargetX(int value) { this.bitField0_ |= 0x20;
/*       */         this.s2CTargetX_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearS2CTargetX() { this.bitField0_ &= 0xFFFFFFDF;
/*       */         this.s2CTargetX_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasS2CTargetY() { return ((this.bitField0_ & 0x40) == 64); }
/*       */       public int getS2CTargetY() { return this.s2CTargetY_; }
/*       */       public Builder setS2CTargetY(int value) { this.bitField0_ |= 0x40;
/*       */         this.s2CTargetY_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearS2CTargetY() { this.bitField0_ &= 0xFFFFFFBF;
/*       */         this.s2CTargetY_ = 0;
/*       */         onChanged();
/*       */         return this; } } }
/* 34685 */   public static final class UpgradeClassRequest extends GeneratedMessage implements UpgradeClassRequestOrBuilder { private static final UpgradeClassRequest defaultInstance = new UpgradeClassRequest(true); private final UnknownFieldSet unknownFields; private UpgradeClassRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private UpgradeClassRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static UpgradeClassRequest getDefaultInstance() { return defaultInstance; } public UpgradeClassRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private UpgradeClassRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_UpgradeClassRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_UpgradeClassRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(UpgradeClassRequest.class, Builder.class); } public static Parser<UpgradeClassRequest> PARSER = (Parser<UpgradeClassRequest>)new AbstractParser<UpgradeClassRequest>() { public PlayerHandler.UpgradeClassRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.UpgradeClassRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<UpgradeClassRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static UpgradeClassRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (UpgradeClassRequest)PARSER.parseFrom(data); } public static UpgradeClassRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (UpgradeClassRequest)PARSER.parseFrom(data, extensionRegistry); } public static UpgradeClassRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (UpgradeClassRequest)PARSER.parseFrom(data); } public static UpgradeClassRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (UpgradeClassRequest)PARSER.parseFrom(data, extensionRegistry); } public static UpgradeClassRequest parseFrom(InputStream input) throws IOException { return (UpgradeClassRequest)PARSER.parseFrom(input); } public static UpgradeClassRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (UpgradeClassRequest)PARSER.parseFrom(input, extensionRegistry); } public static UpgradeClassRequest parseDelimitedFrom(InputStream input) throws IOException { return (UpgradeClassRequest)PARSER.parseDelimitedFrom(input); } public static UpgradeClassRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (UpgradeClassRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static UpgradeClassRequest parseFrom(CodedInputStream input) throws IOException { return (UpgradeClassRequest)PARSER.parseFrom(input); } public static UpgradeClassRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (UpgradeClassRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(UpgradeClassRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.UpgradeClassRequestOrBuilder {
/* 34686 */       public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_UpgradeClassRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_UpgradeClassRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.UpgradeClassRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.UpgradeClassRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_UpgradeClassRequest_descriptor; } public PlayerHandler.UpgradeClassRequest getDefaultInstanceForType() { return PlayerHandler.UpgradeClassRequest.getDefaultInstance(); } public PlayerHandler.UpgradeClassRequest build() { PlayerHandler.UpgradeClassRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.UpgradeClassRequest buildPartial() { PlayerHandler.UpgradeClassRequest result = new PlayerHandler.UpgradeClassRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.UpgradeClassRequest) return mergeFrom((PlayerHandler.UpgradeClassRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.UpgradeClassRequest other) { if (other == PlayerHandler.UpgradeClassRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.UpgradeClassRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.UpgradeClassRequest)PlayerHandler.UpgradeClassRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.UpgradeClassRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */      }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class UpgradeClassResponse
/*       */     extends GeneratedMessage
/*       */     implements UpgradeClassResponseOrBuilder
/*       */   {
/* 35247 */     private static final UpgradeClassResponse defaultInstance = new UpgradeClassResponse(true); private final UnknownFieldSet unknownFields; private UpgradeClassResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private UpgradeClassResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static UpgradeClassResponse getDefaultInstance() { return defaultInstance; } public UpgradeClassResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private UpgradeClassResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_UpgradeClassResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_UpgradeClassResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(UpgradeClassResponse.class, Builder.class); } public static Parser<UpgradeClassResponse> PARSER = (Parser<UpgradeClassResponse>)new AbstractParser<UpgradeClassResponse>() { public PlayerHandler.UpgradeClassResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.UpgradeClassResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<UpgradeClassResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static UpgradeClassResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (UpgradeClassResponse)PARSER.parseFrom(data); } public static UpgradeClassResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (UpgradeClassResponse)PARSER.parseFrom(data, extensionRegistry); } public static UpgradeClassResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (UpgradeClassResponse)PARSER.parseFrom(data); } public static UpgradeClassResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (UpgradeClassResponse)PARSER.parseFrom(data, extensionRegistry); } public static UpgradeClassResponse parseFrom(InputStream input) throws IOException { return (UpgradeClassResponse)PARSER.parseFrom(input); } public static UpgradeClassResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (UpgradeClassResponse)PARSER.parseFrom(input, extensionRegistry); } public static UpgradeClassResponse parseDelimitedFrom(InputStream input) throws IOException { return (UpgradeClassResponse)PARSER.parseDelimitedFrom(input); } public static UpgradeClassResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (UpgradeClassResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static UpgradeClassResponse parseFrom(CodedInputStream input) throws IOException { return (UpgradeClassResponse)PARSER.parseFrom(input); } public static UpgradeClassResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (UpgradeClassResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(UpgradeClassResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.UpgradeClassResponseOrBuilder {
/* 35248 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_UpgradeClassResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_UpgradeClassResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.UpgradeClassResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.UpgradeClassResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_UpgradeClassResponse_descriptor; } public PlayerHandler.UpgradeClassResponse getDefaultInstanceForType() { return PlayerHandler.UpgradeClassResponse.getDefaultInstance(); } public PlayerHandler.UpgradeClassResponse build() { PlayerHandler.UpgradeClassResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.UpgradeClassResponse buildPartial() { PlayerHandler.UpgradeClassResponse result = new PlayerHandler.UpgradeClassResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.UpgradeClassResponse) return mergeFrom((PlayerHandler.UpgradeClassResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.UpgradeClassResponse other) { if (other == PlayerHandler.UpgradeClassResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.UpgradeClassResponse parsedMessage = null; try { parsedMessage = (PlayerHandler.UpgradeClassResponse)PlayerHandler.UpgradeClassResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.UpgradeClassResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = PlayerHandler.UpgradeClassResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class GetClassEventConditionRequest
/*       */     extends GeneratedMessage
/*       */     implements GetClassEventConditionRequestOrBuilder
/*       */   {
/* 35560 */     private static final GetClassEventConditionRequest defaultInstance = new GetClassEventConditionRequest(true); private final UnknownFieldSet unknownFields; private GetClassEventConditionRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private GetClassEventConditionRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static GetClassEventConditionRequest getDefaultInstance() { return defaultInstance; } public GetClassEventConditionRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private GetClassEventConditionRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_GetClassEventConditionRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_GetClassEventConditionRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(GetClassEventConditionRequest.class, Builder.class); } public static Parser<GetClassEventConditionRequest> PARSER = (Parser<GetClassEventConditionRequest>)new AbstractParser<GetClassEventConditionRequest>() { public PlayerHandler.GetClassEventConditionRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.GetClassEventConditionRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<GetClassEventConditionRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static GetClassEventConditionRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (GetClassEventConditionRequest)PARSER.parseFrom(data); } public static GetClassEventConditionRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetClassEventConditionRequest)PARSER.parseFrom(data, extensionRegistry); } public static GetClassEventConditionRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (GetClassEventConditionRequest)PARSER.parseFrom(data); } public static GetClassEventConditionRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetClassEventConditionRequest)PARSER.parseFrom(data, extensionRegistry); } public static GetClassEventConditionRequest parseFrom(InputStream input) throws IOException { return (GetClassEventConditionRequest)PARSER.parseFrom(input); } public static GetClassEventConditionRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetClassEventConditionRequest)PARSER.parseFrom(input, extensionRegistry); } public static GetClassEventConditionRequest parseDelimitedFrom(InputStream input) throws IOException { return (GetClassEventConditionRequest)PARSER.parseDelimitedFrom(input); } public static GetClassEventConditionRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetClassEventConditionRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static GetClassEventConditionRequest parseFrom(CodedInputStream input) throws IOException { return (GetClassEventConditionRequest)PARSER.parseFrom(input); } public static GetClassEventConditionRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetClassEventConditionRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(GetClassEventConditionRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.GetClassEventConditionRequestOrBuilder {
/* 35561 */       public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_GetClassEventConditionRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_GetClassEventConditionRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.GetClassEventConditionRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.GetClassEventConditionRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_GetClassEventConditionRequest_descriptor; } public PlayerHandler.GetClassEventConditionRequest getDefaultInstanceForType() { return PlayerHandler.GetClassEventConditionRequest.getDefaultInstance(); } public PlayerHandler.GetClassEventConditionRequest build() { PlayerHandler.GetClassEventConditionRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.GetClassEventConditionRequest buildPartial() { PlayerHandler.GetClassEventConditionRequest result = new PlayerHandler.GetClassEventConditionRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.GetClassEventConditionRequest) return mergeFrom((PlayerHandler.GetClassEventConditionRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.GetClassEventConditionRequest other) { if (other == PlayerHandler.GetClassEventConditionRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.GetClassEventConditionRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.GetClassEventConditionRequest)PlayerHandler.GetClassEventConditionRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.GetClassEventConditionRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class GetClassEventConditionResponse
/*       */     extends GeneratedMessage
/*       */     implements GetClassEventConditionResponseOrBuilder
/*       */   {
/* 36232 */     private static final GetClassEventConditionResponse defaultInstance = new GetClassEventConditionResponse(true); private final UnknownFieldSet unknownFields; private GetClassEventConditionResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private GetClassEventConditionResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static GetClassEventConditionResponse getDefaultInstance() { return defaultInstance; } public GetClassEventConditionResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private GetClassEventConditionResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 24: this.bitField0_ |= 0x4; this.s2CFlag_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_GetClassEventConditionResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_GetClassEventConditionResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(GetClassEventConditionResponse.class, Builder.class); } public static Parser<GetClassEventConditionResponse> PARSER = (Parser<GetClassEventConditionResponse>)new AbstractParser<GetClassEventConditionResponse>() { public PlayerHandler.GetClassEventConditionResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.GetClassEventConditionResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_FLAG_FIELD_NUMBER = 3; private int s2CFlag_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<GetClassEventConditionResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public boolean hasS2CFlag() { return ((this.bitField0_ & 0x4) == 4); } public int getS2CFlag() { return this.s2CFlag_; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.s2CFlag_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4) output.writeInt32(3, this.s2CFlag_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt32Size(3, this.s2CFlag_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static GetClassEventConditionResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (GetClassEventConditionResponse)PARSER.parseFrom(data); } public static GetClassEventConditionResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetClassEventConditionResponse)PARSER.parseFrom(data, extensionRegistry); } public static GetClassEventConditionResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (GetClassEventConditionResponse)PARSER.parseFrom(data); } public static GetClassEventConditionResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetClassEventConditionResponse)PARSER.parseFrom(data, extensionRegistry); } public static GetClassEventConditionResponse parseFrom(InputStream input) throws IOException { return (GetClassEventConditionResponse)PARSER.parseFrom(input); } public static GetClassEventConditionResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetClassEventConditionResponse)PARSER.parseFrom(input, extensionRegistry); } public static GetClassEventConditionResponse parseDelimitedFrom(InputStream input) throws IOException { return (GetClassEventConditionResponse)PARSER.parseDelimitedFrom(input); } public static GetClassEventConditionResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetClassEventConditionResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static GetClassEventConditionResponse parseFrom(CodedInputStream input) throws IOException { return (GetClassEventConditionResponse)PARSER.parseFrom(input); } public static GetClassEventConditionResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetClassEventConditionResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(GetClassEventConditionResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.GetClassEventConditionResponseOrBuilder {
/* 36233 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; private int s2CFlag_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_GetClassEventConditionResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_GetClassEventConditionResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.GetClassEventConditionResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.GetClassEventConditionResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; this.s2CFlag_ = 0; this.bitField0_ &= 0xFFFFFFFB; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_GetClassEventConditionResponse_descriptor; } public PlayerHandler.GetClassEventConditionResponse getDefaultInstanceForType() { return PlayerHandler.GetClassEventConditionResponse.getDefaultInstance(); } public PlayerHandler.GetClassEventConditionResponse build() { PlayerHandler.GetClassEventConditionResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.GetClassEventConditionResponse buildPartial() { PlayerHandler.GetClassEventConditionResponse result = new PlayerHandler.GetClassEventConditionResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;  result.s2CFlag_ = this.s2CFlag_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.GetClassEventConditionResponse) return mergeFrom((PlayerHandler.GetClassEventConditionResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.GetClassEventConditionResponse other) { if (other == PlayerHandler.GetClassEventConditionResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  if (other.hasS2CFlag()) setS2CFlag(other.getS2CFlag());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.GetClassEventConditionResponse parsedMessage = null; try { parsedMessage = (PlayerHandler.GetClassEventConditionResponse)PlayerHandler.GetClassEventConditionResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.GetClassEventConditionResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = PlayerHandler.GetClassEventConditionResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public boolean hasS2CFlag() { return ((this.bitField0_ & 0x4) == 4); } public int getS2CFlag() { return this.s2CFlag_; } public Builder setS2CFlag(int value) { this.bitField0_ |= 0x4; this.s2CFlag_ = value; onChanged(); return this; } public Builder clearS2CFlag() { this.bitField0_ &= 0xFFFFFFFB; this.s2CFlag_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class PayGiftStatePush
/*       */     extends GeneratedMessage
/*       */     implements PayGiftStatePushOrBuilder
/*       */   {
/* 36545 */     private static final PayGiftStatePush defaultInstance = new PayGiftStatePush(true); private final UnknownFieldSet unknownFields; private PayGiftStatePush(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private PayGiftStatePush(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static PayGiftStatePush getDefaultInstance() { return defaultInstance; } public PayGiftStatePush getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private PayGiftStatePush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_PayGiftStatePush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_PayGiftStatePush_fieldAccessorTable.ensureFieldAccessorsInitialized(PayGiftStatePush.class, Builder.class); } public static Parser<PayGiftStatePush> PARSER = (Parser<PayGiftStatePush>)new AbstractParser<PayGiftStatePush>() { public PlayerHandler.PayGiftStatePush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.PayGiftStatePush(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<PayGiftStatePush> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static PayGiftStatePush parseFrom(ByteString data) throws InvalidProtocolBufferException { return (PayGiftStatePush)PARSER.parseFrom(data); } public static PayGiftStatePush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PayGiftStatePush)PARSER.parseFrom(data, extensionRegistry); } public static PayGiftStatePush parseFrom(byte[] data) throws InvalidProtocolBufferException { return (PayGiftStatePush)PARSER.parseFrom(data); } public static PayGiftStatePush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PayGiftStatePush)PARSER.parseFrom(data, extensionRegistry); } public static PayGiftStatePush parseFrom(InputStream input) throws IOException { return (PayGiftStatePush)PARSER.parseFrom(input); } public static PayGiftStatePush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PayGiftStatePush)PARSER.parseFrom(input, extensionRegistry); } public static PayGiftStatePush parseDelimitedFrom(InputStream input) throws IOException { return (PayGiftStatePush)PARSER.parseDelimitedFrom(input); } public static PayGiftStatePush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PayGiftStatePush)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static PayGiftStatePush parseFrom(CodedInputStream input) throws IOException { return (PayGiftStatePush)PARSER.parseFrom(input); } public static PayGiftStatePush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PayGiftStatePush)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(PayGiftStatePush prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.PayGiftStatePushOrBuilder {
/* 36546 */       public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_PayGiftStatePush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_PayGiftStatePush_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.PayGiftStatePush.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.PayGiftStatePush.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_PayGiftStatePush_descriptor; } public PlayerHandler.PayGiftStatePush getDefaultInstanceForType() { return PlayerHandler.PayGiftStatePush.getDefaultInstance(); } public PlayerHandler.PayGiftStatePush build() { PlayerHandler.PayGiftStatePush result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.PayGiftStatePush buildPartial() { PlayerHandler.PayGiftStatePush result = new PlayerHandler.PayGiftStatePush(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.PayGiftStatePush) return mergeFrom((PlayerHandler.PayGiftStatePush)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.PayGiftStatePush other) { if (other == PlayerHandler.PayGiftStatePush.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.PayGiftStatePush parsedMessage = null; try { parsedMessage = (PlayerHandler.PayGiftStatePush)PlayerHandler.PayGiftStatePush.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.PayGiftStatePush)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ClientReadyRequest
/*       */     extends GeneratedMessage
/*       */     implements ClientReadyRequestOrBuilder
/*       */   {
/* 36866 */     private static final ClientReadyRequest defaultInstance = new ClientReadyRequest(true); private final UnknownFieldSet unknownFields; private ClientReadyRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ClientReadyRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ClientReadyRequest getDefaultInstance() { return defaultInstance; } public ClientReadyRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ClientReadyRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ClientReadyRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ClientReadyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ClientReadyRequest.class, Builder.class); } public static Parser<ClientReadyRequest> PARSER = (Parser<ClientReadyRequest>)new AbstractParser<ClientReadyRequest>() { public PlayerHandler.ClientReadyRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.ClientReadyRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ClientReadyRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ClientReadyRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ClientReadyRequest)PARSER.parseFrom(data); } public static ClientReadyRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ClientReadyRequest)PARSER.parseFrom(data, extensionRegistry); } public static ClientReadyRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ClientReadyRequest)PARSER.parseFrom(data); } public static ClientReadyRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ClientReadyRequest)PARSER.parseFrom(data, extensionRegistry); } public static ClientReadyRequest parseFrom(InputStream input) throws IOException { return (ClientReadyRequest)PARSER.parseFrom(input); } public static ClientReadyRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ClientReadyRequest)PARSER.parseFrom(input, extensionRegistry); } public static ClientReadyRequest parseDelimitedFrom(InputStream input) throws IOException { return (ClientReadyRequest)PARSER.parseDelimitedFrom(input); } public static ClientReadyRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ClientReadyRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ClientReadyRequest parseFrom(CodedInputStream input) throws IOException { return (ClientReadyRequest)PARSER.parseFrom(input); } public static ClientReadyRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ClientReadyRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ClientReadyRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.ClientReadyRequestOrBuilder {
/* 36867 */       public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ClientReadyRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ClientReadyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.ClientReadyRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.ClientReadyRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_ClientReadyRequest_descriptor; } public PlayerHandler.ClientReadyRequest getDefaultInstanceForType() { return PlayerHandler.ClientReadyRequest.getDefaultInstance(); } public PlayerHandler.ClientReadyRequest build() { PlayerHandler.ClientReadyRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.ClientReadyRequest buildPartial() { PlayerHandler.ClientReadyRequest result = new PlayerHandler.ClientReadyRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.ClientReadyRequest) return mergeFrom((PlayerHandler.ClientReadyRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.ClientReadyRequest other) { if (other == PlayerHandler.ClientReadyRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.ClientReadyRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.ClientReadyRequest)PlayerHandler.ClientReadyRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.ClientReadyRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ClientReadyResponse
/*       */     extends GeneratedMessage
/*       */     implements ClientReadyResponseOrBuilder
/*       */   {
/* 37428 */     private static final ClientReadyResponse defaultInstance = new ClientReadyResponse(true); private final UnknownFieldSet unknownFields; private ClientReadyResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ClientReadyResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ClientReadyResponse getDefaultInstance() { return defaultInstance; } public ClientReadyResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ClientReadyResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ClientReadyResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ClientReadyResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ClientReadyResponse.class, Builder.class); } public static Parser<ClientReadyResponse> PARSER = (Parser<ClientReadyResponse>)new AbstractParser<ClientReadyResponse>() { public PlayerHandler.ClientReadyResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.ClientReadyResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ClientReadyResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ClientReadyResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ClientReadyResponse)PARSER.parseFrom(data); } public static ClientReadyResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ClientReadyResponse)PARSER.parseFrom(data, extensionRegistry); } public static ClientReadyResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ClientReadyResponse)PARSER.parseFrom(data); } public static ClientReadyResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ClientReadyResponse)PARSER.parseFrom(data, extensionRegistry); } public static ClientReadyResponse parseFrom(InputStream input) throws IOException { return (ClientReadyResponse)PARSER.parseFrom(input); } public static ClientReadyResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ClientReadyResponse)PARSER.parseFrom(input, extensionRegistry); } public static ClientReadyResponse parseDelimitedFrom(InputStream input) throws IOException { return (ClientReadyResponse)PARSER.parseDelimitedFrom(input); } public static ClientReadyResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ClientReadyResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ClientReadyResponse parseFrom(CodedInputStream input) throws IOException { return (ClientReadyResponse)PARSER.parseFrom(input); } public static ClientReadyResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ClientReadyResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ClientReadyResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.ClientReadyResponseOrBuilder {
/* 37429 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ClientReadyResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ClientReadyResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.ClientReadyResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.ClientReadyResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_ClientReadyResponse_descriptor; } public PlayerHandler.ClientReadyResponse getDefaultInstanceForType() { return PlayerHandler.ClientReadyResponse.getDefaultInstance(); } public PlayerHandler.ClientReadyResponse build() { PlayerHandler.ClientReadyResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.ClientReadyResponse buildPartial() { PlayerHandler.ClientReadyResponse result = new PlayerHandler.ClientReadyResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.ClientReadyResponse) return mergeFrom((PlayerHandler.ClientReadyResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.ClientReadyResponse other) { if (other == PlayerHandler.ClientReadyResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.ClientReadyResponse parsedMessage = null; try { parsedMessage = (PlayerHandler.ClientReadyResponse)PlayerHandler.ClientReadyResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.ClientReadyResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = PlayerHandler.ClientReadyResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ExchangePropertyInfoRequest
/*       */     extends GeneratedMessage
/*       */     implements ExchangePropertyInfoRequestOrBuilder
/*       */   {
/* 37749 */     private static final ExchangePropertyInfoRequest defaultInstance = new ExchangePropertyInfoRequest(true); private final UnknownFieldSet unknownFields; private ExchangePropertyInfoRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ExchangePropertyInfoRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ExchangePropertyInfoRequest getDefaultInstance() { return defaultInstance; } public ExchangePropertyInfoRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ExchangePropertyInfoRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ExchangePropertyInfoRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ExchangePropertyInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ExchangePropertyInfoRequest.class, Builder.class); } public static Parser<ExchangePropertyInfoRequest> PARSER = (Parser<ExchangePropertyInfoRequest>)new AbstractParser<ExchangePropertyInfoRequest>() { public PlayerHandler.ExchangePropertyInfoRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.ExchangePropertyInfoRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ExchangePropertyInfoRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ExchangePropertyInfoRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ExchangePropertyInfoRequest)PARSER.parseFrom(data); } public static ExchangePropertyInfoRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ExchangePropertyInfoRequest)PARSER.parseFrom(data, extensionRegistry); } public static ExchangePropertyInfoRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ExchangePropertyInfoRequest)PARSER.parseFrom(data); } public static ExchangePropertyInfoRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ExchangePropertyInfoRequest)PARSER.parseFrom(data, extensionRegistry); } public static ExchangePropertyInfoRequest parseFrom(InputStream input) throws IOException { return (ExchangePropertyInfoRequest)PARSER.parseFrom(input); } public static ExchangePropertyInfoRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ExchangePropertyInfoRequest)PARSER.parseFrom(input, extensionRegistry); } public static ExchangePropertyInfoRequest parseDelimitedFrom(InputStream input) throws IOException { return (ExchangePropertyInfoRequest)PARSER.parseDelimitedFrom(input); } public static ExchangePropertyInfoRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ExchangePropertyInfoRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ExchangePropertyInfoRequest parseFrom(CodedInputStream input) throws IOException { return (ExchangePropertyInfoRequest)PARSER.parseFrom(input); } public static ExchangePropertyInfoRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ExchangePropertyInfoRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ExchangePropertyInfoRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.ExchangePropertyInfoRequestOrBuilder {
/* 37750 */       public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ExchangePropertyInfoRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ExchangePropertyInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.ExchangePropertyInfoRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.ExchangePropertyInfoRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_ExchangePropertyInfoRequest_descriptor; } public PlayerHandler.ExchangePropertyInfoRequest getDefaultInstanceForType() { return PlayerHandler.ExchangePropertyInfoRequest.getDefaultInstance(); } public PlayerHandler.ExchangePropertyInfoRequest build() { PlayerHandler.ExchangePropertyInfoRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.ExchangePropertyInfoRequest buildPartial() { PlayerHandler.ExchangePropertyInfoRequest result = new PlayerHandler.ExchangePropertyInfoRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.ExchangePropertyInfoRequest) return mergeFrom((PlayerHandler.ExchangePropertyInfoRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.ExchangePropertyInfoRequest other) { if (other == PlayerHandler.ExchangePropertyInfoRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.ExchangePropertyInfoRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.ExchangePropertyInfoRequest)PlayerHandler.ExchangePropertyInfoRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.ExchangePropertyInfoRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ExchangePropertyInfoResponse
/*       */     extends GeneratedMessage
/*       */     implements ExchangePropertyInfoResponseOrBuilder
/*       */   {
/* 38421 */     private static final ExchangePropertyInfoResponse defaultInstance = new ExchangePropertyInfoResponse(true); private final UnknownFieldSet unknownFields; private ExchangePropertyInfoResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ExchangePropertyInfoResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ExchangePropertyInfoResponse getDefaultInstance() { return defaultInstance; } public ExchangePropertyInfoResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ExchangePropertyInfoResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 24: this.bitField0_ |= 0x4; this.count_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ExchangePropertyInfoResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ExchangePropertyInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ExchangePropertyInfoResponse.class, Builder.class); } public static Parser<ExchangePropertyInfoResponse> PARSER = (Parser<ExchangePropertyInfoResponse>)new AbstractParser<ExchangePropertyInfoResponse>() { public PlayerHandler.ExchangePropertyInfoResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.ExchangePropertyInfoResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int COUNT_FIELD_NUMBER = 3; private int count_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ExchangePropertyInfoResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public boolean hasCount() { return ((this.bitField0_ & 0x4) == 4); } public int getCount() { return this.count_; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.count_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4) output.writeInt32(3, this.count_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt32Size(3, this.count_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ExchangePropertyInfoResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ExchangePropertyInfoResponse)PARSER.parseFrom(data); } public static ExchangePropertyInfoResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ExchangePropertyInfoResponse)PARSER.parseFrom(data, extensionRegistry); } public static ExchangePropertyInfoResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ExchangePropertyInfoResponse)PARSER.parseFrom(data); } public static ExchangePropertyInfoResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ExchangePropertyInfoResponse)PARSER.parseFrom(data, extensionRegistry); } public static ExchangePropertyInfoResponse parseFrom(InputStream input) throws IOException { return (ExchangePropertyInfoResponse)PARSER.parseFrom(input); } public static ExchangePropertyInfoResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ExchangePropertyInfoResponse)PARSER.parseFrom(input, extensionRegistry); } public static ExchangePropertyInfoResponse parseDelimitedFrom(InputStream input) throws IOException { return (ExchangePropertyInfoResponse)PARSER.parseDelimitedFrom(input); } public static ExchangePropertyInfoResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ExchangePropertyInfoResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ExchangePropertyInfoResponse parseFrom(CodedInputStream input) throws IOException { return (ExchangePropertyInfoResponse)PARSER.parseFrom(input); } public static ExchangePropertyInfoResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ExchangePropertyInfoResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ExchangePropertyInfoResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.ExchangePropertyInfoResponseOrBuilder {
/* 38422 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; private int count_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ExchangePropertyInfoResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ExchangePropertyInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.ExchangePropertyInfoResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.ExchangePropertyInfoResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; this.count_ = 0; this.bitField0_ &= 0xFFFFFFFB; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_ExchangePropertyInfoResponse_descriptor; } public PlayerHandler.ExchangePropertyInfoResponse getDefaultInstanceForType() { return PlayerHandler.ExchangePropertyInfoResponse.getDefaultInstance(); } public PlayerHandler.ExchangePropertyInfoResponse build() { PlayerHandler.ExchangePropertyInfoResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.ExchangePropertyInfoResponse buildPartial() { PlayerHandler.ExchangePropertyInfoResponse result = new PlayerHandler.ExchangePropertyInfoResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;  result.count_ = this.count_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.ExchangePropertyInfoResponse) return mergeFrom((PlayerHandler.ExchangePropertyInfoResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.ExchangePropertyInfoResponse other) { if (other == PlayerHandler.ExchangePropertyInfoResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  if (other.hasCount()) setCount(other.getCount());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.ExchangePropertyInfoResponse parsedMessage = null; try { parsedMessage = (PlayerHandler.ExchangePropertyInfoResponse)PlayerHandler.ExchangePropertyInfoResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.ExchangePropertyInfoResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = PlayerHandler.ExchangePropertyInfoResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public boolean hasCount() { return ((this.bitField0_ & 0x4) == 4); } public int getCount() { return this.count_; } public Builder setCount(int value) { this.bitField0_ |= 0x4; this.count_ = value; onChanged(); return this; } public Builder clearCount() { this.bitField0_ &= 0xFFFFFFFB; this.count_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ExchangePropertyRequest
/*       */     extends GeneratedMessage
/*       */     implements ExchangePropertyRequestOrBuilder
/*       */   {
/* 38866 */     private static final ExchangePropertyRequest defaultInstance = new ExchangePropertyRequest(true); private final UnknownFieldSet unknownFields; private ExchangePropertyRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ExchangePropertyRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ExchangePropertyRequest getDefaultInstance() { return defaultInstance; } public ExchangePropertyRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ExchangePropertyRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.type_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ExchangePropertyRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ExchangePropertyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ExchangePropertyRequest.class, Builder.class); } public static Parser<ExchangePropertyRequest> PARSER = (Parser<ExchangePropertyRequest>)new AbstractParser<ExchangePropertyRequest>() { public PlayerHandler.ExchangePropertyRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.ExchangePropertyRequest(input, extensionRegistry); } }; private int bitField0_; public static final int TYPE_FIELD_NUMBER = 1; private int type_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ExchangePropertyRequest> getParserForType() { return PARSER; } public boolean hasType() { return ((this.bitField0_ & 0x1) == 1); } public int getType() { return this.type_; } private void initFields() { this.type_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasType()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.type_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.type_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ExchangePropertyRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ExchangePropertyRequest)PARSER.parseFrom(data); } public static ExchangePropertyRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ExchangePropertyRequest)PARSER.parseFrom(data, extensionRegistry); } public static ExchangePropertyRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ExchangePropertyRequest)PARSER.parseFrom(data); } public static ExchangePropertyRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ExchangePropertyRequest)PARSER.parseFrom(data, extensionRegistry); } public static ExchangePropertyRequest parseFrom(InputStream input) throws IOException { return (ExchangePropertyRequest)PARSER.parseFrom(input); } public static ExchangePropertyRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ExchangePropertyRequest)PARSER.parseFrom(input, extensionRegistry); } public static ExchangePropertyRequest parseDelimitedFrom(InputStream input) throws IOException { return (ExchangePropertyRequest)PARSER.parseDelimitedFrom(input); } public static ExchangePropertyRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ExchangePropertyRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ExchangePropertyRequest parseFrom(CodedInputStream input) throws IOException { return (ExchangePropertyRequest)PARSER.parseFrom(input); } public static ExchangePropertyRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ExchangePropertyRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ExchangePropertyRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.ExchangePropertyRequestOrBuilder {
/* 38867 */       private int bitField0_; private int type_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ExchangePropertyRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ExchangePropertyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.ExchangePropertyRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.ExchangePropertyRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.type_ = 0; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_ExchangePropertyRequest_descriptor; } public PlayerHandler.ExchangePropertyRequest getDefaultInstanceForType() { return PlayerHandler.ExchangePropertyRequest.getDefaultInstance(); } public PlayerHandler.ExchangePropertyRequest build() { PlayerHandler.ExchangePropertyRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.ExchangePropertyRequest buildPartial() { PlayerHandler.ExchangePropertyRequest result = new PlayerHandler.ExchangePropertyRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.type_ = this.type_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.ExchangePropertyRequest) return mergeFrom((PlayerHandler.ExchangePropertyRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.ExchangePropertyRequest other) { if (other == PlayerHandler.ExchangePropertyRequest.getDefaultInstance()) return this;  if (other.hasType()) setType(other.getType());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasType()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.ExchangePropertyRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.ExchangePropertyRequest)PlayerHandler.ExchangePropertyRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.ExchangePropertyRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasType() { return ((this.bitField0_ & 0x1) == 1); } public int getType() { return this.type_; } public Builder setType(int value) { this.bitField0_ |= 0x1; this.type_ = value; onChanged(); return this; } public Builder clearType() { this.bitField0_ &= 0xFFFFFFFE; this.type_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ExchangePropertyResponse
/*       */     extends GeneratedMessage
/*       */     implements ExchangePropertyResponseOrBuilder
/*       */   {
/* 39538 */     private static final ExchangePropertyResponse defaultInstance = new ExchangePropertyResponse(true); private final UnknownFieldSet unknownFields; private ExchangePropertyResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ExchangePropertyResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ExchangePropertyResponse getDefaultInstance() { return defaultInstance; } public ExchangePropertyResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ExchangePropertyResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 24: this.bitField0_ |= 0x4; this.count_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ExchangePropertyResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ExchangePropertyResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ExchangePropertyResponse.class, Builder.class); } public static Parser<ExchangePropertyResponse> PARSER = (Parser<ExchangePropertyResponse>)new AbstractParser<ExchangePropertyResponse>() { public PlayerHandler.ExchangePropertyResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.ExchangePropertyResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int COUNT_FIELD_NUMBER = 3; private int count_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ExchangePropertyResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public boolean hasCount() { return ((this.bitField0_ & 0x4) == 4); } public int getCount() { return this.count_; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.count_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4) output.writeInt32(3, this.count_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt32Size(3, this.count_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ExchangePropertyResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ExchangePropertyResponse)PARSER.parseFrom(data); } public static ExchangePropertyResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ExchangePropertyResponse)PARSER.parseFrom(data, extensionRegistry); } public static ExchangePropertyResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ExchangePropertyResponse)PARSER.parseFrom(data); } public static ExchangePropertyResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ExchangePropertyResponse)PARSER.parseFrom(data, extensionRegistry); } public static ExchangePropertyResponse parseFrom(InputStream input) throws IOException { return (ExchangePropertyResponse)PARSER.parseFrom(input); } public static ExchangePropertyResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ExchangePropertyResponse)PARSER.parseFrom(input, extensionRegistry); } public static ExchangePropertyResponse parseDelimitedFrom(InputStream input) throws IOException { return (ExchangePropertyResponse)PARSER.parseDelimitedFrom(input); } public static ExchangePropertyResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ExchangePropertyResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ExchangePropertyResponse parseFrom(CodedInputStream input) throws IOException { return (ExchangePropertyResponse)PARSER.parseFrom(input); } public static ExchangePropertyResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ExchangePropertyResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ExchangePropertyResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.ExchangePropertyResponseOrBuilder {
/* 39539 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; private int count_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ExchangePropertyResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ExchangePropertyResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.ExchangePropertyResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.ExchangePropertyResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; this.count_ = 0; this.bitField0_ &= 0xFFFFFFFB; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_ExchangePropertyResponse_descriptor; } public PlayerHandler.ExchangePropertyResponse getDefaultInstanceForType() { return PlayerHandler.ExchangePropertyResponse.getDefaultInstance(); } public PlayerHandler.ExchangePropertyResponse build() { PlayerHandler.ExchangePropertyResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.ExchangePropertyResponse buildPartial() { PlayerHandler.ExchangePropertyResponse result = new PlayerHandler.ExchangePropertyResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;  result.count_ = this.count_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.ExchangePropertyResponse) return mergeFrom((PlayerHandler.ExchangePropertyResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.ExchangePropertyResponse other) { if (other == PlayerHandler.ExchangePropertyResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  if (other.hasCount()) setCount(other.getCount());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.ExchangePropertyResponse parsedMessage = null; try { parsedMessage = (PlayerHandler.ExchangePropertyResponse)PlayerHandler.ExchangePropertyResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.ExchangePropertyResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = PlayerHandler.ExchangePropertyResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public boolean hasCount() { return ((this.bitField0_ & 0x4) == 4); } public int getCount() { return this.count_; } public Builder setCount(int value) { this.bitField0_ |= 0x4; this.count_ = value; onChanged(); return this; } public Builder clearCount() { this.bitField0_ &= 0xFFFFFFFB; this.count_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class PlayerDynamicPush
/*       */     extends GeneratedMessage
/*       */     implements PlayerDynamicPushOrBuilder
/*       */   {
/*       */     private final UnknownFieldSet unknownFields;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private PlayerDynamicPush(GeneratedMessage.Builder<?> builder) {
/*       */       super(builder);
/*       */       this.memoizedIsInitialized = -1;
/*       */       this.memoizedSerializedSize = -1;
/*       */       this.unknownFields = builder.getUnknownFields();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private PlayerDynamicPush(boolean noInit) {
/*       */       this.memoizedIsInitialized = -1;
/*       */       this.memoizedSerializedSize = -1;
/*       */       this.unknownFields = UnknownFieldSet.getDefaultInstance();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static PlayerDynamicPush getDefaultInstance() {
/*       */       return defaultInstance;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public PlayerDynamicPush getDefaultInstanceForType() {
/*       */       return defaultInstance;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public final UnknownFieldSet getUnknownFields() {
/*       */       return this.unknownFields;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private PlayerDynamicPush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       this.memoizedIsInitialized = -1;
/*       */       this.memoizedSerializedSize = -1;
/*       */       initFields();
/*       */       int mutable_bitField0_ = 0;
/*       */       UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
/*       */       try {
/*       */         boolean done = false;
/*       */         while (!done) {
/*       */           int tag = input.readTag();
/*       */           switch (tag) {
/*       */             case 0:
/*       */               done = true;
/*       */               break;
/*       */             case 18:
/*       */               if ((mutable_bitField0_ & 0x1) != 1) {
/*       */                 this.s2CData_ = new ArrayList<>();
/*       */                 mutable_bitField0_ |= 0x1;
/*       */               } 
/*       */               this.s2CData_.add(input.readMessage(Common.PropertyStruct.PARSER, extensionRegistry));
/*       */               break;
/*       */           } 
/*       */         } 
/*       */       } catch (InvalidProtocolBufferException e) {
/*       */         throw e.setUnfinishedMessage(this);
/*       */       } catch (IOException e) {
/*       */         throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
/*       */       } finally {
/*       */         if ((mutable_bitField0_ & 0x1) == 1) {
/*       */           this.s2CData_ = Collections.unmodifiableList(this.s2CData_);
/*       */         }
/*       */         this.unknownFields = unknownFields.build();
/*       */         makeExtensionsImmutable();
/*       */       } 
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static final Descriptors.Descriptor getDescriptor() {
/*       */       return PlayerHandler.internal_static_pomelo_area_PlayerDynamicPush_descriptor;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */       return PlayerHandler.internal_static_pomelo_area_PlayerDynamicPush_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerDynamicPush.class, Builder.class);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static Parser<PlayerDynamicPush> PARSER = (Parser<PlayerDynamicPush>)new AbstractParser<PlayerDynamicPush>()
/*       */       {
/*       */         public PlayerHandler.PlayerDynamicPush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */           return new PlayerHandler.PlayerDynamicPush(input, extensionRegistry);
/*       */         }
/*       */       };
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static final int S2C_DATA_FIELD_NUMBER = 2;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private List<Common.PropertyStruct> s2CData_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private byte memoizedIsInitialized;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private int memoizedSerializedSize;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private static final long serialVersionUID = 0L;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public Parser<PlayerDynamicPush> getParserForType() {
/*       */       return PARSER;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public List<Common.PropertyStruct> getS2CDataList() {
/*       */       return this.s2CData_;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public List<? extends Common.PropertyStructOrBuilder> getS2CDataOrBuilderList() {
/*       */       return (List)this.s2CData_;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getS2CDataCount() {
/*       */       return this.s2CData_.size();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public Common.PropertyStruct getS2CData(int index) {
/*       */       return this.s2CData_.get(index);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public Common.PropertyStructOrBuilder getS2CDataOrBuilder(int index) {
/*       */       return (Common.PropertyStructOrBuilder)this.s2CData_.get(index);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/* 40244 */     private static final PlayerDynamicPush defaultInstance = new PlayerDynamicPush(true); private void initFields() { this.s2CData_ = Collections.emptyList(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  for (int i = 0; i < getS2CDataCount(); i++) { if (!getS2CData(i).isInitialized()) { this.memoizedIsInitialized = 0; return false; }  }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); for (int i = 0; i < this.s2CData_.size(); i++) output.writeMessage(2, (MessageLite)this.s2CData_.get(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; for (int i = 0; i < this.s2CData_.size(); i++) size += CodedOutputStream.computeMessageSize(2, (MessageLite)this.s2CData_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static PlayerDynamicPush parseFrom(ByteString data) throws InvalidProtocolBufferException { return (PlayerDynamicPush)PARSER.parseFrom(data); } public static PlayerDynamicPush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PlayerDynamicPush)PARSER.parseFrom(data, extensionRegistry); } public static PlayerDynamicPush parseFrom(byte[] data) throws InvalidProtocolBufferException { return (PlayerDynamicPush)PARSER.parseFrom(data); } public static PlayerDynamicPush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PlayerDynamicPush)PARSER.parseFrom(data, extensionRegistry); } public static PlayerDynamicPush parseFrom(InputStream input) throws IOException { return (PlayerDynamicPush)PARSER.parseFrom(input); } public static PlayerDynamicPush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PlayerDynamicPush)PARSER.parseFrom(input, extensionRegistry); } public static PlayerDynamicPush parseDelimitedFrom(InputStream input) throws IOException { return (PlayerDynamicPush)PARSER.parseDelimitedFrom(input); } public static PlayerDynamicPush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PlayerDynamicPush)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static PlayerDynamicPush parseFrom(CodedInputStream input) throws IOException { return (PlayerDynamicPush)PARSER.parseFrom(input); } public static PlayerDynamicPush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PlayerDynamicPush)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(PlayerDynamicPush prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.PlayerDynamicPushOrBuilder { private int bitField0_; private List<Common.PropertyStruct> s2CData_; private RepeatedFieldBuilder<Common.PropertyStruct, Common.PropertyStruct.Builder, Common.PropertyStructOrBuilder> s2CDataBuilder_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_PlayerDynamicPush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_PlayerDynamicPush_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.PlayerDynamicPush.class, Builder.class); } private Builder() { this.s2CData_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CData_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.PlayerDynamicPush.alwaysUseFieldBuilders) getS2CDataFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); if (this.s2CDataBuilder_ == null) { this.s2CData_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFE; } else { this.s2CDataBuilder_.clear(); }  return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_PlayerDynamicPush_descriptor; } public PlayerHandler.PlayerDynamicPush getDefaultInstanceForType() { return PlayerHandler.PlayerDynamicPush.getDefaultInstance(); } public PlayerHandler.PlayerDynamicPush build() { PlayerHandler.PlayerDynamicPush result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.PlayerDynamicPush buildPartial() { PlayerHandler.PlayerDynamicPush result = new PlayerHandler.PlayerDynamicPush(this); int from_bitField0_ = this.bitField0_; if (this.s2CDataBuilder_ == null) { if ((this.bitField0_ & 0x1) == 1) { this.s2CData_ = Collections.unmodifiableList(this.s2CData_); this.bitField0_ &= 0xFFFFFFFE; }  result.s2CData_ = this.s2CData_; } else { result.s2CData_ = this.s2CDataBuilder_.build(); }  onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.PlayerDynamicPush) return mergeFrom((PlayerHandler.PlayerDynamicPush)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.PlayerDynamicPush other) { if (other == PlayerHandler.PlayerDynamicPush.getDefaultInstance()) return this;  if (this.s2CDataBuilder_ == null) { if (!other.s2CData_.isEmpty()) { if (this.s2CData_.isEmpty()) { this.s2CData_ = other.s2CData_; this.bitField0_ &= 0xFFFFFFFE; } else { ensureS2CDataIsMutable(); this.s2CData_.addAll(other.s2CData_); }  onChanged(); }  } else if (!other.s2CData_.isEmpty()) { if (this.s2CDataBuilder_.isEmpty()) { this.s2CDataBuilder_.dispose(); this.s2CDataBuilder_ = null; this.s2CData_ = other.s2CData_; this.bitField0_ &= 0xFFFFFFFE; this.s2CDataBuilder_ = PlayerHandler.PlayerDynamicPush.alwaysUseFieldBuilders ? getS2CDataFieldBuilder() : null; } else { this.s2CDataBuilder_.addAllMessages(other.s2CData_); }  }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { for (int i = 0; i < getS2CDataCount(); i++) { if (!getS2CData(i).isInitialized()) return false;  }  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.PlayerDynamicPush parsedMessage = null; try { parsedMessage = (PlayerHandler.PlayerDynamicPush)PlayerHandler.PlayerDynamicPush.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.PlayerDynamicPush)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } private void ensureS2CDataIsMutable() { if ((this.bitField0_ & 0x1) != 1) { this.s2CData_ = new ArrayList<>(this.s2CData_); this.bitField0_ |= 0x1; }  } public List<Common.PropertyStruct> getS2CDataList() { if (this.s2CDataBuilder_ == null) return Collections.unmodifiableList(this.s2CData_);  return this.s2CDataBuilder_.getMessageList(); } public int getS2CDataCount() { if (this.s2CDataBuilder_ == null) return this.s2CData_.size();  return this.s2CDataBuilder_.getCount(); } public Common.PropertyStruct getS2CData(int index) { if (this.s2CDataBuilder_ == null) return this.s2CData_.get(index);  return (Common.PropertyStruct)this.s2CDataBuilder_.getMessage(index); } public Builder setS2CData(int index, Common.PropertyStruct value) { if (this.s2CDataBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CDataIsMutable(); this.s2CData_.set(index, value); onChanged(); } else { this.s2CDataBuilder_.setMessage(index, (GeneratedMessage)value); }  return this; } public Builder setS2CData(int index, Common.PropertyStruct.Builder builderForValue) { if (this.s2CDataBuilder_ == null) { ensureS2CDataIsMutable(); this.s2CData_.set(index, builderForValue.build()); onChanged(); } else { this.s2CDataBuilder_.setMessage(index, (GeneratedMessage)builderForValue.build()); }  return this; } public Builder addS2CData(Common.PropertyStruct value) { if (this.s2CDataBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CDataIsMutable(); this.s2CData_.add(value); onChanged(); } else { this.s2CDataBuilder_.addMessage((GeneratedMessage)value); }  return this; } public Builder addS2CData(int index, Common.PropertyStruct value) { if (this.s2CDataBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CDataIsMutable(); this.s2CData_.add(index, value); onChanged(); } else { this.s2CDataBuilder_.addMessage(index, (GeneratedMessage)value); }  return this; } public Builder addS2CData(Common.PropertyStruct.Builder builderForValue) { if (this.s2CDataBuilder_ == null) { ensureS2CDataIsMutable(); this.s2CData_.add(builderForValue.build()); onChanged(); } else { this.s2CDataBuilder_.addMessage((GeneratedMessage)builderForValue.build()); }  return this; } public Builder addS2CData(int index, Common.PropertyStruct.Builder builderForValue) { if (this.s2CDataBuilder_ == null) { ensureS2CDataIsMutable(); this.s2CData_.add(index, builderForValue.build()); onChanged(); } else { this.s2CDataBuilder_.addMessage(index, (GeneratedMessage)builderForValue.build()); }  return this; } public Builder addAllS2CData(Iterable<? extends Common.PropertyStruct> values) { if (this.s2CDataBuilder_ == null) { ensureS2CDataIsMutable(); AbstractMessageLite.Builder.addAll(values, this.s2CData_); onChanged(); } else { this.s2CDataBuilder_.addAllMessages(values); }  return this; } public Builder clearS2CData() { if (this.s2CDataBuilder_ == null) { this.s2CData_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFE; onChanged(); } else { this.s2CDataBuilder_.clear(); }  return this; } public Builder removeS2CData(int index) { if (this.s2CDataBuilder_ == null) { ensureS2CDataIsMutable(); this.s2CData_.remove(index); onChanged(); } else { this.s2CDataBuilder_.remove(index); }  return this; } public Common.PropertyStruct.Builder getS2CDataBuilder(int index) { return (Common.PropertyStruct.Builder)getS2CDataFieldBuilder().getBuilder(index); } public Common.PropertyStructOrBuilder getS2CDataOrBuilder(int index) { if (this.s2CDataBuilder_ == null) return (Common.PropertyStructOrBuilder)this.s2CData_.get(index);  return (Common.PropertyStructOrBuilder)this.s2CDataBuilder_.getMessageOrBuilder(index); } public List<? extends Common.PropertyStructOrBuilder> getS2CDataOrBuilderList() { if (this.s2CDataBuilder_ != null)
/* 40245 */           return this.s2CDataBuilder_.getMessageOrBuilderList();  return (List)Collections.unmodifiableList(this.s2CData_); } public Common.PropertyStruct.Builder addS2CDataBuilder() { return (Common.PropertyStruct.Builder)getS2CDataFieldBuilder().addBuilder((GeneratedMessage)Common.PropertyStruct.getDefaultInstance()); } public Common.PropertyStruct.Builder addS2CDataBuilder(int index) { return (Common.PropertyStruct.Builder)getS2CDataFieldBuilder().addBuilder(index, (GeneratedMessage)Common.PropertyStruct.getDefaultInstance()); } public List<Common.PropertyStruct.Builder> getS2CDataBuilderList() { return getS2CDataFieldBuilder().getBuilderList(); } private RepeatedFieldBuilder<Common.PropertyStruct, Common.PropertyStruct.Builder, Common.PropertyStructOrBuilder> getS2CDataFieldBuilder() { if (this.s2CDataBuilder_ == null) { this.s2CDataBuilder_ = new RepeatedFieldBuilder(this.s2CData_, ((this.bitField0_ & 0x1) == 1), getParentForChildren(), isClean()); this.s2CData_ = null; }  return this.s2CDataBuilder_; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class PlayerRelivePush
/*       */     extends GeneratedMessage
/*       */     implements PlayerRelivePushOrBuilder
/*       */   {
/* 42142 */     private static final PlayerRelivePush defaultInstance = new PlayerRelivePush(true); private final UnknownFieldSet unknownFields; private PlayerRelivePush(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private PlayerRelivePush(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static PlayerRelivePush getDefaultInstance() { return defaultInstance; } public PlayerRelivePush getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private PlayerRelivePush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.type_ = input.readInt32(); break;case 16: this.bitField0_ |= 0x2; this.btn_ = input.readInt32(); break;case 24: this.bitField0_ |= 0x4; this.countDown_ = input.readInt32(); break;case 32: this.bitField0_ |= 0x8; this.op_ = input.readInt32(); break;case 40: this.bitField0_ |= 0x10; this.cbType_ = input.readInt32(); break;case 48: this.bitField0_ |= 0x20; this.currCount_ = input.readInt32(); break;case 56: this.bitField0_ |= 0x40; this.totalCount_ = input.readInt32(); break;case 64: this.bitField0_ |= 0x80; this.cooltime_ = input.readInt32(); break;case 74: bs = input.readBytes(); this.bitField0_ |= 0x100; this.costStr_ = bs; break;case 80: this.bitField0_ |= 0x200; this.payConfirm_ = input.readInt32(); break;case 88: this.bitField0_ |= 0x400; this.btnSafe_ = input.readInt32(); break;case 96: this.bitField0_ |= 0x800; this.btnCity_ = input.readInt32(); break;case 104: this.bitField0_ |= 0x1000; this.btnCurr_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_PlayerRelivePush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_PlayerRelivePush_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerRelivePush.class, Builder.class); } public static Parser<PlayerRelivePush> PARSER = (Parser<PlayerRelivePush>)new AbstractParser<PlayerRelivePush>() { public PlayerHandler.PlayerRelivePush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.PlayerRelivePush(input, extensionRegistry); } }
/* 42143 */     ; private int bitField0_; public static final int TYPE_FIELD_NUMBER = 1; private int type_; public static final int BTN_FIELD_NUMBER = 2; private int btn_; public static final int COUNTDOWN_FIELD_NUMBER = 3; private int countDown_; public static final int OP_FIELD_NUMBER = 4; private int op_; public static final int CBTYPE_FIELD_NUMBER = 5; private int cbType_; public static final int CURRCOUNT_FIELD_NUMBER = 6; private int currCount_; public static final int TOTALCOUNT_FIELD_NUMBER = 7; private int totalCount_; public static final int COOLTIME_FIELD_NUMBER = 8; private int cooltime_; public static final int COSTSTR_FIELD_NUMBER = 9; private Object costStr_; public static final int PAYCONFIRM_FIELD_NUMBER = 10; private int payConfirm_; public static final int BTNSAFE_FIELD_NUMBER = 11; private int btnSafe_; public static final int BTNCITY_FIELD_NUMBER = 12; private int btnCity_; public static final int BTNCURR_FIELD_NUMBER = 13; private int btnCurr_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<PlayerRelivePush> getParserForType() { return PARSER; } public boolean hasType() { return ((this.bitField0_ & 0x1) == 1); } public int getType() { return this.type_; } public boolean hasBtn() { return ((this.bitField0_ & 0x2) == 2); } static { defaultInstance.initFields(); } public int getBtn() { return this.btn_; } public boolean hasCountDown() { return ((this.bitField0_ & 0x4) == 4); } public int getCountDown() { return this.countDown_; } public boolean hasOp() { return ((this.bitField0_ & 0x8) == 8); } public int getOp() { return this.op_; } public boolean hasCbType() { return ((this.bitField0_ & 0x10) == 16); } public int getCbType() { return this.cbType_; } public boolean hasCurrCount() { return ((this.bitField0_ & 0x20) == 32); } public int getCurrCount() { return this.currCount_; } public boolean hasTotalCount() { return ((this.bitField0_ & 0x40) == 64); } public int getTotalCount() { return this.totalCount_; } public boolean hasCooltime() { return ((this.bitField0_ & 0x80) == 128); } public int getCooltime() { return this.cooltime_; } public boolean hasCostStr() { return ((this.bitField0_ & 0x100) == 256); } public String getCostStr() { Object ref = this.costStr_;
/*       */       if (ref instanceof String)
/*       */         return (String)ref; 
/*       */       ByteString bs = (ByteString)ref;
/*       */       String s = bs.toStringUtf8();
/*       */       if (bs.isValidUtf8())
/*       */         this.costStr_ = s; 
/*       */       return s; } public ByteString getCostStrBytes() { Object ref = this.costStr_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.costStr_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref; } public boolean hasPayConfirm() { return ((this.bitField0_ & 0x200) == 512); } public int getPayConfirm() { return this.payConfirm_; } public boolean hasBtnSafe() { return ((this.bitField0_ & 0x400) == 1024); } public int getBtnSafe() { return this.btnSafe_; } public boolean hasBtnCity() { return ((this.bitField0_ & 0x800) == 2048); } public int getBtnCity() { return this.btnCity_; } public boolean hasBtnCurr() { return ((this.bitField0_ & 0x1000) == 4096); } public int getBtnCurr() { return this.btnCurr_; } private void initFields() { this.type_ = 0;
/*       */       this.btn_ = 0;
/*       */       this.countDown_ = 0;
/*       */       this.op_ = 0;
/*       */       this.cbType_ = 0;
/*       */       this.currCount_ = 0;
/*       */       this.totalCount_ = 0;
/*       */       this.cooltime_ = 0;
/*       */       this.costStr_ = "";
/*       */       this.payConfirm_ = 0;
/*       */       this.btnSafe_ = 0;
/*       */       this.btnCity_ = 0;
/*       */       this.btnCurr_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1)
/*       */         return true; 
/*       */       if (isInitialized == 0)
/*       */         return false; 
/*       */       if (!hasType()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasBtn()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasCountDown()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasOp()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasCbType()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1)
/*       */         output.writeInt32(1, this.type_); 
/*       */       if ((this.bitField0_ & 0x2) == 2)
/*       */         output.writeInt32(2, this.btn_); 
/*       */       if ((this.bitField0_ & 0x4) == 4)
/*       */         output.writeInt32(3, this.countDown_); 
/*       */       if ((this.bitField0_ & 0x8) == 8)
/*       */         output.writeInt32(4, this.op_); 
/*       */       if ((this.bitField0_ & 0x10) == 16)
/*       */         output.writeInt32(5, this.cbType_); 
/*       */       if ((this.bitField0_ & 0x20) == 32)
/*       */         output.writeInt32(6, this.currCount_); 
/*       */       if ((this.bitField0_ & 0x40) == 64)
/*       */         output.writeInt32(7, this.totalCount_); 
/*       */       if ((this.bitField0_ & 0x80) == 128)
/*       */         output.writeInt32(8, this.cooltime_); 
/*       */       if ((this.bitField0_ & 0x100) == 256)
/*       */         output.writeBytes(9, getCostStrBytes()); 
/*       */       if ((this.bitField0_ & 0x200) == 512)
/*       */         output.writeInt32(10, this.payConfirm_); 
/*       */       if ((this.bitField0_ & 0x400) == 1024)
/*       */         output.writeInt32(11, this.btnSafe_); 
/*       */       if ((this.bitField0_ & 0x800) == 2048)
/*       */         output.writeInt32(12, this.btnCity_); 
/*       */       if ((this.bitField0_ & 0x1000) == 4096)
/*       */         output.writeInt32(13, this.btnCurr_); 
/*       */       getUnknownFields().writeTo(output); }
/*       */     public int getSerializedSize() { int size = this.memoizedSerializedSize;
/*       */       if (size != -1)
/*       */         return size; 
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1)
/*       */         size += CodedOutputStream.computeInt32Size(1, this.type_); 
/*       */       if ((this.bitField0_ & 0x2) == 2)
/*       */         size += CodedOutputStream.computeInt32Size(2, this.btn_); 
/*       */       if ((this.bitField0_ & 0x4) == 4)
/*       */         size += CodedOutputStream.computeInt32Size(3, this.countDown_); 
/*       */       if ((this.bitField0_ & 0x8) == 8)
/*       */         size += CodedOutputStream.computeInt32Size(4, this.op_); 
/*       */       if ((this.bitField0_ & 0x10) == 16)
/*       */         size += CodedOutputStream.computeInt32Size(5, this.cbType_); 
/*       */       if ((this.bitField0_ & 0x20) == 32)
/*       */         size += CodedOutputStream.computeInt32Size(6, this.currCount_); 
/*       */       if ((this.bitField0_ & 0x40) == 64)
/*       */         size += CodedOutputStream.computeInt32Size(7, this.totalCount_); 
/*       */       if ((this.bitField0_ & 0x80) == 128)
/*       */         size += CodedOutputStream.computeInt32Size(8, this.cooltime_); 
/*       */       if ((this.bitField0_ & 0x100) == 256)
/*       */         size += CodedOutputStream.computeBytesSize(9, getCostStrBytes()); 
/*       */       if ((this.bitField0_ & 0x200) == 512)
/*       */         size += CodedOutputStream.computeInt32Size(10, this.payConfirm_); 
/*       */       if ((this.bitField0_ & 0x400) == 1024)
/*       */         size += CodedOutputStream.computeInt32Size(11, this.btnSafe_); 
/*       */       if ((this.bitField0_ & 0x800) == 2048)
/*       */         size += CodedOutputStream.computeInt32Size(12, this.btnCity_); 
/*       */       if ((this.bitField0_ & 0x1000) == 4096)
/*       */         size += CodedOutputStream.computeInt32Size(13, this.btnCurr_); 
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size; }
/*       */     protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); }
/*       */     public static PlayerRelivePush parseFrom(ByteString data) throws InvalidProtocolBufferException { return (PlayerRelivePush)PARSER.parseFrom(data); }
/*       */     public static PlayerRelivePush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PlayerRelivePush)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static PlayerRelivePush parseFrom(byte[] data) throws InvalidProtocolBufferException { return (PlayerRelivePush)PARSER.parseFrom(data); }
/*       */     public static PlayerRelivePush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PlayerRelivePush)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static PlayerRelivePush parseFrom(InputStream input) throws IOException { return (PlayerRelivePush)PARSER.parseFrom(input); }
/*       */     public static PlayerRelivePush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PlayerRelivePush)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static PlayerRelivePush parseDelimitedFrom(InputStream input) throws IOException { return (PlayerRelivePush)PARSER.parseDelimitedFrom(input); }
/*       */     public static PlayerRelivePush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PlayerRelivePush)PARSER.parseDelimitedFrom(input, extensionRegistry); }
/*       */     public static PlayerRelivePush parseFrom(CodedInputStream input) throws IOException { return (PlayerRelivePush)PARSER.parseFrom(input); }
/*       */     public static PlayerRelivePush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PlayerRelivePush)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static Builder newBuilder() { return Builder.create(); }
/*       */     public Builder newBuilderForType() { return newBuilder(); }
/*       */     public static Builder newBuilder(PlayerRelivePush prototype) { return newBuilder().mergeFrom(prototype); }
/*       */     public Builder toBuilder() { return newBuilder(this); }
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent);
/*       */       return builder; }
/*       */     public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.PlayerRelivePushOrBuilder { private int bitField0_; private int type_; private int btn_; private int countDown_; private int op_; private int cbType_; private int currCount_; private int totalCount_; private int cooltime_; private Object costStr_; private int payConfirm_; private int btnSafe_; private int btnCity_; private int btnCurr_;
/*       */       public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_PlayerRelivePush_descriptor; }
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_PlayerRelivePush_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.PlayerRelivePush.class, Builder.class); }
/*       */       private Builder() { this.costStr_ = "";
/*       */         maybeForceBuilderInitialization(); }
/*       */       private Builder(GeneratedMessage.BuilderParent parent) { super(parent);
/*       */         this.costStr_ = "";
/*       */         maybeForceBuilderInitialization(); }
/*       */       private void maybeForceBuilderInitialization() { if (PlayerHandler.PlayerRelivePush.alwaysUseFieldBuilders); }
/*       */       private static Builder create() { return new Builder(); }
/*       */       public Builder clear() { super.clear();
/*       */         this.type_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.btn_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.countDown_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.op_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.cbType_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.currCount_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFDF;
/*       */         this.totalCount_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFBF;
/*       */         this.cooltime_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFF7F;
/*       */         this.costStr_ = "";
/*       */         this.bitField0_ &= 0xFFFFFEFF;
/*       */         this.payConfirm_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFDFF;
/*       */         this.btnSafe_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFBFF;
/*       */         this.btnCity_ = 0;
/*       */         this.bitField0_ &= 0xFFFFF7FF;
/*       */         this.btnCurr_ = 0;
/*       */         this.bitField0_ &= 0xFFFFEFFF;
/*       */         return this; }
/*       */       public Builder clone() { return create().mergeFrom(buildPartial()); }
/*       */       public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_PlayerRelivePush_descriptor; }
/*       */       public PlayerHandler.PlayerRelivePush getDefaultInstanceForType() { return PlayerHandler.PlayerRelivePush.getDefaultInstance(); }
/*       */       public PlayerHandler.PlayerRelivePush build() { PlayerHandler.PlayerRelivePush result = buildPartial();
/*       */         if (!result.isInitialized())
/*       */           throw newUninitializedMessageException(result); 
/*       */         return result; }
/*       */       public PlayerHandler.PlayerRelivePush buildPartial() { PlayerHandler.PlayerRelivePush result = new PlayerHandler.PlayerRelivePush(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1)
/*       */           to_bitField0_ |= 0x1; 
/*       */         result.type_ = this.type_;
/*       */         if ((from_bitField0_ & 0x2) == 2)
/*       */           to_bitField0_ |= 0x2; 
/*       */         result.btn_ = this.btn_;
/*       */         if ((from_bitField0_ & 0x4) == 4)
/*       */           to_bitField0_ |= 0x4; 
/*       */         result.countDown_ = this.countDown_;
/*       */         if ((from_bitField0_ & 0x8) == 8)
/*       */           to_bitField0_ |= 0x8; 
/*       */         result.op_ = this.op_;
/*       */         if ((from_bitField0_ & 0x10) == 16)
/*       */           to_bitField0_ |= 0x10; 
/*       */         result.cbType_ = this.cbType_;
/*       */         if ((from_bitField0_ & 0x20) == 32)
/*       */           to_bitField0_ |= 0x20; 
/*       */         result.currCount_ = this.currCount_;
/*       */         if ((from_bitField0_ & 0x40) == 64)
/*       */           to_bitField0_ |= 0x40; 
/*       */         result.totalCount_ = this.totalCount_;
/*       */         if ((from_bitField0_ & 0x80) == 128)
/*       */           to_bitField0_ |= 0x80; 
/*       */         result.cooltime_ = this.cooltime_;
/*       */         if ((from_bitField0_ & 0x100) == 256)
/*       */           to_bitField0_ |= 0x100; 
/*       */         result.costStr_ = this.costStr_;
/*       */         if ((from_bitField0_ & 0x200) == 512)
/*       */           to_bitField0_ |= 0x200; 
/*       */         result.payConfirm_ = this.payConfirm_;
/*       */         if ((from_bitField0_ & 0x400) == 1024)
/*       */           to_bitField0_ |= 0x400; 
/*       */         result.btnSafe_ = this.btnSafe_;
/*       */         if ((from_bitField0_ & 0x800) == 2048)
/*       */           to_bitField0_ |= 0x800; 
/*       */         result.btnCity_ = this.btnCity_;
/*       */         if ((from_bitField0_ & 0x1000) == 4096)
/*       */           to_bitField0_ |= 0x1000; 
/*       */         result.btnCurr_ = this.btnCurr_;
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result; }
/*       */       public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.PlayerRelivePush)
/*       */           return mergeFrom((PlayerHandler.PlayerRelivePush)other); 
/*       */         super.mergeFrom(other);
/*       */         return this; }
/*       */       public Builder mergeFrom(PlayerHandler.PlayerRelivePush other) { if (other == PlayerHandler.PlayerRelivePush.getDefaultInstance())
/*       */           return this; 
/*       */         if (other.hasType())
/*       */           setType(other.getType()); 
/*       */         if (other.hasBtn())
/*       */           setBtn(other.getBtn()); 
/*       */         if (other.hasCountDown())
/*       */           setCountDown(other.getCountDown()); 
/*       */         if (other.hasOp())
/*       */           setOp(other.getOp()); 
/*       */         if (other.hasCbType())
/*       */           setCbType(other.getCbType()); 
/*       */         if (other.hasCurrCount())
/*       */           setCurrCount(other.getCurrCount()); 
/*       */         if (other.hasTotalCount())
/*       */           setTotalCount(other.getTotalCount()); 
/*       */         if (other.hasCooltime())
/*       */           setCooltime(other.getCooltime()); 
/*       */         if (other.hasCostStr()) {
/*       */           this.bitField0_ |= 0x100;
/*       */           this.costStr_ = other.costStr_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasPayConfirm())
/*       */           setPayConfirm(other.getPayConfirm()); 
/*       */         if (other.hasBtnSafe())
/*       */           setBtnSafe(other.getBtnSafe()); 
/*       */         if (other.hasBtnCity())
/*       */           setBtnCity(other.getBtnCity()); 
/*       */         if (other.hasBtnCurr())
/*       */           setBtnCurr(other.getBtnCurr()); 
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this; }
/*       */       public final boolean isInitialized() { if (!hasType())
/*       */           return false; 
/*       */         if (!hasBtn())
/*       */           return false; 
/*       */         if (!hasCountDown())
/*       */           return false; 
/*       */         if (!hasOp())
/*       */           return false; 
/*       */         if (!hasCbType())
/*       */           return false; 
/*       */         return true; }
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.PlayerRelivePush parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (PlayerHandler.PlayerRelivePush)PlayerHandler.PlayerRelivePush.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (PlayerHandler.PlayerRelivePush)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null)
/*       */             mergeFrom(parsedMessage); 
/*       */         } 
/*       */         return this; }
/*       */       public boolean hasType() { return ((this.bitField0_ & 0x1) == 1); }
/*       */       public int getType() { return this.type_; }
/*       */       public Builder setType(int value) { this.bitField0_ |= 0x1;
/*       */         this.type_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearType() { this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.type_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasBtn() { return ((this.bitField0_ & 0x2) == 2); }
/*       */       public int getBtn() { return this.btn_; }
/*       */       public Builder setBtn(int value) { this.bitField0_ |= 0x2;
/*       */         this.btn_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearBtn() { this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.btn_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasCountDown() { return ((this.bitField0_ & 0x4) == 4); }
/*       */       public int getCountDown() { return this.countDown_; }
/*       */       public Builder setCountDown(int value) { this.bitField0_ |= 0x4;
/*       */         this.countDown_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearCountDown() { this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.countDown_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasOp() { return ((this.bitField0_ & 0x8) == 8); }
/*       */       public int getOp() { return this.op_; }
/*       */       public Builder setOp(int value) { this.bitField0_ |= 0x8;
/*       */         this.op_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearOp() { this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.op_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasCbType() { return ((this.bitField0_ & 0x10) == 16); }
/*       */       public int getCbType() { return this.cbType_; }
/*       */       public Builder setCbType(int value) { this.bitField0_ |= 0x10;
/*       */         this.cbType_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearCbType() { this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.cbType_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasCurrCount() { return ((this.bitField0_ & 0x20) == 32); }
/*       */       public int getCurrCount() { return this.currCount_; }
/*       */       public Builder setCurrCount(int value) { this.bitField0_ |= 0x20;
/*       */         this.currCount_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearCurrCount() { this.bitField0_ &= 0xFFFFFFDF;
/*       */         this.currCount_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasTotalCount() { return ((this.bitField0_ & 0x40) == 64); }
/*       */       public int getTotalCount() { return this.totalCount_; }
/*       */       public Builder setTotalCount(int value) { this.bitField0_ |= 0x40;
/*       */         this.totalCount_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearTotalCount() { this.bitField0_ &= 0xFFFFFFBF;
/*       */         this.totalCount_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasCooltime() {
/*       */         return ((this.bitField0_ & 0x80) == 128);
/*       */       }
/*       */       public int getCooltime() {
/*       */         return this.cooltime_;
/*       */       }
/*       */       public Builder setCooltime(int value) {
/*       */         this.bitField0_ |= 0x80;
/*       */         this.cooltime_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder clearCooltime() {
/*       */         this.bitField0_ &= 0xFFFFFF7F;
/*       */         this.cooltime_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public boolean hasCostStr() {
/*       */         return ((this.bitField0_ & 0x100) == 256);
/*       */       }
/*       */       public String getCostStr() {
/*       */         Object ref = this.costStr_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.costStr_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */       public ByteString getCostStrBytes() {
/*       */         Object ref = this.costStr_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.costStr_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */       public Builder setCostStr(String value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x100;
/*       */         this.costStr_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder clearCostStr() {
/*       */         this.bitField0_ &= 0xFFFFFEFF;
/*       */         this.costStr_ = PlayerHandler.PlayerRelivePush.getDefaultInstance().getCostStr();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder setCostStrBytes(ByteString value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x100;
/*       */         this.costStr_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public boolean hasPayConfirm() {
/*       */         return ((this.bitField0_ & 0x200) == 512);
/*       */       }
/*       */       public int getPayConfirm() {
/*       */         return this.payConfirm_;
/*       */       }
/*       */       public Builder setPayConfirm(int value) {
/*       */         this.bitField0_ |= 0x200;
/*       */         this.payConfirm_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder clearPayConfirm() {
/*       */         this.bitField0_ &= 0xFFFFFDFF;
/*       */         this.payConfirm_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public boolean hasBtnSafe() {
/*       */         return ((this.bitField0_ & 0x400) == 1024);
/*       */       }
/*       */       public int getBtnSafe() {
/*       */         return this.btnSafe_;
/*       */       }
/*       */       public Builder setBtnSafe(int value) {
/*       */         this.bitField0_ |= 0x400;
/*       */         this.btnSafe_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder clearBtnSafe() {
/*       */         this.bitField0_ &= 0xFFFFFBFF;
/*       */         this.btnSafe_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public boolean hasBtnCity() {
/*       */         return ((this.bitField0_ & 0x800) == 2048);
/*       */       }
/*       */       public int getBtnCity() {
/*       */         return this.btnCity_;
/*       */       }
/*       */       public Builder setBtnCity(int value) {
/*       */         this.bitField0_ |= 0x800;
/*       */         this.btnCity_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder clearBtnCity() {
/*       */         this.bitField0_ &= 0xFFFFF7FF;
/*       */         this.btnCity_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public boolean hasBtnCurr() {
/*       */         return ((this.bitField0_ & 0x1000) == 4096);
/*       */       }
/*       */       public int getBtnCurr() {
/*       */         return this.btnCurr_;
/*       */       }
/*       */       public Builder setBtnCurr(int value) {
/*       */         this.bitField0_ |= 0x1000;
/*       */         this.btnCurr_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder clearBtnCurr() {
/*       */         this.bitField0_ &= 0xFFFFEFFF;
/*       */         this.btnCurr_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       } } }
/* 42626 */   public static final class PlayerSaverRebirthPush extends GeneratedMessage implements PlayerSaverRebirthPushOrBuilder { private static final PlayerSaverRebirthPush defaultInstance = new PlayerSaverRebirthPush(true); private final UnknownFieldSet unknownFields; private PlayerSaverRebirthPush(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private PlayerSaverRebirthPush(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static PlayerSaverRebirthPush getDefaultInstance() { return defaultInstance; } public PlayerSaverRebirthPush getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private PlayerSaverRebirthPush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x1; this.saverName_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_PlayerSaverRebirthPush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_PlayerSaverRebirthPush_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerSaverRebirthPush.class, Builder.class); } public static Parser<PlayerSaverRebirthPush> PARSER = (Parser<PlayerSaverRebirthPush>)new AbstractParser<PlayerSaverRebirthPush>() { public PlayerHandler.PlayerSaverRebirthPush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.PlayerSaverRebirthPush(input, extensionRegistry); } }; private int bitField0_; public static final int SAVERNAME_FIELD_NUMBER = 2; private Object saverName_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<PlayerSaverRebirthPush> getParserForType() { return PARSER; } public boolean hasSaverName() { return ((this.bitField0_ & 0x1) == 1); } public String getSaverName() { Object ref = this.saverName_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.saverName_ = s;  return s; } public ByteString getSaverNameBytes() { Object ref = this.saverName_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.saverName_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.saverName_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasSaverName()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(2, getSaverNameBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(2, getSaverNameBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static PlayerSaverRebirthPush parseFrom(ByteString data) throws InvalidProtocolBufferException { return (PlayerSaverRebirthPush)PARSER.parseFrom(data); } public static PlayerSaverRebirthPush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PlayerSaverRebirthPush)PARSER.parseFrom(data, extensionRegistry); } public static PlayerSaverRebirthPush parseFrom(byte[] data) throws InvalidProtocolBufferException { return (PlayerSaverRebirthPush)PARSER.parseFrom(data); } public static PlayerSaverRebirthPush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PlayerSaverRebirthPush)PARSER.parseFrom(data, extensionRegistry); } public static PlayerSaverRebirthPush parseFrom(InputStream input) throws IOException { return (PlayerSaverRebirthPush)PARSER.parseFrom(input); } public static PlayerSaverRebirthPush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PlayerSaverRebirthPush)PARSER.parseFrom(input, extensionRegistry); } public static PlayerSaverRebirthPush parseDelimitedFrom(InputStream input) throws IOException { return (PlayerSaverRebirthPush)PARSER.parseDelimitedFrom(input); } public static PlayerSaverRebirthPush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PlayerSaverRebirthPush)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static PlayerSaverRebirthPush parseFrom(CodedInputStream input) throws IOException { return (PlayerSaverRebirthPush)PARSER.parseFrom(input); } public static PlayerSaverRebirthPush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PlayerSaverRebirthPush)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(PlayerSaverRebirthPush prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.PlayerSaverRebirthPushOrBuilder {
/* 42627 */       private int bitField0_; private Object saverName_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_PlayerSaverRebirthPush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_PlayerSaverRebirthPush_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.PlayerSaverRebirthPush.class, Builder.class); } private Builder() { this.saverName_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.saverName_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.PlayerSaverRebirthPush.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.saverName_ = ""; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_PlayerSaverRebirthPush_descriptor; } public PlayerHandler.PlayerSaverRebirthPush getDefaultInstanceForType() { return PlayerHandler.PlayerSaverRebirthPush.getDefaultInstance(); } public PlayerHandler.PlayerSaverRebirthPush build() { PlayerHandler.PlayerSaverRebirthPush result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.PlayerSaverRebirthPush buildPartial() { PlayerHandler.PlayerSaverRebirthPush result = new PlayerHandler.PlayerSaverRebirthPush(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.saverName_ = this.saverName_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.PlayerSaverRebirthPush) return mergeFrom((PlayerHandler.PlayerSaverRebirthPush)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.PlayerSaverRebirthPush other) { if (other == PlayerHandler.PlayerSaverRebirthPush.getDefaultInstance()) return this;  if (other.hasSaverName()) { this.bitField0_ |= 0x1; this.saverName_ = other.saverName_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasSaverName()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.PlayerSaverRebirthPush parsedMessage = null; try { parsedMessage = (PlayerHandler.PlayerSaverRebirthPush)PlayerHandler.PlayerSaverRebirthPush.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.PlayerSaverRebirthPush)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasSaverName() { return ((this.bitField0_ & 0x1) == 1); } public String getSaverName() { Object ref = this.saverName_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.saverName_ = s;  return s; }  return (String)ref; } public ByteString getSaverNameBytes() { Object ref = this.saverName_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.saverName_ = b; return b; }  return (ByteString)ref; } public Builder setSaverName(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.saverName_ = value; onChanged(); return this; } public Builder clearSaverName() { this.bitField0_ &= 0xFFFFFFFE; this.saverName_ = PlayerHandler.PlayerSaverRebirthPush.getDefaultInstance().getSaverName(); onChanged(); return this; } public Builder setSaverNameBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.saverName_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */      }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class SimulateDataPush
/*       */     extends GeneratedMessage
/*       */     implements SimulateDataPushOrBuilder
/*       */   {
/* 43314 */     private static final SimulateDataPush defaultInstance = new SimulateDataPush(true); private final UnknownFieldSet unknownFields; private SimulateDataPush(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private SimulateDataPush(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static SimulateDataPush getDefaultInstance() { return defaultInstance; } public SimulateDataPush getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private SimulateDataPush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 18: if ((mutable_bitField0_ & 0x1) != 1) { this.s2CItems_ = new ArrayList<>(); mutable_bitField0_ |= 0x1; }  this.s2CItems_.add(input.readMessage(ItemOuterClass.MiniItem.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x1) == 1) this.s2CItems_ = Collections.unmodifiableList(this.s2CItems_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_SimulateDataPush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_SimulateDataPush_fieldAccessorTable.ensureFieldAccessorsInitialized(SimulateDataPush.class, Builder.class); } public static Parser<SimulateDataPush> PARSER = (Parser<SimulateDataPush>)new AbstractParser<SimulateDataPush>() { public PlayerHandler.SimulateDataPush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.SimulateDataPush(input, extensionRegistry); } }; public static final int S2C_ITEMS_FIELD_NUMBER = 2; private List<ItemOuterClass.MiniItem> s2CItems_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<SimulateDataPush> getParserForType() { return PARSER; } public List<ItemOuterClass.MiniItem> getS2CItemsList() { return this.s2CItems_; } public List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CItemsOrBuilderList() { return (List)this.s2CItems_; } public int getS2CItemsCount() { return this.s2CItems_.size(); } public ItemOuterClass.MiniItem getS2CItems(int index) { return this.s2CItems_.get(index); } public ItemOuterClass.MiniItemOrBuilder getS2CItemsOrBuilder(int index) { return (ItemOuterClass.MiniItemOrBuilder)this.s2CItems_.get(index); } private void initFields() { this.s2CItems_ = Collections.emptyList(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  for (int i = 0; i < getS2CItemsCount(); i++) { if (!getS2CItems(i).isInitialized()) { this.memoizedIsInitialized = 0; return false; }  }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); for (int i = 0; i < this.s2CItems_.size(); i++) output.writeMessage(2, (MessageLite)this.s2CItems_.get(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; for (int i = 0; i < this.s2CItems_.size(); i++) size += CodedOutputStream.computeMessageSize(2, (MessageLite)this.s2CItems_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static SimulateDataPush parseFrom(ByteString data) throws InvalidProtocolBufferException { return (SimulateDataPush)PARSER.parseFrom(data); } public static SimulateDataPush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (SimulateDataPush)PARSER.parseFrom(data, extensionRegistry); } public static SimulateDataPush parseFrom(byte[] data) throws InvalidProtocolBufferException { return (SimulateDataPush)PARSER.parseFrom(data); } public static SimulateDataPush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (SimulateDataPush)PARSER.parseFrom(data, extensionRegistry); } public static SimulateDataPush parseFrom(InputStream input) throws IOException { return (SimulateDataPush)PARSER.parseFrom(input); } public static SimulateDataPush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (SimulateDataPush)PARSER.parseFrom(input, extensionRegistry); } public static SimulateDataPush parseDelimitedFrom(InputStream input) throws IOException { return (SimulateDataPush)PARSER.parseDelimitedFrom(input); } public static SimulateDataPush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (SimulateDataPush)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static SimulateDataPush parseFrom(CodedInputStream input) throws IOException { return (SimulateDataPush)PARSER.parseFrom(input); } public static SimulateDataPush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (SimulateDataPush)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(SimulateDataPush prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.SimulateDataPushOrBuilder {
/* 43315 */       private int bitField0_; private List<ItemOuterClass.MiniItem> s2CItems_; private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> s2CItemsBuilder_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_SimulateDataPush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_SimulateDataPush_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.SimulateDataPush.class, Builder.class); } private Builder() { this.s2CItems_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CItems_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.SimulateDataPush.alwaysUseFieldBuilders) getS2CItemsFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); if (this.s2CItemsBuilder_ == null) { this.s2CItems_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFE; } else { this.s2CItemsBuilder_.clear(); }  return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_SimulateDataPush_descriptor; } public PlayerHandler.SimulateDataPush getDefaultInstanceForType() { return PlayerHandler.SimulateDataPush.getDefaultInstance(); } public PlayerHandler.SimulateDataPush build() { PlayerHandler.SimulateDataPush result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.SimulateDataPush buildPartial() { PlayerHandler.SimulateDataPush result = new PlayerHandler.SimulateDataPush(this); int from_bitField0_ = this.bitField0_; if (this.s2CItemsBuilder_ == null) { if ((this.bitField0_ & 0x1) == 1) { this.s2CItems_ = Collections.unmodifiableList(this.s2CItems_); this.bitField0_ &= 0xFFFFFFFE; }  result.s2CItems_ = this.s2CItems_; } else { result.s2CItems_ = this.s2CItemsBuilder_.build(); }  onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.SimulateDataPush) return mergeFrom((PlayerHandler.SimulateDataPush)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.SimulateDataPush other) { if (other == PlayerHandler.SimulateDataPush.getDefaultInstance()) return this;  if (this.s2CItemsBuilder_ == null) { if (!other.s2CItems_.isEmpty()) { if (this.s2CItems_.isEmpty()) { this.s2CItems_ = other.s2CItems_; this.bitField0_ &= 0xFFFFFFFE; } else { ensureS2CItemsIsMutable(); this.s2CItems_.addAll(other.s2CItems_); }  onChanged(); }  } else if (!other.s2CItems_.isEmpty()) { if (this.s2CItemsBuilder_.isEmpty()) { this.s2CItemsBuilder_.dispose(); this.s2CItemsBuilder_ = null; this.s2CItems_ = other.s2CItems_; this.bitField0_ &= 0xFFFFFFFE; this.s2CItemsBuilder_ = PlayerHandler.SimulateDataPush.alwaysUseFieldBuilders ? getS2CItemsFieldBuilder() : null; } else { this.s2CItemsBuilder_.addAllMessages(other.s2CItems_); }  }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { for (int i = 0; i < getS2CItemsCount(); i++) { if (!getS2CItems(i).isInitialized()) return false;  }  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.SimulateDataPush parsedMessage = null; try { parsedMessage = (PlayerHandler.SimulateDataPush)PlayerHandler.SimulateDataPush.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.SimulateDataPush)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } private void ensureS2CItemsIsMutable() { if ((this.bitField0_ & 0x1) != 1) { this.s2CItems_ = new ArrayList<>(this.s2CItems_); this.bitField0_ |= 0x1; }  } public List<ItemOuterClass.MiniItem> getS2CItemsList() { if (this.s2CItemsBuilder_ == null) return Collections.unmodifiableList(this.s2CItems_);  return this.s2CItemsBuilder_.getMessageList(); } public int getS2CItemsCount() { if (this.s2CItemsBuilder_ == null) return this.s2CItems_.size();  return this.s2CItemsBuilder_.getCount(); } public ItemOuterClass.MiniItem getS2CItems(int index) { if (this.s2CItemsBuilder_ == null) return this.s2CItems_.get(index);  return (ItemOuterClass.MiniItem)this.s2CItemsBuilder_.getMessage(index); } public Builder setS2CItems(int index, ItemOuterClass.MiniItem value) { if (this.s2CItemsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CItemsIsMutable(); this.s2CItems_.set(index, value); onChanged(); } else { this.s2CItemsBuilder_.setMessage(index, (GeneratedMessage)value); }  return this; } public Builder setS2CItems(int index, ItemOuterClass.MiniItem.Builder builderForValue) { if (this.s2CItemsBuilder_ == null) { ensureS2CItemsIsMutable(); this.s2CItems_.set(index, builderForValue.build()); onChanged(); } else { this.s2CItemsBuilder_.setMessage(index, (GeneratedMessage)builderForValue.build()); }  return this; } public Builder addS2CItems(ItemOuterClass.MiniItem value) { if (this.s2CItemsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CItemsIsMutable(); this.s2CItems_.add(value); onChanged(); } else { this.s2CItemsBuilder_.addMessage((GeneratedMessage)value); }  return this; } public Builder addS2CItems(int index, ItemOuterClass.MiniItem value) { if (this.s2CItemsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CItemsIsMutable(); this.s2CItems_.add(index, value); onChanged(); } else { this.s2CItemsBuilder_.addMessage(index, (GeneratedMessage)value); }  return this; } public Builder addS2CItems(ItemOuterClass.MiniItem.Builder builderForValue) { if (this.s2CItemsBuilder_ == null) { ensureS2CItemsIsMutable(); this.s2CItems_.add(builderForValue.build()); onChanged(); } else { this.s2CItemsBuilder_.addMessage((GeneratedMessage)builderForValue.build()); }  return this; } public Builder addS2CItems(int index, ItemOuterClass.MiniItem.Builder builderForValue) { if (this.s2CItemsBuilder_ == null) { ensureS2CItemsIsMutable(); this.s2CItems_.add(index, builderForValue.build()); onChanged(); } else { this.s2CItemsBuilder_.addMessage(index, (GeneratedMessage)builderForValue.build()); }  return this; } public Builder addAllS2CItems(Iterable<? extends ItemOuterClass.MiniItem> values) { if (this.s2CItemsBuilder_ == null) { ensureS2CItemsIsMutable(); AbstractMessageLite.Builder.addAll(values, this.s2CItems_); onChanged(); } else { this.s2CItemsBuilder_.addAllMessages(values); }  return this; } public Builder clearS2CItems() { if (this.s2CItemsBuilder_ == null) { this.s2CItems_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFE; onChanged(); } else { this.s2CItemsBuilder_.clear(); }  return this; } public Builder removeS2CItems(int index) { if (this.s2CItemsBuilder_ == null) { ensureS2CItemsIsMutable(); this.s2CItems_.remove(index); onChanged(); } else { this.s2CItemsBuilder_.remove(index); }  return this; } public ItemOuterClass.MiniItem.Builder getS2CItemsBuilder(int index) { return (ItemOuterClass.MiniItem.Builder)getS2CItemsFieldBuilder().getBuilder(index); } public ItemOuterClass.MiniItemOrBuilder getS2CItemsOrBuilder(int index) { if (this.s2CItemsBuilder_ == null) return (ItemOuterClass.MiniItemOrBuilder)this.s2CItems_.get(index);  return (ItemOuterClass.MiniItemOrBuilder)this.s2CItemsBuilder_.getMessageOrBuilder(index); } public List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CItemsOrBuilderList() { if (this.s2CItemsBuilder_ != null) return this.s2CItemsBuilder_.getMessageOrBuilderList();  return (List)Collections.unmodifiableList(this.s2CItems_); } public ItemOuterClass.MiniItem.Builder addS2CItemsBuilder() { return (ItemOuterClass.MiniItem.Builder)getS2CItemsFieldBuilder().addBuilder((GeneratedMessage)ItemOuterClass.MiniItem.getDefaultInstance()); } public ItemOuterClass.MiniItem.Builder addS2CItemsBuilder(int index) { return (ItemOuterClass.MiniItem.Builder)getS2CItemsFieldBuilder().addBuilder(index, (GeneratedMessage)ItemOuterClass.MiniItem.getDefaultInstance()); } public List<ItemOuterClass.MiniItem.Builder> getS2CItemsBuilderList() { return getS2CItemsFieldBuilder().getBuilderList(); } private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> getS2CItemsFieldBuilder() { if (this.s2CItemsBuilder_ == null) { this.s2CItemsBuilder_ = new RepeatedFieldBuilder(this.s2CItems_, ((this.bitField0_ & 0x1) == 1), getParentForChildren(), isClean()); this.s2CItems_ = null; }  return this.s2CItemsBuilder_; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ClientConfigPush
/*       */     extends GeneratedMessage
/*       */     implements ClientConfigPushOrBuilder
/*       */   {
/* 43963 */     private static final ClientConfigPush defaultInstance = new ClientConfigPush(true); private final UnknownFieldSet unknownFields; private ClientConfigPush(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ClientConfigPush(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ClientConfigPush getDefaultInstance() { return defaultInstance; } public ClientConfigPush getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ClientConfigPush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.s2CKey_ = bs; break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CValue_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ClientConfigPush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ClientConfigPush_fieldAccessorTable.ensureFieldAccessorsInitialized(ClientConfigPush.class, Builder.class); } public static Parser<ClientConfigPush> PARSER = (Parser<ClientConfigPush>)new AbstractParser<ClientConfigPush>() { public PlayerHandler.ClientConfigPush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.ClientConfigPush(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_KEY_FIELD_NUMBER = 1; private Object s2CKey_; public static final int S2C_VALUE_FIELD_NUMBER = 2; private Object s2CValue_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ClientConfigPush> getParserForType() { return PARSER; } public boolean hasS2CKey() { return ((this.bitField0_ & 0x1) == 1); } public String getS2CKey() { Object ref = this.s2CKey_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CKey_ = s;  return s; } public ByteString getS2CKeyBytes() { Object ref = this.s2CKey_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CKey_ = b; return b; }  return (ByteString)ref; } public boolean hasS2CValue() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CValue() { Object ref = this.s2CValue_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CValue_ = s;  return s; } public ByteString getS2CValueBytes() { Object ref = this.s2CValue_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CValue_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CKey_ = ""; this.s2CValue_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CKey()) { this.memoizedIsInitialized = 0; return false; }  if (!hasS2CValue()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getS2CKeyBytes());  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CValueBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getS2CKeyBytes());  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CValueBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ClientConfigPush parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ClientConfigPush)PARSER.parseFrom(data); } public static ClientConfigPush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ClientConfigPush)PARSER.parseFrom(data, extensionRegistry); } public static ClientConfigPush parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ClientConfigPush)PARSER.parseFrom(data); } public static ClientConfigPush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ClientConfigPush)PARSER.parseFrom(data, extensionRegistry); } public static ClientConfigPush parseFrom(InputStream input) throws IOException { return (ClientConfigPush)PARSER.parseFrom(input); } public static ClientConfigPush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ClientConfigPush)PARSER.parseFrom(input, extensionRegistry); } public static ClientConfigPush parseDelimitedFrom(InputStream input) throws IOException { return (ClientConfigPush)PARSER.parseDelimitedFrom(input); } public static ClientConfigPush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ClientConfigPush)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ClientConfigPush parseFrom(CodedInputStream input) throws IOException { return (ClientConfigPush)PARSER.parseFrom(input); } public static ClientConfigPush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ClientConfigPush)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ClientConfigPush prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.ClientConfigPushOrBuilder {
/* 43964 */       private int bitField0_; private Object s2CKey_; private Object s2CValue_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_ClientConfigPush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_ClientConfigPush_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.ClientConfigPush.class, Builder.class); } private Builder() { this.s2CKey_ = ""; this.s2CValue_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CKey_ = ""; this.s2CValue_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.ClientConfigPush.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CKey_ = ""; this.bitField0_ &= 0xFFFFFFFE; this.s2CValue_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_ClientConfigPush_descriptor; } public PlayerHandler.ClientConfigPush getDefaultInstanceForType() { return PlayerHandler.ClientConfigPush.getDefaultInstance(); } public PlayerHandler.ClientConfigPush build() { PlayerHandler.ClientConfigPush result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.ClientConfigPush buildPartial() { PlayerHandler.ClientConfigPush result = new PlayerHandler.ClientConfigPush(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CKey_ = this.s2CKey_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CValue_ = this.s2CValue_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.ClientConfigPush) return mergeFrom((PlayerHandler.ClientConfigPush)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.ClientConfigPush other) { if (other == PlayerHandler.ClientConfigPush.getDefaultInstance()) return this;  if (other.hasS2CKey()) { this.bitField0_ |= 0x1; this.s2CKey_ = other.s2CKey_; onChanged(); }  if (other.hasS2CValue()) { this.bitField0_ |= 0x2; this.s2CValue_ = other.s2CValue_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CKey()) return false;  if (!hasS2CValue()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.ClientConfigPush parsedMessage = null; try { parsedMessage = (PlayerHandler.ClientConfigPush)PlayerHandler.ClientConfigPush.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.ClientConfigPush)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CKey() { return ((this.bitField0_ & 0x1) == 1); } public String getS2CKey() { Object ref = this.s2CKey_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CKey_ = s;  return s; }  return (String)ref; } public ByteString getS2CKeyBytes() { Object ref = this.s2CKey_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CKey_ = b; return b; }  return (ByteString)ref; } public Builder setS2CKey(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.s2CKey_ = value; onChanged(); return this; } public Builder clearS2CKey() { this.bitField0_ &= 0xFFFFFFFE; this.s2CKey_ = PlayerHandler.ClientConfigPush.getDefaultInstance().getS2CKey(); onChanged(); return this; } public Builder setS2CKeyBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.s2CKey_ = value; onChanged(); return this; } public boolean hasS2CValue() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CValue() { Object ref = this.s2CValue_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CValue_ = s;  return s; }  return (String)ref; } public ByteString getS2CValueBytes() { Object ref = this.s2CValue_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CValue_ = b; return b; }  return (ByteString)ref; } public Builder setS2CValue(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CValue_ = value; onChanged(); return this; } public Builder clearS2CValue() { this.bitField0_ &= 0xFFFFFFFD; this.s2CValue_ = PlayerHandler.ClientConfigPush.getDefaultInstance().getS2CValue(); onChanged(); return this; } public Builder setS2CValueBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CValue_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class KickPlayerPush
/*       */     extends GeneratedMessage
/*       */     implements KickPlayerPushOrBuilder
/*       */   {
/* 44400 */     private static final KickPlayerPush defaultInstance = new KickPlayerPush(true); private final UnknownFieldSet unknownFields; private KickPlayerPush(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private KickPlayerPush(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static KickPlayerPush getDefaultInstance() { return defaultInstance; } public KickPlayerPush getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private KickPlayerPush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 16: this.bitField0_ |= 0x1; this.s2CReasonType_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_KickPlayerPush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_KickPlayerPush_fieldAccessorTable.ensureFieldAccessorsInitialized(KickPlayerPush.class, Builder.class); } public static Parser<KickPlayerPush> PARSER = (Parser<KickPlayerPush>)new AbstractParser<KickPlayerPush>() { public PlayerHandler.KickPlayerPush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.KickPlayerPush(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_REASONTYPE_FIELD_NUMBER = 2; private int s2CReasonType_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<KickPlayerPush> getParserForType() { return PARSER; } public boolean hasS2CReasonType() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CReasonType() { return this.s2CReasonType_; } private void initFields() { this.s2CReasonType_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CReasonType()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(2, this.s2CReasonType_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(2, this.s2CReasonType_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static KickPlayerPush parseFrom(ByteString data) throws InvalidProtocolBufferException { return (KickPlayerPush)PARSER.parseFrom(data); } public static KickPlayerPush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (KickPlayerPush)PARSER.parseFrom(data, extensionRegistry); } public static KickPlayerPush parseFrom(byte[] data) throws InvalidProtocolBufferException { return (KickPlayerPush)PARSER.parseFrom(data); } public static KickPlayerPush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (KickPlayerPush)PARSER.parseFrom(data, extensionRegistry); } public static KickPlayerPush parseFrom(InputStream input) throws IOException { return (KickPlayerPush)PARSER.parseFrom(input); } public static KickPlayerPush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (KickPlayerPush)PARSER.parseFrom(input, extensionRegistry); } public static KickPlayerPush parseDelimitedFrom(InputStream input) throws IOException { return (KickPlayerPush)PARSER.parseDelimitedFrom(input); } public static KickPlayerPush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (KickPlayerPush)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static KickPlayerPush parseFrom(CodedInputStream input) throws IOException { return (KickPlayerPush)PARSER.parseFrom(input); } public static KickPlayerPush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (KickPlayerPush)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(KickPlayerPush prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.KickPlayerPushOrBuilder {
/* 44401 */       private int bitField0_; private int s2CReasonType_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_KickPlayerPush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_KickPlayerPush_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.KickPlayerPush.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.KickPlayerPush.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CReasonType_ = 0; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_KickPlayerPush_descriptor; } public PlayerHandler.KickPlayerPush getDefaultInstanceForType() { return PlayerHandler.KickPlayerPush.getDefaultInstance(); } public PlayerHandler.KickPlayerPush build() { PlayerHandler.KickPlayerPush result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.KickPlayerPush buildPartial() { PlayerHandler.KickPlayerPush result = new PlayerHandler.KickPlayerPush(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CReasonType_ = this.s2CReasonType_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.KickPlayerPush) return mergeFrom((PlayerHandler.KickPlayerPush)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.KickPlayerPush other) { if (other == PlayerHandler.KickPlayerPush.getDefaultInstance()) return this;  if (other.hasS2CReasonType()) setS2CReasonType(other.getS2CReasonType());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CReasonType()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.KickPlayerPush parsedMessage = null; try { parsedMessage = (PlayerHandler.KickPlayerPush)PlayerHandler.KickPlayerPush.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.KickPlayerPush)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CReasonType() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CReasonType() { return this.s2CReasonType_; } public Builder setS2CReasonType(int value) { this.bitField0_ |= 0x1; this.s2CReasonType_ = value; onChanged(); return this; } public Builder clearS2CReasonType() { this.bitField0_ &= 0xFFFFFFFE; this.s2CReasonType_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class CommonProperty
/*       */     extends GeneratedMessage
/*       */     implements CommonPropertyOrBuilder
/*       */   {
/* 45056 */     private static final CommonProperty defaultInstance = new CommonProperty(true); private final UnknownFieldSet unknownFields; private CommonProperty(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private CommonProperty(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static CommonProperty getDefaultInstance() { return defaultInstance; } public CommonProperty getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private CommonProperty(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.attrName_ = bs; break;case 16: this.bitField0_ |= 0x2; this.value_ = input.readInt32(); break;case 24: this.bitField0_ |= 0x4; this.isFormat_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_CommonProperty_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_CommonProperty_fieldAccessorTable.ensureFieldAccessorsInitialized(CommonProperty.class, Builder.class); } public static Parser<CommonProperty> PARSER = (Parser<CommonProperty>)new AbstractParser<CommonProperty>() { public PlayerHandler.CommonProperty parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.CommonProperty(input, extensionRegistry); } }; private int bitField0_; public static final int ATTRNAME_FIELD_NUMBER = 1; private Object attrName_; public static final int VALUE_FIELD_NUMBER = 2; private int value_; public static final int ISFORMAT_FIELD_NUMBER = 3; private int isFormat_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<CommonProperty> getParserForType() { return PARSER; } public boolean hasAttrName() { return ((this.bitField0_ & 0x1) == 1); } public String getAttrName() { Object ref = this.attrName_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.attrName_ = s;  return s; } public ByteString getAttrNameBytes() { Object ref = this.attrName_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.attrName_ = b; return b; }  return (ByteString)ref; } public boolean hasValue() { return ((this.bitField0_ & 0x2) == 2); } public int getValue() { return this.value_; } public boolean hasIsFormat() { return ((this.bitField0_ & 0x4) == 4); } public int getIsFormat() { return this.isFormat_; } private void initFields() { this.attrName_ = ""; this.value_ = 0; this.isFormat_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasAttrName()) { this.memoizedIsInitialized = 0; return false; }  if (!hasValue()) { this.memoizedIsInitialized = 0; return false; }  if (!hasIsFormat()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getAttrNameBytes());  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.value_);  if ((this.bitField0_ & 0x4) == 4) output.writeInt32(3, this.isFormat_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getAttrNameBytes());  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.value_);  if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt32Size(3, this.isFormat_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static CommonProperty parseFrom(ByteString data) throws InvalidProtocolBufferException { return (CommonProperty)PARSER.parseFrom(data); } public static CommonProperty parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (CommonProperty)PARSER.parseFrom(data, extensionRegistry); } public static CommonProperty parseFrom(byte[] data) throws InvalidProtocolBufferException { return (CommonProperty)PARSER.parseFrom(data); } public static CommonProperty parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (CommonProperty)PARSER.parseFrom(data, extensionRegistry); } public static CommonProperty parseFrom(InputStream input) throws IOException { return (CommonProperty)PARSER.parseFrom(input); } public static CommonProperty parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (CommonProperty)PARSER.parseFrom(input, extensionRegistry); } public static CommonProperty parseDelimitedFrom(InputStream input) throws IOException { return (CommonProperty)PARSER.parseDelimitedFrom(input); } public static CommonProperty parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (CommonProperty)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static CommonProperty parseFrom(CodedInputStream input) throws IOException { return (CommonProperty)PARSER.parseFrom(input); } public static CommonProperty parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (CommonProperty)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(CommonProperty prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.CommonPropertyOrBuilder {
/* 45057 */       private int bitField0_; private Object attrName_; private int value_; private int isFormat_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_CommonProperty_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_CommonProperty_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.CommonProperty.class, Builder.class); } private Builder() { this.attrName_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.attrName_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.CommonProperty.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.attrName_ = ""; this.bitField0_ &= 0xFFFFFFFE; this.value_ = 0; this.bitField0_ &= 0xFFFFFFFD; this.isFormat_ = 0; this.bitField0_ &= 0xFFFFFFFB; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_CommonProperty_descriptor; } public PlayerHandler.CommonProperty getDefaultInstanceForType() { return PlayerHandler.CommonProperty.getDefaultInstance(); } public PlayerHandler.CommonProperty build() { PlayerHandler.CommonProperty result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.CommonProperty buildPartial() { PlayerHandler.CommonProperty result = new PlayerHandler.CommonProperty(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.attrName_ = this.attrName_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.value_ = this.value_; if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;  result.isFormat_ = this.isFormat_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.CommonProperty) return mergeFrom((PlayerHandler.CommonProperty)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.CommonProperty other) { if (other == PlayerHandler.CommonProperty.getDefaultInstance()) return this;  if (other.hasAttrName()) { this.bitField0_ |= 0x1; this.attrName_ = other.attrName_; onChanged(); }  if (other.hasValue()) setValue(other.getValue());  if (other.hasIsFormat()) setIsFormat(other.getIsFormat());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasAttrName()) return false;  if (!hasValue()) return false;  if (!hasIsFormat()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.CommonProperty parsedMessage = null; try { parsedMessage = (PlayerHandler.CommonProperty)PlayerHandler.CommonProperty.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.CommonProperty)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasAttrName() { return ((this.bitField0_ & 0x1) == 1); } public String getAttrName() { Object ref = this.attrName_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.attrName_ = s;  return s; }  return (String)ref; } public ByteString getAttrNameBytes() { Object ref = this.attrName_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.attrName_ = b; return b; }  return (ByteString)ref; } public Builder setAttrName(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.attrName_ = value; onChanged(); return this; } public Builder clearAttrName() { this.bitField0_ &= 0xFFFFFFFE; this.attrName_ = PlayerHandler.CommonProperty.getDefaultInstance().getAttrName(); onChanged(); return this; } public Builder setAttrNameBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.attrName_ = value; onChanged(); return this; } public boolean hasValue() { return ((this.bitField0_ & 0x2) == 2); } public int getValue() { return this.value_; } public Builder setValue(int value) { this.bitField0_ |= 0x2; this.value_ = value; onChanged(); return this; } public Builder clearValue() { this.bitField0_ &= 0xFFFFFFFD; this.value_ = 0; onChanged(); return this; } public boolean hasIsFormat() { return ((this.bitField0_ & 0x4) == 4); } public int getIsFormat() { return this.isFormat_; } public Builder setIsFormat(int value) { this.bitField0_ |= 0x4; this.isFormat_ = value; onChanged(); return this; } public Builder clearIsFormat() { this.bitField0_ &= 0xFFFFFFFB; this.isFormat_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class CommonPropertyPush
/*       */     extends GeneratedMessage
/*       */     implements CommonPropertyPushOrBuilder
/*       */   {
/* 45833 */     private static final CommonPropertyPush defaultInstance = new CommonPropertyPush(true); private final UnknownFieldSet unknownFields; private CommonPropertyPush(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private CommonPropertyPush(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static CommonPropertyPush getDefaultInstance() { return defaultInstance; } public CommonPropertyPush getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private CommonPropertyPush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 16: this.bitField0_ |= 0x1; this.s2CType_ = input.readInt32(); break;case 26: if ((mutable_bitField0_ & 0x2) != 2) { this.s2CProperty_ = new ArrayList<>(); mutable_bitField0_ |= 0x2; }  this.s2CProperty_.add(input.readMessage(PlayerHandler.CommonProperty.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x2) == 2) this.s2CProperty_ = Collections.unmodifiableList(this.s2CProperty_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_CommonPropertyPush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_CommonPropertyPush_fieldAccessorTable.ensureFieldAccessorsInitialized(CommonPropertyPush.class, Builder.class); } public static Parser<CommonPropertyPush> PARSER = (Parser<CommonPropertyPush>)new AbstractParser<CommonPropertyPush>() { public PlayerHandler.CommonPropertyPush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.CommonPropertyPush(input, extensionRegistry); } }
/* 45834 */     ; private int bitField0_; public static final int S2C_TYPE_FIELD_NUMBER = 2; private int s2CType_; public static final int S2C_PROPERTY_FIELD_NUMBER = 3; private List<PlayerHandler.CommonProperty> s2CProperty_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<CommonPropertyPush> getParserForType() { return PARSER; } public boolean hasS2CType() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CType() { return this.s2CType_; } public List<PlayerHandler.CommonProperty> getS2CPropertyList() { return this.s2CProperty_; } public List<? extends PlayerHandler.CommonPropertyOrBuilder> getS2CPropertyOrBuilderList() { return (List)this.s2CProperty_; } static { defaultInstance.initFields(); }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getS2CPropertyCount() {
/*       */       return this.s2CProperty_.size();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public PlayerHandler.CommonProperty getS2CProperty(int index) {
/*       */       return this.s2CProperty_.get(index);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public PlayerHandler.CommonPropertyOrBuilder getS2CPropertyOrBuilder(int index) {
/*       */       return this.s2CProperty_.get(index);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private void initFields() {
/*       */       this.s2CType_ = 0;
/*       */       this.s2CProperty_ = Collections.emptyList();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public final boolean isInitialized() {
/*       */       byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1) {
/*       */         return true;
/*       */       }
/*       */       if (isInitialized == 0) {
/*       */         return false;
/*       */       }
/*       */       if (!hasS2CType()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       for (int i = 0; i < getS2CPropertyCount(); i++) {
/*       */         if (!getS2CProperty(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0;
/*       */           return false;
/*       */         } 
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public void writeTo(CodedOutputStream output) throws IOException {
/*       */       getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         output.writeInt32(2, this.s2CType_);
/*       */       }
/*       */       for (int i = 0; i < this.s2CProperty_.size(); i++) {
/*       */         output.writeMessage(3, (MessageLite)this.s2CProperty_.get(i));
/*       */       }
/*       */       getUnknownFields().writeTo(output);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getSerializedSize() {
/*       */       int size = this.memoizedSerializedSize;
/*       */       if (size != -1) {
/*       */         return size;
/*       */       }
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         size += CodedOutputStream.computeInt32Size(2, this.s2CType_);
/*       */       }
/*       */       for (int i = 0; i < this.s2CProperty_.size(); i++) {
/*       */         size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.s2CProperty_.get(i));
/*       */       }
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     protected Object writeReplace() throws ObjectStreamException {
/*       */       return super.writeReplace();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static CommonPropertyPush parseFrom(ByteString data) throws InvalidProtocolBufferException {
/*       */       return (CommonPropertyPush)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static CommonPropertyPush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (CommonPropertyPush)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static CommonPropertyPush parseFrom(byte[] data) throws InvalidProtocolBufferException {
/*       */       return (CommonPropertyPush)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static CommonPropertyPush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (CommonPropertyPush)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static CommonPropertyPush parseFrom(InputStream input) throws IOException {
/*       */       return (CommonPropertyPush)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static CommonPropertyPush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (CommonPropertyPush)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static CommonPropertyPush parseDelimitedFrom(InputStream input) throws IOException {
/*       */       return (CommonPropertyPush)PARSER.parseDelimitedFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static CommonPropertyPush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (CommonPropertyPush)PARSER.parseDelimitedFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static CommonPropertyPush parseFrom(CodedInputStream input) throws IOException {
/*       */       return (CommonPropertyPush)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static CommonPropertyPush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (CommonPropertyPush)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static Builder newBuilder() {
/*       */       return Builder.create();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public Builder newBuilderForType() {
/*       */       return newBuilder();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static Builder newBuilder(CommonPropertyPush prototype) {
/*       */       return newBuilder().mergeFrom(prototype);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public Builder toBuilder() {
/*       */       return newBuilder(this);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
/*       */       Builder builder = new Builder(parent);
/*       */       return builder;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static final class Builder
/*       */       extends GeneratedMessage.Builder<Builder>
/*       */       implements PlayerHandler.CommonPropertyPushOrBuilder
/*       */     {
/*       */       private int bitField0_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private int s2CType_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private List<PlayerHandler.CommonProperty> s2CProperty_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private RepeatedFieldBuilder<PlayerHandler.CommonProperty, PlayerHandler.CommonProperty.Builder, PlayerHandler.CommonPropertyOrBuilder> s2CPropertyBuilder_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public static final Descriptors.Descriptor getDescriptor() {
/*       */         return PlayerHandler.internal_static_pomelo_area_CommonPropertyPush_descriptor;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */         return PlayerHandler.internal_static_pomelo_area_CommonPropertyPush_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.CommonPropertyPush.class, Builder.class);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private Builder() {
/*       */         this.s2CProperty_ = Collections.emptyList();
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private Builder(GeneratedMessage.BuilderParent parent) {
/*       */         super(parent);
/*       */         this.s2CProperty_ = Collections.emptyList();
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private void maybeForceBuilderInitialization() {
/*       */         if (PlayerHandler.CommonPropertyPush.alwaysUseFieldBuilders) {
/*       */           getS2CPropertyFieldBuilder();
/*       */         }
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private static Builder create() {
/*       */         return new Builder();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clear() {
/*       */         super.clear();
/*       */         this.s2CType_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           this.s2CProperty_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFFD;
/*       */         } else {
/*       */           this.s2CPropertyBuilder_.clear();
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clone() {
/*       */         return create().mergeFrom(buildPartial());
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Descriptors.Descriptor getDescriptorForType() {
/*       */         return PlayerHandler.internal_static_pomelo_area_CommonPropertyPush_descriptor;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.CommonPropertyPush getDefaultInstanceForType() {
/*       */         return PlayerHandler.CommonPropertyPush.getDefaultInstance();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.CommonPropertyPush build() {
/*       */         PlayerHandler.CommonPropertyPush result = buildPartial();
/*       */         if (!result.isInitialized()) {
/*       */           throw newUninitializedMessageException(result);
/*       */         }
/*       */         return result;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.CommonPropertyPush buildPartial() {
/*       */         PlayerHandler.CommonPropertyPush result = new PlayerHandler.CommonPropertyPush(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1) {
/*       */           to_bitField0_ |= 0x1;
/*       */         }
/*       */         result.s2CType_ = this.s2CType_;
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x2) == 2) {
/*       */             this.s2CProperty_ = Collections.unmodifiableList(this.s2CProperty_);
/*       */             this.bitField0_ &= 0xFFFFFFFD;
/*       */           } 
/*       */           result.s2CProperty_ = this.s2CProperty_;
/*       */         } else {
/*       */           result.s2CProperty_ = this.s2CPropertyBuilder_.build();
/*       */         } 
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(Message other) {
/*       */         if (other instanceof PlayerHandler.CommonPropertyPush) {
/*       */           return mergeFrom((PlayerHandler.CommonPropertyPush)other);
/*       */         }
/*       */         super.mergeFrom(other);
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(PlayerHandler.CommonPropertyPush other) {
/*       */         if (other == PlayerHandler.CommonPropertyPush.getDefaultInstance()) {
/*       */           return this;
/*       */         }
/*       */         if (other.hasS2CType()) {
/*       */           setS2CType(other.getS2CType());
/*       */         }
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           if (!other.s2CProperty_.isEmpty()) {
/*       */             if (this.s2CProperty_.isEmpty()) {
/*       */               this.s2CProperty_ = other.s2CProperty_;
/*       */               this.bitField0_ &= 0xFFFFFFFD;
/*       */             } else {
/*       */               ensureS2CPropertyIsMutable();
/*       */               this.s2CProperty_.addAll(other.s2CProperty_);
/*       */             } 
/*       */             onChanged();
/*       */           } 
/*       */         } else if (!other.s2CProperty_.isEmpty()) {
/*       */           if (this.s2CPropertyBuilder_.isEmpty()) {
/*       */             this.s2CPropertyBuilder_.dispose();
/*       */             this.s2CPropertyBuilder_ = null;
/*       */             this.s2CProperty_ = other.s2CProperty_;
/*       */             this.bitField0_ &= 0xFFFFFFFD;
/*       */             this.s2CPropertyBuilder_ = PlayerHandler.CommonPropertyPush.alwaysUseFieldBuilders ? getS2CPropertyFieldBuilder() : null;
/*       */           } else {
/*       */             this.s2CPropertyBuilder_.addAllMessages(other.s2CProperty_);
/*       */           } 
/*       */         } 
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public final boolean isInitialized() {
/*       */         if (!hasS2CType()) {
/*       */           return false;
/*       */         }
/*       */         for (int i = 0; i < getS2CPropertyCount(); i++) {
/*       */           if (!getS2CProperty(i).isInitialized()) {
/*       */             return false;
/*       */           }
/*       */         } 
/*       */         return true;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */         PlayerHandler.CommonPropertyPush parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (PlayerHandler.CommonPropertyPush)PlayerHandler.CommonPropertyPush.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (PlayerHandler.CommonPropertyPush)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null) {
/*       */             mergeFrom(parsedMessage);
/*       */           }
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasS2CType() {
/*       */         return ((this.bitField0_ & 0x1) == 1);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public int getS2CType() {
/*       */         return this.s2CType_;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setS2CType(int value) {
/*       */         this.bitField0_ |= 0x1;
/*       */         this.s2CType_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearS2CType() {
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CType_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private void ensureS2CPropertyIsMutable() {
/*       */         if ((this.bitField0_ & 0x2) != 2) {
/*       */           this.s2CProperty_ = new ArrayList<>(this.s2CProperty_);
/*       */           this.bitField0_ |= 0x2;
/*       */         } 
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public List<PlayerHandler.CommonProperty> getS2CPropertyList() {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           return Collections.unmodifiableList(this.s2CProperty_);
/*       */         }
/*       */         return this.s2CPropertyBuilder_.getMessageList();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public int getS2CPropertyCount() {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           return this.s2CProperty_.size();
/*       */         }
/*       */         return this.s2CPropertyBuilder_.getCount();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.CommonProperty getS2CProperty(int index) {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           return this.s2CProperty_.get(index);
/*       */         }
/*       */         return (PlayerHandler.CommonProperty)this.s2CPropertyBuilder_.getMessage(index);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setS2CProperty(int index, PlayerHandler.CommonProperty value) {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           if (value == null) {
/*       */             throw new NullPointerException();
/*       */           }
/*       */           ensureS2CPropertyIsMutable();
/*       */           this.s2CProperty_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CPropertyBuilder_.setMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setS2CProperty(int index, PlayerHandler.CommonProperty.Builder builderForValue) {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           ensureS2CPropertyIsMutable();
/*       */           this.s2CProperty_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CPropertyBuilder_.setMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addS2CProperty(PlayerHandler.CommonProperty value) {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           if (value == null) {
/*       */             throw new NullPointerException();
/*       */           }
/*       */           ensureS2CPropertyIsMutable();
/*       */           this.s2CProperty_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CPropertyBuilder_.addMessage(value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addS2CProperty(int index, PlayerHandler.CommonProperty value) {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           if (value == null) {
/*       */             throw new NullPointerException();
/*       */           }
/*       */           ensureS2CPropertyIsMutable();
/*       */           this.s2CProperty_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CPropertyBuilder_.addMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addS2CProperty(PlayerHandler.CommonProperty.Builder builderForValue) {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           ensureS2CPropertyIsMutable();
/*       */           this.s2CProperty_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CPropertyBuilder_.addMessage(builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addS2CProperty(int index, PlayerHandler.CommonProperty.Builder builderForValue) {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           ensureS2CPropertyIsMutable();
/*       */           this.s2CProperty_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CPropertyBuilder_.addMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addAllS2CProperty(Iterable<? extends PlayerHandler.CommonProperty> values) {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           ensureS2CPropertyIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.s2CProperty_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CPropertyBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearS2CProperty() {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           this.s2CProperty_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFFD;
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CPropertyBuilder_.clear();
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder removeS2CProperty(int index) {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           ensureS2CPropertyIsMutable();
/*       */           this.s2CProperty_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CPropertyBuilder_.remove(index);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.CommonProperty.Builder getS2CPropertyBuilder(int index) {
/*       */         return (PlayerHandler.CommonProperty.Builder)getS2CPropertyFieldBuilder().getBuilder(index);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.CommonPropertyOrBuilder getS2CPropertyOrBuilder(int index) {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           return this.s2CProperty_.get(index);
/*       */         }
/*       */         return (PlayerHandler.CommonPropertyOrBuilder)this.s2CPropertyBuilder_.getMessageOrBuilder(index);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public List<? extends PlayerHandler.CommonPropertyOrBuilder> getS2CPropertyOrBuilderList() {
/*       */         if (this.s2CPropertyBuilder_ != null) {
/*       */           return this.s2CPropertyBuilder_.getMessageOrBuilderList();
/*       */         }
/*       */         return Collections.unmodifiableList((List)this.s2CProperty_);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.CommonProperty.Builder addS2CPropertyBuilder() {
/*       */         return (PlayerHandler.CommonProperty.Builder)getS2CPropertyFieldBuilder().addBuilder(PlayerHandler.CommonProperty.getDefaultInstance());
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.CommonProperty.Builder addS2CPropertyBuilder(int index) {
/*       */         return (PlayerHandler.CommonProperty.Builder)getS2CPropertyFieldBuilder().addBuilder(index, PlayerHandler.CommonProperty.getDefaultInstance());
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public List<PlayerHandler.CommonProperty.Builder> getS2CPropertyBuilderList() {
/*       */         return getS2CPropertyFieldBuilder().getBuilderList();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private RepeatedFieldBuilder<PlayerHandler.CommonProperty, PlayerHandler.CommonProperty.Builder, PlayerHandler.CommonPropertyOrBuilder> getS2CPropertyFieldBuilder() {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           this.s2CPropertyBuilder_ = new RepeatedFieldBuilder(this.s2CProperty_, ((this.bitField0_ & 0x2) == 2), getParentForChildren(), isClean());
/*       */           this.s2CProperty_ = null;
/*       */         } 
/*       */         return this.s2CPropertyBuilder_;
/*       */       }
/*       */     }
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class SuitPropertyUpPush
/*       */     extends GeneratedMessage
/*       */     implements SuitPropertyUpPushOrBuilder
/*       */   {
/* 46807 */     private static final SuitPropertyUpPush defaultInstance = new SuitPropertyUpPush(true); private final UnknownFieldSet unknownFields; private SuitPropertyUpPush(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private SuitPropertyUpPush(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static SuitPropertyUpPush getDefaultInstance() { return defaultInstance; } public SuitPropertyUpPush getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private SuitPropertyUpPush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 16: this.bitField0_ |= 0x1; this.s2CType_ = input.readInt32(); break;case 26: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 34: if ((mutable_bitField0_ & 0x4) != 4) { this.s2CProperty_ = new ArrayList<>(); mutable_bitField0_ |= 0x4; }  this.s2CProperty_.add(input.readMessage(PlayerHandler.CommonProperty.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x4) == 4) this.s2CProperty_ = Collections.unmodifiableList(this.s2CProperty_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_SuitPropertyUpPush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_SuitPropertyUpPush_fieldAccessorTable.ensureFieldAccessorsInitialized(SuitPropertyUpPush.class, Builder.class); } public static Parser<SuitPropertyUpPush> PARSER = (Parser<SuitPropertyUpPush>)new AbstractParser<SuitPropertyUpPush>() { public PlayerHandler.SuitPropertyUpPush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.SuitPropertyUpPush(input, extensionRegistry); } }
/* 46808 */     ; private int bitField0_; public static final int S2C_TYPE_FIELD_NUMBER = 2; private int s2CType_; public static final int S2C_MSG_FIELD_NUMBER = 3; private Object s2CMsg_; public static final int S2C_PROPERTY_FIELD_NUMBER = 4; private List<PlayerHandler.CommonProperty> s2CProperty_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<SuitPropertyUpPush> getParserForType() { return PARSER; } public boolean hasS2CType() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CType() { return this.s2CType_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } static { defaultInstance.initFields(); }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public List<PlayerHandler.CommonProperty> getS2CPropertyList() {
/*       */       return this.s2CProperty_;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public List<? extends PlayerHandler.CommonPropertyOrBuilder> getS2CPropertyOrBuilderList() {
/*       */       return (List)this.s2CProperty_;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getS2CPropertyCount() {
/*       */       return this.s2CProperty_.size();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public PlayerHandler.CommonProperty getS2CProperty(int index) {
/*       */       return this.s2CProperty_.get(index);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public PlayerHandler.CommonPropertyOrBuilder getS2CPropertyOrBuilder(int index) {
/*       */       return this.s2CProperty_.get(index);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private void initFields() {
/*       */       this.s2CType_ = 0;
/*       */       this.s2CMsg_ = "";
/*       */       this.s2CProperty_ = Collections.emptyList();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public final boolean isInitialized() {
/*       */       byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1) {
/*       */         return true;
/*       */       }
/*       */       if (isInitialized == 0) {
/*       */         return false;
/*       */       }
/*       */       if (!hasS2CType()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasS2CMsg()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       for (int i = 0; i < getS2CPropertyCount(); i++) {
/*       */         if (!getS2CProperty(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0;
/*       */           return false;
/*       */         } 
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public void writeTo(CodedOutputStream output) throws IOException {
/*       */       getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         output.writeInt32(2, this.s2CType_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         output.writeBytes(3, getS2CMsgBytes());
/*       */       }
/*       */       for (int i = 0; i < this.s2CProperty_.size(); i++) {
/*       */         output.writeMessage(4, (MessageLite)this.s2CProperty_.get(i));
/*       */       }
/*       */       getUnknownFields().writeTo(output);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getSerializedSize() {
/*       */       int size = this.memoizedSerializedSize;
/*       */       if (size != -1) {
/*       */         return size;
/*       */       }
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         size += CodedOutputStream.computeInt32Size(2, this.s2CType_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         size += CodedOutputStream.computeBytesSize(3, getS2CMsgBytes());
/*       */       }
/*       */       for (int i = 0; i < this.s2CProperty_.size(); i++) {
/*       */         size += CodedOutputStream.computeMessageSize(4, (MessageLite)this.s2CProperty_.get(i));
/*       */       }
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     protected Object writeReplace() throws ObjectStreamException {
/*       */       return super.writeReplace();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static SuitPropertyUpPush parseFrom(ByteString data) throws InvalidProtocolBufferException {
/*       */       return (SuitPropertyUpPush)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static SuitPropertyUpPush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (SuitPropertyUpPush)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static SuitPropertyUpPush parseFrom(byte[] data) throws InvalidProtocolBufferException {
/*       */       return (SuitPropertyUpPush)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static SuitPropertyUpPush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (SuitPropertyUpPush)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static SuitPropertyUpPush parseFrom(InputStream input) throws IOException {
/*       */       return (SuitPropertyUpPush)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static SuitPropertyUpPush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (SuitPropertyUpPush)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static SuitPropertyUpPush parseDelimitedFrom(InputStream input) throws IOException {
/*       */       return (SuitPropertyUpPush)PARSER.parseDelimitedFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static SuitPropertyUpPush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (SuitPropertyUpPush)PARSER.parseDelimitedFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static SuitPropertyUpPush parseFrom(CodedInputStream input) throws IOException {
/*       */       return (SuitPropertyUpPush)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static SuitPropertyUpPush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (SuitPropertyUpPush)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static Builder newBuilder() {
/*       */       return Builder.create();
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public Builder newBuilderForType() {
/*       */       return newBuilder();
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static Builder newBuilder(SuitPropertyUpPush prototype) {
/*       */       return newBuilder().mergeFrom(prototype);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public Builder toBuilder() {
/*       */       return newBuilder(this);
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
/*       */       Builder builder = new Builder(parent);
/*       */       return builder;
/*       */     }
/*       */ 
/*       */ 
/*       */     
/*       */     public static final class Builder
/*       */       extends GeneratedMessage.Builder<Builder>
/*       */       implements PlayerHandler.SuitPropertyUpPushOrBuilder
/*       */     {
/*       */       private int bitField0_;
/*       */ 
/*       */       
/*       */       private int s2CType_;
/*       */ 
/*       */       
/*       */       private Object s2CMsg_;
/*       */ 
/*       */       
/*       */       private List<PlayerHandler.CommonProperty> s2CProperty_;
/*       */ 
/*       */       
/*       */       private RepeatedFieldBuilder<PlayerHandler.CommonProperty, PlayerHandler.CommonProperty.Builder, PlayerHandler.CommonPropertyOrBuilder> s2CPropertyBuilder_;
/*       */ 
/*       */ 
/*       */       
/*       */       public static final Descriptors.Descriptor getDescriptor() {
/*       */         return PlayerHandler.internal_static_pomelo_area_SuitPropertyUpPush_descriptor;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */         return PlayerHandler.internal_static_pomelo_area_SuitPropertyUpPush_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.SuitPropertyUpPush.class, Builder.class);
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       private Builder() {
/*       */         this.s2CMsg_ = "";
/*       */         this.s2CProperty_ = Collections.emptyList();
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       private Builder(GeneratedMessage.BuilderParent parent) {
/*       */         super(parent);
/*       */         this.s2CMsg_ = "";
/*       */         this.s2CProperty_ = Collections.emptyList();
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       private void maybeForceBuilderInitialization() {
/*       */         if (PlayerHandler.SuitPropertyUpPush.alwaysUseFieldBuilders) {
/*       */           getS2CPropertyFieldBuilder();
/*       */         }
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       private static Builder create() {
/*       */         return new Builder();
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clear() {
/*       */         super.clear();
/*       */         this.s2CType_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CMsg_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           this.s2CProperty_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFFB;
/*       */         } else {
/*       */           this.s2CPropertyBuilder_.clear();
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clone() {
/*       */         return create().mergeFrom(buildPartial());
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Descriptors.Descriptor getDescriptorForType() {
/*       */         return PlayerHandler.internal_static_pomelo_area_SuitPropertyUpPush_descriptor;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.SuitPropertyUpPush getDefaultInstanceForType() {
/*       */         return PlayerHandler.SuitPropertyUpPush.getDefaultInstance();
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.SuitPropertyUpPush build() {
/*       */         PlayerHandler.SuitPropertyUpPush result = buildPartial();
/*       */         if (!result.isInitialized()) {
/*       */           throw newUninitializedMessageException(result);
/*       */         }
/*       */         return result;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.SuitPropertyUpPush buildPartial() {
/*       */         PlayerHandler.SuitPropertyUpPush result = new PlayerHandler.SuitPropertyUpPush(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1) {
/*       */           to_bitField0_ |= 0x1;
/*       */         }
/*       */         result.s2CType_ = this.s2CType_;
/*       */         if ((from_bitField0_ & 0x2) == 2) {
/*       */           to_bitField0_ |= 0x2;
/*       */         }
/*       */         result.s2CMsg_ = this.s2CMsg_;
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x4) == 4) {
/*       */             this.s2CProperty_ = Collections.unmodifiableList(this.s2CProperty_);
/*       */             this.bitField0_ &= 0xFFFFFFFB;
/*       */           } 
/*       */           result.s2CProperty_ = this.s2CProperty_;
/*       */         } else {
/*       */           result.s2CProperty_ = this.s2CPropertyBuilder_.build();
/*       */         } 
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(Message other) {
/*       */         if (other instanceof PlayerHandler.SuitPropertyUpPush) {
/*       */           return mergeFrom((PlayerHandler.SuitPropertyUpPush)other);
/*       */         }
/*       */         super.mergeFrom(other);
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(PlayerHandler.SuitPropertyUpPush other) {
/*       */         if (other == PlayerHandler.SuitPropertyUpPush.getDefaultInstance()) {
/*       */           return this;
/*       */         }
/*       */         if (other.hasS2CType()) {
/*       */           setS2CType(other.getS2CType());
/*       */         }
/*       */         if (other.hasS2CMsg()) {
/*       */           this.bitField0_ |= 0x2;
/*       */           this.s2CMsg_ = other.s2CMsg_;
/*       */           onChanged();
/*       */         } 
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           if (!other.s2CProperty_.isEmpty()) {
/*       */             if (this.s2CProperty_.isEmpty()) {
/*       */               this.s2CProperty_ = other.s2CProperty_;
/*       */               this.bitField0_ &= 0xFFFFFFFB;
/*       */             } else {
/*       */               ensureS2CPropertyIsMutable();
/*       */               this.s2CProperty_.addAll(other.s2CProperty_);
/*       */             } 
/*       */             onChanged();
/*       */           } 
/*       */         } else if (!other.s2CProperty_.isEmpty()) {
/*       */           if (this.s2CPropertyBuilder_.isEmpty()) {
/*       */             this.s2CPropertyBuilder_.dispose();
/*       */             this.s2CPropertyBuilder_ = null;
/*       */             this.s2CProperty_ = other.s2CProperty_;
/*       */             this.bitField0_ &= 0xFFFFFFFB;
/*       */             this.s2CPropertyBuilder_ = PlayerHandler.SuitPropertyUpPush.alwaysUseFieldBuilders ? getS2CPropertyFieldBuilder() : null;
/*       */           } else {
/*       */             this.s2CPropertyBuilder_.addAllMessages(other.s2CProperty_);
/*       */           } 
/*       */         } 
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public final boolean isInitialized() {
/*       */         if (!hasS2CType()) {
/*       */           return false;
/*       */         }
/*       */         if (!hasS2CMsg()) {
/*       */           return false;
/*       */         }
/*       */         for (int i = 0; i < getS2CPropertyCount(); i++) {
/*       */           if (!getS2CProperty(i).isInitialized()) {
/*       */             return false;
/*       */           }
/*       */         } 
/*       */         return true;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */         PlayerHandler.SuitPropertyUpPush parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (PlayerHandler.SuitPropertyUpPush)PlayerHandler.SuitPropertyUpPush.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (PlayerHandler.SuitPropertyUpPush)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null) {
/*       */             mergeFrom(parsedMessage);
/*       */           }
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasS2CType() {
/*       */         return ((this.bitField0_ & 0x1) == 1);
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public int getS2CType() {
/*       */         return this.s2CType_;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setS2CType(int value) {
/*       */         this.bitField0_ |= 0x1;
/*       */         this.s2CType_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearS2CType() {
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CType_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasS2CMsg() {
/*       */         return ((this.bitField0_ & 0x2) == 2);
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public String getS2CMsg() {
/*       */         Object ref = this.s2CMsg_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8()) {
/*       */             this.s2CMsg_ = s;
/*       */           }
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public ByteString getS2CMsgBytes() {
/*       */         Object ref = this.s2CMsg_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CMsg_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setS2CMsg(String value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearS2CMsg() {
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.s2CMsg_ = PlayerHandler.SuitPropertyUpPush.getDefaultInstance().getS2CMsg();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setS2CMsgBytes(ByteString value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       private void ensureS2CPropertyIsMutable() {
/*       */         if ((this.bitField0_ & 0x4) != 4) {
/*       */           this.s2CProperty_ = new ArrayList<>(this.s2CProperty_);
/*       */           this.bitField0_ |= 0x4;
/*       */         } 
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public List<PlayerHandler.CommonProperty> getS2CPropertyList() {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           return Collections.unmodifiableList(this.s2CProperty_);
/*       */         }
/*       */         return this.s2CPropertyBuilder_.getMessageList();
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public int getS2CPropertyCount() {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           return this.s2CProperty_.size();
/*       */         }
/*       */         return this.s2CPropertyBuilder_.getCount();
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.CommonProperty getS2CProperty(int index) {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           return this.s2CProperty_.get(index);
/*       */         }
/*       */         return (PlayerHandler.CommonProperty)this.s2CPropertyBuilder_.getMessage(index);
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setS2CProperty(int index, PlayerHandler.CommonProperty value) {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           if (value == null) {
/*       */             throw new NullPointerException();
/*       */           }
/*       */           ensureS2CPropertyIsMutable();
/*       */           this.s2CProperty_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CPropertyBuilder_.setMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setS2CProperty(int index, PlayerHandler.CommonProperty.Builder builderForValue) {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           ensureS2CPropertyIsMutable();
/*       */           this.s2CProperty_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CPropertyBuilder_.setMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addS2CProperty(PlayerHandler.CommonProperty value) {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           if (value == null) {
/*       */             throw new NullPointerException();
/*       */           }
/*       */           ensureS2CPropertyIsMutable();
/*       */           this.s2CProperty_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CPropertyBuilder_.addMessage(value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addS2CProperty(int index, PlayerHandler.CommonProperty value) {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           if (value == null) {
/*       */             throw new NullPointerException();
/*       */           }
/*       */           ensureS2CPropertyIsMutable();
/*       */           this.s2CProperty_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CPropertyBuilder_.addMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addS2CProperty(PlayerHandler.CommonProperty.Builder builderForValue) {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           ensureS2CPropertyIsMutable();
/*       */           this.s2CProperty_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CPropertyBuilder_.addMessage(builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addS2CProperty(int index, PlayerHandler.CommonProperty.Builder builderForValue) {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           ensureS2CPropertyIsMutable();
/*       */           this.s2CProperty_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CPropertyBuilder_.addMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addAllS2CProperty(Iterable<? extends PlayerHandler.CommonProperty> values) {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           ensureS2CPropertyIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.s2CProperty_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CPropertyBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearS2CProperty() {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           this.s2CProperty_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFFB;
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CPropertyBuilder_.clear();
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder removeS2CProperty(int index) {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           ensureS2CPropertyIsMutable();
/*       */           this.s2CProperty_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CPropertyBuilder_.remove(index);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.CommonProperty.Builder getS2CPropertyBuilder(int index) {
/*       */         return (PlayerHandler.CommonProperty.Builder)getS2CPropertyFieldBuilder().getBuilder(index);
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.CommonPropertyOrBuilder getS2CPropertyOrBuilder(int index) {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           return this.s2CProperty_.get(index);
/*       */         }
/*       */         return (PlayerHandler.CommonPropertyOrBuilder)this.s2CPropertyBuilder_.getMessageOrBuilder(index);
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public List<? extends PlayerHandler.CommonPropertyOrBuilder> getS2CPropertyOrBuilderList() {
/*       */         if (this.s2CPropertyBuilder_ != null) {
/*       */           return this.s2CPropertyBuilder_.getMessageOrBuilderList();
/*       */         }
/*       */         return Collections.unmodifiableList((List)this.s2CProperty_);
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.CommonProperty.Builder addS2CPropertyBuilder() {
/*       */         return (PlayerHandler.CommonProperty.Builder)getS2CPropertyFieldBuilder().addBuilder(PlayerHandler.CommonProperty.getDefaultInstance());
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public PlayerHandler.CommonProperty.Builder addS2CPropertyBuilder(int index) {
/*       */         return (PlayerHandler.CommonProperty.Builder)getS2CPropertyFieldBuilder().addBuilder(index, PlayerHandler.CommonProperty.getDefaultInstance());
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       public List<PlayerHandler.CommonProperty.Builder> getS2CPropertyBuilderList() {
/*       */         return getS2CPropertyFieldBuilder().getBuilderList();
/*       */       }
/*       */ 
/*       */ 
/*       */       
/*       */       private RepeatedFieldBuilder<PlayerHandler.CommonProperty, PlayerHandler.CommonProperty.Builder, PlayerHandler.CommonPropertyOrBuilder> getS2CPropertyFieldBuilder() {
/*       */         if (this.s2CPropertyBuilder_ == null) {
/*       */           this.s2CPropertyBuilder_ = new RepeatedFieldBuilder(this.s2CProperty_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean());
/*       */           this.s2CProperty_ = null;
/*       */         } 
/*       */         return this.s2CPropertyBuilder_;
/*       */       }
/*       */     }
/*       */   }
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class BuffInfo
/*       */     extends GeneratedMessage
/*       */     implements BuffInfoOrBuilder
/*       */   {
/* 47566 */     private static final BuffInfo defaultInstance = new BuffInfo(true); private final UnknownFieldSet unknownFields; private BuffInfo(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private BuffInfo(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static BuffInfo getDefaultInstance() { return defaultInstance; } public BuffInfo getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private BuffInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.id_ = input.readInt32(); break;case 16: this.bitField0_ |= 0x2; this.value_ = input.readInt32(); break;case 24: this.bitField0_ |= 0x4; this.isFormat_ = input.readInt32(); break;case 32: this.bitField0_ |= 0x8; this.expireTime_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_BuffInfo_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_BuffInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(BuffInfo.class, Builder.class); } public static Parser<BuffInfo> PARSER = (Parser<BuffInfo>)new AbstractParser<BuffInfo>() { public PlayerHandler.BuffInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.BuffInfo(input, extensionRegistry); } }; private int bitField0_; public static final int ID_FIELD_NUMBER = 1; private int id_; public static final int VALUE_FIELD_NUMBER = 2; private int value_; public static final int ISFORMAT_FIELD_NUMBER = 3; private int isFormat_; public static final int EXPIRETIME_FIELD_NUMBER = 4; private int expireTime_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<BuffInfo> getParserForType() { return PARSER; } public boolean hasId() { return ((this.bitField0_ & 0x1) == 1); } public int getId() { return this.id_; } public boolean hasValue() { return ((this.bitField0_ & 0x2) == 2); } public int getValue() { return this.value_; } public boolean hasIsFormat() { return ((this.bitField0_ & 0x4) == 4); } public int getIsFormat() { return this.isFormat_; } public boolean hasExpireTime() { return ((this.bitField0_ & 0x8) == 8); } public int getExpireTime() { return this.expireTime_; } private void initFields() { this.id_ = 0; this.value_ = 0; this.isFormat_ = 0; this.expireTime_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.id_);  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.value_);  if ((this.bitField0_ & 0x4) == 4) output.writeInt32(3, this.isFormat_);  if ((this.bitField0_ & 0x8) == 8) output.writeInt32(4, this.expireTime_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.id_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.value_);  if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt32Size(3, this.isFormat_);  if ((this.bitField0_ & 0x8) == 8) size += CodedOutputStream.computeInt32Size(4, this.expireTime_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static BuffInfo parseFrom(ByteString data) throws InvalidProtocolBufferException { return (BuffInfo)PARSER.parseFrom(data); } public static BuffInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (BuffInfo)PARSER.parseFrom(data, extensionRegistry); } public static BuffInfo parseFrom(byte[] data) throws InvalidProtocolBufferException { return (BuffInfo)PARSER.parseFrom(data); } public static BuffInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (BuffInfo)PARSER.parseFrom(data, extensionRegistry); } public static BuffInfo parseFrom(InputStream input) throws IOException { return (BuffInfo)PARSER.parseFrom(input); } public static BuffInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (BuffInfo)PARSER.parseFrom(input, extensionRegistry); } public static BuffInfo parseDelimitedFrom(InputStream input) throws IOException { return (BuffInfo)PARSER.parseDelimitedFrom(input); } public static BuffInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (BuffInfo)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static BuffInfo parseFrom(CodedInputStream input) throws IOException { return (BuffInfo)PARSER.parseFrom(input); } public static BuffInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (BuffInfo)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(BuffInfo prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.BuffInfoOrBuilder {
/* 47567 */       private int bitField0_; private int id_; private int value_; private int isFormat_; private int expireTime_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_BuffInfo_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_BuffInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.BuffInfo.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.BuffInfo.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.id_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.value_ = 0; this.bitField0_ &= 0xFFFFFFFD; this.isFormat_ = 0; this.bitField0_ &= 0xFFFFFFFB; this.expireTime_ = 0; this.bitField0_ &= 0xFFFFFFF7; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_BuffInfo_descriptor; } public PlayerHandler.BuffInfo getDefaultInstanceForType() { return PlayerHandler.BuffInfo.getDefaultInstance(); } public PlayerHandler.BuffInfo build() { PlayerHandler.BuffInfo result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.BuffInfo buildPartial() { PlayerHandler.BuffInfo result = new PlayerHandler.BuffInfo(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.id_ = this.id_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.value_ = this.value_; if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;  result.isFormat_ = this.isFormat_; if ((from_bitField0_ & 0x8) == 8) to_bitField0_ |= 0x8;  result.expireTime_ = this.expireTime_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.BuffInfo) return mergeFrom((PlayerHandler.BuffInfo)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.BuffInfo other) { if (other == PlayerHandler.BuffInfo.getDefaultInstance()) return this;  if (other.hasId()) setId(other.getId());  if (other.hasValue()) setValue(other.getValue());  if (other.hasIsFormat()) setIsFormat(other.getIsFormat());  if (other.hasExpireTime()) setExpireTime(other.getExpireTime());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.BuffInfo parsedMessage = null; try { parsedMessage = (PlayerHandler.BuffInfo)PlayerHandler.BuffInfo.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.BuffInfo)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasId() { return ((this.bitField0_ & 0x1) == 1); } public int getId() { return this.id_; } public Builder setId(int value) { this.bitField0_ |= 0x1; this.id_ = value; onChanged(); return this; } public Builder clearId() { this.bitField0_ &= 0xFFFFFFFE; this.id_ = 0; onChanged(); return this; } public boolean hasValue() { return ((this.bitField0_ & 0x2) == 2); } public int getValue() { return this.value_; } public Builder setValue(int value) { this.bitField0_ |= 0x2; this.value_ = value; onChanged(); return this; } public Builder clearValue() { this.bitField0_ &= 0xFFFFFFFD; this.value_ = 0; onChanged(); return this; } public boolean hasIsFormat() { return ((this.bitField0_ & 0x4) == 4); } public int getIsFormat() { return this.isFormat_; } public Builder setIsFormat(int value) { this.bitField0_ |= 0x4; this.isFormat_ = value; onChanged(); return this; } public Builder clearIsFormat() { this.bitField0_ &= 0xFFFFFFFB; this.isFormat_ = 0; onChanged(); return this; } public boolean hasExpireTime() { return ((this.bitField0_ & 0x8) == 8); } public int getExpireTime() { return this.expireTime_; } public Builder setExpireTime(int value) { this.bitField0_ |= 0x8; this.expireTime_ = value; onChanged(); return this; } public Builder clearExpireTime() { this.bitField0_ &= 0xFFFFFFF7; this.expireTime_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class BuffPropertyPush
/*       */     extends GeneratedMessage
/*       */     implements BuffPropertyPushOrBuilder
/*       */   {
/* 48354 */     private static final BuffPropertyPush defaultInstance = new BuffPropertyPush(true); private final UnknownFieldSet unknownFields; private BuffPropertyPush(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private BuffPropertyPush(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static BuffPropertyPush getDefaultInstance() { return defaultInstance; } public BuffPropertyPush getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private BuffPropertyPush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 26: if ((mutable_bitField0_ & 0x1) != 1) { this.buffList_ = new ArrayList<>(); mutable_bitField0_ |= 0x1; }  this.buffList_.add(input.readMessage(PlayerHandler.BuffInfo.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x1) == 1) this.buffList_ = Collections.unmodifiableList(this.buffList_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_BuffPropertyPush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_BuffPropertyPush_fieldAccessorTable.ensureFieldAccessorsInitialized(BuffPropertyPush.class, Builder.class); } public static Parser<BuffPropertyPush> PARSER = (Parser<BuffPropertyPush>)new AbstractParser<BuffPropertyPush>() { public PlayerHandler.BuffPropertyPush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.BuffPropertyPush(input, extensionRegistry); } }; public static final int BUFFLIST_FIELD_NUMBER = 3; private List<PlayerHandler.BuffInfo> buffList_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<BuffPropertyPush> getParserForType() { return PARSER; } public List<PlayerHandler.BuffInfo> getBuffListList() { return this.buffList_; } public List<? extends PlayerHandler.BuffInfoOrBuilder> getBuffListOrBuilderList() { return (List)this.buffList_; } public int getBuffListCount() { return this.buffList_.size(); } public PlayerHandler.BuffInfo getBuffList(int index) { return this.buffList_.get(index); } public PlayerHandler.BuffInfoOrBuilder getBuffListOrBuilder(int index) { return this.buffList_.get(index); } private void initFields() { this.buffList_ = Collections.emptyList(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); for (int i = 0; i < this.buffList_.size(); i++) output.writeMessage(3, (MessageLite)this.buffList_.get(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; for (int i = 0; i < this.buffList_.size(); i++) size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.buffList_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static BuffPropertyPush parseFrom(ByteString data) throws InvalidProtocolBufferException { return (BuffPropertyPush)PARSER.parseFrom(data); } public static BuffPropertyPush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (BuffPropertyPush)PARSER.parseFrom(data, extensionRegistry); } public static BuffPropertyPush parseFrom(byte[] data) throws InvalidProtocolBufferException { return (BuffPropertyPush)PARSER.parseFrom(data); } public static BuffPropertyPush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (BuffPropertyPush)PARSER.parseFrom(data, extensionRegistry); } public static BuffPropertyPush parseFrom(InputStream input) throws IOException { return (BuffPropertyPush)PARSER.parseFrom(input); } public static BuffPropertyPush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (BuffPropertyPush)PARSER.parseFrom(input, extensionRegistry); } public static BuffPropertyPush parseDelimitedFrom(InputStream input) throws IOException { return (BuffPropertyPush)PARSER.parseDelimitedFrom(input); } public static BuffPropertyPush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (BuffPropertyPush)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static BuffPropertyPush parseFrom(CodedInputStream input) throws IOException { return (BuffPropertyPush)PARSER.parseFrom(input); } public static BuffPropertyPush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (BuffPropertyPush)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(BuffPropertyPush prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.BuffPropertyPushOrBuilder {
/* 48355 */       private int bitField0_; private List<PlayerHandler.BuffInfo> buffList_; private RepeatedFieldBuilder<PlayerHandler.BuffInfo, PlayerHandler.BuffInfo.Builder, PlayerHandler.BuffInfoOrBuilder> buffListBuilder_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_BuffPropertyPush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_BuffPropertyPush_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.BuffPropertyPush.class, Builder.class); } private Builder() { this.buffList_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.buffList_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.BuffPropertyPush.alwaysUseFieldBuilders) getBuffListFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); if (this.buffListBuilder_ == null) { this.buffList_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFE; } else { this.buffListBuilder_.clear(); }  return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_BuffPropertyPush_descriptor; } public PlayerHandler.BuffPropertyPush getDefaultInstanceForType() { return PlayerHandler.BuffPropertyPush.getDefaultInstance(); } public PlayerHandler.BuffPropertyPush build() { PlayerHandler.BuffPropertyPush result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.BuffPropertyPush buildPartial() { PlayerHandler.BuffPropertyPush result = new PlayerHandler.BuffPropertyPush(this); int from_bitField0_ = this.bitField0_; if (this.buffListBuilder_ == null) { if ((this.bitField0_ & 0x1) == 1) { this.buffList_ = Collections.unmodifiableList(this.buffList_); this.bitField0_ &= 0xFFFFFFFE; }  result.buffList_ = this.buffList_; } else { result.buffList_ = this.buffListBuilder_.build(); }  onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.BuffPropertyPush) return mergeFrom((PlayerHandler.BuffPropertyPush)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.BuffPropertyPush other) { if (other == PlayerHandler.BuffPropertyPush.getDefaultInstance()) return this;  if (this.buffListBuilder_ == null) { if (!other.buffList_.isEmpty()) { if (this.buffList_.isEmpty()) { this.buffList_ = other.buffList_; this.bitField0_ &= 0xFFFFFFFE; } else { ensureBuffListIsMutable(); this.buffList_.addAll(other.buffList_); }  onChanged(); }  } else if (!other.buffList_.isEmpty()) { if (this.buffListBuilder_.isEmpty()) { this.buffListBuilder_.dispose(); this.buffListBuilder_ = null; this.buffList_ = other.buffList_; this.bitField0_ &= 0xFFFFFFFE; this.buffListBuilder_ = PlayerHandler.BuffPropertyPush.alwaysUseFieldBuilders ? getBuffListFieldBuilder() : null; } else { this.buffListBuilder_.addAllMessages(other.buffList_); }  }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.BuffPropertyPush parsedMessage = null; try { parsedMessage = (PlayerHandler.BuffPropertyPush)PlayerHandler.BuffPropertyPush.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.BuffPropertyPush)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } private void ensureBuffListIsMutable() { if ((this.bitField0_ & 0x1) != 1) { this.buffList_ = new ArrayList<>(this.buffList_); this.bitField0_ |= 0x1; }  } public List<PlayerHandler.BuffInfo> getBuffListList() { if (this.buffListBuilder_ == null) return Collections.unmodifiableList(this.buffList_);  return this.buffListBuilder_.getMessageList(); } public int getBuffListCount() { if (this.buffListBuilder_ == null) return this.buffList_.size();  return this.buffListBuilder_.getCount(); } public PlayerHandler.BuffInfo getBuffList(int index) { if (this.buffListBuilder_ == null) return this.buffList_.get(index);  return (PlayerHandler.BuffInfo)this.buffListBuilder_.getMessage(index); } public Builder setBuffList(int index, PlayerHandler.BuffInfo value) { if (this.buffListBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureBuffListIsMutable(); this.buffList_.set(index, value); onChanged(); } else { this.buffListBuilder_.setMessage(index, value); }  return this; } public Builder setBuffList(int index, PlayerHandler.BuffInfo.Builder builderForValue) { if (this.buffListBuilder_ == null) { ensureBuffListIsMutable(); this.buffList_.set(index, builderForValue.build()); onChanged(); } else { this.buffListBuilder_.setMessage(index, builderForValue.build()); }  return this; } public Builder addBuffList(PlayerHandler.BuffInfo value) { if (this.buffListBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureBuffListIsMutable(); this.buffList_.add(value); onChanged(); } else { this.buffListBuilder_.addMessage(value); }  return this; } public Builder addBuffList(int index, PlayerHandler.BuffInfo value) { if (this.buffListBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureBuffListIsMutable(); this.buffList_.add(index, value); onChanged(); } else { this.buffListBuilder_.addMessage(index, value); }  return this; } public Builder addBuffList(PlayerHandler.BuffInfo.Builder builderForValue) { if (this.buffListBuilder_ == null) { ensureBuffListIsMutable(); this.buffList_.add(builderForValue.build()); onChanged(); } else { this.buffListBuilder_.addMessage(builderForValue.build()); }  return this; } public Builder addBuffList(int index, PlayerHandler.BuffInfo.Builder builderForValue) { if (this.buffListBuilder_ == null) { ensureBuffListIsMutable(); this.buffList_.add(index, builderForValue.build()); onChanged(); } else { this.buffListBuilder_.addMessage(index, builderForValue.build()); }  return this; } public Builder addAllBuffList(Iterable<? extends PlayerHandler.BuffInfo> values) { if (this.buffListBuilder_ == null) { ensureBuffListIsMutable(); AbstractMessageLite.Builder.addAll(values, this.buffList_); onChanged(); } else { this.buffListBuilder_.addAllMessages(values); }  return this; } public Builder clearBuffList() { if (this.buffListBuilder_ == null) { this.buffList_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFE; onChanged(); } else { this.buffListBuilder_.clear(); }  return this; } public Builder removeBuffList(int index) { if (this.buffListBuilder_ == null) { ensureBuffListIsMutable(); this.buffList_.remove(index); onChanged(); } else { this.buffListBuilder_.remove(index); }  return this; } public PlayerHandler.BuffInfo.Builder getBuffListBuilder(int index) { return (PlayerHandler.BuffInfo.Builder)getBuffListFieldBuilder().getBuilder(index); } public PlayerHandler.BuffInfoOrBuilder getBuffListOrBuilder(int index) { if (this.buffListBuilder_ == null) return this.buffList_.get(index);  return (PlayerHandler.BuffInfoOrBuilder)this.buffListBuilder_.getMessageOrBuilder(index); } public List<? extends PlayerHandler.BuffInfoOrBuilder> getBuffListOrBuilderList() { if (this.buffListBuilder_ != null) return this.buffListBuilder_.getMessageOrBuilderList();  return Collections.unmodifiableList((List)this.buffList_); } public PlayerHandler.BuffInfo.Builder addBuffListBuilder() { return (PlayerHandler.BuffInfo.Builder)getBuffListFieldBuilder().addBuilder(PlayerHandler.BuffInfo.getDefaultInstance()); } public PlayerHandler.BuffInfo.Builder addBuffListBuilder(int index) { return (PlayerHandler.BuffInfo.Builder)getBuffListFieldBuilder().addBuilder(index, PlayerHandler.BuffInfo.getDefaultInstance()); } public List<PlayerHandler.BuffInfo.Builder> getBuffListBuilderList() { return getBuffListFieldBuilder().getBuilderList(); } private RepeatedFieldBuilder<PlayerHandler.BuffInfo, PlayerHandler.BuffInfo.Builder, PlayerHandler.BuffInfoOrBuilder> getBuffListFieldBuilder() { if (this.buffListBuilder_ == null) { this.buffListBuilder_ = new RepeatedFieldBuilder(this.buffList_, ((this.bitField0_ & 0x1) == 1), getParentForChildren(), isClean()); this.buffList_ = null; }  return this.buffListBuilder_; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class PlayerBattleAttributePush
/*       */     extends GeneratedMessage
/*       */     implements PlayerBattleAttributePushOrBuilder
/*       */   {
/* 49042 */     private static final PlayerBattleAttributePush defaultInstance = new PlayerBattleAttributePush(true); private final UnknownFieldSet unknownFields; private PlayerBattleAttributePush(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private PlayerBattleAttributePush(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static PlayerBattleAttributePush getDefaultInstance() { return defaultInstance; } public PlayerBattleAttributePush getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private PlayerBattleAttributePush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 18: if ((mutable_bitField0_ & 0x1) != 1) { this.datas_ = new ArrayList<>(); mutable_bitField0_ |= 0x1; }  this.datas_.add(input.readMessage(Common.AttributeSimple.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x1) == 1) this.datas_ = Collections.unmodifiableList(this.datas_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_PlayerBattleAttributePush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_PlayerBattleAttributePush_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerBattleAttributePush.class, Builder.class); } public static Parser<PlayerBattleAttributePush> PARSER = (Parser<PlayerBattleAttributePush>)new AbstractParser<PlayerBattleAttributePush>() { public PlayerHandler.PlayerBattleAttributePush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.PlayerBattleAttributePush(input, extensionRegistry); } }; public static final int DATAS_FIELD_NUMBER = 2; private List<Common.AttributeSimple> datas_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<PlayerBattleAttributePush> getParserForType() { return PARSER; } public List<Common.AttributeSimple> getDatasList() { return this.datas_; } public List<? extends Common.AttributeSimpleOrBuilder> getDatasOrBuilderList() { return (List)this.datas_; } public int getDatasCount() { return this.datas_.size(); } public Common.AttributeSimple getDatas(int index) { return this.datas_.get(index); } public Common.AttributeSimpleOrBuilder getDatasOrBuilder(int index) { return (Common.AttributeSimpleOrBuilder)this.datas_.get(index); } private void initFields() { this.datas_ = Collections.emptyList(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  for (int i = 0; i < getDatasCount(); i++) { if (!getDatas(i).isInitialized()) { this.memoizedIsInitialized = 0; return false; }  }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); for (int i = 0; i < this.datas_.size(); i++) output.writeMessage(2, (MessageLite)this.datas_.get(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; for (int i = 0; i < this.datas_.size(); i++) size += CodedOutputStream.computeMessageSize(2, (MessageLite)this.datas_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static PlayerBattleAttributePush parseFrom(ByteString data) throws InvalidProtocolBufferException { return (PlayerBattleAttributePush)PARSER.parseFrom(data); } public static PlayerBattleAttributePush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PlayerBattleAttributePush)PARSER.parseFrom(data, extensionRegistry); } public static PlayerBattleAttributePush parseFrom(byte[] data) throws InvalidProtocolBufferException { return (PlayerBattleAttributePush)PARSER.parseFrom(data); } public static PlayerBattleAttributePush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PlayerBattleAttributePush)PARSER.parseFrom(data, extensionRegistry); } public static PlayerBattleAttributePush parseFrom(InputStream input) throws IOException { return (PlayerBattleAttributePush)PARSER.parseFrom(input); } public static PlayerBattleAttributePush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PlayerBattleAttributePush)PARSER.parseFrom(input, extensionRegistry); } public static PlayerBattleAttributePush parseDelimitedFrom(InputStream input) throws IOException { return (PlayerBattleAttributePush)PARSER.parseDelimitedFrom(input); } public static PlayerBattleAttributePush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PlayerBattleAttributePush)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static PlayerBattleAttributePush parseFrom(CodedInputStream input) throws IOException { return (PlayerBattleAttributePush)PARSER.parseFrom(input); } public static PlayerBattleAttributePush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PlayerBattleAttributePush)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(PlayerBattleAttributePush prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.PlayerBattleAttributePushOrBuilder {
/* 49043 */       private int bitField0_; private List<Common.AttributeSimple> datas_; private RepeatedFieldBuilder<Common.AttributeSimple, Common.AttributeSimple.Builder, Common.AttributeSimpleOrBuilder> datasBuilder_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_PlayerBattleAttributePush_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_PlayerBattleAttributePush_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.PlayerBattleAttributePush.class, Builder.class); } private Builder() { this.datas_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.datas_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.PlayerBattleAttributePush.alwaysUseFieldBuilders) getDatasFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); if (this.datasBuilder_ == null) { this.datas_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFE; } else { this.datasBuilder_.clear(); }  return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_PlayerBattleAttributePush_descriptor; } public PlayerHandler.PlayerBattleAttributePush getDefaultInstanceForType() { return PlayerHandler.PlayerBattleAttributePush.getDefaultInstance(); } public PlayerHandler.PlayerBattleAttributePush build() { PlayerHandler.PlayerBattleAttributePush result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.PlayerBattleAttributePush buildPartial() { PlayerHandler.PlayerBattleAttributePush result = new PlayerHandler.PlayerBattleAttributePush(this); int from_bitField0_ = this.bitField0_; if (this.datasBuilder_ == null) { if ((this.bitField0_ & 0x1) == 1) { this.datas_ = Collections.unmodifiableList(this.datas_); this.bitField0_ &= 0xFFFFFFFE; }  result.datas_ = this.datas_; } else { result.datas_ = this.datasBuilder_.build(); }  onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.PlayerBattleAttributePush) return mergeFrom((PlayerHandler.PlayerBattleAttributePush)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.PlayerBattleAttributePush other) { if (other == PlayerHandler.PlayerBattleAttributePush.getDefaultInstance()) return this;  if (this.datasBuilder_ == null) { if (!other.datas_.isEmpty()) { if (this.datas_.isEmpty()) { this.datas_ = other.datas_; this.bitField0_ &= 0xFFFFFFFE; } else { ensureDatasIsMutable(); this.datas_.addAll(other.datas_); }  onChanged(); }  } else if (!other.datas_.isEmpty()) { if (this.datasBuilder_.isEmpty()) { this.datasBuilder_.dispose(); this.datasBuilder_ = null; this.datas_ = other.datas_; this.bitField0_ &= 0xFFFFFFFE; this.datasBuilder_ = PlayerHandler.PlayerBattleAttributePush.alwaysUseFieldBuilders ? getDatasFieldBuilder() : null; } else { this.datasBuilder_.addAllMessages(other.datas_); }  }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { for (int i = 0; i < getDatasCount(); i++) { if (!getDatas(i).isInitialized()) return false;  }  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.PlayerBattleAttributePush parsedMessage = null; try { parsedMessage = (PlayerHandler.PlayerBattleAttributePush)PlayerHandler.PlayerBattleAttributePush.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.PlayerBattleAttributePush)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } private void ensureDatasIsMutable() { if ((this.bitField0_ & 0x1) != 1) { this.datas_ = new ArrayList<>(this.datas_); this.bitField0_ |= 0x1; }  } public List<Common.AttributeSimple> getDatasList() { if (this.datasBuilder_ == null) return Collections.unmodifiableList(this.datas_);  return this.datasBuilder_.getMessageList(); } public int getDatasCount() { if (this.datasBuilder_ == null) return this.datas_.size();  return this.datasBuilder_.getCount(); } public Common.AttributeSimple getDatas(int index) { if (this.datasBuilder_ == null) return this.datas_.get(index);  return (Common.AttributeSimple)this.datasBuilder_.getMessage(index); } public Builder setDatas(int index, Common.AttributeSimple value) { if (this.datasBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureDatasIsMutable(); this.datas_.set(index, value); onChanged(); } else { this.datasBuilder_.setMessage(index, (GeneratedMessage)value); }  return this; } public Builder setDatas(int index, Common.AttributeSimple.Builder builderForValue) { if (this.datasBuilder_ == null) { ensureDatasIsMutable(); this.datas_.set(index, builderForValue.build()); onChanged(); } else { this.datasBuilder_.setMessage(index, (GeneratedMessage)builderForValue.build()); }  return this; } public Builder addDatas(Common.AttributeSimple value) { if (this.datasBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureDatasIsMutable(); this.datas_.add(value); onChanged(); } else { this.datasBuilder_.addMessage((GeneratedMessage)value); }  return this; } public Builder addDatas(int index, Common.AttributeSimple value) { if (this.datasBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureDatasIsMutable(); this.datas_.add(index, value); onChanged(); } else { this.datasBuilder_.addMessage(index, (GeneratedMessage)value); }  return this; } public Builder addDatas(Common.AttributeSimple.Builder builderForValue) { if (this.datasBuilder_ == null) { ensureDatasIsMutable(); this.datas_.add(builderForValue.build()); onChanged(); } else { this.datasBuilder_.addMessage((GeneratedMessage)builderForValue.build()); }  return this; } public Builder addDatas(int index, Common.AttributeSimple.Builder builderForValue) { if (this.datasBuilder_ == null) { ensureDatasIsMutable(); this.datas_.add(index, builderForValue.build()); onChanged(); } else { this.datasBuilder_.addMessage(index, (GeneratedMessage)builderForValue.build()); }  return this; } public Builder addAllDatas(Iterable<? extends Common.AttributeSimple> values) { if (this.datasBuilder_ == null) { ensureDatasIsMutable(); AbstractMessageLite.Builder.addAll(values, this.datas_); onChanged(); } else { this.datasBuilder_.addAllMessages(values); }  return this; } public Builder clearDatas() { if (this.datasBuilder_ == null) { this.datas_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFE; onChanged(); } else { this.datasBuilder_.clear(); }  return this; } public Builder removeDatas(int index) { if (this.datasBuilder_ == null) { ensureDatasIsMutable(); this.datas_.remove(index); onChanged(); } else { this.datasBuilder_.remove(index); }  return this; } public Common.AttributeSimple.Builder getDatasBuilder(int index) { return (Common.AttributeSimple.Builder)getDatasFieldBuilder().getBuilder(index); } public Common.AttributeSimpleOrBuilder getDatasOrBuilder(int index) { if (this.datasBuilder_ == null) return (Common.AttributeSimpleOrBuilder)this.datas_.get(index);  return (Common.AttributeSimpleOrBuilder)this.datasBuilder_.getMessageOrBuilder(index); } public List<? extends Common.AttributeSimpleOrBuilder> getDatasOrBuilderList() { if (this.datasBuilder_ != null) return this.datasBuilder_.getMessageOrBuilderList();  return (List)Collections.unmodifiableList(this.datas_); } public Common.AttributeSimple.Builder addDatasBuilder() { return (Common.AttributeSimple.Builder)getDatasFieldBuilder().addBuilder((GeneratedMessage)Common.AttributeSimple.getDefaultInstance()); } public Common.AttributeSimple.Builder addDatasBuilder(int index) { return (Common.AttributeSimple.Builder)getDatasFieldBuilder().addBuilder(index, (GeneratedMessage)Common.AttributeSimple.getDefaultInstance()); } public List<Common.AttributeSimple.Builder> getDatasBuilderList() { return getDatasFieldBuilder().getBuilderList(); } private RepeatedFieldBuilder<Common.AttributeSimple, Common.AttributeSimple.Builder, Common.AttributeSimpleOrBuilder> getDatasFieldBuilder() { if (this.datasBuilder_ == null) { this.datasBuilder_ = new RepeatedFieldBuilder(this.datas_, ((this.bitField0_ & 0x1) == 1), getParentForChildren(), isClean()); this.datas_ = null; }  return this.datasBuilder_; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class SendGMCmdRequest
/*       */     extends GeneratedMessage
/*       */     implements SendGMCmdRequestOrBuilder
/*       */   {
/* 49534 */     private static final SendGMCmdRequest defaultInstance = new SendGMCmdRequest(true); private final UnknownFieldSet unknownFields; private SendGMCmdRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private SendGMCmdRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static SendGMCmdRequest getDefaultInstance() { return defaultInstance; } public SendGMCmdRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private SendGMCmdRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2SMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_SendGMCmdRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_SendGMCmdRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(SendGMCmdRequest.class, Builder.class); } public static Parser<SendGMCmdRequest> PARSER = (Parser<SendGMCmdRequest>)new AbstractParser<SendGMCmdRequest>() { public PlayerHandler.SendGMCmdRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.SendGMCmdRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_MSG_FIELD_NUMBER = 1; private Object c2SMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<SendGMCmdRequest> getParserForType() { return PARSER; } public boolean hasC2SMsg() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SMsg() { Object ref = this.c2SMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SMsg_ = s;  return s; } public ByteString getC2SMsgBytes() { Object ref = this.c2SMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.c2SMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SMsg()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static SendGMCmdRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (SendGMCmdRequest)PARSER.parseFrom(data); } public static SendGMCmdRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (SendGMCmdRequest)PARSER.parseFrom(data, extensionRegistry); } public static SendGMCmdRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (SendGMCmdRequest)PARSER.parseFrom(data); } public static SendGMCmdRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (SendGMCmdRequest)PARSER.parseFrom(data, extensionRegistry); } public static SendGMCmdRequest parseFrom(InputStream input) throws IOException { return (SendGMCmdRequest)PARSER.parseFrom(input); } public static SendGMCmdRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (SendGMCmdRequest)PARSER.parseFrom(input, extensionRegistry); } public static SendGMCmdRequest parseDelimitedFrom(InputStream input) throws IOException { return (SendGMCmdRequest)PARSER.parseDelimitedFrom(input); } public static SendGMCmdRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (SendGMCmdRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static SendGMCmdRequest parseFrom(CodedInputStream input) throws IOException { return (SendGMCmdRequest)PARSER.parseFrom(input); } public static SendGMCmdRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (SendGMCmdRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(SendGMCmdRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.SendGMCmdRequestOrBuilder {
/* 49535 */       private int bitField0_; private Object c2SMsg_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_SendGMCmdRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_SendGMCmdRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.SendGMCmdRequest.class, Builder.class); } private Builder() { this.c2SMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.SendGMCmdRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SMsg_ = ""; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_SendGMCmdRequest_descriptor; } public PlayerHandler.SendGMCmdRequest getDefaultInstanceForType() { return PlayerHandler.SendGMCmdRequest.getDefaultInstance(); } public PlayerHandler.SendGMCmdRequest build() { PlayerHandler.SendGMCmdRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.SendGMCmdRequest buildPartial() { PlayerHandler.SendGMCmdRequest result = new PlayerHandler.SendGMCmdRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SMsg_ = this.c2SMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.SendGMCmdRequest) return mergeFrom((PlayerHandler.SendGMCmdRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.SendGMCmdRequest other) { if (other == PlayerHandler.SendGMCmdRequest.getDefaultInstance()) return this;  if (other.hasC2SMsg()) { this.bitField0_ |= 0x1; this.c2SMsg_ = other.c2SMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SMsg()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.SendGMCmdRequest parsedMessage = null; try { parsedMessage = (PlayerHandler.SendGMCmdRequest)PlayerHandler.SendGMCmdRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.SendGMCmdRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SMsg() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SMsg() { Object ref = this.c2SMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SMsg_ = s;  return s; }  return (String)ref; } public ByteString getC2SMsgBytes() { Object ref = this.c2SMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SMsg_ = b; return b; }  return (ByteString)ref; } public Builder setC2SMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SMsg_ = value; onChanged(); return this; } public Builder clearC2SMsg() { this.bitField0_ &= 0xFFFFFFFE; this.c2SMsg_ = PlayerHandler.SendGMCmdRequest.getDefaultInstance().getC2SMsg(); onChanged(); return this; } public Builder setC2SMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class SendGMCmdResponse
/*       */     extends GeneratedMessage
/*       */     implements SendGMCmdResponseOrBuilder
/*       */   {
/* 50104 */     private static final SendGMCmdResponse defaultInstance = new SendGMCmdResponse(true); private final UnknownFieldSet unknownFields; private SendGMCmdResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private SendGMCmdResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static SendGMCmdResponse getDefaultInstance() { return defaultInstance; } public SendGMCmdResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private SendGMCmdResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_SendGMCmdResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_SendGMCmdResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(SendGMCmdResponse.class, Builder.class); } public static Parser<SendGMCmdResponse> PARSER = (Parser<SendGMCmdResponse>)new AbstractParser<SendGMCmdResponse>() { public PlayerHandler.SendGMCmdResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new PlayerHandler.SendGMCmdResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<SendGMCmdResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static SendGMCmdResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (SendGMCmdResponse)PARSER.parseFrom(data); } public static SendGMCmdResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (SendGMCmdResponse)PARSER.parseFrom(data, extensionRegistry); } public static SendGMCmdResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (SendGMCmdResponse)PARSER.parseFrom(data); } public static SendGMCmdResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (SendGMCmdResponse)PARSER.parseFrom(data, extensionRegistry); } public static SendGMCmdResponse parseFrom(InputStream input) throws IOException { return (SendGMCmdResponse)PARSER.parseFrom(input); } public static SendGMCmdResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (SendGMCmdResponse)PARSER.parseFrom(input, extensionRegistry); } public static SendGMCmdResponse parseDelimitedFrom(InputStream input) throws IOException { return (SendGMCmdResponse)PARSER.parseDelimitedFrom(input); } public static SendGMCmdResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (SendGMCmdResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static SendGMCmdResponse parseFrom(CodedInputStream input) throws IOException { return (SendGMCmdResponse)PARSER.parseFrom(input); } public static SendGMCmdResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (SendGMCmdResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(SendGMCmdResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements PlayerHandler.SendGMCmdResponseOrBuilder {
/* 50105 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return PlayerHandler.internal_static_pomelo_area_SendGMCmdResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return PlayerHandler.internal_static_pomelo_area_SendGMCmdResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerHandler.SendGMCmdResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (PlayerHandler.SendGMCmdResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return PlayerHandler.internal_static_pomelo_area_SendGMCmdResponse_descriptor; } public PlayerHandler.SendGMCmdResponse getDefaultInstanceForType() { return PlayerHandler.SendGMCmdResponse.getDefaultInstance(); } public PlayerHandler.SendGMCmdResponse build() { PlayerHandler.SendGMCmdResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public PlayerHandler.SendGMCmdResponse buildPartial() { PlayerHandler.SendGMCmdResponse result = new PlayerHandler.SendGMCmdResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof PlayerHandler.SendGMCmdResponse) return mergeFrom((PlayerHandler.SendGMCmdResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(PlayerHandler.SendGMCmdResponse other) { if (other == PlayerHandler.SendGMCmdResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { PlayerHandler.SendGMCmdResponse parsedMessage = null; try { parsedMessage = (PlayerHandler.SendGMCmdResponse)PlayerHandler.SendGMCmdResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (PlayerHandler.SendGMCmdResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = PlayerHandler.SendGMCmdResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static Descriptors.FileDescriptor getDescriptor() {
/* 50509 */     return descriptor;
/*       */   }
/*       */ 
/*       */   
/*       */   static {
/* 50514 */     String[] descriptorData = { "\n\023playerHandler.proto\022\013pomelo.area\032\fcommon.proto\032\fplayer.proto\032\nitem.proto\"+\n\021EnterSceneRequest\022\026\n\016c2s_instanceId\030\001 \001(\t\"f\n\022EnterSceneResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022\026\n\016s2c_instanceId\030\003 \001(\t\022\025\n\rs2c_areaIndex\030\004 \001(\005\"%\n\021BattleEventNotify\022\020\n\bc2s_data\030\001 \002(\f\"=\n\017PickItemRequest\022\026\n\016c2s_instanceId\030\001 \002(\t\022\022\n\nc2s_itemId\030\002 \002(\t\"5\n\020PickItemResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"T\n\023ChangeAreaXYRequ", "est\022\r\n\005mapId\030\001 \002(\005\022\f\n\004posx\030\002 \001(\005\022\f\n\004posy\030\003 \001(\005\022\022\n\ninstanceId\030\004 \001(\t\"9\n\024ChangeAreaXYResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"c\n\027ChangeAreaByTaskRequest\022\r\n\005mapId\030\001 \002(\005\022\016\n\006taskId\030\002 \002(\005\022\f\n\004posx\030\003 \002(\005\022\f\n\004posy\030\004 \002(\005\022\r\n\005point\030\005 \001(\005\"=\n\030ChangeAreaByTaskResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\":\n\021ChangeAreaRequest\022\023\n\013c2s_pointId\030\001 \002(\t\022\020\n\bc2s_type\030\002 \002(\005\"N\n\022ChangeAreaResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg", "\030\002 \001(\t\022\025\n\rs2c_enterTips\030\003 \001(\t\"*\n\024TransByAreaIdRequest\022\022\n\nc2s_areaId\030\001 \002(\005\":\n\025TransByAreaIdResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"2\n\030TransByInstanceIdRequest\022\026\n\016c2s_instanceId\030\001 \002(\t\">\n\031TransByInstanceIdResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"\022\n\020LeaveAreaRequest\"6\n\021LeaveAreaResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\">\n\023QueryLoadWayRequest\022\022\n\nc2s_areaId\030\001 \002(\005\022\023\n\013c2s_pointId\030\002 \002(\t\"N\n\024QueryLo", "adWayResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022\023\n\013s2c_pointId\030\003 \001(\t\"(\n\025RecentContactsRequest\022\017\n\007c2s_ids\030\001 \003(\t\"[\n\021recentContactInfo\022\n\n\002id\030\001 \002(\t\022\f\n\004name\030\002 \002(\t\022\r\n\005level\030\003 \002(\005\022\013\n\003pro\030\004 \002(\005\022\020\n\bisFriend\030\005 \002(\005\"m\n\026RecentContactsResponse\022\020\n\bs2c_code\030\001 \002(\005\0220\n\bs2c_data\030\002 \003(\0132\036.pomelo.area.recentContactInfo\022\017\n\007s2c_msg\030\003 \001(\t\"Q\n\017RewardBasicData\022\022\n\ntemplateId\030\001 \002(\005\022\013\n\003num\030\002 \002(\005\022\f\n\004icon\030\003 \002(\005\022\017\n\007quality\030\004 \002(\005\"f", "\n\013DailyReward\022\n\n\002id\030\001 \002(\005\022-\n\007rewards\030\002 \003(\0132\034.pomelo.area.RewardBasicData\022\r\n\005score\030\003 \002(\005\022\r\n\005isGet\030\004 \002(\005\"\001\n\rDailyActivity\022\n\n\002id\030\001 \002(\005\022\f\n\004name\030\002 \002(\t\022\r\n\005score\030\003 \002(\005\022\022\n\nscoreLimit\030\004 \002(\005\022\f\n\004rule\030\005 \002(\t\022\016\n\006target\030\006 \002(\005\022\r\n\005level\030\007 \002(\005\022\f\n\004sort\030\b \002(\005\"\001\n\017DailyActivities\022\022\n\ntotalScore\030\001 \002(\005\0221\n\rdayActivities\030\002 \003(\0132\032.pomelo.area.DailyActivity\022+\n\tdayReward\030\003 \003(\0132\030.pomelo.area.DailyReward\"5\n\017BattleEventPush\022\020\n\bs", "2c_name\030\001 \002(\t\022\020\n\bs2c_data\030\002 \002(\f\"#\n\017BattleClearPush\022\020\n\bs2c_name\030\001 \002(\t\"/\n\017SuperScriptType\022\f\n\004type\030\001 \002(\005\022\016\n\006number\030\002 \002(\005\"A\n\017SuperScriptPush\022.\n\bs2c_data\030\002 \003(\0132\034.pomelo.area.SuperScriptType\"³\001\n\016ChangeAreaPush\022\021\n\ts2c_mapId\030\002 \002(\005\022\023\n\013s2c_sceneId\030\003 \002(\005\022\025\n\rs2c_sceneType\030\004 \002(\005\022\031\n\021s2c_sceneUseAgent\030\005 \002(\005\022\030\n\020s2c_changePkType\030\006 \002(\005\022\025\n\rs2c_rideMount\030\007 \002(\005\022\026\n\016s2c_instanceId\030\b \002(\t\"(\n\023ChangPkModelRequest\022\021\n\tc2s_mod", "el\030\001 \002(\005\"R\n\023ChangPkModelRespone\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022\030\n\020s2c_currentModel\030\003 \001(\005\"\026\n\024ReliveSendPosRequest\":\n\025ReliveSendPosResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\".\n\rReliveRequest\022\f\n\004type\030\001 \002(\005\022\017\n\007autoPay\030\002 \001(\005\"3\n\016ReliveResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"\025\n\023GetAreaLinesRequest\"@\n\fAreaLineData\022\022\n\ninstanceId\030\001 \002(\t\022\r\n\005state\030\002 \002(\005\022\r\n\005index\030\003 \002(\005\"f\n\024GetAreaLinesResponse\022\020\n\bs2c_co", "de\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022+\n\bs2c_data\030\003 \003(\0132\031.pomelo.area.AreaLineData\"B\n\030LookUpOtherPlayerRequest\022\024\n\fc2s_playerId\030\001 \002(\t\022\020\n\bc2s_type\030\002 \002(\005\"m\n\031LookUpOtherPlayerResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022-\n\bs2c_data\030\003 \001(\0132\033.pomelo.player.LookUpPlayer\"\025\n\023AgreeRebirthRequest\"9\n\024AgreeRebirthResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"2\n\nCDKRequest\022\017\n\007c2s_cdk\030\001 \002(\t\022\023\n\013c2s_channel\030\002 \002(\005\"0\n\013CDKResponse\022\020", "\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"+\n\020TransportRequest\022\027\n\017c2s_transportId\030\001 \002(\005\"6\n\021TransportResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"9\n\023CustomConfigRequest\022\017\n\007c2s_key\030\001 \002(\t\022\021\n\tc2s_value\030\002 \002(\t\"9\n\024CustomConfigResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"W\n\027SimulateDropByTcRequest\022\022\n\nc2s_tcCode\030\001 \002(\t\022\023\n\013c2s_tcCount\030\002 \002(\005\022\023\n\013c2s_tcLevel\030\003 \002(\005\"f\n\030SimulateDropByTcResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002", " \001(\t\022\022\n\ns2c_runNum\030\003 \001(\005\022\023\n\013s2c_succPer\030\004 \001(\005\"0\n\030GetPlayerPositionRequest\022\024\n\fs2c_playerId\030\001 \002(\t\"¬\001\n\031GetPlayerPositionResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022\022\n\ns2c_areaId\030\003 \001(\005\022\026\n\016s2c_templateID\030\004 \001(\005\022\026\n\016s2c_instanceId\030\005 \001(\t\022\023\n\013s2c_targetX\030\006 \001(\005\022\023\n\013s2c_targetY\030\007 \001(\005\"\025\n\023UpgradeClassRequest\"9\n\024UpgradeClassResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"\037\n\035GetClassEventConditionRequest\"U\n\036GetClassEve", "ntConditionResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022\020\n\bs2c_flag\030\003 \001(\005\"\022\n\020PayGiftStatePush\"\024\n\022ClientReadyRequest\"8\n\023ClientReadyResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"\035\n\033ExchangePropertyInfoRequest\"P\n\034ExchangePropertyInfoResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022\r\n\005count\030\003 \001(\005\"'\n\027ExchangePropertyRequest\022\f\n\004type\030\001 \002(\005\"L\n\030ExchangePropertyResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022\r\n\005count\030\003", " \001(\005\"=\n\021PlayerDynamicPush\022(\n\bs2c_data\030\002 \003(\0132\026.pomelo.PropertyStruct\"í\001\n\020PlayerRelivePush\022\f\n\004type\030\001 \002(\005\022\013\n\003btn\030\002 \002(\005\022\021\n\tcountDown\030\003 \002(\005\022\n\n\002op\030\004 \002(\005\022\016\n\006cbType\030\005 \002(\005\022\021\n\tcurrCount\030\006 \001(\005\022\022\n\ntotalCount\030\007 \001(\005\022\020\n\bcooltime\030\b \001(\005\022\017\n\007costStr\030\t \001(\t\022\022\n\npayConfirm\030\n \001(\005\022\017\n\007btnSafe\030\013 \001(\005\022\017\n\007btnCity\030\f \001(\005\022\017\n\007btnCurr\030\r \001(\005\"+\n\026PlayerSaverRebirthPush\022\021\n\tsaverName\030\002 \002(\t\"<\n\020SimulateDataPush\022(\n\ts2c_items\030\002 \003(\0132\025.pomelo", ".item.MiniItem\"6\n\020ClientConfigPush\022\017\n\007s2c_key\030\001 \002(\t\022\021\n\ts2c_value\030\002 \002(\t\"(\n\016KickPlayerPush\022\026\n\016s2c_reasonType\030\002 \002(\005\"C\n\016CommonProperty\022\020\n\battrName\030\001 \002(\t\022\r\n\005value\030\002 \002(\005\022\020\n\bisFormat\030\003 \002(\005\"Y\n\022CommonPropertyPush\022\020\n\bs2c_type\030\002 \002(\005\0221\n\fs2c_property\030\003 \003(\0132\033.pomelo.area.CommonProperty\"j\n\022SuitPropertyUpPush\022\020\n\bs2c_type\030\002 \002(\005\022\017\n\007s2c_msg\030\003 \002(\t\0221\n\fs2c_property\030\004 \003(\0132\033.pomelo.area.CommonProperty\"K\n\bBuffInfo\022\n\n\002id\030\001", " \001(\005\022\r\n\005value\030\002 \001(\005\022\020\n\bisFormat\030\003 \001(\005\022\022\n\nexpireTime\030\004 \001(\005\";\n\020BuffPropertyPush\022'\n\bbuffList\030\003 \003(\0132\025.pomelo.area.BuffInfo\"C\n\031PlayerBattleAttributePush\022&\n\005datas\030\002 \003(\0132\027.pomelo.AttributeSimple\"#\n\020SendGMCmdRequest\022\017\n\007c2s_msg\030\001 \002(\t\"6\n\021SendGMCmdResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t2¼\024\n\rplayerHandler\022i\n\030getPlayerPositionRequest\022%.pomelo.area.GetPlayerPositionRequest\032&.pomelo.area.GetPlayerPositionRes", "ponse\022Q\n\020transportRequest\022\035.pomelo.area.TransportRequest\032\036.pomelo.area.TransportResponse\022T\n\021enterSceneRequest\022\036.pomelo.area.EnterSceneRequest\032\037.pomelo.area.EnterSceneResponse\022Z\n\023queryLoadWayRequest\022 .pomelo.area.QueryLoadWayRequest\032!.pomelo.area.QueryLoadWayResponse\022N\n\017pickItemRequest\022\034.pomelo.area.PickItemRequest\032\035.pomelo.area.PickItemResponse\022T\n\021changeAreaRequest\022\036.pomelo.area.ChangeAreaRequest\032", "\037.pomelo.area.ChangeAreaResponse\022]\n\024transByAreaIdRequest\022!.pomelo.area.TransByAreaIdRequest\032\".pomelo.area.TransByAreaIdResponse\022Z\n\023changeAreaXYRequest\022 .pomelo.area.ChangeAreaXYRequest\032!.pomelo.area.ChangeAreaXYResponse\022f\n\027changeAreaByTaskRequest\022$.pomelo.area.ChangeAreaByTaskRequest\032%.pomelo.area.ChangeAreaByTaskResponse\022`\n\025recentContactsRequest\022\".pomelo.area.RecentContactsRequest\032#.pomelo.area.R", "ecentContactsResponse\022A\n\021battleEventNotify\022\036.pomelo.area.BattleEventNotify\032\f.pomelo.Void\022Z\n\024ChangePkModelRequest\022 .pomelo.area.ChangPkModelRequest\032 .pomelo.area.ChangPkModelRespone\022]\n\024reliveSendPosRequest\022!.pomelo.area.ReliveSendPosRequest\032\".pomelo.area.ReliveSendPosResponse\022H\n\rreliveRequest\022\032.pomelo.area.ReliveRequest\032\033.pomelo.area.ReliveResponse\022Z\n\023getAreaLinesRequest\022 .pomelo.area.GetAreaLinesR", "equest\032!.pomelo.area.GetAreaLinesResponse\022i\n\030transByInstanceIdRequest\022%.pomelo.area.TransByInstanceIdRequest\032&.pomelo.area.TransByInstanceIdResponse\022i\n\030lookUpOtherPlayerRequest\022%.pomelo.area.LookUpOtherPlayerRequest\032&.pomelo.area.LookUpOtherPlayerResponse\022Z\n\023agreeRebirthRequest\022 .pomelo.area.AgreeRebirthRequest\032!.pomelo.area.AgreeRebirthResponse\022?\n\ncdkRequest\022\027.pomelo.area.CDKRequest\032\030.pomelo.area", ".CDKResponse\022]\n\026setCustomConfigRequest\022 .pomelo.area.CustomConfigRequest\032!.pomelo.area.CustomConfigResponse\022Q\n\020leaveAreaRequest\022\035.pomelo.area.LeaveAreaRequest\032\036.pomelo.area.LeaveAreaResponse\022i\n\032getSimulateDropByTcRequest\022$.pomelo.area.SimulateDropByTcRequest\032%.pomelo.area.SimulateDropByTcResponse\022Z\n\023upgradeClassRequest\022 .pomelo.area.UpgradeClassRequest\032!.pomelo.area.UpgradeClassResponse\022x\n\035getClas", "sEventConditionRequest\022*.pomelo.area.GetClassEventConditionRequest\032+.pomelo.area.GetClassEventConditionResponse\022W\n\022clientReadyRequest\022\037.pomelo.area.ClientReadyRequest\032 .pomelo.area.ClientReadyResponse\022Q\n\020sendGMCmdRequest\022\035.pomelo.area.SendGMCmdRequest\032\036.pomelo.area.SendGMCmdResponse\022r\n\033exchangePropertyInfoRequest\022(.pomelo.area.ExchangePropertyInfoRequest\032).pomelo.area.ExchangePropertyInfoResponse\022", "f\n\027exchangePropertyRequest\022$.pomelo.area.ExchangePropertyRequest\032%.pomelo.area.ExchangePropertyResponse2÷\007\n\nplayerPush\022?\n\020clientConfigPush\022\035.pomelo.area.ClientConfigPush\032\f.pomelo.Void\022=\n\017battleEventPush\022\034.pomelo.area.BattleEventPush\032\f.pomelo.Void\022=\n\017battleClearPush\022\034.pomelo.area.BattleClearPush\032\f.pomelo.Void\022?\n\021onSuperScriptPush\022\034.pomelo.area.SuperScriptPush\032\f.pomelo.Void\022;\n\016changeAreaPush\022\033.pomel", "o.area.ChangeAreaPush\032\f.pomelo.Void\022A\n\021playerDynamicPush\022\036.pomelo.area.PlayerDynamicPush\032\f.pomelo.Void\022?\n\020playerRelivePush\022\035.pomelo.area.PlayerRelivePush\032\f.pomelo.Void\022K\n\026playerSaverRebirthPush\022#.pomelo.area.PlayerSaverRebirthPush\032\f.pomelo.Void\022?\n\020simulateDropPush\022\035.pomelo.area.SimulateDataPush\032\f.pomelo.Void\022;\n\016kickPlayerPush\022\033.pomelo.area.KickPlayerPush\032\f.pomelo.Void\022C\n\022suitPropertyUpPush\022\037.pomel", "o.area.SuitPropertyUpPush\032\f.pomelo.Void\022C\n\022commonPropertyPush\022\037.pomelo.area.CommonPropertyPush\032\f.pomelo.Void\022?\n\020buffPropertyPush\022\035.pomelo.area.BuffPropertyPush\032\f.pomelo.Void\022Q\n\031playerBattleAttributePush\022&.pomelo.area.PlayerBattleAttributePush\032\f.pomelo.Void\022?\n\020payGiftStatePush\022\035.pomelo.area.PayGiftStatePush\032\f.pomelo.Void" };
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/* 50745 */     Descriptors.FileDescriptor.InternalDescriptorAssigner assigner = new Descriptors.FileDescriptor.InternalDescriptorAssigner()
/*       */       {
/*       */         public ExtensionRegistry assignDescriptors(Descriptors.FileDescriptor root)
/*       */         {
/* 50749 */           PlayerHandler.descriptor = root;
/* 50750 */           return null;
/*       */         }
/*       */       };
/*       */     
/* 50754 */     Descriptors.FileDescriptor.internalBuildGeneratedFileFrom(descriptorData, new Descriptors.FileDescriptor[] {
/*       */           
/* 50756 */           Common.getDescriptor(), 
/* 50757 */           PlayerOuterClass.getDescriptor(), 
/* 50758 */           ItemOuterClass.getDescriptor() }, assigner);
/*       */   }
/*       */   
/* 50761 */   private static final Descriptors.Descriptor internal_static_pomelo_area_EnterSceneRequest_descriptor = getDescriptor().getMessageTypes().get(0);
/* 50762 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_EnterSceneRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_EnterSceneRequest_descriptor, new String[] { "C2SInstanceId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50767 */   private static final Descriptors.Descriptor internal_static_pomelo_area_EnterSceneResponse_descriptor = getDescriptor().getMessageTypes().get(1);
/* 50768 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_EnterSceneResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_EnterSceneResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CInstanceId", "S2CAreaIndex" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50773 */   private static final Descriptors.Descriptor internal_static_pomelo_area_BattleEventNotify_descriptor = getDescriptor().getMessageTypes().get(2);
/* 50774 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_BattleEventNotify_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_BattleEventNotify_descriptor, new String[] { "C2SData" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50779 */   private static final Descriptors.Descriptor internal_static_pomelo_area_PickItemRequest_descriptor = getDescriptor().getMessageTypes().get(3);
/* 50780 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_PickItemRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_PickItemRequest_descriptor, new String[] { "C2SInstanceId", "C2SItemId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50785 */   private static final Descriptors.Descriptor internal_static_pomelo_area_PickItemResponse_descriptor = getDescriptor().getMessageTypes().get(4);
/* 50786 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_PickItemResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_PickItemResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50791 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ChangeAreaXYRequest_descriptor = getDescriptor().getMessageTypes().get(5);
/* 50792 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ChangeAreaXYRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ChangeAreaXYRequest_descriptor, new String[] { "MapId", "Posx", "Posy", "InstanceId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50797 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ChangeAreaXYResponse_descriptor = getDescriptor().getMessageTypes().get(6);
/* 50798 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ChangeAreaXYResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ChangeAreaXYResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50803 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ChangeAreaByTaskRequest_descriptor = getDescriptor().getMessageTypes().get(7);
/* 50804 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ChangeAreaByTaskRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ChangeAreaByTaskRequest_descriptor, new String[] { "MapId", "TaskId", "Posx", "Posy", "Point" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50809 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ChangeAreaByTaskResponse_descriptor = getDescriptor().getMessageTypes().get(8);
/* 50810 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ChangeAreaByTaskResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ChangeAreaByTaskResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50815 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ChangeAreaRequest_descriptor = getDescriptor().getMessageTypes().get(9);
/* 50816 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ChangeAreaRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ChangeAreaRequest_descriptor, new String[] { "C2SPointId", "C2SType" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50821 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ChangeAreaResponse_descriptor = getDescriptor().getMessageTypes().get(10);
/* 50822 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ChangeAreaResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ChangeAreaResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CEnterTips" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50827 */   private static final Descriptors.Descriptor internal_static_pomelo_area_TransByAreaIdRequest_descriptor = getDescriptor().getMessageTypes().get(11);
/* 50828 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_TransByAreaIdRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_TransByAreaIdRequest_descriptor, new String[] { "C2SAreaId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50833 */   private static final Descriptors.Descriptor internal_static_pomelo_area_TransByAreaIdResponse_descriptor = getDescriptor().getMessageTypes().get(12);
/* 50834 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_TransByAreaIdResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_TransByAreaIdResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50839 */   private static final Descriptors.Descriptor internal_static_pomelo_area_TransByInstanceIdRequest_descriptor = getDescriptor().getMessageTypes().get(13);
/* 50840 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_TransByInstanceIdRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_TransByInstanceIdRequest_descriptor, new String[] { "C2SInstanceId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50845 */   private static final Descriptors.Descriptor internal_static_pomelo_area_TransByInstanceIdResponse_descriptor = getDescriptor().getMessageTypes().get(14);
/* 50846 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_TransByInstanceIdResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_TransByInstanceIdResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50851 */   private static final Descriptors.Descriptor internal_static_pomelo_area_LeaveAreaRequest_descriptor = getDescriptor().getMessageTypes().get(15);
/* 50852 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_LeaveAreaRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_LeaveAreaRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50857 */   private static final Descriptors.Descriptor internal_static_pomelo_area_LeaveAreaResponse_descriptor = getDescriptor().getMessageTypes().get(16);
/* 50858 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_LeaveAreaResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_LeaveAreaResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50863 */   private static final Descriptors.Descriptor internal_static_pomelo_area_QueryLoadWayRequest_descriptor = getDescriptor().getMessageTypes().get(17);
/* 50864 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_QueryLoadWayRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_QueryLoadWayRequest_descriptor, new String[] { "C2SAreaId", "C2SPointId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50869 */   private static final Descriptors.Descriptor internal_static_pomelo_area_QueryLoadWayResponse_descriptor = getDescriptor().getMessageTypes().get(18);
/* 50870 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_QueryLoadWayResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_QueryLoadWayResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CPointId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50875 */   private static final Descriptors.Descriptor internal_static_pomelo_area_RecentContactsRequest_descriptor = getDescriptor().getMessageTypes().get(19);
/* 50876 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_RecentContactsRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_RecentContactsRequest_descriptor, new String[] { "C2SIds" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50881 */   private static final Descriptors.Descriptor internal_static_pomelo_area_recentContactInfo_descriptor = getDescriptor().getMessageTypes().get(20);
/* 50882 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_recentContactInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_recentContactInfo_descriptor, new String[] { "Id", "Name", "Level", "Pro", "IsFriend" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50887 */   private static final Descriptors.Descriptor internal_static_pomelo_area_RecentContactsResponse_descriptor = getDescriptor().getMessageTypes().get(21);
/* 50888 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_RecentContactsResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_RecentContactsResponse_descriptor, new String[] { "S2CCode", "S2CData", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50893 */   private static final Descriptors.Descriptor internal_static_pomelo_area_RewardBasicData_descriptor = getDescriptor().getMessageTypes().get(22);
/* 50894 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_RewardBasicData_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_RewardBasicData_descriptor, new String[] { "TemplateId", "Num", "Icon", "Quality" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50899 */   private static final Descriptors.Descriptor internal_static_pomelo_area_DailyReward_descriptor = getDescriptor().getMessageTypes().get(23);
/* 50900 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DailyReward_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DailyReward_descriptor, new String[] { "Id", "Rewards", "Score", "IsGet" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50905 */   private static final Descriptors.Descriptor internal_static_pomelo_area_DailyActivity_descriptor = getDescriptor().getMessageTypes().get(24);
/* 50906 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DailyActivity_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DailyActivity_descriptor, new String[] { "Id", "Name", "Score", "ScoreLimit", "Rule", "Target", "Level", "Sort" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50911 */   private static final Descriptors.Descriptor internal_static_pomelo_area_DailyActivities_descriptor = getDescriptor().getMessageTypes().get(25);
/* 50912 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DailyActivities_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DailyActivities_descriptor, new String[] { "TotalScore", "DayActivities", "DayReward" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50917 */   private static final Descriptors.Descriptor internal_static_pomelo_area_BattleEventPush_descriptor = getDescriptor().getMessageTypes().get(26);
/* 50918 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_BattleEventPush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_BattleEventPush_descriptor, new String[] { "S2CName", "S2CData" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50923 */   private static final Descriptors.Descriptor internal_static_pomelo_area_BattleClearPush_descriptor = getDescriptor().getMessageTypes().get(27);
/* 50924 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_BattleClearPush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_BattleClearPush_descriptor, new String[] { "S2CName" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50929 */   private static final Descriptors.Descriptor internal_static_pomelo_area_SuperScriptType_descriptor = getDescriptor().getMessageTypes().get(28);
/* 50930 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SuperScriptType_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SuperScriptType_descriptor, new String[] { "Type", "Number" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50935 */   private static final Descriptors.Descriptor internal_static_pomelo_area_SuperScriptPush_descriptor = getDescriptor().getMessageTypes().get(29);
/* 50936 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SuperScriptPush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SuperScriptPush_descriptor, new String[] { "S2CData" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50941 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ChangeAreaPush_descriptor = getDescriptor().getMessageTypes().get(30);
/* 50942 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ChangeAreaPush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ChangeAreaPush_descriptor, new String[] { "S2CMapId", "S2CSceneId", "S2CSceneType", "S2CSceneUseAgent", "S2CChangePkType", "S2CRideMount", "S2CInstanceId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50947 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ChangPkModelRequest_descriptor = getDescriptor().getMessageTypes().get(31);
/* 50948 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ChangPkModelRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ChangPkModelRequest_descriptor, new String[] { "C2SModel" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50953 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ChangPkModelRespone_descriptor = getDescriptor().getMessageTypes().get(32);
/* 50954 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ChangPkModelRespone_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ChangPkModelRespone_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CCurrentModel" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50959 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ReliveSendPosRequest_descriptor = getDescriptor().getMessageTypes().get(33);
/* 50960 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ReliveSendPosRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ReliveSendPosRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50965 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ReliveSendPosResponse_descriptor = getDescriptor().getMessageTypes().get(34);
/* 50966 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ReliveSendPosResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ReliveSendPosResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50971 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ReliveRequest_descriptor = getDescriptor().getMessageTypes().get(35);
/* 50972 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ReliveRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ReliveRequest_descriptor, new String[] { "Type", "AutoPay" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50977 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ReliveResponse_descriptor = getDescriptor().getMessageTypes().get(36);
/* 50978 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ReliveResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ReliveResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50983 */   private static final Descriptors.Descriptor internal_static_pomelo_area_GetAreaLinesRequest_descriptor = getDescriptor().getMessageTypes().get(37);
/* 50984 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetAreaLinesRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetAreaLinesRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50989 */   private static final Descriptors.Descriptor internal_static_pomelo_area_AreaLineData_descriptor = getDescriptor().getMessageTypes().get(38);
/* 50990 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_AreaLineData_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_AreaLineData_descriptor, new String[] { "InstanceId", "State", "Index" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 50995 */   private static final Descriptors.Descriptor internal_static_pomelo_area_GetAreaLinesResponse_descriptor = getDescriptor().getMessageTypes().get(39);
/* 50996 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetAreaLinesResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetAreaLinesResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CData" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51001 */   private static final Descriptors.Descriptor internal_static_pomelo_area_LookUpOtherPlayerRequest_descriptor = getDescriptor().getMessageTypes().get(40);
/* 51002 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_LookUpOtherPlayerRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_LookUpOtherPlayerRequest_descriptor, new String[] { "C2SPlayerId", "C2SType" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51007 */   private static final Descriptors.Descriptor internal_static_pomelo_area_LookUpOtherPlayerResponse_descriptor = getDescriptor().getMessageTypes().get(41);
/* 51008 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_LookUpOtherPlayerResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_LookUpOtherPlayerResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CData" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51013 */   private static final Descriptors.Descriptor internal_static_pomelo_area_AgreeRebirthRequest_descriptor = getDescriptor().getMessageTypes().get(42);
/* 51014 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_AgreeRebirthRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_AgreeRebirthRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51019 */   private static final Descriptors.Descriptor internal_static_pomelo_area_AgreeRebirthResponse_descriptor = getDescriptor().getMessageTypes().get(43);
/* 51020 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_AgreeRebirthResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_AgreeRebirthResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51025 */   private static final Descriptors.Descriptor internal_static_pomelo_area_CDKRequest_descriptor = getDescriptor().getMessageTypes().get(44);
/* 51026 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_CDKRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_CDKRequest_descriptor, new String[] { "C2SCdk", "C2SChannel" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51031 */   private static final Descriptors.Descriptor internal_static_pomelo_area_CDKResponse_descriptor = getDescriptor().getMessageTypes().get(45);
/* 51032 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_CDKResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_CDKResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51037 */   private static final Descriptors.Descriptor internal_static_pomelo_area_TransportRequest_descriptor = getDescriptor().getMessageTypes().get(46);
/* 51038 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_TransportRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_TransportRequest_descriptor, new String[] { "C2STransportId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51043 */   private static final Descriptors.Descriptor internal_static_pomelo_area_TransportResponse_descriptor = getDescriptor().getMessageTypes().get(47);
/* 51044 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_TransportResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_TransportResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51049 */   private static final Descriptors.Descriptor internal_static_pomelo_area_CustomConfigRequest_descriptor = getDescriptor().getMessageTypes().get(48);
/* 51050 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_CustomConfigRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_CustomConfigRequest_descriptor, new String[] { "C2SKey", "C2SValue" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51055 */   private static final Descriptors.Descriptor internal_static_pomelo_area_CustomConfigResponse_descriptor = getDescriptor().getMessageTypes().get(49);
/* 51056 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_CustomConfigResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_CustomConfigResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51061 */   private static final Descriptors.Descriptor internal_static_pomelo_area_SimulateDropByTcRequest_descriptor = getDescriptor().getMessageTypes().get(50);
/* 51062 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SimulateDropByTcRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SimulateDropByTcRequest_descriptor, new String[] { "C2STcCode", "C2STcCount", "C2STcLevel" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51067 */   private static final Descriptors.Descriptor internal_static_pomelo_area_SimulateDropByTcResponse_descriptor = getDescriptor().getMessageTypes().get(51);
/* 51068 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SimulateDropByTcResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SimulateDropByTcResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CRunNum", "S2CSuccPer" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51073 */   private static final Descriptors.Descriptor internal_static_pomelo_area_GetPlayerPositionRequest_descriptor = getDescriptor().getMessageTypes().get(52);
/* 51074 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetPlayerPositionRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetPlayerPositionRequest_descriptor, new String[] { "S2CPlayerId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51079 */   private static final Descriptors.Descriptor internal_static_pomelo_area_GetPlayerPositionResponse_descriptor = getDescriptor().getMessageTypes().get(53);
/* 51080 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetPlayerPositionResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetPlayerPositionResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CAreaId", "S2CTemplateID", "S2CInstanceId", "S2CTargetX", "S2CTargetY" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51085 */   private static final Descriptors.Descriptor internal_static_pomelo_area_UpgradeClassRequest_descriptor = getDescriptor().getMessageTypes().get(54);
/* 51086 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_UpgradeClassRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_UpgradeClassRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51091 */   private static final Descriptors.Descriptor internal_static_pomelo_area_UpgradeClassResponse_descriptor = getDescriptor().getMessageTypes().get(55);
/* 51092 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_UpgradeClassResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_UpgradeClassResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51097 */   private static final Descriptors.Descriptor internal_static_pomelo_area_GetClassEventConditionRequest_descriptor = getDescriptor().getMessageTypes().get(56);
/* 51098 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetClassEventConditionRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetClassEventConditionRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51103 */   private static final Descriptors.Descriptor internal_static_pomelo_area_GetClassEventConditionResponse_descriptor = getDescriptor().getMessageTypes().get(57);
/* 51104 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetClassEventConditionResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetClassEventConditionResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CFlag" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51109 */   private static final Descriptors.Descriptor internal_static_pomelo_area_PayGiftStatePush_descriptor = getDescriptor().getMessageTypes().get(58);
/* 51110 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_PayGiftStatePush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_PayGiftStatePush_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51115 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ClientReadyRequest_descriptor = getDescriptor().getMessageTypes().get(59);
/* 51116 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ClientReadyRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ClientReadyRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51121 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ClientReadyResponse_descriptor = getDescriptor().getMessageTypes().get(60);
/* 51122 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ClientReadyResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ClientReadyResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51127 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ExchangePropertyInfoRequest_descriptor = getDescriptor().getMessageTypes().get(61);
/* 51128 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ExchangePropertyInfoRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ExchangePropertyInfoRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51133 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ExchangePropertyInfoResponse_descriptor = getDescriptor().getMessageTypes().get(62);
/* 51134 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ExchangePropertyInfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ExchangePropertyInfoResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "Count" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51139 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ExchangePropertyRequest_descriptor = getDescriptor().getMessageTypes().get(63);
/* 51140 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ExchangePropertyRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ExchangePropertyRequest_descriptor, new String[] { "Type" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51145 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ExchangePropertyResponse_descriptor = getDescriptor().getMessageTypes().get(64);
/* 51146 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ExchangePropertyResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ExchangePropertyResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "Count" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51151 */   private static final Descriptors.Descriptor internal_static_pomelo_area_PlayerDynamicPush_descriptor = getDescriptor().getMessageTypes().get(65);
/* 51152 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_PlayerDynamicPush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_PlayerDynamicPush_descriptor, new String[] { "S2CData" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51157 */   private static final Descriptors.Descriptor internal_static_pomelo_area_PlayerRelivePush_descriptor = getDescriptor().getMessageTypes().get(66);
/* 51158 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_PlayerRelivePush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_PlayerRelivePush_descriptor, new String[] { "Type", "Btn", "CountDown", "Op", "CbType", "CurrCount", "TotalCount", "Cooltime", "CostStr", "PayConfirm", "BtnSafe", "BtnCity", "BtnCurr" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51163 */   private static final Descriptors.Descriptor internal_static_pomelo_area_PlayerSaverRebirthPush_descriptor = getDescriptor().getMessageTypes().get(67);
/* 51164 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_PlayerSaverRebirthPush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_PlayerSaverRebirthPush_descriptor, new String[] { "SaverName" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51169 */   private static final Descriptors.Descriptor internal_static_pomelo_area_SimulateDataPush_descriptor = getDescriptor().getMessageTypes().get(68);
/* 51170 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SimulateDataPush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SimulateDataPush_descriptor, new String[] { "S2CItems" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51175 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ClientConfigPush_descriptor = getDescriptor().getMessageTypes().get(69);
/* 51176 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ClientConfigPush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ClientConfigPush_descriptor, new String[] { "S2CKey", "S2CValue" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51181 */   private static final Descriptors.Descriptor internal_static_pomelo_area_KickPlayerPush_descriptor = getDescriptor().getMessageTypes().get(70);
/* 51182 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_KickPlayerPush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_KickPlayerPush_descriptor, new String[] { "S2CReasonType" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51187 */   private static final Descriptors.Descriptor internal_static_pomelo_area_CommonProperty_descriptor = getDescriptor().getMessageTypes().get(71);
/* 51188 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_CommonProperty_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_CommonProperty_descriptor, new String[] { "AttrName", "Value", "IsFormat" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51193 */   private static final Descriptors.Descriptor internal_static_pomelo_area_CommonPropertyPush_descriptor = getDescriptor().getMessageTypes().get(72);
/* 51194 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_CommonPropertyPush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_CommonPropertyPush_descriptor, new String[] { "S2CType", "S2CProperty" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51199 */   private static final Descriptors.Descriptor internal_static_pomelo_area_SuitPropertyUpPush_descriptor = getDescriptor().getMessageTypes().get(73);
/* 51200 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SuitPropertyUpPush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SuitPropertyUpPush_descriptor, new String[] { "S2CType", "S2CMsg", "S2CProperty" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51205 */   private static final Descriptors.Descriptor internal_static_pomelo_area_BuffInfo_descriptor = getDescriptor().getMessageTypes().get(74);
/* 51206 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_BuffInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_BuffInfo_descriptor, new String[] { "Id", "Value", "IsFormat", "ExpireTime" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51211 */   private static final Descriptors.Descriptor internal_static_pomelo_area_BuffPropertyPush_descriptor = getDescriptor().getMessageTypes().get(75);
/* 51212 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_BuffPropertyPush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_BuffPropertyPush_descriptor, new String[] { "BuffList" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51217 */   private static final Descriptors.Descriptor internal_static_pomelo_area_PlayerBattleAttributePush_descriptor = getDescriptor().getMessageTypes().get(76);
/* 51218 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_PlayerBattleAttributePush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_PlayerBattleAttributePush_descriptor, new String[] { "Datas" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51223 */   private static final Descriptors.Descriptor internal_static_pomelo_area_SendGMCmdRequest_descriptor = getDescriptor().getMessageTypes().get(77);
/* 51224 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SendGMCmdRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SendGMCmdRequest_descriptor, new String[] { "C2SMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 51229 */   private static final Descriptors.Descriptor internal_static_pomelo_area_SendGMCmdResponse_descriptor = getDescriptor().getMessageTypes().get(78);
/* 51230 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SendGMCmdResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SendGMCmdResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */   private static Descriptors.FileDescriptor descriptor;
/*       */   
/*       */   static {
/* 51234 */     Common.getDescriptor();
/* 51235 */     PlayerOuterClass.getDescriptor();
/* 51236 */     ItemOuterClass.getDescriptor();
/*       */   }
/*       */   
/*       */   public static interface SendGMCmdResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface SendGMCmdRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SMsg();
/*       */     
/*       */     String getC2SMsg();
/*       */     
/*       */     ByteString getC2SMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface PlayerBattleAttributePushOrBuilder extends MessageOrBuilder {
/*       */     List<Common.AttributeSimple> getDatasList();
/*       */     
/*       */     Common.AttributeSimple getDatas(int param1Int);
/*       */     
/*       */     int getDatasCount();
/*       */     
/*       */     List<? extends Common.AttributeSimpleOrBuilder> getDatasOrBuilderList();
/*       */     
/*       */     Common.AttributeSimpleOrBuilder getDatasOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface BuffPropertyPushOrBuilder extends MessageOrBuilder {
/*       */     List<PlayerHandler.BuffInfo> getBuffListList();
/*       */     
/*       */     PlayerHandler.BuffInfo getBuffList(int param1Int);
/*       */     
/*       */     int getBuffListCount();
/*       */     
/*       */     List<? extends PlayerHandler.BuffInfoOrBuilder> getBuffListOrBuilderList();
/*       */     
/*       */     PlayerHandler.BuffInfoOrBuilder getBuffListOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface BuffInfoOrBuilder extends MessageOrBuilder {
/*       */     boolean hasId();
/*       */     
/*       */     int getId();
/*       */     
/*       */     boolean hasValue();
/*       */     
/*       */     int getValue();
/*       */     
/*       */     boolean hasIsFormat();
/*       */     
/*       */     int getIsFormat();
/*       */     
/*       */     boolean hasExpireTime();
/*       */     
/*       */     int getExpireTime();
/*       */   }
/*       */   
/*       */   public static interface SuitPropertyUpPushOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CType();
/*       */     
/*       */     int getS2CType();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     List<PlayerHandler.CommonProperty> getS2CPropertyList();
/*       */     
/*       */     PlayerHandler.CommonProperty getS2CProperty(int param1Int);
/*       */     
/*       */     int getS2CPropertyCount();
/*       */     
/*       */     List<? extends PlayerHandler.CommonPropertyOrBuilder> getS2CPropertyOrBuilderList();
/*       */     
/*       */     PlayerHandler.CommonPropertyOrBuilder getS2CPropertyOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface CommonPropertyPushOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CType();
/*       */     
/*       */     int getS2CType();
/*       */     
/*       */     List<PlayerHandler.CommonProperty> getS2CPropertyList();
/*       */     
/*       */     PlayerHandler.CommonProperty getS2CProperty(int param1Int);
/*       */     
/*       */     int getS2CPropertyCount();
/*       */     
/*       */     List<? extends PlayerHandler.CommonPropertyOrBuilder> getS2CPropertyOrBuilderList();
/*       */     
/*       */     PlayerHandler.CommonPropertyOrBuilder getS2CPropertyOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface CommonPropertyOrBuilder extends MessageOrBuilder {
/*       */     boolean hasAttrName();
/*       */     
/*       */     String getAttrName();
/*       */     
/*       */     ByteString getAttrNameBytes();
/*       */     
/*       */     boolean hasValue();
/*       */     
/*       */     int getValue();
/*       */     
/*       */     boolean hasIsFormat();
/*       */     
/*       */     int getIsFormat();
/*       */   }
/*       */   
/*       */   public static interface KickPlayerPushOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CReasonType();
/*       */     
/*       */     int getS2CReasonType();
/*       */   }
/*       */   
/*       */   public static interface ClientConfigPushOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CKey();
/*       */     
/*       */     String getS2CKey();
/*       */     
/*       */     ByteString getS2CKeyBytes();
/*       */     
/*       */     boolean hasS2CValue();
/*       */     
/*       */     String getS2CValue();
/*       */     
/*       */     ByteString getS2CValueBytes();
/*       */   }
/*       */   
/*       */   public static interface SimulateDataPushOrBuilder extends MessageOrBuilder {
/*       */     List<ItemOuterClass.MiniItem> getS2CItemsList();
/*       */     
/*       */     ItemOuterClass.MiniItem getS2CItems(int param1Int);
/*       */     
/*       */     int getS2CItemsCount();
/*       */     
/*       */     List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CItemsOrBuilderList();
/*       */     
/*       */     ItemOuterClass.MiniItemOrBuilder getS2CItemsOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface PlayerSaverRebirthPushOrBuilder extends MessageOrBuilder {
/*       */     boolean hasSaverName();
/*       */     
/*       */     String getSaverName();
/*       */     
/*       */     ByteString getSaverNameBytes();
/*       */   }
/*       */   
/*       */   public static interface PlayerRelivePushOrBuilder extends MessageOrBuilder {
/*       */     boolean hasType();
/*       */     
/*       */     int getType();
/*       */     
/*       */     boolean hasBtn();
/*       */     
/*       */     int getBtn();
/*       */     
/*       */     boolean hasCountDown();
/*       */     
/*       */     int getCountDown();
/*       */     
/*       */     boolean hasOp();
/*       */     
/*       */     int getOp();
/*       */     
/*       */     boolean hasCbType();
/*       */     
/*       */     int getCbType();
/*       */     
/*       */     boolean hasCurrCount();
/*       */     
/*       */     int getCurrCount();
/*       */     
/*       */     boolean hasTotalCount();
/*       */     
/*       */     int getTotalCount();
/*       */     
/*       */     boolean hasCooltime();
/*       */     
/*       */     int getCooltime();
/*       */     
/*       */     boolean hasCostStr();
/*       */     
/*       */     String getCostStr();
/*       */     
/*       */     ByteString getCostStrBytes();
/*       */     
/*       */     boolean hasPayConfirm();
/*       */     
/*       */     int getPayConfirm();
/*       */     
/*       */     boolean hasBtnSafe();
/*       */     
/*       */     int getBtnSafe();
/*       */     
/*       */     boolean hasBtnCity();
/*       */     
/*       */     int getBtnCity();
/*       */     
/*       */     boolean hasBtnCurr();
/*       */     
/*       */     int getBtnCurr();
/*       */   }
/*       */   
/*       */   public static interface PlayerDynamicPushOrBuilder extends MessageOrBuilder {
/*       */     List<Common.PropertyStruct> getS2CDataList();
/*       */     
/*       */     Common.PropertyStruct getS2CData(int param1Int);
/*       */     
/*       */     int getS2CDataCount();
/*       */     
/*       */     List<? extends Common.PropertyStructOrBuilder> getS2CDataOrBuilderList();
/*       */     
/*       */     Common.PropertyStructOrBuilder getS2CDataOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface ExchangePropertyResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     boolean hasCount();
/*       */     
/*       */     int getCount();
/*       */   }
/*       */   
/*       */   public static interface ExchangePropertyRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasType();
/*       */     
/*       */     int getType();
/*       */   }
/*       */   
/*       */   public static interface ExchangePropertyInfoResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     boolean hasCount();
/*       */     
/*       */     int getCount();
/*       */   }
/*       */   
/*       */   public static interface ExchangePropertyInfoRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface ClientReadyResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface ClientReadyRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface PayGiftStatePushOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface GetClassEventConditionResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     boolean hasS2CFlag();
/*       */     
/*       */     int getS2CFlag();
/*       */   }
/*       */   
/*       */   public static interface GetClassEventConditionRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface UpgradeClassResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface UpgradeClassRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface GetPlayerPositionResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     boolean hasS2CAreaId();
/*       */     
/*       */     int getS2CAreaId();
/*       */     
/*       */     boolean hasS2CTemplateID();
/*       */     
/*       */     int getS2CTemplateID();
/*       */     
/*       */     boolean hasS2CInstanceId();
/*       */     
/*       */     String getS2CInstanceId();
/*       */     
/*       */     ByteString getS2CInstanceIdBytes();
/*       */     
/*       */     boolean hasS2CTargetX();
/*       */     
/*       */     int getS2CTargetX();
/*       */     
/*       */     boolean hasS2CTargetY();
/*       */     
/*       */     int getS2CTargetY();
/*       */   }
/*       */   
/*       */   public static interface GetPlayerPositionRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CPlayerId();
/*       */     
/*       */     String getS2CPlayerId();
/*       */     
/*       */     ByteString getS2CPlayerIdBytes();
/*       */   }
/*       */   
/*       */   public static interface SimulateDropByTcResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     boolean hasS2CRunNum();
/*       */     
/*       */     int getS2CRunNum();
/*       */     
/*       */     boolean hasS2CSuccPer();
/*       */     
/*       */     int getS2CSuccPer();
/*       */   }
/*       */   
/*       */   public static interface SimulateDropByTcRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2STcCode();
/*       */     
/*       */     String getC2STcCode();
/*       */     
/*       */     ByteString getC2STcCodeBytes();
/*       */     
/*       */     boolean hasC2STcCount();
/*       */     
/*       */     int getC2STcCount();
/*       */     
/*       */     boolean hasC2STcLevel();
/*       */     
/*       */     int getC2STcLevel();
/*       */   }
/*       */   
/*       */   public static interface CustomConfigResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface CustomConfigRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SKey();
/*       */     
/*       */     String getC2SKey();
/*       */     
/*       */     ByteString getC2SKeyBytes();
/*       */     
/*       */     boolean hasC2SValue();
/*       */     
/*       */     String getC2SValue();
/*       */     
/*       */     ByteString getC2SValueBytes();
/*       */   }
/*       */   
/*       */   public static interface TransportResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface TransportRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2STransportId();
/*       */     
/*       */     int getC2STransportId();
/*       */   }
/*       */   
/*       */   public static interface CDKResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface CDKRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SCdk();
/*       */     
/*       */     String getC2SCdk();
/*       */     
/*       */     ByteString getC2SCdkBytes();
/*       */     
/*       */     boolean hasC2SChannel();
/*       */     
/*       */     int getC2SChannel();
/*       */   }
/*       */   
/*       */   public static interface AgreeRebirthResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface AgreeRebirthRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface LookUpOtherPlayerResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     boolean hasS2CData();
/*       */     
/*       */     PlayerOuterClass.LookUpPlayer getS2CData();
/*       */     
/*       */     PlayerOuterClass.LookUpPlayerOrBuilder getS2CDataOrBuilder();
/*       */   }
/*       */   
/*       */   public static interface LookUpOtherPlayerRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SPlayerId();
/*       */     
/*       */     String getC2SPlayerId();
/*       */     
/*       */     ByteString getC2SPlayerIdBytes();
/*       */     
/*       */     boolean hasC2SType();
/*       */     
/*       */     int getC2SType();
/*       */   }
/*       */   
/*       */   public static interface GetAreaLinesResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     List<PlayerHandler.AreaLineData> getS2CDataList();
/*       */     
/*       */     PlayerHandler.AreaLineData getS2CData(int param1Int);
/*       */     
/*       */     int getS2CDataCount();
/*       */     
/*       */     List<? extends PlayerHandler.AreaLineDataOrBuilder> getS2CDataOrBuilderList();
/*       */     
/*       */     PlayerHandler.AreaLineDataOrBuilder getS2CDataOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface AreaLineDataOrBuilder extends MessageOrBuilder {
/*       */     boolean hasInstanceId();
/*       */     
/*       */     String getInstanceId();
/*       */     
/*       */     ByteString getInstanceIdBytes();
/*       */     
/*       */     boolean hasState();
/*       */     
/*       */     int getState();
/*       */     
/*       */     boolean hasIndex();
/*       */     
/*       */     int getIndex();
/*       */   }
/*       */   
/*       */   public static interface GetAreaLinesRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface ReliveResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface ReliveRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasType();
/*       */     
/*       */     int getType();
/*       */     
/*       */     boolean hasAutoPay();
/*       */     
/*       */     int getAutoPay();
/*       */   }
/*       */   
/*       */   public static interface ReliveSendPosResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface ReliveSendPosRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface ChangPkModelResponeOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     boolean hasS2CCurrentModel();
/*       */     
/*       */     int getS2CCurrentModel();
/*       */   }
/*       */   
/*       */   public static interface ChangPkModelRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SModel();
/*       */     
/*       */     int getC2SModel();
/*       */   }
/*       */   
/*       */   public static interface ChangeAreaPushOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CMapId();
/*       */     
/*       */     int getS2CMapId();
/*       */     
/*       */     boolean hasS2CSceneId();
/*       */     
/*       */     int getS2CSceneId();
/*       */     
/*       */     boolean hasS2CSceneType();
/*       */     
/*       */     int getS2CSceneType();
/*       */     
/*       */     boolean hasS2CSceneUseAgent();
/*       */     
/*       */     int getS2CSceneUseAgent();
/*       */     
/*       */     boolean hasS2CChangePkType();
/*       */     
/*       */     int getS2CChangePkType();
/*       */     
/*       */     boolean hasS2CRideMount();
/*       */     
/*       */     int getS2CRideMount();
/*       */     
/*       */     boolean hasS2CInstanceId();
/*       */     
/*       */     String getS2CInstanceId();
/*       */     
/*       */     ByteString getS2CInstanceIdBytes();
/*       */   }
/*       */   
/*       */   public static interface SuperScriptPushOrBuilder extends MessageOrBuilder {
/*       */     List<PlayerHandler.SuperScriptType> getS2CDataList();
/*       */     
/*       */     PlayerHandler.SuperScriptType getS2CData(int param1Int);
/*       */     
/*       */     int getS2CDataCount();
/*       */     
/*       */     List<? extends PlayerHandler.SuperScriptTypeOrBuilder> getS2CDataOrBuilderList();
/*       */     
/*       */     PlayerHandler.SuperScriptTypeOrBuilder getS2CDataOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface SuperScriptTypeOrBuilder extends MessageOrBuilder {
/*       */     boolean hasType();
/*       */     
/*       */     int getType();
/*       */     
/*       */     boolean hasNumber();
/*       */     
/*       */     int getNumber();
/*       */   }
/*       */   
/*       */   public static interface BattleClearPushOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CName();
/*       */     
/*       */     String getS2CName();
/*       */     
/*       */     ByteString getS2CNameBytes();
/*       */   }
/*       */   
/*       */   public static interface BattleEventPushOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CName();
/*       */     
/*       */     String getS2CName();
/*       */     
/*       */     ByteString getS2CNameBytes();
/*       */     
/*       */     boolean hasS2CData();
/*       */     
/*       */     ByteString getS2CData();
/*       */   }
/*       */   
/*       */   public static interface DailyActivitiesOrBuilder extends MessageOrBuilder {
/*       */     boolean hasTotalScore();
/*       */     
/*       */     int getTotalScore();
/*       */     
/*       */     List<PlayerHandler.DailyActivity> getDayActivitiesList();
/*       */     
/*       */     PlayerHandler.DailyActivity getDayActivities(int param1Int);
/*       */     
/*       */     int getDayActivitiesCount();
/*       */     
/*       */     List<? extends PlayerHandler.DailyActivityOrBuilder> getDayActivitiesOrBuilderList();
/*       */     
/*       */     PlayerHandler.DailyActivityOrBuilder getDayActivitiesOrBuilder(int param1Int);
/*       */     
/*       */     List<PlayerHandler.DailyReward> getDayRewardList();
/*       */     
/*       */     PlayerHandler.DailyReward getDayReward(int param1Int);
/*       */     
/*       */     int getDayRewardCount();
/*       */     
/*       */     List<? extends PlayerHandler.DailyRewardOrBuilder> getDayRewardOrBuilderList();
/*       */     
/*       */     PlayerHandler.DailyRewardOrBuilder getDayRewardOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface DailyActivityOrBuilder extends MessageOrBuilder {
/*       */     boolean hasId();
/*       */     
/*       */     int getId();
/*       */     
/*       */     boolean hasName();
/*       */     
/*       */     String getName();
/*       */     
/*       */     ByteString getNameBytes();
/*       */     
/*       */     boolean hasScore();
/*       */     
/*       */     int getScore();
/*       */     
/*       */     boolean hasScoreLimit();
/*       */     
/*       */     int getScoreLimit();
/*       */     
/*       */     boolean hasRule();
/*       */     
/*       */     String getRule();
/*       */     
/*       */     ByteString getRuleBytes();
/*       */     
/*       */     boolean hasTarget();
/*       */     
/*       */     int getTarget();
/*       */     
/*       */     boolean hasLevel();
/*       */     
/*       */     int getLevel();
/*       */     
/*       */     boolean hasSort();
/*       */     
/*       */     int getSort();
/*       */   }
/*       */   
/*       */   public static interface DailyRewardOrBuilder extends MessageOrBuilder {
/*       */     boolean hasId();
/*       */     
/*       */     int getId();
/*       */     
/*       */     List<PlayerHandler.RewardBasicData> getRewardsList();
/*       */     
/*       */     PlayerHandler.RewardBasicData getRewards(int param1Int);
/*       */     
/*       */     int getRewardsCount();
/*       */     
/*       */     List<? extends PlayerHandler.RewardBasicDataOrBuilder> getRewardsOrBuilderList();
/*       */     
/*       */     PlayerHandler.RewardBasicDataOrBuilder getRewardsOrBuilder(int param1Int);
/*       */     
/*       */     boolean hasScore();
/*       */     
/*       */     int getScore();
/*       */     
/*       */     boolean hasIsGet();
/*       */     
/*       */     int getIsGet();
/*       */   }
/*       */   
/*       */   public static interface RewardBasicDataOrBuilder extends MessageOrBuilder {
/*       */     boolean hasTemplateId();
/*       */     
/*       */     int getTemplateId();
/*       */     
/*       */     boolean hasNum();
/*       */     
/*       */     int getNum();
/*       */     
/*       */     boolean hasIcon();
/*       */     
/*       */     int getIcon();
/*       */     
/*       */     boolean hasQuality();
/*       */     
/*       */     int getQuality();
/*       */   }
/*       */   
/*       */   public static interface RecentContactsResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     List<PlayerHandler.recentContactInfo> getS2CDataList();
/*       */     
/*       */     PlayerHandler.recentContactInfo getS2CData(int param1Int);
/*       */     
/*       */     int getS2CDataCount();
/*       */     
/*       */     List<? extends PlayerHandler.recentContactInfoOrBuilder> getS2CDataOrBuilderList();
/*       */     
/*       */     PlayerHandler.recentContactInfoOrBuilder getS2CDataOrBuilder(int param1Int);
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface recentContactInfoOrBuilder extends MessageOrBuilder {
/*       */     boolean hasId();
/*       */     
/*       */     String getId();
/*       */     
/*       */     ByteString getIdBytes();
/*       */     
/*       */     boolean hasName();
/*       */     
/*       */     String getName();
/*       */     
/*       */     ByteString getNameBytes();
/*       */     
/*       */     boolean hasLevel();
/*       */     
/*       */     int getLevel();
/*       */     
/*       */     boolean hasPro();
/*       */     
/*       */     int getPro();
/*       */     
/*       */     boolean hasIsFriend();
/*       */     
/*       */     int getIsFriend();
/*       */   }
/*       */   
/*       */   public static interface RecentContactsRequestOrBuilder extends MessageOrBuilder {
/*       */     ProtocolStringList getC2SIdsList();
/*       */     
/*       */     int getC2SIdsCount();
/*       */     
/*       */     String getC2SIds(int param1Int);
/*       */     
/*       */     ByteString getC2SIdsBytes(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface QueryLoadWayResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     boolean hasS2CPointId();
/*       */     
/*       */     String getS2CPointId();
/*       */     
/*       */     ByteString getS2CPointIdBytes();
/*       */   }
/*       */   
/*       */   public static interface QueryLoadWayRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SAreaId();
/*       */     
/*       */     int getC2SAreaId();
/*       */     
/*       */     boolean hasC2SPointId();
/*       */     
/*       */     String getC2SPointId();
/*       */     
/*       */     ByteString getC2SPointIdBytes();
/*       */   }
/*       */   
/*       */   public static interface LeaveAreaResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface LeaveAreaRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface TransByInstanceIdResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface TransByInstanceIdRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SInstanceId();
/*       */     
/*       */     String getC2SInstanceId();
/*       */     
/*       */     ByteString getC2SInstanceIdBytes();
/*       */   }
/*       */   
/*       */   public static interface TransByAreaIdResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface TransByAreaIdRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SAreaId();
/*       */     
/*       */     int getC2SAreaId();
/*       */   }
/*       */   
/*       */   public static interface ChangeAreaResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     boolean hasS2CEnterTips();
/*       */     
/*       */     String getS2CEnterTips();
/*       */     
/*       */     ByteString getS2CEnterTipsBytes();
/*       */   }
/*       */   
/*       */   public static interface ChangeAreaRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SPointId();
/*       */     
/*       */     String getC2SPointId();
/*       */     
/*       */     ByteString getC2SPointIdBytes();
/*       */     
/*       */     boolean hasC2SType();
/*       */     
/*       */     int getC2SType();
/*       */   }
/*       */   
/*       */   public static interface ChangeAreaByTaskResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface ChangeAreaByTaskRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasMapId();
/*       */     
/*       */     int getMapId();
/*       */     
/*       */     boolean hasTaskId();
/*       */     
/*       */     int getTaskId();
/*       */     
/*       */     boolean hasPosx();
/*       */     
/*       */     int getPosx();
/*       */     
/*       */     boolean hasPosy();
/*       */     
/*       */     int getPosy();
/*       */     
/*       */     boolean hasPoint();
/*       */     
/*       */     int getPoint();
/*       */   }
/*       */   
/*       */   public static interface ChangeAreaXYResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface ChangeAreaXYRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasMapId();
/*       */     
/*       */     int getMapId();
/*       */     
/*       */     boolean hasPosx();
/*       */     
/*       */     int getPosx();
/*       */     
/*       */     boolean hasPosy();
/*       */     
/*       */     int getPosy();
/*       */     
/*       */     boolean hasInstanceId();
/*       */     
/*       */     String getInstanceId();
/*       */     
/*       */     ByteString getInstanceIdBytes();
/*       */   }
/*       */   
/*       */   public static interface PickItemResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface PickItemRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SInstanceId();
/*       */     
/*       */     String getC2SInstanceId();
/*       */     
/*       */     ByteString getC2SInstanceIdBytes();
/*       */     
/*       */     boolean hasC2SItemId();
/*       */     
/*       */     String getC2SItemId();
/*       */     
/*       */     ByteString getC2SItemIdBytes();
/*       */   }
/*       */   
/*       */   public static interface BattleEventNotifyOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SData();
/*       */     
/*       */     ByteString getC2SData();
/*       */   }
/*       */   
/*       */   public static interface EnterSceneResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     boolean hasS2CInstanceId();
/*       */     
/*       */     String getS2CInstanceId();
/*       */     
/*       */     ByteString getS2CInstanceIdBytes();
/*       */     
/*       */     boolean hasS2CAreaIndex();
/*       */     
/*       */     int getS2CAreaIndex();
/*       */   }
/*       */   
/*       */   public static interface EnterSceneRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SInstanceId();
/*       */     
/*       */     String getC2SInstanceId();
/*       */     
/*       */     ByteString getC2SInstanceIdBytes();
/*       */   }
/*       */ }


/* Location:              D:\Yxdl\xmds-server\mmoarpg-game.jar!\pomelo\area\PlayerHandler.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */