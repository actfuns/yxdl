/*       */ package pomelo.area;
/*       */ 
/*       */ import com.google.protobuf.AbstractMessage;
/*       */ import com.google.protobuf.AbstractMessageLite;
/*       */ import com.google.protobuf.AbstractParser;
/*       */ import com.google.protobuf.ByteString;
/*       */ import com.google.protobuf.CodedInputStream;
/*       */ import com.google.protobuf.CodedOutputStream;
/*       */ import com.google.protobuf.Descriptors;
/*       */ import com.google.protobuf.ExtensionRegistry;
/*       */ import com.google.protobuf.ExtensionRegistryLite;
/*       */ import com.google.protobuf.GeneratedMessage;
/*       */ import com.google.protobuf.InvalidProtocolBufferException;
/*       */ import com.google.protobuf.LazyStringArrayList;
/*       */ import com.google.protobuf.LazyStringList;
/*       */ import com.google.protobuf.Message;
/*       */ import com.google.protobuf.MessageLite;
/*       */ import com.google.protobuf.MessageOrBuilder;
/*       */ import com.google.protobuf.Parser;
/*       */ import com.google.protobuf.ProtocolStringList;
/*       */ import com.google.protobuf.RepeatedFieldBuilder;
/*       */ import com.google.protobuf.SingleFieldBuilder;
/*       */ import com.google.protobuf.UnknownFieldSet;
/*       */ import java.io.IOException;
/*       */ import java.io.InputStream;
/*       */ import java.io.ObjectStreamException;
/*       */ import java.util.ArrayList;
/*       */ import java.util.Collection;
/*       */ import java.util.Collections;
/*       */ import java.util.List;
/*       */ import pomelo.Common;
/*       */ import pomelo.item.ItemOuterClass;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ public final class ActivityHandler
/*       */ {
/*       */   public static void registerAllExtensions(ExtensionRegistry registry) {}
/*       */   
/*       */   public static final class ActivityLs
/*       */     extends GeneratedMessage
/*       */     implements ActivityLsOrBuilder
/*       */   {
/*   449 */     private static final ActivityLs defaultInstance = new ActivityLs(true); private final UnknownFieldSet unknownFields; private ActivityLs(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ActivityLs(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ActivityLs getDefaultInstance() { return defaultInstance; } public ActivityLs getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ActivityLs(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.id_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityLs_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityLs_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityLs.class, Builder.class); } public static Parser<ActivityLs> PARSER = (Parser<ActivityLs>)new AbstractParser<ActivityLs>() { public ActivityHandler.ActivityLs parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ActivityLs(input, extensionRegistry); } }; private int bitField0_; public static final int ID_FIELD_NUMBER = 1; private int id_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ActivityLs> getParserForType() { return PARSER; } public boolean hasId() { return ((this.bitField0_ & 0x1) == 1); } public int getId() { return this.id_; } private void initFields() { this.id_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasId()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.id_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.id_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ActivityLs parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ActivityLs)PARSER.parseFrom(data); } public static ActivityLs parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityLs)PARSER.parseFrom(data, extensionRegistry); } public static ActivityLs parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ActivityLs)PARSER.parseFrom(data); } public static ActivityLs parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityLs)PARSER.parseFrom(data, extensionRegistry); } public static ActivityLs parseFrom(InputStream input) throws IOException { return (ActivityLs)PARSER.parseFrom(input); } public static ActivityLs parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityLs)PARSER.parseFrom(input, extensionRegistry); } public static ActivityLs parseDelimitedFrom(InputStream input) throws IOException { return (ActivityLs)PARSER.parseDelimitedFrom(input); } public static ActivityLs parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityLs)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ActivityLs parseFrom(CodedInputStream input) throws IOException { return (ActivityLs)PARSER.parseFrom(input); } public static ActivityLs parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityLs)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ActivityLs prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ActivityLsOrBuilder {
/*   450 */       private int bitField0_; private int id_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityLs_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityLs_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ActivityLs.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.ActivityLs.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.id_ = 0; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ActivityLs_descriptor; } public ActivityHandler.ActivityLs getDefaultInstanceForType() { return ActivityHandler.ActivityLs.getDefaultInstance(); } public ActivityHandler.ActivityLs build() { ActivityHandler.ActivityLs result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.ActivityLs buildPartial() { ActivityHandler.ActivityLs result = new ActivityHandler.ActivityLs(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.id_ = this.id_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ActivityLs) return mergeFrom((ActivityHandler.ActivityLs)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.ActivityLs other) { if (other == ActivityHandler.ActivityLs.getDefaultInstance()) return this;  if (other.hasId()) setId(other.getId());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasId()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ActivityLs parsedMessage = null; try { parsedMessage = (ActivityHandler.ActivityLs)ActivityHandler.ActivityLs.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.ActivityLs)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasId() { return ((this.bitField0_ & 0x1) == 1); } public int getId() { return this.id_; } public Builder setId(int value) { this.bitField0_ |= 0x1; this.id_ = value; onChanged(); return this; } public Builder clearId() { this.bitField0_ &= 0xFFFFFFFE; this.id_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ActivityListInfo
/*       */     extends GeneratedMessage
/*       */     implements ActivityListInfoOrBuilder
/*       */   {
/*   948 */     private static final ActivityListInfo defaultInstance = new ActivityListInfo(true); private final UnknownFieldSet unknownFields; private ActivityListInfo(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ActivityListInfo(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ActivityListInfo getDefaultInstance() { return defaultInstance; } public ActivityListInfo getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ActivityListInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.activityId_ = input.readInt32(); break;case 16: this.bitField0_ |= 0x2; this.hudNum_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityListInfo_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityListInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityListInfo.class, Builder.class); } public static Parser<ActivityListInfo> PARSER = (Parser<ActivityListInfo>)new AbstractParser<ActivityListInfo>() { public ActivityHandler.ActivityListInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ActivityListInfo(input, extensionRegistry); } }; private int bitField0_; public static final int ACTIVITYID_FIELD_NUMBER = 1; private int activityId_; public static final int HUDNUM_FIELD_NUMBER = 2; private int hudNum_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ActivityListInfo> getParserForType() { return PARSER; } public boolean hasActivityId() { return ((this.bitField0_ & 0x1) == 1); } public int getActivityId() { return this.activityId_; } public boolean hasHudNum() { return ((this.bitField0_ & 0x2) == 2); } public int getHudNum() { return this.hudNum_; } private void initFields() { this.activityId_ = 0; this.hudNum_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasActivityId()) { this.memoizedIsInitialized = 0; return false; }  if (!hasHudNum()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.activityId_);  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.hudNum_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.activityId_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.hudNum_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ActivityListInfo parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ActivityListInfo)PARSER.parseFrom(data); } public static ActivityListInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityListInfo)PARSER.parseFrom(data, extensionRegistry); } public static ActivityListInfo parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ActivityListInfo)PARSER.parseFrom(data); } public static ActivityListInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityListInfo)PARSER.parseFrom(data, extensionRegistry); } public static ActivityListInfo parseFrom(InputStream input) throws IOException { return (ActivityListInfo)PARSER.parseFrom(input); } public static ActivityListInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityListInfo)PARSER.parseFrom(input, extensionRegistry); } public static ActivityListInfo parseDelimitedFrom(InputStream input) throws IOException { return (ActivityListInfo)PARSER.parseDelimitedFrom(input); } public static ActivityListInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityListInfo)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ActivityListInfo parseFrom(CodedInputStream input) throws IOException { return (ActivityListInfo)PARSER.parseFrom(input); } public static ActivityListInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityListInfo)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ActivityListInfo prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ActivityListInfoOrBuilder {
/*   949 */       private int bitField0_; private int activityId_; private int hudNum_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityListInfo_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityListInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ActivityListInfo.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.ActivityListInfo.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.activityId_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.hudNum_ = 0; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ActivityListInfo_descriptor; } public ActivityHandler.ActivityListInfo getDefaultInstanceForType() { return ActivityHandler.ActivityListInfo.getDefaultInstance(); } public ActivityHandler.ActivityListInfo build() { ActivityHandler.ActivityListInfo result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.ActivityListInfo buildPartial() { ActivityHandler.ActivityListInfo result = new ActivityHandler.ActivityListInfo(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.activityId_ = this.activityId_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.hudNum_ = this.hudNum_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ActivityListInfo) return mergeFrom((ActivityHandler.ActivityListInfo)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.ActivityListInfo other) { if (other == ActivityHandler.ActivityListInfo.getDefaultInstance()) return this;  if (other.hasActivityId()) setActivityId(other.getActivityId());  if (other.hasHudNum()) setHudNum(other.getHudNum());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasActivityId()) return false;  if (!hasHudNum()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ActivityListInfo parsedMessage = null; try { parsedMessage = (ActivityHandler.ActivityListInfo)ActivityHandler.ActivityListInfo.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.ActivityListInfo)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasActivityId() { return ((this.bitField0_ & 0x1) == 1); } public int getActivityId() { return this.activityId_; } public Builder setActivityId(int value) { this.bitField0_ |= 0x1; this.activityId_ = value; onChanged(); return this; } public Builder clearActivityId() { this.bitField0_ &= 0xFFFFFFFE; this.activityId_ = 0; onChanged(); return this; } public boolean hasHudNum() { return ((this.bitField0_ & 0x2) == 2); } public int getHudNum() { return this.hudNum_; } public Builder setHudNum(int value) { this.bitField0_ |= 0x2; this.hudNum_ = value; onChanged(); return this; } public Builder clearHudNum() { this.bitField0_ &= 0xFFFFFFFD; this.hudNum_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class InterestActivityAdRequest
/*       */     extends GeneratedMessage
/*       */     implements InterestActivityAdRequestOrBuilder
/*       */   {
/*  1261 */     private static final InterestActivityAdRequest defaultInstance = new InterestActivityAdRequest(true); private final UnknownFieldSet unknownFields; private InterestActivityAdRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private InterestActivityAdRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static InterestActivityAdRequest getDefaultInstance() { return defaultInstance; } public InterestActivityAdRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private InterestActivityAdRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_InterestActivityAdRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_InterestActivityAdRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(InterestActivityAdRequest.class, Builder.class); } public static Parser<InterestActivityAdRequest> PARSER = (Parser<InterestActivityAdRequest>)new AbstractParser<InterestActivityAdRequest>() { public ActivityHandler.InterestActivityAdRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.InterestActivityAdRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<InterestActivityAdRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static InterestActivityAdRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (InterestActivityAdRequest)PARSER.parseFrom(data); } public static InterestActivityAdRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (InterestActivityAdRequest)PARSER.parseFrom(data, extensionRegistry); } public static InterestActivityAdRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (InterestActivityAdRequest)PARSER.parseFrom(data); } public static InterestActivityAdRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (InterestActivityAdRequest)PARSER.parseFrom(data, extensionRegistry); } public static InterestActivityAdRequest parseFrom(InputStream input) throws IOException { return (InterestActivityAdRequest)PARSER.parseFrom(input); } public static InterestActivityAdRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (InterestActivityAdRequest)PARSER.parseFrom(input, extensionRegistry); } public static InterestActivityAdRequest parseDelimitedFrom(InputStream input) throws IOException { return (InterestActivityAdRequest)PARSER.parseDelimitedFrom(input); } public static InterestActivityAdRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (InterestActivityAdRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static InterestActivityAdRequest parseFrom(CodedInputStream input) throws IOException { return (InterestActivityAdRequest)PARSER.parseFrom(input); } public static InterestActivityAdRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (InterestActivityAdRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(InterestActivityAdRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.InterestActivityAdRequestOrBuilder {
/*  1262 */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_InterestActivityAdRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_InterestActivityAdRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.InterestActivityAdRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.InterestActivityAdRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_InterestActivityAdRequest_descriptor; } public ActivityHandler.InterestActivityAdRequest getDefaultInstanceForType() { return ActivityHandler.InterestActivityAdRequest.getDefaultInstance(); } public ActivityHandler.InterestActivityAdRequest build() { ActivityHandler.InterestActivityAdRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.InterestActivityAdRequest buildPartial() { ActivityHandler.InterestActivityAdRequest result = new ActivityHandler.InterestActivityAdRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.InterestActivityAdRequest) return mergeFrom((ActivityHandler.InterestActivityAdRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.InterestActivityAdRequest other) { if (other == ActivityHandler.InterestActivityAdRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.InterestActivityAdRequest parsedMessage = null; try { parsedMessage = (ActivityHandler.InterestActivityAdRequest)ActivityHandler.InterestActivityAdRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.InterestActivityAdRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class InterestActivityAdResponse
/*       */     extends GeneratedMessage
/*       */     implements InterestActivityAdResponseOrBuilder
/*       */   {
/*  2195 */     private static final InterestActivityAdResponse defaultInstance = new InterestActivityAdResponse(true); private final UnknownFieldSet unknownFields; private InterestActivityAdResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private InterestActivityAdResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static InterestActivityAdResponse getDefaultInstance() { return defaultInstance; } public InterestActivityAdResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private InterestActivityAdResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: if ((mutable_bitField0_ & 0x4) != 4) { this.s2CActivityList_ = new ArrayList<>(); mutable_bitField0_ |= 0x4; }  this.s2CActivityList_.add(input.readMessage(ActivityHandler.ActivityListInfo.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x4) == 4) this.s2CActivityList_ = Collections.unmodifiableList(this.s2CActivityList_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_InterestActivityAdResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_InterestActivityAdResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(InterestActivityAdResponse.class, Builder.class); } public static Parser<InterestActivityAdResponse> PARSER = (Parser<InterestActivityAdResponse>)new AbstractParser<InterestActivityAdResponse>() { public ActivityHandler.InterestActivityAdResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.InterestActivityAdResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_ACTIVITYLIST_FIELD_NUMBER = 3; private List<ActivityHandler.ActivityListInfo> s2CActivityList_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<InterestActivityAdResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public List<ActivityHandler.ActivityListInfo> getS2CActivityListList() { return this.s2CActivityList_; } public List<? extends ActivityHandler.ActivityListInfoOrBuilder> getS2CActivityListOrBuilderList() { return (List)this.s2CActivityList_; } public int getS2CActivityListCount() { return this.s2CActivityList_.size(); } public ActivityHandler.ActivityListInfo getS2CActivityList(int index) { return this.s2CActivityList_.get(index); } public ActivityHandler.ActivityListInfoOrBuilder getS2CActivityListOrBuilder(int index) { return this.s2CActivityList_.get(index); } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.s2CActivityList_ = Collections.emptyList(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  for (int i = 0; i < getS2CActivityListCount(); i++) { if (!getS2CActivityList(i).isInitialized()) { this.memoizedIsInitialized = 0; return false; }  }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  for (int i = 0; i < this.s2CActivityList_.size(); i++) output.writeMessage(3, (MessageLite)this.s2CActivityList_.get(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  for (int i = 0; i < this.s2CActivityList_.size(); i++) size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.s2CActivityList_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static InterestActivityAdResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (InterestActivityAdResponse)PARSER.parseFrom(data); } public static InterestActivityAdResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (InterestActivityAdResponse)PARSER.parseFrom(data, extensionRegistry); } public static InterestActivityAdResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (InterestActivityAdResponse)PARSER.parseFrom(data); } public static InterestActivityAdResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (InterestActivityAdResponse)PARSER.parseFrom(data, extensionRegistry); } public static InterestActivityAdResponse parseFrom(InputStream input) throws IOException { return (InterestActivityAdResponse)PARSER.parseFrom(input); } public static InterestActivityAdResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (InterestActivityAdResponse)PARSER.parseFrom(input, extensionRegistry); } public static InterestActivityAdResponse parseDelimitedFrom(InputStream input) throws IOException { return (InterestActivityAdResponse)PARSER.parseDelimitedFrom(input); } public static InterestActivityAdResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (InterestActivityAdResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static InterestActivityAdResponse parseFrom(CodedInputStream input) throws IOException { return (InterestActivityAdResponse)PARSER.parseFrom(input); } public static InterestActivityAdResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (InterestActivityAdResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(InterestActivityAdResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.InterestActivityAdResponseOrBuilder {
/*  2196 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; private List<ActivityHandler.ActivityListInfo> s2CActivityList_; private RepeatedFieldBuilder<ActivityHandler.ActivityListInfo, ActivityHandler.ActivityListInfo.Builder, ActivityHandler.ActivityListInfoOrBuilder> s2CActivityListBuilder_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_InterestActivityAdResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_InterestActivityAdResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.InterestActivityAdResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; this.s2CActivityList_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; this.s2CActivityList_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.InterestActivityAdResponse.alwaysUseFieldBuilders) getS2CActivityListFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; if (this.s2CActivityListBuilder_ == null) { this.s2CActivityList_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; } else { this.s2CActivityListBuilder_.clear(); }  return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_InterestActivityAdResponse_descriptor; } public ActivityHandler.InterestActivityAdResponse getDefaultInstanceForType() { return ActivityHandler.InterestActivityAdResponse.getDefaultInstance(); } public ActivityHandler.InterestActivityAdResponse build() { ActivityHandler.InterestActivityAdResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.InterestActivityAdResponse buildPartial() { ActivityHandler.InterestActivityAdResponse result = new ActivityHandler.InterestActivityAdResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if (this.s2CActivityListBuilder_ == null) { if ((this.bitField0_ & 0x4) == 4) { this.s2CActivityList_ = Collections.unmodifiableList(this.s2CActivityList_); this.bitField0_ &= 0xFFFFFFFB; }  result.s2CActivityList_ = this.s2CActivityList_; } else { result.s2CActivityList_ = this.s2CActivityListBuilder_.build(); }  result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.InterestActivityAdResponse) return mergeFrom((ActivityHandler.InterestActivityAdResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.InterestActivityAdResponse other) { if (other == ActivityHandler.InterestActivityAdResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  if (this.s2CActivityListBuilder_ == null) { if (!other.s2CActivityList_.isEmpty()) { if (this.s2CActivityList_.isEmpty()) { this.s2CActivityList_ = other.s2CActivityList_; this.bitField0_ &= 0xFFFFFFFB; } else { ensureS2CActivityListIsMutable(); this.s2CActivityList_.addAll(other.s2CActivityList_); }  onChanged(); }  } else if (!other.s2CActivityList_.isEmpty()) { if (this.s2CActivityListBuilder_.isEmpty()) { this.s2CActivityListBuilder_.dispose(); this.s2CActivityListBuilder_ = null; this.s2CActivityList_ = other.s2CActivityList_; this.bitField0_ &= 0xFFFFFFFB; this.s2CActivityListBuilder_ = ActivityHandler.InterestActivityAdResponse.alwaysUseFieldBuilders ? getS2CActivityListFieldBuilder() : null; } else { this.s2CActivityListBuilder_.addAllMessages(other.s2CActivityList_); }  }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  for (int i = 0; i < getS2CActivityListCount(); i++) { if (!getS2CActivityList(i).isInitialized()) return false;  }  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.InterestActivityAdResponse parsedMessage = null; try { parsedMessage = (ActivityHandler.InterestActivityAdResponse)ActivityHandler.InterestActivityAdResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.InterestActivityAdResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = ActivityHandler.InterestActivityAdResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } private void ensureS2CActivityListIsMutable() { if ((this.bitField0_ & 0x4) != 4) { this.s2CActivityList_ = new ArrayList<>(this.s2CActivityList_); this.bitField0_ |= 0x4; }  } public List<ActivityHandler.ActivityListInfo> getS2CActivityListList() { if (this.s2CActivityListBuilder_ == null) return Collections.unmodifiableList(this.s2CActivityList_);  return this.s2CActivityListBuilder_.getMessageList(); } public int getS2CActivityListCount() { if (this.s2CActivityListBuilder_ == null) return this.s2CActivityList_.size();  return this.s2CActivityListBuilder_.getCount(); } public ActivityHandler.ActivityListInfo getS2CActivityList(int index) { if (this.s2CActivityListBuilder_ == null) return this.s2CActivityList_.get(index);  return (ActivityHandler.ActivityListInfo)this.s2CActivityListBuilder_.getMessage(index); } public Builder setS2CActivityList(int index, ActivityHandler.ActivityListInfo value) { if (this.s2CActivityListBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CActivityListIsMutable(); this.s2CActivityList_.set(index, value); onChanged(); } else { this.s2CActivityListBuilder_.setMessage(index, value); }  return this; } public Builder setS2CActivityList(int index, ActivityHandler.ActivityListInfo.Builder builderForValue) { if (this.s2CActivityListBuilder_ == null) { ensureS2CActivityListIsMutable(); this.s2CActivityList_.set(index, builderForValue.build()); onChanged(); } else { this.s2CActivityListBuilder_.setMessage(index, builderForValue.build()); }  return this; } public Builder addS2CActivityList(ActivityHandler.ActivityListInfo value) { if (this.s2CActivityListBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CActivityListIsMutable(); this.s2CActivityList_.add(value); onChanged(); } else { this.s2CActivityListBuilder_.addMessage(value); }  return this; } public Builder addS2CActivityList(int index, ActivityHandler.ActivityListInfo value) { if (this.s2CActivityListBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CActivityListIsMutable(); this.s2CActivityList_.add(index, value); onChanged(); } else { this.s2CActivityListBuilder_.addMessage(index, value); }  return this; } public Builder addS2CActivityList(ActivityHandler.ActivityListInfo.Builder builderForValue) { if (this.s2CActivityListBuilder_ == null) { ensureS2CActivityListIsMutable(); this.s2CActivityList_.add(builderForValue.build()); onChanged(); } else { this.s2CActivityListBuilder_.addMessage(builderForValue.build()); }  return this; } public Builder addS2CActivityList(int index, ActivityHandler.ActivityListInfo.Builder builderForValue) { if (this.s2CActivityListBuilder_ == null) { ensureS2CActivityListIsMutable(); this.s2CActivityList_.add(index, builderForValue.build()); onChanged(); } else { this.s2CActivityListBuilder_.addMessage(index, builderForValue.build()); }  return this; } public Builder addAllS2CActivityList(Iterable<? extends ActivityHandler.ActivityListInfo> values) { if (this.s2CActivityListBuilder_ == null) { ensureS2CActivityListIsMutable(); AbstractMessageLite.Builder.addAll(values, this.s2CActivityList_); onChanged(); } else { this.s2CActivityListBuilder_.addAllMessages(values); }  return this; } public Builder clearS2CActivityList() { if (this.s2CActivityListBuilder_ == null) { this.s2CActivityList_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; onChanged(); } else { this.s2CActivityListBuilder_.clear(); }  return this; } public Builder removeS2CActivityList(int index) { if (this.s2CActivityListBuilder_ == null) { ensureS2CActivityListIsMutable(); this.s2CActivityList_.remove(index); onChanged(); } else { this.s2CActivityListBuilder_.remove(index); }  return this; } public ActivityHandler.ActivityListInfo.Builder getS2CActivityListBuilder(int index) { return (ActivityHandler.ActivityListInfo.Builder)getS2CActivityListFieldBuilder().getBuilder(index); } public ActivityHandler.ActivityListInfoOrBuilder getS2CActivityListOrBuilder(int index) { if (this.s2CActivityListBuilder_ == null) return this.s2CActivityList_.get(index);  return (ActivityHandler.ActivityListInfoOrBuilder)this.s2CActivityListBuilder_.getMessageOrBuilder(index); } public List<? extends ActivityHandler.ActivityListInfoOrBuilder> getS2CActivityListOrBuilderList() { if (this.s2CActivityListBuilder_ != null) return this.s2CActivityListBuilder_.getMessageOrBuilderList();  return Collections.unmodifiableList((List)this.s2CActivityList_); } public ActivityHandler.ActivityListInfo.Builder addS2CActivityListBuilder() { return (ActivityHandler.ActivityListInfo.Builder)getS2CActivityListFieldBuilder().addBuilder(ActivityHandler.ActivityListInfo.getDefaultInstance()); } public ActivityHandler.ActivityListInfo.Builder addS2CActivityListBuilder(int index) { return (ActivityHandler.ActivityListInfo.Builder)getS2CActivityListFieldBuilder().addBuilder(index, ActivityHandler.ActivityListInfo.getDefaultInstance()); } public List<ActivityHandler.ActivityListInfo.Builder> getS2CActivityListBuilderList() { return getS2CActivityListFieldBuilder().getBuilderList(); } private RepeatedFieldBuilder<ActivityHandler.ActivityListInfo, ActivityHandler.ActivityListInfo.Builder, ActivityHandler.ActivityListInfoOrBuilder> getS2CActivityListFieldBuilder() { if (this.s2CActivityListBuilder_ == null) { this.s2CActivityListBuilder_ = new RepeatedFieldBuilder(this.s2CActivityList_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean()); this.s2CActivityList_ = null; }  return this.s2CActivityListBuilder_; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ActivityInviteCodeRequest
/*       */     extends GeneratedMessage
/*       */     implements ActivityInviteCodeRequestOrBuilder
/*       */   {
/*  2679 */     private static final ActivityInviteCodeRequest defaultInstance = new ActivityInviteCodeRequest(true); private final UnknownFieldSet unknownFields; private ActivityInviteCodeRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ActivityInviteCodeRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ActivityInviteCodeRequest getDefaultInstance() { return defaultInstance; } public ActivityInviteCodeRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ActivityInviteCodeRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2SInviteCode_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityInviteCodeRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityInviteCodeRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityInviteCodeRequest.class, Builder.class); } public static Parser<ActivityInviteCodeRequest> PARSER = (Parser<ActivityInviteCodeRequest>)new AbstractParser<ActivityInviteCodeRequest>() { public ActivityHandler.ActivityInviteCodeRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ActivityInviteCodeRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_INVITECODE_FIELD_NUMBER = 1; private Object c2SInviteCode_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ActivityInviteCodeRequest> getParserForType() { return PARSER; } public boolean hasC2SInviteCode() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SInviteCode() { Object ref = this.c2SInviteCode_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SInviteCode_ = s;  return s; } public ByteString getC2SInviteCodeBytes() { Object ref = this.c2SInviteCode_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SInviteCode_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.c2SInviteCode_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SInviteCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SInviteCodeBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SInviteCodeBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ActivityInviteCodeRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ActivityInviteCodeRequest)PARSER.parseFrom(data); } public static ActivityInviteCodeRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityInviteCodeRequest)PARSER.parseFrom(data, extensionRegistry); } public static ActivityInviteCodeRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ActivityInviteCodeRequest)PARSER.parseFrom(data); } public static ActivityInviteCodeRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityInviteCodeRequest)PARSER.parseFrom(data, extensionRegistry); } public static ActivityInviteCodeRequest parseFrom(InputStream input) throws IOException { return (ActivityInviteCodeRequest)PARSER.parseFrom(input); } public static ActivityInviteCodeRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityInviteCodeRequest)PARSER.parseFrom(input, extensionRegistry); } public static ActivityInviteCodeRequest parseDelimitedFrom(InputStream input) throws IOException { return (ActivityInviteCodeRequest)PARSER.parseDelimitedFrom(input); } public static ActivityInviteCodeRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityInviteCodeRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ActivityInviteCodeRequest parseFrom(CodedInputStream input) throws IOException { return (ActivityInviteCodeRequest)PARSER.parseFrom(input); } public static ActivityInviteCodeRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityInviteCodeRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ActivityInviteCodeRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ActivityInviteCodeRequestOrBuilder {
/*  2680 */       private int bitField0_; private Object c2SInviteCode_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityInviteCodeRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityInviteCodeRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ActivityInviteCodeRequest.class, Builder.class); } private Builder() { this.c2SInviteCode_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SInviteCode_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.ActivityInviteCodeRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SInviteCode_ = ""; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ActivityInviteCodeRequest_descriptor; } public ActivityHandler.ActivityInviteCodeRequest getDefaultInstanceForType() { return ActivityHandler.ActivityInviteCodeRequest.getDefaultInstance(); } public ActivityHandler.ActivityInviteCodeRequest build() { ActivityHandler.ActivityInviteCodeRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.ActivityInviteCodeRequest buildPartial() { ActivityHandler.ActivityInviteCodeRequest result = new ActivityHandler.ActivityInviteCodeRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SInviteCode_ = this.c2SInviteCode_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ActivityInviteCodeRequest) return mergeFrom((ActivityHandler.ActivityInviteCodeRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.ActivityInviteCodeRequest other) { if (other == ActivityHandler.ActivityInviteCodeRequest.getDefaultInstance()) return this;  if (other.hasC2SInviteCode()) { this.bitField0_ |= 0x1; this.c2SInviteCode_ = other.c2SInviteCode_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SInviteCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ActivityInviteCodeRequest parsedMessage = null; try { parsedMessage = (ActivityHandler.ActivityInviteCodeRequest)ActivityHandler.ActivityInviteCodeRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.ActivityInviteCodeRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SInviteCode() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SInviteCode() { Object ref = this.c2SInviteCode_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SInviteCode_ = s;  return s; }  return (String)ref; } public ByteString getC2SInviteCodeBytes() { Object ref = this.c2SInviteCode_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SInviteCode_ = b; return b; }  return (ByteString)ref; } public Builder setC2SInviteCode(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SInviteCode_ = value; onChanged(); return this; } public Builder clearC2SInviteCode() { this.bitField0_ &= 0xFFFFFFFE; this.c2SInviteCode_ = ActivityHandler.ActivityInviteCodeRequest.getDefaultInstance().getC2SInviteCode(); onChanged(); return this; } public Builder setC2SInviteCodeBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SInviteCode_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ActivityInviteCodeResponse
/*       */     extends GeneratedMessage
/*       */     implements ActivityInviteCodeResponseOrBuilder
/*       */   {
/*  3241 */     private static final ActivityInviteCodeResponse defaultInstance = new ActivityInviteCodeResponse(true); private final UnknownFieldSet unknownFields; private ActivityInviteCodeResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ActivityInviteCodeResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ActivityInviteCodeResponse getDefaultInstance() { return defaultInstance; } public ActivityInviteCodeResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ActivityInviteCodeResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityInviteCodeResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityInviteCodeResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityInviteCodeResponse.class, Builder.class); } public static Parser<ActivityInviteCodeResponse> PARSER = (Parser<ActivityInviteCodeResponse>)new AbstractParser<ActivityInviteCodeResponse>() { public ActivityHandler.ActivityInviteCodeResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ActivityInviteCodeResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ActivityInviteCodeResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ActivityInviteCodeResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ActivityInviteCodeResponse)PARSER.parseFrom(data); } public static ActivityInviteCodeResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityInviteCodeResponse)PARSER.parseFrom(data, extensionRegistry); } public static ActivityInviteCodeResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ActivityInviteCodeResponse)PARSER.parseFrom(data); } public static ActivityInviteCodeResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityInviteCodeResponse)PARSER.parseFrom(data, extensionRegistry); } public static ActivityInviteCodeResponse parseFrom(InputStream input) throws IOException { return (ActivityInviteCodeResponse)PARSER.parseFrom(input); } public static ActivityInviteCodeResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityInviteCodeResponse)PARSER.parseFrom(input, extensionRegistry); } public static ActivityInviteCodeResponse parseDelimitedFrom(InputStream input) throws IOException { return (ActivityInviteCodeResponse)PARSER.parseDelimitedFrom(input); } public static ActivityInviteCodeResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityInviteCodeResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ActivityInviteCodeResponse parseFrom(CodedInputStream input) throws IOException { return (ActivityInviteCodeResponse)PARSER.parseFrom(input); } public static ActivityInviteCodeResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityInviteCodeResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ActivityInviteCodeResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ActivityInviteCodeResponseOrBuilder {
/*  3242 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityInviteCodeResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityInviteCodeResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ActivityInviteCodeResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.ActivityInviteCodeResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ActivityInviteCodeResponse_descriptor; } public ActivityHandler.ActivityInviteCodeResponse getDefaultInstanceForType() { return ActivityHandler.ActivityInviteCodeResponse.getDefaultInstance(); } public ActivityHandler.ActivityInviteCodeResponse build() { ActivityHandler.ActivityInviteCodeResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.ActivityInviteCodeResponse buildPartial() { ActivityHandler.ActivityInviteCodeResponse result = new ActivityHandler.ActivityInviteCodeResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ActivityInviteCodeResponse) return mergeFrom((ActivityHandler.ActivityInviteCodeResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.ActivityInviteCodeResponse other) { if (other == ActivityHandler.ActivityInviteCodeResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ActivityInviteCodeResponse parsedMessage = null; try { parsedMessage = (ActivityHandler.ActivityInviteCodeResponse)ActivityHandler.ActivityInviteCodeResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.ActivityInviteCodeResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = ActivityHandler.ActivityInviteCodeResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class PayFirstRequest
/*       */     extends GeneratedMessage
/*       */     implements PayFirstRequestOrBuilder
/*       */   {
/*  3554 */     private static final PayFirstRequest defaultInstance = new PayFirstRequest(true); private final UnknownFieldSet unknownFields; private PayFirstRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private PayFirstRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static PayFirstRequest getDefaultInstance() { return defaultInstance; } public PayFirstRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private PayFirstRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_PayFirstRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_PayFirstRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PayFirstRequest.class, Builder.class); } public static Parser<PayFirstRequest> PARSER = (Parser<PayFirstRequest>)new AbstractParser<PayFirstRequest>() { public ActivityHandler.PayFirstRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.PayFirstRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<PayFirstRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static PayFirstRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (PayFirstRequest)PARSER.parseFrom(data); } public static PayFirstRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PayFirstRequest)PARSER.parseFrom(data, extensionRegistry); } public static PayFirstRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (PayFirstRequest)PARSER.parseFrom(data); } public static PayFirstRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PayFirstRequest)PARSER.parseFrom(data, extensionRegistry); } public static PayFirstRequest parseFrom(InputStream input) throws IOException { return (PayFirstRequest)PARSER.parseFrom(input); } public static PayFirstRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PayFirstRequest)PARSER.parseFrom(input, extensionRegistry); } public static PayFirstRequest parseDelimitedFrom(InputStream input) throws IOException { return (PayFirstRequest)PARSER.parseDelimitedFrom(input); } public static PayFirstRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PayFirstRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static PayFirstRequest parseFrom(CodedInputStream input) throws IOException { return (PayFirstRequest)PARSER.parseFrom(input); } public static PayFirstRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PayFirstRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(PayFirstRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.PayFirstRequestOrBuilder {
/*  3555 */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_PayFirstRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_PayFirstRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.PayFirstRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.PayFirstRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_PayFirstRequest_descriptor; } public ActivityHandler.PayFirstRequest getDefaultInstanceForType() { return ActivityHandler.PayFirstRequest.getDefaultInstance(); } public ActivityHandler.PayFirstRequest build() { ActivityHandler.PayFirstRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.PayFirstRequest buildPartial() { ActivityHandler.PayFirstRequest result = new ActivityHandler.PayFirstRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.PayFirstRequest) return mergeFrom((ActivityHandler.PayFirstRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.PayFirstRequest other) { if (other == ActivityHandler.PayFirstRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.PayFirstRequest parsedMessage = null; try { parsedMessage = (ActivityHandler.PayFirstRequest)ActivityHandler.PayFirstRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.PayFirstRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class PayFirstResponse
/*       */     extends GeneratedMessage
/*       */     implements PayFirstResponseOrBuilder
/*       */   {
/*  4724 */     private static final PayFirstResponse defaultInstance = new PayFirstResponse(true); private final UnknownFieldSet unknownFields; private PayFirstResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private PayFirstResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static PayFirstResponse getDefaultInstance() { return defaultInstance; } public PayFirstResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private PayFirstResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: if ((mutable_bitField0_ & 0x4) != 4) { this.s2CAwardItems_ = new ArrayList<>(); mutable_bitField0_ |= 0x4; }  this.s2CAwardItems_.add(input.readMessage(ItemOuterClass.MiniItem.PARSER, extensionRegistry)); break;case 32: this.bitField0_ |= 0x4; this.s2CState_ = input.readInt32(); break;case 40: this.bitField0_ |= 0x8; this.s2CAwardId_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x4) == 4) this.s2CAwardItems_ = Collections.unmodifiableList(this.s2CAwardItems_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_PayFirstResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_PayFirstResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PayFirstResponse.class, Builder.class); } public static Parser<PayFirstResponse> PARSER = (Parser<PayFirstResponse>)new AbstractParser<PayFirstResponse>() { public ActivityHandler.PayFirstResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.PayFirstResponse(input, extensionRegistry); } }
/*  4725 */     ; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_AWARDITEMS_FIELD_NUMBER = 3; private List<ItemOuterClass.MiniItem> s2CAwardItems_; public static final int S2C_STATE_FIELD_NUMBER = 4; private int s2CState_; public static final int S2C_AWARDID_FIELD_NUMBER = 5; private int s2CAwardId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<PayFirstResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } static { defaultInstance.initFields(); } public List<ItemOuterClass.MiniItem> getS2CAwardItemsList() { return this.s2CAwardItems_; }
/*       */     public List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CAwardItemsOrBuilderList() { return (List)this.s2CAwardItems_; }
/*       */     public int getS2CAwardItemsCount() { return this.s2CAwardItems_.size(); }
/*       */     public ItemOuterClass.MiniItem getS2CAwardItems(int index) { return this.s2CAwardItems_.get(index); }
/*       */     public ItemOuterClass.MiniItemOrBuilder getS2CAwardItemsOrBuilder(int index) { return (ItemOuterClass.MiniItemOrBuilder)this.s2CAwardItems_.get(index); }
/*       */     public boolean hasS2CState() { return ((this.bitField0_ & 0x4) == 4); }
/*       */     public int getS2CState() { return this.s2CState_; }
/*       */     public boolean hasS2CAwardId() { return ((this.bitField0_ & 0x8) == 8); }
/*       */     public int getS2CAwardId() { return this.s2CAwardId_; }
/*       */     private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.s2CAwardItems_ = Collections.emptyList(); this.s2CState_ = 0; this.s2CAwardId_ = 0; }
/*       */     public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1)
/*       */         return true;  if (isInitialized == 0)
/*       */         return false;  if (!hasS2CCode()) {
/*       */         this.memoizedIsInitialized = 0; return false;
/*       */       }  if (!hasS2CState()) {
/*       */         this.memoizedIsInitialized = 0; return false;
/*       */       }  if (!hasS2CAwardId()) {
/*       */         this.memoizedIsInitialized = 0; return false;
/*       */       }  for (int i = 0; i < getS2CAwardItemsCount(); i++) {
/*       */         if (!getS2CAwardItems(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0; return false;
/*       */         } 
/*       */       }  this.memoizedIsInitialized = 1; return true; }
/*       */     public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1)
/*       */         output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2)
/*       */         output.writeBytes(2, getS2CMsgBytes());  for (int i = 0; i < this.s2CAwardItems_.size(); i++)
/*       */         output.writeMessage(3, (MessageLite)this.s2CAwardItems_.get(i));  if ((this.bitField0_ & 0x4) == 4)
/*       */         output.writeInt32(4, this.s2CState_);  if ((this.bitField0_ & 0x8) == 8)
/*       */         output.writeInt32(5, this.s2CAwardId_);  getUnknownFields().writeTo(output); }
/*       */     public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1)
/*       */         return size;  size = 0; if ((this.bitField0_ & 0x1) == 1)
/*       */         size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2)
/*       */         size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  for (int i = 0; i < this.s2CAwardItems_.size(); i++)
/*       */         size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.s2CAwardItems_.get(i));  if ((this.bitField0_ & 0x4) == 4)
/*       */         size += CodedOutputStream.computeInt32Size(4, this.s2CState_);  if ((this.bitField0_ & 0x8) == 8)
/*       */         size += CodedOutputStream.computeInt32Size(5, this.s2CAwardId_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; }
/*       */     protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); }
/*       */     public static PayFirstResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (PayFirstResponse)PARSER.parseFrom(data); }
/*       */     public static PayFirstResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PayFirstResponse)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static PayFirstResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (PayFirstResponse)PARSER.parseFrom(data); }
/*       */     public static PayFirstResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PayFirstResponse)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static PayFirstResponse parseFrom(InputStream input) throws IOException { return (PayFirstResponse)PARSER.parseFrom(input); }
/*       */     public static PayFirstResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PayFirstResponse)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static PayFirstResponse parseDelimitedFrom(InputStream input) throws IOException { return (PayFirstResponse)PARSER.parseDelimitedFrom(input); }
/*       */     public static PayFirstResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PayFirstResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); }
/*       */     public static PayFirstResponse parseFrom(CodedInputStream input) throws IOException { return (PayFirstResponse)PARSER.parseFrom(input); }
/*       */     public static PayFirstResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PayFirstResponse)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static Builder newBuilder() { return Builder.create(); }
/*       */     public Builder newBuilderForType() { return newBuilder(); }
/*       */     public static Builder newBuilder(PayFirstResponse prototype) { return newBuilder().mergeFrom(prototype); }
/*       */     public Builder toBuilder() { return newBuilder(this); }
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; }
/*       */     public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.PayFirstResponseOrBuilder { private int bitField0_; private int s2CCode_; private Object s2CMsg_; private List<ItemOuterClass.MiniItem> s2CAwardItems_; private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> s2CAwardItemsBuilder_; private int s2CState_; private int s2CAwardId_;
/*       */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_PayFirstResponse_descriptor; }
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_PayFirstResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.PayFirstResponse.class, Builder.class); }
/*       */       private Builder() { this.s2CMsg_ = ""; this.s2CAwardItems_ = Collections.emptyList(); maybeForceBuilderInitialization(); }
/*       */       private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; this.s2CAwardItems_ = Collections.emptyList(); maybeForceBuilderInitialization(); }
/*       */       private void maybeForceBuilderInitialization() { if (ActivityHandler.PayFirstResponse.alwaysUseFieldBuilders)
/*       */           getS2CAwardItemsFieldBuilder();  }
/*       */       private static Builder create() { return new Builder(); }
/*       */       public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; if (this.s2CAwardItemsBuilder_ == null) {
/*       */           this.s2CAwardItems_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB;
/*       */         } else {
/*       */           this.s2CAwardItemsBuilder_.clear();
/*       */         }  this.s2CState_ = 0; this.bitField0_ &= 0xFFFFFFF7; this.s2CAwardId_ = 0; this.bitField0_ &= 0xFFFFFFEF; return this; }
/*       */       public Builder clone() { return create().mergeFrom(buildPartial()); }
/*       */       public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_PayFirstResponse_descriptor; }
/*       */       public ActivityHandler.PayFirstResponse getDefaultInstanceForType() { return ActivityHandler.PayFirstResponse.getDefaultInstance(); }
/*       */       public ActivityHandler.PayFirstResponse build() { ActivityHandler.PayFirstResponse result = buildPartial(); if (!result.isInitialized())
/*       */           throw newUninitializedMessageException(result);  return result; }
/*       */       public ActivityHandler.PayFirstResponse buildPartial() { ActivityHandler.PayFirstResponse result = new ActivityHandler.PayFirstResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1)
/*       */           to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2)
/*       */           to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if (this.s2CAwardItemsBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x4) == 4) {
/*       */             this.s2CAwardItems_ = Collections.unmodifiableList(this.s2CAwardItems_); this.bitField0_ &= 0xFFFFFFFB;
/*       */           }  result.s2CAwardItems_ = this.s2CAwardItems_;
/*       */         } else {
/*       */           result.s2CAwardItems_ = this.s2CAwardItemsBuilder_.build();
/*       */         }  if ((from_bitField0_ & 0x8) == 8)
/*       */           to_bitField0_ |= 0x4;  result.s2CState_ = this.s2CState_; if ((from_bitField0_ & 0x10) == 16)
/*       */           to_bitField0_ |= 0x8;  result.s2CAwardId_ = this.s2CAwardId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; }
/*       */       public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.PayFirstResponse)
/*       */           return mergeFrom((ActivityHandler.PayFirstResponse)other);  super.mergeFrom(other);
/*       */         return this; }
/*       */       public Builder mergeFrom(ActivityHandler.PayFirstResponse other) { if (other == ActivityHandler.PayFirstResponse.getDefaultInstance())
/*       */           return this; 
/*       */         if (other.hasS2CCode())
/*       */           setS2CCode(other.getS2CCode()); 
/*       */         if (other.hasS2CMsg()) {
/*       */           this.bitField0_ |= 0x2;
/*       */           this.s2CMsg_ = other.s2CMsg_;
/*       */           onChanged();
/*       */         } 
/*       */         if (this.s2CAwardItemsBuilder_ == null) {
/*       */           if (!other.s2CAwardItems_.isEmpty()) {
/*       */             if (this.s2CAwardItems_.isEmpty()) {
/*       */               this.s2CAwardItems_ = other.s2CAwardItems_;
/*       */               this.bitField0_ &= 0xFFFFFFFB;
/*       */             } else {
/*       */               ensureS2CAwardItemsIsMutable();
/*       */               this.s2CAwardItems_.addAll(other.s2CAwardItems_);
/*       */             } 
/*       */             onChanged();
/*       */           } 
/*       */         } else if (!other.s2CAwardItems_.isEmpty()) {
/*       */           if (this.s2CAwardItemsBuilder_.isEmpty()) {
/*       */             this.s2CAwardItemsBuilder_.dispose();
/*       */             this.s2CAwardItemsBuilder_ = null;
/*       */             this.s2CAwardItems_ = other.s2CAwardItems_;
/*       */             this.bitField0_ &= 0xFFFFFFFB;
/*       */             this.s2CAwardItemsBuilder_ = ActivityHandler.PayFirstResponse.alwaysUseFieldBuilders ? getS2CAwardItemsFieldBuilder() : null;
/*       */           } else {
/*       */             this.s2CAwardItemsBuilder_.addAllMessages(other.s2CAwardItems_);
/*       */           } 
/*       */         } 
/*       */         if (other.hasS2CState())
/*       */           setS2CState(other.getS2CState()); 
/*       */         if (other.hasS2CAwardId())
/*       */           setS2CAwardId(other.getS2CAwardId()); 
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this; }
/*       */       public final boolean isInitialized() { if (!hasS2CCode())
/*       */           return false; 
/*       */         if (!hasS2CState())
/*       */           return false; 
/*       */         if (!hasS2CAwardId())
/*       */           return false; 
/*       */         for (int i = 0; i < getS2CAwardItemsCount(); i++) {
/*       */           if (!getS2CAwardItems(i).isInitialized())
/*       */             return false; 
/*       */         } 
/*       */         return true; }
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.PayFirstResponse parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (ActivityHandler.PayFirstResponse)ActivityHandler.PayFirstResponse.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (ActivityHandler.PayFirstResponse)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null)
/*       */             mergeFrom(parsedMessage); 
/*       */         } 
/*       */         return this; }
/*       */       public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); }
/*       */       public int getS2CCode() { return this.s2CCode_; }
/*       */       public Builder setS2CCode(int value) { this.bitField0_ |= 0x1;
/*       */         this.s2CCode_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CCode_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); }
/*       */       public String getS2CMsg() { Object ref = this.s2CMsg_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.s2CMsg_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref; }
/*       */       public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CMsg_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref; }
/*       */       public Builder setS2CMsg(String value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.s2CMsg_ = ActivityHandler.PayFirstResponse.getDefaultInstance().getS2CMsg();
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder setS2CMsgBytes(ByteString value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       private void ensureS2CAwardItemsIsMutable() { if ((this.bitField0_ & 0x4) != 4) {
/*       */           this.s2CAwardItems_ = new ArrayList<>(this.s2CAwardItems_);
/*       */           this.bitField0_ |= 0x4;
/*       */         }  }
/*       */       public List<ItemOuterClass.MiniItem> getS2CAwardItemsList() { if (this.s2CAwardItemsBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.s2CAwardItems_); 
/*       */         return this.s2CAwardItemsBuilder_.getMessageList(); }
/*       */       public int getS2CAwardItemsCount() { if (this.s2CAwardItemsBuilder_ == null)
/*       */           return this.s2CAwardItems_.size(); 
/*       */         return this.s2CAwardItemsBuilder_.getCount(); }
/*       */       public ItemOuterClass.MiniItem getS2CAwardItems(int index) { if (this.s2CAwardItemsBuilder_ == null)
/*       */           return this.s2CAwardItems_.get(index); 
/*       */         return (ItemOuterClass.MiniItem)this.s2CAwardItemsBuilder_.getMessage(index); }
/*       */       public Builder setS2CAwardItems(int index, ItemOuterClass.MiniItem value) { if (this.s2CAwardItemsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureS2CAwardItemsIsMutable();
/*       */           this.s2CAwardItems_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardItemsBuilder_.setMessage(index, (GeneratedMessage)value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder setS2CAwardItems(int index, ItemOuterClass.MiniItem.Builder builderForValue) { if (this.s2CAwardItemsBuilder_ == null) {
/*       */           ensureS2CAwardItemsIsMutable();
/*       */           this.s2CAwardItems_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardItemsBuilder_.setMessage(index, (GeneratedMessage)builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addS2CAwardItems(ItemOuterClass.MiniItem value) { if (this.s2CAwardItemsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureS2CAwardItemsIsMutable();
/*       */           this.s2CAwardItems_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardItemsBuilder_.addMessage((GeneratedMessage)value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder addS2CAwardItems(int index, ItemOuterClass.MiniItem value) { if (this.s2CAwardItemsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureS2CAwardItemsIsMutable();
/*       */           this.s2CAwardItems_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardItemsBuilder_.addMessage(index, (GeneratedMessage)value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder addS2CAwardItems(ItemOuterClass.MiniItem.Builder builderForValue) { if (this.s2CAwardItemsBuilder_ == null) {
/*       */           ensureS2CAwardItemsIsMutable();
/*       */           this.s2CAwardItems_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardItemsBuilder_.addMessage((GeneratedMessage)builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addS2CAwardItems(int index, ItemOuterClass.MiniItem.Builder builderForValue) { if (this.s2CAwardItemsBuilder_ == null) {
/*       */           ensureS2CAwardItemsIsMutable();
/*       */           this.s2CAwardItems_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardItemsBuilder_.addMessage(index, (GeneratedMessage)builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addAllS2CAwardItems(Iterable<? extends ItemOuterClass.MiniItem> values) { if (this.s2CAwardItemsBuilder_ == null) {
/*       */           ensureS2CAwardItemsIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.s2CAwardItems_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardItemsBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this; }
/*       */       public Builder clearS2CAwardItems() { if (this.s2CAwardItemsBuilder_ == null) {
/*       */           this.s2CAwardItems_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFFB;
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardItemsBuilder_.clear();
/*       */         } 
/*       */         return this; }
/*       */       public Builder removeS2CAwardItems(int index) { if (this.s2CAwardItemsBuilder_ == null) {
/*       */           ensureS2CAwardItemsIsMutable();
/*       */           this.s2CAwardItems_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardItemsBuilder_.remove(index);
/*       */         } 
/*       */         return this; }
/*       */       public ItemOuterClass.MiniItem.Builder getS2CAwardItemsBuilder(int index) { return (ItemOuterClass.MiniItem.Builder)getS2CAwardItemsFieldBuilder().getBuilder(index); }
/*       */       public ItemOuterClass.MiniItemOrBuilder getS2CAwardItemsOrBuilder(int index) { if (this.s2CAwardItemsBuilder_ == null)
/*       */           return (ItemOuterClass.MiniItemOrBuilder)this.s2CAwardItems_.get(index); 
/*       */         return (ItemOuterClass.MiniItemOrBuilder)this.s2CAwardItemsBuilder_.getMessageOrBuilder(index); }
/*       */       public List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CAwardItemsOrBuilderList() { if (this.s2CAwardItemsBuilder_ != null)
/*       */           return this.s2CAwardItemsBuilder_.getMessageOrBuilderList(); 
/*       */         return (List)Collections.unmodifiableList(this.s2CAwardItems_); }
/*       */       public ItemOuterClass.MiniItem.Builder addS2CAwardItemsBuilder() { return (ItemOuterClass.MiniItem.Builder)getS2CAwardItemsFieldBuilder().addBuilder((GeneratedMessage)ItemOuterClass.MiniItem.getDefaultInstance()); }
/*       */       public ItemOuterClass.MiniItem.Builder addS2CAwardItemsBuilder(int index) { return (ItemOuterClass.MiniItem.Builder)getS2CAwardItemsFieldBuilder().addBuilder(index, (GeneratedMessage)ItemOuterClass.MiniItem.getDefaultInstance()); }
/*       */       public List<ItemOuterClass.MiniItem.Builder> getS2CAwardItemsBuilderList() { return getS2CAwardItemsFieldBuilder().getBuilderList(); }
/*       */       private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> getS2CAwardItemsFieldBuilder() { if (this.s2CAwardItemsBuilder_ == null) {
/*       */           this.s2CAwardItemsBuilder_ = new RepeatedFieldBuilder(this.s2CAwardItems_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean());
/*       */           this.s2CAwardItems_ = null;
/*       */         } 
/*       */         return this.s2CAwardItemsBuilder_; }
/*       */       public boolean hasS2CState() { return ((this.bitField0_ & 0x8) == 8); }
/*       */       public int getS2CState() { return this.s2CState_; }
/*       */       public Builder setS2CState(int value) { this.bitField0_ |= 0x8;
/*       */         this.s2CState_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearS2CState() { this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.s2CState_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasS2CAwardId() { return ((this.bitField0_ & 0x10) == 16); }
/*       */       public int getS2CAwardId() { return this.s2CAwardId_; }
/*       */       public Builder setS2CAwardId(int value) { this.bitField0_ |= 0x10;
/*       */         this.s2CAwardId_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearS2CAwardId() { this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.s2CAwardId_ = 0;
/*       */         onChanged();
/*       */         return this; } } }
/*  5037 */   public static final class PaySecondRequest extends GeneratedMessage implements PaySecondRequestOrBuilder { private static final PaySecondRequest defaultInstance = new PaySecondRequest(true); private final UnknownFieldSet unknownFields; private PaySecondRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private PaySecondRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static PaySecondRequest getDefaultInstance() { return defaultInstance; } public PaySecondRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private PaySecondRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_PaySecondRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_PaySecondRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PaySecondRequest.class, Builder.class); } public static Parser<PaySecondRequest> PARSER = (Parser<PaySecondRequest>)new AbstractParser<PaySecondRequest>() { public ActivityHandler.PaySecondRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.PaySecondRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<PaySecondRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static PaySecondRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (PaySecondRequest)PARSER.parseFrom(data); } public static PaySecondRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PaySecondRequest)PARSER.parseFrom(data, extensionRegistry); } public static PaySecondRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (PaySecondRequest)PARSER.parseFrom(data); } public static PaySecondRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PaySecondRequest)PARSER.parseFrom(data, extensionRegistry); } public static PaySecondRequest parseFrom(InputStream input) throws IOException { return (PaySecondRequest)PARSER.parseFrom(input); } public static PaySecondRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PaySecondRequest)PARSER.parseFrom(input, extensionRegistry); } public static PaySecondRequest parseDelimitedFrom(InputStream input) throws IOException { return (PaySecondRequest)PARSER.parseDelimitedFrom(input); } public static PaySecondRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PaySecondRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static PaySecondRequest parseFrom(CodedInputStream input) throws IOException { return (PaySecondRequest)PARSER.parseFrom(input); } public static PaySecondRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PaySecondRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(PaySecondRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.PaySecondRequestOrBuilder {
/*  5038 */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_PaySecondRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_PaySecondRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.PaySecondRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.PaySecondRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_PaySecondRequest_descriptor; } public ActivityHandler.PaySecondRequest getDefaultInstanceForType() { return ActivityHandler.PaySecondRequest.getDefaultInstance(); } public ActivityHandler.PaySecondRequest build() { ActivityHandler.PaySecondRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.PaySecondRequest buildPartial() { ActivityHandler.PaySecondRequest result = new ActivityHandler.PaySecondRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.PaySecondRequest) return mergeFrom((ActivityHandler.PaySecondRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.PaySecondRequest other) { if (other == ActivityHandler.PaySecondRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.PaySecondRequest parsedMessage = null; try { parsedMessage = (ActivityHandler.PaySecondRequest)ActivityHandler.PaySecondRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.PaySecondRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */      }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class PaySecondResponse
/*       */     extends GeneratedMessage
/*       */     implements PaySecondResponseOrBuilder
/*       */   {
/*  6207 */     private static final PaySecondResponse defaultInstance = new PaySecondResponse(true); private final UnknownFieldSet unknownFields; private PaySecondResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private PaySecondResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static PaySecondResponse getDefaultInstance() { return defaultInstance; } public PaySecondResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private PaySecondResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: if ((mutable_bitField0_ & 0x4) != 4) { this.s2CAwardItems_ = new ArrayList<>(); mutable_bitField0_ |= 0x4; }  this.s2CAwardItems_.add(input.readMessage(ItemOuterClass.MiniItem.PARSER, extensionRegistry)); break;case 32: this.bitField0_ |= 0x4; this.s2CState_ = input.readInt32(); break;case 40: this.bitField0_ |= 0x8; this.s2CAwardId_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x4) == 4) this.s2CAwardItems_ = Collections.unmodifiableList(this.s2CAwardItems_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_PaySecondResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_PaySecondResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PaySecondResponse.class, Builder.class); } public static Parser<PaySecondResponse> PARSER = (Parser<PaySecondResponse>)new AbstractParser<PaySecondResponse>() { public ActivityHandler.PaySecondResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.PaySecondResponse(input, extensionRegistry); } }
/*  6208 */     ; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_AWARDITEMS_FIELD_NUMBER = 3; private List<ItemOuterClass.MiniItem> s2CAwardItems_; public static final int S2C_STATE_FIELD_NUMBER = 4; private int s2CState_; public static final int S2C_AWARDID_FIELD_NUMBER = 5; private int s2CAwardId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<PaySecondResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } static { defaultInstance.initFields(); }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public List<ItemOuterClass.MiniItem> getS2CAwardItemsList() {
/*       */       return this.s2CAwardItems_;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CAwardItemsOrBuilderList() {
/*       */       return (List)this.s2CAwardItems_;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getS2CAwardItemsCount() {
/*       */       return this.s2CAwardItems_.size();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public ItemOuterClass.MiniItem getS2CAwardItems(int index) {
/*       */       return this.s2CAwardItems_.get(index);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public ItemOuterClass.MiniItemOrBuilder getS2CAwardItemsOrBuilder(int index) {
/*       */       return (ItemOuterClass.MiniItemOrBuilder)this.s2CAwardItems_.get(index);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public boolean hasS2CState() {
/*       */       return ((this.bitField0_ & 0x4) == 4);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getS2CState() {
/*       */       return this.s2CState_;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public boolean hasS2CAwardId() {
/*       */       return ((this.bitField0_ & 0x8) == 8);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getS2CAwardId() {
/*       */       return this.s2CAwardId_;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private void initFields() {
/*       */       this.s2CCode_ = 0;
/*       */       this.s2CMsg_ = "";
/*       */       this.s2CAwardItems_ = Collections.emptyList();
/*       */       this.s2CState_ = 0;
/*       */       this.s2CAwardId_ = 0;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public final boolean isInitialized() {
/*       */       byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1) {
/*       */         return true;
/*       */       }
/*       */       if (isInitialized == 0) {
/*       */         return false;
/*       */       }
/*       */       if (!hasS2CCode()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasS2CState()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasS2CAwardId()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       for (int i = 0; i < getS2CAwardItemsCount(); i++) {
/*       */         if (!getS2CAwardItems(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0;
/*       */           return false;
/*       */         } 
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public void writeTo(CodedOutputStream output) throws IOException {
/*       */       getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         output.writeInt32(1, this.s2CCode_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         output.writeBytes(2, getS2CMsgBytes());
/*       */       }
/*       */       for (int i = 0; i < this.s2CAwardItems_.size(); i++) {
/*       */         output.writeMessage(3, (MessageLite)this.s2CAwardItems_.get(i));
/*       */       }
/*       */       if ((this.bitField0_ & 0x4) == 4) {
/*       */         output.writeInt32(4, this.s2CState_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x8) == 8) {
/*       */         output.writeInt32(5, this.s2CAwardId_);
/*       */       }
/*       */       getUnknownFields().writeTo(output);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getSerializedSize() {
/*       */       int size = this.memoizedSerializedSize;
/*       */       if (size != -1) {
/*       */         return size;
/*       */       }
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
/*       */       }
/*       */       for (int i = 0; i < this.s2CAwardItems_.size(); i++) {
/*       */         size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.s2CAwardItems_.get(i));
/*       */       }
/*       */       if ((this.bitField0_ & 0x4) == 4) {
/*       */         size += CodedOutputStream.computeInt32Size(4, this.s2CState_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x8) == 8) {
/*       */         size += CodedOutputStream.computeInt32Size(5, this.s2CAwardId_);
/*       */       }
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     protected Object writeReplace() throws ObjectStreamException {
/*       */       return super.writeReplace();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static PaySecondResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
/*       */       return (PaySecondResponse)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static PaySecondResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (PaySecondResponse)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static PaySecondResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
/*       */       return (PaySecondResponse)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static PaySecondResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (PaySecondResponse)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static PaySecondResponse parseFrom(InputStream input) throws IOException {
/*       */       return (PaySecondResponse)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static PaySecondResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (PaySecondResponse)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static PaySecondResponse parseDelimitedFrom(InputStream input) throws IOException {
/*       */       return (PaySecondResponse)PARSER.parseDelimitedFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static PaySecondResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (PaySecondResponse)PARSER.parseDelimitedFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static PaySecondResponse parseFrom(CodedInputStream input) throws IOException {
/*       */       return (PaySecondResponse)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static PaySecondResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (PaySecondResponse)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static Builder newBuilder() {
/*       */       return Builder.create();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public Builder newBuilderForType() {
/*       */       return newBuilder();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static Builder newBuilder(PaySecondResponse prototype) {
/*       */       return newBuilder().mergeFrom(prototype);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public Builder toBuilder() {
/*       */       return newBuilder(this);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
/*       */       Builder builder = new Builder(parent);
/*       */       return builder;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static final class Builder
/*       */       extends GeneratedMessage.Builder<Builder>
/*       */       implements ActivityHandler.PaySecondResponseOrBuilder
/*       */     {
/*       */       private int bitField0_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private int s2CCode_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private Object s2CMsg_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private List<ItemOuterClass.MiniItem> s2CAwardItems_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> s2CAwardItemsBuilder_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private int s2CState_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private int s2CAwardId_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public static final Descriptors.Descriptor getDescriptor() {
/*       */         return ActivityHandler.internal_static_pomelo_area_PaySecondResponse_descriptor;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */         return ActivityHandler.internal_static_pomelo_area_PaySecondResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.PaySecondResponse.class, Builder.class);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private Builder() {
/*       */         this.s2CMsg_ = "";
/*       */         this.s2CAwardItems_ = Collections.emptyList();
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private Builder(GeneratedMessage.BuilderParent parent) {
/*       */         super(parent);
/*       */         this.s2CMsg_ = "";
/*       */         this.s2CAwardItems_ = Collections.emptyList();
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private void maybeForceBuilderInitialization() {
/*       */         if (ActivityHandler.PaySecondResponse.alwaysUseFieldBuilders) {
/*       */           getS2CAwardItemsFieldBuilder();
/*       */         }
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private static Builder create() {
/*       */         return new Builder();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clear() {
/*       */         super.clear();
/*       */         this.s2CCode_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CMsg_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         if (this.s2CAwardItemsBuilder_ == null) {
/*       */           this.s2CAwardItems_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFFB;
/*       */         } else {
/*       */           this.s2CAwardItemsBuilder_.clear();
/*       */         } 
/*       */         this.s2CState_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.s2CAwardId_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFEF;
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clone() {
/*       */         return create().mergeFrom(buildPartial());
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Descriptors.Descriptor getDescriptorForType() {
/*       */         return ActivityHandler.internal_static_pomelo_area_PaySecondResponse_descriptor;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ActivityHandler.PaySecondResponse getDefaultInstanceForType() {
/*       */         return ActivityHandler.PaySecondResponse.getDefaultInstance();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ActivityHandler.PaySecondResponse build() {
/*       */         ActivityHandler.PaySecondResponse result = buildPartial();
/*       */         if (!result.isInitialized()) {
/*       */           throw newUninitializedMessageException(result);
/*       */         }
/*       */         return result;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ActivityHandler.PaySecondResponse buildPartial() {
/*       */         ActivityHandler.PaySecondResponse result = new ActivityHandler.PaySecondResponse(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1) {
/*       */           to_bitField0_ |= 0x1;
/*       */         }
/*       */         result.s2CCode_ = this.s2CCode_;
/*       */         if ((from_bitField0_ & 0x2) == 2) {
/*       */           to_bitField0_ |= 0x2;
/*       */         }
/*       */         result.s2CMsg_ = this.s2CMsg_;
/*       */         if (this.s2CAwardItemsBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x4) == 4) {
/*       */             this.s2CAwardItems_ = Collections.unmodifiableList(this.s2CAwardItems_);
/*       */             this.bitField0_ &= 0xFFFFFFFB;
/*       */           } 
/*       */           result.s2CAwardItems_ = this.s2CAwardItems_;
/*       */         } else {
/*       */           result.s2CAwardItems_ = this.s2CAwardItemsBuilder_.build();
/*       */         } 
/*       */         if ((from_bitField0_ & 0x8) == 8) {
/*       */           to_bitField0_ |= 0x4;
/*       */         }
/*       */         result.s2CState_ = this.s2CState_;
/*       */         if ((from_bitField0_ & 0x10) == 16) {
/*       */           to_bitField0_ |= 0x8;
/*       */         }
/*       */         result.s2CAwardId_ = this.s2CAwardId_;
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(Message other) {
/*       */         if (other instanceof ActivityHandler.PaySecondResponse) {
/*       */           return mergeFrom((ActivityHandler.PaySecondResponse)other);
/*       */         }
/*       */         super.mergeFrom(other);
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(ActivityHandler.PaySecondResponse other) {
/*       */         if (other == ActivityHandler.PaySecondResponse.getDefaultInstance()) {
/*       */           return this;
/*       */         }
/*       */         if (other.hasS2CCode()) {
/*       */           setS2CCode(other.getS2CCode());
/*       */         }
/*       */         if (other.hasS2CMsg()) {
/*       */           this.bitField0_ |= 0x2;
/*       */           this.s2CMsg_ = other.s2CMsg_;
/*       */           onChanged();
/*       */         } 
/*       */         if (this.s2CAwardItemsBuilder_ == null) {
/*       */           if (!other.s2CAwardItems_.isEmpty()) {
/*       */             if (this.s2CAwardItems_.isEmpty()) {
/*       */               this.s2CAwardItems_ = other.s2CAwardItems_;
/*       */               this.bitField0_ &= 0xFFFFFFFB;
/*       */             } else {
/*       */               ensureS2CAwardItemsIsMutable();
/*       */               this.s2CAwardItems_.addAll(other.s2CAwardItems_);
/*       */             } 
/*       */             onChanged();
/*       */           } 
/*       */         } else if (!other.s2CAwardItems_.isEmpty()) {
/*       */           if (this.s2CAwardItemsBuilder_.isEmpty()) {
/*       */             this.s2CAwardItemsBuilder_.dispose();
/*       */             this.s2CAwardItemsBuilder_ = null;
/*       */             this.s2CAwardItems_ = other.s2CAwardItems_;
/*       */             this.bitField0_ &= 0xFFFFFFFB;
/*       */             this.s2CAwardItemsBuilder_ = ActivityHandler.PaySecondResponse.alwaysUseFieldBuilders ? getS2CAwardItemsFieldBuilder() : null;
/*       */           } else {
/*       */             this.s2CAwardItemsBuilder_.addAllMessages(other.s2CAwardItems_);
/*       */           } 
/*       */         } 
/*       */         if (other.hasS2CState()) {
/*       */           setS2CState(other.getS2CState());
/*       */         }
/*       */         if (other.hasS2CAwardId()) {
/*       */           setS2CAwardId(other.getS2CAwardId());
/*       */         }
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public final boolean isInitialized() {
/*       */         if (!hasS2CCode()) {
/*       */           return false;
/*       */         }
/*       */         if (!hasS2CState()) {
/*       */           return false;
/*       */         }
/*       */         if (!hasS2CAwardId()) {
/*       */           return false;
/*       */         }
/*       */         for (int i = 0; i < getS2CAwardItemsCount(); i++) {
/*       */           if (!getS2CAwardItems(i).isInitialized()) {
/*       */             return false;
/*       */           }
/*       */         } 
/*       */         return true;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */         ActivityHandler.PaySecondResponse parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (ActivityHandler.PaySecondResponse)ActivityHandler.PaySecondResponse.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (ActivityHandler.PaySecondResponse)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null) {
/*       */             mergeFrom(parsedMessage);
/*       */           }
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasS2CCode() {
/*       */         return ((this.bitField0_ & 0x1) == 1);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public int getS2CCode() {
/*       */         return this.s2CCode_;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setS2CCode(int value) {
/*       */         this.bitField0_ |= 0x1;
/*       */         this.s2CCode_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearS2CCode() {
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CCode_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasS2CMsg() {
/*       */         return ((this.bitField0_ & 0x2) == 2);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public String getS2CMsg() {
/*       */         Object ref = this.s2CMsg_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8()) {
/*       */             this.s2CMsg_ = s;
/*       */           }
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ByteString getS2CMsgBytes() {
/*       */         Object ref = this.s2CMsg_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CMsg_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setS2CMsg(String value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearS2CMsg() {
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.s2CMsg_ = ActivityHandler.PaySecondResponse.getDefaultInstance().getS2CMsg();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setS2CMsgBytes(ByteString value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private void ensureS2CAwardItemsIsMutable() {
/*       */         if ((this.bitField0_ & 0x4) != 4) {
/*       */           this.s2CAwardItems_ = new ArrayList<>(this.s2CAwardItems_);
/*       */           this.bitField0_ |= 0x4;
/*       */         } 
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public List<ItemOuterClass.MiniItem> getS2CAwardItemsList() {
/*       */         if (this.s2CAwardItemsBuilder_ == null) {
/*       */           return Collections.unmodifiableList(this.s2CAwardItems_);
/*       */         }
/*       */         return this.s2CAwardItemsBuilder_.getMessageList();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public int getS2CAwardItemsCount() {
/*       */         if (this.s2CAwardItemsBuilder_ == null) {
/*       */           return this.s2CAwardItems_.size();
/*       */         }
/*       */         return this.s2CAwardItemsBuilder_.getCount();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ItemOuterClass.MiniItem getS2CAwardItems(int index) {
/*       */         if (this.s2CAwardItemsBuilder_ == null) {
/*       */           return this.s2CAwardItems_.get(index);
/*       */         }
/*       */         return (ItemOuterClass.MiniItem)this.s2CAwardItemsBuilder_.getMessage(index);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setS2CAwardItems(int index, ItemOuterClass.MiniItem value) {
/*       */         if (this.s2CAwardItemsBuilder_ == null) {
/*       */           if (value == null) {
/*       */             throw new NullPointerException();
/*       */           }
/*       */           ensureS2CAwardItemsIsMutable();
/*       */           this.s2CAwardItems_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardItemsBuilder_.setMessage(index, (GeneratedMessage)value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setS2CAwardItems(int index, ItemOuterClass.MiniItem.Builder builderForValue) {
/*       */         if (this.s2CAwardItemsBuilder_ == null) {
/*       */           ensureS2CAwardItemsIsMutable();
/*       */           this.s2CAwardItems_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardItemsBuilder_.setMessage(index, (GeneratedMessage)builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addS2CAwardItems(ItemOuterClass.MiniItem value) {
/*       */         if (this.s2CAwardItemsBuilder_ == null) {
/*       */           if (value == null) {
/*       */             throw new NullPointerException();
/*       */           }
/*       */           ensureS2CAwardItemsIsMutable();
/*       */           this.s2CAwardItems_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardItemsBuilder_.addMessage((GeneratedMessage)value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addS2CAwardItems(int index, ItemOuterClass.MiniItem value) {
/*       */         if (this.s2CAwardItemsBuilder_ == null) {
/*       */           if (value == null) {
/*       */             throw new NullPointerException();
/*       */           }
/*       */           ensureS2CAwardItemsIsMutable();
/*       */           this.s2CAwardItems_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardItemsBuilder_.addMessage(index, (GeneratedMessage)value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addS2CAwardItems(ItemOuterClass.MiniItem.Builder builderForValue) {
/*       */         if (this.s2CAwardItemsBuilder_ == null) {
/*       */           ensureS2CAwardItemsIsMutable();
/*       */           this.s2CAwardItems_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardItemsBuilder_.addMessage((GeneratedMessage)builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addS2CAwardItems(int index, ItemOuterClass.MiniItem.Builder builderForValue) {
/*       */         if (this.s2CAwardItemsBuilder_ == null) {
/*       */           ensureS2CAwardItemsIsMutable();
/*       */           this.s2CAwardItems_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardItemsBuilder_.addMessage(index, (GeneratedMessage)builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addAllS2CAwardItems(Iterable<? extends ItemOuterClass.MiniItem> values) {
/*       */         if (this.s2CAwardItemsBuilder_ == null) {
/*       */           ensureS2CAwardItemsIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.s2CAwardItems_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardItemsBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearS2CAwardItems() {
/*       */         if (this.s2CAwardItemsBuilder_ == null) {
/*       */           this.s2CAwardItems_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFFB;
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardItemsBuilder_.clear();
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder removeS2CAwardItems(int index) {
/*       */         if (this.s2CAwardItemsBuilder_ == null) {
/*       */           ensureS2CAwardItemsIsMutable();
/*       */           this.s2CAwardItems_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardItemsBuilder_.remove(index);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ItemOuterClass.MiniItem.Builder getS2CAwardItemsBuilder(int index) {
/*       */         return (ItemOuterClass.MiniItem.Builder)getS2CAwardItemsFieldBuilder().getBuilder(index);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ItemOuterClass.MiniItemOrBuilder getS2CAwardItemsOrBuilder(int index) {
/*       */         if (this.s2CAwardItemsBuilder_ == null) {
/*       */           return (ItemOuterClass.MiniItemOrBuilder)this.s2CAwardItems_.get(index);
/*       */         }
/*       */         return (ItemOuterClass.MiniItemOrBuilder)this.s2CAwardItemsBuilder_.getMessageOrBuilder(index);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CAwardItemsOrBuilderList() {
/*       */         if (this.s2CAwardItemsBuilder_ != null) {
/*       */           return this.s2CAwardItemsBuilder_.getMessageOrBuilderList();
/*       */         }
/*       */         return (List)Collections.unmodifiableList(this.s2CAwardItems_);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ItemOuterClass.MiniItem.Builder addS2CAwardItemsBuilder() {
/*       */         return (ItemOuterClass.MiniItem.Builder)getS2CAwardItemsFieldBuilder().addBuilder((GeneratedMessage)ItemOuterClass.MiniItem.getDefaultInstance());
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ItemOuterClass.MiniItem.Builder addS2CAwardItemsBuilder(int index) {
/*       */         return (ItemOuterClass.MiniItem.Builder)getS2CAwardItemsFieldBuilder().addBuilder(index, (GeneratedMessage)ItemOuterClass.MiniItem.getDefaultInstance());
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public List<ItemOuterClass.MiniItem.Builder> getS2CAwardItemsBuilderList() {
/*       */         return getS2CAwardItemsFieldBuilder().getBuilderList();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> getS2CAwardItemsFieldBuilder() {
/*       */         if (this.s2CAwardItemsBuilder_ == null) {
/*       */           this.s2CAwardItemsBuilder_ = new RepeatedFieldBuilder(this.s2CAwardItems_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean());
/*       */           this.s2CAwardItems_ = null;
/*       */         } 
/*       */         return this.s2CAwardItemsBuilder_;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasS2CState() {
/*       */         return ((this.bitField0_ & 0x8) == 8);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public int getS2CState() {
/*       */         return this.s2CState_;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setS2CState(int value) {
/*       */         this.bitField0_ |= 0x8;
/*       */         this.s2CState_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearS2CState() {
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.s2CState_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasS2CAwardId() {
/*       */         return ((this.bitField0_ & 0x10) == 16);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public int getS2CAwardId() {
/*       */         return this.s2CAwardId_;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setS2CAwardId(int value) {
/*       */         this.bitField0_ |= 0x10;
/*       */         this.s2CAwardId_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearS2CAwardId() {
/*       */         this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.s2CAwardId_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */     }
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class awardPreview
/*       */     extends GeneratedMessage
/*       */     implements awardPreviewOrBuilder
/*       */   {
/*  7306 */     private static final awardPreview defaultInstance = new awardPreview(true); private final UnknownFieldSet unknownFields; private awardPreview(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private awardPreview(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static awardPreview getDefaultInstance() { return defaultInstance; } public awardPreview getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private awardPreview(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.currNum_ = input.readInt32(); break;case 16: this.bitField0_ |= 0x2; this.needNum_ = input.readInt32(); break;case 26: if ((mutable_bitField0_ & 0x4) != 4) { this.awardItems_ = new ArrayList<>(); mutable_bitField0_ |= 0x4; }  this.awardItems_.add(input.readMessage(ItemOuterClass.MiniItem.PARSER, extensionRegistry)); break;case 32: this.bitField0_ |= 0x4; this.state_ = input.readInt32(); break;case 40: this.bitField0_ |= 0x8; this.awardId_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x4) == 4) this.awardItems_ = Collections.unmodifiableList(this.awardItems_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_awardPreview_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_awardPreview_fieldAccessorTable.ensureFieldAccessorsInitialized(awardPreview.class, Builder.class); } public static Parser<awardPreview> PARSER = (Parser<awardPreview>)new AbstractParser<awardPreview>() { public ActivityHandler.awardPreview parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.awardPreview(input, extensionRegistry); } }; private int bitField0_; public static final int CURRNUM_FIELD_NUMBER = 1; private int currNum_; public static final int NEEDNUM_FIELD_NUMBER = 2; private int needNum_; public static final int AWARDITEMS_FIELD_NUMBER = 3; private List<ItemOuterClass.MiniItem> awardItems_; public static final int STATE_FIELD_NUMBER = 4; private int state_; public static final int AWARDID_FIELD_NUMBER = 5; private int awardId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<awardPreview> getParserForType() { return PARSER; } public boolean hasCurrNum() { return ((this.bitField0_ & 0x1) == 1); } public int getCurrNum() { return this.currNum_; } public boolean hasNeedNum() { return ((this.bitField0_ & 0x2) == 2); } public int getNeedNum() { return this.needNum_; } public List<ItemOuterClass.MiniItem> getAwardItemsList() { return this.awardItems_; } public List<? extends ItemOuterClass.MiniItemOrBuilder> getAwardItemsOrBuilderList() { return (List)this.awardItems_; } public int getAwardItemsCount() { return this.awardItems_.size(); } public ItemOuterClass.MiniItem getAwardItems(int index) { return this.awardItems_.get(index); } public ItemOuterClass.MiniItemOrBuilder getAwardItemsOrBuilder(int index) { return (ItemOuterClass.MiniItemOrBuilder)this.awardItems_.get(index); } public boolean hasState() { return ((this.bitField0_ & 0x4) == 4); } public int getState() { return this.state_; } public boolean hasAwardId() { return ((this.bitField0_ & 0x8) == 8); } public int getAwardId() { return this.awardId_; } private void initFields() { this.currNum_ = 0; this.needNum_ = 0; this.awardItems_ = Collections.emptyList(); this.state_ = 0; this.awardId_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasCurrNum()) { this.memoizedIsInitialized = 0; return false; }  if (!hasNeedNum()) { this.memoizedIsInitialized = 0; return false; }  if (!hasState()) { this.memoizedIsInitialized = 0; return false; }  if (!hasAwardId()) { this.memoizedIsInitialized = 0; return false; }  for (int i = 0; i < getAwardItemsCount(); i++) { if (!getAwardItems(i).isInitialized()) { this.memoizedIsInitialized = 0; return false; }  }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.currNum_);  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.needNum_);  for (int i = 0; i < this.awardItems_.size(); i++) output.writeMessage(3, (MessageLite)this.awardItems_.get(i));  if ((this.bitField0_ & 0x4) == 4) output.writeInt32(4, this.state_);  if ((this.bitField0_ & 0x8) == 8) output.writeInt32(5, this.awardId_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.currNum_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.needNum_);  for (int i = 0; i < this.awardItems_.size(); i++) size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.awardItems_.get(i));  if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt32Size(4, this.state_);  if ((this.bitField0_ & 0x8) == 8) size += CodedOutputStream.computeInt32Size(5, this.awardId_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static awardPreview parseFrom(ByteString data) throws InvalidProtocolBufferException { return (awardPreview)PARSER.parseFrom(data); } public static awardPreview parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (awardPreview)PARSER.parseFrom(data, extensionRegistry); } public static awardPreview parseFrom(byte[] data) throws InvalidProtocolBufferException { return (awardPreview)PARSER.parseFrom(data); } public static awardPreview parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (awardPreview)PARSER.parseFrom(data, extensionRegistry); } public static awardPreview parseFrom(InputStream input) throws IOException { return (awardPreview)PARSER.parseFrom(input); } public static awardPreview parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (awardPreview)PARSER.parseFrom(input, extensionRegistry); } public static awardPreview parseDelimitedFrom(InputStream input) throws IOException { return (awardPreview)PARSER.parseDelimitedFrom(input); } public static awardPreview parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (awardPreview)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static awardPreview parseFrom(CodedInputStream input) throws IOException { return (awardPreview)PARSER.parseFrom(input); } public static awardPreview parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (awardPreview)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(awardPreview prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.awardPreviewOrBuilder {
/*  7307 */       private int bitField0_; private int currNum_; private int needNum_; private List<ItemOuterClass.MiniItem> awardItems_; private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> awardItemsBuilder_; private int state_; private int awardId_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_awardPreview_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_awardPreview_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.awardPreview.class, Builder.class); } private Builder() { this.awardItems_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.awardItems_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.awardPreview.alwaysUseFieldBuilders) getAwardItemsFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.currNum_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.needNum_ = 0; this.bitField0_ &= 0xFFFFFFFD; if (this.awardItemsBuilder_ == null) { this.awardItems_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; } else { this.awardItemsBuilder_.clear(); }  this.state_ = 0; this.bitField0_ &= 0xFFFFFFF7; this.awardId_ = 0; this.bitField0_ &= 0xFFFFFFEF; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_awardPreview_descriptor; } public ActivityHandler.awardPreview getDefaultInstanceForType() { return ActivityHandler.awardPreview.getDefaultInstance(); } public ActivityHandler.awardPreview build() { ActivityHandler.awardPreview result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.awardPreview buildPartial() { ActivityHandler.awardPreview result = new ActivityHandler.awardPreview(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.currNum_ = this.currNum_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.needNum_ = this.needNum_; if (this.awardItemsBuilder_ == null) { if ((this.bitField0_ & 0x4) == 4) { this.awardItems_ = Collections.unmodifiableList(this.awardItems_); this.bitField0_ &= 0xFFFFFFFB; }  result.awardItems_ = this.awardItems_; } else { result.awardItems_ = this.awardItemsBuilder_.build(); }  if ((from_bitField0_ & 0x8) == 8) to_bitField0_ |= 0x4;  result.state_ = this.state_; if ((from_bitField0_ & 0x10) == 16) to_bitField0_ |= 0x8;  result.awardId_ = this.awardId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.awardPreview) return mergeFrom((ActivityHandler.awardPreview)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.awardPreview other) { if (other == ActivityHandler.awardPreview.getDefaultInstance()) return this;  if (other.hasCurrNum()) setCurrNum(other.getCurrNum());  if (other.hasNeedNum()) setNeedNum(other.getNeedNum());  if (this.awardItemsBuilder_ == null) { if (!other.awardItems_.isEmpty()) { if (this.awardItems_.isEmpty()) { this.awardItems_ = other.awardItems_; this.bitField0_ &= 0xFFFFFFFB; } else { ensureAwardItemsIsMutable(); this.awardItems_.addAll(other.awardItems_); }  onChanged(); }  } else if (!other.awardItems_.isEmpty()) { if (this.awardItemsBuilder_.isEmpty()) { this.awardItemsBuilder_.dispose(); this.awardItemsBuilder_ = null; this.awardItems_ = other.awardItems_; this.bitField0_ &= 0xFFFFFFFB; this.awardItemsBuilder_ = ActivityHandler.awardPreview.alwaysUseFieldBuilders ? getAwardItemsFieldBuilder() : null; } else { this.awardItemsBuilder_.addAllMessages(other.awardItems_); }  }  if (other.hasState()) setState(other.getState());  if (other.hasAwardId()) setAwardId(other.getAwardId());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasCurrNum()) return false;  if (!hasNeedNum()) return false;  if (!hasState()) return false;  if (!hasAwardId()) return false;  for (int i = 0; i < getAwardItemsCount(); i++) { if (!getAwardItems(i).isInitialized()) return false;  }  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.awardPreview parsedMessage = null; try { parsedMessage = (ActivityHandler.awardPreview)ActivityHandler.awardPreview.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.awardPreview)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasCurrNum() { return ((this.bitField0_ & 0x1) == 1); } public int getCurrNum() { return this.currNum_; } public Builder setCurrNum(int value) { this.bitField0_ |= 0x1; this.currNum_ = value; onChanged(); return this; } public Builder clearCurrNum() { this.bitField0_ &= 0xFFFFFFFE; this.currNum_ = 0; onChanged(); return this; } public boolean hasNeedNum() { return ((this.bitField0_ & 0x2) == 2); } public int getNeedNum() { return this.needNum_; } public Builder setNeedNum(int value) { this.bitField0_ |= 0x2; this.needNum_ = value; onChanged(); return this; } public Builder clearNeedNum() { this.bitField0_ &= 0xFFFFFFFD; this.needNum_ = 0; onChanged(); return this; } private void ensureAwardItemsIsMutable() { if ((this.bitField0_ & 0x4) != 4) { this.awardItems_ = new ArrayList<>(this.awardItems_); this.bitField0_ |= 0x4; }  } public List<ItemOuterClass.MiniItem> getAwardItemsList() { if (this.awardItemsBuilder_ == null) return Collections.unmodifiableList(this.awardItems_);  return this.awardItemsBuilder_.getMessageList(); } public int getAwardItemsCount() { if (this.awardItemsBuilder_ == null) return this.awardItems_.size();  return this.awardItemsBuilder_.getCount(); } public ItemOuterClass.MiniItem getAwardItems(int index) { if (this.awardItemsBuilder_ == null) return this.awardItems_.get(index);  return (ItemOuterClass.MiniItem)this.awardItemsBuilder_.getMessage(index); } public Builder setAwardItems(int index, ItemOuterClass.MiniItem value) { if (this.awardItemsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureAwardItemsIsMutable(); this.awardItems_.set(index, value); onChanged(); } else { this.awardItemsBuilder_.setMessage(index, (GeneratedMessage)value); }  return this; } public Builder setAwardItems(int index, ItemOuterClass.MiniItem.Builder builderForValue) { if (this.awardItemsBuilder_ == null) { ensureAwardItemsIsMutable(); this.awardItems_.set(index, builderForValue.build()); onChanged(); } else { this.awardItemsBuilder_.setMessage(index, (GeneratedMessage)builderForValue.build()); }  return this; } public Builder addAwardItems(ItemOuterClass.MiniItem value) { if (this.awardItemsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureAwardItemsIsMutable(); this.awardItems_.add(value); onChanged(); } else { this.awardItemsBuilder_.addMessage((GeneratedMessage)value); }  return this; } public Builder addAwardItems(int index, ItemOuterClass.MiniItem value) { if (this.awardItemsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureAwardItemsIsMutable(); this.awardItems_.add(index, value); onChanged(); } else { this.awardItemsBuilder_.addMessage(index, (GeneratedMessage)value); }  return this; } public Builder addAwardItems(ItemOuterClass.MiniItem.Builder builderForValue) { if (this.awardItemsBuilder_ == null) { ensureAwardItemsIsMutable(); this.awardItems_.add(builderForValue.build()); onChanged(); } else { this.awardItemsBuilder_.addMessage((GeneratedMessage)builderForValue.build()); }  return this; } public Builder addAwardItems(int index, ItemOuterClass.MiniItem.Builder builderForValue) { if (this.awardItemsBuilder_ == null) { ensureAwardItemsIsMutable(); this.awardItems_.add(index, builderForValue.build()); onChanged(); } else { this.awardItemsBuilder_.addMessage(index, (GeneratedMessage)builderForValue.build()); }  return this; } public Builder addAllAwardItems(Iterable<? extends ItemOuterClass.MiniItem> values) { if (this.awardItemsBuilder_ == null) { ensureAwardItemsIsMutable(); AbstractMessageLite.Builder.addAll(values, this.awardItems_); onChanged(); } else { this.awardItemsBuilder_.addAllMessages(values); }  return this; } public Builder clearAwardItems() { if (this.awardItemsBuilder_ == null) { this.awardItems_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; onChanged(); } else { this.awardItemsBuilder_.clear(); }  return this; } public Builder removeAwardItems(int index) { if (this.awardItemsBuilder_ == null) { ensureAwardItemsIsMutable(); this.awardItems_.remove(index); onChanged(); } else { this.awardItemsBuilder_.remove(index); }  return this; } public ItemOuterClass.MiniItem.Builder getAwardItemsBuilder(int index) { return (ItemOuterClass.MiniItem.Builder)getAwardItemsFieldBuilder().getBuilder(index); } public ItemOuterClass.MiniItemOrBuilder getAwardItemsOrBuilder(int index) { if (this.awardItemsBuilder_ == null) return (ItemOuterClass.MiniItemOrBuilder)this.awardItems_.get(index);  return (ItemOuterClass.MiniItemOrBuilder)this.awardItemsBuilder_.getMessageOrBuilder(index); } public List<? extends ItemOuterClass.MiniItemOrBuilder> getAwardItemsOrBuilderList() { if (this.awardItemsBuilder_ != null) return this.awardItemsBuilder_.getMessageOrBuilderList();  return (List)Collections.unmodifiableList(this.awardItems_); } public ItemOuterClass.MiniItem.Builder addAwardItemsBuilder() { return (ItemOuterClass.MiniItem.Builder)getAwardItemsFieldBuilder().addBuilder((GeneratedMessage)ItemOuterClass.MiniItem.getDefaultInstance()); } public ItemOuterClass.MiniItem.Builder addAwardItemsBuilder(int index) { return (ItemOuterClass.MiniItem.Builder)getAwardItemsFieldBuilder().addBuilder(index, (GeneratedMessage)ItemOuterClass.MiniItem.getDefaultInstance()); } public List<ItemOuterClass.MiniItem.Builder> getAwardItemsBuilderList() { return getAwardItemsFieldBuilder().getBuilderList(); } private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> getAwardItemsFieldBuilder() { if (this.awardItemsBuilder_ == null) { this.awardItemsBuilder_ = new RepeatedFieldBuilder(this.awardItems_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean()); this.awardItems_ = null; }  return this.awardItemsBuilder_; } public boolean hasState() { return ((this.bitField0_ & 0x8) == 8); } public int getState() { return this.state_; } public Builder setState(int value) { this.bitField0_ |= 0x8; this.state_ = value; onChanged(); return this; } public Builder clearState() { this.bitField0_ &= 0xFFFFFFF7; this.state_ = 0; onChanged(); return this; } public boolean hasAwardId() { return ((this.bitField0_ & 0x10) == 16); } public int getAwardId() { return this.awardId_; } public Builder setAwardId(int value) { this.bitField0_ |= 0x10; this.awardId_ = value; onChanged(); return this; } public Builder clearAwardId() { this.bitField0_ &= 0xFFFFFFEF; this.awardId_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class totalInfo
/*       */     extends GeneratedMessage
/*       */     implements totalInfoOrBuilder
/*       */   {
/*  8492 */     private static final totalInfo defaultInstance = new totalInfo(true); private final UnknownFieldSet unknownFields; private totalInfo(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private totalInfo(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static totalInfo getDefaultInstance() { return defaultInstance; } public totalInfo getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private totalInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.beginTime_ = bs; break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.endTime_ = bs; break;case 26: bs = input.readBytes(); this.bitField0_ |= 0x4; this.describe_ = bs; break;case 34: if ((mutable_bitField0_ & 0x8) != 8) { this.awards_ = new ArrayList<>(); mutable_bitField0_ |= 0x8; }  this.awards_.add(input.readMessage(ActivityHandler.awardPreview.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x8) == 8) this.awards_ = Collections.unmodifiableList(this.awards_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_totalInfo_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_totalInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(totalInfo.class, Builder.class); } public static Parser<totalInfo> PARSER = (Parser<totalInfo>)new AbstractParser<totalInfo>() { public ActivityHandler.totalInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.totalInfo(input, extensionRegistry); } }
/*  8493 */     ; private int bitField0_; public static final int BEGINTIME_FIELD_NUMBER = 1; private Object beginTime_; public static final int ENDTIME_FIELD_NUMBER = 2; private Object endTime_; public static final int DESCRIBE_FIELD_NUMBER = 3; private Object describe_; public static final int AWARDS_FIELD_NUMBER = 4; private List<ActivityHandler.awardPreview> awards_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<totalInfo> getParserForType() { return PARSER; } public boolean hasBeginTime() { return ((this.bitField0_ & 0x1) == 1); } public String getBeginTime() { Object ref = this.beginTime_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.beginTime_ = s;  return s; } public ByteString getBeginTimeBytes() { Object ref = this.beginTime_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.beginTime_ = b; return b; }  return (ByteString)ref; } public boolean hasEndTime() { return ((this.bitField0_ & 0x2) == 2); } public String getEndTime() { Object ref = this.endTime_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.endTime_ = s;  return s; } public ByteString getEndTimeBytes() { Object ref = this.endTime_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.endTime_ = b; return b; }  return (ByteString)ref; } static { defaultInstance.initFields(); }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public boolean hasDescribe() {
/*       */       return ((this.bitField0_ & 0x4) == 4);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public String getDescribe() {
/*       */       Object ref = this.describe_;
/*       */       if (ref instanceof String) {
/*       */         return (String)ref;
/*       */       }
/*       */       ByteString bs = (ByteString)ref;
/*       */       String s = bs.toStringUtf8();
/*       */       if (bs.isValidUtf8()) {
/*       */         this.describe_ = s;
/*       */       }
/*       */       return s;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public ByteString getDescribeBytes() {
/*       */       Object ref = this.describe_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.describe_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public List<ActivityHandler.awardPreview> getAwardsList() {
/*       */       return this.awards_;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public List<? extends ActivityHandler.awardPreviewOrBuilder> getAwardsOrBuilderList() {
/*       */       return (List)this.awards_;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getAwardsCount() {
/*       */       return this.awards_.size();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public ActivityHandler.awardPreview getAwards(int index) {
/*       */       return this.awards_.get(index);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public ActivityHandler.awardPreviewOrBuilder getAwardsOrBuilder(int index) {
/*       */       return this.awards_.get(index);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private void initFields() {
/*       */       this.beginTime_ = "";
/*       */       this.endTime_ = "";
/*       */       this.describe_ = "";
/*       */       this.awards_ = Collections.emptyList();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public final boolean isInitialized() {
/*       */       byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1) {
/*       */         return true;
/*       */       }
/*       */       if (isInitialized == 0) {
/*       */         return false;
/*       */       }
/*       */       if (!hasBeginTime()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasEndTime()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasDescribe()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       for (int i = 0; i < getAwardsCount(); i++) {
/*       */         if (!getAwards(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0;
/*       */           return false;
/*       */         } 
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public void writeTo(CodedOutputStream output) throws IOException {
/*       */       getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         output.writeBytes(1, getBeginTimeBytes());
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         output.writeBytes(2, getEndTimeBytes());
/*       */       }
/*       */       if ((this.bitField0_ & 0x4) == 4) {
/*       */         output.writeBytes(3, getDescribeBytes());
/*       */       }
/*       */       for (int i = 0; i < this.awards_.size(); i++) {
/*       */         output.writeMessage(4, (MessageLite)this.awards_.get(i));
/*       */       }
/*       */       getUnknownFields().writeTo(output);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getSerializedSize() {
/*       */       int size = this.memoizedSerializedSize;
/*       */       if (size != -1) {
/*       */         return size;
/*       */       }
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         size += CodedOutputStream.computeBytesSize(1, getBeginTimeBytes());
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         size += CodedOutputStream.computeBytesSize(2, getEndTimeBytes());
/*       */       }
/*       */       if ((this.bitField0_ & 0x4) == 4) {
/*       */         size += CodedOutputStream.computeBytesSize(3, getDescribeBytes());
/*       */       }
/*       */       for (int i = 0; i < this.awards_.size(); i++) {
/*       */         size += CodedOutputStream.computeMessageSize(4, (MessageLite)this.awards_.get(i));
/*       */       }
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     protected Object writeReplace() throws ObjectStreamException {
/*       */       return super.writeReplace();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static totalInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
/*       */       return (totalInfo)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static totalInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (totalInfo)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static totalInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
/*       */       return (totalInfo)PARSER.parseFrom(data);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static totalInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (totalInfo)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static totalInfo parseFrom(InputStream input) throws IOException {
/*       */       return (totalInfo)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static totalInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (totalInfo)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static totalInfo parseDelimitedFrom(InputStream input) throws IOException {
/*       */       return (totalInfo)PARSER.parseDelimitedFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static totalInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (totalInfo)PARSER.parseDelimitedFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static totalInfo parseFrom(CodedInputStream input) throws IOException {
/*       */       return (totalInfo)PARSER.parseFrom(input);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static totalInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (totalInfo)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static Builder newBuilder() {
/*       */       return Builder.create();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public Builder newBuilderForType() {
/*       */       return newBuilder();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static Builder newBuilder(totalInfo prototype) {
/*       */       return newBuilder().mergeFrom(prototype);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public Builder toBuilder() {
/*       */       return newBuilder(this);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
/*       */       Builder builder = new Builder(parent);
/*       */       return builder;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static final class Builder
/*       */       extends GeneratedMessage.Builder<Builder>
/*       */       implements ActivityHandler.totalInfoOrBuilder
/*       */     {
/*       */       private int bitField0_;
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private Object beginTime_;
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private Object endTime_;
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private Object describe_;
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private List<ActivityHandler.awardPreview> awards_;
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private RepeatedFieldBuilder<ActivityHandler.awardPreview, ActivityHandler.awardPreview.Builder, ActivityHandler.awardPreviewOrBuilder> awardsBuilder_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public static final Descriptors.Descriptor getDescriptor() {
/*       */         return ActivityHandler.internal_static_pomelo_area_totalInfo_descriptor;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */         return ActivityHandler.internal_static_pomelo_area_totalInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.totalInfo.class, Builder.class);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private Builder() {
/*       */         this.beginTime_ = "";
/*       */         this.endTime_ = "";
/*       */         this.describe_ = "";
/*       */         this.awards_ = Collections.emptyList();
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private Builder(GeneratedMessage.BuilderParent parent) {
/*       */         super(parent);
/*       */         this.beginTime_ = "";
/*       */         this.endTime_ = "";
/*       */         this.describe_ = "";
/*       */         this.awards_ = Collections.emptyList();
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private void maybeForceBuilderInitialization() {
/*       */         if (ActivityHandler.totalInfo.alwaysUseFieldBuilders) {
/*       */           getAwardsFieldBuilder();
/*       */         }
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private static Builder create() {
/*       */         return new Builder();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clear() {
/*       */         super.clear();
/*       */         this.beginTime_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.endTime_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.describe_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         if (this.awardsBuilder_ == null) {
/*       */           this.awards_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFF7;
/*       */         } else {
/*       */           this.awardsBuilder_.clear();
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clone() {
/*       */         return create().mergeFrom(buildPartial());
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Descriptors.Descriptor getDescriptorForType() {
/*       */         return ActivityHandler.internal_static_pomelo_area_totalInfo_descriptor;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ActivityHandler.totalInfo getDefaultInstanceForType() {
/*       */         return ActivityHandler.totalInfo.getDefaultInstance();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ActivityHandler.totalInfo build() {
/*       */         ActivityHandler.totalInfo result = buildPartial();
/*       */         if (!result.isInitialized()) {
/*       */           throw newUninitializedMessageException(result);
/*       */         }
/*       */         return result;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ActivityHandler.totalInfo buildPartial() {
/*       */         ActivityHandler.totalInfo result = new ActivityHandler.totalInfo(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1) {
/*       */           to_bitField0_ |= 0x1;
/*       */         }
/*       */         result.beginTime_ = this.beginTime_;
/*       */         if ((from_bitField0_ & 0x2) == 2) {
/*       */           to_bitField0_ |= 0x2;
/*       */         }
/*       */         result.endTime_ = this.endTime_;
/*       */         if ((from_bitField0_ & 0x4) == 4) {
/*       */           to_bitField0_ |= 0x4;
/*       */         }
/*       */         result.describe_ = this.describe_;
/*       */         if (this.awardsBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x8) == 8) {
/*       */             this.awards_ = Collections.unmodifiableList(this.awards_);
/*       */             this.bitField0_ &= 0xFFFFFFF7;
/*       */           } 
/*       */           result.awards_ = this.awards_;
/*       */         } else {
/*       */           result.awards_ = this.awardsBuilder_.build();
/*       */         } 
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(Message other) {
/*       */         if (other instanceof ActivityHandler.totalInfo) {
/*       */           return mergeFrom((ActivityHandler.totalInfo)other);
/*       */         }
/*       */         super.mergeFrom(other);
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(ActivityHandler.totalInfo other) {
/*       */         if (other == ActivityHandler.totalInfo.getDefaultInstance()) {
/*       */           return this;
/*       */         }
/*       */         if (other.hasBeginTime()) {
/*       */           this.bitField0_ |= 0x1;
/*       */           this.beginTime_ = other.beginTime_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasEndTime()) {
/*       */           this.bitField0_ |= 0x2;
/*       */           this.endTime_ = other.endTime_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasDescribe()) {
/*       */           this.bitField0_ |= 0x4;
/*       */           this.describe_ = other.describe_;
/*       */           onChanged();
/*       */         } 
/*       */         if (this.awardsBuilder_ == null) {
/*       */           if (!other.awards_.isEmpty()) {
/*       */             if (this.awards_.isEmpty()) {
/*       */               this.awards_ = other.awards_;
/*       */               this.bitField0_ &= 0xFFFFFFF7;
/*       */             } else {
/*       */               ensureAwardsIsMutable();
/*       */               this.awards_.addAll(other.awards_);
/*       */             } 
/*       */             onChanged();
/*       */           } 
/*       */         } else if (!other.awards_.isEmpty()) {
/*       */           if (this.awardsBuilder_.isEmpty()) {
/*       */             this.awardsBuilder_.dispose();
/*       */             this.awardsBuilder_ = null;
/*       */             this.awards_ = other.awards_;
/*       */             this.bitField0_ &= 0xFFFFFFF7;
/*       */             this.awardsBuilder_ = ActivityHandler.totalInfo.alwaysUseFieldBuilders ? getAwardsFieldBuilder() : null;
/*       */           } else {
/*       */             this.awardsBuilder_.addAllMessages(other.awards_);
/*       */           } 
/*       */         } 
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public final boolean isInitialized() {
/*       */         if (!hasBeginTime()) {
/*       */           return false;
/*       */         }
/*       */         if (!hasEndTime()) {
/*       */           return false;
/*       */         }
/*       */         if (!hasDescribe()) {
/*       */           return false;
/*       */         }
/*       */         for (int i = 0; i < getAwardsCount(); i++) {
/*       */           if (!getAwards(i).isInitialized()) {
/*       */             return false;
/*       */           }
/*       */         } 
/*       */         return true;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */         ActivityHandler.totalInfo parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (ActivityHandler.totalInfo)ActivityHandler.totalInfo.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (ActivityHandler.totalInfo)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null) {
/*       */             mergeFrom(parsedMessage);
/*       */           }
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasBeginTime() {
/*       */         return ((this.bitField0_ & 0x1) == 1);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public String getBeginTime() {
/*       */         Object ref = this.beginTime_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8()) {
/*       */             this.beginTime_ = s;
/*       */           }
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ByteString getBeginTimeBytes() {
/*       */         Object ref = this.beginTime_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.beginTime_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setBeginTime(String value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x1;
/*       */         this.beginTime_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearBeginTime() {
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.beginTime_ = ActivityHandler.totalInfo.getDefaultInstance().getBeginTime();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setBeginTimeBytes(ByteString value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x1;
/*       */         this.beginTime_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasEndTime() {
/*       */         return ((this.bitField0_ & 0x2) == 2);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public String getEndTime() {
/*       */         Object ref = this.endTime_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8()) {
/*       */             this.endTime_ = s;
/*       */           }
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ByteString getEndTimeBytes() {
/*       */         Object ref = this.endTime_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.endTime_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setEndTime(String value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x2;
/*       */         this.endTime_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearEndTime() {
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.endTime_ = ActivityHandler.totalInfo.getDefaultInstance().getEndTime();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setEndTimeBytes(ByteString value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x2;
/*       */         this.endTime_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public boolean hasDescribe() {
/*       */         return ((this.bitField0_ & 0x4) == 4);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public String getDescribe() {
/*       */         Object ref = this.describe_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8()) {
/*       */             this.describe_ = s;
/*       */           }
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ByteString getDescribeBytes() {
/*       */         Object ref = this.describe_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.describe_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setDescribe(String value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x4;
/*       */         this.describe_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearDescribe() {
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.describe_ = ActivityHandler.totalInfo.getDefaultInstance().getDescribe();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setDescribeBytes(ByteString value) {
/*       */         if (value == null) {
/*       */           throw new NullPointerException();
/*       */         }
/*       */         this.bitField0_ |= 0x4;
/*       */         this.describe_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private void ensureAwardsIsMutable() {
/*       */         if ((this.bitField0_ & 0x8) != 8) {
/*       */           this.awards_ = new ArrayList<>(this.awards_);
/*       */           this.bitField0_ |= 0x8;
/*       */         } 
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public List<ActivityHandler.awardPreview> getAwardsList() {
/*       */         if (this.awardsBuilder_ == null) {
/*       */           return Collections.unmodifiableList(this.awards_);
/*       */         }
/*       */         return this.awardsBuilder_.getMessageList();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public int getAwardsCount() {
/*       */         if (this.awardsBuilder_ == null) {
/*       */           return this.awards_.size();
/*       */         }
/*       */         return this.awardsBuilder_.getCount();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ActivityHandler.awardPreview getAwards(int index) {
/*       */         if (this.awardsBuilder_ == null) {
/*       */           return this.awards_.get(index);
/*       */         }
/*       */         return (ActivityHandler.awardPreview)this.awardsBuilder_.getMessage(index);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setAwards(int index, ActivityHandler.awardPreview value) {
/*       */         if (this.awardsBuilder_ == null) {
/*       */           if (value == null) {
/*       */             throw new NullPointerException();
/*       */           }
/*       */           ensureAwardsIsMutable();
/*       */           this.awards_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.awardsBuilder_.setMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder setAwards(int index, ActivityHandler.awardPreview.Builder builderForValue) {
/*       */         if (this.awardsBuilder_ == null) {
/*       */           ensureAwardsIsMutable();
/*       */           this.awards_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.awardsBuilder_.setMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addAwards(ActivityHandler.awardPreview value) {
/*       */         if (this.awardsBuilder_ == null) {
/*       */           if (value == null) {
/*       */             throw new NullPointerException();
/*       */           }
/*       */           ensureAwardsIsMutable();
/*       */           this.awards_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.awardsBuilder_.addMessage(value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addAwards(int index, ActivityHandler.awardPreview value) {
/*       */         if (this.awardsBuilder_ == null) {
/*       */           if (value == null) {
/*       */             throw new NullPointerException();
/*       */           }
/*       */           ensureAwardsIsMutable();
/*       */           this.awards_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.awardsBuilder_.addMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addAwards(ActivityHandler.awardPreview.Builder builderForValue) {
/*       */         if (this.awardsBuilder_ == null) {
/*       */           ensureAwardsIsMutable();
/*       */           this.awards_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.awardsBuilder_.addMessage(builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addAwards(int index, ActivityHandler.awardPreview.Builder builderForValue) {
/*       */         if (this.awardsBuilder_ == null) {
/*       */           ensureAwardsIsMutable();
/*       */           this.awards_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.awardsBuilder_.addMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder addAllAwards(Iterable<? extends ActivityHandler.awardPreview> values) {
/*       */         if (this.awardsBuilder_ == null) {
/*       */           ensureAwardsIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.awards_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.awardsBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder clearAwards() {
/*       */         if (this.awardsBuilder_ == null) {
/*       */           this.awards_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFF7;
/*       */           onChanged();
/*       */         } else {
/*       */           this.awardsBuilder_.clear();
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public Builder removeAwards(int index) {
/*       */         if (this.awardsBuilder_ == null) {
/*       */           ensureAwardsIsMutable();
/*       */           this.awards_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.awardsBuilder_.remove(index);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ActivityHandler.awardPreview.Builder getAwardsBuilder(int index) {
/*       */         return (ActivityHandler.awardPreview.Builder)getAwardsFieldBuilder().getBuilder(index);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ActivityHandler.awardPreviewOrBuilder getAwardsOrBuilder(int index) {
/*       */         if (this.awardsBuilder_ == null) {
/*       */           return this.awards_.get(index);
/*       */         }
/*       */         return (ActivityHandler.awardPreviewOrBuilder)this.awardsBuilder_.getMessageOrBuilder(index);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public List<? extends ActivityHandler.awardPreviewOrBuilder> getAwardsOrBuilderList() {
/*       */         if (this.awardsBuilder_ != null) {
/*       */           return this.awardsBuilder_.getMessageOrBuilderList();
/*       */         }
/*       */         return Collections.unmodifiableList((List)this.awards_);
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ActivityHandler.awardPreview.Builder addAwardsBuilder() {
/*       */         return (ActivityHandler.awardPreview.Builder)getAwardsFieldBuilder().addBuilder(ActivityHandler.awardPreview.getDefaultInstance());
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public ActivityHandler.awardPreview.Builder addAwardsBuilder(int index) {
/*       */         return (ActivityHandler.awardPreview.Builder)getAwardsFieldBuilder().addBuilder(index, ActivityHandler.awardPreview.getDefaultInstance());
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       public List<ActivityHandler.awardPreview.Builder> getAwardsBuilderList() {
/*       */         return getAwardsFieldBuilder().getBuilderList();
/*       */       }
/*       */ 
/*       */ 
/*       */ 
/*       */       
/*       */       private RepeatedFieldBuilder<ActivityHandler.awardPreview, ActivityHandler.awardPreview.Builder, ActivityHandler.awardPreviewOrBuilder> getAwardsFieldBuilder() {
/*       */         if (this.awardsBuilder_ == null) {
/*       */           this.awardsBuilder_ = new RepeatedFieldBuilder(this.awards_, ((this.bitField0_ & 0x8) == 8), getParentForChildren(), isClean());
/*       */           this.awards_ = null;
/*       */         } 
/*       */         return this.awardsBuilder_;
/*       */       }
/*       */     }
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class awardState
/*       */     extends GeneratedMessage
/*       */     implements awardStateOrBuilder
/*       */   {
/*  9537 */     private static final awardState defaultInstance = new awardState(true); private final UnknownFieldSet unknownFields; private awardState(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private awardState(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static awardState getDefaultInstance() { return defaultInstance; } public awardState getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private awardState(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.state_ = input.readInt32(); break;case 16: this.bitField0_ |= 0x2; this.awardId_ = input.readInt32(); break;case 24: this.bitField0_ |= 0x4; this.needValue_ = input.readInt32(); break;case 34: if ((mutable_bitField0_ & 0x8) != 8) { this.awardItems_ = new ArrayList<>(); mutable_bitField0_ |= 0x8; }  this.awardItems_.add(input.readMessage(ItemOuterClass.MiniItem.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x8) == 8) this.awardItems_ = Collections.unmodifiableList(this.awardItems_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_awardState_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_awardState_fieldAccessorTable.ensureFieldAccessorsInitialized(awardState.class, Builder.class); } public static Parser<awardState> PARSER = (Parser<awardState>)new AbstractParser<awardState>() { public ActivityHandler.awardState parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.awardState(input, extensionRegistry); } }; private int bitField0_; public static final int STATE_FIELD_NUMBER = 1; private int state_; public static final int AWARDID_FIELD_NUMBER = 2; private int awardId_; public static final int NEEDVALUE_FIELD_NUMBER = 3; private int needValue_; public static final int AWARDITEMS_FIELD_NUMBER = 4; private List<ItemOuterClass.MiniItem> awardItems_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<awardState> getParserForType() { return PARSER; } public boolean hasState() { return ((this.bitField0_ & 0x1) == 1); } public int getState() { return this.state_; } public boolean hasAwardId() { return ((this.bitField0_ & 0x2) == 2); } public int getAwardId() { return this.awardId_; } public boolean hasNeedValue() { return ((this.bitField0_ & 0x4) == 4); } public int getNeedValue() { return this.needValue_; } public List<ItemOuterClass.MiniItem> getAwardItemsList() { return this.awardItems_; } public List<? extends ItemOuterClass.MiniItemOrBuilder> getAwardItemsOrBuilderList() { return (List)this.awardItems_; } public int getAwardItemsCount() { return this.awardItems_.size(); } public ItemOuterClass.MiniItem getAwardItems(int index) { return this.awardItems_.get(index); } public ItemOuterClass.MiniItemOrBuilder getAwardItemsOrBuilder(int index) { return (ItemOuterClass.MiniItemOrBuilder)this.awardItems_.get(index); } private void initFields() { this.state_ = 0; this.awardId_ = 0; this.needValue_ = 0; this.awardItems_ = Collections.emptyList(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasState()) { this.memoizedIsInitialized = 0; return false; }  if (!hasAwardId()) { this.memoizedIsInitialized = 0; return false; }  if (!hasNeedValue()) { this.memoizedIsInitialized = 0; return false; }  for (int i = 0; i < getAwardItemsCount(); i++) { if (!getAwardItems(i).isInitialized()) { this.memoizedIsInitialized = 0; return false; }  }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.state_);  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.awardId_);  if ((this.bitField0_ & 0x4) == 4) output.writeInt32(3, this.needValue_);  for (int i = 0; i < this.awardItems_.size(); i++) output.writeMessage(4, (MessageLite)this.awardItems_.get(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.state_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.awardId_);  if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt32Size(3, this.needValue_);  for (int i = 0; i < this.awardItems_.size(); i++) size += CodedOutputStream.computeMessageSize(4, (MessageLite)this.awardItems_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static awardState parseFrom(ByteString data) throws InvalidProtocolBufferException { return (awardState)PARSER.parseFrom(data); } public static awardState parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (awardState)PARSER.parseFrom(data, extensionRegistry); } public static awardState parseFrom(byte[] data) throws InvalidProtocolBufferException { return (awardState)PARSER.parseFrom(data); } public static awardState parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (awardState)PARSER.parseFrom(data, extensionRegistry); } public static awardState parseFrom(InputStream input) throws IOException { return (awardState)PARSER.parseFrom(input); } public static awardState parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (awardState)PARSER.parseFrom(input, extensionRegistry); } public static awardState parseDelimitedFrom(InputStream input) throws IOException { return (awardState)PARSER.parseDelimitedFrom(input); } public static awardState parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (awardState)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static awardState parseFrom(CodedInputStream input) throws IOException { return (awardState)PARSER.parseFrom(input); } public static awardState parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (awardState)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(awardState prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.awardStateOrBuilder {
/*  9538 */       private int bitField0_; private int state_; private int awardId_; private int needValue_; private List<ItemOuterClass.MiniItem> awardItems_; private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> awardItemsBuilder_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_awardState_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_awardState_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.awardState.class, Builder.class); } private Builder() { this.awardItems_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.awardItems_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.awardState.alwaysUseFieldBuilders) getAwardItemsFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.state_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.awardId_ = 0; this.bitField0_ &= 0xFFFFFFFD; this.needValue_ = 0; this.bitField0_ &= 0xFFFFFFFB; if (this.awardItemsBuilder_ == null) { this.awardItems_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFF7; } else { this.awardItemsBuilder_.clear(); }  return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_awardState_descriptor; } public ActivityHandler.awardState getDefaultInstanceForType() { return ActivityHandler.awardState.getDefaultInstance(); } public ActivityHandler.awardState build() { ActivityHandler.awardState result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.awardState buildPartial() { ActivityHandler.awardState result = new ActivityHandler.awardState(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.state_ = this.state_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.awardId_ = this.awardId_; if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;  result.needValue_ = this.needValue_; if (this.awardItemsBuilder_ == null) { if ((this.bitField0_ & 0x8) == 8) { this.awardItems_ = Collections.unmodifiableList(this.awardItems_); this.bitField0_ &= 0xFFFFFFF7; }  result.awardItems_ = this.awardItems_; } else { result.awardItems_ = this.awardItemsBuilder_.build(); }  result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.awardState) return mergeFrom((ActivityHandler.awardState)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.awardState other) { if (other == ActivityHandler.awardState.getDefaultInstance()) return this;  if (other.hasState()) setState(other.getState());  if (other.hasAwardId()) setAwardId(other.getAwardId());  if (other.hasNeedValue()) setNeedValue(other.getNeedValue());  if (this.awardItemsBuilder_ == null) { if (!other.awardItems_.isEmpty()) { if (this.awardItems_.isEmpty()) { this.awardItems_ = other.awardItems_; this.bitField0_ &= 0xFFFFFFF7; } else { ensureAwardItemsIsMutable(); this.awardItems_.addAll(other.awardItems_); }  onChanged(); }  } else if (!other.awardItems_.isEmpty()) { if (this.awardItemsBuilder_.isEmpty()) { this.awardItemsBuilder_.dispose(); this.awardItemsBuilder_ = null; this.awardItems_ = other.awardItems_; this.bitField0_ &= 0xFFFFFFF7; this.awardItemsBuilder_ = ActivityHandler.awardState.alwaysUseFieldBuilders ? getAwardItemsFieldBuilder() : null; } else { this.awardItemsBuilder_.addAllMessages(other.awardItems_); }  }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasState()) return false;  if (!hasAwardId()) return false;  if (!hasNeedValue()) return false;  for (int i = 0; i < getAwardItemsCount(); i++) { if (!getAwardItems(i).isInitialized()) return false;  }  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.awardState parsedMessage = null; try { parsedMessage = (ActivityHandler.awardState)ActivityHandler.awardState.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.awardState)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasState() { return ((this.bitField0_ & 0x1) == 1); } public int getState() { return this.state_; } public Builder setState(int value) { this.bitField0_ |= 0x1; this.state_ = value; onChanged(); return this; } public Builder clearState() { this.bitField0_ &= 0xFFFFFFFE; this.state_ = 0; onChanged(); return this; } public boolean hasAwardId() { return ((this.bitField0_ & 0x2) == 2); } public int getAwardId() { return this.awardId_; } public Builder setAwardId(int value) { this.bitField0_ |= 0x2; this.awardId_ = value; onChanged(); return this; } public Builder clearAwardId() { this.bitField0_ &= 0xFFFFFFFD; this.awardId_ = 0; onChanged(); return this; } public boolean hasNeedValue() { return ((this.bitField0_ & 0x4) == 4); } public int getNeedValue() { return this.needValue_; } public Builder setNeedValue(int value) { this.bitField0_ |= 0x4; this.needValue_ = value; onChanged(); return this; } public Builder clearNeedValue() { this.bitField0_ &= 0xFFFFFFFB; this.needValue_ = 0; onChanged(); return this; } private void ensureAwardItemsIsMutable() { if ((this.bitField0_ & 0x8) != 8) { this.awardItems_ = new ArrayList<>(this.awardItems_); this.bitField0_ |= 0x8; }  } public List<ItemOuterClass.MiniItem> getAwardItemsList() { if (this.awardItemsBuilder_ == null) return Collections.unmodifiableList(this.awardItems_);  return this.awardItemsBuilder_.getMessageList(); } public int getAwardItemsCount() { if (this.awardItemsBuilder_ == null) return this.awardItems_.size();  return this.awardItemsBuilder_.getCount(); } public ItemOuterClass.MiniItem getAwardItems(int index) { if (this.awardItemsBuilder_ == null) return this.awardItems_.get(index);  return (ItemOuterClass.MiniItem)this.awardItemsBuilder_.getMessage(index); } public Builder setAwardItems(int index, ItemOuterClass.MiniItem value) { if (this.awardItemsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureAwardItemsIsMutable(); this.awardItems_.set(index, value); onChanged(); } else { this.awardItemsBuilder_.setMessage(index, (GeneratedMessage)value); }  return this; } public Builder setAwardItems(int index, ItemOuterClass.MiniItem.Builder builderForValue) { if (this.awardItemsBuilder_ == null) { ensureAwardItemsIsMutable(); this.awardItems_.set(index, builderForValue.build()); onChanged(); } else { this.awardItemsBuilder_.setMessage(index, (GeneratedMessage)builderForValue.build()); }  return this; } public Builder addAwardItems(ItemOuterClass.MiniItem value) { if (this.awardItemsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureAwardItemsIsMutable(); this.awardItems_.add(value); onChanged(); } else { this.awardItemsBuilder_.addMessage((GeneratedMessage)value); }  return this; } public Builder addAwardItems(int index, ItemOuterClass.MiniItem value) { if (this.awardItemsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureAwardItemsIsMutable(); this.awardItems_.add(index, value); onChanged(); } else { this.awardItemsBuilder_.addMessage(index, (GeneratedMessage)value); }  return this; } public Builder addAwardItems(ItemOuterClass.MiniItem.Builder builderForValue) { if (this.awardItemsBuilder_ == null) { ensureAwardItemsIsMutable(); this.awardItems_.add(builderForValue.build()); onChanged(); } else { this.awardItemsBuilder_.addMessage((GeneratedMessage)builderForValue.build()); }  return this; } public Builder addAwardItems(int index, ItemOuterClass.MiniItem.Builder builderForValue) { if (this.awardItemsBuilder_ == null) { ensureAwardItemsIsMutable(); this.awardItems_.add(index, builderForValue.build()); onChanged(); } else { this.awardItemsBuilder_.addMessage(index, (GeneratedMessage)builderForValue.build()); }  return this; } public Builder addAllAwardItems(Iterable<? extends ItemOuterClass.MiniItem> values) { if (this.awardItemsBuilder_ == null) { ensureAwardItemsIsMutable(); AbstractMessageLite.Builder.addAll(values, this.awardItems_); onChanged(); } else { this.awardItemsBuilder_.addAllMessages(values); }  return this; } public Builder clearAwardItems() { if (this.awardItemsBuilder_ == null) { this.awardItems_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFF7; onChanged(); } else { this.awardItemsBuilder_.clear(); }  return this; } public Builder removeAwardItems(int index) { if (this.awardItemsBuilder_ == null) { ensureAwardItemsIsMutable(); this.awardItems_.remove(index); onChanged(); } else { this.awardItemsBuilder_.remove(index); }  return this; } public ItemOuterClass.MiniItem.Builder getAwardItemsBuilder(int index) { return (ItemOuterClass.MiniItem.Builder)getAwardItemsFieldBuilder().getBuilder(index); } public ItemOuterClass.MiniItemOrBuilder getAwardItemsOrBuilder(int index) { if (this.awardItemsBuilder_ == null) return (ItemOuterClass.MiniItemOrBuilder)this.awardItems_.get(index);  return (ItemOuterClass.MiniItemOrBuilder)this.awardItemsBuilder_.getMessageOrBuilder(index); } public List<? extends ItemOuterClass.MiniItemOrBuilder> getAwardItemsOrBuilderList() { if (this.awardItemsBuilder_ != null) return this.awardItemsBuilder_.getMessageOrBuilderList();  return (List)Collections.unmodifiableList(this.awardItems_); } public ItemOuterClass.MiniItem.Builder addAwardItemsBuilder() { return (ItemOuterClass.MiniItem.Builder)getAwardItemsFieldBuilder().addBuilder((GeneratedMessage)ItemOuterClass.MiniItem.getDefaultInstance()); } public ItemOuterClass.MiniItem.Builder addAwardItemsBuilder(int index) { return (ItemOuterClass.MiniItem.Builder)getAwardItemsFieldBuilder().addBuilder(index, (GeneratedMessage)ItemOuterClass.MiniItem.getDefaultInstance()); } public List<ItemOuterClass.MiniItem.Builder> getAwardItemsBuilderList() { return getAwardItemsFieldBuilder().getBuilderList(); } private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> getAwardItemsFieldBuilder() { if (this.awardItemsBuilder_ == null) { this.awardItemsBuilder_ = new RepeatedFieldBuilder(this.awardItems_, ((this.bitField0_ & 0x8) == 8), getParentForChildren(), isClean()); this.awardItems_ = null; }  return this.awardItemsBuilder_; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class awardSevenDay
/*       */     extends GeneratedMessage
/*       */     implements awardSevenDayOrBuilder
/*       */   {
/* 10887 */     private static final awardSevenDay defaultInstance = new awardSevenDay(true); private final UnknownFieldSet unknownFields; private awardSevenDay(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private awardSevenDay(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static awardSevenDay getDefaultInstance() { return defaultInstance; } public awardSevenDay getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private awardSevenDay(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.state_ = input.readInt32(); break;case 16: this.bitField0_ |= 0x2; this.awardId_ = input.readInt32(); break;case 24: this.bitField0_ |= 0x4; this.currNum_ = input.readInt32(); break;case 32: this.bitField0_ |= 0x8; this.needNum_ = input.readInt32(); break;case 42: bs = input.readBytes(); this.bitField0_ |= 0x10; this.condition_ = bs; break;case 48: this.bitField0_ |= 0x20; this.conValue_ = input.readInt32(); break;case 58: if ((mutable_bitField0_ & 0x40) != 64) { this.awardItems_ = new ArrayList<>(); mutable_bitField0_ |= 0x40; }  this.awardItems_.add(input.readMessage(ItemOuterClass.MiniItem.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x40) == 64) this.awardItems_ = Collections.unmodifiableList(this.awardItems_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_awardSevenDay_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_awardSevenDay_fieldAccessorTable.ensureFieldAccessorsInitialized(awardSevenDay.class, Builder.class); } public static Parser<awardSevenDay> PARSER = (Parser<awardSevenDay>)new AbstractParser<awardSevenDay>() { public ActivityHandler.awardSevenDay parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.awardSevenDay(input, extensionRegistry); } }
/* 10888 */     ; private int bitField0_; public static final int STATE_FIELD_NUMBER = 1; private int state_; public static final int AWARDID_FIELD_NUMBER = 2; private int awardId_; public static final int CURRNUM_FIELD_NUMBER = 3; private int currNum_; public static final int NEEDNUM_FIELD_NUMBER = 4; private int needNum_; public static final int CONDITION_FIELD_NUMBER = 5; private Object condition_; public static final int CONVALUE_FIELD_NUMBER = 6; private int conValue_; public static final int AWARDITEMS_FIELD_NUMBER = 7; private List<ItemOuterClass.MiniItem> awardItems_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<awardSevenDay> getParserForType() { return PARSER; } public boolean hasState() { return ((this.bitField0_ & 0x1) == 1); } public int getState() { return this.state_; } public boolean hasAwardId() { return ((this.bitField0_ & 0x2) == 2); } public int getAwardId() { return this.awardId_; } public boolean hasCurrNum() { return ((this.bitField0_ & 0x4) == 4); } static { defaultInstance.initFields(); }
/*       */ 
/*       */     
/*       */     public int getCurrNum() {
/*       */       return this.currNum_;
/*       */     }
/*       */     
/*       */     public boolean hasNeedNum() {
/*       */       return ((this.bitField0_ & 0x8) == 8);
/*       */     }
/*       */     
/*       */     public int getNeedNum() {
/*       */       return this.needNum_;
/*       */     }
/*       */     
/*       */     public boolean hasCondition() {
/*       */       return ((this.bitField0_ & 0x10) == 16);
/*       */     }
/*       */     
/*       */     public String getCondition() {
/*       */       Object ref = this.condition_;
/*       */       if (ref instanceof String) {
/*       */         return (String)ref;
/*       */       }
/*       */       ByteString bs = (ByteString)ref;
/*       */       String s = bs.toStringUtf8();
/*       */       if (bs.isValidUtf8()) {
/*       */         this.condition_ = s;
/*       */       }
/*       */       return s;
/*       */     }
/*       */     
/*       */     public ByteString getConditionBytes() {
/*       */       Object ref = this.condition_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.condition_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref;
/*       */     }
/*       */     
/*       */     public boolean hasConValue() {
/*       */       return ((this.bitField0_ & 0x20) == 32);
/*       */     }
/*       */     
/*       */     public int getConValue() {
/*       */       return this.conValue_;
/*       */     }
/*       */     
/*       */     public List<ItemOuterClass.MiniItem> getAwardItemsList() {
/*       */       return this.awardItems_;
/*       */     }
/*       */     
/*       */     public List<? extends ItemOuterClass.MiniItemOrBuilder> getAwardItemsOrBuilderList() {
/*       */       return (List)this.awardItems_;
/*       */     }
/*       */     
/*       */     public int getAwardItemsCount() {
/*       */       return this.awardItems_.size();
/*       */     }
/*       */     
/*       */     public ItemOuterClass.MiniItem getAwardItems(int index) {
/*       */       return this.awardItems_.get(index);
/*       */     }
/*       */     
/*       */     public ItemOuterClass.MiniItemOrBuilder getAwardItemsOrBuilder(int index) {
/*       */       return (ItemOuterClass.MiniItemOrBuilder)this.awardItems_.get(index);
/*       */     }
/*       */     
/*       */     private void initFields() {
/*       */       this.state_ = 0;
/*       */       this.awardId_ = 0;
/*       */       this.currNum_ = 0;
/*       */       this.needNum_ = 0;
/*       */       this.condition_ = "";
/*       */       this.conValue_ = 0;
/*       */       this.awardItems_ = Collections.emptyList();
/*       */     }
/*       */     
/*       */     public final boolean isInitialized() {
/*       */       byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1) {
/*       */         return true;
/*       */       }
/*       */       if (isInitialized == 0) {
/*       */         return false;
/*       */       }
/*       */       if (!hasState()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasAwardId()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasCurrNum()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasNeedNum()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasCondition()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasConValue()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       for (int i = 0; i < getAwardItemsCount(); i++) {
/*       */         if (!getAwardItems(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0;
/*       */           return false;
/*       */         } 
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true;
/*       */     }
/*       */     
/*       */     public void writeTo(CodedOutputStream output) throws IOException {
/*       */       getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         output.writeInt32(1, this.state_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         output.writeInt32(2, this.awardId_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x4) == 4) {
/*       */         output.writeInt32(3, this.currNum_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x8) == 8) {
/*       */         output.writeInt32(4, this.needNum_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x10) == 16) {
/*       */         output.writeBytes(5, getConditionBytes());
/*       */       }
/*       */       if ((this.bitField0_ & 0x20) == 32) {
/*       */         output.writeInt32(6, this.conValue_);
/*       */       }
/*       */       for (int i = 0; i < this.awardItems_.size(); i++) {
/*       */         output.writeMessage(7, (MessageLite)this.awardItems_.get(i));
/*       */       }
/*       */       getUnknownFields().writeTo(output);
/*       */     }
/*       */     
/*       */     public int getSerializedSize() {
/*       */       int size = this.memoizedSerializedSize;
/*       */       if (size != -1) {
/*       */         return size;
/*       */       }
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         size += CodedOutputStream.computeInt32Size(1, this.state_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         size += CodedOutputStream.computeInt32Size(2, this.awardId_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x4) == 4) {
/*       */         size += CodedOutputStream.computeInt32Size(3, this.currNum_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x8) == 8) {
/*       */         size += CodedOutputStream.computeInt32Size(4, this.needNum_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x10) == 16) {
/*       */         size += CodedOutputStream.computeBytesSize(5, getConditionBytes());
/*       */       }
/*       */       if ((this.bitField0_ & 0x20) == 32) {
/*       */         size += CodedOutputStream.computeInt32Size(6, this.conValue_);
/*       */       }
/*       */       for (int i = 0; i < this.awardItems_.size(); i++) {
/*       */         size += CodedOutputStream.computeMessageSize(7, (MessageLite)this.awardItems_.get(i));
/*       */       }
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size;
/*       */     }
/*       */     
/*       */     protected Object writeReplace() throws ObjectStreamException {
/*       */       return super.writeReplace();
/*       */     }
/*       */     
/*       */     public static awardSevenDay parseFrom(ByteString data) throws InvalidProtocolBufferException {
/*       */       return (awardSevenDay)PARSER.parseFrom(data);
/*       */     }
/*       */     
/*       */     public static awardSevenDay parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (awardSevenDay)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */     
/*       */     public static awardSevenDay parseFrom(byte[] data) throws InvalidProtocolBufferException {
/*       */       return (awardSevenDay)PARSER.parseFrom(data);
/*       */     }
/*       */     
/*       */     public static awardSevenDay parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (awardSevenDay)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */     
/*       */     public static awardSevenDay parseFrom(InputStream input) throws IOException {
/*       */       return (awardSevenDay)PARSER.parseFrom(input);
/*       */     }
/*       */     
/*       */     public static awardSevenDay parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (awardSevenDay)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */     
/*       */     public static awardSevenDay parseDelimitedFrom(InputStream input) throws IOException {
/*       */       return (awardSevenDay)PARSER.parseDelimitedFrom(input);
/*       */     }
/*       */     
/*       */     public static awardSevenDay parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (awardSevenDay)PARSER.parseDelimitedFrom(input, extensionRegistry);
/*       */     }
/*       */     
/*       */     public static awardSevenDay parseFrom(CodedInputStream input) throws IOException {
/*       */       return (awardSevenDay)PARSER.parseFrom(input);
/*       */     }
/*       */     
/*       */     public static awardSevenDay parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (awardSevenDay)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */     
/*       */     public static Builder newBuilder() {
/*       */       return Builder.create();
/*       */     }
/*       */     
/*       */     public Builder newBuilderForType() {
/*       */       return newBuilder();
/*       */     }
/*       */     
/*       */     public static Builder newBuilder(awardSevenDay prototype) {
/*       */       return newBuilder().mergeFrom(prototype);
/*       */     }
/*       */     
/*       */     public Builder toBuilder() {
/*       */       return newBuilder(this);
/*       */     }
/*       */     
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
/*       */       Builder builder = new Builder(parent);
/*       */       return builder;
/*       */     }
/*       */     
/*       */     public static final class Builder
/*       */       extends GeneratedMessage.Builder<Builder>
/*       */       implements ActivityHandler.awardSevenDayOrBuilder
/*       */     {
/*       */       private int bitField0_;
/*       */       private int state_;
/*       */       private int awardId_;
/*       */       private int currNum_;
/*       */       private int needNum_;
/*       */       private Object condition_;
/*       */       private int conValue_;
/*       */       private List<ItemOuterClass.MiniItem> awardItems_;
/*       */       private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> awardItemsBuilder_;
/*       */       
/*       */       public static final Descriptors.Descriptor getDescriptor() {
/*       */         return ActivityHandler.internal_static_pomelo_area_awardSevenDay_descriptor;
/*       */       }
/*       */       
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */         return ActivityHandler.internal_static_pomelo_area_awardSevenDay_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.awardSevenDay.class, Builder.class);
/*       */       }
/*       */       
/*       */       private Builder() {
/*       */         this.condition_ = "";
/*       */         this.awardItems_ = Collections.emptyList();
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */       
/*       */       private Builder(GeneratedMessage.BuilderParent parent) {
/*       */         super(parent);
/*       */         this.condition_ = "";
/*       */         this.awardItems_ = Collections.emptyList();
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */       
/*       */       private void maybeForceBuilderInitialization() {
/*       */         if (ActivityHandler.awardSevenDay.alwaysUseFieldBuilders) {
/*       */           getAwardItemsFieldBuilder();
/*       */         }
/*       */       }
/*       */       
/*       */       private static Builder create() {
/*       */         return new Builder();
/*       */       }
/*       */       
/*       */       public Builder clear() {
/*       */         super.clear();
/*       */         this.state_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.awardId_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.currNum_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.needNum_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.condition_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.conValue_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFDF;
/*       */         if (this.awardItemsBuilder_ == null) {
/*       */           this.awardItems_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFBF;
/*       */         } else {
/*       */           this.awardItemsBuilder_.clear();
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clone() {
/*       */         return create().mergeFrom(buildPartial());
/*       */       }
/*       */       
/*       */       public Descriptors.Descriptor getDescriptorForType() {
/*       */         return ActivityHandler.internal_static_pomelo_area_awardSevenDay_descriptor;
/*       */       }
/*       */       
/*       */       public ActivityHandler.awardSevenDay getDefaultInstanceForType() {
/*       */         return ActivityHandler.awardSevenDay.getDefaultInstance();
/*       */       }
/*       */       
/*       */       public ActivityHandler.awardSevenDay build() {
/*       */         ActivityHandler.awardSevenDay result = buildPartial();
/*       */         if (!result.isInitialized()) {
/*       */           throw newUninitializedMessageException(result);
/*       */         }
/*       */         return result;
/*       */       }
/*       */       
/*       */       public ActivityHandler.awardSevenDay buildPartial() {
/*       */         ActivityHandler.awardSevenDay result = new ActivityHandler.awardSevenDay(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1) {
/*       */           to_bitField0_ |= 0x1;
/*       */         }
/*       */         result.state_ = this.state_;
/*       */         if ((from_bitField0_ & 0x2) == 2) {
/*       */           to_bitField0_ |= 0x2;
/*       */         }
/*       */         result.awardId_ = this.awardId_;
/*       */         if ((from_bitField0_ & 0x4) == 4)
/*       */           to_bitField0_ |= 0x4; 
/*       */         result.currNum_ = this.currNum_;
/*       */         if ((from_bitField0_ & 0x8) == 8)
/*       */           to_bitField0_ |= 0x8; 
/*       */         result.needNum_ = this.needNum_;
/*       */         if ((from_bitField0_ & 0x10) == 16)
/*       */           to_bitField0_ |= 0x10; 
/*       */         result.condition_ = this.condition_;
/*       */         if ((from_bitField0_ & 0x20) == 32)
/*       */           to_bitField0_ |= 0x20; 
/*       */         result.conValue_ = this.conValue_;
/*       */         if (this.awardItemsBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x40) == 64) {
/*       */             this.awardItems_ = Collections.unmodifiableList(this.awardItems_);
/*       */             this.bitField0_ &= 0xFFFFFFBF;
/*       */           } 
/*       */           result.awardItems_ = this.awardItems_;
/*       */         } else {
/*       */           result.awardItems_ = this.awardItemsBuilder_.build();
/*       */         } 
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result;
/*       */       }
/*       */       
/*       */       public Builder mergeFrom(Message other) {
/*       */         if (other instanceof ActivityHandler.awardSevenDay)
/*       */           return mergeFrom((ActivityHandler.awardSevenDay)other); 
/*       */         super.mergeFrom(other);
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder mergeFrom(ActivityHandler.awardSevenDay other) {
/*       */         if (other == ActivityHandler.awardSevenDay.getDefaultInstance())
/*       */           return this; 
/*       */         if (other.hasState())
/*       */           setState(other.getState()); 
/*       */         if (other.hasAwardId())
/*       */           setAwardId(other.getAwardId()); 
/*       */         if (other.hasCurrNum())
/*       */           setCurrNum(other.getCurrNum()); 
/*       */         if (other.hasNeedNum())
/*       */           setNeedNum(other.getNeedNum()); 
/*       */         if (other.hasCondition()) {
/*       */           this.bitField0_ |= 0x10;
/*       */           this.condition_ = other.condition_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasConValue())
/*       */           setConValue(other.getConValue()); 
/*       */         if (this.awardItemsBuilder_ == null) {
/*       */           if (!other.awardItems_.isEmpty()) {
/*       */             if (this.awardItems_.isEmpty()) {
/*       */               this.awardItems_ = other.awardItems_;
/*       */               this.bitField0_ &= 0xFFFFFFBF;
/*       */             } else {
/*       */               ensureAwardItemsIsMutable();
/*       */               this.awardItems_.addAll(other.awardItems_);
/*       */             } 
/*       */             onChanged();
/*       */           } 
/*       */         } else if (!other.awardItems_.isEmpty()) {
/*       */           if (this.awardItemsBuilder_.isEmpty()) {
/*       */             this.awardItemsBuilder_.dispose();
/*       */             this.awardItemsBuilder_ = null;
/*       */             this.awardItems_ = other.awardItems_;
/*       */             this.bitField0_ &= 0xFFFFFFBF;
/*       */             this.awardItemsBuilder_ = ActivityHandler.awardSevenDay.alwaysUseFieldBuilders ? getAwardItemsFieldBuilder() : null;
/*       */           } else {
/*       */             this.awardItemsBuilder_.addAllMessages(other.awardItems_);
/*       */           } 
/*       */         } 
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this;
/*       */       }
/*       */       
/*       */       public final boolean isInitialized() {
/*       */         if (!hasState())
/*       */           return false; 
/*       */         if (!hasAwardId())
/*       */           return false; 
/*       */         if (!hasCurrNum())
/*       */           return false; 
/*       */         if (!hasNeedNum())
/*       */           return false; 
/*       */         if (!hasCondition())
/*       */           return false; 
/*       */         if (!hasConValue())
/*       */           return false; 
/*       */         for (int i = 0; i < getAwardItemsCount(); i++) {
/*       */           if (!getAwardItems(i).isInitialized())
/*       */             return false; 
/*       */         } 
/*       */         return true;
/*       */       }
/*       */       
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */         ActivityHandler.awardSevenDay parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (ActivityHandler.awardSevenDay)ActivityHandler.awardSevenDay.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (ActivityHandler.awardSevenDay)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null)
/*       */             mergeFrom(parsedMessage); 
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public boolean hasState() {
/*       */         return ((this.bitField0_ & 0x1) == 1);
/*       */       }
/*       */       
/*       */       public int getState() {
/*       */         return this.state_;
/*       */       }
/*       */       
/*       */       public Builder setState(int value) {
/*       */         this.bitField0_ |= 0x1;
/*       */         this.state_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearState() {
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.state_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public boolean hasAwardId() {
/*       */         return ((this.bitField0_ & 0x2) == 2);
/*       */       }
/*       */       
/*       */       public int getAwardId() {
/*       */         return this.awardId_;
/*       */       }
/*       */       
/*       */       public Builder setAwardId(int value) {
/*       */         this.bitField0_ |= 0x2;
/*       */         this.awardId_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearAwardId() {
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.awardId_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public boolean hasCurrNum() {
/*       */         return ((this.bitField0_ & 0x4) == 4);
/*       */       }
/*       */       
/*       */       public int getCurrNum() {
/*       */         return this.currNum_;
/*       */       }
/*       */       
/*       */       public Builder setCurrNum(int value) {
/*       */         this.bitField0_ |= 0x4;
/*       */         this.currNum_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearCurrNum() {
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.currNum_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public boolean hasNeedNum() {
/*       */         return ((this.bitField0_ & 0x8) == 8);
/*       */       }
/*       */       
/*       */       public int getNeedNum() {
/*       */         return this.needNum_;
/*       */       }
/*       */       
/*       */       public Builder setNeedNum(int value) {
/*       */         this.bitField0_ |= 0x8;
/*       */         this.needNum_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearNeedNum() {
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.needNum_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public boolean hasCondition() {
/*       */         return ((this.bitField0_ & 0x10) == 16);
/*       */       }
/*       */       
/*       */       public String getCondition() {
/*       */         Object ref = this.condition_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.condition_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */       
/*       */       public ByteString getConditionBytes() {
/*       */         Object ref = this.condition_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.condition_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */       
/*       */       public Builder setCondition(String value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x10;
/*       */         this.condition_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearCondition() {
/*       */         this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.condition_ = ActivityHandler.awardSevenDay.getDefaultInstance().getCondition();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder setConditionBytes(ByteString value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x10;
/*       */         this.condition_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public boolean hasConValue() {
/*       */         return ((this.bitField0_ & 0x20) == 32);
/*       */       }
/*       */       
/*       */       public int getConValue() {
/*       */         return this.conValue_;
/*       */       }
/*       */       
/*       */       public Builder setConValue(int value) {
/*       */         this.bitField0_ |= 0x20;
/*       */         this.conValue_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearConValue() {
/*       */         this.bitField0_ &= 0xFFFFFFDF;
/*       */         this.conValue_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       private void ensureAwardItemsIsMutable() {
/*       */         if ((this.bitField0_ & 0x40) != 64) {
/*       */           this.awardItems_ = new ArrayList<>(this.awardItems_);
/*       */           this.bitField0_ |= 0x40;
/*       */         } 
/*       */       }
/*       */       
/*       */       public List<ItemOuterClass.MiniItem> getAwardItemsList() {
/*       */         if (this.awardItemsBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.awardItems_); 
/*       */         return this.awardItemsBuilder_.getMessageList();
/*       */       }
/*       */       
/*       */       public int getAwardItemsCount() {
/*       */         if (this.awardItemsBuilder_ == null)
/*       */           return this.awardItems_.size(); 
/*       */         return this.awardItemsBuilder_.getCount();
/*       */       }
/*       */       
/*       */       public ItemOuterClass.MiniItem getAwardItems(int index) {
/*       */         if (this.awardItemsBuilder_ == null)
/*       */           return this.awardItems_.get(index); 
/*       */         return (ItemOuterClass.MiniItem)this.awardItemsBuilder_.getMessage(index);
/*       */       }
/*       */       
/*       */       public Builder setAwardItems(int index, ItemOuterClass.MiniItem value) {
/*       */         if (this.awardItemsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureAwardItemsIsMutable();
/*       */           this.awardItems_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.awardItemsBuilder_.setMessage(index, (GeneratedMessage)value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder setAwardItems(int index, ItemOuterClass.MiniItem.Builder builderForValue) {
/*       */         if (this.awardItemsBuilder_ == null) {
/*       */           ensureAwardItemsIsMutable();
/*       */           this.awardItems_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.awardItemsBuilder_.setMessage(index, (GeneratedMessage)builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder addAwardItems(ItemOuterClass.MiniItem value) {
/*       */         if (this.awardItemsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureAwardItemsIsMutable();
/*       */           this.awardItems_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.awardItemsBuilder_.addMessage((GeneratedMessage)value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder addAwardItems(int index, ItemOuterClass.MiniItem value) {
/*       */         if (this.awardItemsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureAwardItemsIsMutable();
/*       */           this.awardItems_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.awardItemsBuilder_.addMessage(index, (GeneratedMessage)value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder addAwardItems(ItemOuterClass.MiniItem.Builder builderForValue) {
/*       */         if (this.awardItemsBuilder_ == null) {
/*       */           ensureAwardItemsIsMutable();
/*       */           this.awardItems_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.awardItemsBuilder_.addMessage((GeneratedMessage)builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder addAwardItems(int index, ItemOuterClass.MiniItem.Builder builderForValue) {
/*       */         if (this.awardItemsBuilder_ == null) {
/*       */           ensureAwardItemsIsMutable();
/*       */           this.awardItems_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.awardItemsBuilder_.addMessage(index, (GeneratedMessage)builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder addAllAwardItems(Iterable<? extends ItemOuterClass.MiniItem> values) {
/*       */         if (this.awardItemsBuilder_ == null) {
/*       */           ensureAwardItemsIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.awardItems_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.awardItemsBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearAwardItems() {
/*       */         if (this.awardItemsBuilder_ == null) {
/*       */           this.awardItems_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFBF;
/*       */           onChanged();
/*       */         } else {
/*       */           this.awardItemsBuilder_.clear();
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder removeAwardItems(int index) {
/*       */         if (this.awardItemsBuilder_ == null) {
/*       */           ensureAwardItemsIsMutable();
/*       */           this.awardItems_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.awardItemsBuilder_.remove(index);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public ItemOuterClass.MiniItem.Builder getAwardItemsBuilder(int index) {
/*       */         return (ItemOuterClass.MiniItem.Builder)getAwardItemsFieldBuilder().getBuilder(index);
/*       */       }
/*       */       
/*       */       public ItemOuterClass.MiniItemOrBuilder getAwardItemsOrBuilder(int index) {
/*       */         if (this.awardItemsBuilder_ == null)
/*       */           return (ItemOuterClass.MiniItemOrBuilder)this.awardItems_.get(index); 
/*       */         return (ItemOuterClass.MiniItemOrBuilder)this.awardItemsBuilder_.getMessageOrBuilder(index);
/*       */       }
/*       */       
/*       */       public List<? extends ItemOuterClass.MiniItemOrBuilder> getAwardItemsOrBuilderList() {
/*       */         if (this.awardItemsBuilder_ != null)
/*       */           return this.awardItemsBuilder_.getMessageOrBuilderList(); 
/*       */         return (List)Collections.unmodifiableList(this.awardItems_);
/*       */       }
/*       */       
/*       */       public ItemOuterClass.MiniItem.Builder addAwardItemsBuilder() {
/*       */         return (ItemOuterClass.MiniItem.Builder)getAwardItemsFieldBuilder().addBuilder((GeneratedMessage)ItemOuterClass.MiniItem.getDefaultInstance());
/*       */       }
/*       */       
/*       */       public ItemOuterClass.MiniItem.Builder addAwardItemsBuilder(int index) {
/*       */         return (ItemOuterClass.MiniItem.Builder)getAwardItemsFieldBuilder().addBuilder(index, (GeneratedMessage)ItemOuterClass.MiniItem.getDefaultInstance());
/*       */       }
/*       */       
/*       */       public List<ItemOuterClass.MiniItem.Builder> getAwardItemsBuilderList() {
/*       */         return getAwardItemsFieldBuilder().getBuilderList();
/*       */       }
/*       */       
/*       */       private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> getAwardItemsFieldBuilder() {
/*       */         if (this.awardItemsBuilder_ == null) {
/*       */           this.awardItemsBuilder_ = new RepeatedFieldBuilder(this.awardItems_, ((this.bitField0_ & 0x40) == 64), getParentForChildren(), isClean());
/*       */           this.awardItems_ = null;
/*       */         } 
/*       */         return this.awardItemsBuilder_;
/*       */       }
/*       */     }
/*       */   }
/*       */   
/*       */   public static final class openFundsAward
/*       */     extends GeneratedMessage
/*       */     implements openFundsAwardOrBuilder
/*       */   {
/* 11677 */     private static final openFundsAward defaultInstance = new openFundsAward(true); private final UnknownFieldSet unknownFields; private openFundsAward(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private openFundsAward(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static openFundsAward getDefaultInstance() { return defaultInstance; } public openFundsAward getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private openFundsAward(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ActivityHandler.awardState.Builder subBuilder; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: subBuilder = null; if ((this.bitField0_ & 0x1) == 1) subBuilder = this.award_.toBuilder();  this.award_ = (ActivityHandler.awardState)input.readMessage(ActivityHandler.awardState.PARSER, extensionRegistry); if (subBuilder != null) { subBuilder.mergeFrom(this.award_); this.award_ = subBuilder.buildPartial(); }  this.bitField0_ |= 0x1; break;case 16: this.bitField0_ |= 0x2; this.type_ = input.readInt32(); break;case 24: this.bitField0_ |= 0x4; this.value_ = input.readInt32(); break;case 32: this.bitField0_ |= 0x8; this.diamond_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_openFundsAward_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_openFundsAward_fieldAccessorTable.ensureFieldAccessorsInitialized(openFundsAward.class, Builder.class); } public static Parser<openFundsAward> PARSER = (Parser<openFundsAward>)new AbstractParser<openFundsAward>() { public ActivityHandler.openFundsAward parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.openFundsAward(input, extensionRegistry); } }; private int bitField0_; public static final int AWARD_FIELD_NUMBER = 1; private ActivityHandler.awardState award_; public static final int TYPE_FIELD_NUMBER = 2; private int type_; public static final int VALUE_FIELD_NUMBER = 3; private int value_; public static final int DIAMOND_FIELD_NUMBER = 4; private int diamond_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<openFundsAward> getParserForType() { return PARSER; } public boolean hasAward() { return ((this.bitField0_ & 0x1) == 1); } public ActivityHandler.awardState getAward() { return this.award_; } public ActivityHandler.awardStateOrBuilder getAwardOrBuilder() { return this.award_; } public boolean hasType() { return ((this.bitField0_ & 0x2) == 2); } public int getType() { return this.type_; } public boolean hasValue() { return ((this.bitField0_ & 0x4) == 4); } public int getValue() { return this.value_; } public boolean hasDiamond() { return ((this.bitField0_ & 0x8) == 8); } public int getDiamond() { return this.diamond_; } private void initFields() { this.award_ = ActivityHandler.awardState.getDefaultInstance(); this.type_ = 0; this.value_ = 0; this.diamond_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasAward()) { this.memoizedIsInitialized = 0; return false; }  if (!getAward().isInitialized()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeMessage(1, (MessageLite)this.award_);  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.type_);  if ((this.bitField0_ & 0x4) == 4) output.writeInt32(3, this.value_);  if ((this.bitField0_ & 0x8) == 8) output.writeInt32(4, this.diamond_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeMessageSize(1, (MessageLite)this.award_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.type_);  if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt32Size(3, this.value_);  if ((this.bitField0_ & 0x8) == 8) size += CodedOutputStream.computeInt32Size(4, this.diamond_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static openFundsAward parseFrom(ByteString data) throws InvalidProtocolBufferException { return (openFundsAward)PARSER.parseFrom(data); } public static openFundsAward parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (openFundsAward)PARSER.parseFrom(data, extensionRegistry); } public static openFundsAward parseFrom(byte[] data) throws InvalidProtocolBufferException { return (openFundsAward)PARSER.parseFrom(data); } public static openFundsAward parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (openFundsAward)PARSER.parseFrom(data, extensionRegistry); } public static openFundsAward parseFrom(InputStream input) throws IOException { return (openFundsAward)PARSER.parseFrom(input); } public static openFundsAward parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (openFundsAward)PARSER.parseFrom(input, extensionRegistry); } public static openFundsAward parseDelimitedFrom(InputStream input) throws IOException { return (openFundsAward)PARSER.parseDelimitedFrom(input); } public static openFundsAward parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (openFundsAward)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static openFundsAward parseFrom(CodedInputStream input) throws IOException { return (openFundsAward)PARSER.parseFrom(input); } public static openFundsAward parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (openFundsAward)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(openFundsAward prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.openFundsAwardOrBuilder {
/* 11678 */       private int bitField0_; private ActivityHandler.awardState award_; private SingleFieldBuilder<ActivityHandler.awardState, ActivityHandler.awardState.Builder, ActivityHandler.awardStateOrBuilder> awardBuilder_; private int type_; private int value_; private int diamond_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_openFundsAward_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_openFundsAward_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.openFundsAward.class, Builder.class); } private Builder() { this.award_ = ActivityHandler.awardState.getDefaultInstance(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.award_ = ActivityHandler.awardState.getDefaultInstance(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.openFundsAward.alwaysUseFieldBuilders) getAwardFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); if (this.awardBuilder_ == null) { this.award_ = ActivityHandler.awardState.getDefaultInstance(); } else { this.awardBuilder_.clear(); }  this.bitField0_ &= 0xFFFFFFFE; this.type_ = 0; this.bitField0_ &= 0xFFFFFFFD; this.value_ = 0; this.bitField0_ &= 0xFFFFFFFB; this.diamond_ = 0; this.bitField0_ &= 0xFFFFFFF7; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_openFundsAward_descriptor; } public ActivityHandler.openFundsAward getDefaultInstanceForType() { return ActivityHandler.openFundsAward.getDefaultInstance(); } public ActivityHandler.openFundsAward build() { ActivityHandler.openFundsAward result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.openFundsAward buildPartial() { ActivityHandler.openFundsAward result = new ActivityHandler.openFundsAward(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  if (this.awardBuilder_ == null) { result.award_ = this.award_; } else { result.award_ = (ActivityHandler.awardState)this.awardBuilder_.build(); }  if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.type_ = this.type_; if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;  result.value_ = this.value_; if ((from_bitField0_ & 0x8) == 8) to_bitField0_ |= 0x8;  result.diamond_ = this.diamond_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.openFundsAward) return mergeFrom((ActivityHandler.openFundsAward)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.openFundsAward other) { if (other == ActivityHandler.openFundsAward.getDefaultInstance()) return this;  if (other.hasAward()) mergeAward(other.getAward());  if (other.hasType()) setType(other.getType());  if (other.hasValue()) setValue(other.getValue());  if (other.hasDiamond()) setDiamond(other.getDiamond());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasAward()) return false;  if (!getAward().isInitialized()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.openFundsAward parsedMessage = null; try { parsedMessage = (ActivityHandler.openFundsAward)ActivityHandler.openFundsAward.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.openFundsAward)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasAward() { return ((this.bitField0_ & 0x1) == 1); } public ActivityHandler.awardState getAward() { if (this.awardBuilder_ == null) return this.award_;  return (ActivityHandler.awardState)this.awardBuilder_.getMessage(); } public Builder setAward(ActivityHandler.awardState value) { if (this.awardBuilder_ == null) { if (value == null) throw new NullPointerException();  this.award_ = value; onChanged(); } else { this.awardBuilder_.setMessage(value); }  this.bitField0_ |= 0x1; return this; } public Builder setAward(ActivityHandler.awardState.Builder builderForValue) { if (this.awardBuilder_ == null) { this.award_ = builderForValue.build(); onChanged(); } else { this.awardBuilder_.setMessage(builderForValue.build()); }  this.bitField0_ |= 0x1; return this; } public Builder mergeAward(ActivityHandler.awardState value) { if (this.awardBuilder_ == null) { if ((this.bitField0_ & 0x1) == 1 && this.award_ != ActivityHandler.awardState.getDefaultInstance()) { this.award_ = ActivityHandler.awardState.newBuilder(this.award_).mergeFrom(value).buildPartial(); } else { this.award_ = value; }  onChanged(); } else { this.awardBuilder_.mergeFrom(value); }  this.bitField0_ |= 0x1; return this; } public Builder clearAward() { if (this.awardBuilder_ == null) { this.award_ = ActivityHandler.awardState.getDefaultInstance(); onChanged(); } else { this.awardBuilder_.clear(); }  this.bitField0_ &= 0xFFFFFFFE; return this; } public ActivityHandler.awardState.Builder getAwardBuilder() { this.bitField0_ |= 0x1; onChanged(); return (ActivityHandler.awardState.Builder)getAwardFieldBuilder().getBuilder(); } public ActivityHandler.awardStateOrBuilder getAwardOrBuilder() { if (this.awardBuilder_ != null) return (ActivityHandler.awardStateOrBuilder)this.awardBuilder_.getMessageOrBuilder();  return this.award_; } private SingleFieldBuilder<ActivityHandler.awardState, ActivityHandler.awardState.Builder, ActivityHandler.awardStateOrBuilder> getAwardFieldBuilder() { if (this.awardBuilder_ == null) { this.awardBuilder_ = new SingleFieldBuilder(getAward(), getParentForChildren(), isClean()); this.award_ = null; }  return this.awardBuilder_; } public boolean hasType() { return ((this.bitField0_ & 0x2) == 2); } public int getType() { return this.type_; } public Builder setType(int value) { this.bitField0_ |= 0x2; this.type_ = value; onChanged(); return this; } public Builder clearType() { this.bitField0_ &= 0xFFFFFFFD; this.type_ = 0; onChanged(); return this; } public boolean hasValue() { return ((this.bitField0_ & 0x4) == 4); } public int getValue() { return this.value_; } public Builder setValue(int value) { this.bitField0_ |= 0x4; this.value_ = value; onChanged(); return this; } public Builder clearValue() { this.bitField0_ &= 0xFFFFFFFB; this.value_ = 0; onChanged(); return this; } public boolean hasDiamond() { return ((this.bitField0_ & 0x8) == 8); } public int getDiamond() { return this.diamond_; } public Builder setDiamond(int value) { this.bitField0_ |= 0x8; this.diamond_ = value; onChanged(); return this; } public Builder clearDiamond() { this.bitField0_ &= 0xFFFFFFF7; this.diamond_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class PayTotalRequest
/*       */     extends GeneratedMessage
/*       */     implements PayTotalRequestOrBuilder
/*       */   {
/* 11990 */     private static final PayTotalRequest defaultInstance = new PayTotalRequest(true); private final UnknownFieldSet unknownFields; private PayTotalRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private PayTotalRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static PayTotalRequest getDefaultInstance() { return defaultInstance; } public PayTotalRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private PayTotalRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_PayTotalRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_PayTotalRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PayTotalRequest.class, Builder.class); } public static Parser<PayTotalRequest> PARSER = (Parser<PayTotalRequest>)new AbstractParser<PayTotalRequest>() { public ActivityHandler.PayTotalRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.PayTotalRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<PayTotalRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static PayTotalRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (PayTotalRequest)PARSER.parseFrom(data); } public static PayTotalRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PayTotalRequest)PARSER.parseFrom(data, extensionRegistry); } public static PayTotalRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (PayTotalRequest)PARSER.parseFrom(data); } public static PayTotalRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PayTotalRequest)PARSER.parseFrom(data, extensionRegistry); } public static PayTotalRequest parseFrom(InputStream input) throws IOException { return (PayTotalRequest)PARSER.parseFrom(input); } public static PayTotalRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PayTotalRequest)PARSER.parseFrom(input, extensionRegistry); } public static PayTotalRequest parseDelimitedFrom(InputStream input) throws IOException { return (PayTotalRequest)PARSER.parseDelimitedFrom(input); } public static PayTotalRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PayTotalRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static PayTotalRequest parseFrom(CodedInputStream input) throws IOException { return (PayTotalRequest)PARSER.parseFrom(input); } public static PayTotalRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PayTotalRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(PayTotalRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.PayTotalRequestOrBuilder {
/* 11991 */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_PayTotalRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_PayTotalRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.PayTotalRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.PayTotalRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_PayTotalRequest_descriptor; } public ActivityHandler.PayTotalRequest getDefaultInstanceForType() { return ActivityHandler.PayTotalRequest.getDefaultInstance(); } public ActivityHandler.PayTotalRequest build() { ActivityHandler.PayTotalRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.PayTotalRequest buildPartial() { ActivityHandler.PayTotalRequest result = new ActivityHandler.PayTotalRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.PayTotalRequest) return mergeFrom((ActivityHandler.PayTotalRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.PayTotalRequest other) { if (other == ActivityHandler.PayTotalRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.PayTotalRequest parsedMessage = null; try { parsedMessage = (ActivityHandler.PayTotalRequest)ActivityHandler.PayTotalRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.PayTotalRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class PayTotalResponse
/*       */     extends GeneratedMessage
/*       */     implements PayTotalResponseOrBuilder
/*       */   {
/* 12757 */     private static final PayTotalResponse defaultInstance = new PayTotalResponse(true); private final UnknownFieldSet unknownFields; private PayTotalResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private PayTotalResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static PayTotalResponse getDefaultInstance() { return defaultInstance; } public PayTotalResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private PayTotalResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; ActivityHandler.totalInfo.Builder subBuilder; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: subBuilder = null; if ((this.bitField0_ & 0x4) == 4) subBuilder = this.s2CData_.toBuilder();  this.s2CData_ = (ActivityHandler.totalInfo)input.readMessage(ActivityHandler.totalInfo.PARSER, extensionRegistry); if (subBuilder != null) { subBuilder.mergeFrom(this.s2CData_); this.s2CData_ = subBuilder.buildPartial(); }  this.bitField0_ |= 0x4; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_PayTotalResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_PayTotalResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PayTotalResponse.class, Builder.class); } public static Parser<PayTotalResponse> PARSER = (Parser<PayTotalResponse>)new AbstractParser<PayTotalResponse>() { public ActivityHandler.PayTotalResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.PayTotalResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_DATA_FIELD_NUMBER = 3; private ActivityHandler.totalInfo s2CData_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<PayTotalResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public boolean hasS2CData() { return ((this.bitField0_ & 0x4) == 4); } public ActivityHandler.totalInfo getS2CData() { return this.s2CData_; } public ActivityHandler.totalInfoOrBuilder getS2CDataOrBuilder() { return this.s2CData_; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.s2CData_ = ActivityHandler.totalInfo.getDefaultInstance(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  if (!hasS2CData()) { this.memoizedIsInitialized = 0; return false; }  if (!getS2CData().isInitialized()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4) output.writeMessage(3, (MessageLite)this.s2CData_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.s2CData_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static PayTotalResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (PayTotalResponse)PARSER.parseFrom(data); } public static PayTotalResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PayTotalResponse)PARSER.parseFrom(data, extensionRegistry); } public static PayTotalResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (PayTotalResponse)PARSER.parseFrom(data); } public static PayTotalResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PayTotalResponse)PARSER.parseFrom(data, extensionRegistry); } public static PayTotalResponse parseFrom(InputStream input) throws IOException { return (PayTotalResponse)PARSER.parseFrom(input); } public static PayTotalResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PayTotalResponse)PARSER.parseFrom(input, extensionRegistry); } public static PayTotalResponse parseDelimitedFrom(InputStream input) throws IOException { return (PayTotalResponse)PARSER.parseDelimitedFrom(input); } public static PayTotalResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PayTotalResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static PayTotalResponse parseFrom(CodedInputStream input) throws IOException { return (PayTotalResponse)PARSER.parseFrom(input); } public static PayTotalResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PayTotalResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(PayTotalResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.PayTotalResponseOrBuilder {
/* 12758 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; private ActivityHandler.totalInfo s2CData_; private SingleFieldBuilder<ActivityHandler.totalInfo, ActivityHandler.totalInfo.Builder, ActivityHandler.totalInfoOrBuilder> s2CDataBuilder_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_PayTotalResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_PayTotalResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.PayTotalResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; this.s2CData_ = ActivityHandler.totalInfo.getDefaultInstance(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; this.s2CData_ = ActivityHandler.totalInfo.getDefaultInstance(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.PayTotalResponse.alwaysUseFieldBuilders) getS2CDataFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; if (this.s2CDataBuilder_ == null) { this.s2CData_ = ActivityHandler.totalInfo.getDefaultInstance(); } else { this.s2CDataBuilder_.clear(); }  this.bitField0_ &= 0xFFFFFFFB; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_PayTotalResponse_descriptor; } public ActivityHandler.PayTotalResponse getDefaultInstanceForType() { return ActivityHandler.PayTotalResponse.getDefaultInstance(); } public ActivityHandler.PayTotalResponse build() { ActivityHandler.PayTotalResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.PayTotalResponse buildPartial() { ActivityHandler.PayTotalResponse result = new ActivityHandler.PayTotalResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;  if (this.s2CDataBuilder_ == null) { result.s2CData_ = this.s2CData_; } else { result.s2CData_ = (ActivityHandler.totalInfo)this.s2CDataBuilder_.build(); }  result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.PayTotalResponse) return mergeFrom((ActivityHandler.PayTotalResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.PayTotalResponse other) { if (other == ActivityHandler.PayTotalResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  if (other.hasS2CData()) mergeS2CData(other.getS2CData());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  if (!hasS2CData()) return false;  if (!getS2CData().isInitialized()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.PayTotalResponse parsedMessage = null; try { parsedMessage = (ActivityHandler.PayTotalResponse)ActivityHandler.PayTotalResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.PayTotalResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = ActivityHandler.PayTotalResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public boolean hasS2CData() { return ((this.bitField0_ & 0x4) == 4); } public ActivityHandler.totalInfo getS2CData() { if (this.s2CDataBuilder_ == null) return this.s2CData_;  return (ActivityHandler.totalInfo)this.s2CDataBuilder_.getMessage(); } public Builder setS2CData(ActivityHandler.totalInfo value) { if (this.s2CDataBuilder_ == null) { if (value == null) throw new NullPointerException();  this.s2CData_ = value; onChanged(); } else { this.s2CDataBuilder_.setMessage(value); }  this.bitField0_ |= 0x4; return this; } public Builder setS2CData(ActivityHandler.totalInfo.Builder builderForValue) { if (this.s2CDataBuilder_ == null) { this.s2CData_ = builderForValue.build(); onChanged(); } else { this.s2CDataBuilder_.setMessage(builderForValue.build()); }  this.bitField0_ |= 0x4; return this; } public Builder mergeS2CData(ActivityHandler.totalInfo value) { if (this.s2CDataBuilder_ == null) { if ((this.bitField0_ & 0x4) == 4 && this.s2CData_ != ActivityHandler.totalInfo.getDefaultInstance()) { this.s2CData_ = ActivityHandler.totalInfo.newBuilder(this.s2CData_).mergeFrom(value).buildPartial(); } else { this.s2CData_ = value; }  onChanged(); } else { this.s2CDataBuilder_.mergeFrom(value); }  this.bitField0_ |= 0x4; return this; } public Builder clearS2CData() { if (this.s2CDataBuilder_ == null) { this.s2CData_ = ActivityHandler.totalInfo.getDefaultInstance(); onChanged(); } else { this.s2CDataBuilder_.clear(); }  this.bitField0_ &= 0xFFFFFFFB; return this; } public ActivityHandler.totalInfo.Builder getS2CDataBuilder() { this.bitField0_ |= 0x4; onChanged(); return (ActivityHandler.totalInfo.Builder)getS2CDataFieldBuilder().getBuilder(); } public ActivityHandler.totalInfoOrBuilder getS2CDataOrBuilder() { if (this.s2CDataBuilder_ != null) return (ActivityHandler.totalInfoOrBuilder)this.s2CDataBuilder_.getMessageOrBuilder();  return this.s2CData_; } private SingleFieldBuilder<ActivityHandler.totalInfo, ActivityHandler.totalInfo.Builder, ActivityHandler.totalInfoOrBuilder> getS2CDataFieldBuilder() { if (this.s2CDataBuilder_ == null) { this.s2CDataBuilder_ = new SingleFieldBuilder(getS2CData(), getParentForChildren(), isClean()); this.s2CData_ = null; }  return this.s2CDataBuilder_; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ConsumeTotalRequest
/*       */     extends GeneratedMessage
/*       */     implements ConsumeTotalRequestOrBuilder
/*       */   {
/* 13070 */     private static final ConsumeTotalRequest defaultInstance = new ConsumeTotalRequest(true); private final UnknownFieldSet unknownFields; private ConsumeTotalRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ConsumeTotalRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ConsumeTotalRequest getDefaultInstance() { return defaultInstance; } public ConsumeTotalRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ConsumeTotalRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ConsumeTotalRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ConsumeTotalRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ConsumeTotalRequest.class, Builder.class); } public static Parser<ConsumeTotalRequest> PARSER = (Parser<ConsumeTotalRequest>)new AbstractParser<ConsumeTotalRequest>() { public ActivityHandler.ConsumeTotalRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ConsumeTotalRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ConsumeTotalRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ConsumeTotalRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ConsumeTotalRequest)PARSER.parseFrom(data); } public static ConsumeTotalRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ConsumeTotalRequest)PARSER.parseFrom(data, extensionRegistry); } public static ConsumeTotalRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ConsumeTotalRequest)PARSER.parseFrom(data); } public static ConsumeTotalRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ConsumeTotalRequest)PARSER.parseFrom(data, extensionRegistry); } public static ConsumeTotalRequest parseFrom(InputStream input) throws IOException { return (ConsumeTotalRequest)PARSER.parseFrom(input); } public static ConsumeTotalRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ConsumeTotalRequest)PARSER.parseFrom(input, extensionRegistry); } public static ConsumeTotalRequest parseDelimitedFrom(InputStream input) throws IOException { return (ConsumeTotalRequest)PARSER.parseDelimitedFrom(input); } public static ConsumeTotalRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ConsumeTotalRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ConsumeTotalRequest parseFrom(CodedInputStream input) throws IOException { return (ConsumeTotalRequest)PARSER.parseFrom(input); } public static ConsumeTotalRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ConsumeTotalRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ConsumeTotalRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ConsumeTotalRequestOrBuilder {
/* 13071 */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ConsumeTotalRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ConsumeTotalRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ConsumeTotalRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.ConsumeTotalRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ConsumeTotalRequest_descriptor; } public ActivityHandler.ConsumeTotalRequest getDefaultInstanceForType() { return ActivityHandler.ConsumeTotalRequest.getDefaultInstance(); } public ActivityHandler.ConsumeTotalRequest build() { ActivityHandler.ConsumeTotalRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.ConsumeTotalRequest buildPartial() { ActivityHandler.ConsumeTotalRequest result = new ActivityHandler.ConsumeTotalRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ConsumeTotalRequest) return mergeFrom((ActivityHandler.ConsumeTotalRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.ConsumeTotalRequest other) { if (other == ActivityHandler.ConsumeTotalRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ConsumeTotalRequest parsedMessage = null; try { parsedMessage = (ActivityHandler.ConsumeTotalRequest)ActivityHandler.ConsumeTotalRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.ConsumeTotalRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ConsumeTotalResponse
/*       */     extends GeneratedMessage
/*       */     implements ConsumeTotalResponseOrBuilder
/*       */   {
/* 13837 */     private static final ConsumeTotalResponse defaultInstance = new ConsumeTotalResponse(true); private final UnknownFieldSet unknownFields; private ConsumeTotalResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ConsumeTotalResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ConsumeTotalResponse getDefaultInstance() { return defaultInstance; } public ConsumeTotalResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ConsumeTotalResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; ActivityHandler.totalInfo.Builder subBuilder; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: subBuilder = null; if ((this.bitField0_ & 0x4) == 4) subBuilder = this.s2CData_.toBuilder();  this.s2CData_ = (ActivityHandler.totalInfo)input.readMessage(ActivityHandler.totalInfo.PARSER, extensionRegistry); if (subBuilder != null) { subBuilder.mergeFrom(this.s2CData_); this.s2CData_ = subBuilder.buildPartial(); }  this.bitField0_ |= 0x4; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ConsumeTotalResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ConsumeTotalResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ConsumeTotalResponse.class, Builder.class); } public static Parser<ConsumeTotalResponse> PARSER = (Parser<ConsumeTotalResponse>)new AbstractParser<ConsumeTotalResponse>() { public ActivityHandler.ConsumeTotalResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ConsumeTotalResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_DATA_FIELD_NUMBER = 3; private ActivityHandler.totalInfo s2CData_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ConsumeTotalResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public boolean hasS2CData() { return ((this.bitField0_ & 0x4) == 4); } public ActivityHandler.totalInfo getS2CData() { return this.s2CData_; } public ActivityHandler.totalInfoOrBuilder getS2CDataOrBuilder() { return this.s2CData_; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.s2CData_ = ActivityHandler.totalInfo.getDefaultInstance(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  if (!hasS2CData()) { this.memoizedIsInitialized = 0; return false; }  if (!getS2CData().isInitialized()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4) output.writeMessage(3, (MessageLite)this.s2CData_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.s2CData_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ConsumeTotalResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ConsumeTotalResponse)PARSER.parseFrom(data); } public static ConsumeTotalResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ConsumeTotalResponse)PARSER.parseFrom(data, extensionRegistry); } public static ConsumeTotalResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ConsumeTotalResponse)PARSER.parseFrom(data); } public static ConsumeTotalResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ConsumeTotalResponse)PARSER.parseFrom(data, extensionRegistry); } public static ConsumeTotalResponse parseFrom(InputStream input) throws IOException { return (ConsumeTotalResponse)PARSER.parseFrom(input); } public static ConsumeTotalResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ConsumeTotalResponse)PARSER.parseFrom(input, extensionRegistry); } public static ConsumeTotalResponse parseDelimitedFrom(InputStream input) throws IOException { return (ConsumeTotalResponse)PARSER.parseDelimitedFrom(input); } public static ConsumeTotalResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ConsumeTotalResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ConsumeTotalResponse parseFrom(CodedInputStream input) throws IOException { return (ConsumeTotalResponse)PARSER.parseFrom(input); } public static ConsumeTotalResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ConsumeTotalResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ConsumeTotalResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ConsumeTotalResponseOrBuilder {
/* 13838 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; private ActivityHandler.totalInfo s2CData_; private SingleFieldBuilder<ActivityHandler.totalInfo, ActivityHandler.totalInfo.Builder, ActivityHandler.totalInfoOrBuilder> s2CDataBuilder_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ConsumeTotalResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ConsumeTotalResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ConsumeTotalResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; this.s2CData_ = ActivityHandler.totalInfo.getDefaultInstance(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; this.s2CData_ = ActivityHandler.totalInfo.getDefaultInstance(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.ConsumeTotalResponse.alwaysUseFieldBuilders) getS2CDataFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; if (this.s2CDataBuilder_ == null) { this.s2CData_ = ActivityHandler.totalInfo.getDefaultInstance(); } else { this.s2CDataBuilder_.clear(); }  this.bitField0_ &= 0xFFFFFFFB; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ConsumeTotalResponse_descriptor; } public ActivityHandler.ConsumeTotalResponse getDefaultInstanceForType() { return ActivityHandler.ConsumeTotalResponse.getDefaultInstance(); } public ActivityHandler.ConsumeTotalResponse build() { ActivityHandler.ConsumeTotalResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.ConsumeTotalResponse buildPartial() { ActivityHandler.ConsumeTotalResponse result = new ActivityHandler.ConsumeTotalResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;  if (this.s2CDataBuilder_ == null) { result.s2CData_ = this.s2CData_; } else { result.s2CData_ = (ActivityHandler.totalInfo)this.s2CDataBuilder_.build(); }  result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ConsumeTotalResponse) return mergeFrom((ActivityHandler.ConsumeTotalResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.ConsumeTotalResponse other) { if (other == ActivityHandler.ConsumeTotalResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  if (other.hasS2CData()) mergeS2CData(other.getS2CData());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  if (!hasS2CData()) return false;  if (!getS2CData().isInitialized()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ConsumeTotalResponse parsedMessage = null; try { parsedMessage = (ActivityHandler.ConsumeTotalResponse)ActivityHandler.ConsumeTotalResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.ConsumeTotalResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = ActivityHandler.ConsumeTotalResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public boolean hasS2CData() { return ((this.bitField0_ & 0x4) == 4); } public ActivityHandler.totalInfo getS2CData() { if (this.s2CDataBuilder_ == null) return this.s2CData_;  return (ActivityHandler.totalInfo)this.s2CDataBuilder_.getMessage(); } public Builder setS2CData(ActivityHandler.totalInfo value) { if (this.s2CDataBuilder_ == null) { if (value == null) throw new NullPointerException();  this.s2CData_ = value; onChanged(); } else { this.s2CDataBuilder_.setMessage(value); }  this.bitField0_ |= 0x4; return this; } public Builder setS2CData(ActivityHandler.totalInfo.Builder builderForValue) { if (this.s2CDataBuilder_ == null) { this.s2CData_ = builderForValue.build(); onChanged(); } else { this.s2CDataBuilder_.setMessage(builderForValue.build()); }  this.bitField0_ |= 0x4; return this; } public Builder mergeS2CData(ActivityHandler.totalInfo value) { if (this.s2CDataBuilder_ == null) { if ((this.bitField0_ & 0x4) == 4 && this.s2CData_ != ActivityHandler.totalInfo.getDefaultInstance()) { this.s2CData_ = ActivityHandler.totalInfo.newBuilder(this.s2CData_).mergeFrom(value).buildPartial(); } else { this.s2CData_ = value; }  onChanged(); } else { this.s2CDataBuilder_.mergeFrom(value); }  this.bitField0_ |= 0x4; return this; } public Builder clearS2CData() { if (this.s2CDataBuilder_ == null) { this.s2CData_ = ActivityHandler.totalInfo.getDefaultInstance(); onChanged(); } else { this.s2CDataBuilder_.clear(); }  this.bitField0_ &= 0xFFFFFFFB; return this; } public ActivityHandler.totalInfo.Builder getS2CDataBuilder() { this.bitField0_ |= 0x4; onChanged(); return (ActivityHandler.totalInfo.Builder)getS2CDataFieldBuilder().getBuilder(); } public ActivityHandler.totalInfoOrBuilder getS2CDataOrBuilder() { if (this.s2CDataBuilder_ != null) return (ActivityHandler.totalInfoOrBuilder)this.s2CDataBuilder_.getMessageOrBuilder();  return this.s2CData_; } private SingleFieldBuilder<ActivityHandler.totalInfo, ActivityHandler.totalInfo.Builder, ActivityHandler.totalInfoOrBuilder> getS2CDataFieldBuilder() { if (this.s2CDataBuilder_ == null) { this.s2CDataBuilder_ = new SingleFieldBuilder(getS2CData(), getParentForChildren(), isClean()); this.s2CData_ = null; }  return this.s2CDataBuilder_; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ActivityAwardRequest
/*       */     extends GeneratedMessage
/*       */     implements ActivityAwardRequestOrBuilder
/*       */   {
/* 14328 */     private static final ActivityAwardRequest defaultInstance = new ActivityAwardRequest(true); private final UnknownFieldSet unknownFields; private ActivityAwardRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ActivityAwardRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ActivityAwardRequest getDefaultInstance() { return defaultInstance; } public ActivityAwardRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ActivityAwardRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CAwardId_ = input.readInt32(); break;case 16: this.bitField0_ |= 0x2; this.s2CActivityId_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityAwardRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityAwardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityAwardRequest.class, Builder.class); } public static Parser<ActivityAwardRequest> PARSER = (Parser<ActivityAwardRequest>)new AbstractParser<ActivityAwardRequest>() { public ActivityHandler.ActivityAwardRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ActivityAwardRequest(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_AWARDID_FIELD_NUMBER = 1; private int s2CAwardId_; public static final int S2C_ACTIVITYID_FIELD_NUMBER = 2; private int s2CActivityId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ActivityAwardRequest> getParserForType() { return PARSER; } public boolean hasS2CAwardId() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CAwardId() { return this.s2CAwardId_; } public boolean hasS2CActivityId() { return ((this.bitField0_ & 0x2) == 2); } public int getS2CActivityId() { return this.s2CActivityId_; } private void initFields() { this.s2CAwardId_ = 0; this.s2CActivityId_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CAwardId()) { this.memoizedIsInitialized = 0; return false; }  if (!hasS2CActivityId()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CAwardId_);  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.s2CActivityId_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CAwardId_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.s2CActivityId_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ActivityAwardRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ActivityAwardRequest)PARSER.parseFrom(data); } public static ActivityAwardRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityAwardRequest)PARSER.parseFrom(data, extensionRegistry); } public static ActivityAwardRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ActivityAwardRequest)PARSER.parseFrom(data); } public static ActivityAwardRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityAwardRequest)PARSER.parseFrom(data, extensionRegistry); } public static ActivityAwardRequest parseFrom(InputStream input) throws IOException { return (ActivityAwardRequest)PARSER.parseFrom(input); } public static ActivityAwardRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityAwardRequest)PARSER.parseFrom(input, extensionRegistry); } public static ActivityAwardRequest parseDelimitedFrom(InputStream input) throws IOException { return (ActivityAwardRequest)PARSER.parseDelimitedFrom(input); } public static ActivityAwardRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityAwardRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ActivityAwardRequest parseFrom(CodedInputStream input) throws IOException { return (ActivityAwardRequest)PARSER.parseFrom(input); } public static ActivityAwardRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityAwardRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ActivityAwardRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ActivityAwardRequestOrBuilder {
/* 14329 */       private int bitField0_; private int s2CAwardId_; private int s2CActivityId_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityAwardRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityAwardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ActivityAwardRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.ActivityAwardRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CAwardId_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CActivityId_ = 0; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ActivityAwardRequest_descriptor; } public ActivityHandler.ActivityAwardRequest getDefaultInstanceForType() { return ActivityHandler.ActivityAwardRequest.getDefaultInstance(); } public ActivityHandler.ActivityAwardRequest build() { ActivityHandler.ActivityAwardRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.ActivityAwardRequest buildPartial() { ActivityHandler.ActivityAwardRequest result = new ActivityHandler.ActivityAwardRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CAwardId_ = this.s2CAwardId_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CActivityId_ = this.s2CActivityId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ActivityAwardRequest) return mergeFrom((ActivityHandler.ActivityAwardRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.ActivityAwardRequest other) { if (other == ActivityHandler.ActivityAwardRequest.getDefaultInstance()) return this;  if (other.hasS2CAwardId()) setS2CAwardId(other.getS2CAwardId());  if (other.hasS2CActivityId()) setS2CActivityId(other.getS2CActivityId());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CAwardId()) return false;  if (!hasS2CActivityId()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ActivityAwardRequest parsedMessage = null; try { parsedMessage = (ActivityHandler.ActivityAwardRequest)ActivityHandler.ActivityAwardRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.ActivityAwardRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CAwardId() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CAwardId() { return this.s2CAwardId_; } public Builder setS2CAwardId(int value) { this.bitField0_ |= 0x1; this.s2CAwardId_ = value; onChanged(); return this; } public Builder clearS2CAwardId() { this.bitField0_ &= 0xFFFFFFFE; this.s2CAwardId_ = 0; onChanged(); return this; } public boolean hasS2CActivityId() { return ((this.bitField0_ & 0x2) == 2); } public int getS2CActivityId() { return this.s2CActivityId_; } public Builder setS2CActivityId(int value) { this.bitField0_ |= 0x2; this.s2CActivityId_ = value; onChanged(); return this; } public Builder clearS2CActivityId() { this.bitField0_ &= 0xFFFFFFFD; this.s2CActivityId_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ActivityAwardResponse
/*       */     extends GeneratedMessage
/*       */     implements ActivityAwardResponseOrBuilder
/*       */   {
/* 15091 */     private static final ActivityAwardResponse defaultInstance = new ActivityAwardResponse(true); private final UnknownFieldSet unknownFields; private ActivityAwardResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ActivityAwardResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ActivityAwardResponse getDefaultInstance() { return defaultInstance; } public ActivityAwardResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ActivityAwardResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; ActivityHandler.ActivityListInfo.Builder subBuilder; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: subBuilder = null; if ((this.bitField0_ & 0x4) == 4) subBuilder = this.s2CActivityHud_.toBuilder();  this.s2CActivityHud_ = (ActivityHandler.ActivityListInfo)input.readMessage(ActivityHandler.ActivityListInfo.PARSER, extensionRegistry); if (subBuilder != null) { subBuilder.mergeFrom(this.s2CActivityHud_); this.s2CActivityHud_ = subBuilder.buildPartial(); }  this.bitField0_ |= 0x4; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityAwardResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityAwardResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityAwardResponse.class, Builder.class); } public static Parser<ActivityAwardResponse> PARSER = (Parser<ActivityAwardResponse>)new AbstractParser<ActivityAwardResponse>() { public ActivityHandler.ActivityAwardResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ActivityAwardResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_ACTIVITYHUD_FIELD_NUMBER = 3; private ActivityHandler.ActivityListInfo s2CActivityHud_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ActivityAwardResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public boolean hasS2CActivityHud() { return ((this.bitField0_ & 0x4) == 4); } public ActivityHandler.ActivityListInfo getS2CActivityHud() { return this.s2CActivityHud_; } public ActivityHandler.ActivityListInfoOrBuilder getS2CActivityHudOrBuilder() { return this.s2CActivityHud_; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.s2CActivityHud_ = ActivityHandler.ActivityListInfo.getDefaultInstance(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  if (hasS2CActivityHud() && !getS2CActivityHud().isInitialized()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4) output.writeMessage(3, (MessageLite)this.s2CActivityHud_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.s2CActivityHud_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ActivityAwardResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ActivityAwardResponse)PARSER.parseFrom(data); } public static ActivityAwardResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityAwardResponse)PARSER.parseFrom(data, extensionRegistry); } public static ActivityAwardResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ActivityAwardResponse)PARSER.parseFrom(data); } public static ActivityAwardResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityAwardResponse)PARSER.parseFrom(data, extensionRegistry); } public static ActivityAwardResponse parseFrom(InputStream input) throws IOException { return (ActivityAwardResponse)PARSER.parseFrom(input); } public static ActivityAwardResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityAwardResponse)PARSER.parseFrom(input, extensionRegistry); } public static ActivityAwardResponse parseDelimitedFrom(InputStream input) throws IOException { return (ActivityAwardResponse)PARSER.parseDelimitedFrom(input); } public static ActivityAwardResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityAwardResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ActivityAwardResponse parseFrom(CodedInputStream input) throws IOException { return (ActivityAwardResponse)PARSER.parseFrom(input); } public static ActivityAwardResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityAwardResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ActivityAwardResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ActivityAwardResponseOrBuilder {
/* 15092 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; private ActivityHandler.ActivityListInfo s2CActivityHud_; private SingleFieldBuilder<ActivityHandler.ActivityListInfo, ActivityHandler.ActivityListInfo.Builder, ActivityHandler.ActivityListInfoOrBuilder> s2CActivityHudBuilder_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityAwardResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityAwardResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ActivityAwardResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; this.s2CActivityHud_ = ActivityHandler.ActivityListInfo.getDefaultInstance(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; this.s2CActivityHud_ = ActivityHandler.ActivityListInfo.getDefaultInstance(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.ActivityAwardResponse.alwaysUseFieldBuilders) getS2CActivityHudFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; if (this.s2CActivityHudBuilder_ == null) { this.s2CActivityHud_ = ActivityHandler.ActivityListInfo.getDefaultInstance(); } else { this.s2CActivityHudBuilder_.clear(); }  this.bitField0_ &= 0xFFFFFFFB; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ActivityAwardResponse_descriptor; } public ActivityHandler.ActivityAwardResponse getDefaultInstanceForType() { return ActivityHandler.ActivityAwardResponse.getDefaultInstance(); } public ActivityHandler.ActivityAwardResponse build() { ActivityHandler.ActivityAwardResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.ActivityAwardResponse buildPartial() { ActivityHandler.ActivityAwardResponse result = new ActivityHandler.ActivityAwardResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;  if (this.s2CActivityHudBuilder_ == null) { result.s2CActivityHud_ = this.s2CActivityHud_; } else { result.s2CActivityHud_ = (ActivityHandler.ActivityListInfo)this.s2CActivityHudBuilder_.build(); }  result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ActivityAwardResponse) return mergeFrom((ActivityHandler.ActivityAwardResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.ActivityAwardResponse other) { if (other == ActivityHandler.ActivityAwardResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  if (other.hasS2CActivityHud()) mergeS2CActivityHud(other.getS2CActivityHud());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  if (hasS2CActivityHud() && !getS2CActivityHud().isInitialized()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ActivityAwardResponse parsedMessage = null; try { parsedMessage = (ActivityHandler.ActivityAwardResponse)ActivityHandler.ActivityAwardResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.ActivityAwardResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = ActivityHandler.ActivityAwardResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public boolean hasS2CActivityHud() { return ((this.bitField0_ & 0x4) == 4); } public ActivityHandler.ActivityListInfo getS2CActivityHud() { if (this.s2CActivityHudBuilder_ == null) return this.s2CActivityHud_;  return (ActivityHandler.ActivityListInfo)this.s2CActivityHudBuilder_.getMessage(); } public Builder setS2CActivityHud(ActivityHandler.ActivityListInfo value) { if (this.s2CActivityHudBuilder_ == null) { if (value == null) throw new NullPointerException();  this.s2CActivityHud_ = value; onChanged(); } else { this.s2CActivityHudBuilder_.setMessage(value); }  this.bitField0_ |= 0x4; return this; } public Builder setS2CActivityHud(ActivityHandler.ActivityListInfo.Builder builderForValue) { if (this.s2CActivityHudBuilder_ == null) { this.s2CActivityHud_ = builderForValue.build(); onChanged(); } else { this.s2CActivityHudBuilder_.setMessage(builderForValue.build()); }  this.bitField0_ |= 0x4; return this; } public Builder mergeS2CActivityHud(ActivityHandler.ActivityListInfo value) { if (this.s2CActivityHudBuilder_ == null) { if ((this.bitField0_ & 0x4) == 4 && this.s2CActivityHud_ != ActivityHandler.ActivityListInfo.getDefaultInstance()) { this.s2CActivityHud_ = ActivityHandler.ActivityListInfo.newBuilder(this.s2CActivityHud_).mergeFrom(value).buildPartial(); } else { this.s2CActivityHud_ = value; }  onChanged(); } else { this.s2CActivityHudBuilder_.mergeFrom(value); }  this.bitField0_ |= 0x4; return this; } public Builder clearS2CActivityHud() { if (this.s2CActivityHudBuilder_ == null) { this.s2CActivityHud_ = ActivityHandler.ActivityListInfo.getDefaultInstance(); onChanged(); } else { this.s2CActivityHudBuilder_.clear(); }  this.bitField0_ &= 0xFFFFFFFB; return this; } public ActivityHandler.ActivityListInfo.Builder getS2CActivityHudBuilder() { this.bitField0_ |= 0x4; onChanged(); return (ActivityHandler.ActivityListInfo.Builder)getS2CActivityHudFieldBuilder().getBuilder(); } public ActivityHandler.ActivityListInfoOrBuilder getS2CActivityHudOrBuilder() { if (this.s2CActivityHudBuilder_ != null) return (ActivityHandler.ActivityListInfoOrBuilder)this.s2CActivityHudBuilder_.getMessageOrBuilder();  return this.s2CActivityHud_; } private SingleFieldBuilder<ActivityHandler.ActivityListInfo, ActivityHandler.ActivityListInfo.Builder, ActivityHandler.ActivityListInfoOrBuilder> getS2CActivityHudFieldBuilder() { if (this.s2CActivityHudBuilder_ == null) { this.s2CActivityHudBuilder_ = new SingleFieldBuilder(getS2CActivityHud(), getParentForChildren(), isClean()); this.s2CActivityHud_ = null; }  return this.s2CActivityHudBuilder_; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ActivityNoticeReq
/*       */     extends GeneratedMessage
/*       */     implements ActivityNoticeReqOrBuilder
/*       */   {
/* 15404 */     private static final ActivityNoticeReq defaultInstance = new ActivityNoticeReq(true); private final UnknownFieldSet unknownFields; private ActivityNoticeReq(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ActivityNoticeReq(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ActivityNoticeReq getDefaultInstance() { return defaultInstance; } public ActivityNoticeReq getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ActivityNoticeReq(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityNoticeReq_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityNoticeReq_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityNoticeReq.class, Builder.class); } public static Parser<ActivityNoticeReq> PARSER = (Parser<ActivityNoticeReq>)new AbstractParser<ActivityNoticeReq>() { public ActivityHandler.ActivityNoticeReq parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ActivityNoticeReq(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ActivityNoticeReq> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ActivityNoticeReq parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ActivityNoticeReq)PARSER.parseFrom(data); } public static ActivityNoticeReq parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityNoticeReq)PARSER.parseFrom(data, extensionRegistry); } public static ActivityNoticeReq parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ActivityNoticeReq)PARSER.parseFrom(data); } public static ActivityNoticeReq parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityNoticeReq)PARSER.parseFrom(data, extensionRegistry); } public static ActivityNoticeReq parseFrom(InputStream input) throws IOException { return (ActivityNoticeReq)PARSER.parseFrom(input); } public static ActivityNoticeReq parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityNoticeReq)PARSER.parseFrom(input, extensionRegistry); } public static ActivityNoticeReq parseDelimitedFrom(InputStream input) throws IOException { return (ActivityNoticeReq)PARSER.parseDelimitedFrom(input); } public static ActivityNoticeReq parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityNoticeReq)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ActivityNoticeReq parseFrom(CodedInputStream input) throws IOException { return (ActivityNoticeReq)PARSER.parseFrom(input); } public static ActivityNoticeReq parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityNoticeReq)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ActivityNoticeReq prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ActivityNoticeReqOrBuilder {
/* 15405 */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityNoticeReq_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityNoticeReq_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ActivityNoticeReq.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.ActivityNoticeReq.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ActivityNoticeReq_descriptor; } public ActivityHandler.ActivityNoticeReq getDefaultInstanceForType() { return ActivityHandler.ActivityNoticeReq.getDefaultInstance(); } public ActivityHandler.ActivityNoticeReq build() { ActivityHandler.ActivityNoticeReq result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.ActivityNoticeReq buildPartial() { ActivityHandler.ActivityNoticeReq result = new ActivityHandler.ActivityNoticeReq(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ActivityNoticeReq) return mergeFrom((ActivityHandler.ActivityNoticeReq)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.ActivityNoticeReq other) { if (other == ActivityHandler.ActivityNoticeReq.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ActivityNoticeReq parsedMessage = null; try { parsedMessage = (ActivityHandler.ActivityNoticeReq)ActivityHandler.ActivityNoticeReq.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.ActivityNoticeReq)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ActivityNoticeRes
/*       */     extends GeneratedMessage
/*       */     implements ActivityNoticeResOrBuilder
/*       */   {
/* 16123 */     private static final ActivityNoticeRes defaultInstance = new ActivityNoticeRes(true); private final UnknownFieldSet unknownFields; private ActivityNoticeRes(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ActivityNoticeRes(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ActivityNoticeRes getDefaultInstance() { return defaultInstance; } public ActivityNoticeRes getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ActivityNoticeRes(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: bs = input.readBytes(); this.bitField0_ |= 0x4; this.s2CContext_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityNoticeRes_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityNoticeRes_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityNoticeRes.class, Builder.class); } public static Parser<ActivityNoticeRes> PARSER = (Parser<ActivityNoticeRes>)new AbstractParser<ActivityNoticeRes>() { public ActivityHandler.ActivityNoticeRes parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ActivityNoticeRes(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_CONTEXT_FIELD_NUMBER = 3; private Object s2CContext_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ActivityNoticeRes> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public boolean hasS2CContext() { return ((this.bitField0_ & 0x4) == 4); } public String getS2CContext() { Object ref = this.s2CContext_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CContext_ = s;  return s; } public ByteString getS2CContextBytes() { Object ref = this.s2CContext_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CContext_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.s2CContext_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4) output.writeBytes(3, getS2CContextBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeBytesSize(3, getS2CContextBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ActivityNoticeRes parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ActivityNoticeRes)PARSER.parseFrom(data); } public static ActivityNoticeRes parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityNoticeRes)PARSER.parseFrom(data, extensionRegistry); } public static ActivityNoticeRes parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ActivityNoticeRes)PARSER.parseFrom(data); } public static ActivityNoticeRes parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityNoticeRes)PARSER.parseFrom(data, extensionRegistry); } public static ActivityNoticeRes parseFrom(InputStream input) throws IOException { return (ActivityNoticeRes)PARSER.parseFrom(input); } public static ActivityNoticeRes parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityNoticeRes)PARSER.parseFrom(input, extensionRegistry); } public static ActivityNoticeRes parseDelimitedFrom(InputStream input) throws IOException { return (ActivityNoticeRes)PARSER.parseDelimitedFrom(input); } public static ActivityNoticeRes parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityNoticeRes)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ActivityNoticeRes parseFrom(CodedInputStream input) throws IOException { return (ActivityNoticeRes)PARSER.parseFrom(input); } public static ActivityNoticeRes parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityNoticeRes)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ActivityNoticeRes prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ActivityNoticeResOrBuilder {
/* 16124 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; private Object s2CContext_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityNoticeRes_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityNoticeRes_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ActivityNoticeRes.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; this.s2CContext_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; this.s2CContext_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.ActivityNoticeRes.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; this.s2CContext_ = ""; this.bitField0_ &= 0xFFFFFFFB; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ActivityNoticeRes_descriptor; } public ActivityHandler.ActivityNoticeRes getDefaultInstanceForType() { return ActivityHandler.ActivityNoticeRes.getDefaultInstance(); } public ActivityHandler.ActivityNoticeRes build() { ActivityHandler.ActivityNoticeRes result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.ActivityNoticeRes buildPartial() { ActivityHandler.ActivityNoticeRes result = new ActivityHandler.ActivityNoticeRes(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;  result.s2CContext_ = this.s2CContext_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ActivityNoticeRes) return mergeFrom((ActivityHandler.ActivityNoticeRes)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.ActivityNoticeRes other) { if (other == ActivityHandler.ActivityNoticeRes.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  if (other.hasS2CContext()) { this.bitField0_ |= 0x4; this.s2CContext_ = other.s2CContext_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ActivityNoticeRes parsedMessage = null; try { parsedMessage = (ActivityHandler.ActivityNoticeRes)ActivityHandler.ActivityNoticeRes.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.ActivityNoticeRes)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = ActivityHandler.ActivityNoticeRes.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public boolean hasS2CContext() { return ((this.bitField0_ & 0x4) == 4); } public String getS2CContext() { Object ref = this.s2CContext_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CContext_ = s;  return s; }  return (String)ref; } public ByteString getS2CContextBytes() { Object ref = this.s2CContext_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CContext_ = b; return b; }  return (ByteString)ref; } public Builder setS2CContext(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x4; this.s2CContext_ = value; onChanged(); return this; } public Builder clearS2CContext() { this.bitField0_ &= 0xFFFFFFFB; this.s2CContext_ = ActivityHandler.ActivityNoticeRes.getDefaultInstance().getS2CContext(); onChanged(); return this; } public Builder setS2CContextBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x4; this.s2CContext_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ActivityLevelOrSwordRequest
/*       */     extends GeneratedMessage
/*       */     implements ActivityLevelOrSwordRequestOrBuilder
/*       */   {
/* 16528 */     private static final ActivityLevelOrSwordRequest defaultInstance = new ActivityLevelOrSwordRequest(true); private final UnknownFieldSet unknownFields; private ActivityLevelOrSwordRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ActivityLevelOrSwordRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ActivityLevelOrSwordRequest getDefaultInstance() { return defaultInstance; } public ActivityLevelOrSwordRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ActivityLevelOrSwordRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.c2SActivityId_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityLevelOrSwordRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityLevelOrSwordRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityLevelOrSwordRequest.class, Builder.class); } public static Parser<ActivityLevelOrSwordRequest> PARSER = (Parser<ActivityLevelOrSwordRequest>)new AbstractParser<ActivityLevelOrSwordRequest>() { public ActivityHandler.ActivityLevelOrSwordRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ActivityLevelOrSwordRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_ACTIVITYID_FIELD_NUMBER = 1; private int c2SActivityId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ActivityLevelOrSwordRequest> getParserForType() { return PARSER; } public boolean hasC2SActivityId() { return ((this.bitField0_ & 0x1) == 1); } public int getC2SActivityId() { return this.c2SActivityId_; } private void initFields() { this.c2SActivityId_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SActivityId()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.c2SActivityId_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.c2SActivityId_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ActivityLevelOrSwordRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ActivityLevelOrSwordRequest)PARSER.parseFrom(data); } public static ActivityLevelOrSwordRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityLevelOrSwordRequest)PARSER.parseFrom(data, extensionRegistry); } public static ActivityLevelOrSwordRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ActivityLevelOrSwordRequest)PARSER.parseFrom(data); } public static ActivityLevelOrSwordRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityLevelOrSwordRequest)PARSER.parseFrom(data, extensionRegistry); } public static ActivityLevelOrSwordRequest parseFrom(InputStream input) throws IOException { return (ActivityLevelOrSwordRequest)PARSER.parseFrom(input); } public static ActivityLevelOrSwordRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityLevelOrSwordRequest)PARSER.parseFrom(input, extensionRegistry); } public static ActivityLevelOrSwordRequest parseDelimitedFrom(InputStream input) throws IOException { return (ActivityLevelOrSwordRequest)PARSER.parseDelimitedFrom(input); } public static ActivityLevelOrSwordRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityLevelOrSwordRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ActivityLevelOrSwordRequest parseFrom(CodedInputStream input) throws IOException { return (ActivityLevelOrSwordRequest)PARSER.parseFrom(input); } public static ActivityLevelOrSwordRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityLevelOrSwordRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ActivityLevelOrSwordRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ActivityLevelOrSwordRequestOrBuilder {
/* 16529 */       private int bitField0_; private int c2SActivityId_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityLevelOrSwordRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityLevelOrSwordRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ActivityLevelOrSwordRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.ActivityLevelOrSwordRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SActivityId_ = 0; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ActivityLevelOrSwordRequest_descriptor; } public ActivityHandler.ActivityLevelOrSwordRequest getDefaultInstanceForType() { return ActivityHandler.ActivityLevelOrSwordRequest.getDefaultInstance(); } public ActivityHandler.ActivityLevelOrSwordRequest build() { ActivityHandler.ActivityLevelOrSwordRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.ActivityLevelOrSwordRequest buildPartial() { ActivityHandler.ActivityLevelOrSwordRequest result = new ActivityHandler.ActivityLevelOrSwordRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SActivityId_ = this.c2SActivityId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ActivityLevelOrSwordRequest) return mergeFrom((ActivityHandler.ActivityLevelOrSwordRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.ActivityLevelOrSwordRequest other) { if (other == ActivityHandler.ActivityLevelOrSwordRequest.getDefaultInstance()) return this;  if (other.hasC2SActivityId()) setC2SActivityId(other.getC2SActivityId());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SActivityId()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ActivityLevelOrSwordRequest parsedMessage = null; try { parsedMessage = (ActivityHandler.ActivityLevelOrSwordRequest)ActivityHandler.ActivityLevelOrSwordRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.ActivityLevelOrSwordRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SActivityId() { return ((this.bitField0_ & 0x1) == 1); } public int getC2SActivityId() { return this.c2SActivityId_; } public Builder setC2SActivityId(int value) { this.bitField0_ |= 0x1; this.c2SActivityId_ = value; onChanged(); return this; } public Builder clearC2SActivityId() { this.bitField0_ &= 0xFFFFFFFE; this.c2SActivityId_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ActivityLevelOrSwordResponse
/*       */     extends GeneratedMessage
/*       */     implements ActivityLevelOrSwordResponseOrBuilder
/*       */   {
/* 17933 */     private static final ActivityLevelOrSwordResponse defaultInstance = new ActivityLevelOrSwordResponse(true); private final UnknownFieldSet unknownFields; private ActivityLevelOrSwordResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ActivityLevelOrSwordResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ActivityLevelOrSwordResponse getDefaultInstance() { return defaultInstance; } public ActivityLevelOrSwordResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ActivityLevelOrSwordResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: bs = input.readBytes(); this.bitField0_ |= 0x4; this.s2CBeginTime_ = bs; break;case 34: bs = input.readBytes(); this.bitField0_ |= 0x8; this.s2CEndTime_ = bs; break;case 42: bs = input.readBytes(); this.bitField0_ |= 0x10; this.s2CContent_ = bs; break;case 50: if ((mutable_bitField0_ & 0x20) != 32) { this.s2CData_ = new ArrayList<>(); mutable_bitField0_ |= 0x20; }  this.s2CData_.add(input.readMessage(ActivityHandler.awardState.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x20) == 32) this.s2CData_ = Collections.unmodifiableList(this.s2CData_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityLevelOrSwordResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityLevelOrSwordResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityLevelOrSwordResponse.class, Builder.class); } public static Parser<ActivityLevelOrSwordResponse> PARSER = (Parser<ActivityLevelOrSwordResponse>)new AbstractParser<ActivityLevelOrSwordResponse>() { public ActivityHandler.ActivityLevelOrSwordResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ActivityLevelOrSwordResponse(input, extensionRegistry); } }
/* 17934 */     ; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_BEGINTIME_FIELD_NUMBER = 3; private Object s2CBeginTime_; public static final int S2C_ENDTIME_FIELD_NUMBER = 4; private Object s2CEndTime_; public static final int S2C_CONTENT_FIELD_NUMBER = 5; private Object s2CContent_; public static final int S2C_DATA_FIELD_NUMBER = 6; private List<ActivityHandler.awardState> s2CData_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ActivityLevelOrSwordResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public boolean hasS2CBeginTime() { return ((this.bitField0_ & 0x4) == 4); } static { defaultInstance.initFields(); } public String getS2CBeginTime() { Object ref = this.s2CBeginTime_; if (ref instanceof String)
/*       */         return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8())
/*       */         this.s2CBeginTime_ = s;  return s; }
/*       */     public ByteString getS2CBeginTimeBytes() { Object ref = this.s2CBeginTime_; if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CBeginTime_ = b; return b;
/*       */       }  return (ByteString)ref; }
/*       */     public boolean hasS2CEndTime() { return ((this.bitField0_ & 0x8) == 8); }
/*       */     public String getS2CEndTime() { Object ref = this.s2CEndTime_; if (ref instanceof String)
/*       */         return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8())
/*       */         this.s2CEndTime_ = s;  return s; }
/*       */     public ByteString getS2CEndTimeBytes() { Object ref = this.s2CEndTime_; if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CEndTime_ = b; return b;
/*       */       }  return (ByteString)ref; }
/*       */     public boolean hasS2CContent() { return ((this.bitField0_ & 0x10) == 16); }
/*       */     public String getS2CContent() { Object ref = this.s2CContent_; if (ref instanceof String)
/*       */         return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8())
/*       */         this.s2CContent_ = s;  return s; }
/*       */     public ByteString getS2CContentBytes() { Object ref = this.s2CContent_; if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CContent_ = b; return b;
/*       */       }  return (ByteString)ref; }
/*       */     public List<ActivityHandler.awardState> getS2CDataList() { return this.s2CData_; }
/*       */     public List<? extends ActivityHandler.awardStateOrBuilder> getS2CDataOrBuilderList() { return (List)this.s2CData_; }
/*       */     public int getS2CDataCount() { return this.s2CData_.size(); }
/*       */     public ActivityHandler.awardState getS2CData(int index) { return this.s2CData_.get(index); }
/*       */     public ActivityHandler.awardStateOrBuilder getS2CDataOrBuilder(int index) { return this.s2CData_.get(index); }
/*       */     private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.s2CBeginTime_ = ""; this.s2CEndTime_ = ""; this.s2CContent_ = ""; this.s2CData_ = Collections.emptyList(); }
/*       */     public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1)
/*       */         return true;  if (isInitialized == 0)
/*       */         return false;  if (!hasS2CCode()) {
/*       */         this.memoizedIsInitialized = 0; return false;
/*       */       }  for (int i = 0; i < getS2CDataCount(); i++) {
/*       */         if (!getS2CData(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0; return false;
/*       */         } 
/*       */       }  this.memoizedIsInitialized = 1; return true; }
/*       */     public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1)
/*       */         output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2)
/*       */         output.writeBytes(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4)
/*       */         output.writeBytes(3, getS2CBeginTimeBytes());  if ((this.bitField0_ & 0x8) == 8)
/*       */         output.writeBytes(4, getS2CEndTimeBytes());  if ((this.bitField0_ & 0x10) == 16)
/*       */         output.writeBytes(5, getS2CContentBytes());  for (int i = 0; i < this.s2CData_.size(); i++)
/*       */         output.writeMessage(6, (MessageLite)this.s2CData_.get(i));  getUnknownFields().writeTo(output); }
/*       */     public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1)
/*       */         return size;  size = 0; if ((this.bitField0_ & 0x1) == 1)
/*       */         size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2)
/*       */         size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4)
/*       */         size += CodedOutputStream.computeBytesSize(3, getS2CBeginTimeBytes());  if ((this.bitField0_ & 0x8) == 8)
/*       */         size += CodedOutputStream.computeBytesSize(4, getS2CEndTimeBytes());  if ((this.bitField0_ & 0x10) == 16)
/*       */         size += CodedOutputStream.computeBytesSize(5, getS2CContentBytes());  for (int i = 0; i < this.s2CData_.size(); i++)
/*       */         size += CodedOutputStream.computeMessageSize(6, (MessageLite)this.s2CData_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; }
/*       */     protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); }
/*       */     public static ActivityLevelOrSwordResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ActivityLevelOrSwordResponse)PARSER.parseFrom(data); }
/*       */     public static ActivityLevelOrSwordResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityLevelOrSwordResponse)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static ActivityLevelOrSwordResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ActivityLevelOrSwordResponse)PARSER.parseFrom(data); }
/*       */     public static ActivityLevelOrSwordResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityLevelOrSwordResponse)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static ActivityLevelOrSwordResponse parseFrom(InputStream input) throws IOException { return (ActivityLevelOrSwordResponse)PARSER.parseFrom(input); }
/*       */     public static ActivityLevelOrSwordResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityLevelOrSwordResponse)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static ActivityLevelOrSwordResponse parseDelimitedFrom(InputStream input) throws IOException { return (ActivityLevelOrSwordResponse)PARSER.parseDelimitedFrom(input); }
/*       */     public static ActivityLevelOrSwordResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityLevelOrSwordResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); }
/*       */     public static ActivityLevelOrSwordResponse parseFrom(CodedInputStream input) throws IOException { return (ActivityLevelOrSwordResponse)PARSER.parseFrom(input); }
/*       */     public static ActivityLevelOrSwordResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityLevelOrSwordResponse)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static Builder newBuilder() { return Builder.create(); }
/*       */     public Builder newBuilderForType() { return newBuilder(); }
/*       */     public static Builder newBuilder(ActivityLevelOrSwordResponse prototype) { return newBuilder().mergeFrom(prototype); }
/*       */     public Builder toBuilder() { return newBuilder(this); }
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; }
/*       */     public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ActivityLevelOrSwordResponseOrBuilder { private int bitField0_; private int s2CCode_; private Object s2CMsg_; private Object s2CBeginTime_; private Object s2CEndTime_; private Object s2CContent_; private List<ActivityHandler.awardState> s2CData_; private RepeatedFieldBuilder<ActivityHandler.awardState, ActivityHandler.awardState.Builder, ActivityHandler.awardStateOrBuilder> s2CDataBuilder_;
/*       */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityLevelOrSwordResponse_descriptor; }
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityLevelOrSwordResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ActivityLevelOrSwordResponse.class, Builder.class); }
/*       */       private Builder() { this.s2CMsg_ = ""; this.s2CBeginTime_ = ""; this.s2CEndTime_ = ""; this.s2CContent_ = ""; this.s2CData_ = Collections.emptyList(); maybeForceBuilderInitialization(); }
/*       */       private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; this.s2CBeginTime_ = ""; this.s2CEndTime_ = ""; this.s2CContent_ = ""; this.s2CData_ = Collections.emptyList(); maybeForceBuilderInitialization(); }
/*       */       private void maybeForceBuilderInitialization() { if (ActivityHandler.ActivityLevelOrSwordResponse.alwaysUseFieldBuilders)
/*       */           getS2CDataFieldBuilder();  }
/*       */       private static Builder create() { return new Builder(); }
/*       */       public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; this.s2CBeginTime_ = ""; this.bitField0_ &= 0xFFFFFFFB; this.s2CEndTime_ = ""; this.bitField0_ &= 0xFFFFFFF7; this.s2CContent_ = ""; this.bitField0_ &= 0xFFFFFFEF; if (this.s2CDataBuilder_ == null) {
/*       */           this.s2CData_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFDF;
/*       */         } else {
/*       */           this.s2CDataBuilder_.clear();
/*       */         }  return this; }
/*       */       public Builder clone() { return create().mergeFrom(buildPartial()); }
/*       */       public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ActivityLevelOrSwordResponse_descriptor; }
/*       */       public ActivityHandler.ActivityLevelOrSwordResponse getDefaultInstanceForType() { return ActivityHandler.ActivityLevelOrSwordResponse.getDefaultInstance(); }
/*       */       public ActivityHandler.ActivityLevelOrSwordResponse build() { ActivityHandler.ActivityLevelOrSwordResponse result = buildPartial(); if (!result.isInitialized())
/*       */           throw newUninitializedMessageException(result);  return result; }
/*       */       public ActivityHandler.ActivityLevelOrSwordResponse buildPartial() { ActivityHandler.ActivityLevelOrSwordResponse result = new ActivityHandler.ActivityLevelOrSwordResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1)
/*       */           to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2)
/*       */           to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if ((from_bitField0_ & 0x4) == 4)
/*       */           to_bitField0_ |= 0x4;  result.s2CBeginTime_ = this.s2CBeginTime_; if ((from_bitField0_ & 0x8) == 8)
/*       */           to_bitField0_ |= 0x8;  result.s2CEndTime_ = this.s2CEndTime_; if ((from_bitField0_ & 0x10) == 16)
/*       */           to_bitField0_ |= 0x10;  result.s2CContent_ = this.s2CContent_; if (this.s2CDataBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x20) == 32) {
/*       */             this.s2CData_ = Collections.unmodifiableList(this.s2CData_); this.bitField0_ &= 0xFFFFFFDF;
/*       */           }  result.s2CData_ = this.s2CData_;
/*       */         } else {
/*       */           result.s2CData_ = this.s2CDataBuilder_.build();
/*       */         }  result.bitField0_ = to_bitField0_; onBuilt(); return result; }
/*       */       public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ActivityLevelOrSwordResponse)
/*       */           return mergeFrom((ActivityHandler.ActivityLevelOrSwordResponse)other);  super.mergeFrom(other); return this; }
/*       */       public Builder mergeFrom(ActivityHandler.ActivityLevelOrSwordResponse other) { if (other == ActivityHandler.ActivityLevelOrSwordResponse.getDefaultInstance())
/*       */           return this;  if (other.hasS2CCode())
/*       */           setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) {
/*       */           this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged();
/*       */         }  if (other.hasS2CBeginTime()) {
/*       */           this.bitField0_ |= 0x4; this.s2CBeginTime_ = other.s2CBeginTime_; onChanged();
/*       */         }  if (other.hasS2CEndTime()) {
/*       */           this.bitField0_ |= 0x8; this.s2CEndTime_ = other.s2CEndTime_; onChanged();
/*       */         }  if (other.hasS2CContent()) {
/*       */           this.bitField0_ |= 0x10; this.s2CContent_ = other.s2CContent_; onChanged();
/*       */         }  if (this.s2CDataBuilder_ == null) {
/*       */           if (!other.s2CData_.isEmpty()) {
/*       */             if (this.s2CData_.isEmpty()) {
/*       */               this.s2CData_ = other.s2CData_; this.bitField0_ &= 0xFFFFFFDF;
/*       */             } else {
/*       */               ensureS2CDataIsMutable(); this.s2CData_.addAll(other.s2CData_);
/*       */             }  onChanged();
/*       */           } 
/*       */         } else if (!other.s2CData_.isEmpty()) {
/*       */           if (this.s2CDataBuilder_.isEmpty()) {
/*       */             this.s2CDataBuilder_.dispose(); this.s2CDataBuilder_ = null; this.s2CData_ = other.s2CData_; this.bitField0_ &= 0xFFFFFFDF; this.s2CDataBuilder_ = ActivityHandler.ActivityLevelOrSwordResponse.alwaysUseFieldBuilders ? getS2CDataFieldBuilder() : null;
/*       */           } else {
/*       */             this.s2CDataBuilder_.addAllMessages(other.s2CData_);
/*       */           } 
/*       */         }  mergeUnknownFields(other.getUnknownFields()); return this; }
/*       */       public final boolean isInitialized() { if (!hasS2CCode())
/*       */           return false;  for (int i = 0; i < getS2CDataCount(); i++) {
/*       */           if (!getS2CData(i).isInitialized())
/*       */             return false; 
/*       */         }  return true; }
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ActivityLevelOrSwordResponse parsedMessage = null; try {
/*       */           parsedMessage = (ActivityHandler.ActivityLevelOrSwordResponse)ActivityHandler.ActivityLevelOrSwordResponse.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (ActivityHandler.ActivityLevelOrSwordResponse)e.getUnfinishedMessage(); throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null)
/*       */             mergeFrom(parsedMessage); 
/*       */         }  return this; }
/*       */       public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); }
/*       */       public int getS2CCode() { return this.s2CCode_; }
/*       */       public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; }
/*       */       public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; }
/*       */       public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); }
/*       */       public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8())
/*       */             this.s2CMsg_ = s;  return s;
/*       */         }  return (String)ref; }
/*       */       public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b;
/*       */         }  return (ByteString)ref; }
/*       */       public Builder setS2CMsg(String value) { if (value == null)
/*       */           throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; }
/*       */       public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = ActivityHandler.ActivityLevelOrSwordResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; }
/*       */       public Builder setS2CMsgBytes(ByteString value) { if (value == null)
/*       */           throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; }
/*       */       public boolean hasS2CBeginTime() { return ((this.bitField0_ & 0x4) == 4); }
/*       */       public String getS2CBeginTime() { Object ref = this.s2CBeginTime_; if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8())
/*       */             this.s2CBeginTime_ = s;  return s;
/*       */         }  return (String)ref; }
/*       */       public ByteString getS2CBeginTimeBytes() { Object ref = this.s2CBeginTime_; if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CBeginTime_ = b; return b;
/*       */         }  return (ByteString)ref; }
/*       */       public Builder setS2CBeginTime(String value) { if (value == null)
/*       */           throw new NullPointerException();  this.bitField0_ |= 0x4; this.s2CBeginTime_ = value; onChanged(); return this; }
/*       */       public Builder clearS2CBeginTime() { this.bitField0_ &= 0xFFFFFFFB; this.s2CBeginTime_ = ActivityHandler.ActivityLevelOrSwordResponse.getDefaultInstance().getS2CBeginTime(); onChanged(); return this; }
/*       */       public Builder setS2CBeginTimeBytes(ByteString value) { if (value == null)
/*       */           throw new NullPointerException();  this.bitField0_ |= 0x4; this.s2CBeginTime_ = value; onChanged(); return this; }
/*       */       public boolean hasS2CEndTime() { return ((this.bitField0_ & 0x8) == 8); }
/*       */       public String getS2CEndTime() { Object ref = this.s2CEndTime_; if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8())
/*       */             this.s2CEndTime_ = s;  return s;
/*       */         }  return (String)ref; }
/*       */       public ByteString getS2CEndTimeBytes() { Object ref = this.s2CEndTime_; if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CEndTime_ = b; return b;
/*       */         }  return (ByteString)ref; }
/*       */       public Builder setS2CEndTime(String value) { if (value == null)
/*       */           throw new NullPointerException();  this.bitField0_ |= 0x8; this.s2CEndTime_ = value; onChanged(); return this; }
/*       */       public Builder clearS2CEndTime() { this.bitField0_ &= 0xFFFFFFF7; this.s2CEndTime_ = ActivityHandler.ActivityLevelOrSwordResponse.getDefaultInstance().getS2CEndTime(); onChanged(); return this; }
/*       */       public Builder setS2CEndTimeBytes(ByteString value) { if (value == null)
/*       */           throw new NullPointerException();  this.bitField0_ |= 0x8; this.s2CEndTime_ = value; onChanged(); return this; }
/*       */       public boolean hasS2CContent() { return ((this.bitField0_ & 0x10) == 16); }
/*       */       public String getS2CContent() { Object ref = this.s2CContent_; if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8())
/*       */             this.s2CContent_ = s;  return s;
/*       */         }  return (String)ref; }
/*       */       public ByteString getS2CContentBytes() { Object ref = this.s2CContent_; if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CContent_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref; }
/*       */       public Builder setS2CContent(String value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x10;
/*       */         this.s2CContent_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearS2CContent() { this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.s2CContent_ = ActivityHandler.ActivityLevelOrSwordResponse.getDefaultInstance().getS2CContent();
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder setS2CContentBytes(ByteString value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x10;
/*       */         this.s2CContent_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       private void ensureS2CDataIsMutable() { if ((this.bitField0_ & 0x20) != 32) {
/*       */           this.s2CData_ = new ArrayList<>(this.s2CData_);
/*       */           this.bitField0_ |= 0x20;
/*       */         }  }
/*       */       public List<ActivityHandler.awardState> getS2CDataList() { if (this.s2CDataBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.s2CData_); 
/*       */         return this.s2CDataBuilder_.getMessageList(); }
/*       */       public int getS2CDataCount() { if (this.s2CDataBuilder_ == null)
/*       */           return this.s2CData_.size(); 
/*       */         return this.s2CDataBuilder_.getCount(); }
/*       */       public ActivityHandler.awardState getS2CData(int index) { if (this.s2CDataBuilder_ == null)
/*       */           return this.s2CData_.get(index); 
/*       */         return (ActivityHandler.awardState)this.s2CDataBuilder_.getMessage(index); }
/*       */       public Builder setS2CData(int index, ActivityHandler.awardState value) { if (this.s2CDataBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.setMessage(index, value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder setS2CData(int index, ActivityHandler.awardState.Builder builderForValue) { if (this.s2CDataBuilder_ == null) {
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.setMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addS2CData(ActivityHandler.awardState value) { if (this.s2CDataBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.addMessage(value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder addS2CData(int index, ActivityHandler.awardState value) { if (this.s2CDataBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.addMessage(index, value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder addS2CData(ActivityHandler.awardState.Builder builderForValue) { if (this.s2CDataBuilder_ == null) {
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.addMessage(builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addS2CData(int index, ActivityHandler.awardState.Builder builderForValue) { if (this.s2CDataBuilder_ == null) {
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.addMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addAllS2CData(Iterable<? extends ActivityHandler.awardState> values) { if (this.s2CDataBuilder_ == null) {
/*       */           ensureS2CDataIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.s2CData_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this; }
/*       */       public Builder clearS2CData() { if (this.s2CDataBuilder_ == null) {
/*       */           this.s2CData_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFDF;
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.clear();
/*       */         } 
/*       */         return this; }
/*       */       public Builder removeS2CData(int index) { if (this.s2CDataBuilder_ == null) {
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.remove(index);
/*       */         } 
/*       */         return this; }
/*       */       public ActivityHandler.awardState.Builder getS2CDataBuilder(int index) { return (ActivityHandler.awardState.Builder)getS2CDataFieldBuilder().getBuilder(index); }
/*       */       public ActivityHandler.awardStateOrBuilder getS2CDataOrBuilder(int index) { if (this.s2CDataBuilder_ == null)
/*       */           return this.s2CData_.get(index); 
/*       */         return (ActivityHandler.awardStateOrBuilder)this.s2CDataBuilder_.getMessageOrBuilder(index); }
/*       */       public List<? extends ActivityHandler.awardStateOrBuilder> getS2CDataOrBuilderList() { if (this.s2CDataBuilder_ != null)
/*       */           return this.s2CDataBuilder_.getMessageOrBuilderList(); 
/*       */         return Collections.unmodifiableList((List)this.s2CData_); }
/*       */       public ActivityHandler.awardState.Builder addS2CDataBuilder() { return (ActivityHandler.awardState.Builder)getS2CDataFieldBuilder().addBuilder(ActivityHandler.awardState.getDefaultInstance()); }
/*       */       public ActivityHandler.awardState.Builder addS2CDataBuilder(int index) { return (ActivityHandler.awardState.Builder)getS2CDataFieldBuilder().addBuilder(index, ActivityHandler.awardState.getDefaultInstance()); }
/*       */       public List<ActivityHandler.awardState.Builder> getS2CDataBuilderList() { return getS2CDataFieldBuilder().getBuilderList(); }
/*       */       private RepeatedFieldBuilder<ActivityHandler.awardState, ActivityHandler.awardState.Builder, ActivityHandler.awardStateOrBuilder> getS2CDataFieldBuilder() { if (this.s2CDataBuilder_ == null) {
/*       */           this.s2CDataBuilder_ = new RepeatedFieldBuilder(this.s2CData_, ((this.bitField0_ & 0x20) == 32), getParentForChildren(), isClean());
/*       */           this.s2CData_ = null;
/*       */         } 
/*       */         return this.s2CDataBuilder_; } } }
/* 18246 */   public static final class ActivityBuyFundsReq extends GeneratedMessage implements ActivityBuyFundsReqOrBuilder { private static final ActivityBuyFundsReq defaultInstance = new ActivityBuyFundsReq(true); private final UnknownFieldSet unknownFields; private ActivityBuyFundsReq(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ActivityBuyFundsReq(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ActivityBuyFundsReq getDefaultInstance() { return defaultInstance; } public ActivityBuyFundsReq getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ActivityBuyFundsReq(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityBuyFundsReq_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityBuyFundsReq_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityBuyFundsReq.class, Builder.class); } public static Parser<ActivityBuyFundsReq> PARSER = (Parser<ActivityBuyFundsReq>)new AbstractParser<ActivityBuyFundsReq>() { public ActivityHandler.ActivityBuyFundsReq parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ActivityBuyFundsReq(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ActivityBuyFundsReq> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ActivityBuyFundsReq parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ActivityBuyFundsReq)PARSER.parseFrom(data); } public static ActivityBuyFundsReq parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityBuyFundsReq)PARSER.parseFrom(data, extensionRegistry); } public static ActivityBuyFundsReq parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ActivityBuyFundsReq)PARSER.parseFrom(data); } public static ActivityBuyFundsReq parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityBuyFundsReq)PARSER.parseFrom(data, extensionRegistry); } public static ActivityBuyFundsReq parseFrom(InputStream input) throws IOException { return (ActivityBuyFundsReq)PARSER.parseFrom(input); } public static ActivityBuyFundsReq parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityBuyFundsReq)PARSER.parseFrom(input, extensionRegistry); } public static ActivityBuyFundsReq parseDelimitedFrom(InputStream input) throws IOException { return (ActivityBuyFundsReq)PARSER.parseDelimitedFrom(input); } public static ActivityBuyFundsReq parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityBuyFundsReq)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ActivityBuyFundsReq parseFrom(CodedInputStream input) throws IOException { return (ActivityBuyFundsReq)PARSER.parseFrom(input); } public static ActivityBuyFundsReq parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityBuyFundsReq)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ActivityBuyFundsReq prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ActivityBuyFundsReqOrBuilder {
/* 18247 */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityBuyFundsReq_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityBuyFundsReq_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ActivityBuyFundsReq.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.ActivityBuyFundsReq.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ActivityBuyFundsReq_descriptor; } public ActivityHandler.ActivityBuyFundsReq getDefaultInstanceForType() { return ActivityHandler.ActivityBuyFundsReq.getDefaultInstance(); } public ActivityHandler.ActivityBuyFundsReq build() { ActivityHandler.ActivityBuyFundsReq result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.ActivityBuyFundsReq buildPartial() { ActivityHandler.ActivityBuyFundsReq result = new ActivityHandler.ActivityBuyFundsReq(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ActivityBuyFundsReq) return mergeFrom((ActivityHandler.ActivityBuyFundsReq)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.ActivityBuyFundsReq other) { if (other == ActivityHandler.ActivityBuyFundsReq.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ActivityBuyFundsReq parsedMessage = null; try { parsedMessage = (ActivityHandler.ActivityBuyFundsReq)ActivityHandler.ActivityBuyFundsReq.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.ActivityBuyFundsReq)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */      }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ActivityBuyFundsRes
/*       */     extends GeneratedMessage
/*       */     implements ActivityBuyFundsResOrBuilder
/*       */   {
/* 18808 */     private static final ActivityBuyFundsRes defaultInstance = new ActivityBuyFundsRes(true); private final UnknownFieldSet unknownFields; private ActivityBuyFundsRes(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ActivityBuyFundsRes(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ActivityBuyFundsRes getDefaultInstance() { return defaultInstance; } public ActivityBuyFundsRes getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ActivityBuyFundsRes(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityBuyFundsRes_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityBuyFundsRes_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityBuyFundsRes.class, Builder.class); } public static Parser<ActivityBuyFundsRes> PARSER = (Parser<ActivityBuyFundsRes>)new AbstractParser<ActivityBuyFundsRes>() { public ActivityHandler.ActivityBuyFundsRes parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ActivityBuyFundsRes(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ActivityBuyFundsRes> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ActivityBuyFundsRes parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ActivityBuyFundsRes)PARSER.parseFrom(data); } public static ActivityBuyFundsRes parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityBuyFundsRes)PARSER.parseFrom(data, extensionRegistry); } public static ActivityBuyFundsRes parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ActivityBuyFundsRes)PARSER.parseFrom(data); } public static ActivityBuyFundsRes parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityBuyFundsRes)PARSER.parseFrom(data, extensionRegistry); } public static ActivityBuyFundsRes parseFrom(InputStream input) throws IOException { return (ActivityBuyFundsRes)PARSER.parseFrom(input); } public static ActivityBuyFundsRes parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityBuyFundsRes)PARSER.parseFrom(input, extensionRegistry); } public static ActivityBuyFundsRes parseDelimitedFrom(InputStream input) throws IOException { return (ActivityBuyFundsRes)PARSER.parseDelimitedFrom(input); } public static ActivityBuyFundsRes parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityBuyFundsRes)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ActivityBuyFundsRes parseFrom(CodedInputStream input) throws IOException { return (ActivityBuyFundsRes)PARSER.parseFrom(input); } public static ActivityBuyFundsRes parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityBuyFundsRes)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ActivityBuyFundsRes prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ActivityBuyFundsResOrBuilder {
/* 18809 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityBuyFundsRes_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityBuyFundsRes_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ActivityBuyFundsRes.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.ActivityBuyFundsRes.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ActivityBuyFundsRes_descriptor; } public ActivityHandler.ActivityBuyFundsRes getDefaultInstanceForType() { return ActivityHandler.ActivityBuyFundsRes.getDefaultInstance(); } public ActivityHandler.ActivityBuyFundsRes build() { ActivityHandler.ActivityBuyFundsRes result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.ActivityBuyFundsRes buildPartial() { ActivityHandler.ActivityBuyFundsRes result = new ActivityHandler.ActivityBuyFundsRes(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ActivityBuyFundsRes) return mergeFrom((ActivityHandler.ActivityBuyFundsRes)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.ActivityBuyFundsRes other) { if (other == ActivityHandler.ActivityBuyFundsRes.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ActivityBuyFundsRes parsedMessage = null; try { parsedMessage = (ActivityHandler.ActivityBuyFundsRes)ActivityHandler.ActivityBuyFundsRes.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.ActivityBuyFundsRes)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = ActivityHandler.ActivityBuyFundsRes.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ActivityOpenFundsReq
/*       */     extends GeneratedMessage
/*       */     implements ActivityOpenFundsReqOrBuilder
/*       */   {
/* 19121 */     private static final ActivityOpenFundsReq defaultInstance = new ActivityOpenFundsReq(true); private final UnknownFieldSet unknownFields; private ActivityOpenFundsReq(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ActivityOpenFundsReq(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ActivityOpenFundsReq getDefaultInstance() { return defaultInstance; } public ActivityOpenFundsReq getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ActivityOpenFundsReq(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityOpenFundsReq_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityOpenFundsReq_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityOpenFundsReq.class, Builder.class); } public static Parser<ActivityOpenFundsReq> PARSER = (Parser<ActivityOpenFundsReq>)new AbstractParser<ActivityOpenFundsReq>() { public ActivityHandler.ActivityOpenFundsReq parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ActivityOpenFundsReq(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ActivityOpenFundsReq> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ActivityOpenFundsReq parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ActivityOpenFundsReq)PARSER.parseFrom(data); } public static ActivityOpenFundsReq parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityOpenFundsReq)PARSER.parseFrom(data, extensionRegistry); } public static ActivityOpenFundsReq parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ActivityOpenFundsReq)PARSER.parseFrom(data); } public static ActivityOpenFundsReq parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityOpenFundsReq)PARSER.parseFrom(data, extensionRegistry); } public static ActivityOpenFundsReq parseFrom(InputStream input) throws IOException { return (ActivityOpenFundsReq)PARSER.parseFrom(input); } public static ActivityOpenFundsReq parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityOpenFundsReq)PARSER.parseFrom(input, extensionRegistry); } public static ActivityOpenFundsReq parseDelimitedFrom(InputStream input) throws IOException { return (ActivityOpenFundsReq)PARSER.parseDelimitedFrom(input); } public static ActivityOpenFundsReq parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityOpenFundsReq)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ActivityOpenFundsReq parseFrom(CodedInputStream input) throws IOException { return (ActivityOpenFundsReq)PARSER.parseFrom(input); } public static ActivityOpenFundsReq parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityOpenFundsReq)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ActivityOpenFundsReq prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ActivityOpenFundsReqOrBuilder {
/* 19122 */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityOpenFundsReq_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityOpenFundsReq_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ActivityOpenFundsReq.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.ActivityOpenFundsReq.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ActivityOpenFundsReq_descriptor; } public ActivityHandler.ActivityOpenFundsReq getDefaultInstanceForType() { return ActivityHandler.ActivityOpenFundsReq.getDefaultInstance(); } public ActivityHandler.ActivityOpenFundsReq build() { ActivityHandler.ActivityOpenFundsReq result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.ActivityOpenFundsReq buildPartial() { ActivityHandler.ActivityOpenFundsReq result = new ActivityHandler.ActivityOpenFundsReq(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ActivityOpenFundsReq) return mergeFrom((ActivityHandler.ActivityOpenFundsReq)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.ActivityOpenFundsReq other) { if (other == ActivityHandler.ActivityOpenFundsReq.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ActivityOpenFundsReq parsedMessage = null; try { parsedMessage = (ActivityHandler.ActivityOpenFundsReq)ActivityHandler.ActivityOpenFundsReq.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.ActivityOpenFundsReq)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ActivityOpenFundsRes
/*       */     extends GeneratedMessage
/*       */     implements ActivityOpenFundsResOrBuilder
/*       */   {
/* 20431 */     private static final ActivityOpenFundsRes defaultInstance = new ActivityOpenFundsRes(true); private final UnknownFieldSet unknownFields; private ActivityOpenFundsRes(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ActivityOpenFundsRes(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ActivityOpenFundsRes getDefaultInstance() { return defaultInstance; } public ActivityOpenFundsRes getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ActivityOpenFundsRes(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 24: this.bitField0_ |= 0x4; this.s2CHasBuyNum_ = input.readInt32(); break;case 32: this.bitField0_ |= 0x8; this.s2CNeedDiamond_ = input.readInt32(); break;case 40: this.bitField0_ |= 0x10; this.s2CNeedVipLevel_ = input.readInt32(); break;case 48: this.bitField0_ |= 0x20; this.s2CBuyState_ = input.readInt32(); break;case 58: if ((mutable_bitField0_ & 0x40) != 64) { this.s2CData_ = new ArrayList<>(); mutable_bitField0_ |= 0x40; }  this.s2CData_.add(input.readMessage(ActivityHandler.openFundsAward.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x40) == 64) this.s2CData_ = Collections.unmodifiableList(this.s2CData_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityOpenFundsRes_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityOpenFundsRes_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityOpenFundsRes.class, Builder.class); } public static Parser<ActivityOpenFundsRes> PARSER = (Parser<ActivityOpenFundsRes>)new AbstractParser<ActivityOpenFundsRes>() { public ActivityHandler.ActivityOpenFundsRes parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ActivityOpenFundsRes(input, extensionRegistry); } }
/* 20432 */     ; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_HASBUYNUM_FIELD_NUMBER = 3; private int s2CHasBuyNum_; public static final int S2C_NEEDDIAMOND_FIELD_NUMBER = 4; private int s2CNeedDiamond_; public static final int S2C_NEEDVIPLEVEL_FIELD_NUMBER = 5; private int s2CNeedVipLevel_; public static final int S2C_BUYSTATE_FIELD_NUMBER = 6; private int s2CBuyState_; public static final int S2C_DATA_FIELD_NUMBER = 7; private List<ActivityHandler.openFundsAward> s2CData_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ActivityOpenFundsRes> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } static { defaultInstance.initFields(); } public boolean hasS2CHasBuyNum() { return ((this.bitField0_ & 0x4) == 4); }
/*       */     public int getS2CHasBuyNum() { return this.s2CHasBuyNum_; }
/*       */     public boolean hasS2CNeedDiamond() { return ((this.bitField0_ & 0x8) == 8); }
/*       */     public int getS2CNeedDiamond() { return this.s2CNeedDiamond_; }
/*       */     public boolean hasS2CNeedVipLevel() { return ((this.bitField0_ & 0x10) == 16); }
/*       */     public int getS2CNeedVipLevel() { return this.s2CNeedVipLevel_; }
/*       */     public boolean hasS2CBuyState() { return ((this.bitField0_ & 0x20) == 32); }
/*       */     public int getS2CBuyState() { return this.s2CBuyState_; }
/*       */     public List<ActivityHandler.openFundsAward> getS2CDataList() { return this.s2CData_; }
/*       */     public List<? extends ActivityHandler.openFundsAwardOrBuilder> getS2CDataOrBuilderList() { return (List)this.s2CData_; }
/*       */     public int getS2CDataCount() { return this.s2CData_.size(); }
/*       */     public ActivityHandler.openFundsAward getS2CData(int index) { return this.s2CData_.get(index); }
/*       */     public ActivityHandler.openFundsAwardOrBuilder getS2CDataOrBuilder(int index) { return this.s2CData_.get(index); }
/*       */     private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.s2CHasBuyNum_ = 0; this.s2CNeedDiamond_ = 0; this.s2CNeedVipLevel_ = 0; this.s2CBuyState_ = 0; this.s2CData_ = Collections.emptyList(); }
/*       */     public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1)
/*       */         return true;  if (isInitialized == 0)
/*       */         return false;  if (!hasS2CCode()) {
/*       */         this.memoizedIsInitialized = 0; return false;
/*       */       }  if (!hasS2CHasBuyNum()) {
/*       */         this.memoizedIsInitialized = 0; return false;
/*       */       }  if (!hasS2CNeedDiamond()) {
/*       */         this.memoizedIsInitialized = 0; return false;
/*       */       }  if (!hasS2CNeedVipLevel()) {
/*       */         this.memoizedIsInitialized = 0; return false;
/*       */       }  if (!hasS2CBuyState()) {
/*       */         this.memoizedIsInitialized = 0; return false;
/*       */       }  for (int i = 0; i < getS2CDataCount(); i++) {
/*       */         if (!getS2CData(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0; return false;
/*       */         } 
/*       */       }  this.memoizedIsInitialized = 1; return true; }
/*       */     public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1)
/*       */         output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2)
/*       */         output.writeBytes(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4)
/*       */         output.writeInt32(3, this.s2CHasBuyNum_);  if ((this.bitField0_ & 0x8) == 8)
/*       */         output.writeInt32(4, this.s2CNeedDiamond_);  if ((this.bitField0_ & 0x10) == 16)
/*       */         output.writeInt32(5, this.s2CNeedVipLevel_);  if ((this.bitField0_ & 0x20) == 32)
/*       */         output.writeInt32(6, this.s2CBuyState_);  for (int i = 0; i < this.s2CData_.size(); i++)
/*       */         output.writeMessage(7, (MessageLite)this.s2CData_.get(i));  getUnknownFields().writeTo(output); }
/*       */     public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1)
/*       */         return size;  size = 0; if ((this.bitField0_ & 0x1) == 1)
/*       */         size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2)
/*       */         size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4)
/*       */         size += CodedOutputStream.computeInt32Size(3, this.s2CHasBuyNum_);  if ((this.bitField0_ & 0x8) == 8)
/*       */         size += CodedOutputStream.computeInt32Size(4, this.s2CNeedDiamond_);  if ((this.bitField0_ & 0x10) == 16)
/*       */         size += CodedOutputStream.computeInt32Size(5, this.s2CNeedVipLevel_);  if ((this.bitField0_ & 0x20) == 32)
/*       */         size += CodedOutputStream.computeInt32Size(6, this.s2CBuyState_);  for (int i = 0; i < this.s2CData_.size(); i++)
/*       */         size += CodedOutputStream.computeMessageSize(7, (MessageLite)this.s2CData_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; }
/*       */     protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); }
/*       */     public static ActivityOpenFundsRes parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ActivityOpenFundsRes)PARSER.parseFrom(data); }
/*       */     public static ActivityOpenFundsRes parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityOpenFundsRes)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static ActivityOpenFundsRes parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ActivityOpenFundsRes)PARSER.parseFrom(data); }
/*       */     public static ActivityOpenFundsRes parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityOpenFundsRes)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static ActivityOpenFundsRes parseFrom(InputStream input) throws IOException { return (ActivityOpenFundsRes)PARSER.parseFrom(input); }
/*       */     public static ActivityOpenFundsRes parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityOpenFundsRes)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static ActivityOpenFundsRes parseDelimitedFrom(InputStream input) throws IOException { return (ActivityOpenFundsRes)PARSER.parseDelimitedFrom(input); }
/*       */     public static ActivityOpenFundsRes parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityOpenFundsRes)PARSER.parseDelimitedFrom(input, extensionRegistry); }
/*       */     public static ActivityOpenFundsRes parseFrom(CodedInputStream input) throws IOException { return (ActivityOpenFundsRes)PARSER.parseFrom(input); }
/*       */     public static ActivityOpenFundsRes parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityOpenFundsRes)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static Builder newBuilder() { return Builder.create(); }
/*       */     public Builder newBuilderForType() { return newBuilder(); }
/*       */     public static Builder newBuilder(ActivityOpenFundsRes prototype) { return newBuilder().mergeFrom(prototype); }
/*       */     public Builder toBuilder() { return newBuilder(this); }
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; }
/*       */     public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ActivityOpenFundsResOrBuilder { private int bitField0_; private int s2CCode_; private Object s2CMsg_; private int s2CHasBuyNum_; private int s2CNeedDiamond_; private int s2CNeedVipLevel_; private int s2CBuyState_; private List<ActivityHandler.openFundsAward> s2CData_; private RepeatedFieldBuilder<ActivityHandler.openFundsAward, ActivityHandler.openFundsAward.Builder, ActivityHandler.openFundsAwardOrBuilder> s2CDataBuilder_;
/*       */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityOpenFundsRes_descriptor; }
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityOpenFundsRes_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ActivityOpenFundsRes.class, Builder.class); }
/*       */       private Builder() { this.s2CMsg_ = ""; this.s2CData_ = Collections.emptyList(); maybeForceBuilderInitialization(); }
/*       */       private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; this.s2CData_ = Collections.emptyList(); maybeForceBuilderInitialization(); }
/*       */       private void maybeForceBuilderInitialization() { if (ActivityHandler.ActivityOpenFundsRes.alwaysUseFieldBuilders)
/*       */           getS2CDataFieldBuilder();  }
/*       */       private static Builder create() { return new Builder(); }
/*       */       public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; this.s2CHasBuyNum_ = 0; this.bitField0_ &= 0xFFFFFFFB; this.s2CNeedDiamond_ = 0; this.bitField0_ &= 0xFFFFFFF7; this.s2CNeedVipLevel_ = 0; this.bitField0_ &= 0xFFFFFFEF; this.s2CBuyState_ = 0; this.bitField0_ &= 0xFFFFFFDF; if (this.s2CDataBuilder_ == null) {
/*       */           this.s2CData_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFBF;
/*       */         } else {
/*       */           this.s2CDataBuilder_.clear();
/*       */         }  return this; }
/*       */       public Builder clone() { return create().mergeFrom(buildPartial()); }
/*       */       public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ActivityOpenFundsRes_descriptor; }
/*       */       public ActivityHandler.ActivityOpenFundsRes getDefaultInstanceForType() { return ActivityHandler.ActivityOpenFundsRes.getDefaultInstance(); }
/*       */       public ActivityHandler.ActivityOpenFundsRes build() { ActivityHandler.ActivityOpenFundsRes result = buildPartial(); if (!result.isInitialized())
/*       */           throw newUninitializedMessageException(result);  return result; }
/*       */       public ActivityHandler.ActivityOpenFundsRes buildPartial() { ActivityHandler.ActivityOpenFundsRes result = new ActivityHandler.ActivityOpenFundsRes(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1)
/*       */           to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2)
/*       */           to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if ((from_bitField0_ & 0x4) == 4)
/*       */           to_bitField0_ |= 0x4;  result.s2CHasBuyNum_ = this.s2CHasBuyNum_; if ((from_bitField0_ & 0x8) == 8)
/*       */           to_bitField0_ |= 0x8;  result.s2CNeedDiamond_ = this.s2CNeedDiamond_; if ((from_bitField0_ & 0x10) == 16)
/*       */           to_bitField0_ |= 0x10;  result.s2CNeedVipLevel_ = this.s2CNeedVipLevel_; if ((from_bitField0_ & 0x20) == 32)
/*       */           to_bitField0_ |= 0x20;  result.s2CBuyState_ = this.s2CBuyState_; if (this.s2CDataBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x40) == 64) {
/*       */             this.s2CData_ = Collections.unmodifiableList(this.s2CData_); this.bitField0_ &= 0xFFFFFFBF;
/*       */           }  result.s2CData_ = this.s2CData_;
/*       */         } else {
/*       */           result.s2CData_ = this.s2CDataBuilder_.build();
/*       */         }  result.bitField0_ = to_bitField0_; onBuilt(); return result; }
/*       */       public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ActivityOpenFundsRes)
/*       */           return mergeFrom((ActivityHandler.ActivityOpenFundsRes)other);  super.mergeFrom(other); return this; }
/*       */       public Builder mergeFrom(ActivityHandler.ActivityOpenFundsRes other) { if (other == ActivityHandler.ActivityOpenFundsRes.getDefaultInstance())
/*       */           return this;  if (other.hasS2CCode())
/*       */           setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) {
/*       */           this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged();
/*       */         }  if (other.hasS2CHasBuyNum())
/*       */           setS2CHasBuyNum(other.getS2CHasBuyNum());  if (other.hasS2CNeedDiamond())
/*       */           setS2CNeedDiamond(other.getS2CNeedDiamond());  if (other.hasS2CNeedVipLevel())
/*       */           setS2CNeedVipLevel(other.getS2CNeedVipLevel());  if (other.hasS2CBuyState())
/*       */           setS2CBuyState(other.getS2CBuyState());  if (this.s2CDataBuilder_ == null) {
/*       */           if (!other.s2CData_.isEmpty()) {
/*       */             if (this.s2CData_.isEmpty()) {
/*       */               this.s2CData_ = other.s2CData_; this.bitField0_ &= 0xFFFFFFBF;
/*       */             } else {
/*       */               ensureS2CDataIsMutable(); this.s2CData_.addAll(other.s2CData_);
/*       */             }  onChanged();
/*       */           } 
/*       */         } else if (!other.s2CData_.isEmpty()) {
/*       */           if (this.s2CDataBuilder_.isEmpty()) {
/*       */             this.s2CDataBuilder_.dispose(); this.s2CDataBuilder_ = null; this.s2CData_ = other.s2CData_; this.bitField0_ &= 0xFFFFFFBF; this.s2CDataBuilder_ = ActivityHandler.ActivityOpenFundsRes.alwaysUseFieldBuilders ? getS2CDataFieldBuilder() : null;
/*       */           } else {
/*       */             this.s2CDataBuilder_.addAllMessages(other.s2CData_);
/*       */           } 
/*       */         }  mergeUnknownFields(other.getUnknownFields()); return this; }
/*       */       public final boolean isInitialized() { if (!hasS2CCode())
/*       */           return false;  if (!hasS2CHasBuyNum())
/*       */           return false;  if (!hasS2CNeedDiamond())
/*       */           return false;  if (!hasS2CNeedVipLevel())
/*       */           return false;  if (!hasS2CBuyState())
/*       */           return false;  for (int i = 0; i < getS2CDataCount(); i++) {
/*       */           if (!getS2CData(i).isInitialized())
/*       */             return false; 
/*       */         }  return true; }
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ActivityOpenFundsRes parsedMessage = null; try {
/*       */           parsedMessage = (ActivityHandler.ActivityOpenFundsRes)ActivityHandler.ActivityOpenFundsRes.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (ActivityHandler.ActivityOpenFundsRes)e.getUnfinishedMessage(); throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null)
/*       */             mergeFrom(parsedMessage); 
/*       */         }  return this; }
/*       */       public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); }
/*       */       public int getS2CCode() { return this.s2CCode_; }
/*       */       public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; }
/*       */       public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; }
/*       */       public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); }
/*       */       public String getS2CMsg() { Object ref = this.s2CMsg_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.s2CMsg_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref; }
/*       */       public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CMsg_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref; }
/*       */       public Builder setS2CMsg(String value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.s2CMsg_ = ActivityHandler.ActivityOpenFundsRes.getDefaultInstance().getS2CMsg();
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder setS2CMsgBytes(ByteString value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasS2CHasBuyNum() { return ((this.bitField0_ & 0x4) == 4); }
/*       */       public int getS2CHasBuyNum() { return this.s2CHasBuyNum_; }
/*       */       public Builder setS2CHasBuyNum(int value) { this.bitField0_ |= 0x4;
/*       */         this.s2CHasBuyNum_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearS2CHasBuyNum() { this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.s2CHasBuyNum_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasS2CNeedDiamond() { return ((this.bitField0_ & 0x8) == 8); }
/*       */       public int getS2CNeedDiamond() { return this.s2CNeedDiamond_; }
/*       */       public Builder setS2CNeedDiamond(int value) { this.bitField0_ |= 0x8;
/*       */         this.s2CNeedDiamond_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearS2CNeedDiamond() { this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.s2CNeedDiamond_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasS2CNeedVipLevel() { return ((this.bitField0_ & 0x10) == 16); }
/*       */       public int getS2CNeedVipLevel() { return this.s2CNeedVipLevel_; }
/*       */       public Builder setS2CNeedVipLevel(int value) { this.bitField0_ |= 0x10;
/*       */         this.s2CNeedVipLevel_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearS2CNeedVipLevel() { this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.s2CNeedVipLevel_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasS2CBuyState() { return ((this.bitField0_ & 0x20) == 32); }
/*       */       public int getS2CBuyState() { return this.s2CBuyState_; }
/*       */       public Builder setS2CBuyState(int value) { this.bitField0_ |= 0x20;
/*       */         this.s2CBuyState_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearS2CBuyState() { this.bitField0_ &= 0xFFFFFFDF;
/*       */         this.s2CBuyState_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       private void ensureS2CDataIsMutable() { if ((this.bitField0_ & 0x40) != 64) {
/*       */           this.s2CData_ = new ArrayList<>(this.s2CData_);
/*       */           this.bitField0_ |= 0x40;
/*       */         }  }
/*       */       public List<ActivityHandler.openFundsAward> getS2CDataList() { if (this.s2CDataBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.s2CData_); 
/*       */         return this.s2CDataBuilder_.getMessageList(); }
/*       */       public int getS2CDataCount() { if (this.s2CDataBuilder_ == null)
/*       */           return this.s2CData_.size(); 
/*       */         return this.s2CDataBuilder_.getCount(); }
/*       */       public ActivityHandler.openFundsAward getS2CData(int index) { if (this.s2CDataBuilder_ == null)
/*       */           return this.s2CData_.get(index); 
/*       */         return (ActivityHandler.openFundsAward)this.s2CDataBuilder_.getMessage(index); }
/*       */       public Builder setS2CData(int index, ActivityHandler.openFundsAward value) { if (this.s2CDataBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.setMessage(index, value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder setS2CData(int index, ActivityHandler.openFundsAward.Builder builderForValue) { if (this.s2CDataBuilder_ == null) {
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.setMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addS2CData(ActivityHandler.openFundsAward value) { if (this.s2CDataBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.addMessage(value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder addS2CData(int index, ActivityHandler.openFundsAward value) { if (this.s2CDataBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.addMessage(index, value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder addS2CData(ActivityHandler.openFundsAward.Builder builderForValue) { if (this.s2CDataBuilder_ == null) {
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.addMessage(builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addS2CData(int index, ActivityHandler.openFundsAward.Builder builderForValue) { if (this.s2CDataBuilder_ == null) {
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.addMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addAllS2CData(Iterable<? extends ActivityHandler.openFundsAward> values) { if (this.s2CDataBuilder_ == null) {
/*       */           ensureS2CDataIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.s2CData_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this; }
/*       */       public Builder clearS2CData() { if (this.s2CDataBuilder_ == null) {
/*       */           this.s2CData_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFBF;
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.clear();
/*       */         } 
/*       */         return this; }
/*       */       public Builder removeS2CData(int index) { if (this.s2CDataBuilder_ == null) {
/*       */           ensureS2CDataIsMutable();
/*       */           this.s2CData_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CDataBuilder_.remove(index);
/*       */         } 
/*       */         return this; }
/*       */       public ActivityHandler.openFundsAward.Builder getS2CDataBuilder(int index) { return (ActivityHandler.openFundsAward.Builder)getS2CDataFieldBuilder().getBuilder(index); }
/*       */       public ActivityHandler.openFundsAwardOrBuilder getS2CDataOrBuilder(int index) { if (this.s2CDataBuilder_ == null)
/*       */           return this.s2CData_.get(index); 
/*       */         return (ActivityHandler.openFundsAwardOrBuilder)this.s2CDataBuilder_.getMessageOrBuilder(index); }
/*       */       public List<? extends ActivityHandler.openFundsAwardOrBuilder> getS2CDataOrBuilderList() { if (this.s2CDataBuilder_ != null)
/*       */           return this.s2CDataBuilder_.getMessageOrBuilderList(); 
/*       */         return Collections.unmodifiableList((List)this.s2CData_); }
/*       */       public ActivityHandler.openFundsAward.Builder addS2CDataBuilder() { return (ActivityHandler.openFundsAward.Builder)getS2CDataFieldBuilder().addBuilder(ActivityHandler.openFundsAward.getDefaultInstance()); }
/*       */       public ActivityHandler.openFundsAward.Builder addS2CDataBuilder(int index) { return (ActivityHandler.openFundsAward.Builder)getS2CDataFieldBuilder().addBuilder(index, ActivityHandler.openFundsAward.getDefaultInstance()); }
/*       */       public List<ActivityHandler.openFundsAward.Builder> getS2CDataBuilderList() { return getS2CDataFieldBuilder().getBuilderList(); }
/*       */       private RepeatedFieldBuilder<ActivityHandler.openFundsAward, ActivityHandler.openFundsAward.Builder, ActivityHandler.openFundsAwardOrBuilder> getS2CDataFieldBuilder() { if (this.s2CDataBuilder_ == null) {
/*       */           this.s2CDataBuilder_ = new RepeatedFieldBuilder(this.s2CData_, ((this.bitField0_ & 0x40) == 64), getParentForChildren(), isClean());
/*       */           this.s2CData_ = null;
/*       */         } 
/*       */         return this.s2CDataBuilder_; } } }
/* 20752 */   public static final class ActivityLuckyAwardViewRequest extends GeneratedMessage implements ActivityLuckyAwardViewRequestOrBuilder { private static final ActivityLuckyAwardViewRequest defaultInstance = new ActivityLuckyAwardViewRequest(true); private final UnknownFieldSet unknownFields; private ActivityLuckyAwardViewRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ActivityLuckyAwardViewRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ActivityLuckyAwardViewRequest getDefaultInstance() { return defaultInstance; } public ActivityLuckyAwardViewRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ActivityLuckyAwardViewRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityLuckyAwardViewRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityLuckyAwardViewRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityLuckyAwardViewRequest.class, Builder.class); } public static Parser<ActivityLuckyAwardViewRequest> PARSER = (Parser<ActivityLuckyAwardViewRequest>)new AbstractParser<ActivityLuckyAwardViewRequest>() { public ActivityHandler.ActivityLuckyAwardViewRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ActivityLuckyAwardViewRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ActivityLuckyAwardViewRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ActivityLuckyAwardViewRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ActivityLuckyAwardViewRequest)PARSER.parseFrom(data); } public static ActivityLuckyAwardViewRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityLuckyAwardViewRequest)PARSER.parseFrom(data, extensionRegistry); } public static ActivityLuckyAwardViewRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ActivityLuckyAwardViewRequest)PARSER.parseFrom(data); } public static ActivityLuckyAwardViewRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityLuckyAwardViewRequest)PARSER.parseFrom(data, extensionRegistry); } public static ActivityLuckyAwardViewRequest parseFrom(InputStream input) throws IOException { return (ActivityLuckyAwardViewRequest)PARSER.parseFrom(input); } public static ActivityLuckyAwardViewRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityLuckyAwardViewRequest)PARSER.parseFrom(input, extensionRegistry); } public static ActivityLuckyAwardViewRequest parseDelimitedFrom(InputStream input) throws IOException { return (ActivityLuckyAwardViewRequest)PARSER.parseDelimitedFrom(input); } public static ActivityLuckyAwardViewRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityLuckyAwardViewRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ActivityLuckyAwardViewRequest parseFrom(CodedInputStream input) throws IOException { return (ActivityLuckyAwardViewRequest)PARSER.parseFrom(input); } public static ActivityLuckyAwardViewRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityLuckyAwardViewRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ActivityLuckyAwardViewRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ActivityLuckyAwardViewRequestOrBuilder {
/* 20753 */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityLuckyAwardViewRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityLuckyAwardViewRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ActivityLuckyAwardViewRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.ActivityLuckyAwardViewRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ActivityLuckyAwardViewRequest_descriptor; } public ActivityHandler.ActivityLuckyAwardViewRequest getDefaultInstanceForType() { return ActivityHandler.ActivityLuckyAwardViewRequest.getDefaultInstance(); } public ActivityHandler.ActivityLuckyAwardViewRequest build() { ActivityHandler.ActivityLuckyAwardViewRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.ActivityLuckyAwardViewRequest buildPartial() { ActivityHandler.ActivityLuckyAwardViewRequest result = new ActivityHandler.ActivityLuckyAwardViewRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ActivityLuckyAwardViewRequest) return mergeFrom((ActivityHandler.ActivityLuckyAwardViewRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.ActivityLuckyAwardViewRequest other) { if (other == ActivityHandler.ActivityLuckyAwardViewRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ActivityLuckyAwardViewRequest parsedMessage = null; try { parsedMessage = (ActivityHandler.ActivityLuckyAwardViewRequest)ActivityHandler.ActivityLuckyAwardViewRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.ActivityLuckyAwardViewRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */      }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class awardInfo
/*       */     extends GeneratedMessage
/*       */     implements awardInfoOrBuilder
/*       */   {
/* 21362 */     private static final awardInfo defaultInstance = new awardInfo(true); private final UnknownFieldSet unknownFields; private awardInfo(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private awardInfo(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static awardInfo getDefaultInstance() { return defaultInstance; } public awardInfo getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private awardInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ItemOuterClass.MiniItem.Builder subBuilder; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.pos_ = input.readInt32(); break;case 18: subBuilder = null; if ((this.bitField0_ & 0x2) == 2) subBuilder = this.itemInfo_.toBuilder();  this.itemInfo_ = (ItemOuterClass.MiniItem)input.readMessage(ItemOuterClass.MiniItem.PARSER, extensionRegistry); if (subBuilder != null) { subBuilder.mergeFrom(this.itemInfo_); this.itemInfo_ = subBuilder.buildPartial(); }  this.bitField0_ |= 0x2; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_awardInfo_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_awardInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(awardInfo.class, Builder.class); } public static Parser<awardInfo> PARSER = (Parser<awardInfo>)new AbstractParser<awardInfo>() { public ActivityHandler.awardInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.awardInfo(input, extensionRegistry); } }; private int bitField0_; public static final int POS_FIELD_NUMBER = 1; private int pos_; public static final int ITEMINFO_FIELD_NUMBER = 2; private ItemOuterClass.MiniItem itemInfo_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<awardInfo> getParserForType() { return PARSER; } public boolean hasPos() { return ((this.bitField0_ & 0x1) == 1); } public int getPos() { return this.pos_; } public boolean hasItemInfo() { return ((this.bitField0_ & 0x2) == 2); } public ItemOuterClass.MiniItem getItemInfo() { return this.itemInfo_; } public ItemOuterClass.MiniItemOrBuilder getItemInfoOrBuilder() { return (ItemOuterClass.MiniItemOrBuilder)this.itemInfo_; } private void initFields() { this.pos_ = 0; this.itemInfo_ = ItemOuterClass.MiniItem.getDefaultInstance(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasPos()) { this.memoizedIsInitialized = 0; return false; }  if (!hasItemInfo()) { this.memoizedIsInitialized = 0; return false; }  if (!getItemInfo().isInitialized()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.pos_);  if ((this.bitField0_ & 0x2) == 2) output.writeMessage(2, (MessageLite)this.itemInfo_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.pos_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeMessageSize(2, (MessageLite)this.itemInfo_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static awardInfo parseFrom(ByteString data) throws InvalidProtocolBufferException { return (awardInfo)PARSER.parseFrom(data); } public static awardInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (awardInfo)PARSER.parseFrom(data, extensionRegistry); } public static awardInfo parseFrom(byte[] data) throws InvalidProtocolBufferException { return (awardInfo)PARSER.parseFrom(data); } public static awardInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (awardInfo)PARSER.parseFrom(data, extensionRegistry); } public static awardInfo parseFrom(InputStream input) throws IOException { return (awardInfo)PARSER.parseFrom(input); } public static awardInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (awardInfo)PARSER.parseFrom(input, extensionRegistry); } public static awardInfo parseDelimitedFrom(InputStream input) throws IOException { return (awardInfo)PARSER.parseDelimitedFrom(input); } public static awardInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (awardInfo)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static awardInfo parseFrom(CodedInputStream input) throws IOException { return (awardInfo)PARSER.parseFrom(input); } public static awardInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (awardInfo)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(awardInfo prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.awardInfoOrBuilder {
/* 21363 */       private int bitField0_; private int pos_; private ItemOuterClass.MiniItem itemInfo_; private SingleFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> itemInfoBuilder_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_awardInfo_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_awardInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.awardInfo.class, Builder.class); } private Builder() { this.itemInfo_ = ItemOuterClass.MiniItem.getDefaultInstance(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.itemInfo_ = ItemOuterClass.MiniItem.getDefaultInstance(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.awardInfo.alwaysUseFieldBuilders) getItemInfoFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.pos_ = 0; this.bitField0_ &= 0xFFFFFFFE; if (this.itemInfoBuilder_ == null) { this.itemInfo_ = ItemOuterClass.MiniItem.getDefaultInstance(); } else { this.itemInfoBuilder_.clear(); }  this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_awardInfo_descriptor; } public ActivityHandler.awardInfo getDefaultInstanceForType() { return ActivityHandler.awardInfo.getDefaultInstance(); } public ActivityHandler.awardInfo build() { ActivityHandler.awardInfo result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.awardInfo buildPartial() { ActivityHandler.awardInfo result = new ActivityHandler.awardInfo(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.pos_ = this.pos_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  if (this.itemInfoBuilder_ == null) { result.itemInfo_ = this.itemInfo_; } else { result.itemInfo_ = (ItemOuterClass.MiniItem)this.itemInfoBuilder_.build(); }  result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.awardInfo) return mergeFrom((ActivityHandler.awardInfo)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.awardInfo other) { if (other == ActivityHandler.awardInfo.getDefaultInstance()) return this;  if (other.hasPos()) setPos(other.getPos());  if (other.hasItemInfo()) mergeItemInfo(other.getItemInfo());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasPos()) return false;  if (!hasItemInfo()) return false;  if (!getItemInfo().isInitialized()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.awardInfo parsedMessage = null; try { parsedMessage = (ActivityHandler.awardInfo)ActivityHandler.awardInfo.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.awardInfo)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasPos() { return ((this.bitField0_ & 0x1) == 1); } public int getPos() { return this.pos_; } public Builder setPos(int value) { this.bitField0_ |= 0x1; this.pos_ = value; onChanged(); return this; } public Builder clearPos() { this.bitField0_ &= 0xFFFFFFFE; this.pos_ = 0; onChanged(); return this; } public boolean hasItemInfo() { return ((this.bitField0_ & 0x2) == 2); } public ItemOuterClass.MiniItem getItemInfo() { if (this.itemInfoBuilder_ == null) return this.itemInfo_;  return (ItemOuterClass.MiniItem)this.itemInfoBuilder_.getMessage(); } public Builder setItemInfo(ItemOuterClass.MiniItem value) { if (this.itemInfoBuilder_ == null) { if (value == null) throw new NullPointerException();  this.itemInfo_ = value; onChanged(); } else { this.itemInfoBuilder_.setMessage((GeneratedMessage)value); }  this.bitField0_ |= 0x2; return this; } public Builder setItemInfo(ItemOuterClass.MiniItem.Builder builderForValue) { if (this.itemInfoBuilder_ == null) { this.itemInfo_ = builderForValue.build(); onChanged(); } else { this.itemInfoBuilder_.setMessage((GeneratedMessage)builderForValue.build()); }  this.bitField0_ |= 0x2; return this; } public Builder mergeItemInfo(ItemOuterClass.MiniItem value) { if (this.itemInfoBuilder_ == null) { if ((this.bitField0_ & 0x2) == 2 && this.itemInfo_ != ItemOuterClass.MiniItem.getDefaultInstance()) { this.itemInfo_ = ItemOuterClass.MiniItem.newBuilder(this.itemInfo_).mergeFrom(value).buildPartial(); } else { this.itemInfo_ = value; }  onChanged(); } else { this.itemInfoBuilder_.mergeFrom((GeneratedMessage)value); }  this.bitField0_ |= 0x2; return this; } public Builder clearItemInfo() { if (this.itemInfoBuilder_ == null) { this.itemInfo_ = ItemOuterClass.MiniItem.getDefaultInstance(); onChanged(); } else { this.itemInfoBuilder_.clear(); }  this.bitField0_ &= 0xFFFFFFFD; return this; } public ItemOuterClass.MiniItem.Builder getItemInfoBuilder() { this.bitField0_ |= 0x2; onChanged(); return (ItemOuterClass.MiniItem.Builder)getItemInfoFieldBuilder().getBuilder(); } public ItemOuterClass.MiniItemOrBuilder getItemInfoOrBuilder() { if (this.itemInfoBuilder_ != null) return (ItemOuterClass.MiniItemOrBuilder)this.itemInfoBuilder_.getMessageOrBuilder();  return (ItemOuterClass.MiniItemOrBuilder)this.itemInfo_; } private SingleFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> getItemInfoFieldBuilder() { if (this.itemInfoBuilder_ == null) { this.itemInfoBuilder_ = new SingleFieldBuilder((GeneratedMessage)getItemInfo(), getParentForChildren(), isClean()); this.itemInfo_ = null; }  return this.itemInfoBuilder_; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ActivityLuckyAwardViewResponse
/*       */     extends GeneratedMessage
/*       */     implements ActivityLuckyAwardViewResponseOrBuilder
/*       */   {
/* 23462 */     private static final ActivityLuckyAwardViewResponse defaultInstance = new ActivityLuckyAwardViewResponse(true); private final UnknownFieldSet unknownFields; private ActivityLuckyAwardViewResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ActivityLuckyAwardViewResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ActivityLuckyAwardViewResponse getDefaultInstance() { return defaultInstance; } public ActivityLuckyAwardViewResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ActivityLuckyAwardViewResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 24: this.bitField0_ |= 0x4; this.s2CLeftRefreshTime_ = input.readInt32(); break;case 34: if ((mutable_bitField0_ & 0x8) != 8) { this.s2CAwards_ = new ArrayList<>(); mutable_bitField0_ |= 0x8; }  this.s2CAwards_.add(input.readMessage(ItemOuterClass.MiniItem.PARSER, extensionRegistry)); break;case 42: if ((mutable_bitField0_ & 0x10) != 16) { this.s2CRecommendAwards_ = new ArrayList<>(); mutable_bitField0_ |= 0x10; }  this.s2CRecommendAwards_.add(input.readMessage(ItemOuterClass.MiniItem.PARSER, extensionRegistry)); break;case 50: if ((mutable_bitField0_ & 0x20) != 32) { this.s2CDrawedAwards_ = new ArrayList<>(); mutable_bitField0_ |= 0x20; }  this.s2CDrawedAwards_.add(input.readMessage(ActivityHandler.awardInfo.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x8) == 8) this.s2CAwards_ = Collections.unmodifiableList(this.s2CAwards_);  if ((mutable_bitField0_ & 0x10) == 16) this.s2CRecommendAwards_ = Collections.unmodifiableList(this.s2CRecommendAwards_);  if ((mutable_bitField0_ & 0x20) == 32) this.s2CDrawedAwards_ = Collections.unmodifiableList(this.s2CDrawedAwards_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityLuckyAwardViewResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityLuckyAwardViewResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityLuckyAwardViewResponse.class, Builder.class); } public static Parser<ActivityLuckyAwardViewResponse> PARSER = (Parser<ActivityLuckyAwardViewResponse>)new AbstractParser<ActivityLuckyAwardViewResponse>() { public ActivityHandler.ActivityLuckyAwardViewResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ActivityLuckyAwardViewResponse(input, extensionRegistry); } }
/* 23463 */     ; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_LEFTREFRESHTIME_FIELD_NUMBER = 3; private int s2CLeftRefreshTime_; public static final int S2C_AWARDS_FIELD_NUMBER = 4; private List<ItemOuterClass.MiniItem> s2CAwards_; public static final int S2C_RECOMMENDAWARDS_FIELD_NUMBER = 5; private List<ItemOuterClass.MiniItem> s2CRecommendAwards_; public static final int S2C_DRAWEDAWARDS_FIELD_NUMBER = 6; private List<ActivityHandler.awardInfo> s2CDrawedAwards_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ActivityLuckyAwardViewResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public boolean hasS2CLeftRefreshTime() { return ((this.bitField0_ & 0x4) == 4); } public int getS2CLeftRefreshTime() { return this.s2CLeftRefreshTime_; } public List<ItemOuterClass.MiniItem> getS2CAwardsList() { return this.s2CAwards_; } public List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CAwardsOrBuilderList() { return (List)this.s2CAwards_; } public int getS2CAwardsCount() { return this.s2CAwards_.size(); } public ItemOuterClass.MiniItem getS2CAwards(int index) { return this.s2CAwards_.get(index); } public ItemOuterClass.MiniItemOrBuilder getS2CAwardsOrBuilder(int index) { return (ItemOuterClass.MiniItemOrBuilder)this.s2CAwards_.get(index); } public List<ItemOuterClass.MiniItem> getS2CRecommendAwardsList() { return this.s2CRecommendAwards_; } public List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CRecommendAwardsOrBuilderList() { return (List)this.s2CRecommendAwards_; } public int getS2CRecommendAwardsCount() { return this.s2CRecommendAwards_.size(); } public ItemOuterClass.MiniItem getS2CRecommendAwards(int index) { return this.s2CRecommendAwards_.get(index); } public ItemOuterClass.MiniItemOrBuilder getS2CRecommendAwardsOrBuilder(int index) { return (ItemOuterClass.MiniItemOrBuilder)this.s2CRecommendAwards_.get(index); } public List<ActivityHandler.awardInfo> getS2CDrawedAwardsList() { return this.s2CDrawedAwards_; } public List<? extends ActivityHandler.awardInfoOrBuilder> getS2CDrawedAwardsOrBuilderList() { return (List)this.s2CDrawedAwards_; } public int getS2CDrawedAwardsCount() { return this.s2CDrawedAwards_.size(); } public ActivityHandler.awardInfo getS2CDrawedAwards(int index) { return this.s2CDrawedAwards_.get(index); } public ActivityHandler.awardInfoOrBuilder getS2CDrawedAwardsOrBuilder(int index) { return this.s2CDrawedAwards_.get(index); } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.s2CLeftRefreshTime_ = 0; this.s2CAwards_ = Collections.emptyList(); this.s2CRecommendAwards_ = Collections.emptyList(); this.s2CDrawedAwards_ = Collections.emptyList(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  if (!hasS2CLeftRefreshTime()) { this.memoizedIsInitialized = 0; return false; }  int i; for (i = 0; i < getS2CAwardsCount(); i++) { if (!getS2CAwards(i).isInitialized()) { this.memoizedIsInitialized = 0; return false; }  }  for (i = 0; i < getS2CRecommendAwardsCount(); i++) { if (!getS2CRecommendAwards(i).isInitialized()) { this.memoizedIsInitialized = 0; return false; }  }  for (i = 0; i < getS2CDrawedAwardsCount(); i++) { if (!getS2CDrawedAwards(i).isInitialized()) { this.memoizedIsInitialized = 0; return false; }  }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4) output.writeInt32(3, this.s2CLeftRefreshTime_);  int i; for (i = 0; i < this.s2CAwards_.size(); i++) output.writeMessage(4, (MessageLite)this.s2CAwards_.get(i));  for (i = 0; i < this.s2CRecommendAwards_.size(); i++) output.writeMessage(5, (MessageLite)this.s2CRecommendAwards_.get(i));  for (i = 0; i < this.s2CDrawedAwards_.size(); i++) output.writeMessage(6, (MessageLite)this.s2CDrawedAwards_.get(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt32Size(3, this.s2CLeftRefreshTime_);  int i; for (i = 0; i < this.s2CAwards_.size(); i++) size += CodedOutputStream.computeMessageSize(4, (MessageLite)this.s2CAwards_.get(i));  for (i = 0; i < this.s2CRecommendAwards_.size(); i++) size += CodedOutputStream.computeMessageSize(5, (MessageLite)this.s2CRecommendAwards_.get(i));  for (i = 0; i < this.s2CDrawedAwards_.size(); i++) size += CodedOutputStream.computeMessageSize(6, (MessageLite)this.s2CDrawedAwards_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } static { defaultInstance.initFields(); }
/*       */     protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); }
/*       */     public static ActivityLuckyAwardViewResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ActivityLuckyAwardViewResponse)PARSER.parseFrom(data); }
/*       */     public static ActivityLuckyAwardViewResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityLuckyAwardViewResponse)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static ActivityLuckyAwardViewResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ActivityLuckyAwardViewResponse)PARSER.parseFrom(data); }
/*       */     public static ActivityLuckyAwardViewResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityLuckyAwardViewResponse)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static ActivityLuckyAwardViewResponse parseFrom(InputStream input) throws IOException { return (ActivityLuckyAwardViewResponse)PARSER.parseFrom(input); }
/*       */     public static ActivityLuckyAwardViewResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityLuckyAwardViewResponse)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static ActivityLuckyAwardViewResponse parseDelimitedFrom(InputStream input) throws IOException { return (ActivityLuckyAwardViewResponse)PARSER.parseDelimitedFrom(input); }
/*       */     public static ActivityLuckyAwardViewResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityLuckyAwardViewResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); }
/*       */     public static ActivityLuckyAwardViewResponse parseFrom(CodedInputStream input) throws IOException { return (ActivityLuckyAwardViewResponse)PARSER.parseFrom(input); }
/*       */     public static ActivityLuckyAwardViewResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityLuckyAwardViewResponse)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static Builder newBuilder() { return Builder.create(); }
/*       */     public Builder newBuilderForType() { return newBuilder(); }
/*       */     public static Builder newBuilder(ActivityLuckyAwardViewResponse prototype) { return newBuilder().mergeFrom(prototype); }
/*       */     public Builder toBuilder() { return newBuilder(this); }
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; }
/*       */     public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ActivityLuckyAwardViewResponseOrBuilder {
/*       */       private int bitField0_;
/*       */       private int s2CCode_;
/*       */       private Object s2CMsg_;
/*       */       private int s2CLeftRefreshTime_;
/*       */       private List<ItemOuterClass.MiniItem> s2CAwards_;
/*       */       private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> s2CAwardsBuilder_;
/*       */       private List<ItemOuterClass.MiniItem> s2CRecommendAwards_;
/*       */       private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> s2CRecommendAwardsBuilder_;
/*       */       private List<ActivityHandler.awardInfo> s2CDrawedAwards_;
/*       */       private RepeatedFieldBuilder<ActivityHandler.awardInfo, ActivityHandler.awardInfo.Builder, ActivityHandler.awardInfoOrBuilder> s2CDrawedAwardsBuilder_;
/*       */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityLuckyAwardViewResponse_descriptor; }
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityLuckyAwardViewResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ActivityLuckyAwardViewResponse.class, Builder.class); }
/*       */       private Builder() { this.s2CMsg_ = ""; this.s2CAwards_ = Collections.emptyList(); this.s2CRecommendAwards_ = Collections.emptyList(); this.s2CDrawedAwards_ = Collections.emptyList(); maybeForceBuilderInitialization(); }
/*       */       private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; this.s2CAwards_ = Collections.emptyList(); this.s2CRecommendAwards_ = Collections.emptyList(); this.s2CDrawedAwards_ = Collections.emptyList(); maybeForceBuilderInitialization(); }
/*       */       private void maybeForceBuilderInitialization() { if (ActivityHandler.ActivityLuckyAwardViewResponse.alwaysUseFieldBuilders) { getS2CAwardsFieldBuilder(); getS2CRecommendAwardsFieldBuilder(); getS2CDrawedAwardsFieldBuilder(); }
/*       */          }
/*       */       private static Builder create() { return new Builder(); }
/*       */       public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; this.s2CLeftRefreshTime_ = 0; this.bitField0_ &= 0xFFFFFFFB; if (this.s2CAwardsBuilder_ == null) { this.s2CAwards_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFF7; }
/*       */         else { this.s2CAwardsBuilder_.clear(); }
/*       */          if (this.s2CRecommendAwardsBuilder_ == null) { this.s2CRecommendAwards_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFEF; }
/*       */         else { this.s2CRecommendAwardsBuilder_.clear(); }
/*       */          if (this.s2CDrawedAwardsBuilder_ == null) { this.s2CDrawedAwards_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFDF; }
/*       */         else { this.s2CDrawedAwardsBuilder_.clear(); }
/*       */          return this; }
/*       */       public Builder clone() { return create().mergeFrom(buildPartial()); }
/*       */       public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ActivityLuckyAwardViewResponse_descriptor; }
/*       */       public ActivityHandler.ActivityLuckyAwardViewResponse getDefaultInstanceForType() { return ActivityHandler.ActivityLuckyAwardViewResponse.getDefaultInstance(); }
/*       */       public ActivityHandler.ActivityLuckyAwardViewResponse build() { ActivityHandler.ActivityLuckyAwardViewResponse result = buildPartial(); if (!result.isInitialized())
/*       */           throw newUninitializedMessageException(result);  return result; }
/*       */       public ActivityHandler.ActivityLuckyAwardViewResponse buildPartial() { ActivityHandler.ActivityLuckyAwardViewResponse result = new ActivityHandler.ActivityLuckyAwardViewResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1)
/*       */           to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2)
/*       */           to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if ((from_bitField0_ & 0x4) == 4)
/*       */           to_bitField0_ |= 0x4;  result.s2CLeftRefreshTime_ = this.s2CLeftRefreshTime_; if (this.s2CAwardsBuilder_ == null) { if ((this.bitField0_ & 0x8) == 8) { this.s2CAwards_ = Collections.unmodifiableList(this.s2CAwards_); this.bitField0_ &= 0xFFFFFFF7; }
/*       */            result.s2CAwards_ = this.s2CAwards_; }
/*       */         else { result.s2CAwards_ = this.s2CAwardsBuilder_.build(); }
/*       */          if (this.s2CRecommendAwardsBuilder_ == null) { if ((this.bitField0_ & 0x10) == 16) { this.s2CRecommendAwards_ = Collections.unmodifiableList(this.s2CRecommendAwards_); this.bitField0_ &= 0xFFFFFFEF; }
/*       */            result.s2CRecommendAwards_ = this.s2CRecommendAwards_; }
/*       */         else { result.s2CRecommendAwards_ = this.s2CRecommendAwardsBuilder_.build(); }
/*       */          if (this.s2CDrawedAwardsBuilder_ == null) { if ((this.bitField0_ & 0x20) == 32) { this.s2CDrawedAwards_ = Collections.unmodifiableList(this.s2CDrawedAwards_); this.bitField0_ &= 0xFFFFFFDF; }
/*       */            result.s2CDrawedAwards_ = this.s2CDrawedAwards_; }
/*       */         else { result.s2CDrawedAwards_ = this.s2CDrawedAwardsBuilder_.build(); }
/*       */          result.bitField0_ = to_bitField0_; onBuilt(); return result; }
/*       */       public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ActivityLuckyAwardViewResponse)
/*       */           return mergeFrom((ActivityHandler.ActivityLuckyAwardViewResponse)other);  super.mergeFrom(other); return this; }
/*       */       public Builder mergeFrom(ActivityHandler.ActivityLuckyAwardViewResponse other) { if (other == ActivityHandler.ActivityLuckyAwardViewResponse.getDefaultInstance())
/*       */           return this;  if (other.hasS2CCode())
/*       */           setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }
/*       */          if (other.hasS2CLeftRefreshTime())
/*       */           setS2CLeftRefreshTime(other.getS2CLeftRefreshTime());  if (this.s2CAwardsBuilder_ == null) { if (!other.s2CAwards_.isEmpty()) { if (this.s2CAwards_.isEmpty()) { this.s2CAwards_ = other.s2CAwards_; this.bitField0_ &= 0xFFFFFFF7; }
/*       */             else { ensureS2CAwardsIsMutable(); this.s2CAwards_.addAll(other.s2CAwards_); }
/*       */              onChanged(); }
/*       */            }
/*       */         else if (!other.s2CAwards_.isEmpty()) { if (this.s2CAwardsBuilder_.isEmpty()) { this.s2CAwardsBuilder_.dispose(); this.s2CAwardsBuilder_ = null; this.s2CAwards_ = other.s2CAwards_; this.bitField0_ &= 0xFFFFFFF7; this.s2CAwardsBuilder_ = ActivityHandler.ActivityLuckyAwardViewResponse.alwaysUseFieldBuilders ? getS2CAwardsFieldBuilder() : null; }
/*       */           else { this.s2CAwardsBuilder_.addAllMessages(other.s2CAwards_); }
/*       */            }
/*       */          if (this.s2CRecommendAwardsBuilder_ == null) { if (!other.s2CRecommendAwards_.isEmpty()) { if (this.s2CRecommendAwards_.isEmpty()) { this.s2CRecommendAwards_ = other.s2CRecommendAwards_; this.bitField0_ &= 0xFFFFFFEF; }
/*       */             else { ensureS2CRecommendAwardsIsMutable(); this.s2CRecommendAwards_.addAll(other.s2CRecommendAwards_); }
/*       */              onChanged(); }
/*       */            }
/*       */         else if (!other.s2CRecommendAwards_.isEmpty()) { if (this.s2CRecommendAwardsBuilder_.isEmpty()) { this.s2CRecommendAwardsBuilder_.dispose(); this.s2CRecommendAwardsBuilder_ = null; this.s2CRecommendAwards_ = other.s2CRecommendAwards_; this.bitField0_ &= 0xFFFFFFEF; this.s2CRecommendAwardsBuilder_ = ActivityHandler.ActivityLuckyAwardViewResponse.alwaysUseFieldBuilders ? getS2CRecommendAwardsFieldBuilder() : null; }
/*       */           else { this.s2CRecommendAwardsBuilder_.addAllMessages(other.s2CRecommendAwards_); }
/*       */            }
/*       */          if (this.s2CDrawedAwardsBuilder_ == null) { if (!other.s2CDrawedAwards_.isEmpty()) { if (this.s2CDrawedAwards_.isEmpty()) { this.s2CDrawedAwards_ = other.s2CDrawedAwards_; this.bitField0_ &= 0xFFFFFFDF; }
/*       */             else { ensureS2CDrawedAwardsIsMutable(); this.s2CDrawedAwards_.addAll(other.s2CDrawedAwards_); }
/*       */              onChanged(); }
/*       */            }
/*       */         else if (!other.s2CDrawedAwards_.isEmpty()) { if (this.s2CDrawedAwardsBuilder_.isEmpty()) { this.s2CDrawedAwardsBuilder_.dispose(); this.s2CDrawedAwardsBuilder_ = null; this.s2CDrawedAwards_ = other.s2CDrawedAwards_; this.bitField0_ &= 0xFFFFFFDF; this.s2CDrawedAwardsBuilder_ = ActivityHandler.ActivityLuckyAwardViewResponse.alwaysUseFieldBuilders ? getS2CDrawedAwardsFieldBuilder() : null; }
/*       */           else { this.s2CDrawedAwardsBuilder_.addAllMessages(other.s2CDrawedAwards_); }
/*       */            }
/*       */          mergeUnknownFields(other.getUnknownFields()); return this; }
/*       */       public final boolean isInitialized() { if (!hasS2CCode())
/*       */           return false;  if (!hasS2CLeftRefreshTime())
/*       */           return false;  int i; for (i = 0; i < getS2CAwardsCount(); i++) { if (!getS2CAwards(i).isInitialized())
/*       */             return false;  }
/*       */          for (i = 0; i < getS2CRecommendAwardsCount(); i++) { if (!getS2CRecommendAwards(i).isInitialized())
/*       */             return false;  }
/*       */          for (i = 0; i < getS2CDrawedAwardsCount(); i++) {
/*       */           if (!getS2CDrawedAwards(i).isInitialized())
/*       */             return false; 
/*       */         }  return true; }
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ActivityLuckyAwardViewResponse parsedMessage = null; try {
/*       */           parsedMessage = (ActivityHandler.ActivityLuckyAwardViewResponse)ActivityHandler.ActivityLuckyAwardViewResponse.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (ActivityHandler.ActivityLuckyAwardViewResponse)e.getUnfinishedMessage(); throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null)
/*       */             mergeFrom(parsedMessage); 
/*       */         }  return this; }
/*       */       public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); }
/*       */       public int getS2CCode() { return this.s2CCode_; }
/*       */       public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; }
/*       */       public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; }
/*       */       public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); }
/*       */       public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8())
/*       */             this.s2CMsg_ = s;  return s;
/*       */         }  return (String)ref; }
/*       */       public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b;
/*       */         }  return (ByteString)ref; }
/*       */       public Builder setS2CMsg(String value) { if (value == null)
/*       */           throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; }
/*       */       public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = ActivityHandler.ActivityLuckyAwardViewResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; }
/*       */       public Builder setS2CMsgBytes(ByteString value) { if (value == null)
/*       */           throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; }
/*       */       public boolean hasS2CLeftRefreshTime() { return ((this.bitField0_ & 0x4) == 4); }
/*       */       public int getS2CLeftRefreshTime() { return this.s2CLeftRefreshTime_; }
/*       */       public Builder setS2CLeftRefreshTime(int value) { this.bitField0_ |= 0x4; this.s2CLeftRefreshTime_ = value; onChanged(); return this; }
/*       */       public Builder clearS2CLeftRefreshTime() { this.bitField0_ &= 0xFFFFFFFB; this.s2CLeftRefreshTime_ = 0; onChanged(); return this; }
/*       */       private void ensureS2CAwardsIsMutable() { if ((this.bitField0_ & 0x8) != 8) {
/*       */           this.s2CAwards_ = new ArrayList<>(this.s2CAwards_); this.bitField0_ |= 0x8;
/*       */         }  }
/*       */       public List<ItemOuterClass.MiniItem> getS2CAwardsList() { if (this.s2CAwardsBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.s2CAwards_);  return this.s2CAwardsBuilder_.getMessageList(); }
/*       */       public int getS2CAwardsCount() { if (this.s2CAwardsBuilder_ == null)
/*       */           return this.s2CAwards_.size();  return this.s2CAwardsBuilder_.getCount(); }
/*       */       public ItemOuterClass.MiniItem getS2CAwards(int index) { if (this.s2CAwardsBuilder_ == null)
/*       */           return this.s2CAwards_.get(index);  return (ItemOuterClass.MiniItem)this.s2CAwardsBuilder_.getMessage(index); }
/*       */       public Builder setS2CAwards(int index, ItemOuterClass.MiniItem value) { if (this.s2CAwardsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException();  ensureS2CAwardsIsMutable(); this.s2CAwards_.set(index, value); onChanged();
/*       */         } else {
/*       */           this.s2CAwardsBuilder_.setMessage(index, (GeneratedMessage)value);
/*       */         }  return this; }
/*       */       public Builder setS2CAwards(int index, ItemOuterClass.MiniItem.Builder builderForValue) { if (this.s2CAwardsBuilder_ == null) {
/*       */           ensureS2CAwardsIsMutable(); this.s2CAwards_.set(index, builderForValue.build()); onChanged();
/*       */         } else {
/*       */           this.s2CAwardsBuilder_.setMessage(index, (GeneratedMessage)builderForValue.build());
/*       */         }  return this; }
/*       */       public Builder addS2CAwards(ItemOuterClass.MiniItem value) { if (this.s2CAwardsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException();  ensureS2CAwardsIsMutable(); this.s2CAwards_.add(value); onChanged();
/*       */         } else {
/*       */           this.s2CAwardsBuilder_.addMessage((GeneratedMessage)value);
/*       */         }  return this; }
/*       */       public Builder addS2CAwards(int index, ItemOuterClass.MiniItem value) { if (this.s2CAwardsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException();  ensureS2CAwardsIsMutable(); this.s2CAwards_.add(index, value); onChanged();
/*       */         } else {
/*       */           this.s2CAwardsBuilder_.addMessage(index, (GeneratedMessage)value);
/*       */         }  return this; }
/*       */       public Builder addS2CAwards(ItemOuterClass.MiniItem.Builder builderForValue) { if (this.s2CAwardsBuilder_ == null) {
/*       */           ensureS2CAwardsIsMutable(); this.s2CAwards_.add(builderForValue.build()); onChanged();
/*       */         } else {
/*       */           this.s2CAwardsBuilder_.addMessage((GeneratedMessage)builderForValue.build());
/*       */         }  return this; }
/*       */       public Builder addS2CAwards(int index, ItemOuterClass.MiniItem.Builder builderForValue) { if (this.s2CAwardsBuilder_ == null) {
/*       */           ensureS2CAwardsIsMutable(); this.s2CAwards_.add(index, builderForValue.build()); onChanged();
/*       */         } else {
/*       */           this.s2CAwardsBuilder_.addMessage(index, (GeneratedMessage)builderForValue.build());
/*       */         }  return this; }
/*       */       public Builder addAllS2CAwards(Iterable<? extends ItemOuterClass.MiniItem> values) { if (this.s2CAwardsBuilder_ == null) {
/*       */           ensureS2CAwardsIsMutable(); AbstractMessageLite.Builder.addAll(values, this.s2CAwards_); onChanged();
/*       */         } else {
/*       */           this.s2CAwardsBuilder_.addAllMessages(values);
/*       */         }  return this; }
/*       */       public Builder clearS2CAwards() { if (this.s2CAwardsBuilder_ == null) {
/*       */           this.s2CAwards_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFF7; onChanged();
/*       */         } else {
/*       */           this.s2CAwardsBuilder_.clear();
/*       */         }  return this; }
/*       */       public Builder removeS2CAwards(int index) { if (this.s2CAwardsBuilder_ == null) {
/*       */           ensureS2CAwardsIsMutable(); this.s2CAwards_.remove(index); onChanged();
/*       */         } else {
/*       */           this.s2CAwardsBuilder_.remove(index);
/*       */         }  return this; }
/*       */       public ItemOuterClass.MiniItem.Builder getS2CAwardsBuilder(int index) { return (ItemOuterClass.MiniItem.Builder)getS2CAwardsFieldBuilder().getBuilder(index); }
/*       */       public ItemOuterClass.MiniItemOrBuilder getS2CAwardsOrBuilder(int index) { if (this.s2CAwardsBuilder_ == null)
/*       */           return (ItemOuterClass.MiniItemOrBuilder)this.s2CAwards_.get(index);  return (ItemOuterClass.MiniItemOrBuilder)this.s2CAwardsBuilder_.getMessageOrBuilder(index); }
/*       */       public List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CAwardsOrBuilderList() { if (this.s2CAwardsBuilder_ != null)
/*       */           return this.s2CAwardsBuilder_.getMessageOrBuilderList();  return (List)Collections.unmodifiableList(this.s2CAwards_); }
/*       */       public ItemOuterClass.MiniItem.Builder addS2CAwardsBuilder() { return (ItemOuterClass.MiniItem.Builder)getS2CAwardsFieldBuilder().addBuilder((GeneratedMessage)ItemOuterClass.MiniItem.getDefaultInstance()); }
/*       */       public ItemOuterClass.MiniItem.Builder addS2CAwardsBuilder(int index) { return (ItemOuterClass.MiniItem.Builder)getS2CAwardsFieldBuilder().addBuilder(index, (GeneratedMessage)ItemOuterClass.MiniItem.getDefaultInstance()); }
/*       */       public List<ItemOuterClass.MiniItem.Builder> getS2CAwardsBuilderList() { return getS2CAwardsFieldBuilder().getBuilderList(); }
/*       */       private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> getS2CAwardsFieldBuilder() { if (this.s2CAwardsBuilder_ == null) {
/*       */           this.s2CAwardsBuilder_ = new RepeatedFieldBuilder(this.s2CAwards_, ((this.bitField0_ & 0x8) == 8), getParentForChildren(), isClean()); this.s2CAwards_ = null;
/*       */         }  return this.s2CAwardsBuilder_; }
/*       */       private void ensureS2CRecommendAwardsIsMutable() { if ((this.bitField0_ & 0x10) != 16) {
/*       */           this.s2CRecommendAwards_ = new ArrayList<>(this.s2CRecommendAwards_); this.bitField0_ |= 0x10;
/*       */         }  }
/*       */       public List<ItemOuterClass.MiniItem> getS2CRecommendAwardsList() { if (this.s2CRecommendAwardsBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.s2CRecommendAwards_);  return this.s2CRecommendAwardsBuilder_.getMessageList(); }
/*       */       public int getS2CRecommendAwardsCount() { if (this.s2CRecommendAwardsBuilder_ == null)
/*       */           return this.s2CRecommendAwards_.size();  return this.s2CRecommendAwardsBuilder_.getCount(); }
/*       */       public ItemOuterClass.MiniItem getS2CRecommendAwards(int index) { if (this.s2CRecommendAwardsBuilder_ == null)
/*       */           return this.s2CRecommendAwards_.get(index);  return (ItemOuterClass.MiniItem)this.s2CRecommendAwardsBuilder_.getMessage(index); }
/*       */       public Builder setS2CRecommendAwards(int index, ItemOuterClass.MiniItem value) { if (this.s2CRecommendAwardsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException();  ensureS2CRecommendAwardsIsMutable(); this.s2CRecommendAwards_.set(index, value); onChanged();
/*       */         } else {
/*       */           this.s2CRecommendAwardsBuilder_.setMessage(index, (GeneratedMessage)value);
/*       */         }  return this; }
/*       */       public Builder setS2CRecommendAwards(int index, ItemOuterClass.MiniItem.Builder builderForValue) { if (this.s2CRecommendAwardsBuilder_ == null) {
/*       */           ensureS2CRecommendAwardsIsMutable(); this.s2CRecommendAwards_.set(index, builderForValue.build()); onChanged();
/*       */         } else {
/*       */           this.s2CRecommendAwardsBuilder_.setMessage(index, (GeneratedMessage)builderForValue.build());
/*       */         }  return this; }
/*       */       public Builder addS2CRecommendAwards(ItemOuterClass.MiniItem value) { if (this.s2CRecommendAwardsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException();  ensureS2CRecommendAwardsIsMutable(); this.s2CRecommendAwards_.add(value); onChanged();
/*       */         } else {
/*       */           this.s2CRecommendAwardsBuilder_.addMessage((GeneratedMessage)value);
/*       */         }  return this; }
/*       */       public Builder addS2CRecommendAwards(int index, ItemOuterClass.MiniItem value) { if (this.s2CRecommendAwardsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException();  ensureS2CRecommendAwardsIsMutable(); this.s2CRecommendAwards_.add(index, value); onChanged();
/*       */         } else {
/*       */           this.s2CRecommendAwardsBuilder_.addMessage(index, (GeneratedMessage)value);
/*       */         }  return this; }
/*       */       public Builder addS2CRecommendAwards(ItemOuterClass.MiniItem.Builder builderForValue) { if (this.s2CRecommendAwardsBuilder_ == null) {
/*       */           ensureS2CRecommendAwardsIsMutable(); this.s2CRecommendAwards_.add(builderForValue.build()); onChanged();
/*       */         } else {
/*       */           this.s2CRecommendAwardsBuilder_.addMessage((GeneratedMessage)builderForValue.build());
/*       */         }  return this; }
/*       */       public Builder addS2CRecommendAwards(int index, ItemOuterClass.MiniItem.Builder builderForValue) { if (this.s2CRecommendAwardsBuilder_ == null) {
/*       */           ensureS2CRecommendAwardsIsMutable(); this.s2CRecommendAwards_.add(index, builderForValue.build()); onChanged();
/*       */         } else {
/*       */           this.s2CRecommendAwardsBuilder_.addMessage(index, (GeneratedMessage)builderForValue.build());
/*       */         }  return this; }
/*       */       public Builder addAllS2CRecommendAwards(Iterable<? extends ItemOuterClass.MiniItem> values) { if (this.s2CRecommendAwardsBuilder_ == null) {
/*       */           ensureS2CRecommendAwardsIsMutable(); AbstractMessageLite.Builder.addAll(values, this.s2CRecommendAwards_); onChanged();
/*       */         } else {
/*       */           this.s2CRecommendAwardsBuilder_.addAllMessages(values);
/*       */         }  return this; }
/*       */       public Builder clearS2CRecommendAwards() { if (this.s2CRecommendAwardsBuilder_ == null) {
/*       */           this.s2CRecommendAwards_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFEF; onChanged();
/*       */         } else {
/*       */           this.s2CRecommendAwardsBuilder_.clear();
/*       */         }  return this; }
/*       */       public Builder removeS2CRecommendAwards(int index) { if (this.s2CRecommendAwardsBuilder_ == null) {
/*       */           ensureS2CRecommendAwardsIsMutable(); this.s2CRecommendAwards_.remove(index); onChanged();
/*       */         } else {
/*       */           this.s2CRecommendAwardsBuilder_.remove(index);
/*       */         }  return this; }
/*       */       public ItemOuterClass.MiniItem.Builder getS2CRecommendAwardsBuilder(int index) { return (ItemOuterClass.MiniItem.Builder)getS2CRecommendAwardsFieldBuilder().getBuilder(index); }
/*       */       public ItemOuterClass.MiniItemOrBuilder getS2CRecommendAwardsOrBuilder(int index) { if (this.s2CRecommendAwardsBuilder_ == null)
/*       */           return (ItemOuterClass.MiniItemOrBuilder)this.s2CRecommendAwards_.get(index);  return (ItemOuterClass.MiniItemOrBuilder)this.s2CRecommendAwardsBuilder_.getMessageOrBuilder(index); }
/*       */       public List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CRecommendAwardsOrBuilderList() { if (this.s2CRecommendAwardsBuilder_ != null)
/*       */           return this.s2CRecommendAwardsBuilder_.getMessageOrBuilderList();  return (List)Collections.unmodifiableList(this.s2CRecommendAwards_); }
/*       */       public ItemOuterClass.MiniItem.Builder addS2CRecommendAwardsBuilder() { return (ItemOuterClass.MiniItem.Builder)getS2CRecommendAwardsFieldBuilder().addBuilder((GeneratedMessage)ItemOuterClass.MiniItem.getDefaultInstance()); }
/*       */       public ItemOuterClass.MiniItem.Builder addS2CRecommendAwardsBuilder(int index) { return (ItemOuterClass.MiniItem.Builder)getS2CRecommendAwardsFieldBuilder().addBuilder(index, (GeneratedMessage)ItemOuterClass.MiniItem.getDefaultInstance()); }
/*       */       public List<ItemOuterClass.MiniItem.Builder> getS2CRecommendAwardsBuilderList() { return getS2CRecommendAwardsFieldBuilder().getBuilderList(); }
/*       */       private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> getS2CRecommendAwardsFieldBuilder() { if (this.s2CRecommendAwardsBuilder_ == null) {
/*       */           this.s2CRecommendAwardsBuilder_ = new RepeatedFieldBuilder(this.s2CRecommendAwards_, ((this.bitField0_ & 0x10) == 16), getParentForChildren(), isClean()); this.s2CRecommendAwards_ = null;
/*       */         }  return this.s2CRecommendAwardsBuilder_; }
/*       */       private void ensureS2CDrawedAwardsIsMutable() { if ((this.bitField0_ & 0x20) != 32) {
/*       */           this.s2CDrawedAwards_ = new ArrayList<>(this.s2CDrawedAwards_); this.bitField0_ |= 0x20;
/*       */         }  }
/*       */       public List<ActivityHandler.awardInfo> getS2CDrawedAwardsList() { if (this.s2CDrawedAwardsBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.s2CDrawedAwards_);  return this.s2CDrawedAwardsBuilder_.getMessageList(); }
/*       */       public int getS2CDrawedAwardsCount() { if (this.s2CDrawedAwardsBuilder_ == null)
/*       */           return this.s2CDrawedAwards_.size();  return this.s2CDrawedAwardsBuilder_.getCount(); }
/*       */       public ActivityHandler.awardInfo getS2CDrawedAwards(int index) { if (this.s2CDrawedAwardsBuilder_ == null)
/*       */           return this.s2CDrawedAwards_.get(index);  return (ActivityHandler.awardInfo)this.s2CDrawedAwardsBuilder_.getMessage(index); }
/*       */       public Builder setS2CDrawedAwards(int index, ActivityHandler.awardInfo value) { if (this.s2CDrawedAwardsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException();  ensureS2CDrawedAwardsIsMutable(); this.s2CDrawedAwards_.set(index, value); onChanged();
/*       */         } else {
/*       */           this.s2CDrawedAwardsBuilder_.setMessage(index, value);
/*       */         }  return this; }
/*       */       public Builder setS2CDrawedAwards(int index, ActivityHandler.awardInfo.Builder builderForValue) { if (this.s2CDrawedAwardsBuilder_ == null) {
/*       */           ensureS2CDrawedAwardsIsMutable(); this.s2CDrawedAwards_.set(index, builderForValue.build()); onChanged();
/*       */         } else {
/*       */           this.s2CDrawedAwardsBuilder_.setMessage(index, builderForValue.build());
/*       */         }  return this; }
/*       */       public Builder addS2CDrawedAwards(ActivityHandler.awardInfo value) { if (this.s2CDrawedAwardsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException();  ensureS2CDrawedAwardsIsMutable(); this.s2CDrawedAwards_.add(value); onChanged();
/*       */         } else {
/*       */           this.s2CDrawedAwardsBuilder_.addMessage(value);
/*       */         }  return this; } public Builder addS2CDrawedAwards(int index, ActivityHandler.awardInfo value) { if (this.s2CDrawedAwardsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException();  ensureS2CDrawedAwardsIsMutable(); this.s2CDrawedAwards_.add(index, value); onChanged();
/*       */         } else {
/*       */           this.s2CDrawedAwardsBuilder_.addMessage(index, value);
/*       */         }  return this; } public Builder addS2CDrawedAwards(ActivityHandler.awardInfo.Builder builderForValue) { if (this.s2CDrawedAwardsBuilder_ == null) {
/*       */           ensureS2CDrawedAwardsIsMutable(); this.s2CDrawedAwards_.add(builderForValue.build()); onChanged();
/*       */         } else {
/*       */           this.s2CDrawedAwardsBuilder_.addMessage(builderForValue.build());
/*       */         }  return this; } public Builder addS2CDrawedAwards(int index, ActivityHandler.awardInfo.Builder builderForValue) { if (this.s2CDrawedAwardsBuilder_ == null) {
/*       */           ensureS2CDrawedAwardsIsMutable(); this.s2CDrawedAwards_.add(index, builderForValue.build()); onChanged();
/*       */         } else {
/*       */           this.s2CDrawedAwardsBuilder_.addMessage(index, builderForValue.build());
/*       */         }  return this; } public Builder addAllS2CDrawedAwards(Iterable<? extends ActivityHandler.awardInfo> values) { if (this.s2CDrawedAwardsBuilder_ == null) {
/*       */           ensureS2CDrawedAwardsIsMutable(); AbstractMessageLite.Builder.addAll(values, this.s2CDrawedAwards_); onChanged();
/*       */         } else {
/*       */           this.s2CDrawedAwardsBuilder_.addAllMessages(values);
/*       */         }  return this; } public Builder clearS2CDrawedAwards() { if (this.s2CDrawedAwardsBuilder_ == null) {
/*       */           this.s2CDrawedAwards_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFDF; onChanged();
/*       */         } else {
/*       */           this.s2CDrawedAwardsBuilder_.clear();
/*       */         }  return this; } public Builder removeS2CDrawedAwards(int index) { if (this.s2CDrawedAwardsBuilder_ == null) {
/*       */           ensureS2CDrawedAwardsIsMutable(); this.s2CDrawedAwards_.remove(index); onChanged();
/*       */         } else {
/*       */           this.s2CDrawedAwardsBuilder_.remove(index);
/*       */         }  return this; } public ActivityHandler.awardInfo.Builder getS2CDrawedAwardsBuilder(int index) { return (ActivityHandler.awardInfo.Builder)getS2CDrawedAwardsFieldBuilder().getBuilder(index); } public ActivityHandler.awardInfoOrBuilder getS2CDrawedAwardsOrBuilder(int index) { if (this.s2CDrawedAwardsBuilder_ == null)
/*       */           return this.s2CDrawedAwards_.get(index);  return (ActivityHandler.awardInfoOrBuilder)this.s2CDrawedAwardsBuilder_.getMessageOrBuilder(index); } public List<? extends ActivityHandler.awardInfoOrBuilder> getS2CDrawedAwardsOrBuilderList() { if (this.s2CDrawedAwardsBuilder_ != null)
/*       */           return this.s2CDrawedAwardsBuilder_.getMessageOrBuilderList();  return Collections.unmodifiableList((List)this.s2CDrawedAwards_); } public ActivityHandler.awardInfo.Builder addS2CDrawedAwardsBuilder() { return (ActivityHandler.awardInfo.Builder)getS2CDrawedAwardsFieldBuilder().addBuilder(ActivityHandler.awardInfo.getDefaultInstance()); } public ActivityHandler.awardInfo.Builder addS2CDrawedAwardsBuilder(int index) { return (ActivityHandler.awardInfo.Builder)getS2CDrawedAwardsFieldBuilder().addBuilder(index, ActivityHandler.awardInfo.getDefaultInstance()); } public List<ActivityHandler.awardInfo.Builder> getS2CDrawedAwardsBuilderList() { return getS2CDrawedAwardsFieldBuilder().getBuilderList(); } private RepeatedFieldBuilder<ActivityHandler.awardInfo, ActivityHandler.awardInfo.Builder, ActivityHandler.awardInfoOrBuilder> getS2CDrawedAwardsFieldBuilder() { if (this.s2CDrawedAwardsBuilder_ == null) {
/*       */           this.s2CDrawedAwardsBuilder_ = new RepeatedFieldBuilder(this.s2CDrawedAwards_, ((this.bitField0_ & 0x20) == 32), getParentForChildren(), isClean()); this.s2CDrawedAwards_ = null;
/*       */         }  return this.s2CDrawedAwardsBuilder_; }
/*       */     }
/*       */   } public static final class LuckyAwardViewRequest extends GeneratedMessage implements LuckyAwardViewRequestOrBuilder {
/* 23783 */     private static final LuckyAwardViewRequest defaultInstance = new LuckyAwardViewRequest(true); private final UnknownFieldSet unknownFields; private LuckyAwardViewRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private LuckyAwardViewRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static LuckyAwardViewRequest getDefaultInstance() { return defaultInstance; } public LuckyAwardViewRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private LuckyAwardViewRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_LuckyAwardViewRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_LuckyAwardViewRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(LuckyAwardViewRequest.class, Builder.class); } public static Parser<LuckyAwardViewRequest> PARSER = (Parser<LuckyAwardViewRequest>)new AbstractParser<LuckyAwardViewRequest>() { public ActivityHandler.LuckyAwardViewRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.LuckyAwardViewRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<LuckyAwardViewRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static LuckyAwardViewRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (LuckyAwardViewRequest)PARSER.parseFrom(data); } public static LuckyAwardViewRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (LuckyAwardViewRequest)PARSER.parseFrom(data, extensionRegistry); } public static LuckyAwardViewRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (LuckyAwardViewRequest)PARSER.parseFrom(data); } public static LuckyAwardViewRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (LuckyAwardViewRequest)PARSER.parseFrom(data, extensionRegistry); } public static LuckyAwardViewRequest parseFrom(InputStream input) throws IOException { return (LuckyAwardViewRequest)PARSER.parseFrom(input); } public static LuckyAwardViewRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (LuckyAwardViewRequest)PARSER.parseFrom(input, extensionRegistry); } public static LuckyAwardViewRequest parseDelimitedFrom(InputStream input) throws IOException { return (LuckyAwardViewRequest)PARSER.parseDelimitedFrom(input); } public static LuckyAwardViewRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (LuckyAwardViewRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static LuckyAwardViewRequest parseFrom(CodedInputStream input) throws IOException { return (LuckyAwardViewRequest)PARSER.parseFrom(input); } public static LuckyAwardViewRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (LuckyAwardViewRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(LuckyAwardViewRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.LuckyAwardViewRequestOrBuilder {
/* 23784 */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_LuckyAwardViewRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_LuckyAwardViewRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.LuckyAwardViewRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.LuckyAwardViewRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_LuckyAwardViewRequest_descriptor; } public ActivityHandler.LuckyAwardViewRequest getDefaultInstanceForType() { return ActivityHandler.LuckyAwardViewRequest.getDefaultInstance(); } public ActivityHandler.LuckyAwardViewRequest build() { ActivityHandler.LuckyAwardViewRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.LuckyAwardViewRequest buildPartial() { ActivityHandler.LuckyAwardViewRequest result = new ActivityHandler.LuckyAwardViewRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.LuckyAwardViewRequest) return mergeFrom((ActivityHandler.LuckyAwardViewRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.LuckyAwardViewRequest other) { if (other == ActivityHandler.LuckyAwardViewRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.LuckyAwardViewRequest parsedMessage = null; try { parsedMessage = (ActivityHandler.LuckyAwardViewRequest)ActivityHandler.LuckyAwardViewRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.LuckyAwardViewRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class LuckyAwardViewResponse
/*       */     extends GeneratedMessage
/*       */     implements LuckyAwardViewResponseOrBuilder
/*       */   {
/* 24717 */     private static final LuckyAwardViewResponse defaultInstance = new LuckyAwardViewResponse(true); private final UnknownFieldSet unknownFields; private LuckyAwardViewResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private LuckyAwardViewResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static LuckyAwardViewResponse getDefaultInstance() { return defaultInstance; } public LuckyAwardViewResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private LuckyAwardViewResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: if ((mutable_bitField0_ & 0x4) != 4) { this.s2CData_ = new ArrayList<>(); mutable_bitField0_ |= 0x4; }  this.s2CData_.add(input.readMessage(ItemOuterClass.MiniItem.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x4) == 4) this.s2CData_ = Collections.unmodifiableList(this.s2CData_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_LuckyAwardViewResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_LuckyAwardViewResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(LuckyAwardViewResponse.class, Builder.class); } public static Parser<LuckyAwardViewResponse> PARSER = (Parser<LuckyAwardViewResponse>)new AbstractParser<LuckyAwardViewResponse>() { public ActivityHandler.LuckyAwardViewResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.LuckyAwardViewResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_DATA_FIELD_NUMBER = 3; private List<ItemOuterClass.MiniItem> s2CData_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<LuckyAwardViewResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public List<ItemOuterClass.MiniItem> getS2CDataList() { return this.s2CData_; } public List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CDataOrBuilderList() { return (List)this.s2CData_; } public int getS2CDataCount() { return this.s2CData_.size(); } public ItemOuterClass.MiniItem getS2CData(int index) { return this.s2CData_.get(index); } public ItemOuterClass.MiniItemOrBuilder getS2CDataOrBuilder(int index) { return (ItemOuterClass.MiniItemOrBuilder)this.s2CData_.get(index); } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.s2CData_ = Collections.emptyList(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  for (int i = 0; i < getS2CDataCount(); i++) { if (!getS2CData(i).isInitialized()) { this.memoizedIsInitialized = 0; return false; }  }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  for (int i = 0; i < this.s2CData_.size(); i++) output.writeMessage(3, (MessageLite)this.s2CData_.get(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  for (int i = 0; i < this.s2CData_.size(); i++) size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.s2CData_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static LuckyAwardViewResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (LuckyAwardViewResponse)PARSER.parseFrom(data); } public static LuckyAwardViewResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (LuckyAwardViewResponse)PARSER.parseFrom(data, extensionRegistry); } public static LuckyAwardViewResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (LuckyAwardViewResponse)PARSER.parseFrom(data); } public static LuckyAwardViewResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (LuckyAwardViewResponse)PARSER.parseFrom(data, extensionRegistry); } public static LuckyAwardViewResponse parseFrom(InputStream input) throws IOException { return (LuckyAwardViewResponse)PARSER.parseFrom(input); } public static LuckyAwardViewResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (LuckyAwardViewResponse)PARSER.parseFrom(input, extensionRegistry); } public static LuckyAwardViewResponse parseDelimitedFrom(InputStream input) throws IOException { return (LuckyAwardViewResponse)PARSER.parseDelimitedFrom(input); } public static LuckyAwardViewResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (LuckyAwardViewResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static LuckyAwardViewResponse parseFrom(CodedInputStream input) throws IOException { return (LuckyAwardViewResponse)PARSER.parseFrom(input); } public static LuckyAwardViewResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (LuckyAwardViewResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(LuckyAwardViewResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.LuckyAwardViewResponseOrBuilder {
/* 24718 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; private List<ItemOuterClass.MiniItem> s2CData_; private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> s2CDataBuilder_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_LuckyAwardViewResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_LuckyAwardViewResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.LuckyAwardViewResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; this.s2CData_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; this.s2CData_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.LuckyAwardViewResponse.alwaysUseFieldBuilders) getS2CDataFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; if (this.s2CDataBuilder_ == null) { this.s2CData_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; } else { this.s2CDataBuilder_.clear(); }  return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_LuckyAwardViewResponse_descriptor; } public ActivityHandler.LuckyAwardViewResponse getDefaultInstanceForType() { return ActivityHandler.LuckyAwardViewResponse.getDefaultInstance(); } public ActivityHandler.LuckyAwardViewResponse build() { ActivityHandler.LuckyAwardViewResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.LuckyAwardViewResponse buildPartial() { ActivityHandler.LuckyAwardViewResponse result = new ActivityHandler.LuckyAwardViewResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if (this.s2CDataBuilder_ == null) { if ((this.bitField0_ & 0x4) == 4) { this.s2CData_ = Collections.unmodifiableList(this.s2CData_); this.bitField0_ &= 0xFFFFFFFB; }  result.s2CData_ = this.s2CData_; } else { result.s2CData_ = this.s2CDataBuilder_.build(); }  result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.LuckyAwardViewResponse) return mergeFrom((ActivityHandler.LuckyAwardViewResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.LuckyAwardViewResponse other) { if (other == ActivityHandler.LuckyAwardViewResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  if (this.s2CDataBuilder_ == null) { if (!other.s2CData_.isEmpty()) { if (this.s2CData_.isEmpty()) { this.s2CData_ = other.s2CData_; this.bitField0_ &= 0xFFFFFFFB; } else { ensureS2CDataIsMutable(); this.s2CData_.addAll(other.s2CData_); }  onChanged(); }  } else if (!other.s2CData_.isEmpty()) { if (this.s2CDataBuilder_.isEmpty()) { this.s2CDataBuilder_.dispose(); this.s2CDataBuilder_ = null; this.s2CData_ = other.s2CData_; this.bitField0_ &= 0xFFFFFFFB; this.s2CDataBuilder_ = ActivityHandler.LuckyAwardViewResponse.alwaysUseFieldBuilders ? getS2CDataFieldBuilder() : null; } else { this.s2CDataBuilder_.addAllMessages(other.s2CData_); }  }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  for (int i = 0; i < getS2CDataCount(); i++) { if (!getS2CData(i).isInitialized()) return false;  }  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.LuckyAwardViewResponse parsedMessage = null; try { parsedMessage = (ActivityHandler.LuckyAwardViewResponse)ActivityHandler.LuckyAwardViewResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.LuckyAwardViewResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = ActivityHandler.LuckyAwardViewResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } private void ensureS2CDataIsMutable() { if ((this.bitField0_ & 0x4) != 4) { this.s2CData_ = new ArrayList<>(this.s2CData_); this.bitField0_ |= 0x4; }  } public List<ItemOuterClass.MiniItem> getS2CDataList() { if (this.s2CDataBuilder_ == null) return Collections.unmodifiableList(this.s2CData_);  return this.s2CDataBuilder_.getMessageList(); } public int getS2CDataCount() { if (this.s2CDataBuilder_ == null) return this.s2CData_.size();  return this.s2CDataBuilder_.getCount(); } public ItemOuterClass.MiniItem getS2CData(int index) { if (this.s2CDataBuilder_ == null) return this.s2CData_.get(index);  return (ItemOuterClass.MiniItem)this.s2CDataBuilder_.getMessage(index); } public Builder setS2CData(int index, ItemOuterClass.MiniItem value) { if (this.s2CDataBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CDataIsMutable(); this.s2CData_.set(index, value); onChanged(); } else { this.s2CDataBuilder_.setMessage(index, (GeneratedMessage)value); }  return this; } public Builder setS2CData(int index, ItemOuterClass.MiniItem.Builder builderForValue) { if (this.s2CDataBuilder_ == null) { ensureS2CDataIsMutable(); this.s2CData_.set(index, builderForValue.build()); onChanged(); } else { this.s2CDataBuilder_.setMessage(index, (GeneratedMessage)builderForValue.build()); }  return this; } public Builder addS2CData(ItemOuterClass.MiniItem value) { if (this.s2CDataBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CDataIsMutable(); this.s2CData_.add(value); onChanged(); } else { this.s2CDataBuilder_.addMessage((GeneratedMessage)value); }  return this; } public Builder addS2CData(int index, ItemOuterClass.MiniItem value) { if (this.s2CDataBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CDataIsMutable(); this.s2CData_.add(index, value); onChanged(); } else { this.s2CDataBuilder_.addMessage(index, (GeneratedMessage)value); }  return this; } public Builder addS2CData(ItemOuterClass.MiniItem.Builder builderForValue) { if (this.s2CDataBuilder_ == null) { ensureS2CDataIsMutable(); this.s2CData_.add(builderForValue.build()); onChanged(); } else { this.s2CDataBuilder_.addMessage((GeneratedMessage)builderForValue.build()); }  return this; } public Builder addS2CData(int index, ItemOuterClass.MiniItem.Builder builderForValue) { if (this.s2CDataBuilder_ == null) { ensureS2CDataIsMutable(); this.s2CData_.add(index, builderForValue.build()); onChanged(); } else { this.s2CDataBuilder_.addMessage(index, (GeneratedMessage)builderForValue.build()); }  return this; } public Builder addAllS2CData(Iterable<? extends ItemOuterClass.MiniItem> values) { if (this.s2CDataBuilder_ == null) { ensureS2CDataIsMutable(); AbstractMessageLite.Builder.addAll(values, this.s2CData_); onChanged(); } else { this.s2CDataBuilder_.addAllMessages(values); }  return this; } public Builder clearS2CData() { if (this.s2CDataBuilder_ == null) { this.s2CData_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; onChanged(); } else { this.s2CDataBuilder_.clear(); }  return this; } public Builder removeS2CData(int index) { if (this.s2CDataBuilder_ == null) { ensureS2CDataIsMutable(); this.s2CData_.remove(index); onChanged(); } else { this.s2CDataBuilder_.remove(index); }  return this; } public ItemOuterClass.MiniItem.Builder getS2CDataBuilder(int index) { return (ItemOuterClass.MiniItem.Builder)getS2CDataFieldBuilder().getBuilder(index); } public ItemOuterClass.MiniItemOrBuilder getS2CDataOrBuilder(int index) { if (this.s2CDataBuilder_ == null) return (ItemOuterClass.MiniItemOrBuilder)this.s2CData_.get(index);  return (ItemOuterClass.MiniItemOrBuilder)this.s2CDataBuilder_.getMessageOrBuilder(index); } public List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CDataOrBuilderList() { if (this.s2CDataBuilder_ != null) return this.s2CDataBuilder_.getMessageOrBuilderList();  return (List)Collections.unmodifiableList(this.s2CData_); } public ItemOuterClass.MiniItem.Builder addS2CDataBuilder() { return (ItemOuterClass.MiniItem.Builder)getS2CDataFieldBuilder().addBuilder((GeneratedMessage)ItemOuterClass.MiniItem.getDefaultInstance()); } public ItemOuterClass.MiniItem.Builder addS2CDataBuilder(int index) { return (ItemOuterClass.MiniItem.Builder)getS2CDataFieldBuilder().addBuilder(index, (GeneratedMessage)ItemOuterClass.MiniItem.getDefaultInstance()); } public List<ItemOuterClass.MiniItem.Builder> getS2CDataBuilderList() { return getS2CDataFieldBuilder().getBuilderList(); } private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> getS2CDataFieldBuilder() { if (this.s2CDataBuilder_ == null) { this.s2CDataBuilder_ = new RepeatedFieldBuilder(this.s2CData_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean()); this.s2CData_ = null; }  return this.s2CDataBuilder_; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ReSetluckyAwardRequest
/*       */     extends GeneratedMessage
/*       */     implements ReSetluckyAwardRequestOrBuilder
/*       */   {
/* 25038 */     private static final ReSetluckyAwardRequest defaultInstance = new ReSetluckyAwardRequest(true); private final UnknownFieldSet unknownFields; private ReSetluckyAwardRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ReSetluckyAwardRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ReSetluckyAwardRequest getDefaultInstance() { return defaultInstance; } public ReSetluckyAwardRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ReSetluckyAwardRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ReSetluckyAwardRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ReSetluckyAwardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ReSetluckyAwardRequest.class, Builder.class); } public static Parser<ReSetluckyAwardRequest> PARSER = (Parser<ReSetluckyAwardRequest>)new AbstractParser<ReSetluckyAwardRequest>() { public ActivityHandler.ReSetluckyAwardRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ReSetluckyAwardRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ReSetluckyAwardRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ReSetluckyAwardRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ReSetluckyAwardRequest)PARSER.parseFrom(data); } public static ReSetluckyAwardRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ReSetluckyAwardRequest)PARSER.parseFrom(data, extensionRegistry); } public static ReSetluckyAwardRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ReSetluckyAwardRequest)PARSER.parseFrom(data); } public static ReSetluckyAwardRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ReSetluckyAwardRequest)PARSER.parseFrom(data, extensionRegistry); } public static ReSetluckyAwardRequest parseFrom(InputStream input) throws IOException { return (ReSetluckyAwardRequest)PARSER.parseFrom(input); } public static ReSetluckyAwardRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ReSetluckyAwardRequest)PARSER.parseFrom(input, extensionRegistry); } public static ReSetluckyAwardRequest parseDelimitedFrom(InputStream input) throws IOException { return (ReSetluckyAwardRequest)PARSER.parseDelimitedFrom(input); } public static ReSetluckyAwardRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ReSetluckyAwardRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ReSetluckyAwardRequest parseFrom(CodedInputStream input) throws IOException { return (ReSetluckyAwardRequest)PARSER.parseFrom(input); } public static ReSetluckyAwardRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ReSetluckyAwardRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ReSetluckyAwardRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ReSetluckyAwardRequestOrBuilder {
/* 25039 */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ReSetluckyAwardRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ReSetluckyAwardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ReSetluckyAwardRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.ReSetluckyAwardRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ReSetluckyAwardRequest_descriptor; } public ActivityHandler.ReSetluckyAwardRequest getDefaultInstanceForType() { return ActivityHandler.ReSetluckyAwardRequest.getDefaultInstance(); } public ActivityHandler.ReSetluckyAwardRequest build() { ActivityHandler.ReSetluckyAwardRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.ReSetluckyAwardRequest buildPartial() { ActivityHandler.ReSetluckyAwardRequest result = new ActivityHandler.ReSetluckyAwardRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ReSetluckyAwardRequest) return mergeFrom((ActivityHandler.ReSetluckyAwardRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.ReSetluckyAwardRequest other) { if (other == ActivityHandler.ReSetluckyAwardRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ReSetluckyAwardRequest parsedMessage = null; try { parsedMessage = (ActivityHandler.ReSetluckyAwardRequest)ActivityHandler.ReSetluckyAwardRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.ReSetluckyAwardRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ReSetluckyAwardResponse
/*       */     extends GeneratedMessage
/*       */     implements ReSetluckyAwardResponseOrBuilder
/*       */   {
/* 25972 */     private static final ReSetluckyAwardResponse defaultInstance = new ReSetluckyAwardResponse(true); private final UnknownFieldSet unknownFields; private ReSetluckyAwardResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ReSetluckyAwardResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ReSetluckyAwardResponse getDefaultInstance() { return defaultInstance; } public ReSetluckyAwardResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ReSetluckyAwardResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: if ((mutable_bitField0_ & 0x4) != 4) { this.s2CAwards_ = new ArrayList<>(); mutable_bitField0_ |= 0x4; }  this.s2CAwards_.add(input.readMessage(ItemOuterClass.MiniItem.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x4) == 4) this.s2CAwards_ = Collections.unmodifiableList(this.s2CAwards_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ReSetluckyAwardResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ReSetluckyAwardResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ReSetluckyAwardResponse.class, Builder.class); } public static Parser<ReSetluckyAwardResponse> PARSER = (Parser<ReSetluckyAwardResponse>)new AbstractParser<ReSetluckyAwardResponse>() { public ActivityHandler.ReSetluckyAwardResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ReSetluckyAwardResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_AWARDS_FIELD_NUMBER = 3; private List<ItemOuterClass.MiniItem> s2CAwards_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ReSetluckyAwardResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public List<ItemOuterClass.MiniItem> getS2CAwardsList() { return this.s2CAwards_; } public List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CAwardsOrBuilderList() { return (List)this.s2CAwards_; } public int getS2CAwardsCount() { return this.s2CAwards_.size(); } public ItemOuterClass.MiniItem getS2CAwards(int index) { return this.s2CAwards_.get(index); } public ItemOuterClass.MiniItemOrBuilder getS2CAwardsOrBuilder(int index) { return (ItemOuterClass.MiniItemOrBuilder)this.s2CAwards_.get(index); } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.s2CAwards_ = Collections.emptyList(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  for (int i = 0; i < getS2CAwardsCount(); i++) { if (!getS2CAwards(i).isInitialized()) { this.memoizedIsInitialized = 0; return false; }  }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  for (int i = 0; i < this.s2CAwards_.size(); i++) output.writeMessage(3, (MessageLite)this.s2CAwards_.get(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  for (int i = 0; i < this.s2CAwards_.size(); i++) size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.s2CAwards_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ReSetluckyAwardResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ReSetluckyAwardResponse)PARSER.parseFrom(data); } public static ReSetluckyAwardResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ReSetluckyAwardResponse)PARSER.parseFrom(data, extensionRegistry); } public static ReSetluckyAwardResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ReSetluckyAwardResponse)PARSER.parseFrom(data); } public static ReSetluckyAwardResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ReSetluckyAwardResponse)PARSER.parseFrom(data, extensionRegistry); } public static ReSetluckyAwardResponse parseFrom(InputStream input) throws IOException { return (ReSetluckyAwardResponse)PARSER.parseFrom(input); } public static ReSetluckyAwardResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ReSetluckyAwardResponse)PARSER.parseFrom(input, extensionRegistry); } public static ReSetluckyAwardResponse parseDelimitedFrom(InputStream input) throws IOException { return (ReSetluckyAwardResponse)PARSER.parseDelimitedFrom(input); } public static ReSetluckyAwardResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ReSetluckyAwardResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ReSetluckyAwardResponse parseFrom(CodedInputStream input) throws IOException { return (ReSetluckyAwardResponse)PARSER.parseFrom(input); } public static ReSetluckyAwardResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ReSetluckyAwardResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ReSetluckyAwardResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ReSetluckyAwardResponseOrBuilder {
/* 25973 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; private List<ItemOuterClass.MiniItem> s2CAwards_; private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> s2CAwardsBuilder_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ReSetluckyAwardResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ReSetluckyAwardResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ReSetluckyAwardResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; this.s2CAwards_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; this.s2CAwards_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.ReSetluckyAwardResponse.alwaysUseFieldBuilders) getS2CAwardsFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; if (this.s2CAwardsBuilder_ == null) { this.s2CAwards_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; } else { this.s2CAwardsBuilder_.clear(); }  return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ReSetluckyAwardResponse_descriptor; } public ActivityHandler.ReSetluckyAwardResponse getDefaultInstanceForType() { return ActivityHandler.ReSetluckyAwardResponse.getDefaultInstance(); } public ActivityHandler.ReSetluckyAwardResponse build() { ActivityHandler.ReSetluckyAwardResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.ReSetluckyAwardResponse buildPartial() { ActivityHandler.ReSetluckyAwardResponse result = new ActivityHandler.ReSetluckyAwardResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if (this.s2CAwardsBuilder_ == null) { if ((this.bitField0_ & 0x4) == 4) { this.s2CAwards_ = Collections.unmodifiableList(this.s2CAwards_); this.bitField0_ &= 0xFFFFFFFB; }  result.s2CAwards_ = this.s2CAwards_; } else { result.s2CAwards_ = this.s2CAwardsBuilder_.build(); }  result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ReSetluckyAwardResponse) return mergeFrom((ActivityHandler.ReSetluckyAwardResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.ReSetluckyAwardResponse other) { if (other == ActivityHandler.ReSetluckyAwardResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  if (this.s2CAwardsBuilder_ == null) { if (!other.s2CAwards_.isEmpty()) { if (this.s2CAwards_.isEmpty()) { this.s2CAwards_ = other.s2CAwards_; this.bitField0_ &= 0xFFFFFFFB; } else { ensureS2CAwardsIsMutable(); this.s2CAwards_.addAll(other.s2CAwards_); }  onChanged(); }  } else if (!other.s2CAwards_.isEmpty()) { if (this.s2CAwardsBuilder_.isEmpty()) { this.s2CAwardsBuilder_.dispose(); this.s2CAwardsBuilder_ = null; this.s2CAwards_ = other.s2CAwards_; this.bitField0_ &= 0xFFFFFFFB; this.s2CAwardsBuilder_ = ActivityHandler.ReSetluckyAwardResponse.alwaysUseFieldBuilders ? getS2CAwardsFieldBuilder() : null; } else { this.s2CAwardsBuilder_.addAllMessages(other.s2CAwards_); }  }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  for (int i = 0; i < getS2CAwardsCount(); i++) { if (!getS2CAwards(i).isInitialized()) return false;  }  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ReSetluckyAwardResponse parsedMessage = null; try { parsedMessage = (ActivityHandler.ReSetluckyAwardResponse)ActivityHandler.ReSetluckyAwardResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.ReSetluckyAwardResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = ActivityHandler.ReSetluckyAwardResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } private void ensureS2CAwardsIsMutable() { if ((this.bitField0_ & 0x4) != 4) { this.s2CAwards_ = new ArrayList<>(this.s2CAwards_); this.bitField0_ |= 0x4; }  } public List<ItemOuterClass.MiniItem> getS2CAwardsList() { if (this.s2CAwardsBuilder_ == null) return Collections.unmodifiableList(this.s2CAwards_);  return this.s2CAwardsBuilder_.getMessageList(); } public int getS2CAwardsCount() { if (this.s2CAwardsBuilder_ == null) return this.s2CAwards_.size();  return this.s2CAwardsBuilder_.getCount(); } public ItemOuterClass.MiniItem getS2CAwards(int index) { if (this.s2CAwardsBuilder_ == null) return this.s2CAwards_.get(index);  return (ItemOuterClass.MiniItem)this.s2CAwardsBuilder_.getMessage(index); } public Builder setS2CAwards(int index, ItemOuterClass.MiniItem value) { if (this.s2CAwardsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CAwardsIsMutable(); this.s2CAwards_.set(index, value); onChanged(); } else { this.s2CAwardsBuilder_.setMessage(index, (GeneratedMessage)value); }  return this; } public Builder setS2CAwards(int index, ItemOuterClass.MiniItem.Builder builderForValue) { if (this.s2CAwardsBuilder_ == null) { ensureS2CAwardsIsMutable(); this.s2CAwards_.set(index, builderForValue.build()); onChanged(); } else { this.s2CAwardsBuilder_.setMessage(index, (GeneratedMessage)builderForValue.build()); }  return this; } public Builder addS2CAwards(ItemOuterClass.MiniItem value) { if (this.s2CAwardsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CAwardsIsMutable(); this.s2CAwards_.add(value); onChanged(); } else { this.s2CAwardsBuilder_.addMessage((GeneratedMessage)value); }  return this; } public Builder addS2CAwards(int index, ItemOuterClass.MiniItem value) { if (this.s2CAwardsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CAwardsIsMutable(); this.s2CAwards_.add(index, value); onChanged(); } else { this.s2CAwardsBuilder_.addMessage(index, (GeneratedMessage)value); }  return this; } public Builder addS2CAwards(ItemOuterClass.MiniItem.Builder builderForValue) { if (this.s2CAwardsBuilder_ == null) { ensureS2CAwardsIsMutable(); this.s2CAwards_.add(builderForValue.build()); onChanged(); } else { this.s2CAwardsBuilder_.addMessage((GeneratedMessage)builderForValue.build()); }  return this; } public Builder addS2CAwards(int index, ItemOuterClass.MiniItem.Builder builderForValue) { if (this.s2CAwardsBuilder_ == null) { ensureS2CAwardsIsMutable(); this.s2CAwards_.add(index, builderForValue.build()); onChanged(); } else { this.s2CAwardsBuilder_.addMessage(index, (GeneratedMessage)builderForValue.build()); }  return this; } public Builder addAllS2CAwards(Iterable<? extends ItemOuterClass.MiniItem> values) { if (this.s2CAwardsBuilder_ == null) { ensureS2CAwardsIsMutable(); AbstractMessageLite.Builder.addAll(values, this.s2CAwards_); onChanged(); } else { this.s2CAwardsBuilder_.addAllMessages(values); }  return this; } public Builder clearS2CAwards() { if (this.s2CAwardsBuilder_ == null) { this.s2CAwards_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; onChanged(); } else { this.s2CAwardsBuilder_.clear(); }  return this; } public Builder removeS2CAwards(int index) { if (this.s2CAwardsBuilder_ == null) { ensureS2CAwardsIsMutable(); this.s2CAwards_.remove(index); onChanged(); } else { this.s2CAwardsBuilder_.remove(index); }  return this; } public ItemOuterClass.MiniItem.Builder getS2CAwardsBuilder(int index) { return (ItemOuterClass.MiniItem.Builder)getS2CAwardsFieldBuilder().getBuilder(index); } public ItemOuterClass.MiniItemOrBuilder getS2CAwardsOrBuilder(int index) { if (this.s2CAwardsBuilder_ == null) return (ItemOuterClass.MiniItemOrBuilder)this.s2CAwards_.get(index);  return (ItemOuterClass.MiniItemOrBuilder)this.s2CAwardsBuilder_.getMessageOrBuilder(index); } public List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CAwardsOrBuilderList() { if (this.s2CAwardsBuilder_ != null) return this.s2CAwardsBuilder_.getMessageOrBuilderList();  return (List)Collections.unmodifiableList(this.s2CAwards_); } public ItemOuterClass.MiniItem.Builder addS2CAwardsBuilder() { return (ItemOuterClass.MiniItem.Builder)getS2CAwardsFieldBuilder().addBuilder((GeneratedMessage)ItemOuterClass.MiniItem.getDefaultInstance()); } public ItemOuterClass.MiniItem.Builder addS2CAwardsBuilder(int index) { return (ItemOuterClass.MiniItem.Builder)getS2CAwardsFieldBuilder().addBuilder(index, (GeneratedMessage)ItemOuterClass.MiniItem.getDefaultInstance()); } public List<ItemOuterClass.MiniItem.Builder> getS2CAwardsBuilderList() { return getS2CAwardsFieldBuilder().getBuilderList(); } private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> getS2CAwardsFieldBuilder() { if (this.s2CAwardsBuilder_ == null) { this.s2CAwardsBuilder_ = new RepeatedFieldBuilder(this.s2CAwards_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean()); this.s2CAwards_ = null; }  return this.s2CAwardsBuilder_; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class OpenSevenDayRequest
/*       */     extends GeneratedMessage
/*       */     implements OpenSevenDayRequestOrBuilder
/*       */   {
/* 26417 */     private static final OpenSevenDayRequest defaultInstance = new OpenSevenDayRequest(true); private final UnknownFieldSet unknownFields; private OpenSevenDayRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private OpenSevenDayRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static OpenSevenDayRequest getDefaultInstance() { return defaultInstance; } public OpenSevenDayRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private OpenSevenDayRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.c2SDay_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_OpenSevenDayRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_OpenSevenDayRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(OpenSevenDayRequest.class, Builder.class); } public static Parser<OpenSevenDayRequest> PARSER = (Parser<OpenSevenDayRequest>)new AbstractParser<OpenSevenDayRequest>() { public ActivityHandler.OpenSevenDayRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.OpenSevenDayRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_DAY_FIELD_NUMBER = 1; private int c2SDay_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<OpenSevenDayRequest> getParserForType() { return PARSER; } public boolean hasC2SDay() { return ((this.bitField0_ & 0x1) == 1); } public int getC2SDay() { return this.c2SDay_; } private void initFields() { this.c2SDay_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SDay()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.c2SDay_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.c2SDay_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static OpenSevenDayRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (OpenSevenDayRequest)PARSER.parseFrom(data); } public static OpenSevenDayRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (OpenSevenDayRequest)PARSER.parseFrom(data, extensionRegistry); } public static OpenSevenDayRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (OpenSevenDayRequest)PARSER.parseFrom(data); } public static OpenSevenDayRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (OpenSevenDayRequest)PARSER.parseFrom(data, extensionRegistry); } public static OpenSevenDayRequest parseFrom(InputStream input) throws IOException { return (OpenSevenDayRequest)PARSER.parseFrom(input); } public static OpenSevenDayRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (OpenSevenDayRequest)PARSER.parseFrom(input, extensionRegistry); } public static OpenSevenDayRequest parseDelimitedFrom(InputStream input) throws IOException { return (OpenSevenDayRequest)PARSER.parseDelimitedFrom(input); } public static OpenSevenDayRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (OpenSevenDayRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static OpenSevenDayRequest parseFrom(CodedInputStream input) throws IOException { return (OpenSevenDayRequest)PARSER.parseFrom(input); } public static OpenSevenDayRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (OpenSevenDayRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(OpenSevenDayRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.OpenSevenDayRequestOrBuilder {
/* 26418 */       private int bitField0_; private int c2SDay_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_OpenSevenDayRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_OpenSevenDayRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.OpenSevenDayRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.OpenSevenDayRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SDay_ = 0; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_OpenSevenDayRequest_descriptor; } public ActivityHandler.OpenSevenDayRequest getDefaultInstanceForType() { return ActivityHandler.OpenSevenDayRequest.getDefaultInstance(); } public ActivityHandler.OpenSevenDayRequest build() { ActivityHandler.OpenSevenDayRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.OpenSevenDayRequest buildPartial() { ActivityHandler.OpenSevenDayRequest result = new ActivityHandler.OpenSevenDayRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SDay_ = this.c2SDay_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.OpenSevenDayRequest) return mergeFrom((ActivityHandler.OpenSevenDayRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.OpenSevenDayRequest other) { if (other == ActivityHandler.OpenSevenDayRequest.getDefaultInstance()) return this;  if (other.hasC2SDay()) setC2SDay(other.getC2SDay());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SDay()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.OpenSevenDayRequest parsedMessage = null; try { parsedMessage = (ActivityHandler.OpenSevenDayRequest)ActivityHandler.OpenSevenDayRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.OpenSevenDayRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SDay() { return ((this.bitField0_ & 0x1) == 1); } public int getC2SDay() { return this.c2SDay_; } public Builder setC2SDay(int value) { this.bitField0_ |= 0x1; this.c2SDay_ = value; onChanged(); return this; } public Builder clearC2SDay() { this.bitField0_ &= 0xFFFFFFFE; this.c2SDay_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class OpenSevenDayResponse
/*       */     extends GeneratedMessage
/*       */     implements OpenSevenDayResponseOrBuilder
/*       */   {
/* 28055 */     private static final OpenSevenDayResponse defaultInstance = new OpenSevenDayResponse(true); private final UnknownFieldSet unknownFields; private OpenSevenDayResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private OpenSevenDayResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static OpenSevenDayResponse getDefaultInstance() { return defaultInstance; } public OpenSevenDayResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private OpenSevenDayResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int length, limit, tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 24: this.bitField0_ |= 0x4; this.s2CCurDay_ = input.readInt32(); break;case 34: bs = input.readBytes(); this.bitField0_ |= 0x8; this.s2CBeginTime_ = bs; break;case 42: bs = input.readBytes(); this.bitField0_ |= 0x10; this.s2CEndTime_ = bs; break;case 50: bs = input.readBytes(); this.bitField0_ |= 0x20; this.s2CContent_ = bs; break;case 58: if ((mutable_bitField0_ & 0x40) != 64) { this.s2CAwardInfo_ = new ArrayList<>(); mutable_bitField0_ |= 0x40; }  this.s2CAwardInfo_.add(input.readMessage(ActivityHandler.awardSevenDay.PARSER, extensionRegistry)); break;case 64: if ((mutable_bitField0_ & 0x80) != 128) { this.s2CHudDays_ = new ArrayList<>(); mutable_bitField0_ |= 0x80; }  this.s2CHudDays_.add(Integer.valueOf(input.readInt32())); break;case 66: length = input.readRawVarint32(); limit = input.pushLimit(length); if ((mutable_bitField0_ & 0x80) != 128 && input.getBytesUntilLimit() > 0) { this.s2CHudDays_ = new ArrayList<>(); mutable_bitField0_ |= 0x80; }  while (input.getBytesUntilLimit() > 0) this.s2CHudDays_.add(Integer.valueOf(input.readInt32()));  input.popLimit(limit); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x40) == 64) this.s2CAwardInfo_ = Collections.unmodifiableList(this.s2CAwardInfo_);  if ((mutable_bitField0_ & 0x80) == 128) this.s2CHudDays_ = Collections.unmodifiableList(this.s2CHudDays_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_OpenSevenDayResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_OpenSevenDayResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(OpenSevenDayResponse.class, Builder.class); } public static Parser<OpenSevenDayResponse> PARSER = (Parser<OpenSevenDayResponse>)new AbstractParser<OpenSevenDayResponse>() { public ActivityHandler.OpenSevenDayResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.OpenSevenDayResponse(input, extensionRegistry); } }
/* 28056 */     ; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_CURDAY_FIELD_NUMBER = 3; private int s2CCurDay_; public static final int S2C_BEGINTIME_FIELD_NUMBER = 4; private Object s2CBeginTime_; public static final int S2C_ENDTIME_FIELD_NUMBER = 5; private Object s2CEndTime_; public static final int S2C_CONTENT_FIELD_NUMBER = 6; private Object s2CContent_; public static final int S2C_AWARDINFO_FIELD_NUMBER = 7; private List<ActivityHandler.awardSevenDay> s2CAwardInfo_; public static final int S2C_HUDDAYS_FIELD_NUMBER = 8; private List<Integer> s2CHudDays_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<OpenSevenDayResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public boolean hasS2CCurDay() { return ((this.bitField0_ & 0x4) == 4); } public int getS2CCurDay() { return this.s2CCurDay_; } static { defaultInstance.initFields(); } public boolean hasS2CBeginTime() { return ((this.bitField0_ & 0x8) == 8); } public String getS2CBeginTime() { Object ref = this.s2CBeginTime_;
/*       */       if (ref instanceof String)
/*       */         return (String)ref; 
/*       */       ByteString bs = (ByteString)ref;
/*       */       String s = bs.toStringUtf8();
/*       */       if (bs.isValidUtf8())
/*       */         this.s2CBeginTime_ = s; 
/*       */       return s; } public ByteString getS2CBeginTimeBytes() { Object ref = this.s2CBeginTime_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.s2CBeginTime_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref; } public boolean hasS2CEndTime() { return ((this.bitField0_ & 0x10) == 16); } public String getS2CEndTime() { Object ref = this.s2CEndTime_;
/*       */       if (ref instanceof String)
/*       */         return (String)ref; 
/*       */       ByteString bs = (ByteString)ref;
/*       */       String s = bs.toStringUtf8();
/*       */       if (bs.isValidUtf8())
/*       */         this.s2CEndTime_ = s; 
/*       */       return s; } public ByteString getS2CEndTimeBytes() { Object ref = this.s2CEndTime_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.s2CEndTime_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref; } public boolean hasS2CContent() { return ((this.bitField0_ & 0x20) == 32); } public String getS2CContent() { Object ref = this.s2CContent_;
/*       */       if (ref instanceof String)
/*       */         return (String)ref; 
/*       */       ByteString bs = (ByteString)ref;
/*       */       String s = bs.toStringUtf8();
/*       */       if (bs.isValidUtf8())
/*       */         this.s2CContent_ = s; 
/*       */       return s; } public ByteString getS2CContentBytes() { Object ref = this.s2CContent_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.s2CContent_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref; } public List<ActivityHandler.awardSevenDay> getS2CAwardInfoList() { return this.s2CAwardInfo_; } public List<? extends ActivityHandler.awardSevenDayOrBuilder> getS2CAwardInfoOrBuilderList() { return (List)this.s2CAwardInfo_; } public int getS2CAwardInfoCount() { return this.s2CAwardInfo_.size(); } public ActivityHandler.awardSevenDay getS2CAwardInfo(int index) { return this.s2CAwardInfo_.get(index); } public ActivityHandler.awardSevenDayOrBuilder getS2CAwardInfoOrBuilder(int index) { return this.s2CAwardInfo_.get(index); } public List<Integer> getS2CHudDaysList() { return this.s2CHudDays_; } public int getS2CHudDaysCount() { return this.s2CHudDays_.size(); } public int getS2CHudDays(int index) { return ((Integer)this.s2CHudDays_.get(index)).intValue(); } private void initFields() { this.s2CCode_ = 0;
/*       */       this.s2CMsg_ = "";
/*       */       this.s2CCurDay_ = 0;
/*       */       this.s2CBeginTime_ = "";
/*       */       this.s2CEndTime_ = "";
/*       */       this.s2CContent_ = "";
/*       */       this.s2CAwardInfo_ = Collections.emptyList();
/*       */       this.s2CHudDays_ = Collections.emptyList(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1)
/*       */         return true; 
/*       */       if (isInitialized == 0)
/*       */         return false; 
/*       */       if (!hasS2CCode()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       for (int i = 0; i < getS2CAwardInfoCount(); i++) {
/*       */         if (!getS2CAwardInfo(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0;
/*       */           return false;
/*       */         } 
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1)
/*       */         output.writeInt32(1, this.s2CCode_); 
/*       */       if ((this.bitField0_ & 0x2) == 2)
/*       */         output.writeBytes(2, getS2CMsgBytes()); 
/*       */       if ((this.bitField0_ & 0x4) == 4)
/*       */         output.writeInt32(3, this.s2CCurDay_); 
/*       */       if ((this.bitField0_ & 0x8) == 8)
/*       */         output.writeBytes(4, getS2CBeginTimeBytes()); 
/*       */       if ((this.bitField0_ & 0x10) == 16)
/*       */         output.writeBytes(5, getS2CEndTimeBytes()); 
/*       */       if ((this.bitField0_ & 0x20) == 32)
/*       */         output.writeBytes(6, getS2CContentBytes()); 
/*       */       int i;
/*       */       for (i = 0; i < this.s2CAwardInfo_.size(); i++)
/*       */         output.writeMessage(7, (MessageLite)this.s2CAwardInfo_.get(i)); 
/*       */       for (i = 0; i < this.s2CHudDays_.size(); i++)
/*       */         output.writeInt32(8, ((Integer)this.s2CHudDays_.get(i)).intValue()); 
/*       */       getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize;
/*       */       if (size != -1)
/*       */         return size; 
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1)
/*       */         size += CodedOutputStream.computeInt32Size(1, this.s2CCode_); 
/*       */       if ((this.bitField0_ & 0x2) == 2)
/*       */         size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes()); 
/*       */       if ((this.bitField0_ & 0x4) == 4)
/*       */         size += CodedOutputStream.computeInt32Size(3, this.s2CCurDay_); 
/*       */       if ((this.bitField0_ & 0x8) == 8)
/*       */         size += CodedOutputStream.computeBytesSize(4, getS2CBeginTimeBytes()); 
/*       */       if ((this.bitField0_ & 0x10) == 16)
/*       */         size += CodedOutputStream.computeBytesSize(5, getS2CEndTimeBytes()); 
/*       */       if ((this.bitField0_ & 0x20) == 32)
/*       */         size += CodedOutputStream.computeBytesSize(6, getS2CContentBytes()); 
/*       */       for (int i = 0; i < this.s2CAwardInfo_.size(); i++)
/*       */         size += CodedOutputStream.computeMessageSize(7, (MessageLite)this.s2CAwardInfo_.get(i)); 
/*       */       int dataSize = 0;
/*       */       for (int j = 0; j < this.s2CHudDays_.size(); j++)
/*       */         dataSize += CodedOutputStream.computeInt32SizeNoTag(((Integer)this.s2CHudDays_.get(j)).intValue()); 
/*       */       size += dataSize;
/*       */       size += 1 * getS2CHudDaysList().size();
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static OpenSevenDayResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (OpenSevenDayResponse)PARSER.parseFrom(data); } public static OpenSevenDayResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (OpenSevenDayResponse)PARSER.parseFrom(data, extensionRegistry); } public static OpenSevenDayResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (OpenSevenDayResponse)PARSER.parseFrom(data); } public static OpenSevenDayResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (OpenSevenDayResponse)PARSER.parseFrom(data, extensionRegistry); } public static OpenSevenDayResponse parseFrom(InputStream input) throws IOException { return (OpenSevenDayResponse)PARSER.parseFrom(input); } public static OpenSevenDayResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (OpenSevenDayResponse)PARSER.parseFrom(input, extensionRegistry); } public static OpenSevenDayResponse parseDelimitedFrom(InputStream input) throws IOException {
/*       */       return (OpenSevenDayResponse)PARSER.parseDelimitedFrom(input);
/*       */     } public static OpenSevenDayResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (OpenSevenDayResponse)PARSER.parseDelimitedFrom(input, extensionRegistry);
/*       */     } public static OpenSevenDayResponse parseFrom(CodedInputStream input) throws IOException {
/*       */       return (OpenSevenDayResponse)PARSER.parseFrom(input);
/*       */     } public static OpenSevenDayResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (OpenSevenDayResponse)PARSER.parseFrom(input, extensionRegistry);
/*       */     } public static Builder newBuilder() {
/*       */       return Builder.create();
/*       */     } public Builder newBuilderForType() {
/*       */       return newBuilder();
/*       */     } public static Builder newBuilder(OpenSevenDayResponse prototype) {
/*       */       return newBuilder().mergeFrom(prototype);
/*       */     } public Builder toBuilder() {
/*       */       return newBuilder(this);
/*       */     } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
/*       */       Builder builder = new Builder(parent);
/*       */       return builder;
/*       */     } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.OpenSevenDayResponseOrBuilder { private int bitField0_; private int s2CCode_; private Object s2CMsg_; private int s2CCurDay_; private Object s2CBeginTime_; private Object s2CEndTime_; private Object s2CContent_; private List<ActivityHandler.awardSevenDay> s2CAwardInfo_; private RepeatedFieldBuilder<ActivityHandler.awardSevenDay, ActivityHandler.awardSevenDay.Builder, ActivityHandler.awardSevenDayOrBuilder> s2CAwardInfoBuilder_; private List<Integer> s2CHudDays_; public static final Descriptors.Descriptor getDescriptor() {
/*       */         return ActivityHandler.internal_static_pomelo_area_OpenSevenDayResponse_descriptor;
/*       */       } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */         return ActivityHandler.internal_static_pomelo_area_OpenSevenDayResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.OpenSevenDayResponse.class, Builder.class);
/*       */       } private Builder() {
/*       */         this.s2CMsg_ = "";
/*       */         this.s2CBeginTime_ = "";
/*       */         this.s2CEndTime_ = "";
/*       */         this.s2CContent_ = "";
/*       */         this.s2CAwardInfo_ = Collections.emptyList();
/*       */         this.s2CHudDays_ = Collections.emptyList();
/*       */         maybeForceBuilderInitialization();
/*       */       } private Builder(GeneratedMessage.BuilderParent parent) {
/*       */         super(parent);
/*       */         this.s2CMsg_ = "";
/*       */         this.s2CBeginTime_ = "";
/*       */         this.s2CEndTime_ = "";
/*       */         this.s2CContent_ = "";
/*       */         this.s2CAwardInfo_ = Collections.emptyList();
/*       */         this.s2CHudDays_ = Collections.emptyList();
/*       */         maybeForceBuilderInitialization();
/*       */       } private void maybeForceBuilderInitialization() {
/*       */         if (ActivityHandler.OpenSevenDayResponse.alwaysUseFieldBuilders)
/*       */           getS2CAwardInfoFieldBuilder(); 
/*       */       } private static Builder create() {
/*       */         return new Builder();
/*       */       } public Builder clear() {
/*       */         super.clear();
/*       */         this.s2CCode_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CMsg_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.s2CCurDay_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.s2CBeginTime_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.s2CEndTime_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.s2CContent_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFDF;
/*       */         if (this.s2CAwardInfoBuilder_ == null) {
/*       */           this.s2CAwardInfo_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFBF;
/*       */         } else {
/*       */           this.s2CAwardInfoBuilder_.clear();
/*       */         } 
/*       */         this.s2CHudDays_ = Collections.emptyList();
/*       */         this.bitField0_ &= 0xFFFFFF7F;
/*       */         return this;
/*       */       } public Builder clone() {
/*       */         return create().mergeFrom(buildPartial());
/*       */       } public Descriptors.Descriptor getDescriptorForType() {
/*       */         return ActivityHandler.internal_static_pomelo_area_OpenSevenDayResponse_descriptor;
/*       */       } public ActivityHandler.OpenSevenDayResponse getDefaultInstanceForType() {
/*       */         return ActivityHandler.OpenSevenDayResponse.getDefaultInstance();
/*       */       } public ActivityHandler.OpenSevenDayResponse build() {
/*       */         ActivityHandler.OpenSevenDayResponse result = buildPartial();
/*       */         if (!result.isInitialized())
/*       */           throw newUninitializedMessageException(result); 
/*       */         return result;
/*       */       } public ActivityHandler.OpenSevenDayResponse buildPartial() {
/*       */         ActivityHandler.OpenSevenDayResponse result = new ActivityHandler.OpenSevenDayResponse(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1)
/*       */           to_bitField0_ |= 0x1; 
/*       */         result.s2CCode_ = this.s2CCode_;
/*       */         if ((from_bitField0_ & 0x2) == 2)
/*       */           to_bitField0_ |= 0x2; 
/*       */         result.s2CMsg_ = this.s2CMsg_;
/*       */         if ((from_bitField0_ & 0x4) == 4)
/*       */           to_bitField0_ |= 0x4; 
/*       */         result.s2CCurDay_ = this.s2CCurDay_;
/*       */         if ((from_bitField0_ & 0x8) == 8)
/*       */           to_bitField0_ |= 0x8; 
/*       */         result.s2CBeginTime_ = this.s2CBeginTime_;
/*       */         if ((from_bitField0_ & 0x10) == 16)
/*       */           to_bitField0_ |= 0x10; 
/*       */         result.s2CEndTime_ = this.s2CEndTime_;
/*       */         if ((from_bitField0_ & 0x20) == 32)
/*       */           to_bitField0_ |= 0x20; 
/*       */         result.s2CContent_ = this.s2CContent_;
/*       */         if (this.s2CAwardInfoBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x40) == 64) {
/*       */             this.s2CAwardInfo_ = Collections.unmodifiableList(this.s2CAwardInfo_);
/*       */             this.bitField0_ &= 0xFFFFFFBF;
/*       */           } 
/*       */           result.s2CAwardInfo_ = this.s2CAwardInfo_;
/*       */         } else {
/*       */           result.s2CAwardInfo_ = this.s2CAwardInfoBuilder_.build();
/*       */         } 
/*       */         if ((this.bitField0_ & 0x80) == 128) {
/*       */           this.s2CHudDays_ = Collections.unmodifiableList(this.s2CHudDays_);
/*       */           this.bitField0_ &= 0xFFFFFF7F;
/*       */         } 
/*       */         result.s2CHudDays_ = this.s2CHudDays_;
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result;
/*       */       } public Builder mergeFrom(Message other) {
/*       */         if (other instanceof ActivityHandler.OpenSevenDayResponse)
/*       */           return mergeFrom((ActivityHandler.OpenSevenDayResponse)other); 
/*       */         super.mergeFrom(other);
/*       */         return this;
/*       */       } public Builder mergeFrom(ActivityHandler.OpenSevenDayResponse other) {
/*       */         if (other == ActivityHandler.OpenSevenDayResponse.getDefaultInstance())
/*       */           return this; 
/*       */         if (other.hasS2CCode())
/*       */           setS2CCode(other.getS2CCode()); 
/*       */         if (other.hasS2CMsg()) {
/*       */           this.bitField0_ |= 0x2;
/*       */           this.s2CMsg_ = other.s2CMsg_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasS2CCurDay())
/*       */           setS2CCurDay(other.getS2CCurDay()); 
/*       */         if (other.hasS2CBeginTime()) {
/*       */           this.bitField0_ |= 0x8;
/*       */           this.s2CBeginTime_ = other.s2CBeginTime_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasS2CEndTime()) {
/*       */           this.bitField0_ |= 0x10;
/*       */           this.s2CEndTime_ = other.s2CEndTime_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasS2CContent()) {
/*       */           this.bitField0_ |= 0x20;
/*       */           this.s2CContent_ = other.s2CContent_;
/*       */           onChanged();
/*       */         } 
/*       */         if (this.s2CAwardInfoBuilder_ == null) {
/*       */           if (!other.s2CAwardInfo_.isEmpty()) {
/*       */             if (this.s2CAwardInfo_.isEmpty()) {
/*       */               this.s2CAwardInfo_ = other.s2CAwardInfo_;
/*       */               this.bitField0_ &= 0xFFFFFFBF;
/*       */             } else {
/*       */               ensureS2CAwardInfoIsMutable();
/*       */               this.s2CAwardInfo_.addAll(other.s2CAwardInfo_);
/*       */             } 
/*       */             onChanged();
/*       */           } 
/*       */         } else if (!other.s2CAwardInfo_.isEmpty()) {
/*       */           if (this.s2CAwardInfoBuilder_.isEmpty()) {
/*       */             this.s2CAwardInfoBuilder_.dispose();
/*       */             this.s2CAwardInfoBuilder_ = null;
/*       */             this.s2CAwardInfo_ = other.s2CAwardInfo_;
/*       */             this.bitField0_ &= 0xFFFFFFBF;
/*       */             this.s2CAwardInfoBuilder_ = ActivityHandler.OpenSevenDayResponse.alwaysUseFieldBuilders ? getS2CAwardInfoFieldBuilder() : null;
/*       */           } else {
/*       */             this.s2CAwardInfoBuilder_.addAllMessages(other.s2CAwardInfo_);
/*       */           } 
/*       */         } 
/*       */         if (!other.s2CHudDays_.isEmpty()) {
/*       */           if (this.s2CHudDays_.isEmpty()) {
/*       */             this.s2CHudDays_ = other.s2CHudDays_;
/*       */             this.bitField0_ &= 0xFFFFFF7F;
/*       */           } else {
/*       */             ensureS2CHudDaysIsMutable();
/*       */             this.s2CHudDays_.addAll(other.s2CHudDays_);
/*       */           } 
/*       */           onChanged();
/*       */         } 
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this;
/*       */       } public final boolean isInitialized() {
/*       */         if (!hasS2CCode())
/*       */           return false; 
/*       */         for (int i = 0; i < getS2CAwardInfoCount(); i++) {
/*       */           if (!getS2CAwardInfo(i).isInitialized())
/*       */             return false; 
/*       */         } 
/*       */         return true;
/*       */       } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */         ActivityHandler.OpenSevenDayResponse parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (ActivityHandler.OpenSevenDayResponse)ActivityHandler.OpenSevenDayResponse.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (ActivityHandler.OpenSevenDayResponse)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null)
/*       */             mergeFrom(parsedMessage); 
/*       */         } 
/*       */         return this;
/*       */       } public boolean hasS2CCode() {
/*       */         return ((this.bitField0_ & 0x1) == 1);
/*       */       } public int getS2CCode() {
/*       */         return this.s2CCode_;
/*       */       } public Builder setS2CCode(int value) {
/*       */         this.bitField0_ |= 0x1;
/*       */         this.s2CCode_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       } public Builder clearS2CCode() {
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CCode_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       } public boolean hasS2CMsg() {
/*       */         return ((this.bitField0_ & 0x2) == 2);
/*       */       } public String getS2CMsg() {
/*       */         Object ref = this.s2CMsg_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.s2CMsg_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       } public ByteString getS2CMsgBytes() {
/*       */         Object ref = this.s2CMsg_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CMsg_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       } public Builder setS2CMsg(String value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       } public Builder clearS2CMsg() {
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.s2CMsg_ = ActivityHandler.OpenSevenDayResponse.getDefaultInstance().getS2CMsg();
/*       */         onChanged();
/*       */         return this;
/*       */       } public Builder setS2CMsgBytes(ByteString value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       } public boolean hasS2CCurDay() {
/*       */         return ((this.bitField0_ & 0x4) == 4);
/*       */       } public int getS2CCurDay() {
/*       */         return this.s2CCurDay_;
/*       */       } public Builder setS2CCurDay(int value) {
/*       */         this.bitField0_ |= 0x4;
/*       */         this.s2CCurDay_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       } public Builder clearS2CCurDay() {
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.s2CCurDay_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       } public boolean hasS2CBeginTime() {
/*       */         return ((this.bitField0_ & 0x8) == 8);
/*       */       } public String getS2CBeginTime() {
/*       */         Object ref = this.s2CBeginTime_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.s2CBeginTime_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       } public ByteString getS2CBeginTimeBytes() {
/*       */         Object ref = this.s2CBeginTime_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CBeginTime_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       } public Builder setS2CBeginTime(String value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x8;
/*       */         this.s2CBeginTime_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       } public Builder clearS2CBeginTime() {
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.s2CBeginTime_ = ActivityHandler.OpenSevenDayResponse.getDefaultInstance().getS2CBeginTime();
/*       */         onChanged();
/*       */         return this;
/*       */       } public Builder setS2CBeginTimeBytes(ByteString value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x8;
/*       */         this.s2CBeginTime_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       } public boolean hasS2CEndTime() {
/*       */         return ((this.bitField0_ & 0x10) == 16);
/*       */       } public String getS2CEndTime() {
/*       */         Object ref = this.s2CEndTime_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.s2CEndTime_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       } public ByteString getS2CEndTimeBytes() {
/*       */         Object ref = this.s2CEndTime_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CEndTime_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       } public Builder setS2CEndTime(String value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x10;
/*       */         this.s2CEndTime_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       } public Builder clearS2CEndTime() {
/*       */         this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.s2CEndTime_ = ActivityHandler.OpenSevenDayResponse.getDefaultInstance().getS2CEndTime();
/*       */         onChanged();
/*       */         return this;
/*       */       } public Builder setS2CEndTimeBytes(ByteString value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x10;
/*       */         this.s2CEndTime_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       } public boolean hasS2CContent() {
/*       */         return ((this.bitField0_ & 0x20) == 32);
/*       */       } public String getS2CContent() {
/*       */         Object ref = this.s2CContent_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.s2CContent_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       } public ByteString getS2CContentBytes() {
/*       */         Object ref = this.s2CContent_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CContent_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       } public Builder setS2CContent(String value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x20;
/*       */         this.s2CContent_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       } public Builder clearS2CContent() {
/*       */         this.bitField0_ &= 0xFFFFFFDF;
/*       */         this.s2CContent_ = ActivityHandler.OpenSevenDayResponse.getDefaultInstance().getS2CContent();
/*       */         onChanged();
/*       */         return this;
/*       */       } public Builder setS2CContentBytes(ByteString value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x20;
/*       */         this.s2CContent_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       private void ensureS2CAwardInfoIsMutable() {
/*       */         if ((this.bitField0_ & 0x40) != 64) {
/*       */           this.s2CAwardInfo_ = new ArrayList<>(this.s2CAwardInfo_);
/*       */           this.bitField0_ |= 0x40;
/*       */         } 
/*       */       }
/*       */       public List<ActivityHandler.awardSevenDay> getS2CAwardInfoList() {
/*       */         if (this.s2CAwardInfoBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.s2CAwardInfo_); 
/*       */         return this.s2CAwardInfoBuilder_.getMessageList();
/*       */       }
/*       */       public int getS2CAwardInfoCount() {
/*       */         if (this.s2CAwardInfoBuilder_ == null)
/*       */           return this.s2CAwardInfo_.size(); 
/*       */         return this.s2CAwardInfoBuilder_.getCount();
/*       */       }
/*       */       public ActivityHandler.awardSevenDay getS2CAwardInfo(int index) {
/*       */         if (this.s2CAwardInfoBuilder_ == null)
/*       */           return this.s2CAwardInfo_.get(index); 
/*       */         return (ActivityHandler.awardSevenDay)this.s2CAwardInfoBuilder_.getMessage(index);
/*       */       }
/*       */       public Builder setS2CAwardInfo(int index, ActivityHandler.awardSevenDay value) {
/*       */         if (this.s2CAwardInfoBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureS2CAwardInfoIsMutable();
/*       */           this.s2CAwardInfo_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardInfoBuilder_.setMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder setS2CAwardInfo(int index, ActivityHandler.awardSevenDay.Builder builderForValue) {
/*       */         if (this.s2CAwardInfoBuilder_ == null) {
/*       */           ensureS2CAwardInfoIsMutable();
/*       */           this.s2CAwardInfo_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardInfoBuilder_.setMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addS2CAwardInfo(ActivityHandler.awardSevenDay value) {
/*       */         if (this.s2CAwardInfoBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureS2CAwardInfoIsMutable();
/*       */           this.s2CAwardInfo_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardInfoBuilder_.addMessage(value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addS2CAwardInfo(int index, ActivityHandler.awardSevenDay value) {
/*       */         if (this.s2CAwardInfoBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureS2CAwardInfoIsMutable();
/*       */           this.s2CAwardInfo_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardInfoBuilder_.addMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addS2CAwardInfo(ActivityHandler.awardSevenDay.Builder builderForValue) {
/*       */         if (this.s2CAwardInfoBuilder_ == null) {
/*       */           ensureS2CAwardInfoIsMutable();
/*       */           this.s2CAwardInfo_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardInfoBuilder_.addMessage(builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addS2CAwardInfo(int index, ActivityHandler.awardSevenDay.Builder builderForValue) {
/*       */         if (this.s2CAwardInfoBuilder_ == null) {
/*       */           ensureS2CAwardInfoIsMutable();
/*       */           this.s2CAwardInfo_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardInfoBuilder_.addMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addAllS2CAwardInfo(Iterable<? extends ActivityHandler.awardSevenDay> values) {
/*       */         if (this.s2CAwardInfoBuilder_ == null) {
/*       */           ensureS2CAwardInfoIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.s2CAwardInfo_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardInfoBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder clearS2CAwardInfo() {
/*       */         if (this.s2CAwardInfoBuilder_ == null) {
/*       */           this.s2CAwardInfo_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFBF;
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardInfoBuilder_.clear();
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder removeS2CAwardInfo(int index) {
/*       */         if (this.s2CAwardInfoBuilder_ == null) {
/*       */           ensureS2CAwardInfoIsMutable();
/*       */           this.s2CAwardInfo_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CAwardInfoBuilder_.remove(index);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public ActivityHandler.awardSevenDay.Builder getS2CAwardInfoBuilder(int index) {
/*       */         return (ActivityHandler.awardSevenDay.Builder)getS2CAwardInfoFieldBuilder().getBuilder(index);
/*       */       }
/*       */       public ActivityHandler.awardSevenDayOrBuilder getS2CAwardInfoOrBuilder(int index) {
/*       */         if (this.s2CAwardInfoBuilder_ == null)
/*       */           return this.s2CAwardInfo_.get(index); 
/*       */         return (ActivityHandler.awardSevenDayOrBuilder)this.s2CAwardInfoBuilder_.getMessageOrBuilder(index);
/*       */       }
/*       */       public List<? extends ActivityHandler.awardSevenDayOrBuilder> getS2CAwardInfoOrBuilderList() {
/*       */         if (this.s2CAwardInfoBuilder_ != null)
/*       */           return this.s2CAwardInfoBuilder_.getMessageOrBuilderList(); 
/*       */         return Collections.unmodifiableList((List)this.s2CAwardInfo_);
/*       */       }
/*       */       public ActivityHandler.awardSevenDay.Builder addS2CAwardInfoBuilder() {
/*       */         return (ActivityHandler.awardSevenDay.Builder)getS2CAwardInfoFieldBuilder().addBuilder(ActivityHandler.awardSevenDay.getDefaultInstance());
/*       */       }
/*       */       public ActivityHandler.awardSevenDay.Builder addS2CAwardInfoBuilder(int index) {
/*       */         return (ActivityHandler.awardSevenDay.Builder)getS2CAwardInfoFieldBuilder().addBuilder(index, ActivityHandler.awardSevenDay.getDefaultInstance());
/*       */       }
/*       */       public List<ActivityHandler.awardSevenDay.Builder> getS2CAwardInfoBuilderList() {
/*       */         return getS2CAwardInfoFieldBuilder().getBuilderList();
/*       */       }
/*       */       private RepeatedFieldBuilder<ActivityHandler.awardSevenDay, ActivityHandler.awardSevenDay.Builder, ActivityHandler.awardSevenDayOrBuilder> getS2CAwardInfoFieldBuilder() {
/*       */         if (this.s2CAwardInfoBuilder_ == null) {
/*       */           this.s2CAwardInfoBuilder_ = new RepeatedFieldBuilder(this.s2CAwardInfo_, ((this.bitField0_ & 0x40) == 64), getParentForChildren(), isClean());
/*       */           this.s2CAwardInfo_ = null;
/*       */         } 
/*       */         return this.s2CAwardInfoBuilder_;
/*       */       }
/*       */       private void ensureS2CHudDaysIsMutable() {
/*       */         if ((this.bitField0_ & 0x80) != 128) {
/*       */           this.s2CHudDays_ = new ArrayList<>(this.s2CHudDays_);
/*       */           this.bitField0_ |= 0x80;
/*       */         } 
/*       */       }
/*       */       public List<Integer> getS2CHudDaysList() {
/*       */         return Collections.unmodifiableList(this.s2CHudDays_);
/*       */       }
/*       */       public int getS2CHudDaysCount() {
/*       */         return this.s2CHudDays_.size();
/*       */       }
/*       */       public int getS2CHudDays(int index) {
/*       */         return ((Integer)this.s2CHudDays_.get(index)).intValue();
/*       */       }
/*       */       public Builder setS2CHudDays(int index, int value) {
/*       */         ensureS2CHudDaysIsMutable();
/*       */         this.s2CHudDays_.set(index, Integer.valueOf(value));
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder addS2CHudDays(int value) {
/*       */         ensureS2CHudDaysIsMutable();
/*       */         this.s2CHudDays_.add(Integer.valueOf(value));
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder addAllS2CHudDays(Iterable<? extends Integer> values) {
/*       */         ensureS2CHudDaysIsMutable();
/*       */         AbstractMessageLite.Builder.addAll(values, this.s2CHudDays_);
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder clearS2CHudDays() {
/*       */         this.s2CHudDays_ = Collections.emptyList();
/*       */         this.bitField0_ &= 0xFFFFFF7F;
/*       */         onChanged();
/*       */         return this;
/*       */       } } }
/* 28735 */   public static final class changeItem extends GeneratedMessage implements changeItemOrBuilder { private static final changeItem defaultInstance = new changeItem(true); private final UnknownFieldSet unknownFields; private changeItem(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private changeItem(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static changeItem getDefaultInstance() { return defaultInstance; } public changeItem getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private changeItem(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.itemCode_ = bs; break;case 16: this.bitField0_ |= 0x2; this.itemNum_ = input.readInt32(); break;case 24: this.bitField0_ |= 0x4; this.isBind_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_changeItem_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_changeItem_fieldAccessorTable.ensureFieldAccessorsInitialized(changeItem.class, Builder.class); } public static Parser<changeItem> PARSER = (Parser<changeItem>)new AbstractParser<changeItem>() { public ActivityHandler.changeItem parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.changeItem(input, extensionRegistry); } }; private int bitField0_; public static final int ITEMCODE_FIELD_NUMBER = 1; private Object itemCode_; public static final int ITEMNUM_FIELD_NUMBER = 2; private int itemNum_; public static final int ISBIND_FIELD_NUMBER = 3; private int isBind_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<changeItem> getParserForType() { return PARSER; } public boolean hasItemCode() { return ((this.bitField0_ & 0x1) == 1); } public String getItemCode() { Object ref = this.itemCode_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.itemCode_ = s;  return s; } public ByteString getItemCodeBytes() { Object ref = this.itemCode_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.itemCode_ = b; return b; }  return (ByteString)ref; } public boolean hasItemNum() { return ((this.bitField0_ & 0x2) == 2); } public int getItemNum() { return this.itemNum_; } public boolean hasIsBind() { return ((this.bitField0_ & 0x4) == 4); } public int getIsBind() { return this.isBind_; } private void initFields() { this.itemCode_ = ""; this.itemNum_ = 0; this.isBind_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasItemCode()) { this.memoizedIsInitialized = 0; return false; }  if (!hasItemNum()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getItemCodeBytes());  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.itemNum_);  if ((this.bitField0_ & 0x4) == 4) output.writeInt32(3, this.isBind_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getItemCodeBytes());  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.itemNum_);  if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt32Size(3, this.isBind_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static changeItem parseFrom(ByteString data) throws InvalidProtocolBufferException { return (changeItem)PARSER.parseFrom(data); } public static changeItem parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (changeItem)PARSER.parseFrom(data, extensionRegistry); } public static changeItem parseFrom(byte[] data) throws InvalidProtocolBufferException { return (changeItem)PARSER.parseFrom(data); } public static changeItem parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (changeItem)PARSER.parseFrom(data, extensionRegistry); } public static changeItem parseFrom(InputStream input) throws IOException { return (changeItem)PARSER.parseFrom(input); } public static changeItem parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (changeItem)PARSER.parseFrom(input, extensionRegistry); } public static changeItem parseDelimitedFrom(InputStream input) throws IOException { return (changeItem)PARSER.parseDelimitedFrom(input); } public static changeItem parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (changeItem)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static changeItem parseFrom(CodedInputStream input) throws IOException { return (changeItem)PARSER.parseFrom(input); } public static changeItem parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (changeItem)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(changeItem prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.changeItemOrBuilder {
/* 28736 */       private int bitField0_; private Object itemCode_; private int itemNum_; private int isBind_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_changeItem_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_changeItem_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.changeItem.class, Builder.class); } private Builder() { this.itemCode_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.itemCode_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.changeItem.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.itemCode_ = ""; this.bitField0_ &= 0xFFFFFFFE; this.itemNum_ = 0; this.bitField0_ &= 0xFFFFFFFD; this.isBind_ = 0; this.bitField0_ &= 0xFFFFFFFB; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_changeItem_descriptor; } public ActivityHandler.changeItem getDefaultInstanceForType() { return ActivityHandler.changeItem.getDefaultInstance(); } public ActivityHandler.changeItem build() { ActivityHandler.changeItem result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.changeItem buildPartial() { ActivityHandler.changeItem result = new ActivityHandler.changeItem(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.itemCode_ = this.itemCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.itemNum_ = this.itemNum_; if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;  result.isBind_ = this.isBind_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.changeItem) return mergeFrom((ActivityHandler.changeItem)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.changeItem other) { if (other == ActivityHandler.changeItem.getDefaultInstance()) return this;  if (other.hasItemCode()) { this.bitField0_ |= 0x1; this.itemCode_ = other.itemCode_; onChanged(); }  if (other.hasItemNum()) setItemNum(other.getItemNum());  if (other.hasIsBind()) setIsBind(other.getIsBind());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasItemCode()) return false;  if (!hasItemNum()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.changeItem parsedMessage = null; try { parsedMessage = (ActivityHandler.changeItem)ActivityHandler.changeItem.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.changeItem)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasItemCode() { return ((this.bitField0_ & 0x1) == 1); } public String getItemCode() { Object ref = this.itemCode_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.itemCode_ = s;  return s; }  return (String)ref; } public ByteString getItemCodeBytes() { Object ref = this.itemCode_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.itemCode_ = b; return b; }  return (ByteString)ref; } public Builder setItemCode(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.itemCode_ = value; onChanged(); return this; } public Builder clearItemCode() { this.bitField0_ &= 0xFFFFFFFE; this.itemCode_ = ActivityHandler.changeItem.getDefaultInstance().getItemCode(); onChanged(); return this; } public Builder setItemCodeBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.itemCode_ = value; onChanged(); return this; } public boolean hasItemNum() { return ((this.bitField0_ & 0x2) == 2); } public int getItemNum() { return this.itemNum_; } public Builder setItemNum(int value) { this.bitField0_ |= 0x2; this.itemNum_ = value; onChanged(); return this; } public Builder clearItemNum() { this.bitField0_ &= 0xFFFFFFFD; this.itemNum_ = 0; onChanged(); return this; } public boolean hasIsBind() { return ((this.bitField0_ & 0x4) == 4); } public int getIsBind() { return this.isBind_; } public Builder setIsBind(int value) { this.bitField0_ |= 0x4; this.isBind_ = value; onChanged(); return this; } public Builder clearIsBind() { this.bitField0_ &= 0xFFFFFFFB; this.isBind_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */      }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class changeInfo
/*       */     extends GeneratedMessage
/*       */     implements changeInfoOrBuilder
/*       */   {
/* 30230 */     private static final changeInfo defaultInstance = new changeInfo(true); private final UnknownFieldSet unknownFields; private changeInfo(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private changeInfo(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static changeInfo getDefaultInstance() { return defaultInstance; } public changeInfo getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private changeInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.changeId_ = input.readInt32(); break;case 18: if ((mutable_bitField0_ & 0x2) != 2) { this.costItem_ = new ArrayList<>(); mutable_bitField0_ |= 0x2; }  this.costItem_.add(input.readMessage(ActivityHandler.changeItem.PARSER, extensionRegistry)); break;case 26: if ((mutable_bitField0_ & 0x4) != 4) { this.rewardItem_ = new ArrayList<>(); mutable_bitField0_ |= 0x4; }  this.rewardItem_.add(input.readMessage(ActivityHandler.changeItem.PARSER, extensionRegistry)); break;case 32: this.bitField0_ |= 0x2; this.changeSate_ = input.readInt32(); break;case 40: this.bitField0_ |= 0x4; this.changeNum_ = input.readInt32(); break;case 48: this.bitField0_ |= 0x8; this.changeMax_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x2) == 2) this.costItem_ = Collections.unmodifiableList(this.costItem_);  if ((mutable_bitField0_ & 0x4) == 4) this.rewardItem_ = Collections.unmodifiableList(this.rewardItem_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_changeInfo_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_changeInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(changeInfo.class, Builder.class); } public static Parser<changeInfo> PARSER = (Parser<changeInfo>)new AbstractParser<changeInfo>() { public ActivityHandler.changeInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.changeInfo(input, extensionRegistry); } }
/* 30231 */     ; private int bitField0_; public static final int CHANGEID_FIELD_NUMBER = 1; private int changeId_; public static final int COSTITEM_FIELD_NUMBER = 2; private List<ActivityHandler.changeItem> costItem_; public static final int REWARDITEM_FIELD_NUMBER = 3; private List<ActivityHandler.changeItem> rewardItem_; public static final int CHANGESATE_FIELD_NUMBER = 4; private int changeSate_; public static final int CHANGENUM_FIELD_NUMBER = 5; private int changeNum_; public static final int CHANGEMAX_FIELD_NUMBER = 6; private int changeMax_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<changeInfo> getParserForType() { return PARSER; } public boolean hasChangeId() { return ((this.bitField0_ & 0x1) == 1); } public int getChangeId() { return this.changeId_; } public List<ActivityHandler.changeItem> getCostItemList() { return this.costItem_; } public List<? extends ActivityHandler.changeItemOrBuilder> getCostItemOrBuilderList() { return (List)this.costItem_; } public int getCostItemCount() { return this.costItem_.size(); } public ActivityHandler.changeItem getCostItem(int index) { return this.costItem_.get(index); } static { defaultInstance.initFields(); } public ActivityHandler.changeItemOrBuilder getCostItemOrBuilder(int index) { return this.costItem_.get(index); }
/*       */     public List<ActivityHandler.changeItem> getRewardItemList() { return this.rewardItem_; }
/*       */     public List<? extends ActivityHandler.changeItemOrBuilder> getRewardItemOrBuilderList() { return (List)this.rewardItem_; }
/*       */     public int getRewardItemCount() { return this.rewardItem_.size(); }
/*       */     public ActivityHandler.changeItem getRewardItem(int index) { return this.rewardItem_.get(index); }
/*       */     public ActivityHandler.changeItemOrBuilder getRewardItemOrBuilder(int index) { return this.rewardItem_.get(index); }
/*       */     public boolean hasChangeSate() { return ((this.bitField0_ & 0x2) == 2); }
/*       */     public int getChangeSate() { return this.changeSate_; }
/*       */     public boolean hasChangeNum() { return ((this.bitField0_ & 0x4) == 4); }
/*       */     public int getChangeNum() { return this.changeNum_; }
/*       */     public boolean hasChangeMax() { return ((this.bitField0_ & 0x8) == 8); }
/*       */     public int getChangeMax() { return this.changeMax_; }
/*       */     private void initFields() { this.changeId_ = 0; this.costItem_ = Collections.emptyList(); this.rewardItem_ = Collections.emptyList(); this.changeSate_ = 0; this.changeNum_ = 0; this.changeMax_ = 0; }
/*       */     public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1)
/*       */         return true;  if (isInitialized == 0)
/*       */         return false;  if (!hasChangeId()) {
/*       */         this.memoizedIsInitialized = 0; return false;
/*       */       }  if (!hasChangeSate()) {
/*       */         this.memoizedIsInitialized = 0; return false;
/*       */       }  if (!hasChangeNum()) {
/*       */         this.memoizedIsInitialized = 0; return false;
/*       */       }  int i; for (i = 0; i < getCostItemCount(); i++) {
/*       */         if (!getCostItem(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0; return false;
/*       */         } 
/*       */       }  for (i = 0; i < getRewardItemCount(); i++) {
/*       */         if (!getRewardItem(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0; return false;
/*       */         } 
/*       */       }  this.memoizedIsInitialized = 1; return true; }
/*       */     public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1)
/*       */         output.writeInt32(1, this.changeId_);  int i; for (i = 0; i < this.costItem_.size(); i++)
/*       */         output.writeMessage(2, (MessageLite)this.costItem_.get(i));  for (i = 0; i < this.rewardItem_.size(); i++)
/*       */         output.writeMessage(3, (MessageLite)this.rewardItem_.get(i));  if ((this.bitField0_ & 0x2) == 2)
/*       */         output.writeInt32(4, this.changeSate_);  if ((this.bitField0_ & 0x4) == 4)
/*       */         output.writeInt32(5, this.changeNum_);  if ((this.bitField0_ & 0x8) == 8)
/*       */         output.writeInt32(6, this.changeMax_);  getUnknownFields().writeTo(output); }
/*       */     public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1)
/*       */         return size;  size = 0; if ((this.bitField0_ & 0x1) == 1)
/*       */         size += CodedOutputStream.computeInt32Size(1, this.changeId_);  int i; for (i = 0; i < this.costItem_.size(); i++)
/*       */         size += CodedOutputStream.computeMessageSize(2, (MessageLite)this.costItem_.get(i));  for (i = 0; i < this.rewardItem_.size(); i++)
/*       */         size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.rewardItem_.get(i));  if ((this.bitField0_ & 0x2) == 2)
/*       */         size += CodedOutputStream.computeInt32Size(4, this.changeSate_);  if ((this.bitField0_ & 0x4) == 4)
/*       */         size += CodedOutputStream.computeInt32Size(5, this.changeNum_);  if ((this.bitField0_ & 0x8) == 8)
/*       */         size += CodedOutputStream.computeInt32Size(6, this.changeMax_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; }
/*       */     protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); }
/*       */     public static changeInfo parseFrom(ByteString data) throws InvalidProtocolBufferException { return (changeInfo)PARSER.parseFrom(data); }
/*       */     public static changeInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (changeInfo)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static changeInfo parseFrom(byte[] data) throws InvalidProtocolBufferException { return (changeInfo)PARSER.parseFrom(data); }
/*       */     public static changeInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (changeInfo)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static changeInfo parseFrom(InputStream input) throws IOException { return (changeInfo)PARSER.parseFrom(input); }
/*       */     public static changeInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (changeInfo)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static changeInfo parseDelimitedFrom(InputStream input) throws IOException { return (changeInfo)PARSER.parseDelimitedFrom(input); }
/*       */     public static changeInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (changeInfo)PARSER.parseDelimitedFrom(input, extensionRegistry); }
/*       */     public static changeInfo parseFrom(CodedInputStream input) throws IOException { return (changeInfo)PARSER.parseFrom(input); }
/*       */     public static changeInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (changeInfo)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static Builder newBuilder() { return Builder.create(); }
/*       */     public Builder newBuilderForType() { return newBuilder(); }
/*       */     public static Builder newBuilder(changeInfo prototype) { return newBuilder().mergeFrom(prototype); }
/*       */     public Builder toBuilder() { return newBuilder(this); }
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; }
/*       */     public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.changeInfoOrBuilder { private int bitField0_; private int changeId_; private List<ActivityHandler.changeItem> costItem_; private RepeatedFieldBuilder<ActivityHandler.changeItem, ActivityHandler.changeItem.Builder, ActivityHandler.changeItemOrBuilder> costItemBuilder_; private List<ActivityHandler.changeItem> rewardItem_; private RepeatedFieldBuilder<ActivityHandler.changeItem, ActivityHandler.changeItem.Builder, ActivityHandler.changeItemOrBuilder> rewardItemBuilder_; private int changeSate_; private int changeNum_; private int changeMax_;
/*       */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_changeInfo_descriptor; }
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_changeInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.changeInfo.class, Builder.class); }
/*       */       private Builder() { this.costItem_ = Collections.emptyList(); this.rewardItem_ = Collections.emptyList(); maybeForceBuilderInitialization(); }
/*       */       private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.costItem_ = Collections.emptyList(); this.rewardItem_ = Collections.emptyList(); maybeForceBuilderInitialization(); }
/*       */       private void maybeForceBuilderInitialization() { if (ActivityHandler.changeInfo.alwaysUseFieldBuilders) {
/*       */           getCostItemFieldBuilder(); getRewardItemFieldBuilder();
/*       */         }  }
/*       */       private static Builder create() { return new Builder(); }
/*       */       public Builder clear() { super.clear(); this.changeId_ = 0; this.bitField0_ &= 0xFFFFFFFE; if (this.costItemBuilder_ == null) {
/*       */           this.costItem_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFD;
/*       */         } else {
/*       */           this.costItemBuilder_.clear();
/*       */         }  if (this.rewardItemBuilder_ == null) {
/*       */           this.rewardItem_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB;
/*       */         } else {
/*       */           this.rewardItemBuilder_.clear();
/*       */         }  this.changeSate_ = 0; this.bitField0_ &= 0xFFFFFFF7; this.changeNum_ = 0; this.bitField0_ &= 0xFFFFFFEF; this.changeMax_ = 0; this.bitField0_ &= 0xFFFFFFDF; return this; }
/*       */       public Builder clone() { return create().mergeFrom(buildPartial()); }
/*       */       public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_changeInfo_descriptor; }
/*       */       public ActivityHandler.changeInfo getDefaultInstanceForType() { return ActivityHandler.changeInfo.getDefaultInstance(); }
/*       */       public ActivityHandler.changeInfo build() { ActivityHandler.changeInfo result = buildPartial(); if (!result.isInitialized())
/*       */           throw newUninitializedMessageException(result);  return result; }
/*       */       public ActivityHandler.changeInfo buildPartial() { ActivityHandler.changeInfo result = new ActivityHandler.changeInfo(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1)
/*       */           to_bitField0_ |= 0x1;  result.changeId_ = this.changeId_; if (this.costItemBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x2) == 2) {
/*       */             this.costItem_ = Collections.unmodifiableList(this.costItem_); this.bitField0_ &= 0xFFFFFFFD;
/*       */           }  result.costItem_ = this.costItem_;
/*       */         } else {
/*       */           result.costItem_ = this.costItemBuilder_.build();
/*       */         }  if (this.rewardItemBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x4) == 4) {
/*       */             this.rewardItem_ = Collections.unmodifiableList(this.rewardItem_); this.bitField0_ &= 0xFFFFFFFB;
/*       */           }  result.rewardItem_ = this.rewardItem_;
/*       */         } else {
/*       */           result.rewardItem_ = this.rewardItemBuilder_.build();
/*       */         }  if ((from_bitField0_ & 0x8) == 8)
/*       */           to_bitField0_ |= 0x2;  result.changeSate_ = this.changeSate_; if ((from_bitField0_ & 0x10) == 16)
/*       */           to_bitField0_ |= 0x4;  result.changeNum_ = this.changeNum_; if ((from_bitField0_ & 0x20) == 32)
/*       */           to_bitField0_ |= 0x8;  result.changeMax_ = this.changeMax_; result.bitField0_ = to_bitField0_; onBuilt(); return result; }
/*       */       public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.changeInfo)
/*       */           return mergeFrom((ActivityHandler.changeInfo)other);  super.mergeFrom(other); return this; }
/*       */       public Builder mergeFrom(ActivityHandler.changeInfo other) { if (other == ActivityHandler.changeInfo.getDefaultInstance())
/*       */           return this;  if (other.hasChangeId())
/*       */           setChangeId(other.getChangeId());  if (this.costItemBuilder_ == null) {
/*       */           if (!other.costItem_.isEmpty()) {
/*       */             if (this.costItem_.isEmpty()) {
/*       */               this.costItem_ = other.costItem_; this.bitField0_ &= 0xFFFFFFFD;
/*       */             } else {
/*       */               ensureCostItemIsMutable(); this.costItem_.addAll(other.costItem_);
/*       */             }  onChanged();
/*       */           } 
/*       */         } else if (!other.costItem_.isEmpty()) {
/*       */           if (this.costItemBuilder_.isEmpty()) {
/*       */             this.costItemBuilder_.dispose(); this.costItemBuilder_ = null; this.costItem_ = other.costItem_; this.bitField0_ &= 0xFFFFFFFD; this.costItemBuilder_ = ActivityHandler.changeInfo.alwaysUseFieldBuilders ? getCostItemFieldBuilder() : null;
/*       */           } else {
/*       */             this.costItemBuilder_.addAllMessages(other.costItem_);
/*       */           } 
/*       */         }  if (this.rewardItemBuilder_ == null) {
/*       */           if (!other.rewardItem_.isEmpty()) {
/*       */             if (this.rewardItem_.isEmpty()) {
/*       */               this.rewardItem_ = other.rewardItem_; this.bitField0_ &= 0xFFFFFFFB;
/*       */             } else {
/*       */               ensureRewardItemIsMutable(); this.rewardItem_.addAll(other.rewardItem_);
/*       */             }  onChanged();
/*       */           } 
/*       */         } else if (!other.rewardItem_.isEmpty()) {
/*       */           if (this.rewardItemBuilder_.isEmpty()) {
/*       */             this.rewardItemBuilder_.dispose(); this.rewardItemBuilder_ = null; this.rewardItem_ = other.rewardItem_; this.bitField0_ &= 0xFFFFFFFB; this.rewardItemBuilder_ = ActivityHandler.changeInfo.alwaysUseFieldBuilders ? getRewardItemFieldBuilder() : null;
/*       */           } else {
/*       */             this.rewardItemBuilder_.addAllMessages(other.rewardItem_);
/*       */           } 
/*       */         }  if (other.hasChangeSate())
/*       */           setChangeSate(other.getChangeSate());  if (other.hasChangeNum())
/*       */           setChangeNum(other.getChangeNum());  if (other.hasChangeMax())
/*       */           setChangeMax(other.getChangeMax());  mergeUnknownFields(other.getUnknownFields()); return this; }
/*       */       public final boolean isInitialized() { if (!hasChangeId())
/*       */           return false;  if (!hasChangeSate())
/*       */           return false;  if (!hasChangeNum())
/*       */           return false;  int i; for (i = 0; i < getCostItemCount(); i++) {
/*       */           if (!getCostItem(i).isInitialized())
/*       */             return false; 
/*       */         }  for (i = 0; i < getRewardItemCount(); i++) {
/*       */           if (!getRewardItem(i).isInitialized())
/*       */             return false; 
/*       */         }  return true; }
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.changeInfo parsedMessage = null; try {
/*       */           parsedMessage = (ActivityHandler.changeInfo)ActivityHandler.changeInfo.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (ActivityHandler.changeInfo)e.getUnfinishedMessage(); throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null)
/*       */             mergeFrom(parsedMessage); 
/*       */         }  return this; }
/*       */       public boolean hasChangeId() { return ((this.bitField0_ & 0x1) == 1); }
/*       */       public int getChangeId() { return this.changeId_; }
/*       */       public Builder setChangeId(int value) { this.bitField0_ |= 0x1; this.changeId_ = value; onChanged(); return this; }
/*       */       public Builder clearChangeId() { this.bitField0_ &= 0xFFFFFFFE; this.changeId_ = 0; onChanged(); return this; }
/*       */       private void ensureCostItemIsMutable() { if ((this.bitField0_ & 0x2) != 2) {
/*       */           this.costItem_ = new ArrayList<>(this.costItem_); this.bitField0_ |= 0x2;
/*       */         }  }
/*       */       public List<ActivityHandler.changeItem> getCostItemList() { if (this.costItemBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.costItem_);  return this.costItemBuilder_.getMessageList(); }
/*       */       public int getCostItemCount() { if (this.costItemBuilder_ == null)
/*       */           return this.costItem_.size();  return this.costItemBuilder_.getCount(); }
/*       */       public ActivityHandler.changeItem getCostItem(int index) { if (this.costItemBuilder_ == null)
/*       */           return this.costItem_.get(index);  return (ActivityHandler.changeItem)this.costItemBuilder_.getMessage(index); }
/*       */       public Builder setCostItem(int index, ActivityHandler.changeItem value) { if (this.costItemBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException();  ensureCostItemIsMutable(); this.costItem_.set(index, value); onChanged();
/*       */         } else {
/*       */           this.costItemBuilder_.setMessage(index, value);
/*       */         }  return this; }
/*       */       public Builder setCostItem(int index, ActivityHandler.changeItem.Builder builderForValue) { if (this.costItemBuilder_ == null) {
/*       */           ensureCostItemIsMutable(); this.costItem_.set(index, builderForValue.build()); onChanged();
/*       */         } else {
/*       */           this.costItemBuilder_.setMessage(index, builderForValue.build());
/*       */         }  return this; }
/*       */       public Builder addCostItem(ActivityHandler.changeItem value) { if (this.costItemBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException();  ensureCostItemIsMutable(); this.costItem_.add(value); onChanged();
/*       */         } else {
/*       */           this.costItemBuilder_.addMessage(value);
/*       */         }  return this; }
/*       */       public Builder addCostItem(int index, ActivityHandler.changeItem value) { if (this.costItemBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException();  ensureCostItemIsMutable(); this.costItem_.add(index, value); onChanged();
/*       */         } else {
/*       */           this.costItemBuilder_.addMessage(index, value);
/*       */         }  return this; }
/*       */       public Builder addCostItem(ActivityHandler.changeItem.Builder builderForValue) { if (this.costItemBuilder_ == null) {
/*       */           ensureCostItemIsMutable(); this.costItem_.add(builderForValue.build()); onChanged();
/*       */         } else {
/*       */           this.costItemBuilder_.addMessage(builderForValue.build());
/*       */         }  return this; }
/*       */       public Builder addCostItem(int index, ActivityHandler.changeItem.Builder builderForValue) { if (this.costItemBuilder_ == null) {
/*       */           ensureCostItemIsMutable(); this.costItem_.add(index, builderForValue.build()); onChanged();
/*       */         } else {
/*       */           this.costItemBuilder_.addMessage(index, builderForValue.build());
/*       */         }  return this; }
/*       */       public Builder addAllCostItem(Iterable<? extends ActivityHandler.changeItem> values) { if (this.costItemBuilder_ == null) {
/*       */           ensureCostItemIsMutable(); AbstractMessageLite.Builder.addAll(values, this.costItem_); onChanged();
/*       */         } else {
/*       */           this.costItemBuilder_.addAllMessages(values);
/*       */         }  return this; }
/*       */       public Builder clearCostItem() { if (this.costItemBuilder_ == null) {
/*       */           this.costItem_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFD; onChanged();
/*       */         } else {
/*       */           this.costItemBuilder_.clear();
/*       */         }  return this; }
/*       */       public Builder removeCostItem(int index) { if (this.costItemBuilder_ == null) {
/*       */           ensureCostItemIsMutable(); this.costItem_.remove(index); onChanged();
/*       */         } else {
/*       */           this.costItemBuilder_.remove(index);
/*       */         }  return this; }
/*       */       public ActivityHandler.changeItem.Builder getCostItemBuilder(int index) { return (ActivityHandler.changeItem.Builder)getCostItemFieldBuilder().getBuilder(index); }
/*       */       public ActivityHandler.changeItemOrBuilder getCostItemOrBuilder(int index) { if (this.costItemBuilder_ == null)
/*       */           return this.costItem_.get(index);  return (ActivityHandler.changeItemOrBuilder)this.costItemBuilder_.getMessageOrBuilder(index); }
/*       */       public List<? extends ActivityHandler.changeItemOrBuilder> getCostItemOrBuilderList() { if (this.costItemBuilder_ != null)
/*       */           return this.costItemBuilder_.getMessageOrBuilderList();  return Collections.unmodifiableList((List)this.costItem_); }
/*       */       public ActivityHandler.changeItem.Builder addCostItemBuilder() { return (ActivityHandler.changeItem.Builder)getCostItemFieldBuilder().addBuilder(ActivityHandler.changeItem.getDefaultInstance()); }
/*       */       public ActivityHandler.changeItem.Builder addCostItemBuilder(int index) { return (ActivityHandler.changeItem.Builder)getCostItemFieldBuilder().addBuilder(index, ActivityHandler.changeItem.getDefaultInstance()); }
/*       */       public List<ActivityHandler.changeItem.Builder> getCostItemBuilderList() { return getCostItemFieldBuilder().getBuilderList(); }
/*       */       private RepeatedFieldBuilder<ActivityHandler.changeItem, ActivityHandler.changeItem.Builder, ActivityHandler.changeItemOrBuilder> getCostItemFieldBuilder() { if (this.costItemBuilder_ == null) {
/*       */           this.costItemBuilder_ = new RepeatedFieldBuilder(this.costItem_, ((this.bitField0_ & 0x2) == 2), getParentForChildren(), isClean()); this.costItem_ = null;
/*       */         }  return this.costItemBuilder_; }
/*       */       private void ensureRewardItemIsMutable() { if ((this.bitField0_ & 0x4) != 4) {
/*       */           this.rewardItem_ = new ArrayList<>(this.rewardItem_); this.bitField0_ |= 0x4;
/*       */         }  }
/*       */       public List<ActivityHandler.changeItem> getRewardItemList() { if (this.rewardItemBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.rewardItem_);  return this.rewardItemBuilder_.getMessageList(); }
/*       */       public int getRewardItemCount() { if (this.rewardItemBuilder_ == null)
/*       */           return this.rewardItem_.size();  return this.rewardItemBuilder_.getCount(); }
/*       */       public ActivityHandler.changeItem getRewardItem(int index) { if (this.rewardItemBuilder_ == null)
/*       */           return this.rewardItem_.get(index);  return (ActivityHandler.changeItem)this.rewardItemBuilder_.getMessage(index); }
/*       */       public Builder setRewardItem(int index, ActivityHandler.changeItem value) { if (this.rewardItemBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException();  ensureRewardItemIsMutable(); this.rewardItem_.set(index, value); onChanged();
/*       */         } else {
/*       */           this.rewardItemBuilder_.setMessage(index, value);
/*       */         }  return this; }
/*       */       public Builder setRewardItem(int index, ActivityHandler.changeItem.Builder builderForValue) { if (this.rewardItemBuilder_ == null) {
/*       */           ensureRewardItemIsMutable(); this.rewardItem_.set(index, builderForValue.build()); onChanged();
/*       */         } else {
/*       */           this.rewardItemBuilder_.setMessage(index, builderForValue.build());
/*       */         }  return this; }
/*       */       public Builder addRewardItem(ActivityHandler.changeItem value) { if (this.rewardItemBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException();  ensureRewardItemIsMutable(); this.rewardItem_.add(value); onChanged();
/*       */         } else {
/*       */           this.rewardItemBuilder_.addMessage(value);
/*       */         }  return this; }
/*       */       public Builder addRewardItem(int index, ActivityHandler.changeItem value) { if (this.rewardItemBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException();  ensureRewardItemIsMutable(); this.rewardItem_.add(index, value); onChanged();
/*       */         } else {
/*       */           this.rewardItemBuilder_.addMessage(index, value);
/*       */         }  return this; }
/*       */       public Builder addRewardItem(ActivityHandler.changeItem.Builder builderForValue) { if (this.rewardItemBuilder_ == null) {
/*       */           ensureRewardItemIsMutable(); this.rewardItem_.add(builderForValue.build()); onChanged();
/*       */         } else {
/*       */           this.rewardItemBuilder_.addMessage(builderForValue.build());
/*       */         }  return this; }
/*       */       public Builder addRewardItem(int index, ActivityHandler.changeItem.Builder builderForValue) { if (this.rewardItemBuilder_ == null) {
/*       */           ensureRewardItemIsMutable(); this.rewardItem_.add(index, builderForValue.build()); onChanged();
/*       */         } else {
/*       */           this.rewardItemBuilder_.addMessage(index, builderForValue.build());
/*       */         }  return this; }
/*       */       public Builder addAllRewardItem(Iterable<? extends ActivityHandler.changeItem> values) { if (this.rewardItemBuilder_ == null) {
/*       */           ensureRewardItemIsMutable(); AbstractMessageLite.Builder.addAll(values, this.rewardItem_); onChanged();
/*       */         } else {
/*       */           this.rewardItemBuilder_.addAllMessages(values);
/*       */         }  return this; }
/*       */       public Builder clearRewardItem() { if (this.rewardItemBuilder_ == null) {
/*       */           this.rewardItem_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; onChanged();
/*       */         } else {
/*       */           this.rewardItemBuilder_.clear();
/*       */         }  return this; }
/*       */       public Builder removeRewardItem(int index) { if (this.rewardItemBuilder_ == null) {
/*       */           ensureRewardItemIsMutable(); this.rewardItem_.remove(index); onChanged();
/*       */         } else {
/*       */           this.rewardItemBuilder_.remove(index);
/*       */         }  return this; }
/*       */       public ActivityHandler.changeItem.Builder getRewardItemBuilder(int index) { return (ActivityHandler.changeItem.Builder)getRewardItemFieldBuilder().getBuilder(index); }
/*       */       public ActivityHandler.changeItemOrBuilder getRewardItemOrBuilder(int index) { if (this.rewardItemBuilder_ == null)
/*       */           return this.rewardItem_.get(index);  return (ActivityHandler.changeItemOrBuilder)this.rewardItemBuilder_.getMessageOrBuilder(index); }
/*       */       public List<? extends ActivityHandler.changeItemOrBuilder> getRewardItemOrBuilderList() { if (this.rewardItemBuilder_ != null)
/*       */           return this.rewardItemBuilder_.getMessageOrBuilderList();  return Collections.unmodifiableList((List)this.rewardItem_); }
/*       */       public ActivityHandler.changeItem.Builder addRewardItemBuilder() { return (ActivityHandler.changeItem.Builder)getRewardItemFieldBuilder().addBuilder(ActivityHandler.changeItem.getDefaultInstance()); }
/*       */       public ActivityHandler.changeItem.Builder addRewardItemBuilder(int index) { return (ActivityHandler.changeItem.Builder)getRewardItemFieldBuilder().addBuilder(index, ActivityHandler.changeItem.getDefaultInstance()); }
/*       */       public List<ActivityHandler.changeItem.Builder> getRewardItemBuilderList() { return getRewardItemFieldBuilder().getBuilderList(); }
/*       */       private RepeatedFieldBuilder<ActivityHandler.changeItem, ActivityHandler.changeItem.Builder, ActivityHandler.changeItemOrBuilder> getRewardItemFieldBuilder() { if (this.rewardItemBuilder_ == null) {
/*       */           this.rewardItemBuilder_ = new RepeatedFieldBuilder(this.rewardItem_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean()); this.rewardItem_ = null;
/*       */         }  return this.rewardItemBuilder_; }
/*       */       public boolean hasChangeSate() { return ((this.bitField0_ & 0x8) == 8); }
/*       */       public int getChangeSate() { return this.changeSate_; }
/*       */       public Builder setChangeSate(int value) { this.bitField0_ |= 0x8; this.changeSate_ = value; onChanged(); return this; }
/*       */       public Builder clearChangeSate() { this.bitField0_ &= 0xFFFFFFF7; this.changeSate_ = 0; onChanged(); return this; }
/*       */       public boolean hasChangeNum() { return ((this.bitField0_ & 0x10) == 16); }
/*       */       public int getChangeNum() { return this.changeNum_; }
/*       */       public Builder setChangeNum(int value) { this.bitField0_ |= 0x10; this.changeNum_ = value; onChanged(); return this; }
/*       */       public Builder clearChangeNum() { this.bitField0_ &= 0xFFFFFFEF; this.changeNum_ = 0; onChanged(); return this; }
/*       */       public boolean hasChangeMax() { return ((this.bitField0_ & 0x20) == 32); }
/*       */       public int getChangeMax() { return this.changeMax_; }
/*       */       public Builder setChangeMax(int value) { this.bitField0_ |= 0x20; this.changeMax_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearChangeMax() { this.bitField0_ &= 0xFFFFFFDF;
/*       */         this.changeMax_ = 0;
/*       */         onChanged();
/*       */         return this; } } }
/* 30543 */   public static final class OpenChangeRequest extends GeneratedMessage implements OpenChangeRequestOrBuilder { private static final OpenChangeRequest defaultInstance = new OpenChangeRequest(true); private final UnknownFieldSet unknownFields; private OpenChangeRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private OpenChangeRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static OpenChangeRequest getDefaultInstance() { return defaultInstance; } public OpenChangeRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private OpenChangeRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_OpenChangeRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_OpenChangeRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(OpenChangeRequest.class, Builder.class); } public static Parser<OpenChangeRequest> PARSER = (Parser<OpenChangeRequest>)new AbstractParser<OpenChangeRequest>() { public ActivityHandler.OpenChangeRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.OpenChangeRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<OpenChangeRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static OpenChangeRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (OpenChangeRequest)PARSER.parseFrom(data); } public static OpenChangeRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (OpenChangeRequest)PARSER.parseFrom(data, extensionRegistry); } public static OpenChangeRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (OpenChangeRequest)PARSER.parseFrom(data); } public static OpenChangeRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (OpenChangeRequest)PARSER.parseFrom(data, extensionRegistry); } public static OpenChangeRequest parseFrom(InputStream input) throws IOException { return (OpenChangeRequest)PARSER.parseFrom(input); } public static OpenChangeRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (OpenChangeRequest)PARSER.parseFrom(input, extensionRegistry); } public static OpenChangeRequest parseDelimitedFrom(InputStream input) throws IOException { return (OpenChangeRequest)PARSER.parseDelimitedFrom(input); } public static OpenChangeRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (OpenChangeRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static OpenChangeRequest parseFrom(CodedInputStream input) throws IOException { return (OpenChangeRequest)PARSER.parseFrom(input); } public static OpenChangeRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (OpenChangeRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(OpenChangeRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.OpenChangeRequestOrBuilder {
/* 30544 */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_OpenChangeRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_OpenChangeRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.OpenChangeRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.OpenChangeRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_OpenChangeRequest_descriptor; } public ActivityHandler.OpenChangeRequest getDefaultInstanceForType() { return ActivityHandler.OpenChangeRequest.getDefaultInstance(); } public ActivityHandler.OpenChangeRequest build() { ActivityHandler.OpenChangeRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.OpenChangeRequest buildPartial() { ActivityHandler.OpenChangeRequest result = new ActivityHandler.OpenChangeRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.OpenChangeRequest) return mergeFrom((ActivityHandler.OpenChangeRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.OpenChangeRequest other) { if (other == ActivityHandler.OpenChangeRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.OpenChangeRequest parsedMessage = null; try { parsedMessage = (ActivityHandler.OpenChangeRequest)ActivityHandler.OpenChangeRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.OpenChangeRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */      }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class OpenChangeResponse
/*       */     extends GeneratedMessage
/*       */     implements OpenChangeResponseOrBuilder
/*       */   {
/* 31948 */     private static final OpenChangeResponse defaultInstance = new OpenChangeResponse(true); private final UnknownFieldSet unknownFields; private OpenChangeResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private OpenChangeResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static OpenChangeResponse getDefaultInstance() { return defaultInstance; } public OpenChangeResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private OpenChangeResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: bs = input.readBytes(); this.bitField0_ |= 0x4; this.s2CBeginTime_ = bs; break;case 34: bs = input.readBytes(); this.bitField0_ |= 0x8; this.s2CEndTime_ = bs; break;case 42: bs = input.readBytes(); this.bitField0_ |= 0x10; this.s2CContent_ = bs; break;case 50: if ((mutable_bitField0_ & 0x20) != 32) { this.s2CChangeInfo_ = new ArrayList<>(); mutable_bitField0_ |= 0x20; }  this.s2CChangeInfo_.add(input.readMessage(ActivityHandler.changeInfo.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x20) == 32) this.s2CChangeInfo_ = Collections.unmodifiableList(this.s2CChangeInfo_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_OpenChangeResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_OpenChangeResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(OpenChangeResponse.class, Builder.class); } public static Parser<OpenChangeResponse> PARSER = (Parser<OpenChangeResponse>)new AbstractParser<OpenChangeResponse>() { public ActivityHandler.OpenChangeResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.OpenChangeResponse(input, extensionRegistry); } }
/* 31949 */     ; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_BEGINTIME_FIELD_NUMBER = 3; private Object s2CBeginTime_; public static final int S2C_ENDTIME_FIELD_NUMBER = 4; private Object s2CEndTime_; public static final int S2C_CONTENT_FIELD_NUMBER = 5; private Object s2CContent_; public static final int S2C_CHANGEINFO_FIELD_NUMBER = 6; private List<ActivityHandler.changeInfo> s2CChangeInfo_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<OpenChangeResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public boolean hasS2CBeginTime() { return ((this.bitField0_ & 0x4) == 4); } static { defaultInstance.initFields(); } public String getS2CBeginTime() { Object ref = this.s2CBeginTime_; if (ref instanceof String)
/*       */         return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8())
/*       */         this.s2CBeginTime_ = s;  return s; }
/*       */     public ByteString getS2CBeginTimeBytes() { Object ref = this.s2CBeginTime_; if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CBeginTime_ = b; return b;
/*       */       }  return (ByteString)ref; }
/*       */     public boolean hasS2CEndTime() { return ((this.bitField0_ & 0x8) == 8); }
/*       */     public String getS2CEndTime() { Object ref = this.s2CEndTime_; if (ref instanceof String)
/*       */         return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8())
/*       */         this.s2CEndTime_ = s;  return s; }
/*       */     public ByteString getS2CEndTimeBytes() { Object ref = this.s2CEndTime_; if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CEndTime_ = b; return b;
/*       */       }  return (ByteString)ref; }
/*       */     public boolean hasS2CContent() { return ((this.bitField0_ & 0x10) == 16); }
/*       */     public String getS2CContent() { Object ref = this.s2CContent_; if (ref instanceof String)
/*       */         return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8())
/*       */         this.s2CContent_ = s;  return s; }
/*       */     public ByteString getS2CContentBytes() { Object ref = this.s2CContent_; if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CContent_ = b; return b;
/*       */       }  return (ByteString)ref; }
/*       */     public List<ActivityHandler.changeInfo> getS2CChangeInfoList() { return this.s2CChangeInfo_; }
/*       */     public List<? extends ActivityHandler.changeInfoOrBuilder> getS2CChangeInfoOrBuilderList() { return (List)this.s2CChangeInfo_; }
/*       */     public int getS2CChangeInfoCount() { return this.s2CChangeInfo_.size(); }
/*       */     public ActivityHandler.changeInfo getS2CChangeInfo(int index) { return this.s2CChangeInfo_.get(index); }
/*       */     public ActivityHandler.changeInfoOrBuilder getS2CChangeInfoOrBuilder(int index) { return this.s2CChangeInfo_.get(index); }
/*       */     private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.s2CBeginTime_ = ""; this.s2CEndTime_ = ""; this.s2CContent_ = ""; this.s2CChangeInfo_ = Collections.emptyList(); }
/*       */     public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1)
/*       */         return true;  if (isInitialized == 0)
/*       */         return false;  if (!hasS2CCode()) {
/*       */         this.memoizedIsInitialized = 0; return false;
/*       */       }  for (int i = 0; i < getS2CChangeInfoCount(); i++) {
/*       */         if (!getS2CChangeInfo(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0; return false;
/*       */         } 
/*       */       }  this.memoizedIsInitialized = 1; return true; }
/*       */     public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1)
/*       */         output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2)
/*       */         output.writeBytes(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4)
/*       */         output.writeBytes(3, getS2CBeginTimeBytes());  if ((this.bitField0_ & 0x8) == 8)
/*       */         output.writeBytes(4, getS2CEndTimeBytes());  if ((this.bitField0_ & 0x10) == 16)
/*       */         output.writeBytes(5, getS2CContentBytes());  for (int i = 0; i < this.s2CChangeInfo_.size(); i++)
/*       */         output.writeMessage(6, (MessageLite)this.s2CChangeInfo_.get(i));  getUnknownFields().writeTo(output); }
/*       */     public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1)
/*       */         return size;  size = 0; if ((this.bitField0_ & 0x1) == 1)
/*       */         size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2)
/*       */         size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4)
/*       */         size += CodedOutputStream.computeBytesSize(3, getS2CBeginTimeBytes());  if ((this.bitField0_ & 0x8) == 8)
/*       */         size += CodedOutputStream.computeBytesSize(4, getS2CEndTimeBytes());  if ((this.bitField0_ & 0x10) == 16)
/*       */         size += CodedOutputStream.computeBytesSize(5, getS2CContentBytes());  for (int i = 0; i < this.s2CChangeInfo_.size(); i++)
/*       */         size += CodedOutputStream.computeMessageSize(6, (MessageLite)this.s2CChangeInfo_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; }
/*       */     protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); }
/*       */     public static OpenChangeResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (OpenChangeResponse)PARSER.parseFrom(data); }
/*       */     public static OpenChangeResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (OpenChangeResponse)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static OpenChangeResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (OpenChangeResponse)PARSER.parseFrom(data); }
/*       */     public static OpenChangeResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (OpenChangeResponse)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static OpenChangeResponse parseFrom(InputStream input) throws IOException { return (OpenChangeResponse)PARSER.parseFrom(input); }
/*       */     public static OpenChangeResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (OpenChangeResponse)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static OpenChangeResponse parseDelimitedFrom(InputStream input) throws IOException { return (OpenChangeResponse)PARSER.parseDelimitedFrom(input); }
/*       */     public static OpenChangeResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (OpenChangeResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); }
/*       */     public static OpenChangeResponse parseFrom(CodedInputStream input) throws IOException { return (OpenChangeResponse)PARSER.parseFrom(input); }
/*       */     public static OpenChangeResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (OpenChangeResponse)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static Builder newBuilder() { return Builder.create(); }
/*       */     public Builder newBuilderForType() { return newBuilder(); }
/*       */     public static Builder newBuilder(OpenChangeResponse prototype) { return newBuilder().mergeFrom(prototype); }
/*       */     public Builder toBuilder() { return newBuilder(this); }
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; }
/*       */     public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.OpenChangeResponseOrBuilder { private int bitField0_; private int s2CCode_; private Object s2CMsg_; private Object s2CBeginTime_; private Object s2CEndTime_; private Object s2CContent_; private List<ActivityHandler.changeInfo> s2CChangeInfo_; private RepeatedFieldBuilder<ActivityHandler.changeInfo, ActivityHandler.changeInfo.Builder, ActivityHandler.changeInfoOrBuilder> s2CChangeInfoBuilder_;
/*       */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_OpenChangeResponse_descriptor; }
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_OpenChangeResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.OpenChangeResponse.class, Builder.class); }
/*       */       private Builder() { this.s2CMsg_ = ""; this.s2CBeginTime_ = ""; this.s2CEndTime_ = ""; this.s2CContent_ = ""; this.s2CChangeInfo_ = Collections.emptyList(); maybeForceBuilderInitialization(); }
/*       */       private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; this.s2CBeginTime_ = ""; this.s2CEndTime_ = ""; this.s2CContent_ = ""; this.s2CChangeInfo_ = Collections.emptyList(); maybeForceBuilderInitialization(); }
/*       */       private void maybeForceBuilderInitialization() { if (ActivityHandler.OpenChangeResponse.alwaysUseFieldBuilders)
/*       */           getS2CChangeInfoFieldBuilder();  }
/*       */       private static Builder create() { return new Builder(); }
/*       */       public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; this.s2CBeginTime_ = ""; this.bitField0_ &= 0xFFFFFFFB; this.s2CEndTime_ = ""; this.bitField0_ &= 0xFFFFFFF7; this.s2CContent_ = ""; this.bitField0_ &= 0xFFFFFFEF; if (this.s2CChangeInfoBuilder_ == null) {
/*       */           this.s2CChangeInfo_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFDF;
/*       */         } else {
/*       */           this.s2CChangeInfoBuilder_.clear();
/*       */         }  return this; }
/*       */       public Builder clone() { return create().mergeFrom(buildPartial()); }
/*       */       public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_OpenChangeResponse_descriptor; }
/*       */       public ActivityHandler.OpenChangeResponse getDefaultInstanceForType() { return ActivityHandler.OpenChangeResponse.getDefaultInstance(); }
/*       */       public ActivityHandler.OpenChangeResponse build() { ActivityHandler.OpenChangeResponse result = buildPartial(); if (!result.isInitialized())
/*       */           throw newUninitializedMessageException(result);  return result; }
/*       */       public ActivityHandler.OpenChangeResponse buildPartial() { ActivityHandler.OpenChangeResponse result = new ActivityHandler.OpenChangeResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1)
/*       */           to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2)
/*       */           to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if ((from_bitField0_ & 0x4) == 4)
/*       */           to_bitField0_ |= 0x4;  result.s2CBeginTime_ = this.s2CBeginTime_; if ((from_bitField0_ & 0x8) == 8)
/*       */           to_bitField0_ |= 0x8;  result.s2CEndTime_ = this.s2CEndTime_; if ((from_bitField0_ & 0x10) == 16)
/*       */           to_bitField0_ |= 0x10;  result.s2CContent_ = this.s2CContent_; if (this.s2CChangeInfoBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x20) == 32) {
/*       */             this.s2CChangeInfo_ = Collections.unmodifiableList(this.s2CChangeInfo_); this.bitField0_ &= 0xFFFFFFDF;
/*       */           }  result.s2CChangeInfo_ = this.s2CChangeInfo_;
/*       */         } else {
/*       */           result.s2CChangeInfo_ = this.s2CChangeInfoBuilder_.build();
/*       */         }  result.bitField0_ = to_bitField0_; onBuilt(); return result; }
/*       */       public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.OpenChangeResponse)
/*       */           return mergeFrom((ActivityHandler.OpenChangeResponse)other);  super.mergeFrom(other); return this; }
/*       */       public Builder mergeFrom(ActivityHandler.OpenChangeResponse other) { if (other == ActivityHandler.OpenChangeResponse.getDefaultInstance())
/*       */           return this;  if (other.hasS2CCode())
/*       */           setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) {
/*       */           this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged();
/*       */         }  if (other.hasS2CBeginTime()) {
/*       */           this.bitField0_ |= 0x4; this.s2CBeginTime_ = other.s2CBeginTime_; onChanged();
/*       */         }  if (other.hasS2CEndTime()) {
/*       */           this.bitField0_ |= 0x8; this.s2CEndTime_ = other.s2CEndTime_; onChanged();
/*       */         }  if (other.hasS2CContent()) {
/*       */           this.bitField0_ |= 0x10; this.s2CContent_ = other.s2CContent_; onChanged();
/*       */         }  if (this.s2CChangeInfoBuilder_ == null) {
/*       */           if (!other.s2CChangeInfo_.isEmpty()) {
/*       */             if (this.s2CChangeInfo_.isEmpty()) {
/*       */               this.s2CChangeInfo_ = other.s2CChangeInfo_; this.bitField0_ &= 0xFFFFFFDF;
/*       */             } else {
/*       */               ensureS2CChangeInfoIsMutable(); this.s2CChangeInfo_.addAll(other.s2CChangeInfo_);
/*       */             }  onChanged();
/*       */           } 
/*       */         } else if (!other.s2CChangeInfo_.isEmpty()) {
/*       */           if (this.s2CChangeInfoBuilder_.isEmpty()) {
/*       */             this.s2CChangeInfoBuilder_.dispose(); this.s2CChangeInfoBuilder_ = null; this.s2CChangeInfo_ = other.s2CChangeInfo_; this.bitField0_ &= 0xFFFFFFDF; this.s2CChangeInfoBuilder_ = ActivityHandler.OpenChangeResponse.alwaysUseFieldBuilders ? getS2CChangeInfoFieldBuilder() : null;
/*       */           } else {
/*       */             this.s2CChangeInfoBuilder_.addAllMessages(other.s2CChangeInfo_);
/*       */           } 
/*       */         }  mergeUnknownFields(other.getUnknownFields()); return this; }
/*       */       public final boolean isInitialized() { if (!hasS2CCode())
/*       */           return false;  for (int i = 0; i < getS2CChangeInfoCount(); i++) {
/*       */           if (!getS2CChangeInfo(i).isInitialized())
/*       */             return false; 
/*       */         }  return true; }
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.OpenChangeResponse parsedMessage = null; try {
/*       */           parsedMessage = (ActivityHandler.OpenChangeResponse)ActivityHandler.OpenChangeResponse.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (ActivityHandler.OpenChangeResponse)e.getUnfinishedMessage(); throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null)
/*       */             mergeFrom(parsedMessage); 
/*       */         }  return this; }
/*       */       public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); }
/*       */       public int getS2CCode() { return this.s2CCode_; }
/*       */       public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; }
/*       */       public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; }
/*       */       public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); }
/*       */       public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8())
/*       */             this.s2CMsg_ = s;  return s;
/*       */         }  return (String)ref; }
/*       */       public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b;
/*       */         }  return (ByteString)ref; }
/*       */       public Builder setS2CMsg(String value) { if (value == null)
/*       */           throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; }
/*       */       public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = ActivityHandler.OpenChangeResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; }
/*       */       public Builder setS2CMsgBytes(ByteString value) { if (value == null)
/*       */           throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; }
/*       */       public boolean hasS2CBeginTime() { return ((this.bitField0_ & 0x4) == 4); }
/*       */       public String getS2CBeginTime() { Object ref = this.s2CBeginTime_; if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8())
/*       */             this.s2CBeginTime_ = s;  return s;
/*       */         }  return (String)ref; }
/*       */       public ByteString getS2CBeginTimeBytes() { Object ref = this.s2CBeginTime_; if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CBeginTime_ = b; return b;
/*       */         }  return (ByteString)ref; }
/*       */       public Builder setS2CBeginTime(String value) { if (value == null)
/*       */           throw new NullPointerException();  this.bitField0_ |= 0x4; this.s2CBeginTime_ = value; onChanged(); return this; }
/*       */       public Builder clearS2CBeginTime() { this.bitField0_ &= 0xFFFFFFFB; this.s2CBeginTime_ = ActivityHandler.OpenChangeResponse.getDefaultInstance().getS2CBeginTime(); onChanged(); return this; }
/*       */       public Builder setS2CBeginTimeBytes(ByteString value) { if (value == null)
/*       */           throw new NullPointerException();  this.bitField0_ |= 0x4; this.s2CBeginTime_ = value; onChanged(); return this; }
/*       */       public boolean hasS2CEndTime() { return ((this.bitField0_ & 0x8) == 8); }
/*       */       public String getS2CEndTime() { Object ref = this.s2CEndTime_; if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8())
/*       */             this.s2CEndTime_ = s;  return s;
/*       */         }  return (String)ref; }
/*       */       public ByteString getS2CEndTimeBytes() { Object ref = this.s2CEndTime_; if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CEndTime_ = b; return b;
/*       */         }  return (ByteString)ref; }
/*       */       public Builder setS2CEndTime(String value) { if (value == null)
/*       */           throw new NullPointerException();  this.bitField0_ |= 0x8; this.s2CEndTime_ = value; onChanged(); return this; }
/*       */       public Builder clearS2CEndTime() { this.bitField0_ &= 0xFFFFFFF7; this.s2CEndTime_ = ActivityHandler.OpenChangeResponse.getDefaultInstance().getS2CEndTime(); onChanged(); return this; }
/*       */       public Builder setS2CEndTimeBytes(ByteString value) { if (value == null)
/*       */           throw new NullPointerException();  this.bitField0_ |= 0x8; this.s2CEndTime_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasS2CContent() { return ((this.bitField0_ & 0x10) == 16); }
/*       */       public String getS2CContent() { Object ref = this.s2CContent_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.s2CContent_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref; }
/*       */       public ByteString getS2CContentBytes() { Object ref = this.s2CContent_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CContent_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref; }
/*       */       public Builder setS2CContent(String value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x10;
/*       */         this.s2CContent_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearS2CContent() { this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.s2CContent_ = ActivityHandler.OpenChangeResponse.getDefaultInstance().getS2CContent();
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder setS2CContentBytes(ByteString value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x10;
/*       */         this.s2CContent_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       private void ensureS2CChangeInfoIsMutable() { if ((this.bitField0_ & 0x20) != 32) {
/*       */           this.s2CChangeInfo_ = new ArrayList<>(this.s2CChangeInfo_);
/*       */           this.bitField0_ |= 0x20;
/*       */         }  }
/*       */       public List<ActivityHandler.changeInfo> getS2CChangeInfoList() { if (this.s2CChangeInfoBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.s2CChangeInfo_); 
/*       */         return this.s2CChangeInfoBuilder_.getMessageList(); }
/*       */       public int getS2CChangeInfoCount() { if (this.s2CChangeInfoBuilder_ == null)
/*       */           return this.s2CChangeInfo_.size(); 
/*       */         return this.s2CChangeInfoBuilder_.getCount(); }
/*       */       public ActivityHandler.changeInfo getS2CChangeInfo(int index) { if (this.s2CChangeInfoBuilder_ == null)
/*       */           return this.s2CChangeInfo_.get(index); 
/*       */         return (ActivityHandler.changeInfo)this.s2CChangeInfoBuilder_.getMessage(index); }
/*       */       public Builder setS2CChangeInfo(int index, ActivityHandler.changeInfo value) { if (this.s2CChangeInfoBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureS2CChangeInfoIsMutable();
/*       */           this.s2CChangeInfo_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CChangeInfoBuilder_.setMessage(index, value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder setS2CChangeInfo(int index, ActivityHandler.changeInfo.Builder builderForValue) { if (this.s2CChangeInfoBuilder_ == null) {
/*       */           ensureS2CChangeInfoIsMutable();
/*       */           this.s2CChangeInfo_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CChangeInfoBuilder_.setMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addS2CChangeInfo(ActivityHandler.changeInfo value) { if (this.s2CChangeInfoBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureS2CChangeInfoIsMutable();
/*       */           this.s2CChangeInfo_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CChangeInfoBuilder_.addMessage(value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder addS2CChangeInfo(int index, ActivityHandler.changeInfo value) { if (this.s2CChangeInfoBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureS2CChangeInfoIsMutable();
/*       */           this.s2CChangeInfo_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CChangeInfoBuilder_.addMessage(index, value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder addS2CChangeInfo(ActivityHandler.changeInfo.Builder builderForValue) { if (this.s2CChangeInfoBuilder_ == null) {
/*       */           ensureS2CChangeInfoIsMutable();
/*       */           this.s2CChangeInfo_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CChangeInfoBuilder_.addMessage(builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addS2CChangeInfo(int index, ActivityHandler.changeInfo.Builder builderForValue) { if (this.s2CChangeInfoBuilder_ == null) {
/*       */           ensureS2CChangeInfoIsMutable();
/*       */           this.s2CChangeInfo_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CChangeInfoBuilder_.addMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addAllS2CChangeInfo(Iterable<? extends ActivityHandler.changeInfo> values) { if (this.s2CChangeInfoBuilder_ == null) {
/*       */           ensureS2CChangeInfoIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.s2CChangeInfo_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CChangeInfoBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this; }
/*       */       public Builder clearS2CChangeInfo() { if (this.s2CChangeInfoBuilder_ == null) {
/*       */           this.s2CChangeInfo_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFDF;
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CChangeInfoBuilder_.clear();
/*       */         } 
/*       */         return this; }
/*       */       public Builder removeS2CChangeInfo(int index) { if (this.s2CChangeInfoBuilder_ == null) {
/*       */           ensureS2CChangeInfoIsMutable();
/*       */           this.s2CChangeInfo_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.s2CChangeInfoBuilder_.remove(index);
/*       */         } 
/*       */         return this; }
/*       */       public ActivityHandler.changeInfo.Builder getS2CChangeInfoBuilder(int index) { return (ActivityHandler.changeInfo.Builder)getS2CChangeInfoFieldBuilder().getBuilder(index); }
/*       */       public ActivityHandler.changeInfoOrBuilder getS2CChangeInfoOrBuilder(int index) { if (this.s2CChangeInfoBuilder_ == null)
/*       */           return this.s2CChangeInfo_.get(index); 
/*       */         return (ActivityHandler.changeInfoOrBuilder)this.s2CChangeInfoBuilder_.getMessageOrBuilder(index); }
/*       */       public List<? extends ActivityHandler.changeInfoOrBuilder> getS2CChangeInfoOrBuilderList() { if (this.s2CChangeInfoBuilder_ != null)
/*       */           return this.s2CChangeInfoBuilder_.getMessageOrBuilderList(); 
/*       */         return Collections.unmodifiableList((List)this.s2CChangeInfo_); }
/*       */       public ActivityHandler.changeInfo.Builder addS2CChangeInfoBuilder() { return (ActivityHandler.changeInfo.Builder)getS2CChangeInfoFieldBuilder().addBuilder(ActivityHandler.changeInfo.getDefaultInstance()); }
/*       */       public ActivityHandler.changeInfo.Builder addS2CChangeInfoBuilder(int index) { return (ActivityHandler.changeInfo.Builder)getS2CChangeInfoFieldBuilder().addBuilder(index, ActivityHandler.changeInfo.getDefaultInstance()); }
/*       */       public List<ActivityHandler.changeInfo.Builder> getS2CChangeInfoBuilderList() { return getS2CChangeInfoFieldBuilder().getBuilderList(); }
/*       */       private RepeatedFieldBuilder<ActivityHandler.changeInfo, ActivityHandler.changeInfo.Builder, ActivityHandler.changeInfoOrBuilder> getS2CChangeInfoFieldBuilder() { if (this.s2CChangeInfoBuilder_ == null) {
/*       */           this.s2CChangeInfoBuilder_ = new RepeatedFieldBuilder(this.s2CChangeInfo_, ((this.bitField0_ & 0x20) == 32), getParentForChildren(), isClean());
/*       */           this.s2CChangeInfo_ = null;
/*       */         } 
/*       */         return this.s2CChangeInfoBuilder_; } } }
/* 32269 */   public static final class ActivityLsRequest extends GeneratedMessage implements ActivityLsRequestOrBuilder { private static final ActivityLsRequest defaultInstance = new ActivityLsRequest(true); private final UnknownFieldSet unknownFields; private ActivityLsRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ActivityLsRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ActivityLsRequest getDefaultInstance() { return defaultInstance; } public ActivityLsRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ActivityLsRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityLsRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityLsRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityLsRequest.class, Builder.class); } public static Parser<ActivityLsRequest> PARSER = (Parser<ActivityLsRequest>)new AbstractParser<ActivityLsRequest>() { public ActivityHandler.ActivityLsRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ActivityLsRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ActivityLsRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ActivityLsRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ActivityLsRequest)PARSER.parseFrom(data); } public static ActivityLsRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityLsRequest)PARSER.parseFrom(data, extensionRegistry); } public static ActivityLsRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ActivityLsRequest)PARSER.parseFrom(data); } public static ActivityLsRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityLsRequest)PARSER.parseFrom(data, extensionRegistry); } public static ActivityLsRequest parseFrom(InputStream input) throws IOException { return (ActivityLsRequest)PARSER.parseFrom(input); } public static ActivityLsRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityLsRequest)PARSER.parseFrom(input, extensionRegistry); } public static ActivityLsRequest parseDelimitedFrom(InputStream input) throws IOException { return (ActivityLsRequest)PARSER.parseDelimitedFrom(input); } public static ActivityLsRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityLsRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ActivityLsRequest parseFrom(CodedInputStream input) throws IOException { return (ActivityLsRequest)PARSER.parseFrom(input); } public static ActivityLsRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityLsRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ActivityLsRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ActivityLsRequestOrBuilder {
/* 32270 */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityLsRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityLsRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ActivityLsRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.ActivityLsRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ActivityLsRequest_descriptor; } public ActivityHandler.ActivityLsRequest getDefaultInstanceForType() { return ActivityHandler.ActivityLsRequest.getDefaultInstance(); } public ActivityHandler.ActivityLsRequest build() { ActivityHandler.ActivityLsRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.ActivityLsRequest buildPartial() { ActivityHandler.ActivityLsRequest result = new ActivityHandler.ActivityLsRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ActivityLsRequest) return mergeFrom((ActivityHandler.ActivityLsRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.ActivityLsRequest other) { if (other == ActivityHandler.ActivityLsRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ActivityLsRequest parsedMessage = null; try { parsedMessage = (ActivityHandler.ActivityLsRequest)ActivityHandler.ActivityLsRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.ActivityLsRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */      }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ActivityLsResponse
/*       */     extends GeneratedMessage
/*       */     implements ActivityLsResponseOrBuilder
/*       */   {
/* 33211 */     private static final ActivityLsResponse defaultInstance = new ActivityLsResponse(true); private final UnknownFieldSet unknownFields; private ActivityLsResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ActivityLsResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ActivityLsResponse getDefaultInstance() { return defaultInstance; } public ActivityLsResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ActivityLsResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: if ((mutable_bitField0_ & 0x4) != 4) { this.s2CWelfareLs_ = new ArrayList<>(); mutable_bitField0_ |= 0x4; }  this.s2CWelfareLs_.add(input.readMessage(ActivityHandler.ActivityLs.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x4) == 4) this.s2CWelfareLs_ = Collections.unmodifiableList(this.s2CWelfareLs_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityLsResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityLsResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityLsResponse.class, Builder.class); } public static Parser<ActivityLsResponse> PARSER = (Parser<ActivityLsResponse>)new AbstractParser<ActivityLsResponse>() { public ActivityHandler.ActivityLsResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ActivityLsResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_WELFARELS_FIELD_NUMBER = 3; private List<ActivityHandler.ActivityLs> s2CWelfareLs_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ActivityLsResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public List<ActivityHandler.ActivityLs> getS2CWelfareLsList() { return this.s2CWelfareLs_; } public List<? extends ActivityHandler.ActivityLsOrBuilder> getS2CWelfareLsOrBuilderList() { return (List)this.s2CWelfareLs_; } public int getS2CWelfareLsCount() { return this.s2CWelfareLs_.size(); } public ActivityHandler.ActivityLs getS2CWelfareLs(int index) { return this.s2CWelfareLs_.get(index); } public ActivityHandler.ActivityLsOrBuilder getS2CWelfareLsOrBuilder(int index) { return this.s2CWelfareLs_.get(index); } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.s2CWelfareLs_ = Collections.emptyList(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  for (int i = 0; i < getS2CWelfareLsCount(); i++) { if (!getS2CWelfareLs(i).isInitialized()) { this.memoizedIsInitialized = 0; return false; }  }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  for (int i = 0; i < this.s2CWelfareLs_.size(); i++) output.writeMessage(3, (MessageLite)this.s2CWelfareLs_.get(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  for (int i = 0; i < this.s2CWelfareLs_.size(); i++) size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.s2CWelfareLs_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ActivityLsResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ActivityLsResponse)PARSER.parseFrom(data); } public static ActivityLsResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityLsResponse)PARSER.parseFrom(data, extensionRegistry); } public static ActivityLsResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ActivityLsResponse)PARSER.parseFrom(data); } public static ActivityLsResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityLsResponse)PARSER.parseFrom(data, extensionRegistry); } public static ActivityLsResponse parseFrom(InputStream input) throws IOException { return (ActivityLsResponse)PARSER.parseFrom(input); } public static ActivityLsResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityLsResponse)PARSER.parseFrom(input, extensionRegistry); } public static ActivityLsResponse parseDelimitedFrom(InputStream input) throws IOException { return (ActivityLsResponse)PARSER.parseDelimitedFrom(input); } public static ActivityLsResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityLsResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ActivityLsResponse parseFrom(CodedInputStream input) throws IOException { return (ActivityLsResponse)PARSER.parseFrom(input); } public static ActivityLsResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityLsResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ActivityLsResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ActivityLsResponseOrBuilder {
/* 33212 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; private List<ActivityHandler.ActivityLs> s2CWelfareLs_; private RepeatedFieldBuilder<ActivityHandler.ActivityLs, ActivityHandler.ActivityLs.Builder, ActivityHandler.ActivityLsOrBuilder> s2CWelfareLsBuilder_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityLsResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityLsResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ActivityLsResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; this.s2CWelfareLs_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; this.s2CWelfareLs_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.ActivityLsResponse.alwaysUseFieldBuilders) getS2CWelfareLsFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; if (this.s2CWelfareLsBuilder_ == null) { this.s2CWelfareLs_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; } else { this.s2CWelfareLsBuilder_.clear(); }  return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ActivityLsResponse_descriptor; } public ActivityHandler.ActivityLsResponse getDefaultInstanceForType() { return ActivityHandler.ActivityLsResponse.getDefaultInstance(); } public ActivityHandler.ActivityLsResponse build() { ActivityHandler.ActivityLsResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.ActivityLsResponse buildPartial() { ActivityHandler.ActivityLsResponse result = new ActivityHandler.ActivityLsResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if (this.s2CWelfareLsBuilder_ == null) { if ((this.bitField0_ & 0x4) == 4) { this.s2CWelfareLs_ = Collections.unmodifiableList(this.s2CWelfareLs_); this.bitField0_ &= 0xFFFFFFFB; }  result.s2CWelfareLs_ = this.s2CWelfareLs_; } else { result.s2CWelfareLs_ = this.s2CWelfareLsBuilder_.build(); }  result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ActivityLsResponse) return mergeFrom((ActivityHandler.ActivityLsResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.ActivityLsResponse other) { if (other == ActivityHandler.ActivityLsResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  if (this.s2CWelfareLsBuilder_ == null) { if (!other.s2CWelfareLs_.isEmpty()) { if (this.s2CWelfareLs_.isEmpty()) { this.s2CWelfareLs_ = other.s2CWelfareLs_; this.bitField0_ &= 0xFFFFFFFB; } else { ensureS2CWelfareLsIsMutable(); this.s2CWelfareLs_.addAll(other.s2CWelfareLs_); }  onChanged(); }  } else if (!other.s2CWelfareLs_.isEmpty()) { if (this.s2CWelfareLsBuilder_.isEmpty()) { this.s2CWelfareLsBuilder_.dispose(); this.s2CWelfareLsBuilder_ = null; this.s2CWelfareLs_ = other.s2CWelfareLs_; this.bitField0_ &= 0xFFFFFFFB; this.s2CWelfareLsBuilder_ = ActivityHandler.ActivityLsResponse.alwaysUseFieldBuilders ? getS2CWelfareLsFieldBuilder() : null; } else { this.s2CWelfareLsBuilder_.addAllMessages(other.s2CWelfareLs_); }  }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  for (int i = 0; i < getS2CWelfareLsCount(); i++) { if (!getS2CWelfareLs(i).isInitialized()) return false;  }  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ActivityLsResponse parsedMessage = null; try { parsedMessage = (ActivityHandler.ActivityLsResponse)ActivityHandler.ActivityLsResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.ActivityLsResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = ActivityHandler.ActivityLsResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } private void ensureS2CWelfareLsIsMutable() { if ((this.bitField0_ & 0x4) != 4) { this.s2CWelfareLs_ = new ArrayList<>(this.s2CWelfareLs_); this.bitField0_ |= 0x4; }  } public List<ActivityHandler.ActivityLs> getS2CWelfareLsList() { if (this.s2CWelfareLsBuilder_ == null) return Collections.unmodifiableList(this.s2CWelfareLs_);  return this.s2CWelfareLsBuilder_.getMessageList(); } public int getS2CWelfareLsCount() { if (this.s2CWelfareLsBuilder_ == null) return this.s2CWelfareLs_.size();  return this.s2CWelfareLsBuilder_.getCount(); } public ActivityHandler.ActivityLs getS2CWelfareLs(int index) { if (this.s2CWelfareLsBuilder_ == null) return this.s2CWelfareLs_.get(index);  return (ActivityHandler.ActivityLs)this.s2CWelfareLsBuilder_.getMessage(index); } public Builder setS2CWelfareLs(int index, ActivityHandler.ActivityLs value) { if (this.s2CWelfareLsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CWelfareLsIsMutable(); this.s2CWelfareLs_.set(index, value); onChanged(); } else { this.s2CWelfareLsBuilder_.setMessage(index, value); }  return this; } public Builder setS2CWelfareLs(int index, ActivityHandler.ActivityLs.Builder builderForValue) { if (this.s2CWelfareLsBuilder_ == null) { ensureS2CWelfareLsIsMutable(); this.s2CWelfareLs_.set(index, builderForValue.build()); onChanged(); } else { this.s2CWelfareLsBuilder_.setMessage(index, builderForValue.build()); }  return this; } public Builder addS2CWelfareLs(ActivityHandler.ActivityLs value) { if (this.s2CWelfareLsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CWelfareLsIsMutable(); this.s2CWelfareLs_.add(value); onChanged(); } else { this.s2CWelfareLsBuilder_.addMessage(value); }  return this; } public Builder addS2CWelfareLs(int index, ActivityHandler.ActivityLs value) { if (this.s2CWelfareLsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CWelfareLsIsMutable(); this.s2CWelfareLs_.add(index, value); onChanged(); } else { this.s2CWelfareLsBuilder_.addMessage(index, value); }  return this; } public Builder addS2CWelfareLs(ActivityHandler.ActivityLs.Builder builderForValue) { if (this.s2CWelfareLsBuilder_ == null) { ensureS2CWelfareLsIsMutable(); this.s2CWelfareLs_.add(builderForValue.build()); onChanged(); } else { this.s2CWelfareLsBuilder_.addMessage(builderForValue.build()); }  return this; } public Builder addS2CWelfareLs(int index, ActivityHandler.ActivityLs.Builder builderForValue) { if (this.s2CWelfareLsBuilder_ == null) { ensureS2CWelfareLsIsMutable(); this.s2CWelfareLs_.add(index, builderForValue.build()); onChanged(); } else { this.s2CWelfareLsBuilder_.addMessage(index, builderForValue.build()); }  return this; } public Builder addAllS2CWelfareLs(Iterable<? extends ActivityHandler.ActivityLs> values) { if (this.s2CWelfareLsBuilder_ == null) { ensureS2CWelfareLsIsMutable(); AbstractMessageLite.Builder.addAll(values, this.s2CWelfareLs_); onChanged(); } else { this.s2CWelfareLsBuilder_.addAllMessages(values); }  return this; } public Builder clearS2CWelfareLs() { if (this.s2CWelfareLsBuilder_ == null) { this.s2CWelfareLs_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; onChanged(); } else { this.s2CWelfareLsBuilder_.clear(); }  return this; } public Builder removeS2CWelfareLs(int index) { if (this.s2CWelfareLsBuilder_ == null) { ensureS2CWelfareLsIsMutable(); this.s2CWelfareLs_.remove(index); onChanged(); } else { this.s2CWelfareLsBuilder_.remove(index); }  return this; } public ActivityHandler.ActivityLs.Builder getS2CWelfareLsBuilder(int index) { return (ActivityHandler.ActivityLs.Builder)getS2CWelfareLsFieldBuilder().getBuilder(index); } public ActivityHandler.ActivityLsOrBuilder getS2CWelfareLsOrBuilder(int index) { if (this.s2CWelfareLsBuilder_ == null) return this.s2CWelfareLs_.get(index);  return (ActivityHandler.ActivityLsOrBuilder)this.s2CWelfareLsBuilder_.getMessageOrBuilder(index); } public List<? extends ActivityHandler.ActivityLsOrBuilder> getS2CWelfareLsOrBuilderList() { if (this.s2CWelfareLsBuilder_ != null) return this.s2CWelfareLsBuilder_.getMessageOrBuilderList();  return Collections.unmodifiableList((List)this.s2CWelfareLs_); } public ActivityHandler.ActivityLs.Builder addS2CWelfareLsBuilder() { return (ActivityHandler.ActivityLs.Builder)getS2CWelfareLsFieldBuilder().addBuilder(ActivityHandler.ActivityLs.getDefaultInstance()); } public ActivityHandler.ActivityLs.Builder addS2CWelfareLsBuilder(int index) { return (ActivityHandler.ActivityLs.Builder)getS2CWelfareLsFieldBuilder().addBuilder(index, ActivityHandler.ActivityLs.getDefaultInstance()); } public List<ActivityHandler.ActivityLs.Builder> getS2CWelfareLsBuilderList() { return getS2CWelfareLsFieldBuilder().getBuilderList(); } private RepeatedFieldBuilder<ActivityHandler.ActivityLs, ActivityHandler.ActivityLs.Builder, ActivityHandler.ActivityLsOrBuilder> getS2CWelfareLsFieldBuilder() { if (this.s2CWelfareLsBuilder_ == null) { this.s2CWelfareLsBuilder_ = new RepeatedFieldBuilder(this.s2CWelfareLs_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean()); this.s2CWelfareLs_ = null; }  return this.s2CWelfareLsBuilder_; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ActivityDrawInfoRequest
/*       */     extends GeneratedMessage
/*       */     implements ActivityDrawInfoRequestOrBuilder
/*       */   {
/* 33532 */     private static final ActivityDrawInfoRequest defaultInstance = new ActivityDrawInfoRequest(true); private final UnknownFieldSet unknownFields; private ActivityDrawInfoRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ActivityDrawInfoRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ActivityDrawInfoRequest getDefaultInstance() { return defaultInstance; } public ActivityDrawInfoRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ActivityDrawInfoRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityDrawInfoRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityDrawInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityDrawInfoRequest.class, Builder.class); } public static Parser<ActivityDrawInfoRequest> PARSER = (Parser<ActivityDrawInfoRequest>)new AbstractParser<ActivityDrawInfoRequest>() { public ActivityHandler.ActivityDrawInfoRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ActivityDrawInfoRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ActivityDrawInfoRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ActivityDrawInfoRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ActivityDrawInfoRequest)PARSER.parseFrom(data); } public static ActivityDrawInfoRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityDrawInfoRequest)PARSER.parseFrom(data, extensionRegistry); } public static ActivityDrawInfoRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ActivityDrawInfoRequest)PARSER.parseFrom(data); } public static ActivityDrawInfoRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityDrawInfoRequest)PARSER.parseFrom(data, extensionRegistry); } public static ActivityDrawInfoRequest parseFrom(InputStream input) throws IOException { return (ActivityDrawInfoRequest)PARSER.parseFrom(input); } public static ActivityDrawInfoRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityDrawInfoRequest)PARSER.parseFrom(input, extensionRegistry); } public static ActivityDrawInfoRequest parseDelimitedFrom(InputStream input) throws IOException { return (ActivityDrawInfoRequest)PARSER.parseDelimitedFrom(input); } public static ActivityDrawInfoRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityDrawInfoRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ActivityDrawInfoRequest parseFrom(CodedInputStream input) throws IOException { return (ActivityDrawInfoRequest)PARSER.parseFrom(input); } public static ActivityDrawInfoRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityDrawInfoRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ActivityDrawInfoRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ActivityDrawInfoRequestOrBuilder {
/* 33533 */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityDrawInfoRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityDrawInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ActivityDrawInfoRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.ActivityDrawInfoRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ActivityDrawInfoRequest_descriptor; } public ActivityHandler.ActivityDrawInfoRequest getDefaultInstanceForType() { return ActivityHandler.ActivityDrawInfoRequest.getDefaultInstance(); } public ActivityHandler.ActivityDrawInfoRequest build() { ActivityHandler.ActivityDrawInfoRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.ActivityDrawInfoRequest buildPartial() { ActivityHandler.ActivityDrawInfoRequest result = new ActivityHandler.ActivityDrawInfoRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ActivityDrawInfoRequest) return mergeFrom((ActivityHandler.ActivityDrawInfoRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.ActivityDrawInfoRequest other) { if (other == ActivityHandler.ActivityDrawInfoRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ActivityDrawInfoRequest parsedMessage = null; try { parsedMessage = (ActivityHandler.ActivityDrawInfoRequest)ActivityHandler.ActivityDrawInfoRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.ActivityDrawInfoRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class DrawScoreReward
/*       */     extends GeneratedMessage
/*       */     implements DrawScoreRewardOrBuilder
/*       */   {
/* 34435 */     private static final DrawScoreReward defaultInstance = new DrawScoreReward(true); private final UnknownFieldSet unknownFields; private DrawScoreReward(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private DrawScoreReward(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static DrawScoreReward getDefaultInstance() { return defaultInstance; } public DrawScoreReward getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private DrawScoreReward(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.score_ = input.readInt32(); break;case 16: this.bitField0_ |= 0x2; this.status_ = input.readInt32(); break;case 26: if ((mutable_bitField0_ & 0x4) != 4) { this.items_ = new ArrayList<>(); mutable_bitField0_ |= 0x4; }  this.items_.add(input.readMessage(Common.KeyValueStruct.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x4) == 4) this.items_ = Collections.unmodifiableList(this.items_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_DrawScoreReward_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_DrawScoreReward_fieldAccessorTable.ensureFieldAccessorsInitialized(DrawScoreReward.class, Builder.class); } public static Parser<DrawScoreReward> PARSER = (Parser<DrawScoreReward>)new AbstractParser<DrawScoreReward>() { public ActivityHandler.DrawScoreReward parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.DrawScoreReward(input, extensionRegistry); } }; private int bitField0_; public static final int SCORE_FIELD_NUMBER = 1; private int score_; public static final int STATUS_FIELD_NUMBER = 2; private int status_; public static final int ITEMS_FIELD_NUMBER = 3; private List<Common.KeyValueStruct> items_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<DrawScoreReward> getParserForType() { return PARSER; } public boolean hasScore() { return ((this.bitField0_ & 0x1) == 1); } public int getScore() { return this.score_; } public boolean hasStatus() { return ((this.bitField0_ & 0x2) == 2); } public int getStatus() { return this.status_; } public List<Common.KeyValueStruct> getItemsList() { return this.items_; } public List<? extends Common.KeyValueStructOrBuilder> getItemsOrBuilderList() { return (List)this.items_; } public int getItemsCount() { return this.items_.size(); } public Common.KeyValueStruct getItems(int index) { return this.items_.get(index); } public Common.KeyValueStructOrBuilder getItemsOrBuilder(int index) { return (Common.KeyValueStructOrBuilder)this.items_.get(index); } private void initFields() { this.score_ = 0; this.status_ = 0; this.items_ = Collections.emptyList(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasScore()) { this.memoizedIsInitialized = 0; return false; }  if (!hasStatus()) { this.memoizedIsInitialized = 0; return false; }  for (int i = 0; i < getItemsCount(); i++) { if (!getItems(i).isInitialized()) { this.memoizedIsInitialized = 0; return false; }  }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.score_);  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.status_);  for (int i = 0; i < this.items_.size(); i++) output.writeMessage(3, (MessageLite)this.items_.get(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.score_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.status_);  for (int i = 0; i < this.items_.size(); i++) size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.items_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static DrawScoreReward parseFrom(ByteString data) throws InvalidProtocolBufferException { return (DrawScoreReward)PARSER.parseFrom(data); } public static DrawScoreReward parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DrawScoreReward)PARSER.parseFrom(data, extensionRegistry); } public static DrawScoreReward parseFrom(byte[] data) throws InvalidProtocolBufferException { return (DrawScoreReward)PARSER.parseFrom(data); } public static DrawScoreReward parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DrawScoreReward)PARSER.parseFrom(data, extensionRegistry); } public static DrawScoreReward parseFrom(InputStream input) throws IOException { return (DrawScoreReward)PARSER.parseFrom(input); } public static DrawScoreReward parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawScoreReward)PARSER.parseFrom(input, extensionRegistry); } public static DrawScoreReward parseDelimitedFrom(InputStream input) throws IOException { return (DrawScoreReward)PARSER.parseDelimitedFrom(input); } public static DrawScoreReward parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawScoreReward)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static DrawScoreReward parseFrom(CodedInputStream input) throws IOException { return (DrawScoreReward)PARSER.parseFrom(input); } public static DrawScoreReward parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawScoreReward)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(DrawScoreReward prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.DrawScoreRewardOrBuilder {
/* 34436 */       private int bitField0_; private int score_; private int status_; private List<Common.KeyValueStruct> items_; private RepeatedFieldBuilder<Common.KeyValueStruct, Common.KeyValueStruct.Builder, Common.KeyValueStructOrBuilder> itemsBuilder_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_DrawScoreReward_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_DrawScoreReward_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.DrawScoreReward.class, Builder.class); } private Builder() { this.items_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.items_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.DrawScoreReward.alwaysUseFieldBuilders) getItemsFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.score_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.status_ = 0; this.bitField0_ &= 0xFFFFFFFD; if (this.itemsBuilder_ == null) { this.items_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; } else { this.itemsBuilder_.clear(); }  return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_DrawScoreReward_descriptor; } public ActivityHandler.DrawScoreReward getDefaultInstanceForType() { return ActivityHandler.DrawScoreReward.getDefaultInstance(); } public ActivityHandler.DrawScoreReward build() { ActivityHandler.DrawScoreReward result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.DrawScoreReward buildPartial() { ActivityHandler.DrawScoreReward result = new ActivityHandler.DrawScoreReward(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.score_ = this.score_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.status_ = this.status_; if (this.itemsBuilder_ == null) { if ((this.bitField0_ & 0x4) == 4) { this.items_ = Collections.unmodifiableList(this.items_); this.bitField0_ &= 0xFFFFFFFB; }  result.items_ = this.items_; } else { result.items_ = this.itemsBuilder_.build(); }  result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.DrawScoreReward) return mergeFrom((ActivityHandler.DrawScoreReward)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.DrawScoreReward other) { if (other == ActivityHandler.DrawScoreReward.getDefaultInstance()) return this;  if (other.hasScore()) setScore(other.getScore());  if (other.hasStatus()) setStatus(other.getStatus());  if (this.itemsBuilder_ == null) { if (!other.items_.isEmpty()) { if (this.items_.isEmpty()) { this.items_ = other.items_; this.bitField0_ &= 0xFFFFFFFB; } else { ensureItemsIsMutable(); this.items_.addAll(other.items_); }  onChanged(); }  } else if (!other.items_.isEmpty()) { if (this.itemsBuilder_.isEmpty()) { this.itemsBuilder_.dispose(); this.itemsBuilder_ = null; this.items_ = other.items_; this.bitField0_ &= 0xFFFFFFFB; this.itemsBuilder_ = ActivityHandler.DrawScoreReward.alwaysUseFieldBuilders ? getItemsFieldBuilder() : null; } else { this.itemsBuilder_.addAllMessages(other.items_); }  }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasScore()) return false;  if (!hasStatus()) return false;  for (int i = 0; i < getItemsCount(); i++) { if (!getItems(i).isInitialized()) return false;  }  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.DrawScoreReward parsedMessage = null; try { parsedMessage = (ActivityHandler.DrawScoreReward)ActivityHandler.DrawScoreReward.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.DrawScoreReward)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasScore() { return ((this.bitField0_ & 0x1) == 1); } public int getScore() { return this.score_; } public Builder setScore(int value) { this.bitField0_ |= 0x1; this.score_ = value; onChanged(); return this; } public Builder clearScore() { this.bitField0_ &= 0xFFFFFFFE; this.score_ = 0; onChanged(); return this; } public boolean hasStatus() { return ((this.bitField0_ & 0x2) == 2); } public int getStatus() { return this.status_; } public Builder setStatus(int value) { this.bitField0_ |= 0x2; this.status_ = value; onChanged(); return this; } public Builder clearStatus() { this.bitField0_ &= 0xFFFFFFFD; this.status_ = 0; onChanged(); return this; } private void ensureItemsIsMutable() { if ((this.bitField0_ & 0x4) != 4) { this.items_ = new ArrayList<>(this.items_); this.bitField0_ |= 0x4; }  } public List<Common.KeyValueStruct> getItemsList() { if (this.itemsBuilder_ == null) return Collections.unmodifiableList(this.items_);  return this.itemsBuilder_.getMessageList(); } public int getItemsCount() { if (this.itemsBuilder_ == null) return this.items_.size();  return this.itemsBuilder_.getCount(); } public Common.KeyValueStruct getItems(int index) { if (this.itemsBuilder_ == null) return this.items_.get(index);  return (Common.KeyValueStruct)this.itemsBuilder_.getMessage(index); } public Builder setItems(int index, Common.KeyValueStruct value) { if (this.itemsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureItemsIsMutable(); this.items_.set(index, value); onChanged(); } else { this.itemsBuilder_.setMessage(index, (GeneratedMessage)value); }  return this; } public Builder setItems(int index, Common.KeyValueStruct.Builder builderForValue) { if (this.itemsBuilder_ == null) { ensureItemsIsMutable(); this.items_.set(index, builderForValue.build()); onChanged(); } else { this.itemsBuilder_.setMessage(index, (GeneratedMessage)builderForValue.build()); }  return this; } public Builder addItems(Common.KeyValueStruct value) { if (this.itemsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureItemsIsMutable(); this.items_.add(value); onChanged(); } else { this.itemsBuilder_.addMessage((GeneratedMessage)value); }  return this; } public Builder addItems(int index, Common.KeyValueStruct value) { if (this.itemsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureItemsIsMutable(); this.items_.add(index, value); onChanged(); } else { this.itemsBuilder_.addMessage(index, (GeneratedMessage)value); }  return this; } public Builder addItems(Common.KeyValueStruct.Builder builderForValue) { if (this.itemsBuilder_ == null) { ensureItemsIsMutable(); this.items_.add(builderForValue.build()); onChanged(); } else { this.itemsBuilder_.addMessage((GeneratedMessage)builderForValue.build()); }  return this; } public Builder addItems(int index, Common.KeyValueStruct.Builder builderForValue) { if (this.itemsBuilder_ == null) { ensureItemsIsMutable(); this.items_.add(index, builderForValue.build()); onChanged(); } else { this.itemsBuilder_.addMessage(index, (GeneratedMessage)builderForValue.build()); }  return this; } public Builder addAllItems(Iterable<? extends Common.KeyValueStruct> values) { if (this.itemsBuilder_ == null) { ensureItemsIsMutable(); AbstractMessageLite.Builder.addAll(values, this.items_); onChanged(); } else { this.itemsBuilder_.addAllMessages(values); }  return this; } public Builder clearItems() { if (this.itemsBuilder_ == null) { this.items_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; onChanged(); } else { this.itemsBuilder_.clear(); }  return this; } public Builder removeItems(int index) { if (this.itemsBuilder_ == null) { ensureItemsIsMutable(); this.items_.remove(index); onChanged(); } else { this.itemsBuilder_.remove(index); }  return this; } public Common.KeyValueStruct.Builder getItemsBuilder(int index) { return (Common.KeyValueStruct.Builder)getItemsFieldBuilder().getBuilder(index); } public Common.KeyValueStructOrBuilder getItemsOrBuilder(int index) { if (this.itemsBuilder_ == null) return (Common.KeyValueStructOrBuilder)this.items_.get(index);  return (Common.KeyValueStructOrBuilder)this.itemsBuilder_.getMessageOrBuilder(index); } public List<? extends Common.KeyValueStructOrBuilder> getItemsOrBuilderList() { if (this.itemsBuilder_ != null) return this.itemsBuilder_.getMessageOrBuilderList();  return (List)Collections.unmodifiableList(this.items_); } public Common.KeyValueStruct.Builder addItemsBuilder() { return (Common.KeyValueStruct.Builder)getItemsFieldBuilder().addBuilder((GeneratedMessage)Common.KeyValueStruct.getDefaultInstance()); } public Common.KeyValueStruct.Builder addItemsBuilder(int index) { return (Common.KeyValueStruct.Builder)getItemsFieldBuilder().addBuilder(index, (GeneratedMessage)Common.KeyValueStruct.getDefaultInstance()); } public List<Common.KeyValueStruct.Builder> getItemsBuilderList() { return getItemsFieldBuilder().getBuilderList(); } private RepeatedFieldBuilder<Common.KeyValueStruct, Common.KeyValueStruct.Builder, Common.KeyValueStructOrBuilder> getItemsFieldBuilder() { if (this.itemsBuilder_ == null) { this.itemsBuilder_ = new RepeatedFieldBuilder(this.items_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean()); this.items_ = null; }  return this.itemsBuilder_; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ActivityDrawInfoResponse
/*       */     extends GeneratedMessage
/*       */     implements ActivityDrawInfoResponseOrBuilder
/*       */   {
/* 37131 */     private static final ActivityDrawInfoResponse defaultInstance = new ActivityDrawInfoResponse(true); private final UnknownFieldSet unknownFields; private ActivityDrawInfoResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ActivityDrawInfoResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ActivityDrawInfoResponse getDefaultInstance() { return defaultInstance; } public ActivityDrawInfoResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ActivityDrawInfoResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 24: this.bitField0_ |= 0x4; this.score_ = input.readInt32(); break;case 32: this.bitField0_ |= 0x8; this.freeCount_ = input.readInt32(); break;case 40: this.bitField0_ |= 0x10; this.singlePrice_ = input.readInt32(); break;case 48: this.bitField0_ |= 0x20; this.tenPrice_ = input.readInt32(); break;case 58: bs = input.readBytes(); this.bitField0_ |= 0x40; this.beginTime_ = bs; break;case 66: bs = input.readBytes(); this.bitField0_ |= 0x80; this.endTime_ = bs; break;case 74: if ((mutable_bitField0_ & 0x100) != 256) { this.scoreReward_ = new ArrayList<>(); mutable_bitField0_ |= 0x100; }  this.scoreReward_.add(input.readMessage(ActivityHandler.DrawScoreReward.PARSER, extensionRegistry)); break;case 82: if ((mutable_bitField0_ & 0x200) != 512) { this.drawItems_ = new ArrayList<>(); mutable_bitField0_ |= 0x200; }  this.drawItems_.add(input.readMessage(Common.KeyValueStruct.PARSER, extensionRegistry)); break;case 90: if ((mutable_bitField0_ & 0x400) != 1024) { this.showItems_ = new ArrayList<>(); mutable_bitField0_ |= 0x400; }  this.showItems_.add(input.readMessage(Common.KeyValueStruct.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x100) == 256) this.scoreReward_ = Collections.unmodifiableList(this.scoreReward_);  if ((mutable_bitField0_ & 0x200) == 512) this.drawItems_ = Collections.unmodifiableList(this.drawItems_);  if ((mutable_bitField0_ & 0x400) == 1024) this.showItems_ = Collections.unmodifiableList(this.showItems_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityDrawInfoResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityDrawInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityDrawInfoResponse.class, Builder.class); } public static Parser<ActivityDrawInfoResponse> PARSER = (Parser<ActivityDrawInfoResponse>)new AbstractParser<ActivityDrawInfoResponse>() { public ActivityHandler.ActivityDrawInfoResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.ActivityDrawInfoResponse(input, extensionRegistry); } }
/* 37132 */     ; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int SCORE_FIELD_NUMBER = 3; private int score_; public static final int FREECOUNT_FIELD_NUMBER = 4; private int freeCount_; public static final int SINGLEPRICE_FIELD_NUMBER = 5; private int singlePrice_; public static final int TENPRICE_FIELD_NUMBER = 6; private int tenPrice_; public static final int BEGINTIME_FIELD_NUMBER = 7; private Object beginTime_; public static final int ENDTIME_FIELD_NUMBER = 8; private Object endTime_; public static final int SCOREREWARD_FIELD_NUMBER = 9; private List<ActivityHandler.DrawScoreReward> scoreReward_; public static final int DRAWITEMS_FIELD_NUMBER = 10; private List<Common.KeyValueStruct> drawItems_; public static final int SHOWITEMS_FIELD_NUMBER = 11; private List<Common.KeyValueStruct> showItems_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ActivityDrawInfoResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public boolean hasScore() { return ((this.bitField0_ & 0x4) == 4); } public int getScore() { return this.score_; } public boolean hasFreeCount() { return ((this.bitField0_ & 0x8) == 8); } public int getFreeCount() { return this.freeCount_; } static { defaultInstance.initFields(); } public boolean hasSinglePrice() { return ((this.bitField0_ & 0x10) == 16); }
/*       */     public int getSinglePrice() { return this.singlePrice_; }
/*       */     public boolean hasTenPrice() { return ((this.bitField0_ & 0x20) == 32); }
/*       */     public int getTenPrice() { return this.tenPrice_; }
/*       */     public boolean hasBeginTime() { return ((this.bitField0_ & 0x40) == 64); }
/*       */     public String getBeginTime() { Object ref = this.beginTime_; if (ref instanceof String)
/*       */         return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8())
/*       */         this.beginTime_ = s;  return s; }
/*       */     public ByteString getBeginTimeBytes() { Object ref = this.beginTime_; if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref); this.beginTime_ = b; return b;
/*       */       }  return (ByteString)ref; }
/*       */     public boolean hasEndTime() { return ((this.bitField0_ & 0x80) == 128); }
/*       */     public String getEndTime() { Object ref = this.endTime_; if (ref instanceof String)
/*       */         return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8())
/*       */         this.endTime_ = s;  return s; }
/*       */     public ByteString getEndTimeBytes() { Object ref = this.endTime_; if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref); this.endTime_ = b; return b;
/*       */       }  return (ByteString)ref; }
/*       */     public List<ActivityHandler.DrawScoreReward> getScoreRewardList() { return this.scoreReward_; }
/*       */     public List<? extends ActivityHandler.DrawScoreRewardOrBuilder> getScoreRewardOrBuilderList() { return (List)this.scoreReward_; }
/*       */     public int getScoreRewardCount() { return this.scoreReward_.size(); }
/*       */     public ActivityHandler.DrawScoreReward getScoreReward(int index) { return this.scoreReward_.get(index); }
/*       */     public ActivityHandler.DrawScoreRewardOrBuilder getScoreRewardOrBuilder(int index) { return this.scoreReward_.get(index); }
/*       */     public List<Common.KeyValueStruct> getDrawItemsList() { return this.drawItems_; }
/*       */     public List<? extends Common.KeyValueStructOrBuilder> getDrawItemsOrBuilderList() { return (List)this.drawItems_; }
/*       */     public int getDrawItemsCount() { return this.drawItems_.size(); }
/*       */     public Common.KeyValueStruct getDrawItems(int index) { return this.drawItems_.get(index); }
/*       */     public Common.KeyValueStructOrBuilder getDrawItemsOrBuilder(int index) { return (Common.KeyValueStructOrBuilder)this.drawItems_.get(index); }
/*       */     public List<Common.KeyValueStruct> getShowItemsList() { return this.showItems_; }
/*       */     public List<? extends Common.KeyValueStructOrBuilder> getShowItemsOrBuilderList() { return (List)this.showItems_; }
/*       */     public int getShowItemsCount() { return this.showItems_.size(); }
/*       */     public Common.KeyValueStruct getShowItems(int index) { return this.showItems_.get(index); }
/*       */     public Common.KeyValueStructOrBuilder getShowItemsOrBuilder(int index) { return (Common.KeyValueStructOrBuilder)this.showItems_.get(index); }
/*       */     private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.score_ = 0; this.freeCount_ = 0; this.singlePrice_ = 0; this.tenPrice_ = 0; this.beginTime_ = ""; this.endTime_ = ""; this.scoreReward_ = Collections.emptyList(); this.drawItems_ = Collections.emptyList(); this.showItems_ = Collections.emptyList(); }
/*       */     public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1)
/*       */         return true;  if (isInitialized == 0)
/*       */         return false;  if (!hasS2CCode()) {
/*       */         this.memoizedIsInitialized = 0; return false;
/*       */       }  if (!hasScore()) {
/*       */         this.memoizedIsInitialized = 0; return false;
/*       */       }  if (!hasFreeCount()) {
/*       */         this.memoizedIsInitialized = 0; return false;
/*       */       }  if (!hasSinglePrice()) {
/*       */         this.memoizedIsInitialized = 0; return false;
/*       */       }  if (!hasTenPrice()) {
/*       */         this.memoizedIsInitialized = 0; return false;
/*       */       }  int i; for (i = 0; i < getScoreRewardCount(); i++) {
/*       */         if (!getScoreReward(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0; return false;
/*       */         } 
/*       */       }  for (i = 0; i < getDrawItemsCount(); i++) {
/*       */         if (!getDrawItems(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0; return false;
/*       */         } 
/*       */       }  for (i = 0; i < getShowItemsCount(); i++) {
/*       */         if (!getShowItems(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0; return false;
/*       */         } 
/*       */       }  this.memoizedIsInitialized = 1; return true; }
/*       */     public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1)
/*       */         output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2)
/*       */         output.writeBytes(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4)
/*       */         output.writeInt32(3, this.score_);  if ((this.bitField0_ & 0x8) == 8)
/*       */         output.writeInt32(4, this.freeCount_);  if ((this.bitField0_ & 0x10) == 16)
/*       */         output.writeInt32(5, this.singlePrice_);  if ((this.bitField0_ & 0x20) == 32)
/*       */         output.writeInt32(6, this.tenPrice_);  if ((this.bitField0_ & 0x40) == 64)
/*       */         output.writeBytes(7, getBeginTimeBytes());  if ((this.bitField0_ & 0x80) == 128)
/*       */         output.writeBytes(8, getEndTimeBytes());  int i; for (i = 0; i < this.scoreReward_.size(); i++)
/*       */         output.writeMessage(9, (MessageLite)this.scoreReward_.get(i));  for (i = 0; i < this.drawItems_.size(); i++)
/*       */         output.writeMessage(10, (MessageLite)this.drawItems_.get(i));  for (i = 0; i < this.showItems_.size(); i++)
/*       */         output.writeMessage(11, (MessageLite)this.showItems_.get(i));  getUnknownFields().writeTo(output); }
/*       */     public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1)
/*       */         return size;  size = 0; if ((this.bitField0_ & 0x1) == 1)
/*       */         size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2)
/*       */         size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4)
/*       */         size += CodedOutputStream.computeInt32Size(3, this.score_);  if ((this.bitField0_ & 0x8) == 8)
/*       */         size += CodedOutputStream.computeInt32Size(4, this.freeCount_);  if ((this.bitField0_ & 0x10) == 16)
/*       */         size += CodedOutputStream.computeInt32Size(5, this.singlePrice_);  if ((this.bitField0_ & 0x20) == 32)
/*       */         size += CodedOutputStream.computeInt32Size(6, this.tenPrice_);  if ((this.bitField0_ & 0x40) == 64)
/*       */         size += CodedOutputStream.computeBytesSize(7, getBeginTimeBytes());  if ((this.bitField0_ & 0x80) == 128)
/*       */         size += CodedOutputStream.computeBytesSize(8, getEndTimeBytes());  int i; for (i = 0; i < this.scoreReward_.size(); i++)
/*       */         size += CodedOutputStream.computeMessageSize(9, (MessageLite)this.scoreReward_.get(i));  for (i = 0; i < this.drawItems_.size(); i++)
/*       */         size += CodedOutputStream.computeMessageSize(10, (MessageLite)this.drawItems_.get(i));  for (i = 0; i < this.showItems_.size(); i++)
/*       */         size += CodedOutputStream.computeMessageSize(11, (MessageLite)this.showItems_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; }
/*       */     protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); }
/*       */     public static ActivityDrawInfoResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ActivityDrawInfoResponse)PARSER.parseFrom(data); }
/*       */     public static ActivityDrawInfoResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityDrawInfoResponse)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static ActivityDrawInfoResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ActivityDrawInfoResponse)PARSER.parseFrom(data); }
/*       */     public static ActivityDrawInfoResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ActivityDrawInfoResponse)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static ActivityDrawInfoResponse parseFrom(InputStream input) throws IOException { return (ActivityDrawInfoResponse)PARSER.parseFrom(input); }
/*       */     public static ActivityDrawInfoResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityDrawInfoResponse)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static ActivityDrawInfoResponse parseDelimitedFrom(InputStream input) throws IOException { return (ActivityDrawInfoResponse)PARSER.parseDelimitedFrom(input); }
/*       */     public static ActivityDrawInfoResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityDrawInfoResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); }
/*       */     public static ActivityDrawInfoResponse parseFrom(CodedInputStream input) throws IOException { return (ActivityDrawInfoResponse)PARSER.parseFrom(input); }
/*       */     public static ActivityDrawInfoResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ActivityDrawInfoResponse)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static Builder newBuilder() { return Builder.create(); }
/*       */     public Builder newBuilderForType() { return newBuilder(); }
/*       */     public static Builder newBuilder(ActivityDrawInfoResponse prototype) { return newBuilder().mergeFrom(prototype); }
/*       */     public Builder toBuilder() { return newBuilder(this); }
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; }
/*       */     public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.ActivityDrawInfoResponseOrBuilder { private int bitField0_; private int s2CCode_; private Object s2CMsg_; private int score_; private int freeCount_; private int singlePrice_; private int tenPrice_; private Object beginTime_; private Object endTime_; private List<ActivityHandler.DrawScoreReward> scoreReward_; private RepeatedFieldBuilder<ActivityHandler.DrawScoreReward, ActivityHandler.DrawScoreReward.Builder, ActivityHandler.DrawScoreRewardOrBuilder> scoreRewardBuilder_; private List<Common.KeyValueStruct> drawItems_; private RepeatedFieldBuilder<Common.KeyValueStruct, Common.KeyValueStruct.Builder, Common.KeyValueStructOrBuilder> drawItemsBuilder_; private List<Common.KeyValueStruct> showItems_; private RepeatedFieldBuilder<Common.KeyValueStruct, Common.KeyValueStruct.Builder, Common.KeyValueStructOrBuilder> showItemsBuilder_;
/*       */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_ActivityDrawInfoResponse_descriptor; }
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_ActivityDrawInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.ActivityDrawInfoResponse.class, Builder.class); }
/*       */       private Builder() { this.s2CMsg_ = ""; this.beginTime_ = ""; this.endTime_ = ""; this.scoreReward_ = Collections.emptyList(); this.drawItems_ = Collections.emptyList(); this.showItems_ = Collections.emptyList(); maybeForceBuilderInitialization(); }
/*       */       private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; this.beginTime_ = ""; this.endTime_ = ""; this.scoreReward_ = Collections.emptyList(); this.drawItems_ = Collections.emptyList(); this.showItems_ = Collections.emptyList(); maybeForceBuilderInitialization(); }
/*       */       private void maybeForceBuilderInitialization() { if (ActivityHandler.ActivityDrawInfoResponse.alwaysUseFieldBuilders) {
/*       */           getScoreRewardFieldBuilder(); getDrawItemsFieldBuilder(); getShowItemsFieldBuilder();
/*       */         }  }
/*       */       private static Builder create() { return new Builder(); }
/*       */       public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; this.score_ = 0; this.bitField0_ &= 0xFFFFFFFB; this.freeCount_ = 0; this.bitField0_ &= 0xFFFFFFF7; this.singlePrice_ = 0; this.bitField0_ &= 0xFFFFFFEF; this.tenPrice_ = 0; this.bitField0_ &= 0xFFFFFFDF; this.beginTime_ = ""; this.bitField0_ &= 0xFFFFFFBF; this.endTime_ = ""; this.bitField0_ &= 0xFFFFFF7F; if (this.scoreRewardBuilder_ == null) {
/*       */           this.scoreReward_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFEFF;
/*       */         } else {
/*       */           this.scoreRewardBuilder_.clear();
/*       */         }  if (this.drawItemsBuilder_ == null) {
/*       */           this.drawItems_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFDFF;
/*       */         } else {
/*       */           this.drawItemsBuilder_.clear();
/*       */         } 
/*       */         if (this.showItemsBuilder_ == null) {
/*       */           this.showItems_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFBFF;
/*       */         } else {
/*       */           this.showItemsBuilder_.clear();
/*       */         } 
/*       */         return this; }
/*       */       public Builder clone() { return create().mergeFrom(buildPartial()); }
/*       */       public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_ActivityDrawInfoResponse_descriptor; }
/*       */       public ActivityHandler.ActivityDrawInfoResponse getDefaultInstanceForType() { return ActivityHandler.ActivityDrawInfoResponse.getDefaultInstance(); }
/*       */       public ActivityHandler.ActivityDrawInfoResponse build() { ActivityHandler.ActivityDrawInfoResponse result = buildPartial();
/*       */         if (!result.isInitialized())
/*       */           throw newUninitializedMessageException(result); 
/*       */         return result; }
/*       */       public ActivityHandler.ActivityDrawInfoResponse buildPartial() { ActivityHandler.ActivityDrawInfoResponse result = new ActivityHandler.ActivityDrawInfoResponse(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1)
/*       */           to_bitField0_ |= 0x1; 
/*       */         result.s2CCode_ = this.s2CCode_;
/*       */         if ((from_bitField0_ & 0x2) == 2)
/*       */           to_bitField0_ |= 0x2; 
/*       */         result.s2CMsg_ = this.s2CMsg_;
/*       */         if ((from_bitField0_ & 0x4) == 4)
/*       */           to_bitField0_ |= 0x4; 
/*       */         result.score_ = this.score_;
/*       */         if ((from_bitField0_ & 0x8) == 8)
/*       */           to_bitField0_ |= 0x8; 
/*       */         result.freeCount_ = this.freeCount_;
/*       */         if ((from_bitField0_ & 0x10) == 16)
/*       */           to_bitField0_ |= 0x10; 
/*       */         result.singlePrice_ = this.singlePrice_;
/*       */         if ((from_bitField0_ & 0x20) == 32)
/*       */           to_bitField0_ |= 0x20; 
/*       */         result.tenPrice_ = this.tenPrice_;
/*       */         if ((from_bitField0_ & 0x40) == 64)
/*       */           to_bitField0_ |= 0x40; 
/*       */         result.beginTime_ = this.beginTime_;
/*       */         if ((from_bitField0_ & 0x80) == 128)
/*       */           to_bitField0_ |= 0x80; 
/*       */         result.endTime_ = this.endTime_;
/*       */         if (this.scoreRewardBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x100) == 256) {
/*       */             this.scoreReward_ = Collections.unmodifiableList(this.scoreReward_);
/*       */             this.bitField0_ &= 0xFFFFFEFF;
/*       */           } 
/*       */           result.scoreReward_ = this.scoreReward_;
/*       */         } else {
/*       */           result.scoreReward_ = this.scoreRewardBuilder_.build();
/*       */         } 
/*       */         if (this.drawItemsBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x200) == 512) {
/*       */             this.drawItems_ = Collections.unmodifiableList(this.drawItems_);
/*       */             this.bitField0_ &= 0xFFFFFDFF;
/*       */           } 
/*       */           result.drawItems_ = this.drawItems_;
/*       */         } else {
/*       */           result.drawItems_ = this.drawItemsBuilder_.build();
/*       */         } 
/*       */         if (this.showItemsBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x400) == 1024) {
/*       */             this.showItems_ = Collections.unmodifiableList(this.showItems_);
/*       */             this.bitField0_ &= 0xFFFFFBFF;
/*       */           } 
/*       */           result.showItems_ = this.showItems_;
/*       */         } else {
/*       */           result.showItems_ = this.showItemsBuilder_.build();
/*       */         } 
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result; }
/*       */       public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.ActivityDrawInfoResponse)
/*       */           return mergeFrom((ActivityHandler.ActivityDrawInfoResponse)other); 
/*       */         super.mergeFrom(other);
/*       */         return this; }
/*       */       public Builder mergeFrom(ActivityHandler.ActivityDrawInfoResponse other) { if (other == ActivityHandler.ActivityDrawInfoResponse.getDefaultInstance())
/*       */           return this; 
/*       */         if (other.hasS2CCode())
/*       */           setS2CCode(other.getS2CCode()); 
/*       */         if (other.hasS2CMsg()) {
/*       */           this.bitField0_ |= 0x2;
/*       */           this.s2CMsg_ = other.s2CMsg_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasScore())
/*       */           setScore(other.getScore()); 
/*       */         if (other.hasFreeCount())
/*       */           setFreeCount(other.getFreeCount()); 
/*       */         if (other.hasSinglePrice())
/*       */           setSinglePrice(other.getSinglePrice()); 
/*       */         if (other.hasTenPrice())
/*       */           setTenPrice(other.getTenPrice()); 
/*       */         if (other.hasBeginTime()) {
/*       */           this.bitField0_ |= 0x40;
/*       */           this.beginTime_ = other.beginTime_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasEndTime()) {
/*       */           this.bitField0_ |= 0x80;
/*       */           this.endTime_ = other.endTime_;
/*       */           onChanged();
/*       */         } 
/*       */         if (this.scoreRewardBuilder_ == null) {
/*       */           if (!other.scoreReward_.isEmpty()) {
/*       */             if (this.scoreReward_.isEmpty()) {
/*       */               this.scoreReward_ = other.scoreReward_;
/*       */               this.bitField0_ &= 0xFFFFFEFF;
/*       */             } else {
/*       */               ensureScoreRewardIsMutable();
/*       */               this.scoreReward_.addAll(other.scoreReward_);
/*       */             } 
/*       */             onChanged();
/*       */           } 
/*       */         } else if (!other.scoreReward_.isEmpty()) {
/*       */           if (this.scoreRewardBuilder_.isEmpty()) {
/*       */             this.scoreRewardBuilder_.dispose();
/*       */             this.scoreRewardBuilder_ = null;
/*       */             this.scoreReward_ = other.scoreReward_;
/*       */             this.bitField0_ &= 0xFFFFFEFF;
/*       */             this.scoreRewardBuilder_ = ActivityHandler.ActivityDrawInfoResponse.alwaysUseFieldBuilders ? getScoreRewardFieldBuilder() : null;
/*       */           } else {
/*       */             this.scoreRewardBuilder_.addAllMessages(other.scoreReward_);
/*       */           } 
/*       */         } 
/*       */         if (this.drawItemsBuilder_ == null) {
/*       */           if (!other.drawItems_.isEmpty()) {
/*       */             if (this.drawItems_.isEmpty()) {
/*       */               this.drawItems_ = other.drawItems_;
/*       */               this.bitField0_ &= 0xFFFFFDFF;
/*       */             } else {
/*       */               ensureDrawItemsIsMutable();
/*       */               this.drawItems_.addAll(other.drawItems_);
/*       */             } 
/*       */             onChanged();
/*       */           } 
/*       */         } else if (!other.drawItems_.isEmpty()) {
/*       */           if (this.drawItemsBuilder_.isEmpty()) {
/*       */             this.drawItemsBuilder_.dispose();
/*       */             this.drawItemsBuilder_ = null;
/*       */             this.drawItems_ = other.drawItems_;
/*       */             this.bitField0_ &= 0xFFFFFDFF;
/*       */             this.drawItemsBuilder_ = ActivityHandler.ActivityDrawInfoResponse.alwaysUseFieldBuilders ? getDrawItemsFieldBuilder() : null;
/*       */           } else {
/*       */             this.drawItemsBuilder_.addAllMessages(other.drawItems_);
/*       */           } 
/*       */         } 
/*       */         if (this.showItemsBuilder_ == null) {
/*       */           if (!other.showItems_.isEmpty()) {
/*       */             if (this.showItems_.isEmpty()) {
/*       */               this.showItems_ = other.showItems_;
/*       */               this.bitField0_ &= 0xFFFFFBFF;
/*       */             } else {
/*       */               ensureShowItemsIsMutable();
/*       */               this.showItems_.addAll(other.showItems_);
/*       */             } 
/*       */             onChanged();
/*       */           } 
/*       */         } else if (!other.showItems_.isEmpty()) {
/*       */           if (this.showItemsBuilder_.isEmpty()) {
/*       */             this.showItemsBuilder_.dispose();
/*       */             this.showItemsBuilder_ = null;
/*       */             this.showItems_ = other.showItems_;
/*       */             this.bitField0_ &= 0xFFFFFBFF;
/*       */             this.showItemsBuilder_ = ActivityHandler.ActivityDrawInfoResponse.alwaysUseFieldBuilders ? getShowItemsFieldBuilder() : null;
/*       */           } else {
/*       */             this.showItemsBuilder_.addAllMessages(other.showItems_);
/*       */           } 
/*       */         } 
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this; }
/*       */       public final boolean isInitialized() { if (!hasS2CCode())
/*       */           return false; 
/*       */         if (!hasScore())
/*       */           return false; 
/*       */         if (!hasFreeCount())
/*       */           return false; 
/*       */         if (!hasSinglePrice())
/*       */           return false; 
/*       */         if (!hasTenPrice())
/*       */           return false; 
/*       */         int i;
/*       */         for (i = 0; i < getScoreRewardCount(); i++) {
/*       */           if (!getScoreReward(i).isInitialized())
/*       */             return false; 
/*       */         } 
/*       */         for (i = 0; i < getDrawItemsCount(); i++) {
/*       */           if (!getDrawItems(i).isInitialized())
/*       */             return false; 
/*       */         } 
/*       */         for (i = 0; i < getShowItemsCount(); i++) {
/*       */           if (!getShowItems(i).isInitialized())
/*       */             return false; 
/*       */         } 
/*       */         return true; }
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.ActivityDrawInfoResponse parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (ActivityHandler.ActivityDrawInfoResponse)ActivityHandler.ActivityDrawInfoResponse.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (ActivityHandler.ActivityDrawInfoResponse)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null)
/*       */             mergeFrom(parsedMessage); 
/*       */         } 
/*       */         return this; }
/*       */       public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); }
/*       */       public int getS2CCode() { return this.s2CCode_; }
/*       */       public Builder setS2CCode(int value) { this.bitField0_ |= 0x1;
/*       */         this.s2CCode_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CCode_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); }
/*       */       public String getS2CMsg() { Object ref = this.s2CMsg_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.s2CMsg_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref; }
/*       */       public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CMsg_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref; }
/*       */       public Builder setS2CMsg(String value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.s2CMsg_ = ActivityHandler.ActivityDrawInfoResponse.getDefaultInstance().getS2CMsg();
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder setS2CMsgBytes(ByteString value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasScore() { return ((this.bitField0_ & 0x4) == 4); }
/*       */       public int getScore() { return this.score_; }
/*       */       public Builder setScore(int value) { this.bitField0_ |= 0x4;
/*       */         this.score_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearScore() { this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.score_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasFreeCount() { return ((this.bitField0_ & 0x8) == 8); }
/*       */       public int getFreeCount() { return this.freeCount_; }
/*       */       public Builder setFreeCount(int value) { this.bitField0_ |= 0x8;
/*       */         this.freeCount_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearFreeCount() { this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.freeCount_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasSinglePrice() { return ((this.bitField0_ & 0x10) == 16); }
/*       */       public int getSinglePrice() { return this.singlePrice_; }
/*       */       public Builder setSinglePrice(int value) { this.bitField0_ |= 0x10;
/*       */         this.singlePrice_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearSinglePrice() { this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.singlePrice_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasTenPrice() { return ((this.bitField0_ & 0x20) == 32); }
/*       */       public int getTenPrice() { return this.tenPrice_; }
/*       */       public Builder setTenPrice(int value) { this.bitField0_ |= 0x20;
/*       */         this.tenPrice_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearTenPrice() { this.bitField0_ &= 0xFFFFFFDF;
/*       */         this.tenPrice_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasBeginTime() { return ((this.bitField0_ & 0x40) == 64); }
/*       */       public String getBeginTime() { Object ref = this.beginTime_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.beginTime_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref; }
/*       */       public ByteString getBeginTimeBytes() { Object ref = this.beginTime_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.beginTime_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref; }
/*       */       public Builder setBeginTime(String value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x40;
/*       */         this.beginTime_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearBeginTime() { this.bitField0_ &= 0xFFFFFFBF;
/*       */         this.beginTime_ = ActivityHandler.ActivityDrawInfoResponse.getDefaultInstance().getBeginTime();
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder setBeginTimeBytes(ByteString value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x40;
/*       */         this.beginTime_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasEndTime() { return ((this.bitField0_ & 0x80) == 128); }
/*       */       public String getEndTime() { Object ref = this.endTime_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.endTime_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref; }
/*       */       public ByteString getEndTimeBytes() { Object ref = this.endTime_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.endTime_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref; }
/*       */       public Builder setEndTime(String value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x80;
/*       */         this.endTime_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearEndTime() { this.bitField0_ &= 0xFFFFFF7F;
/*       */         this.endTime_ = ActivityHandler.ActivityDrawInfoResponse.getDefaultInstance().getEndTime();
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder setEndTimeBytes(ByteString value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x80;
/*       */         this.endTime_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       private void ensureScoreRewardIsMutable() { if ((this.bitField0_ & 0x100) != 256) {
/*       */           this.scoreReward_ = new ArrayList<>(this.scoreReward_);
/*       */           this.bitField0_ |= 0x100;
/*       */         }  }
/*       */       public List<ActivityHandler.DrawScoreReward> getScoreRewardList() { if (this.scoreRewardBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.scoreReward_); 
/*       */         return this.scoreRewardBuilder_.getMessageList(); }
/*       */       public int getScoreRewardCount() { if (this.scoreRewardBuilder_ == null)
/*       */           return this.scoreReward_.size(); 
/*       */         return this.scoreRewardBuilder_.getCount(); }
/*       */       public ActivityHandler.DrawScoreReward getScoreReward(int index) { if (this.scoreRewardBuilder_ == null)
/*       */           return this.scoreReward_.get(index); 
/*       */         return (ActivityHandler.DrawScoreReward)this.scoreRewardBuilder_.getMessage(index); }
/*       */       public Builder setScoreReward(int index, ActivityHandler.DrawScoreReward value) { if (this.scoreRewardBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureScoreRewardIsMutable();
/*       */           this.scoreReward_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.scoreRewardBuilder_.setMessage(index, value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder setScoreReward(int index, ActivityHandler.DrawScoreReward.Builder builderForValue) { if (this.scoreRewardBuilder_ == null) {
/*       */           ensureScoreRewardIsMutable();
/*       */           this.scoreReward_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.scoreRewardBuilder_.setMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addScoreReward(ActivityHandler.DrawScoreReward value) { if (this.scoreRewardBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureScoreRewardIsMutable();
/*       */           this.scoreReward_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.scoreRewardBuilder_.addMessage(value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder addScoreReward(int index, ActivityHandler.DrawScoreReward value) { if (this.scoreRewardBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureScoreRewardIsMutable();
/*       */           this.scoreReward_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.scoreRewardBuilder_.addMessage(index, value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder addScoreReward(ActivityHandler.DrawScoreReward.Builder builderForValue) { if (this.scoreRewardBuilder_ == null) {
/*       */           ensureScoreRewardIsMutable();
/*       */           this.scoreReward_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.scoreRewardBuilder_.addMessage(builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addScoreReward(int index, ActivityHandler.DrawScoreReward.Builder builderForValue) { if (this.scoreRewardBuilder_ == null) {
/*       */           ensureScoreRewardIsMutable();
/*       */           this.scoreReward_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.scoreRewardBuilder_.addMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addAllScoreReward(Iterable<? extends ActivityHandler.DrawScoreReward> values) { if (this.scoreRewardBuilder_ == null) {
/*       */           ensureScoreRewardIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.scoreReward_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.scoreRewardBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this; }
/*       */       public Builder clearScoreReward() { if (this.scoreRewardBuilder_ == null) {
/*       */           this.scoreReward_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFEFF;
/*       */           onChanged();
/*       */         } else {
/*       */           this.scoreRewardBuilder_.clear();
/*       */         } 
/*       */         return this; }
/*       */       public Builder removeScoreReward(int index) { if (this.scoreRewardBuilder_ == null) {
/*       */           ensureScoreRewardIsMutable();
/*       */           this.scoreReward_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.scoreRewardBuilder_.remove(index);
/*       */         } 
/*       */         return this; }
/*       */       public ActivityHandler.DrawScoreReward.Builder getScoreRewardBuilder(int index) { return (ActivityHandler.DrawScoreReward.Builder)getScoreRewardFieldBuilder().getBuilder(index); }
/*       */       public ActivityHandler.DrawScoreRewardOrBuilder getScoreRewardOrBuilder(int index) { if (this.scoreRewardBuilder_ == null)
/*       */           return this.scoreReward_.get(index); 
/*       */         return (ActivityHandler.DrawScoreRewardOrBuilder)this.scoreRewardBuilder_.getMessageOrBuilder(index); }
/*       */       public List<? extends ActivityHandler.DrawScoreRewardOrBuilder> getScoreRewardOrBuilderList() { if (this.scoreRewardBuilder_ != null)
/*       */           return this.scoreRewardBuilder_.getMessageOrBuilderList(); 
/*       */         return Collections.unmodifiableList((List)this.scoreReward_); }
/*       */       public ActivityHandler.DrawScoreReward.Builder addScoreRewardBuilder() { return (ActivityHandler.DrawScoreReward.Builder)getScoreRewardFieldBuilder().addBuilder(ActivityHandler.DrawScoreReward.getDefaultInstance()); }
/*       */       public ActivityHandler.DrawScoreReward.Builder addScoreRewardBuilder(int index) { return (ActivityHandler.DrawScoreReward.Builder)getScoreRewardFieldBuilder().addBuilder(index, ActivityHandler.DrawScoreReward.getDefaultInstance()); }
/*       */       public List<ActivityHandler.DrawScoreReward.Builder> getScoreRewardBuilderList() { return getScoreRewardFieldBuilder().getBuilderList(); }
/*       */       private RepeatedFieldBuilder<ActivityHandler.DrawScoreReward, ActivityHandler.DrawScoreReward.Builder, ActivityHandler.DrawScoreRewardOrBuilder> getScoreRewardFieldBuilder() { if (this.scoreRewardBuilder_ == null) {
/*       */           this.scoreRewardBuilder_ = new RepeatedFieldBuilder(this.scoreReward_, ((this.bitField0_ & 0x100) == 256), getParentForChildren(), isClean());
/*       */           this.scoreReward_ = null;
/*       */         } 
/*       */         return this.scoreRewardBuilder_; }
/*       */       private void ensureDrawItemsIsMutable() { if ((this.bitField0_ & 0x200) != 512) {
/*       */           this.drawItems_ = new ArrayList<>(this.drawItems_);
/*       */           this.bitField0_ |= 0x200;
/*       */         }  }
/*       */       public List<Common.KeyValueStruct> getDrawItemsList() { if (this.drawItemsBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.drawItems_); 
/*       */         return this.drawItemsBuilder_.getMessageList(); }
/*       */       public int getDrawItemsCount() { if (this.drawItemsBuilder_ == null)
/*       */           return this.drawItems_.size(); 
/*       */         return this.drawItemsBuilder_.getCount(); }
/*       */       public Common.KeyValueStruct getDrawItems(int index) { if (this.drawItemsBuilder_ == null)
/*       */           return this.drawItems_.get(index); 
/*       */         return (Common.KeyValueStruct)this.drawItemsBuilder_.getMessage(index); }
/*       */       public Builder setDrawItems(int index, Common.KeyValueStruct value) { if (this.drawItemsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureDrawItemsIsMutable();
/*       */           this.drawItems_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.drawItemsBuilder_.setMessage(index, (GeneratedMessage)value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder setDrawItems(int index, Common.KeyValueStruct.Builder builderForValue) { if (this.drawItemsBuilder_ == null) {
/*       */           ensureDrawItemsIsMutable();
/*       */           this.drawItems_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.drawItemsBuilder_.setMessage(index, (GeneratedMessage)builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addDrawItems(Common.KeyValueStruct value) { if (this.drawItemsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureDrawItemsIsMutable();
/*       */           this.drawItems_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.drawItemsBuilder_.addMessage((GeneratedMessage)value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder addDrawItems(int index, Common.KeyValueStruct value) { if (this.drawItemsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureDrawItemsIsMutable();
/*       */           this.drawItems_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.drawItemsBuilder_.addMessage(index, (GeneratedMessage)value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder addDrawItems(Common.KeyValueStruct.Builder builderForValue) { if (this.drawItemsBuilder_ == null) {
/*       */           ensureDrawItemsIsMutable();
/*       */           this.drawItems_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.drawItemsBuilder_.addMessage((GeneratedMessage)builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addDrawItems(int index, Common.KeyValueStruct.Builder builderForValue) { if (this.drawItemsBuilder_ == null) {
/*       */           ensureDrawItemsIsMutable();
/*       */           this.drawItems_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.drawItemsBuilder_.addMessage(index, (GeneratedMessage)builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addAllDrawItems(Iterable<? extends Common.KeyValueStruct> values) { if (this.drawItemsBuilder_ == null) {
/*       */           ensureDrawItemsIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.drawItems_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.drawItemsBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this; }
/*       */       public Builder clearDrawItems() { if (this.drawItemsBuilder_ == null) {
/*       */           this.drawItems_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFDFF;
/*       */           onChanged();
/*       */         } else {
/*       */           this.drawItemsBuilder_.clear();
/*       */         } 
/*       */         return this; }
/*       */       public Builder removeDrawItems(int index) { if (this.drawItemsBuilder_ == null) {
/*       */           ensureDrawItemsIsMutable();
/*       */           this.drawItems_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.drawItemsBuilder_.remove(index);
/*       */         } 
/*       */         return this; }
/*       */       public Common.KeyValueStruct.Builder getDrawItemsBuilder(int index) { return (Common.KeyValueStruct.Builder)getDrawItemsFieldBuilder().getBuilder(index); }
/*       */       public Common.KeyValueStructOrBuilder getDrawItemsOrBuilder(int index) { if (this.drawItemsBuilder_ == null)
/*       */           return (Common.KeyValueStructOrBuilder)this.drawItems_.get(index); 
/*       */         return (Common.KeyValueStructOrBuilder)this.drawItemsBuilder_.getMessageOrBuilder(index); }
/*       */       public List<? extends Common.KeyValueStructOrBuilder> getDrawItemsOrBuilderList() { if (this.drawItemsBuilder_ != null)
/*       */           return this.drawItemsBuilder_.getMessageOrBuilderList(); 
/*       */         return (List)Collections.unmodifiableList(this.drawItems_); }
/*       */       public Common.KeyValueStruct.Builder addDrawItemsBuilder() { return (Common.KeyValueStruct.Builder)getDrawItemsFieldBuilder().addBuilder((GeneratedMessage)Common.KeyValueStruct.getDefaultInstance()); }
/*       */       public Common.KeyValueStruct.Builder addDrawItemsBuilder(int index) { return (Common.KeyValueStruct.Builder)getDrawItemsFieldBuilder().addBuilder(index, (GeneratedMessage)Common.KeyValueStruct.getDefaultInstance()); }
/*       */       public List<Common.KeyValueStruct.Builder> getDrawItemsBuilderList() { return getDrawItemsFieldBuilder().getBuilderList(); }
/*       */       private RepeatedFieldBuilder<Common.KeyValueStruct, Common.KeyValueStruct.Builder, Common.KeyValueStructOrBuilder> getDrawItemsFieldBuilder() { if (this.drawItemsBuilder_ == null) {
/*       */           this.drawItemsBuilder_ = new RepeatedFieldBuilder(this.drawItems_, ((this.bitField0_ & 0x200) == 512), getParentForChildren(), isClean());
/*       */           this.drawItems_ = null;
/*       */         } 
/*       */         return this.drawItemsBuilder_; }
/*       */       private void ensureShowItemsIsMutable() { if ((this.bitField0_ & 0x400) != 1024) {
/*       */           this.showItems_ = new ArrayList<>(this.showItems_);
/*       */           this.bitField0_ |= 0x400;
/*       */         }  }
/*       */       public List<Common.KeyValueStruct> getShowItemsList() { if (this.showItemsBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.showItems_); 
/*       */         return this.showItemsBuilder_.getMessageList(); }
/*       */       public int getShowItemsCount() { if (this.showItemsBuilder_ == null)
/*       */           return this.showItems_.size(); 
/*       */         return this.showItemsBuilder_.getCount(); }
/*       */       public Common.KeyValueStruct getShowItems(int index) { if (this.showItemsBuilder_ == null)
/*       */           return this.showItems_.get(index); 
/*       */         return (Common.KeyValueStruct)this.showItemsBuilder_.getMessage(index); }
/*       */       public Builder setShowItems(int index, Common.KeyValueStruct value) { if (this.showItemsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureShowItemsIsMutable();
/*       */           this.showItems_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.showItemsBuilder_.setMessage(index, (GeneratedMessage)value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder setShowItems(int index, Common.KeyValueStruct.Builder builderForValue) { if (this.showItemsBuilder_ == null) {
/*       */           ensureShowItemsIsMutable();
/*       */           this.showItems_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.showItemsBuilder_.setMessage(index, (GeneratedMessage)builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addShowItems(Common.KeyValueStruct value) { if (this.showItemsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureShowItemsIsMutable();
/*       */           this.showItems_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.showItemsBuilder_.addMessage((GeneratedMessage)value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder addShowItems(int index, Common.KeyValueStruct value) { if (this.showItemsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureShowItemsIsMutable();
/*       */           this.showItems_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.showItemsBuilder_.addMessage(index, (GeneratedMessage)value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder addShowItems(Common.KeyValueStruct.Builder builderForValue) { if (this.showItemsBuilder_ == null) {
/*       */           ensureShowItemsIsMutable();
/*       */           this.showItems_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.showItemsBuilder_.addMessage((GeneratedMessage)builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addShowItems(int index, Common.KeyValueStruct.Builder builderForValue) { if (this.showItemsBuilder_ == null) {
/*       */           ensureShowItemsIsMutable();
/*       */           this.showItems_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.showItemsBuilder_.addMessage(index, (GeneratedMessage)builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addAllShowItems(Iterable<? extends Common.KeyValueStruct> values) { if (this.showItemsBuilder_ == null) {
/*       */           ensureShowItemsIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.showItems_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.showItemsBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this; }
/*       */       public Builder clearShowItems() { if (this.showItemsBuilder_ == null) {
/*       */           this.showItems_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFBFF;
/*       */           onChanged();
/*       */         } else {
/*       */           this.showItemsBuilder_.clear();
/*       */         } 
/*       */         return this; }
/*       */       public Builder removeShowItems(int index) { if (this.showItemsBuilder_ == null) {
/*       */           ensureShowItemsIsMutable();
/*       */           this.showItems_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.showItemsBuilder_.remove(index);
/*       */         } 
/*       */         return this; }
/*       */       public Common.KeyValueStruct.Builder getShowItemsBuilder(int index) { return (Common.KeyValueStruct.Builder)getShowItemsFieldBuilder().getBuilder(index); }
/*       */       public Common.KeyValueStructOrBuilder getShowItemsOrBuilder(int index) { if (this.showItemsBuilder_ == null)
/*       */           return (Common.KeyValueStructOrBuilder)this.showItems_.get(index); 
/*       */         return (Common.KeyValueStructOrBuilder)this.showItemsBuilder_.getMessageOrBuilder(index); }
/*       */       public List<? extends Common.KeyValueStructOrBuilder> getShowItemsOrBuilderList() { if (this.showItemsBuilder_ != null)
/*       */           return this.showItemsBuilder_.getMessageOrBuilderList(); 
/*       */         return (List)Collections.unmodifiableList(this.showItems_); }
/*       */       public Common.KeyValueStruct.Builder addShowItemsBuilder() { return (Common.KeyValueStruct.Builder)getShowItemsFieldBuilder().addBuilder((GeneratedMessage)Common.KeyValueStruct.getDefaultInstance()); }
/*       */       public Common.KeyValueStruct.Builder addShowItemsBuilder(int index) { return (Common.KeyValueStruct.Builder)getShowItemsFieldBuilder().addBuilder(index, (GeneratedMessage)Common.KeyValueStruct.getDefaultInstance()); }
/*       */       public List<Common.KeyValueStruct.Builder> getShowItemsBuilderList() { return getShowItemsFieldBuilder().getBuilderList(); }
/*       */       private RepeatedFieldBuilder<Common.KeyValueStruct, Common.KeyValueStruct.Builder, Common.KeyValueStructOrBuilder> getShowItemsFieldBuilder() { if (this.showItemsBuilder_ == null) {
/*       */           this.showItemsBuilder_ = new RepeatedFieldBuilder(this.showItems_, ((this.bitField0_ & 0x400) == 1024), getParentForChildren(), isClean());
/*       */           this.showItems_ = null;
/*       */         } 
/*       */         return this.showItemsBuilder_; } } }
/* 37922 */   public static final class DrawInfo extends GeneratedMessage implements DrawInfoOrBuilder { private static final DrawInfo defaultInstance = new DrawInfo(true); private final UnknownFieldSet unknownFields; private DrawInfo(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private DrawInfo(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static DrawInfo getDefaultInstance() { return defaultInstance; } public DrawInfo getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private DrawInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.date_ = bs; break;case 18: bs = input.readBytes(); if ((mutable_bitField0_ & 0x2) != 2) { this.message_ = (LazyStringList)new LazyStringArrayList(); mutable_bitField0_ |= 0x2; }  this.message_.add(bs); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x2) == 2) this.message_ = this.message_.getUnmodifiableView();  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_DrawInfo_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_DrawInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(DrawInfo.class, Builder.class); } public static Parser<DrawInfo> PARSER = (Parser<DrawInfo>)new AbstractParser<DrawInfo>() { public ActivityHandler.DrawInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.DrawInfo(input, extensionRegistry); } }; private int bitField0_; public static final int DATE_FIELD_NUMBER = 1; private Object date_; public static final int MESSAGE_FIELD_NUMBER = 2; private LazyStringList message_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<DrawInfo> getParserForType() { return PARSER; } public boolean hasDate() { return ((this.bitField0_ & 0x1) == 1); } public String getDate() { Object ref = this.date_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.date_ = s;  return s; } public ByteString getDateBytes() { Object ref = this.date_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.date_ = b; return b; }  return (ByteString)ref; } public ProtocolStringList getMessageList() { return (ProtocolStringList)this.message_; } public int getMessageCount() { return this.message_.size(); } public String getMessage(int index) { return (String)this.message_.get(index); } public ByteString getMessageBytes(int index) { return this.message_.getByteString(index); } private void initFields() { this.date_ = ""; this.message_ = LazyStringArrayList.EMPTY; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasDate()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getDateBytes());  for (int i = 0; i < this.message_.size(); i++) output.writeBytes(2, this.message_.getByteString(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getDateBytes());  int dataSize = 0; for (int i = 0; i < this.message_.size(); i++) dataSize += CodedOutputStream.computeBytesSizeNoTag(this.message_.getByteString(i));  size += dataSize; size += 1 * getMessageList().size(); size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static DrawInfo parseFrom(ByteString data) throws InvalidProtocolBufferException { return (DrawInfo)PARSER.parseFrom(data); } public static DrawInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DrawInfo)PARSER.parseFrom(data, extensionRegistry); } public static DrawInfo parseFrom(byte[] data) throws InvalidProtocolBufferException { return (DrawInfo)PARSER.parseFrom(data); } public static DrawInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DrawInfo)PARSER.parseFrom(data, extensionRegistry); } public static DrawInfo parseFrom(InputStream input) throws IOException { return (DrawInfo)PARSER.parseFrom(input); } public static DrawInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawInfo)PARSER.parseFrom(input, extensionRegistry); } public static DrawInfo parseDelimitedFrom(InputStream input) throws IOException { return (DrawInfo)PARSER.parseDelimitedFrom(input); } public static DrawInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawInfo)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static DrawInfo parseFrom(CodedInputStream input) throws IOException { return (DrawInfo)PARSER.parseFrom(input); } public static DrawInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawInfo)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(DrawInfo prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.DrawInfoOrBuilder {
/* 37923 */       private int bitField0_; private Object date_; private LazyStringList message_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_DrawInfo_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_DrawInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.DrawInfo.class, Builder.class); } private Builder() { this.date_ = ""; this.message_ = LazyStringArrayList.EMPTY; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.date_ = ""; this.message_ = LazyStringArrayList.EMPTY; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.DrawInfo.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.date_ = ""; this.bitField0_ &= 0xFFFFFFFE; this.message_ = LazyStringArrayList.EMPTY; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_DrawInfo_descriptor; } public ActivityHandler.DrawInfo getDefaultInstanceForType() { return ActivityHandler.DrawInfo.getDefaultInstance(); } public ActivityHandler.DrawInfo build() { ActivityHandler.DrawInfo result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.DrawInfo buildPartial() { ActivityHandler.DrawInfo result = new ActivityHandler.DrawInfo(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.date_ = this.date_; if ((this.bitField0_ & 0x2) == 2) { this.message_ = this.message_.getUnmodifiableView(); this.bitField0_ &= 0xFFFFFFFD; }  result.message_ = this.message_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.DrawInfo) return mergeFrom((ActivityHandler.DrawInfo)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.DrawInfo other) { if (other == ActivityHandler.DrawInfo.getDefaultInstance()) return this;  if (other.hasDate()) { this.bitField0_ |= 0x1; this.date_ = other.date_; onChanged(); }  if (!other.message_.isEmpty()) { if (this.message_.isEmpty()) { this.message_ = other.message_; this.bitField0_ &= 0xFFFFFFFD; } else { ensureMessageIsMutable(); this.message_.addAll((Collection)other.message_); }  onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasDate()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.DrawInfo parsedMessage = null; try { parsedMessage = (ActivityHandler.DrawInfo)ActivityHandler.DrawInfo.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.DrawInfo)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasDate() { return ((this.bitField0_ & 0x1) == 1); } public String getDate() { Object ref = this.date_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.date_ = s;  return s; }  return (String)ref; } public ByteString getDateBytes() { Object ref = this.date_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.date_ = b; return b; }  return (ByteString)ref; } public Builder setDate(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.date_ = value; onChanged(); return this; } public Builder clearDate() { this.bitField0_ &= 0xFFFFFFFE; this.date_ = ActivityHandler.DrawInfo.getDefaultInstance().getDate(); onChanged(); return this; } public Builder setDateBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.date_ = value; onChanged(); return this; } private void ensureMessageIsMutable() { if ((this.bitField0_ & 0x2) != 2) { this.message_ = (LazyStringList)new LazyStringArrayList(this.message_); this.bitField0_ |= 0x2; }  } public ProtocolStringList getMessageList() { return (ProtocolStringList)this.message_.getUnmodifiableView(); } public int getMessageCount() { return this.message_.size(); } public String getMessage(int index) { return (String)this.message_.get(index); } public ByteString getMessageBytes(int index) { return this.message_.getByteString(index); } public Builder setMessage(int index, String value) { if (value == null) throw new NullPointerException();  ensureMessageIsMutable(); this.message_.set(index, value); onChanged(); return this; } public Builder addMessage(String value) { if (value == null) throw new NullPointerException();  ensureMessageIsMutable(); this.message_.add(value); onChanged(); return this; } public Builder addAllMessage(Iterable<String> values) { ensureMessageIsMutable(); AbstractMessageLite.Builder.addAll(values, (Collection)this.message_); onChanged(); return this; } public Builder clearMessage() { this.message_ = LazyStringArrayList.EMPTY; this.bitField0_ &= 0xFFFFFFFD; onChanged(); return this; } public Builder addMessageBytes(ByteString value) { if (value == null) throw new NullPointerException();  ensureMessageIsMutable(); this.message_.add(value); onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */      }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class DrawInfoRequest
/*       */     extends GeneratedMessage
/*       */     implements DrawInfoRequestOrBuilder
/*       */   {
/* 38243 */     private static final DrawInfoRequest defaultInstance = new DrawInfoRequest(true); private final UnknownFieldSet unknownFields; private DrawInfoRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private DrawInfoRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static DrawInfoRequest getDefaultInstance() { return defaultInstance; } public DrawInfoRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private DrawInfoRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_DrawInfoRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_DrawInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(DrawInfoRequest.class, Builder.class); } public static Parser<DrawInfoRequest> PARSER = (Parser<DrawInfoRequest>)new AbstractParser<DrawInfoRequest>() { public ActivityHandler.DrawInfoRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.DrawInfoRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<DrawInfoRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static DrawInfoRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (DrawInfoRequest)PARSER.parseFrom(data); } public static DrawInfoRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DrawInfoRequest)PARSER.parseFrom(data, extensionRegistry); } public static DrawInfoRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (DrawInfoRequest)PARSER.parseFrom(data); } public static DrawInfoRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DrawInfoRequest)PARSER.parseFrom(data, extensionRegistry); } public static DrawInfoRequest parseFrom(InputStream input) throws IOException { return (DrawInfoRequest)PARSER.parseFrom(input); } public static DrawInfoRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawInfoRequest)PARSER.parseFrom(input, extensionRegistry); } public static DrawInfoRequest parseDelimitedFrom(InputStream input) throws IOException { return (DrawInfoRequest)PARSER.parseDelimitedFrom(input); } public static DrawInfoRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawInfoRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static DrawInfoRequest parseFrom(CodedInputStream input) throws IOException { return (DrawInfoRequest)PARSER.parseFrom(input); } public static DrawInfoRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawInfoRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(DrawInfoRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.DrawInfoRequestOrBuilder {
/* 38244 */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_DrawInfoRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_DrawInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.DrawInfoRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.DrawInfoRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_DrawInfoRequest_descriptor; } public ActivityHandler.DrawInfoRequest getDefaultInstanceForType() { return ActivityHandler.DrawInfoRequest.getDefaultInstance(); } public ActivityHandler.DrawInfoRequest build() { ActivityHandler.DrawInfoRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.DrawInfoRequest buildPartial() { ActivityHandler.DrawInfoRequest result = new ActivityHandler.DrawInfoRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.DrawInfoRequest) return mergeFrom((ActivityHandler.DrawInfoRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.DrawInfoRequest other) { if (other == ActivityHandler.DrawInfoRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.DrawInfoRequest parsedMessage = null; try { parsedMessage = (ActivityHandler.DrawInfoRequest)ActivityHandler.DrawInfoRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.DrawInfoRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class DrawInfoResponse
/*       */     extends GeneratedMessage
/*       */     implements DrawInfoResponseOrBuilder
/*       */   {
/* 39891 */     private static final DrawInfoResponse defaultInstance = new DrawInfoResponse(true); private final UnknownFieldSet unknownFields; private DrawInfoResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private DrawInfoResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static DrawInfoResponse getDefaultInstance() { return defaultInstance; } public DrawInfoResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private DrawInfoResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: if ((mutable_bitField0_ & 0x4) != 4) { this.allDrawInfo_ = new ArrayList<>(); mutable_bitField0_ |= 0x4; }  this.allDrawInfo_.add(input.readMessage(ActivityHandler.DrawInfo.PARSER, extensionRegistry)); break;case 34: if ((mutable_bitField0_ & 0x8) != 8) { this.myDrawInfo_ = new ArrayList<>(); mutable_bitField0_ |= 0x8; }  this.myDrawInfo_.add(input.readMessage(ActivityHandler.DrawInfo.PARSER, extensionRegistry)); break;case 40: this.bitField0_ |= 0x4; this.isLow_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x4) == 4) this.allDrawInfo_ = Collections.unmodifiableList(this.allDrawInfo_);  if ((mutable_bitField0_ & 0x8) == 8) this.myDrawInfo_ = Collections.unmodifiableList(this.myDrawInfo_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_DrawInfoResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_DrawInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(DrawInfoResponse.class, Builder.class); } public static Parser<DrawInfoResponse> PARSER = (Parser<DrawInfoResponse>)new AbstractParser<DrawInfoResponse>() { public ActivityHandler.DrawInfoResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.DrawInfoResponse(input, extensionRegistry); } }
/* 39892 */     ; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int ALLDRAWINFO_FIELD_NUMBER = 3; private List<ActivityHandler.DrawInfo> allDrawInfo_; public static final int MYDRAWINFO_FIELD_NUMBER = 4; private List<ActivityHandler.DrawInfo> myDrawInfo_; public static final int ISLOW_FIELD_NUMBER = 5; private int isLow_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<DrawInfoResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public List<ActivityHandler.DrawInfo> getAllDrawInfoList() { return this.allDrawInfo_; } static { defaultInstance.initFields(); } public List<? extends ActivityHandler.DrawInfoOrBuilder> getAllDrawInfoOrBuilderList() { return (List)this.allDrawInfo_; }
/*       */     public int getAllDrawInfoCount() { return this.allDrawInfo_.size(); }
/*       */     public ActivityHandler.DrawInfo getAllDrawInfo(int index) { return this.allDrawInfo_.get(index); }
/*       */     public ActivityHandler.DrawInfoOrBuilder getAllDrawInfoOrBuilder(int index) { return this.allDrawInfo_.get(index); }
/*       */     public List<ActivityHandler.DrawInfo> getMyDrawInfoList() { return this.myDrawInfo_; }
/*       */     public List<? extends ActivityHandler.DrawInfoOrBuilder> getMyDrawInfoOrBuilderList() { return (List)this.myDrawInfo_; }
/*       */     public int getMyDrawInfoCount() { return this.myDrawInfo_.size(); }
/*       */     public ActivityHandler.DrawInfo getMyDrawInfo(int index) { return this.myDrawInfo_.get(index); }
/*       */     public ActivityHandler.DrawInfoOrBuilder getMyDrawInfoOrBuilder(int index) { return this.myDrawInfo_.get(index); }
/*       */     public boolean hasIsLow() { return ((this.bitField0_ & 0x4) == 4); }
/*       */     public int getIsLow() { return this.isLow_; }
/*       */     private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.allDrawInfo_ = Collections.emptyList(); this.myDrawInfo_ = Collections.emptyList(); this.isLow_ = 0; }
/*       */     public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1)
/*       */         return true;  if (isInitialized == 0)
/*       */         return false;  if (!hasS2CCode()) {
/*       */         this.memoizedIsInitialized = 0; return false;
/*       */       }  int i; for (i = 0; i < getAllDrawInfoCount(); i++) {
/*       */         if (!getAllDrawInfo(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0; return false;
/*       */         } 
/*       */       }  for (i = 0; i < getMyDrawInfoCount(); i++) {
/*       */         if (!getMyDrawInfo(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0; return false;
/*       */         } 
/*       */       }  this.memoizedIsInitialized = 1; return true; }
/*       */     public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1)
/*       */         output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2)
/*       */         output.writeBytes(2, getS2CMsgBytes());  int i; for (i = 0; i < this.allDrawInfo_.size(); i++)
/*       */         output.writeMessage(3, (MessageLite)this.allDrawInfo_.get(i));  for (i = 0; i < this.myDrawInfo_.size(); i++)
/*       */         output.writeMessage(4, (MessageLite)this.myDrawInfo_.get(i));  if ((this.bitField0_ & 0x4) == 4)
/*       */         output.writeInt32(5, this.isLow_);  getUnknownFields().writeTo(output); }
/*       */     public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1)
/*       */         return size;  size = 0; if ((this.bitField0_ & 0x1) == 1)
/*       */         size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2)
/*       */         size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  int i; for (i = 0; i < this.allDrawInfo_.size(); i++)
/*       */         size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.allDrawInfo_.get(i));  for (i = 0; i < this.myDrawInfo_.size(); i++)
/*       */         size += CodedOutputStream.computeMessageSize(4, (MessageLite)this.myDrawInfo_.get(i));  if ((this.bitField0_ & 0x4) == 4)
/*       */         size += CodedOutputStream.computeInt32Size(5, this.isLow_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; }
/*       */     protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); }
/*       */     public static DrawInfoResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (DrawInfoResponse)PARSER.parseFrom(data); }
/*       */     public static DrawInfoResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DrawInfoResponse)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static DrawInfoResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (DrawInfoResponse)PARSER.parseFrom(data); }
/*       */     public static DrawInfoResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DrawInfoResponse)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static DrawInfoResponse parseFrom(InputStream input) throws IOException { return (DrawInfoResponse)PARSER.parseFrom(input); }
/*       */     public static DrawInfoResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawInfoResponse)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static DrawInfoResponse parseDelimitedFrom(InputStream input) throws IOException { return (DrawInfoResponse)PARSER.parseDelimitedFrom(input); }
/*       */     public static DrawInfoResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawInfoResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); }
/*       */     public static DrawInfoResponse parseFrom(CodedInputStream input) throws IOException { return (DrawInfoResponse)PARSER.parseFrom(input); }
/*       */     public static DrawInfoResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawInfoResponse)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static Builder newBuilder() { return Builder.create(); }
/*       */     public Builder newBuilderForType() { return newBuilder(); }
/*       */     public static Builder newBuilder(DrawInfoResponse prototype) { return newBuilder().mergeFrom(prototype); }
/*       */     public Builder toBuilder() { return newBuilder(this); }
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; }
/*       */     public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.DrawInfoResponseOrBuilder { private int bitField0_; private int s2CCode_; private Object s2CMsg_; private List<ActivityHandler.DrawInfo> allDrawInfo_; private RepeatedFieldBuilder<ActivityHandler.DrawInfo, ActivityHandler.DrawInfo.Builder, ActivityHandler.DrawInfoOrBuilder> allDrawInfoBuilder_; private List<ActivityHandler.DrawInfo> myDrawInfo_; private RepeatedFieldBuilder<ActivityHandler.DrawInfo, ActivityHandler.DrawInfo.Builder, ActivityHandler.DrawInfoOrBuilder> myDrawInfoBuilder_; private int isLow_;
/*       */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_DrawInfoResponse_descriptor; }
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_DrawInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.DrawInfoResponse.class, Builder.class); }
/*       */       private Builder() { this.s2CMsg_ = ""; this.allDrawInfo_ = Collections.emptyList(); this.myDrawInfo_ = Collections.emptyList(); maybeForceBuilderInitialization(); }
/*       */       private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; this.allDrawInfo_ = Collections.emptyList(); this.myDrawInfo_ = Collections.emptyList(); maybeForceBuilderInitialization(); }
/*       */       private void maybeForceBuilderInitialization() { if (ActivityHandler.DrawInfoResponse.alwaysUseFieldBuilders) {
/*       */           getAllDrawInfoFieldBuilder(); getMyDrawInfoFieldBuilder();
/*       */         }  }
/*       */       private static Builder create() { return new Builder(); }
/*       */       public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; if (this.allDrawInfoBuilder_ == null) {
/*       */           this.allDrawInfo_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB;
/*       */         } else {
/*       */           this.allDrawInfoBuilder_.clear();
/*       */         }  if (this.myDrawInfoBuilder_ == null) {
/*       */           this.myDrawInfo_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFF7;
/*       */         } else {
/*       */           this.myDrawInfoBuilder_.clear();
/*       */         }  this.isLow_ = 0; this.bitField0_ &= 0xFFFFFFEF; return this; }
/*       */       public Builder clone() { return create().mergeFrom(buildPartial()); }
/*       */       public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_DrawInfoResponse_descriptor; }
/*       */       public ActivityHandler.DrawInfoResponse getDefaultInstanceForType() { return ActivityHandler.DrawInfoResponse.getDefaultInstance(); }
/*       */       public ActivityHandler.DrawInfoResponse build() { ActivityHandler.DrawInfoResponse result = buildPartial(); if (!result.isInitialized())
/*       */           throw newUninitializedMessageException(result);  return result; }
/*       */       public ActivityHandler.DrawInfoResponse buildPartial() { ActivityHandler.DrawInfoResponse result = new ActivityHandler.DrawInfoResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1)
/*       */           to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2)
/*       */           to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if (this.allDrawInfoBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x4) == 4) {
/*       */             this.allDrawInfo_ = Collections.unmodifiableList(this.allDrawInfo_); this.bitField0_ &= 0xFFFFFFFB;
/*       */           }  result.allDrawInfo_ = this.allDrawInfo_;
/*       */         } else {
/*       */           result.allDrawInfo_ = this.allDrawInfoBuilder_.build();
/*       */         }  if (this.myDrawInfoBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x8) == 8) {
/*       */             this.myDrawInfo_ = Collections.unmodifiableList(this.myDrawInfo_); this.bitField0_ &= 0xFFFFFFF7;
/*       */           }  result.myDrawInfo_ = this.myDrawInfo_;
/*       */         } else {
/*       */           result.myDrawInfo_ = this.myDrawInfoBuilder_.build();
/*       */         }  if ((from_bitField0_ & 0x10) == 16)
/*       */           to_bitField0_ |= 0x4;  result.isLow_ = this.isLow_; result.bitField0_ = to_bitField0_; onBuilt(); return result; }
/*       */       public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.DrawInfoResponse)
/*       */           return mergeFrom((ActivityHandler.DrawInfoResponse)other);  super.mergeFrom(other); return this; }
/*       */       public Builder mergeFrom(ActivityHandler.DrawInfoResponse other) { if (other == ActivityHandler.DrawInfoResponse.getDefaultInstance())
/*       */           return this;  if (other.hasS2CCode())
/*       */           setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) {
/*       */           this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged();
/*       */         }  if (this.allDrawInfoBuilder_ == null) {
/*       */           if (!other.allDrawInfo_.isEmpty()) {
/*       */             if (this.allDrawInfo_.isEmpty()) {
/*       */               this.allDrawInfo_ = other.allDrawInfo_; this.bitField0_ &= 0xFFFFFFFB;
/*       */             } else {
/*       */               ensureAllDrawInfoIsMutable(); this.allDrawInfo_.addAll(other.allDrawInfo_);
/*       */             }  onChanged();
/*       */           } 
/*       */         } else if (!other.allDrawInfo_.isEmpty()) {
/*       */           if (this.allDrawInfoBuilder_.isEmpty()) {
/*       */             this.allDrawInfoBuilder_.dispose(); this.allDrawInfoBuilder_ = null; this.allDrawInfo_ = other.allDrawInfo_; this.bitField0_ &= 0xFFFFFFFB; this.allDrawInfoBuilder_ = ActivityHandler.DrawInfoResponse.alwaysUseFieldBuilders ? getAllDrawInfoFieldBuilder() : null;
/*       */           } else {
/*       */             this.allDrawInfoBuilder_.addAllMessages(other.allDrawInfo_);
/*       */           } 
/*       */         }  if (this.myDrawInfoBuilder_ == null) {
/*       */           if (!other.myDrawInfo_.isEmpty()) {
/*       */             if (this.myDrawInfo_.isEmpty()) {
/*       */               this.myDrawInfo_ = other.myDrawInfo_; this.bitField0_ &= 0xFFFFFFF7;
/*       */             } else {
/*       */               ensureMyDrawInfoIsMutable(); this.myDrawInfo_.addAll(other.myDrawInfo_);
/*       */             }  onChanged();
/*       */           } 
/*       */         } else if (!other.myDrawInfo_.isEmpty()) {
/*       */           if (this.myDrawInfoBuilder_.isEmpty()) {
/*       */             this.myDrawInfoBuilder_.dispose(); this.myDrawInfoBuilder_ = null; this.myDrawInfo_ = other.myDrawInfo_; this.bitField0_ &= 0xFFFFFFF7; this.myDrawInfoBuilder_ = ActivityHandler.DrawInfoResponse.alwaysUseFieldBuilders ? getMyDrawInfoFieldBuilder() : null;
/*       */           } else {
/*       */             this.myDrawInfoBuilder_.addAllMessages(other.myDrawInfo_);
/*       */           } 
/*       */         }  if (other.hasIsLow())
/*       */           setIsLow(other.getIsLow());  mergeUnknownFields(other.getUnknownFields()); return this; }
/*       */       public final boolean isInitialized() { if (!hasS2CCode())
/*       */           return false;  int i; for (i = 0; i < getAllDrawInfoCount(); i++) {
/*       */           if (!getAllDrawInfo(i).isInitialized())
/*       */             return false; 
/*       */         }  for (i = 0; i < getMyDrawInfoCount(); i++) {
/*       */           if (!getMyDrawInfo(i).isInitialized())
/*       */             return false; 
/*       */         }  return true; }
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.DrawInfoResponse parsedMessage = null; try {
/*       */           parsedMessage = (ActivityHandler.DrawInfoResponse)ActivityHandler.DrawInfoResponse.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (ActivityHandler.DrawInfoResponse)e.getUnfinishedMessage(); throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null)
/*       */             mergeFrom(parsedMessage); 
/*       */         }  return this; }
/*       */       public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); }
/*       */       public int getS2CCode() { return this.s2CCode_; }
/*       */       public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; }
/*       */       public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; }
/*       */       public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); }
/*       */       public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8())
/*       */             this.s2CMsg_ = s;  return s;
/*       */         }  return (String)ref; }
/*       */       public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b;
/*       */         }  return (ByteString)ref; }
/*       */       public Builder setS2CMsg(String value) { if (value == null)
/*       */           throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; }
/*       */       public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = ActivityHandler.DrawInfoResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; }
/*       */       public Builder setS2CMsgBytes(ByteString value) { if (value == null)
/*       */           throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; }
/*       */       private void ensureAllDrawInfoIsMutable() { if ((this.bitField0_ & 0x4) != 4) {
/*       */           this.allDrawInfo_ = new ArrayList<>(this.allDrawInfo_); this.bitField0_ |= 0x4;
/*       */         }  }
/*       */       public List<ActivityHandler.DrawInfo> getAllDrawInfoList() { if (this.allDrawInfoBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.allDrawInfo_);  return this.allDrawInfoBuilder_.getMessageList(); }
/*       */       public int getAllDrawInfoCount() { if (this.allDrawInfoBuilder_ == null)
/*       */           return this.allDrawInfo_.size();  return this.allDrawInfoBuilder_.getCount(); }
/*       */       public ActivityHandler.DrawInfo getAllDrawInfo(int index) { if (this.allDrawInfoBuilder_ == null)
/*       */           return this.allDrawInfo_.get(index);  return (ActivityHandler.DrawInfo)this.allDrawInfoBuilder_.getMessage(index); }
/*       */       public Builder setAllDrawInfo(int index, ActivityHandler.DrawInfo value) { if (this.allDrawInfoBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException();  ensureAllDrawInfoIsMutable(); this.allDrawInfo_.set(index, value); onChanged();
/*       */         } else {
/*       */           this.allDrawInfoBuilder_.setMessage(index, value);
/*       */         }  return this; }
/*       */       public Builder setAllDrawInfo(int index, ActivityHandler.DrawInfo.Builder builderForValue) { if (this.allDrawInfoBuilder_ == null) {
/*       */           ensureAllDrawInfoIsMutable(); this.allDrawInfo_.set(index, builderForValue.build()); onChanged();
/*       */         } else {
/*       */           this.allDrawInfoBuilder_.setMessage(index, builderForValue.build());
/*       */         }  return this; }
/*       */       public Builder addAllDrawInfo(ActivityHandler.DrawInfo value) { if (this.allDrawInfoBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException();  ensureAllDrawInfoIsMutable(); this.allDrawInfo_.add(value); onChanged();
/*       */         } else {
/*       */           this.allDrawInfoBuilder_.addMessage(value);
/*       */         }  return this; }
/*       */       public Builder addAllDrawInfo(int index, ActivityHandler.DrawInfo value) { if (this.allDrawInfoBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException();  ensureAllDrawInfoIsMutable(); this.allDrawInfo_.add(index, value); onChanged();
/*       */         } else {
/*       */           this.allDrawInfoBuilder_.addMessage(index, value);
/*       */         }  return this; }
/*       */       public Builder addAllDrawInfo(ActivityHandler.DrawInfo.Builder builderForValue) { if (this.allDrawInfoBuilder_ == null) {
/*       */           ensureAllDrawInfoIsMutable(); this.allDrawInfo_.add(builderForValue.build()); onChanged();
/*       */         } else {
/*       */           this.allDrawInfoBuilder_.addMessage(builderForValue.build());
/*       */         }  return this; }
/*       */       public Builder addAllDrawInfo(int index, ActivityHandler.DrawInfo.Builder builderForValue) { if (this.allDrawInfoBuilder_ == null) {
/*       */           ensureAllDrawInfoIsMutable(); this.allDrawInfo_.add(index, builderForValue.build()); onChanged();
/*       */         } else {
/*       */           this.allDrawInfoBuilder_.addMessage(index, builderForValue.build());
/*       */         }  return this; }
/*       */       public Builder addAllAllDrawInfo(Iterable<? extends ActivityHandler.DrawInfo> values) { if (this.allDrawInfoBuilder_ == null) {
/*       */           ensureAllDrawInfoIsMutable(); AbstractMessageLite.Builder.addAll(values, this.allDrawInfo_); onChanged();
/*       */         } else {
/*       */           this.allDrawInfoBuilder_.addAllMessages(values);
/*       */         }  return this; }
/*       */       public Builder clearAllDrawInfo() { if (this.allDrawInfoBuilder_ == null) {
/*       */           this.allDrawInfo_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; onChanged();
/*       */         } else {
/*       */           this.allDrawInfoBuilder_.clear();
/*       */         }  return this; }
/*       */       public Builder removeAllDrawInfo(int index) { if (this.allDrawInfoBuilder_ == null) {
/*       */           ensureAllDrawInfoIsMutable(); this.allDrawInfo_.remove(index); onChanged();
/*       */         } else {
/*       */           this.allDrawInfoBuilder_.remove(index);
/*       */         }  return this; }
/*       */       public ActivityHandler.DrawInfo.Builder getAllDrawInfoBuilder(int index) { return (ActivityHandler.DrawInfo.Builder)getAllDrawInfoFieldBuilder().getBuilder(index); }
/*       */       public ActivityHandler.DrawInfoOrBuilder getAllDrawInfoOrBuilder(int index) { if (this.allDrawInfoBuilder_ == null)
/*       */           return this.allDrawInfo_.get(index);  return (ActivityHandler.DrawInfoOrBuilder)this.allDrawInfoBuilder_.getMessageOrBuilder(index); }
/*       */       public List<? extends ActivityHandler.DrawInfoOrBuilder> getAllDrawInfoOrBuilderList() { if (this.allDrawInfoBuilder_ != null)
/*       */           return this.allDrawInfoBuilder_.getMessageOrBuilderList();  return Collections.unmodifiableList((List)this.allDrawInfo_); }
/*       */       public ActivityHandler.DrawInfo.Builder addAllDrawInfoBuilder() { return (ActivityHandler.DrawInfo.Builder)getAllDrawInfoFieldBuilder().addBuilder(ActivityHandler.DrawInfo.getDefaultInstance()); }
/*       */       public ActivityHandler.DrawInfo.Builder addAllDrawInfoBuilder(int index) { return (ActivityHandler.DrawInfo.Builder)getAllDrawInfoFieldBuilder().addBuilder(index, ActivityHandler.DrawInfo.getDefaultInstance()); }
/*       */       public List<ActivityHandler.DrawInfo.Builder> getAllDrawInfoBuilderList() { return getAllDrawInfoFieldBuilder().getBuilderList(); }
/*       */       private RepeatedFieldBuilder<ActivityHandler.DrawInfo, ActivityHandler.DrawInfo.Builder, ActivityHandler.DrawInfoOrBuilder> getAllDrawInfoFieldBuilder() { if (this.allDrawInfoBuilder_ == null) {
/*       */           this.allDrawInfoBuilder_ = new RepeatedFieldBuilder(this.allDrawInfo_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean()); this.allDrawInfo_ = null;
/*       */         }  return this.allDrawInfoBuilder_; }
/*       */       private void ensureMyDrawInfoIsMutable() { if ((this.bitField0_ & 0x8) != 8) {
/*       */           this.myDrawInfo_ = new ArrayList<>(this.myDrawInfo_); this.bitField0_ |= 0x8;
/*       */         }  }
/*       */       public List<ActivityHandler.DrawInfo> getMyDrawInfoList() { if (this.myDrawInfoBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.myDrawInfo_);  return this.myDrawInfoBuilder_.getMessageList(); }
/*       */       public int getMyDrawInfoCount() { if (this.myDrawInfoBuilder_ == null)
/*       */           return this.myDrawInfo_.size();  return this.myDrawInfoBuilder_.getCount(); }
/*       */       public ActivityHandler.DrawInfo getMyDrawInfo(int index) { if (this.myDrawInfoBuilder_ == null)
/*       */           return this.myDrawInfo_.get(index);  return (ActivityHandler.DrawInfo)this.myDrawInfoBuilder_.getMessage(index); }
/*       */       public Builder setMyDrawInfo(int index, ActivityHandler.DrawInfo value) { if (this.myDrawInfoBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException();  ensureMyDrawInfoIsMutable(); this.myDrawInfo_.set(index, value); onChanged();
/*       */         } else {
/*       */           this.myDrawInfoBuilder_.setMessage(index, value);
/*       */         }  return this; }
/*       */       public Builder setMyDrawInfo(int index, ActivityHandler.DrawInfo.Builder builderForValue) { if (this.myDrawInfoBuilder_ == null) {
/*       */           ensureMyDrawInfoIsMutable(); this.myDrawInfo_.set(index, builderForValue.build()); onChanged();
/*       */         } else {
/*       */           this.myDrawInfoBuilder_.setMessage(index, builderForValue.build());
/*       */         }  return this; }
/*       */       public Builder addMyDrawInfo(ActivityHandler.DrawInfo value) { if (this.myDrawInfoBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException();  ensureMyDrawInfoIsMutable(); this.myDrawInfo_.add(value); onChanged();
/*       */         } else {
/*       */           this.myDrawInfoBuilder_.addMessage(value);
/*       */         }  return this; }
/*       */       public Builder addMyDrawInfo(int index, ActivityHandler.DrawInfo value) { if (this.myDrawInfoBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException();  ensureMyDrawInfoIsMutable(); this.myDrawInfo_.add(index, value); onChanged();
/*       */         } else {
/*       */           this.myDrawInfoBuilder_.addMessage(index, value);
/*       */         }  return this; }
/*       */       public Builder addMyDrawInfo(ActivityHandler.DrawInfo.Builder builderForValue) { if (this.myDrawInfoBuilder_ == null) {
/*       */           ensureMyDrawInfoIsMutable(); this.myDrawInfo_.add(builderForValue.build()); onChanged();
/*       */         } else {
/*       */           this.myDrawInfoBuilder_.addMessage(builderForValue.build());
/*       */         }  return this; }
/*       */       public Builder addMyDrawInfo(int index, ActivityHandler.DrawInfo.Builder builderForValue) { if (this.myDrawInfoBuilder_ == null) {
/*       */           ensureMyDrawInfoIsMutable(); this.myDrawInfo_.add(index, builderForValue.build()); onChanged();
/*       */         } else {
/*       */           this.myDrawInfoBuilder_.addMessage(index, builderForValue.build());
/*       */         }  return this; }
/*       */       public Builder addAllMyDrawInfo(Iterable<? extends ActivityHandler.DrawInfo> values) { if (this.myDrawInfoBuilder_ == null) {
/*       */           ensureMyDrawInfoIsMutable(); AbstractMessageLite.Builder.addAll(values, this.myDrawInfo_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.myDrawInfoBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this; }
/*       */       public Builder clearMyDrawInfo() { if (this.myDrawInfoBuilder_ == null) {
/*       */           this.myDrawInfo_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFF7;
/*       */           onChanged();
/*       */         } else {
/*       */           this.myDrawInfoBuilder_.clear();
/*       */         } 
/*       */         return this; }
/*       */       public Builder removeMyDrawInfo(int index) { if (this.myDrawInfoBuilder_ == null) {
/*       */           ensureMyDrawInfoIsMutable();
/*       */           this.myDrawInfo_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.myDrawInfoBuilder_.remove(index);
/*       */         } 
/*       */         return this; }
/*       */       public ActivityHandler.DrawInfo.Builder getMyDrawInfoBuilder(int index) { return (ActivityHandler.DrawInfo.Builder)getMyDrawInfoFieldBuilder().getBuilder(index); }
/*       */       public ActivityHandler.DrawInfoOrBuilder getMyDrawInfoOrBuilder(int index) { if (this.myDrawInfoBuilder_ == null)
/*       */           return this.myDrawInfo_.get(index); 
/*       */         return (ActivityHandler.DrawInfoOrBuilder)this.myDrawInfoBuilder_.getMessageOrBuilder(index); }
/*       */       public List<? extends ActivityHandler.DrawInfoOrBuilder> getMyDrawInfoOrBuilderList() { if (this.myDrawInfoBuilder_ != null)
/*       */           return this.myDrawInfoBuilder_.getMessageOrBuilderList(); 
/*       */         return Collections.unmodifiableList((List)this.myDrawInfo_); }
/*       */       public ActivityHandler.DrawInfo.Builder addMyDrawInfoBuilder() { return (ActivityHandler.DrawInfo.Builder)getMyDrawInfoFieldBuilder().addBuilder(ActivityHandler.DrawInfo.getDefaultInstance()); }
/*       */       public ActivityHandler.DrawInfo.Builder addMyDrawInfoBuilder(int index) { return (ActivityHandler.DrawInfo.Builder)getMyDrawInfoFieldBuilder().addBuilder(index, ActivityHandler.DrawInfo.getDefaultInstance()); }
/*       */       public List<ActivityHandler.DrawInfo.Builder> getMyDrawInfoBuilderList() { return getMyDrawInfoFieldBuilder().getBuilderList(); }
/*       */       private RepeatedFieldBuilder<ActivityHandler.DrawInfo, ActivityHandler.DrawInfo.Builder, ActivityHandler.DrawInfoOrBuilder> getMyDrawInfoFieldBuilder() { if (this.myDrawInfoBuilder_ == null) {
/*       */           this.myDrawInfoBuilder_ = new RepeatedFieldBuilder(this.myDrawInfo_, ((this.bitField0_ & 0x8) == 8), getParentForChildren(), isClean());
/*       */           this.myDrawInfo_ = null;
/*       */         } 
/*       */         return this.myDrawInfoBuilder_; }
/*       */       public boolean hasIsLow() { return ((this.bitField0_ & 0x10) == 16); }
/*       */       public int getIsLow() { return this.isLow_; }
/*       */       public Builder setIsLow(int value) { this.bitField0_ |= 0x10;
/*       */         this.isLow_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearIsLow() { this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.isLow_ = 0;
/*       */         onChanged();
/*       */         return this; } } }
/* 40212 */   public static final class DrawRankRequest extends GeneratedMessage implements DrawRankRequestOrBuilder { private static final DrawRankRequest defaultInstance = new DrawRankRequest(true); private final UnknownFieldSet unknownFields; private DrawRankRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private DrawRankRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static DrawRankRequest getDefaultInstance() { return defaultInstance; } public DrawRankRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private DrawRankRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_DrawRankRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_DrawRankRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(DrawRankRequest.class, Builder.class); } public static Parser<DrawRankRequest> PARSER = (Parser<DrawRankRequest>)new AbstractParser<DrawRankRequest>() { public ActivityHandler.DrawRankRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.DrawRankRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<DrawRankRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static DrawRankRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (DrawRankRequest)PARSER.parseFrom(data); } public static DrawRankRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DrawRankRequest)PARSER.parseFrom(data, extensionRegistry); } public static DrawRankRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (DrawRankRequest)PARSER.parseFrom(data); } public static DrawRankRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DrawRankRequest)PARSER.parseFrom(data, extensionRegistry); } public static DrawRankRequest parseFrom(InputStream input) throws IOException { return (DrawRankRequest)PARSER.parseFrom(input); } public static DrawRankRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawRankRequest)PARSER.parseFrom(input, extensionRegistry); } public static DrawRankRequest parseDelimitedFrom(InputStream input) throws IOException { return (DrawRankRequest)PARSER.parseDelimitedFrom(input); } public static DrawRankRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawRankRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static DrawRankRequest parseFrom(CodedInputStream input) throws IOException { return (DrawRankRequest)PARSER.parseFrom(input); } public static DrawRankRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawRankRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(DrawRankRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.DrawRankRequestOrBuilder {
/* 40213 */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_DrawRankRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_DrawRankRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.DrawRankRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.DrawRankRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_DrawRankRequest_descriptor; } public ActivityHandler.DrawRankRequest getDefaultInstanceForType() { return ActivityHandler.DrawRankRequest.getDefaultInstance(); } public ActivityHandler.DrawRankRequest build() { ActivityHandler.DrawRankRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.DrawRankRequest buildPartial() { ActivityHandler.DrawRankRequest result = new ActivityHandler.DrawRankRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.DrawRankRequest) return mergeFrom((ActivityHandler.DrawRankRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.DrawRankRequest other) { if (other == ActivityHandler.DrawRankRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.DrawRankRequest parsedMessage = null; try { parsedMessage = (ActivityHandler.DrawRankRequest)ActivityHandler.DrawRankRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.DrawRankRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */      }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class DrawRankInfo
/*       */     extends GeneratedMessage
/*       */     implements DrawRankInfoOrBuilder
/*       */   {
/*       */     private final UnknownFieldSet unknownFields;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private DrawRankInfo(GeneratedMessage.Builder<?> builder) {
/*       */       super(builder);
/*       */       this.memoizedIsInitialized = -1;
/*       */       this.memoizedSerializedSize = -1;
/*       */       this.unknownFields = builder.getUnknownFields();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private DrawRankInfo(boolean noInit) {
/*       */       this.memoizedIsInitialized = -1;
/*       */       this.memoizedSerializedSize = -1;
/*       */       this.unknownFields = UnknownFieldSet.getDefaultInstance();
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static DrawRankInfo getDefaultInstance() {
/*       */       return defaultInstance;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public DrawRankInfo getDefaultInstanceForType() {
/*       */       return defaultInstance;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public final UnknownFieldSet getUnknownFields() {
/*       */       return this.unknownFields;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private DrawRankInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       this.memoizedIsInitialized = -1;
/*       */       this.memoizedSerializedSize = -1;
/*       */       initFields();
/*       */       int mutable_bitField0_ = 0;
/*       */       UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
/*       */       try {
/*       */         boolean done = false;
/*       */         while (!done) {
/*       */           ByteString bs;
/*       */           int tag = input.readTag();
/*       */           switch (tag) {
/*       */             case 0:
/*       */               done = true;
/*       */               break;
/*       */             case 10:
/*       */               bs = input.readBytes();
/*       */               this.bitField0_ |= 0x1;
/*       */               this.playerName_ = bs;
/*       */               break;
/*       */             case 16:
/*       */               this.bitField0_ |= 0x2;
/*       */               this.playerPro_ = input.readInt32();
/*       */               break;
/*       */             case 24:
/*       */               this.bitField0_ |= 0x4;
/*       */               this.playerLevel_ = input.readInt32();
/*       */               break;
/*       */             case 32:
/*       */               this.bitField0_ |= 0x8;
/*       */               this.score_ = input.readInt32();
/*       */               break;
/*       */             case 42:
/*       */               if ((mutable_bitField0_ & 0x10) != 16) {
/*       */                 this.myItems_ = new ArrayList<>();
/*       */                 mutable_bitField0_ |= 0x10;
/*       */               } 
/*       */               this.myItems_.add(input.readMessage(Common.KeyValueStruct.PARSER, extensionRegistry));
/*       */               break;
/*       */           } 
/*       */         } 
/*       */       } catch (InvalidProtocolBufferException e) {
/*       */         throw e.setUnfinishedMessage(this);
/*       */       } catch (IOException e) {
/*       */         throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
/*       */       } finally {
/*       */         if ((mutable_bitField0_ & 0x10) == 16) {
/*       */           this.myItems_ = Collections.unmodifiableList(this.myItems_);
/*       */         }
/*       */         this.unknownFields = unknownFields.build();
/*       */         makeExtensionsImmutable();
/*       */       } 
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static final Descriptors.Descriptor getDescriptor() {
/*       */       return ActivityHandler.internal_static_pomelo_area_DrawRankInfo_descriptor;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */       return ActivityHandler.internal_static_pomelo_area_DrawRankInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(DrawRankInfo.class, Builder.class);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static Parser<DrawRankInfo> PARSER = (Parser<DrawRankInfo>)new AbstractParser<DrawRankInfo>()
/*       */       {
/*       */         public ActivityHandler.DrawRankInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */           return new ActivityHandler.DrawRankInfo(input, extensionRegistry);
/*       */         }
/*       */       };
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private int bitField0_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static final int PLAYERNAME_FIELD_NUMBER = 1;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private Object playerName_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static final int PLAYERPRO_FIELD_NUMBER = 2;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private int playerPro_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static final int PLAYERLEVEL_FIELD_NUMBER = 3;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private int playerLevel_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static final int SCORE_FIELD_NUMBER = 4;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private int score_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public static final int MYITEMS_FIELD_NUMBER = 5;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private List<Common.KeyValueStruct> myItems_;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private byte memoizedIsInitialized;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private int memoizedSerializedSize;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     private static final long serialVersionUID = 0L;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public Parser<DrawRankInfo> getParserForType() {
/*       */       return PARSER;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public boolean hasPlayerName() {
/*       */       return ((this.bitField0_ & 0x1) == 1);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public String getPlayerName() {
/*       */       Object ref = this.playerName_;
/*       */       if (ref instanceof String) {
/*       */         return (String)ref;
/*       */       }
/*       */       ByteString bs = (ByteString)ref;
/*       */       String s = bs.toStringUtf8();
/*       */       if (bs.isValidUtf8()) {
/*       */         this.playerName_ = s;
/*       */       }
/*       */       return s;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public ByteString getPlayerNameBytes() {
/*       */       Object ref = this.playerName_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.playerName_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public boolean hasPlayerPro() {
/*       */       return ((this.bitField0_ & 0x2) == 2);
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/*       */     public int getPlayerPro() {
/*       */       return this.playerPro_;
/*       */     }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/* 41334 */     private static final DrawRankInfo defaultInstance = new DrawRankInfo(true); public boolean hasPlayerLevel() { return ((this.bitField0_ & 0x4) == 4); } public int getPlayerLevel() { return this.playerLevel_; } public boolean hasScore() { return ((this.bitField0_ & 0x8) == 8); } public int getScore() { return this.score_; } public List<Common.KeyValueStruct> getMyItemsList() { return this.myItems_; } public List<? extends Common.KeyValueStructOrBuilder> getMyItemsOrBuilderList() { return (List)this.myItems_; } public int getMyItemsCount() { return this.myItems_.size(); } public Common.KeyValueStruct getMyItems(int index) { return this.myItems_.get(index); } public Common.KeyValueStructOrBuilder getMyItemsOrBuilder(int index) { return (Common.KeyValueStructOrBuilder)this.myItems_.get(index); } private void initFields() { this.playerName_ = ""; this.playerPro_ = 0; this.playerLevel_ = 0; this.score_ = 0; this.myItems_ = Collections.emptyList(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasPlayerName()) { this.memoizedIsInitialized = 0; return false; }  if (!hasPlayerPro()) { this.memoizedIsInitialized = 0; return false; }  if (!hasPlayerLevel()) { this.memoizedIsInitialized = 0; return false; }  if (!hasScore()) { this.memoizedIsInitialized = 0; return false; }  for (int i = 0; i < getMyItemsCount(); i++) { if (!getMyItems(i).isInitialized()) { this.memoizedIsInitialized = 0; return false; }  }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getPlayerNameBytes());  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.playerPro_);  if ((this.bitField0_ & 0x4) == 4) output.writeInt32(3, this.playerLevel_);  if ((this.bitField0_ & 0x8) == 8) output.writeInt32(4, this.score_);  for (int i = 0; i < this.myItems_.size(); i++) output.writeMessage(5, (MessageLite)this.myItems_.get(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getPlayerNameBytes());  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.playerPro_);  if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt32Size(3, this.playerLevel_);  if ((this.bitField0_ & 0x8) == 8) size += CodedOutputStream.computeInt32Size(4, this.score_);  for (int i = 0; i < this.myItems_.size(); i++) size += CodedOutputStream.computeMessageSize(5, (MessageLite)this.myItems_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static DrawRankInfo parseFrom(ByteString data) throws InvalidProtocolBufferException { return (DrawRankInfo)PARSER.parseFrom(data); } public static DrawRankInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DrawRankInfo)PARSER.parseFrom(data, extensionRegistry); } public static DrawRankInfo parseFrom(byte[] data) throws InvalidProtocolBufferException { return (DrawRankInfo)PARSER.parseFrom(data); } public static DrawRankInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DrawRankInfo)PARSER.parseFrom(data, extensionRegistry); } public static DrawRankInfo parseFrom(InputStream input) throws IOException { return (DrawRankInfo)PARSER.parseFrom(input); } public static DrawRankInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawRankInfo)PARSER.parseFrom(input, extensionRegistry); } public static DrawRankInfo parseDelimitedFrom(InputStream input) throws IOException { return (DrawRankInfo)PARSER.parseDelimitedFrom(input); } public static DrawRankInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawRankInfo)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static DrawRankInfo parseFrom(CodedInputStream input) throws IOException { return (DrawRankInfo)PARSER.parseFrom(input); } public static DrawRankInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawRankInfo)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(DrawRankInfo prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.DrawRankInfoOrBuilder {
/* 41335 */       private int bitField0_; private Object playerName_; private int playerPro_; private int playerLevel_; private int score_; private List<Common.KeyValueStruct> myItems_; private RepeatedFieldBuilder<Common.KeyValueStruct, Common.KeyValueStruct.Builder, Common.KeyValueStructOrBuilder> myItemsBuilder_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_DrawRankInfo_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_DrawRankInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.DrawRankInfo.class, Builder.class); } private Builder() { this.playerName_ = ""; this.myItems_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.playerName_ = ""; this.myItems_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.DrawRankInfo.alwaysUseFieldBuilders) getMyItemsFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.playerName_ = ""; this.bitField0_ &= 0xFFFFFFFE; this.playerPro_ = 0; this.bitField0_ &= 0xFFFFFFFD; this.playerLevel_ = 0; this.bitField0_ &= 0xFFFFFFFB; this.score_ = 0; this.bitField0_ &= 0xFFFFFFF7; if (this.myItemsBuilder_ == null) { this.myItems_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFEF; } else { this.myItemsBuilder_.clear(); }  return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_DrawRankInfo_descriptor; } public ActivityHandler.DrawRankInfo getDefaultInstanceForType() { return ActivityHandler.DrawRankInfo.getDefaultInstance(); } public ActivityHandler.DrawRankInfo build() { ActivityHandler.DrawRankInfo result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.DrawRankInfo buildPartial() { ActivityHandler.DrawRankInfo result = new ActivityHandler.DrawRankInfo(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.playerName_ = this.playerName_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.playerPro_ = this.playerPro_; if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;  result.playerLevel_ = this.playerLevel_; if ((from_bitField0_ & 0x8) == 8) to_bitField0_ |= 0x8;  result.score_ = this.score_; if (this.myItemsBuilder_ == null) { if ((this.bitField0_ & 0x10) == 16) { this.myItems_ = Collections.unmodifiableList(this.myItems_); this.bitField0_ &= 0xFFFFFFEF; }  result.myItems_ = this.myItems_; } else { result.myItems_ = this.myItemsBuilder_.build(); }  result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.DrawRankInfo) return mergeFrom((ActivityHandler.DrawRankInfo)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.DrawRankInfo other) { if (other == ActivityHandler.DrawRankInfo.getDefaultInstance()) return this;  if (other.hasPlayerName()) { this.bitField0_ |= 0x1; this.playerName_ = other.playerName_; onChanged(); }  if (other.hasPlayerPro()) setPlayerPro(other.getPlayerPro());  if (other.hasPlayerLevel()) setPlayerLevel(other.getPlayerLevel());  if (other.hasScore()) setScore(other.getScore());  if (this.myItemsBuilder_ == null) { if (!other.myItems_.isEmpty()) { if (this.myItems_.isEmpty()) { this.myItems_ = other.myItems_; this.bitField0_ &= 0xFFFFFFEF; } else { ensureMyItemsIsMutable(); this.myItems_.addAll(other.myItems_); }  onChanged(); }  } else if (!other.myItems_.isEmpty()) { if (this.myItemsBuilder_.isEmpty()) { this.myItemsBuilder_.dispose(); this.myItemsBuilder_ = null; this.myItems_ = other.myItems_; this.bitField0_ &= 0xFFFFFFEF; this.myItemsBuilder_ = ActivityHandler.DrawRankInfo.alwaysUseFieldBuilders ? getMyItemsFieldBuilder() : null; } else { this.myItemsBuilder_.addAllMessages(other.myItems_); }  }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasPlayerName()) return false;  if (!hasPlayerPro()) return false;  if (!hasPlayerLevel()) return false;  if (!hasScore()) return false;  for (int i = 0; i < getMyItemsCount(); i++) { if (!getMyItems(i).isInitialized()) return false;  }  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.DrawRankInfo parsedMessage = null; try { parsedMessage = (ActivityHandler.DrawRankInfo)ActivityHandler.DrawRankInfo.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.DrawRankInfo)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasPlayerName() { return ((this.bitField0_ & 0x1) == 1); } public String getPlayerName() { Object ref = this.playerName_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.playerName_ = s;  return s; }  return (String)ref; } public ByteString getPlayerNameBytes() { Object ref = this.playerName_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.playerName_ = b; return b; }  return (ByteString)ref; } public Builder setPlayerName(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.playerName_ = value; onChanged(); return this; } public Builder clearPlayerName() { this.bitField0_ &= 0xFFFFFFFE; this.playerName_ = ActivityHandler.DrawRankInfo.getDefaultInstance().getPlayerName(); onChanged(); return this; } public Builder setPlayerNameBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.playerName_ = value; onChanged(); return this; } public boolean hasPlayerPro() { return ((this.bitField0_ & 0x2) == 2); } public int getPlayerPro() { return this.playerPro_; } public Builder setPlayerPro(int value) { this.bitField0_ |= 0x2; this.playerPro_ = value; onChanged(); return this; } public Builder clearPlayerPro() { this.bitField0_ &= 0xFFFFFFFD; this.playerPro_ = 0; onChanged(); return this; } public boolean hasPlayerLevel() { return ((this.bitField0_ & 0x4) == 4); } public int getPlayerLevel() { return this.playerLevel_; } public Builder setPlayerLevel(int value) { this.bitField0_ |= 0x4; this.playerLevel_ = value; onChanged(); return this; } public Builder clearPlayerLevel() { this.bitField0_ &= 0xFFFFFFFB; this.playerLevel_ = 0; onChanged(); return this; } public boolean hasScore() { return ((this.bitField0_ & 0x8) == 8); } public int getScore() { return this.score_; } public Builder setScore(int value) { this.bitField0_ |= 0x8; this.score_ = value; onChanged(); return this; } public Builder clearScore() { this.bitField0_ &= 0xFFFFFFF7; this.score_ = 0; onChanged(); return this; } private void ensureMyItemsIsMutable() { if ((this.bitField0_ & 0x10) != 16) { this.myItems_ = new ArrayList<>(this.myItems_); this.bitField0_ |= 0x10; }  } public List<Common.KeyValueStruct> getMyItemsList() { if (this.myItemsBuilder_ == null) return Collections.unmodifiableList(this.myItems_);  return this.myItemsBuilder_.getMessageList(); } public int getMyItemsCount() { if (this.myItemsBuilder_ == null) return this.myItems_.size();  return this.myItemsBuilder_.getCount(); } public Common.KeyValueStruct getMyItems(int index) { if (this.myItemsBuilder_ == null) return this.myItems_.get(index);  return (Common.KeyValueStruct)this.myItemsBuilder_.getMessage(index); } public Builder setMyItems(int index, Common.KeyValueStruct value) { if (this.myItemsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureMyItemsIsMutable(); this.myItems_.set(index, value); onChanged(); } else { this.myItemsBuilder_.setMessage(index, (GeneratedMessage)value); }  return this; } public Builder setMyItems(int index, Common.KeyValueStruct.Builder builderForValue) { if (this.myItemsBuilder_ == null) { ensureMyItemsIsMutable(); this.myItems_.set(index, builderForValue.build()); onChanged(); } else { this.myItemsBuilder_.setMessage(index, (GeneratedMessage)builderForValue.build()); }  return this; } public Builder addMyItems(Common.KeyValueStruct value) { if (this.myItemsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureMyItemsIsMutable(); this.myItems_.add(value); onChanged(); } else { this.myItemsBuilder_.addMessage((GeneratedMessage)value); }  return this; } public Builder addMyItems(int index, Common.KeyValueStruct value) { if (this.myItemsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureMyItemsIsMutable(); this.myItems_.add(index, value); onChanged(); } else { this.myItemsBuilder_.addMessage(index, (GeneratedMessage)value); }  return this; } public Builder addMyItems(Common.KeyValueStruct.Builder builderForValue) { if (this.myItemsBuilder_ == null) { ensureMyItemsIsMutable(); this.myItems_.add(builderForValue.build()); onChanged(); } else { this.myItemsBuilder_.addMessage((GeneratedMessage)builderForValue.build()); }  return this; } public Builder addMyItems(int index, Common.KeyValueStruct.Builder builderForValue) { if (this.myItemsBuilder_ == null) { ensureMyItemsIsMutable(); this.myItems_.add(index, builderForValue.build()); onChanged(); } else { this.myItemsBuilder_.addMessage(index, (GeneratedMessage)builderForValue.build()); }  return this; } public Builder addAllMyItems(Iterable<? extends Common.KeyValueStruct> values) { if (this.myItemsBuilder_ == null) { ensureMyItemsIsMutable(); AbstractMessageLite.Builder.addAll(values, this.myItems_); onChanged(); } else { this.myItemsBuilder_.addAllMessages(values); }  return this; } public Builder clearMyItems() { if (this.myItemsBuilder_ == null) { this.myItems_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFEF; onChanged(); } else { this.myItemsBuilder_.clear(); }  return this; } public Builder removeMyItems(int index) { if (this.myItemsBuilder_ == null) { ensureMyItemsIsMutable(); this.myItems_.remove(index); onChanged(); } else { this.myItemsBuilder_.remove(index); }  return this; } public Common.KeyValueStruct.Builder getMyItemsBuilder(int index) { return (Common.KeyValueStruct.Builder)getMyItemsFieldBuilder().getBuilder(index); } public Common.KeyValueStructOrBuilder getMyItemsOrBuilder(int index) { if (this.myItemsBuilder_ == null) return (Common.KeyValueStructOrBuilder)this.myItems_.get(index);  return (Common.KeyValueStructOrBuilder)this.myItemsBuilder_.getMessageOrBuilder(index); } public List<? extends Common.KeyValueStructOrBuilder> getMyItemsOrBuilderList() { if (this.myItemsBuilder_ != null) return this.myItemsBuilder_.getMessageOrBuilderList();  return (List)Collections.unmodifiableList(this.myItems_); } public Common.KeyValueStruct.Builder addMyItemsBuilder() { return (Common.KeyValueStruct.Builder)getMyItemsFieldBuilder().addBuilder((GeneratedMessage)Common.KeyValueStruct.getDefaultInstance()); } public Common.KeyValueStruct.Builder addMyItemsBuilder(int index) { return (Common.KeyValueStruct.Builder)getMyItemsFieldBuilder().addBuilder(index, (GeneratedMessage)Common.KeyValueStruct.getDefaultInstance()); } public List<Common.KeyValueStruct.Builder> getMyItemsBuilderList() { return getMyItemsFieldBuilder().getBuilderList(); } private RepeatedFieldBuilder<Common.KeyValueStruct, Common.KeyValueStruct.Builder, Common.KeyValueStructOrBuilder> getMyItemsFieldBuilder() { if (this.myItemsBuilder_ == null) { this.myItemsBuilder_ = new RepeatedFieldBuilder(this.myItems_, ((this.bitField0_ & 0x10) == 16), getParentForChildren(), isClean()); this.myItems_ = null; }  return this.myItemsBuilder_; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class DrawRankResponse
/*       */     extends GeneratedMessage
/*       */     implements DrawRankResponseOrBuilder
/*       */   {
/* 42916 */     private static final DrawRankResponse defaultInstance = new DrawRankResponse(true); private final UnknownFieldSet unknownFields; private DrawRankResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private DrawRankResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static DrawRankResponse getDefaultInstance() { return defaultInstance; } public DrawRankResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private DrawRankResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 24: this.bitField0_ |= 0x4; this.myRank_ = input.readInt32(); break;case 32: this.bitField0_ |= 0x8; this.myScore_ = input.readInt32(); break;case 42: if ((mutable_bitField0_ & 0x10) != 16) { this.myItems_ = new ArrayList<>(); mutable_bitField0_ |= 0x10; }  this.myItems_.add(input.readMessage(Common.KeyValueStruct.PARSER, extensionRegistry)); break;case 50: if ((mutable_bitField0_ & 0x20) != 32) { this.rankInfo_ = new ArrayList<>(); mutable_bitField0_ |= 0x20; }  this.rankInfo_.add(input.readMessage(ActivityHandler.DrawRankInfo.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x10) == 16) this.myItems_ = Collections.unmodifiableList(this.myItems_);  if ((mutable_bitField0_ & 0x20) == 32) this.rankInfo_ = Collections.unmodifiableList(this.rankInfo_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_DrawRankResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_DrawRankResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(DrawRankResponse.class, Builder.class); } public static Parser<DrawRankResponse> PARSER = (Parser<DrawRankResponse>)new AbstractParser<DrawRankResponse>() { public ActivityHandler.DrawRankResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.DrawRankResponse(input, extensionRegistry); } }
/* 42917 */     ; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int MYRANK_FIELD_NUMBER = 3; private int myRank_; public static final int MYSCORE_FIELD_NUMBER = 4; private int myScore_; public static final int MYITEMS_FIELD_NUMBER = 5; private List<Common.KeyValueStruct> myItems_; public static final int RANKINFO_FIELD_NUMBER = 6; private List<ActivityHandler.DrawRankInfo> rankInfo_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<DrawRankResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public boolean hasMyRank() { return ((this.bitField0_ & 0x4) == 4); } static { defaultInstance.initFields(); } public int getMyRank() { return this.myRank_; }
/*       */     public boolean hasMyScore() { return ((this.bitField0_ & 0x8) == 8); }
/*       */     public int getMyScore() { return this.myScore_; }
/*       */     public List<Common.KeyValueStruct> getMyItemsList() { return this.myItems_; }
/*       */     public List<? extends Common.KeyValueStructOrBuilder> getMyItemsOrBuilderList() { return (List)this.myItems_; }
/*       */     public int getMyItemsCount() { return this.myItems_.size(); }
/*       */     public Common.KeyValueStruct getMyItems(int index) { return this.myItems_.get(index); }
/*       */     public Common.KeyValueStructOrBuilder getMyItemsOrBuilder(int index) { return (Common.KeyValueStructOrBuilder)this.myItems_.get(index); }
/*       */     public List<ActivityHandler.DrawRankInfo> getRankInfoList() { return this.rankInfo_; }
/*       */     public List<? extends ActivityHandler.DrawRankInfoOrBuilder> getRankInfoOrBuilderList() { return (List)this.rankInfo_; }
/*       */     public int getRankInfoCount() { return this.rankInfo_.size(); }
/*       */     public ActivityHandler.DrawRankInfo getRankInfo(int index) { return this.rankInfo_.get(index); }
/*       */     public ActivityHandler.DrawRankInfoOrBuilder getRankInfoOrBuilder(int index) { return this.rankInfo_.get(index); }
/*       */     private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.myRank_ = 0; this.myScore_ = 0; this.myItems_ = Collections.emptyList(); this.rankInfo_ = Collections.emptyList(); }
/*       */     public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1)
/*       */         return true;  if (isInitialized == 0)
/*       */         return false;  if (!hasS2CCode()) {
/*       */         this.memoizedIsInitialized = 0; return false;
/*       */       }  int i; for (i = 0; i < getMyItemsCount(); i++) {
/*       */         if (!getMyItems(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0; return false;
/*       */         } 
/*       */       }  for (i = 0; i < getRankInfoCount(); i++) {
/*       */         if (!getRankInfo(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0; return false;
/*       */         } 
/*       */       }  this.memoizedIsInitialized = 1; return true; }
/*       */     public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1)
/*       */         output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2)
/*       */         output.writeBytes(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4)
/*       */         output.writeInt32(3, this.myRank_);  if ((this.bitField0_ & 0x8) == 8)
/*       */         output.writeInt32(4, this.myScore_);  int i; for (i = 0; i < this.myItems_.size(); i++)
/*       */         output.writeMessage(5, (MessageLite)this.myItems_.get(i));  for (i = 0; i < this.rankInfo_.size(); i++)
/*       */         output.writeMessage(6, (MessageLite)this.rankInfo_.get(i));  getUnknownFields().writeTo(output); }
/*       */     public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1)
/*       */         return size;  size = 0; if ((this.bitField0_ & 0x1) == 1)
/*       */         size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2)
/*       */         size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4)
/*       */         size += CodedOutputStream.computeInt32Size(3, this.myRank_);  if ((this.bitField0_ & 0x8) == 8)
/*       */         size += CodedOutputStream.computeInt32Size(4, this.myScore_);  int i; for (i = 0; i < this.myItems_.size(); i++)
/*       */         size += CodedOutputStream.computeMessageSize(5, (MessageLite)this.myItems_.get(i));  for (i = 0; i < this.rankInfo_.size(); i++)
/*       */         size += CodedOutputStream.computeMessageSize(6, (MessageLite)this.rankInfo_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; }
/*       */     protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); }
/*       */     public static DrawRankResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (DrawRankResponse)PARSER.parseFrom(data); }
/*       */     public static DrawRankResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DrawRankResponse)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static DrawRankResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (DrawRankResponse)PARSER.parseFrom(data); }
/*       */     public static DrawRankResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DrawRankResponse)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static DrawRankResponse parseFrom(InputStream input) throws IOException { return (DrawRankResponse)PARSER.parseFrom(input); }
/*       */     public static DrawRankResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawRankResponse)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static DrawRankResponse parseDelimitedFrom(InputStream input) throws IOException { return (DrawRankResponse)PARSER.parseDelimitedFrom(input); }
/*       */     public static DrawRankResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawRankResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); }
/*       */     public static DrawRankResponse parseFrom(CodedInputStream input) throws IOException { return (DrawRankResponse)PARSER.parseFrom(input); }
/*       */     public static DrawRankResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawRankResponse)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static Builder newBuilder() { return Builder.create(); }
/*       */     public Builder newBuilderForType() { return newBuilder(); }
/*       */     public static Builder newBuilder(DrawRankResponse prototype) { return newBuilder().mergeFrom(prototype); }
/*       */     public Builder toBuilder() { return newBuilder(this); }
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; }
/*       */     public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.DrawRankResponseOrBuilder { private int bitField0_; private int s2CCode_; private Object s2CMsg_; private int myRank_; private int myScore_; private List<Common.KeyValueStruct> myItems_; private RepeatedFieldBuilder<Common.KeyValueStruct, Common.KeyValueStruct.Builder, Common.KeyValueStructOrBuilder> myItemsBuilder_; private List<ActivityHandler.DrawRankInfo> rankInfo_; private RepeatedFieldBuilder<ActivityHandler.DrawRankInfo, ActivityHandler.DrawRankInfo.Builder, ActivityHandler.DrawRankInfoOrBuilder> rankInfoBuilder_;
/*       */       public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_DrawRankResponse_descriptor; }
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_DrawRankResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.DrawRankResponse.class, Builder.class); }
/*       */       private Builder() { this.s2CMsg_ = ""; this.myItems_ = Collections.emptyList(); this.rankInfo_ = Collections.emptyList(); maybeForceBuilderInitialization(); }
/*       */       private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; this.myItems_ = Collections.emptyList(); this.rankInfo_ = Collections.emptyList(); maybeForceBuilderInitialization(); }
/*       */       private void maybeForceBuilderInitialization() { if (ActivityHandler.DrawRankResponse.alwaysUseFieldBuilders) {
/*       */           getMyItemsFieldBuilder(); getRankInfoFieldBuilder();
/*       */         }  }
/*       */       private static Builder create() { return new Builder(); }
/*       */       public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; this.myRank_ = 0; this.bitField0_ &= 0xFFFFFFFB; this.myScore_ = 0; this.bitField0_ &= 0xFFFFFFF7; if (this.myItemsBuilder_ == null) {
/*       */           this.myItems_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFEF;
/*       */         } else {
/*       */           this.myItemsBuilder_.clear();
/*       */         }  if (this.rankInfoBuilder_ == null) {
/*       */           this.rankInfo_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFDF;
/*       */         } else {
/*       */           this.rankInfoBuilder_.clear();
/*       */         }  return this; }
/*       */       public Builder clone() { return create().mergeFrom(buildPartial()); }
/*       */       public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_DrawRankResponse_descriptor; }
/*       */       public ActivityHandler.DrawRankResponse getDefaultInstanceForType() { return ActivityHandler.DrawRankResponse.getDefaultInstance(); }
/*       */       public ActivityHandler.DrawRankResponse build() { ActivityHandler.DrawRankResponse result = buildPartial(); if (!result.isInitialized())
/*       */           throw newUninitializedMessageException(result);  return result; }
/*       */       public ActivityHandler.DrawRankResponse buildPartial() { ActivityHandler.DrawRankResponse result = new ActivityHandler.DrawRankResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1)
/*       */           to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2)
/*       */           to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if ((from_bitField0_ & 0x4) == 4)
/*       */           to_bitField0_ |= 0x4;  result.myRank_ = this.myRank_; if ((from_bitField0_ & 0x8) == 8)
/*       */           to_bitField0_ |= 0x8;  result.myScore_ = this.myScore_; if (this.myItemsBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x10) == 16) {
/*       */             this.myItems_ = Collections.unmodifiableList(this.myItems_); this.bitField0_ &= 0xFFFFFFEF;
/*       */           }  result.myItems_ = this.myItems_;
/*       */         } else {
/*       */           result.myItems_ = this.myItemsBuilder_.build();
/*       */         }  if (this.rankInfoBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x20) == 32) {
/*       */             this.rankInfo_ = Collections.unmodifiableList(this.rankInfo_); this.bitField0_ &= 0xFFFFFFDF;
/*       */           }  result.rankInfo_ = this.rankInfo_;
/*       */         } else {
/*       */           result.rankInfo_ = this.rankInfoBuilder_.build();
/*       */         }  result.bitField0_ = to_bitField0_; onBuilt(); return result; }
/*       */       public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.DrawRankResponse)
/*       */           return mergeFrom((ActivityHandler.DrawRankResponse)other);  super.mergeFrom(other); return this; }
/*       */       public Builder mergeFrom(ActivityHandler.DrawRankResponse other) { if (other == ActivityHandler.DrawRankResponse.getDefaultInstance())
/*       */           return this;  if (other.hasS2CCode())
/*       */           setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) {
/*       */           this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged();
/*       */         }  if (other.hasMyRank())
/*       */           setMyRank(other.getMyRank());  if (other.hasMyScore())
/*       */           setMyScore(other.getMyScore());  if (this.myItemsBuilder_ == null) {
/*       */           if (!other.myItems_.isEmpty()) {
/*       */             if (this.myItems_.isEmpty()) {
/*       */               this.myItems_ = other.myItems_; this.bitField0_ &= 0xFFFFFFEF;
/*       */             } else {
/*       */               ensureMyItemsIsMutable(); this.myItems_.addAll(other.myItems_);
/*       */             }  onChanged();
/*       */           } 
/*       */         } else if (!other.myItems_.isEmpty()) {
/*       */           if (this.myItemsBuilder_.isEmpty()) {
/*       */             this.myItemsBuilder_.dispose(); this.myItemsBuilder_ = null; this.myItems_ = other.myItems_; this.bitField0_ &= 0xFFFFFFEF;
/*       */             this.myItemsBuilder_ = ActivityHandler.DrawRankResponse.alwaysUseFieldBuilders ? getMyItemsFieldBuilder() : null;
/*       */           } else {
/*       */             this.myItemsBuilder_.addAllMessages(other.myItems_);
/*       */           } 
/*       */         } 
/*       */         if (this.rankInfoBuilder_ == null) {
/*       */           if (!other.rankInfo_.isEmpty()) {
/*       */             if (this.rankInfo_.isEmpty()) {
/*       */               this.rankInfo_ = other.rankInfo_;
/*       */               this.bitField0_ &= 0xFFFFFFDF;
/*       */             } else {
/*       */               ensureRankInfoIsMutable();
/*       */               this.rankInfo_.addAll(other.rankInfo_);
/*       */             } 
/*       */             onChanged();
/*       */           } 
/*       */         } else if (!other.rankInfo_.isEmpty()) {
/*       */           if (this.rankInfoBuilder_.isEmpty()) {
/*       */             this.rankInfoBuilder_.dispose();
/*       */             this.rankInfoBuilder_ = null;
/*       */             this.rankInfo_ = other.rankInfo_;
/*       */             this.bitField0_ &= 0xFFFFFFDF;
/*       */             this.rankInfoBuilder_ = ActivityHandler.DrawRankResponse.alwaysUseFieldBuilders ? getRankInfoFieldBuilder() : null;
/*       */           } else {
/*       */             this.rankInfoBuilder_.addAllMessages(other.rankInfo_);
/*       */           } 
/*       */         } 
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this; }
/*       */       public final boolean isInitialized() { if (!hasS2CCode())
/*       */           return false; 
/*       */         int i;
/*       */         for (i = 0; i < getMyItemsCount(); i++) {
/*       */           if (!getMyItems(i).isInitialized())
/*       */             return false; 
/*       */         } 
/*       */         for (i = 0; i < getRankInfoCount(); i++) {
/*       */           if (!getRankInfo(i).isInitialized())
/*       */             return false; 
/*       */         } 
/*       */         return true; }
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.DrawRankResponse parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (ActivityHandler.DrawRankResponse)ActivityHandler.DrawRankResponse.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (ActivityHandler.DrawRankResponse)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null)
/*       */             mergeFrom(parsedMessage); 
/*       */         } 
/*       */         return this; }
/*       */       public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); }
/*       */       public int getS2CCode() { return this.s2CCode_; }
/*       */       public Builder setS2CCode(int value) { this.bitField0_ |= 0x1;
/*       */         this.s2CCode_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CCode_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); }
/*       */       public String getS2CMsg() { Object ref = this.s2CMsg_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.s2CMsg_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref; }
/*       */       public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CMsg_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref; }
/*       */       public Builder setS2CMsg(String value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.s2CMsg_ = ActivityHandler.DrawRankResponse.getDefaultInstance().getS2CMsg();
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder setS2CMsgBytes(ByteString value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasMyRank() { return ((this.bitField0_ & 0x4) == 4); }
/*       */       public int getMyRank() { return this.myRank_; }
/*       */       public Builder setMyRank(int value) { this.bitField0_ |= 0x4;
/*       */         this.myRank_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearMyRank() { this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.myRank_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasMyScore() { return ((this.bitField0_ & 0x8) == 8); }
/*       */       public int getMyScore() { return this.myScore_; }
/*       */       public Builder setMyScore(int value) { this.bitField0_ |= 0x8;
/*       */         this.myScore_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearMyScore() { this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.myScore_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       private void ensureMyItemsIsMutable() { if ((this.bitField0_ & 0x10) != 16) {
/*       */           this.myItems_ = new ArrayList<>(this.myItems_);
/*       */           this.bitField0_ |= 0x10;
/*       */         }  }
/*       */       public List<Common.KeyValueStruct> getMyItemsList() { if (this.myItemsBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.myItems_); 
/*       */         return this.myItemsBuilder_.getMessageList(); }
/*       */       public int getMyItemsCount() { if (this.myItemsBuilder_ == null)
/*       */           return this.myItems_.size(); 
/*       */         return this.myItemsBuilder_.getCount(); }
/*       */       public Common.KeyValueStruct getMyItems(int index) { if (this.myItemsBuilder_ == null)
/*       */           return this.myItems_.get(index); 
/*       */         return (Common.KeyValueStruct)this.myItemsBuilder_.getMessage(index); }
/*       */       public Builder setMyItems(int index, Common.KeyValueStruct value) { if (this.myItemsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureMyItemsIsMutable();
/*       */           this.myItems_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.myItemsBuilder_.setMessage(index, (GeneratedMessage)value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder setMyItems(int index, Common.KeyValueStruct.Builder builderForValue) { if (this.myItemsBuilder_ == null) {
/*       */           ensureMyItemsIsMutable();
/*       */           this.myItems_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.myItemsBuilder_.setMessage(index, (GeneratedMessage)builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addMyItems(Common.KeyValueStruct value) { if (this.myItemsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureMyItemsIsMutable();
/*       */           this.myItems_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.myItemsBuilder_.addMessage((GeneratedMessage)value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder addMyItems(int index, Common.KeyValueStruct value) { if (this.myItemsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureMyItemsIsMutable();
/*       */           this.myItems_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.myItemsBuilder_.addMessage(index, (GeneratedMessage)value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder addMyItems(Common.KeyValueStruct.Builder builderForValue) { if (this.myItemsBuilder_ == null) {
/*       */           ensureMyItemsIsMutable();
/*       */           this.myItems_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.myItemsBuilder_.addMessage((GeneratedMessage)builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addMyItems(int index, Common.KeyValueStruct.Builder builderForValue) { if (this.myItemsBuilder_ == null) {
/*       */           ensureMyItemsIsMutable();
/*       */           this.myItems_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.myItemsBuilder_.addMessage(index, (GeneratedMessage)builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addAllMyItems(Iterable<? extends Common.KeyValueStruct> values) { if (this.myItemsBuilder_ == null) {
/*       */           ensureMyItemsIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.myItems_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.myItemsBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this; }
/*       */       public Builder clearMyItems() { if (this.myItemsBuilder_ == null) {
/*       */           this.myItems_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFEF;
/*       */           onChanged();
/*       */         } else {
/*       */           this.myItemsBuilder_.clear();
/*       */         } 
/*       */         return this; }
/*       */       public Builder removeMyItems(int index) { if (this.myItemsBuilder_ == null) {
/*       */           ensureMyItemsIsMutable();
/*       */           this.myItems_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.myItemsBuilder_.remove(index);
/*       */         } 
/*       */         return this; }
/*       */       public Common.KeyValueStruct.Builder getMyItemsBuilder(int index) { return (Common.KeyValueStruct.Builder)getMyItemsFieldBuilder().getBuilder(index); }
/*       */       public Common.KeyValueStructOrBuilder getMyItemsOrBuilder(int index) { if (this.myItemsBuilder_ == null)
/*       */           return (Common.KeyValueStructOrBuilder)this.myItems_.get(index); 
/*       */         return (Common.KeyValueStructOrBuilder)this.myItemsBuilder_.getMessageOrBuilder(index); }
/*       */       public List<? extends Common.KeyValueStructOrBuilder> getMyItemsOrBuilderList() { if (this.myItemsBuilder_ != null)
/*       */           return this.myItemsBuilder_.getMessageOrBuilderList(); 
/*       */         return (List)Collections.unmodifiableList(this.myItems_); }
/*       */       public Common.KeyValueStruct.Builder addMyItemsBuilder() { return (Common.KeyValueStruct.Builder)getMyItemsFieldBuilder().addBuilder((GeneratedMessage)Common.KeyValueStruct.getDefaultInstance()); }
/*       */       public Common.KeyValueStruct.Builder addMyItemsBuilder(int index) { return (Common.KeyValueStruct.Builder)getMyItemsFieldBuilder().addBuilder(index, (GeneratedMessage)Common.KeyValueStruct.getDefaultInstance()); }
/*       */       public List<Common.KeyValueStruct.Builder> getMyItemsBuilderList() { return getMyItemsFieldBuilder().getBuilderList(); }
/*       */       private RepeatedFieldBuilder<Common.KeyValueStruct, Common.KeyValueStruct.Builder, Common.KeyValueStructOrBuilder> getMyItemsFieldBuilder() { if (this.myItemsBuilder_ == null) {
/*       */           this.myItemsBuilder_ = new RepeatedFieldBuilder(this.myItems_, ((this.bitField0_ & 0x10) == 16), getParentForChildren(), isClean());
/*       */           this.myItems_ = null;
/*       */         } 
/*       */         return this.myItemsBuilder_; }
/*       */       private void ensureRankInfoIsMutable() { if ((this.bitField0_ & 0x20) != 32) {
/*       */           this.rankInfo_ = new ArrayList<>(this.rankInfo_);
/*       */           this.bitField0_ |= 0x20;
/*       */         }  }
/*       */       public List<ActivityHandler.DrawRankInfo> getRankInfoList() { if (this.rankInfoBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.rankInfo_); 
/*       */         return this.rankInfoBuilder_.getMessageList(); }
/*       */       public int getRankInfoCount() { if (this.rankInfoBuilder_ == null)
/*       */           return this.rankInfo_.size(); 
/*       */         return this.rankInfoBuilder_.getCount(); }
/*       */       public ActivityHandler.DrawRankInfo getRankInfo(int index) { if (this.rankInfoBuilder_ == null)
/*       */           return this.rankInfo_.get(index); 
/*       */         return (ActivityHandler.DrawRankInfo)this.rankInfoBuilder_.getMessage(index); }
/*       */       public Builder setRankInfo(int index, ActivityHandler.DrawRankInfo value) { if (this.rankInfoBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureRankInfoIsMutable();
/*       */           this.rankInfo_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.rankInfoBuilder_.setMessage(index, value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder setRankInfo(int index, ActivityHandler.DrawRankInfo.Builder builderForValue) { if (this.rankInfoBuilder_ == null) {
/*       */           ensureRankInfoIsMutable();
/*       */           this.rankInfo_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.rankInfoBuilder_.setMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addRankInfo(ActivityHandler.DrawRankInfo value) { if (this.rankInfoBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureRankInfoIsMutable();
/*       */           this.rankInfo_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.rankInfoBuilder_.addMessage(value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder addRankInfo(int index, ActivityHandler.DrawRankInfo value) { if (this.rankInfoBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureRankInfoIsMutable();
/*       */           this.rankInfo_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.rankInfoBuilder_.addMessage(index, value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder addRankInfo(ActivityHandler.DrawRankInfo.Builder builderForValue) { if (this.rankInfoBuilder_ == null) {
/*       */           ensureRankInfoIsMutable();
/*       */           this.rankInfo_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.rankInfoBuilder_.addMessage(builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addRankInfo(int index, ActivityHandler.DrawRankInfo.Builder builderForValue) { if (this.rankInfoBuilder_ == null) {
/*       */           ensureRankInfoIsMutable();
/*       */           this.rankInfo_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.rankInfoBuilder_.addMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addAllRankInfo(Iterable<? extends ActivityHandler.DrawRankInfo> values) { if (this.rankInfoBuilder_ == null) {
/*       */           ensureRankInfoIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.rankInfo_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.rankInfoBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this; }
/*       */       public Builder clearRankInfo() { if (this.rankInfoBuilder_ == null) {
/*       */           this.rankInfo_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFDF;
/*       */           onChanged();
/*       */         } else {
/*       */           this.rankInfoBuilder_.clear();
/*       */         } 
/*       */         return this; }
/*       */       public Builder removeRankInfo(int index) { if (this.rankInfoBuilder_ == null) {
/*       */           ensureRankInfoIsMutable();
/*       */           this.rankInfo_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.rankInfoBuilder_.remove(index);
/*       */         } 
/*       */         return this; }
/*       */       public ActivityHandler.DrawRankInfo.Builder getRankInfoBuilder(int index) { return (ActivityHandler.DrawRankInfo.Builder)getRankInfoFieldBuilder().getBuilder(index); }
/*       */       public ActivityHandler.DrawRankInfoOrBuilder getRankInfoOrBuilder(int index) { if (this.rankInfoBuilder_ == null)
/*       */           return this.rankInfo_.get(index); 
/*       */         return (ActivityHandler.DrawRankInfoOrBuilder)this.rankInfoBuilder_.getMessageOrBuilder(index); }
/*       */       public List<? extends ActivityHandler.DrawRankInfoOrBuilder> getRankInfoOrBuilderList() { if (this.rankInfoBuilder_ != null)
/*       */           return this.rankInfoBuilder_.getMessageOrBuilderList(); 
/*       */         return Collections.unmodifiableList((List)this.rankInfo_); }
/*       */       public ActivityHandler.DrawRankInfo.Builder addRankInfoBuilder() { return (ActivityHandler.DrawRankInfo.Builder)getRankInfoFieldBuilder().addBuilder(ActivityHandler.DrawRankInfo.getDefaultInstance()); }
/*       */       public ActivityHandler.DrawRankInfo.Builder addRankInfoBuilder(int index) { return (ActivityHandler.DrawRankInfo.Builder)getRankInfoFieldBuilder().addBuilder(index, ActivityHandler.DrawRankInfo.getDefaultInstance()); }
/*       */       public List<ActivityHandler.DrawRankInfo.Builder> getRankInfoBuilderList() { return getRankInfoFieldBuilder().getBuilderList(); }
/*       */       private RepeatedFieldBuilder<ActivityHandler.DrawRankInfo, ActivityHandler.DrawRankInfo.Builder, ActivityHandler.DrawRankInfoOrBuilder> getRankInfoFieldBuilder() { if (this.rankInfoBuilder_ == null) {
/*       */           this.rankInfoBuilder_ = new RepeatedFieldBuilder(this.rankInfo_, ((this.bitField0_ & 0x20) == 32), getParentForChildren(), isClean());
/*       */           this.rankInfo_ = null;
/*       */         } 
/*       */         return this.rankInfoBuilder_; } } }
/* 43361 */   public static final class DrawSetLowRequest extends GeneratedMessage implements DrawSetLowRequestOrBuilder { private static final DrawSetLowRequest defaultInstance = new DrawSetLowRequest(true); private final UnknownFieldSet unknownFields; private DrawSetLowRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private DrawSetLowRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static DrawSetLowRequest getDefaultInstance() { return defaultInstance; } public DrawSetLowRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private DrawSetLowRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.isLow_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_DrawSetLowRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_DrawSetLowRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(DrawSetLowRequest.class, Builder.class); } public static Parser<DrawSetLowRequest> PARSER = (Parser<DrawSetLowRequest>)new AbstractParser<DrawSetLowRequest>() { public ActivityHandler.DrawSetLowRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.DrawSetLowRequest(input, extensionRegistry); } }; private int bitField0_; public static final int ISLOW_FIELD_NUMBER = 1; private int isLow_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<DrawSetLowRequest> getParserForType() { return PARSER; } public boolean hasIsLow() { return ((this.bitField0_ & 0x1) == 1); } public int getIsLow() { return this.isLow_; } private void initFields() { this.isLow_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasIsLow()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.isLow_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.isLow_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static DrawSetLowRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (DrawSetLowRequest)PARSER.parseFrom(data); } public static DrawSetLowRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DrawSetLowRequest)PARSER.parseFrom(data, extensionRegistry); } public static DrawSetLowRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (DrawSetLowRequest)PARSER.parseFrom(data); } public static DrawSetLowRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DrawSetLowRequest)PARSER.parseFrom(data, extensionRegistry); } public static DrawSetLowRequest parseFrom(InputStream input) throws IOException { return (DrawSetLowRequest)PARSER.parseFrom(input); } public static DrawSetLowRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawSetLowRequest)PARSER.parseFrom(input, extensionRegistry); } public static DrawSetLowRequest parseDelimitedFrom(InputStream input) throws IOException { return (DrawSetLowRequest)PARSER.parseDelimitedFrom(input); } public static DrawSetLowRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawSetLowRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static DrawSetLowRequest parseFrom(CodedInputStream input) throws IOException { return (DrawSetLowRequest)PARSER.parseFrom(input); } public static DrawSetLowRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawSetLowRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(DrawSetLowRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.DrawSetLowRequestOrBuilder {
/* 43362 */       private int bitField0_; private int isLow_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_DrawSetLowRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_DrawSetLowRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.DrawSetLowRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.DrawSetLowRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.isLow_ = 0; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_DrawSetLowRequest_descriptor; } public ActivityHandler.DrawSetLowRequest getDefaultInstanceForType() { return ActivityHandler.DrawSetLowRequest.getDefaultInstance(); } public ActivityHandler.DrawSetLowRequest build() { ActivityHandler.DrawSetLowRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.DrawSetLowRequest buildPartial() { ActivityHandler.DrawSetLowRequest result = new ActivityHandler.DrawSetLowRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.isLow_ = this.isLow_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.DrawSetLowRequest) return mergeFrom((ActivityHandler.DrawSetLowRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.DrawSetLowRequest other) { if (other == ActivityHandler.DrawSetLowRequest.getDefaultInstance()) return this;  if (other.hasIsLow()) setIsLow(other.getIsLow());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasIsLow()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.DrawSetLowRequest parsedMessage = null; try { parsedMessage = (ActivityHandler.DrawSetLowRequest)ActivityHandler.DrawSetLowRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.DrawSetLowRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasIsLow() { return ((this.bitField0_ & 0x1) == 1); } public int getIsLow() { return this.isLow_; } public Builder setIsLow(int value) { this.bitField0_ |= 0x1; this.isLow_ = value; onChanged(); return this; } public Builder clearIsLow() { this.bitField0_ &= 0xFFFFFFFE; this.isLow_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */      }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class DrawSetLowResponse
/*       */     extends GeneratedMessage
/*       */     implements DrawSetLowResponseOrBuilder
/*       */   {
/* 43931 */     private static final DrawSetLowResponse defaultInstance = new DrawSetLowResponse(true); private final UnknownFieldSet unknownFields; private DrawSetLowResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private DrawSetLowResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static DrawSetLowResponse getDefaultInstance() { return defaultInstance; } public DrawSetLowResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private DrawSetLowResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_DrawSetLowResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_DrawSetLowResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(DrawSetLowResponse.class, Builder.class); } public static Parser<DrawSetLowResponse> PARSER = (Parser<DrawSetLowResponse>)new AbstractParser<DrawSetLowResponse>() { public ActivityHandler.DrawSetLowResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.DrawSetLowResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<DrawSetLowResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static DrawSetLowResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (DrawSetLowResponse)PARSER.parseFrom(data); } public static DrawSetLowResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DrawSetLowResponse)PARSER.parseFrom(data, extensionRegistry); } public static DrawSetLowResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (DrawSetLowResponse)PARSER.parseFrom(data); } public static DrawSetLowResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DrawSetLowResponse)PARSER.parseFrom(data, extensionRegistry); } public static DrawSetLowResponse parseFrom(InputStream input) throws IOException { return (DrawSetLowResponse)PARSER.parseFrom(input); } public static DrawSetLowResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawSetLowResponse)PARSER.parseFrom(input, extensionRegistry); } public static DrawSetLowResponse parseDelimitedFrom(InputStream input) throws IOException { return (DrawSetLowResponse)PARSER.parseDelimitedFrom(input); } public static DrawSetLowResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawSetLowResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static DrawSetLowResponse parseFrom(CodedInputStream input) throws IOException { return (DrawSetLowResponse)PARSER.parseFrom(input); } public static DrawSetLowResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawSetLowResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(DrawSetLowResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.DrawSetLowResponseOrBuilder {
/* 43932 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_DrawSetLowResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_DrawSetLowResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.DrawSetLowResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.DrawSetLowResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_DrawSetLowResponse_descriptor; } public ActivityHandler.DrawSetLowResponse getDefaultInstanceForType() { return ActivityHandler.DrawSetLowResponse.getDefaultInstance(); } public ActivityHandler.DrawSetLowResponse build() { ActivityHandler.DrawSetLowResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.DrawSetLowResponse buildPartial() { ActivityHandler.DrawSetLowResponse result = new ActivityHandler.DrawSetLowResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.DrawSetLowResponse) return mergeFrom((ActivityHandler.DrawSetLowResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.DrawSetLowResponse other) { if (other == ActivityHandler.DrawSetLowResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.DrawSetLowResponse parsedMessage = null; try { parsedMessage = (ActivityHandler.DrawSetLowResponse)ActivityHandler.DrawSetLowResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.DrawSetLowResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = ActivityHandler.DrawSetLowResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class DrawAwardRequest
/*       */     extends GeneratedMessage
/*       */     implements DrawAwardRequestOrBuilder
/*       */   {
/* 44494 */     private static final DrawAwardRequest defaultInstance = new DrawAwardRequest(true); private final UnknownFieldSet unknownFields; private DrawAwardRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private DrawAwardRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static DrawAwardRequest getDefaultInstance() { return defaultInstance; } public DrawAwardRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private DrawAwardRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.type_ = input.readInt32(); break;case 16: this.bitField0_ |= 0x2; this.useItem_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_DrawAwardRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_DrawAwardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(DrawAwardRequest.class, Builder.class); } public static Parser<DrawAwardRequest> PARSER = (Parser<DrawAwardRequest>)new AbstractParser<DrawAwardRequest>() { public ActivityHandler.DrawAwardRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.DrawAwardRequest(input, extensionRegistry); } }; private int bitField0_; public static final int TYPE_FIELD_NUMBER = 1; private int type_; public static final int USEITEM_FIELD_NUMBER = 2; private int useItem_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<DrawAwardRequest> getParserForType() { return PARSER; } public boolean hasType() { return ((this.bitField0_ & 0x1) == 1); } public int getType() { return this.type_; } public boolean hasUseItem() { return ((this.bitField0_ & 0x2) == 2); } public int getUseItem() { return this.useItem_; } private void initFields() { this.type_ = 0; this.useItem_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasType()) { this.memoizedIsInitialized = 0; return false; }  if (!hasUseItem()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.type_);  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.useItem_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.type_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.useItem_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static DrawAwardRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (DrawAwardRequest)PARSER.parseFrom(data); } public static DrawAwardRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DrawAwardRequest)PARSER.parseFrom(data, extensionRegistry); } public static DrawAwardRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (DrawAwardRequest)PARSER.parseFrom(data); } public static DrawAwardRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DrawAwardRequest)PARSER.parseFrom(data, extensionRegistry); } public static DrawAwardRequest parseFrom(InputStream input) throws IOException { return (DrawAwardRequest)PARSER.parseFrom(input); } public static DrawAwardRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawAwardRequest)PARSER.parseFrom(input, extensionRegistry); } public static DrawAwardRequest parseDelimitedFrom(InputStream input) throws IOException { return (DrawAwardRequest)PARSER.parseDelimitedFrom(input); } public static DrawAwardRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawAwardRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static DrawAwardRequest parseFrom(CodedInputStream input) throws IOException { return (DrawAwardRequest)PARSER.parseFrom(input); } public static DrawAwardRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawAwardRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(DrawAwardRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.DrawAwardRequestOrBuilder {
/* 44495 */       private int bitField0_; private int type_; private int useItem_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_DrawAwardRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_DrawAwardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.DrawAwardRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.DrawAwardRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.type_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.useItem_ = 0; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_DrawAwardRequest_descriptor; } public ActivityHandler.DrawAwardRequest getDefaultInstanceForType() { return ActivityHandler.DrawAwardRequest.getDefaultInstance(); } public ActivityHandler.DrawAwardRequest build() { ActivityHandler.DrawAwardRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.DrawAwardRequest buildPartial() { ActivityHandler.DrawAwardRequest result = new ActivityHandler.DrawAwardRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.type_ = this.type_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.useItem_ = this.useItem_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.DrawAwardRequest) return mergeFrom((ActivityHandler.DrawAwardRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.DrawAwardRequest other) { if (other == ActivityHandler.DrawAwardRequest.getDefaultInstance()) return this;  if (other.hasType()) setType(other.getType());  if (other.hasUseItem()) setUseItem(other.getUseItem());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasType()) return false;  if (!hasUseItem()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.DrawAwardRequest parsedMessage = null; try { parsedMessage = (ActivityHandler.DrawAwardRequest)ActivityHandler.DrawAwardRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.DrawAwardRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasType() { return ((this.bitField0_ & 0x1) == 1); } public int getType() { return this.type_; } public Builder setType(int value) { this.bitField0_ |= 0x1; this.type_ = value; onChanged(); return this; } public Builder clearType() { this.bitField0_ &= 0xFFFFFFFE; this.type_ = 0; onChanged(); return this; } public boolean hasUseItem() { return ((this.bitField0_ & 0x2) == 2); } public int getUseItem() { return this.useItem_; } public Builder setUseItem(int value) { this.bitField0_ |= 0x2; this.useItem_ = value; onChanged(); return this; } public Builder clearUseItem() { this.bitField0_ &= 0xFFFFFFFD; this.useItem_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class DrawAwardResponse
/*       */     extends GeneratedMessage
/*       */     implements DrawAwardResponseOrBuilder
/*       */   {
/* 45548 */     private static final DrawAwardResponse defaultInstance = new DrawAwardResponse(true); private final UnknownFieldSet unknownFields; private DrawAwardResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private DrawAwardResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static DrawAwardResponse getDefaultInstance() { return defaultInstance; } public DrawAwardResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private DrawAwardResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: if ((mutable_bitField0_ & 0x4) != 4) { this.awards_ = new ArrayList<>(); mutable_bitField0_ |= 0x4; }  this.awards_.add(input.readMessage(Common.KeyValueStruct.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x4) == 4) this.awards_ = Collections.unmodifiableList(this.awards_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_DrawAwardResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_DrawAwardResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(DrawAwardResponse.class, Builder.class); } public static Parser<DrawAwardResponse> PARSER = (Parser<DrawAwardResponse>)new AbstractParser<DrawAwardResponse>() { public ActivityHandler.DrawAwardResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new ActivityHandler.DrawAwardResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int AWARDS_FIELD_NUMBER = 3; private List<Common.KeyValueStruct> awards_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<DrawAwardResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public List<Common.KeyValueStruct> getAwardsList() { return this.awards_; } public List<? extends Common.KeyValueStructOrBuilder> getAwardsOrBuilderList() { return (List)this.awards_; } public int getAwardsCount() { return this.awards_.size(); } public Common.KeyValueStruct getAwards(int index) { return this.awards_.get(index); } public Common.KeyValueStructOrBuilder getAwardsOrBuilder(int index) { return (Common.KeyValueStructOrBuilder)this.awards_.get(index); } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.awards_ = Collections.emptyList(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  for (int i = 0; i < getAwardsCount(); i++) { if (!getAwards(i).isInitialized()) { this.memoizedIsInitialized = 0; return false; }  }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  for (int i = 0; i < this.awards_.size(); i++) output.writeMessage(3, (MessageLite)this.awards_.get(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  for (int i = 0; i < this.awards_.size(); i++) size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.awards_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static DrawAwardResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (DrawAwardResponse)PARSER.parseFrom(data); } public static DrawAwardResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DrawAwardResponse)PARSER.parseFrom(data, extensionRegistry); } public static DrawAwardResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (DrawAwardResponse)PARSER.parseFrom(data); } public static DrawAwardResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DrawAwardResponse)PARSER.parseFrom(data, extensionRegistry); } public static DrawAwardResponse parseFrom(InputStream input) throws IOException { return (DrawAwardResponse)PARSER.parseFrom(input); } public static DrawAwardResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawAwardResponse)PARSER.parseFrom(input, extensionRegistry); } public static DrawAwardResponse parseDelimitedFrom(InputStream input) throws IOException { return (DrawAwardResponse)PARSER.parseDelimitedFrom(input); } public static DrawAwardResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawAwardResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static DrawAwardResponse parseFrom(CodedInputStream input) throws IOException { return (DrawAwardResponse)PARSER.parseFrom(input); } public static DrawAwardResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DrawAwardResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(DrawAwardResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityHandler.DrawAwardResponseOrBuilder {
/* 45549 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; private List<Common.KeyValueStruct> awards_; private RepeatedFieldBuilder<Common.KeyValueStruct, Common.KeyValueStruct.Builder, Common.KeyValueStructOrBuilder> awardsBuilder_; public static final Descriptors.Descriptor getDescriptor() { return ActivityHandler.internal_static_pomelo_area_DrawAwardResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return ActivityHandler.internal_static_pomelo_area_DrawAwardResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityHandler.DrawAwardResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; this.awards_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; this.awards_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (ActivityHandler.DrawAwardResponse.alwaysUseFieldBuilders) getAwardsFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; if (this.awardsBuilder_ == null) { this.awards_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; } else { this.awardsBuilder_.clear(); }  return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return ActivityHandler.internal_static_pomelo_area_DrawAwardResponse_descriptor; } public ActivityHandler.DrawAwardResponse getDefaultInstanceForType() { return ActivityHandler.DrawAwardResponse.getDefaultInstance(); } public ActivityHandler.DrawAwardResponse build() { ActivityHandler.DrawAwardResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public ActivityHandler.DrawAwardResponse buildPartial() { ActivityHandler.DrawAwardResponse result = new ActivityHandler.DrawAwardResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if (this.awardsBuilder_ == null) { if ((this.bitField0_ & 0x4) == 4) { this.awards_ = Collections.unmodifiableList(this.awards_); this.bitField0_ &= 0xFFFFFFFB; }  result.awards_ = this.awards_; } else { result.awards_ = this.awardsBuilder_.build(); }  result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof ActivityHandler.DrawAwardResponse) return mergeFrom((ActivityHandler.DrawAwardResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(ActivityHandler.DrawAwardResponse other) { if (other == ActivityHandler.DrawAwardResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  if (this.awardsBuilder_ == null) { if (!other.awards_.isEmpty()) { if (this.awards_.isEmpty()) { this.awards_ = other.awards_; this.bitField0_ &= 0xFFFFFFFB; } else { ensureAwardsIsMutable(); this.awards_.addAll(other.awards_); }  onChanged(); }  } else if (!other.awards_.isEmpty()) { if (this.awardsBuilder_.isEmpty()) { this.awardsBuilder_.dispose(); this.awardsBuilder_ = null; this.awards_ = other.awards_; this.bitField0_ &= 0xFFFFFFFB; this.awardsBuilder_ = ActivityHandler.DrawAwardResponse.alwaysUseFieldBuilders ? getAwardsFieldBuilder() : null; } else { this.awardsBuilder_.addAllMessages(other.awards_); }  }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  for (int i = 0; i < getAwardsCount(); i++) { if (!getAwards(i).isInitialized()) return false;  }  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { ActivityHandler.DrawAwardResponse parsedMessage = null; try { parsedMessage = (ActivityHandler.DrawAwardResponse)ActivityHandler.DrawAwardResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (ActivityHandler.DrawAwardResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = ActivityHandler.DrawAwardResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } private void ensureAwardsIsMutable() { if ((this.bitField0_ & 0x4) != 4) { this.awards_ = new ArrayList<>(this.awards_); this.bitField0_ |= 0x4; }  } public List<Common.KeyValueStruct> getAwardsList() { if (this.awardsBuilder_ == null) return Collections.unmodifiableList(this.awards_);  return this.awardsBuilder_.getMessageList(); } public int getAwardsCount() { if (this.awardsBuilder_ == null) return this.awards_.size();  return this.awardsBuilder_.getCount(); } public Common.KeyValueStruct getAwards(int index) { if (this.awardsBuilder_ == null) return this.awards_.get(index);  return (Common.KeyValueStruct)this.awardsBuilder_.getMessage(index); } public Builder setAwards(int index, Common.KeyValueStruct value) { if (this.awardsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureAwardsIsMutable(); this.awards_.set(index, value); onChanged(); } else { this.awardsBuilder_.setMessage(index, (GeneratedMessage)value); }  return this; } public Builder setAwards(int index, Common.KeyValueStruct.Builder builderForValue) { if (this.awardsBuilder_ == null) { ensureAwardsIsMutable(); this.awards_.set(index, builderForValue.build()); onChanged(); } else { this.awardsBuilder_.setMessage(index, (GeneratedMessage)builderForValue.build()); }  return this; } public Builder addAwards(Common.KeyValueStruct value) { if (this.awardsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureAwardsIsMutable(); this.awards_.add(value); onChanged(); } else { this.awardsBuilder_.addMessage((GeneratedMessage)value); }  return this; } public Builder addAwards(int index, Common.KeyValueStruct value) { if (this.awardsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureAwardsIsMutable(); this.awards_.add(index, value); onChanged(); } else { this.awardsBuilder_.addMessage(index, (GeneratedMessage)value); }  return this; } public Builder addAwards(Common.KeyValueStruct.Builder builderForValue) { if (this.awardsBuilder_ == null) { ensureAwardsIsMutable(); this.awards_.add(builderForValue.build()); onChanged(); } else { this.awardsBuilder_.addMessage((GeneratedMessage)builderForValue.build()); }  return this; } public Builder addAwards(int index, Common.KeyValueStruct.Builder builderForValue) { if (this.awardsBuilder_ == null) { ensureAwardsIsMutable(); this.awards_.add(index, builderForValue.build()); onChanged(); } else { this.awardsBuilder_.addMessage(index, (GeneratedMessage)builderForValue.build()); }  return this; } public Builder addAllAwards(Iterable<? extends Common.KeyValueStruct> values) { if (this.awardsBuilder_ == null) { ensureAwardsIsMutable(); AbstractMessageLite.Builder.addAll(values, this.awards_); onChanged(); } else { this.awardsBuilder_.addAllMessages(values); }  return this; } public Builder clearAwards() { if (this.awardsBuilder_ == null) { this.awards_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; onChanged(); } else { this.awardsBuilder_.clear(); }  return this; } public Builder removeAwards(int index) { if (this.awardsBuilder_ == null) { ensureAwardsIsMutable(); this.awards_.remove(index); onChanged(); } else { this.awardsBuilder_.remove(index); }  return this; } public Common.KeyValueStruct.Builder getAwardsBuilder(int index) { return (Common.KeyValueStruct.Builder)getAwardsFieldBuilder().getBuilder(index); } public Common.KeyValueStructOrBuilder getAwardsOrBuilder(int index) { if (this.awardsBuilder_ == null) return (Common.KeyValueStructOrBuilder)this.awards_.get(index);  return (Common.KeyValueStructOrBuilder)this.awardsBuilder_.getMessageOrBuilder(index); } public List<? extends Common.KeyValueStructOrBuilder> getAwardsOrBuilderList() { if (this.awardsBuilder_ != null) return this.awardsBuilder_.getMessageOrBuilderList();  return (List)Collections.unmodifiableList(this.awards_); } public Common.KeyValueStruct.Builder addAwardsBuilder() { return (Common.KeyValueStruct.Builder)getAwardsFieldBuilder().addBuilder((GeneratedMessage)Common.KeyValueStruct.getDefaultInstance()); } public Common.KeyValueStruct.Builder addAwardsBuilder(int index) { return (Common.KeyValueStruct.Builder)getAwardsFieldBuilder().addBuilder(index, (GeneratedMessage)Common.KeyValueStruct.getDefaultInstance()); } public List<Common.KeyValueStruct.Builder> getAwardsBuilderList() { return getAwardsFieldBuilder().getBuilderList(); } private RepeatedFieldBuilder<Common.KeyValueStruct, Common.KeyValueStruct.Builder, Common.KeyValueStructOrBuilder> getAwardsFieldBuilder() { if (this.awardsBuilder_ == null) { this.awardsBuilder_ = new RepeatedFieldBuilder(this.awards_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean()); this.awards_ = null; }  return this.awardsBuilder_; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static Descriptors.FileDescriptor getDescriptor() {
/* 45843 */     return descriptor;
/*       */   }
/*       */ 
/*       */   
/*       */   static {
/* 45848 */     String[] descriptorData = { "\n\025activityHandler.proto\022\013pomelo.area\032\fcommon.proto\032\nitem.proto\"\030\n\nActivityLs\022\n\n\002id\030\001 \002(\005\"6\n\020ActivityListInfo\022\022\n\nactivityId\030\001 \002(\005\022\016\n\006hudNum\030\002 \002(\005\"\033\n\031InterestActivityAdRequest\"x\n\032InterestActivityAdResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\0227\n\020s2c_activityList\030\003 \003(\0132\035.pomelo.area.ActivityListInfo\"3\n\031ActivityInviteCodeRequest\022\026\n\016c2s_inviteCode\030\001 \002(\t\"?\n\032ActivityInviteCodeResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007", "s2c_msg\030\002 \001(\t\"\021\n\017PayFirstRequest\"\001\n\020PayFirstResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022-\n\016s2c_awardItems\030\003 \003(\0132\025.pomelo.item.MiniItem\022\021\n\ts2c_state\030\004 \002(\005\022\023\n\013s2c_awardId\030\005 \002(\005\"\022\n\020PaySecondRequest\"\001\n\021PaySecondResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022-\n\016s2c_awardItems\030\003 \003(\0132\025.pomelo.item.MiniItem\022\021\n\ts2c_state\030\004 \002(\005\022\023\n\013s2c_awardId\030\005 \002(\005\"{\n\fawardPreview\022\017\n\007currNum\030\001 \002(\005\022\017\n\007needNum\030\002 \002(\005\022)\n\nawardIt", "ems\030\003 \003(\0132\025.pomelo.item.MiniItem\022\r\n\005state\030\004 \002(\005\022\017\n\007awardId\030\005 \002(\005\"l\n\ttotalInfo\022\021\n\tbeginTime\030\001 \002(\t\022\017\n\007endTime\030\002 \002(\t\022\020\n\bdescribe\030\003 \002(\t\022)\n\006awards\030\004 \003(\0132\031.pomelo.area.awardPreview\"j\n\nawardState\022\r\n\005state\030\001 \002(\005\022\017\n\007awardId\030\002 \002(\005\022\021\n\tneedValue\030\003 \002(\005\022)\n\nawardItems\030\004 \003(\0132\025.pomelo.item.MiniItem\"¡\001\n\rawardSevenDay\022\r\n\005state\030\001 \002(\005\022\017\n\007awardId\030\002 \002(\005\022\017\n\007currNum\030\003 \002(\005\022\017\n\007needNum\030\004 \002(\005\022\021\n\tcondition\030\005 \002(\t\022\020\n\bconValue\030\006 ", "\002(\005\022)\n\nawardItems\030\007 \003(\0132\025.pomelo.item.MiniItem\"f\n\016openFundsAward\022&\n\005award\030\001 \002(\0132\027.pomelo.area.awardState\022\f\n\004type\030\002 \001(\005\022\r\n\005value\030\003 \001(\005\022\017\n\007diamond\030\004 \001(\005\"\021\n\017PayTotalRequest\"_\n\020PayTotalResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022(\n\bs2c_data\030\003 \002(\0132\026.pomelo.area.totalInfo\"\025\n\023ConsumeTotalRequest\"c\n\024ConsumeTotalResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022(\n\bs2c_data\030\003 \002(\0132\026.pomelo.area.totalInfo\"C\n\024Activi", "tyAwardRequest\022\023\n\013s2c_awardId\030\001 \002(\005\022\026\n\016s2c_activityId\030\002 \002(\005\"r\n\025ActivityAwardResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\0226\n\017s2c_activityHud\030\003 \001(\0132\035.pomelo.area.ActivityListInfo\"\023\n\021ActivityNoticeReq\"K\n\021ActivityNoticeRes\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022\023\n\013s2c_context\030\003 \001(\t\"5\n\033ActivityLevelOrSwordRequest\022\026\n\016c2s_activityId\030\001 \002(\005\"­\001\n\034ActivityLevelOrSwordResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022\025\n\r", "s2c_beginTime\030\003 \001(\t\022\023\n\013s2c_endTime\030\004 \001(\t\022\023\n\013s2c_content\030\005 \001(\t\022)\n\bs2c_data\030\006 \003(\0132\027.pomelo.area.awardState\"\025\n\023ActivityBuyFundsReq\"8\n\023ActivityBuyFundsRes\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"\026\n\024ActivityOpenFundsReq\"È\001\n\024ActivityOpenFundsRes\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022\025\n\rs2c_hasBuyNum\030\003 \002(\005\022\027\n\017s2c_needDiamond\030\004 \002(\005\022\030\n\020s2c_needVipLevel\030\005 \002(\005\022\024\n\fs2c_buyState\030\006 \002(\005\022-\n\bs2c_data\030\007 \003(\0132\033.pomelo.area.op", "enFundsAward\"\037\n\035ActivityLuckyAwardViewRequest\"A\n\tawardInfo\022\013\n\003pos\030\001 \002(\005\022'\n\bitemInfo\030\002 \002(\0132\025.pomelo.item.MiniItem\"ñ\001\n\036ActivityLuckyAwardViewResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022\033\n\023s2c_leftRefreshTime\030\003 \002(\005\022)\n\ns2c_awards\030\004 \003(\0132\025.pomelo.item.MiniItem\0222\n\023s2c_recommendAwards\030\005 \003(\0132\025.pomelo.item.MiniItem\0220\n\020s2c_drawedAwards\030\006 \003(\0132\026.pomelo.area.awardInfo\"\027\n\025LuckyAwardViewRequest\"d\n\026LuckyAwardViewR", "esponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022'\n\bs2c_data\030\003 \003(\0132\025.pomelo.item.MiniItem\"\030\n\026ReSetluckyAwardRequest\"g\n\027ReSetluckyAwardResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022)\n\ns2c_awards\030\003 \003(\0132\025.pomelo.item.MiniItem\"&\n\023OpenSevenDayRequest\022\017\n\007c2s_day\030\001 \002(\005\"Ö\001\n\024OpenSevenDayResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022\022\n\ns2c_curDay\030\003 \001(\005\022\025\n\rs2c_beginTime\030\004 \001(\t\022\023\n\013s2c_endTime\030\005 \001(\t\022\023\n\013s2c_content\030\006 \001(\t\022", "1\n\rs2c_awardInfo\030\007 \003(\0132\032.pomelo.area.awardSevenDay\022\023\n\013s2c_hudDays\030\b \003(\005\"?\n\nchangeItem\022\020\n\bitemCode\030\001 \002(\t\022\017\n\007itemNum\030\002 \002(\005\022\016\n\006isBind\030\003 \001(\005\"°\001\n\nchangeInfo\022\020\n\bchangeId\030\001 \002(\005\022)\n\bcostItem\030\002 \003(\0132\027.pomelo.area.changeItem\022+\n\nrewardItem\030\003 \003(\0132\027.pomelo.area.changeItem\022\022\n\nchangeSate\030\004 \002(\005\022\021\n\tchangeNum\030\005 \002(\005\022\021\n\tchangeMax\030\006 \001(\005\"\023\n\021OpenChangeRequest\"©\001\n\022OpenChangeResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022\025\n\rs2", "c_beginTime\030\003 \001(\t\022\023\n\013s2c_endTime\030\004 \001(\t\022\023\n\013s2c_content\030\005 \001(\t\022/\n\016s2c_changeInfo\030\006 \003(\0132\027.pomelo.area.changeInfo\"\023\n\021ActivityLsRequest\"g\n\022ActivityLsResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022.\n\rs2c_welfareLs\030\003 \003(\0132\027.pomelo.area.ActivityLs\"\031\n\027ActivityDrawInfoRequest\"W\n\017DrawScoreReward\022\r\n\005score\030\001 \002(\005\022\016\n\006status\030\002 \002(\005\022%\n\005items\030\003 \003(\0132\026.pomelo.KeyValueStruct\"³\002\n\030ActivityDrawInfoResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n", "\007s2c_msg\030\002 \001(\t\022\r\n\005score\030\003 \002(\005\022\021\n\tfreeCount\030\004 \002(\005\022\023\n\013singlePrice\030\005 \002(\005\022\020\n\btenPrice\030\006 \002(\005\022\021\n\tbeginTime\030\007 \001(\t\022\017\n\007endTime\030\b \001(\t\0221\n\013scoreReward\030\t \003(\0132\034.pomelo.area.DrawScoreReward\022)\n\tdrawItems\030\n \003(\0132\026.pomelo.KeyValueStruct\022)\n\tshowItems\030\013 \003(\0132\026.pomelo.KeyValueStruct\")\n\bDrawInfo\022\f\n\004date\030\001 \002(\t\022\017\n\007message\030\002 \003(\t\"\021\n\017DrawInfoRequest\"\001\n\020DrawInfoResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022*\n\013allDrawInfo\030\003 \003(\0132", "\025.pomelo.area.DrawInfo\022)\n\nmyDrawInfo\030\004 \003(\0132\025.pomelo.area.DrawInfo\022\r\n\005isLow\030\005 \001(\005\"\021\n\017DrawRankRequest\"\001\n\fDrawRankInfo\022\022\n\nplayerName\030\001 \002(\t\022\021\n\tplayerPro\030\002 \002(\005\022\023\n\013playerLevel\030\003 \002(\005\022\r\n\005score\030\004 \002(\005\022'\n\007myItems\030\005 \003(\0132\026.pomelo.KeyValueStruct\"¬\001\n\020DrawRankResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022\016\n\006myRank\030\003 \001(\005\022\017\n\007myScore\030\004 \001(\005\022'\n\007myItems\030\005 \003(\0132\026.pomelo.KeyValueStruct\022+\n\brankInfo\030\006 \003(\0132\031.pomelo.area.DrawR", "ankInfo\"\"\n\021DrawSetLowRequest\022\r\n\005isLow\030\001 \002(\005\"7\n\022DrawSetLowResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"1\n\020DrawAwardRequest\022\f\n\004type\030\001 \002(\005\022\017\n\007useItem\030\002 \002(\005\"^\n\021DrawAwardResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022&\n\006awards\030\003 \003(\0132\026.pomelo.KeyValueStruct2£\020\n\017activityHandler\022T\n\021activityLsRequest\022\036.pomelo.area.ActivityLsRequest\032\037.pomelo.area.ActivityLsResponse\022l\n\031interestActivityAdRequest\022&.pomelo.area.Int", "erestActivityAdRequest\032'.pomelo.area.InterestActivityAdResponse\022N\n\017payFirstRequest\022\034.pomelo.area.PayFirstRequest\032\035.pomelo.area.PayFirstResponse\022Q\n\020paySecondRequest\022\035.pomelo.area.PaySecondRequest\032\036.pomelo.area.PaySecondResponse\022N\n\017payTotalRequest\022\034.pomelo.area.PayTotalRequest\032\035.pomelo.area.PayTotalResponse\022Z\n\023consumeTotalRequest\022 .pomelo.area.ConsumeTotalRequest\032!.pomelo.area.ConsumeTotalResponse\022]", "\n\024activityAwardRequest\022!.pomelo.area.ActivityAwardRequest\032\".pomelo.area.ActivityAwardResponse\022l\n\031activityInviteCodeRequest\022&.pomelo.area.ActivityInviteCodeRequest\032'.pomelo.area.ActivityInviteCodeResponse\022W\n\025activityNoticeRequest\022\036.pomelo.area.ActivityNoticeReq\032\036.pomelo.area.ActivityNoticeRes\022r\n\033activityLevelOrSwordRequest\022(.pomelo.area.ActivityLevelOrSwordRequest\032).pomelo.area.ActivityLevelOrSword", "Response\022]\n\027activityBuyFundsRequest\022 .pomelo.area.ActivityBuyFundsReq\032 .pomelo.area.ActivityBuyFundsRes\022`\n\030activityOpenFundsRequest\022!.pomelo.area.ActivityOpenFundsReq\032!.pomelo.area.ActivityOpenFundsRes\022x\n\035activityLuckyAwardViewRequest\022*.pomelo.area.ActivityLuckyAwardViewRequest\032+.pomelo.area.ActivityLuckyAwardViewResponse\022`\n\025luckyAwardViewRequest\022\".pomelo.area.LuckyAwardViewRequest\032#.pomelo.area.L", "uckyAwardViewResponse\022c\n\026reSetluckyAwardRequest\022#.pomelo.area.ReSetluckyAwardRequest\032$.pomelo.area.ReSetluckyAwardResponse\022Z\n\023openSevenDayRequest\022 .pomelo.area.OpenSevenDayRequest\032!.pomelo.area.OpenSevenDayResponse\022T\n\021openChangeRequest\022\036.pomelo.area.OpenChangeRequest\032\037.pomelo.area.OpenChangeResponse\022f\n\027activityDrawInfoRequest\022$.pomelo.area.ActivityDrawInfoRequest\032%.pomelo.area.ActivityDrawInfoResp", "onse\022N\n\017drawInfoRequest\022\034.pomelo.area.DrawInfoRequest\032\035.pomelo.area.DrawInfoResponse\022N\n\017drawRankRequest\022\034.pomelo.area.DrawRankRequest\032\035.pomelo.area.DrawRankResponse\022T\n\021drawSetLowRequest\022\036.pomelo.area.DrawSetLowRequest\032\037.pomelo.area.DrawSetLowResponse\022Q\n\020drawAwardRequest\022\035.pomelo.area.DrawAwardRequest\032\036.pomelo.area.DrawAwardResponse" };
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/* 46029 */     Descriptors.FileDescriptor.InternalDescriptorAssigner assigner = new Descriptors.FileDescriptor.InternalDescriptorAssigner()
/*       */       {
/*       */         public ExtensionRegistry assignDescriptors(Descriptors.FileDescriptor root)
/*       */         {
/* 46033 */           ActivityHandler.descriptor = root;
/* 46034 */           return null;
/*       */         }
/*       */       };
/*       */     
/* 46038 */     Descriptors.FileDescriptor.internalBuildGeneratedFileFrom(descriptorData, new Descriptors.FileDescriptor[] {
/*       */           
/* 46040 */           Common.getDescriptor(), 
/* 46041 */           ItemOuterClass.getDescriptor() }, assigner);
/*       */   }
/*       */   
/* 46044 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ActivityLs_descriptor = getDescriptor().getMessageTypes().get(0);
/* 46045 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ActivityLs_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ActivityLs_descriptor, new String[] { "Id" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46050 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ActivityListInfo_descriptor = getDescriptor().getMessageTypes().get(1);
/* 46051 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ActivityListInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ActivityListInfo_descriptor, new String[] { "ActivityId", "HudNum" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46056 */   private static final Descriptors.Descriptor internal_static_pomelo_area_InterestActivityAdRequest_descriptor = getDescriptor().getMessageTypes().get(2);
/* 46057 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_InterestActivityAdRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_InterestActivityAdRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46062 */   private static final Descriptors.Descriptor internal_static_pomelo_area_InterestActivityAdResponse_descriptor = getDescriptor().getMessageTypes().get(3);
/* 46063 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_InterestActivityAdResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_InterestActivityAdResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CActivityList" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46068 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ActivityInviteCodeRequest_descriptor = getDescriptor().getMessageTypes().get(4);
/* 46069 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ActivityInviteCodeRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ActivityInviteCodeRequest_descriptor, new String[] { "C2SInviteCode" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46074 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ActivityInviteCodeResponse_descriptor = getDescriptor().getMessageTypes().get(5);
/* 46075 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ActivityInviteCodeResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ActivityInviteCodeResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46080 */   private static final Descriptors.Descriptor internal_static_pomelo_area_PayFirstRequest_descriptor = getDescriptor().getMessageTypes().get(6);
/* 46081 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_PayFirstRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_PayFirstRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46086 */   private static final Descriptors.Descriptor internal_static_pomelo_area_PayFirstResponse_descriptor = getDescriptor().getMessageTypes().get(7);
/* 46087 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_PayFirstResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_PayFirstResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CAwardItems", "S2CState", "S2CAwardId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46092 */   private static final Descriptors.Descriptor internal_static_pomelo_area_PaySecondRequest_descriptor = getDescriptor().getMessageTypes().get(8);
/* 46093 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_PaySecondRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_PaySecondRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46098 */   private static final Descriptors.Descriptor internal_static_pomelo_area_PaySecondResponse_descriptor = getDescriptor().getMessageTypes().get(9);
/* 46099 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_PaySecondResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_PaySecondResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CAwardItems", "S2CState", "S2CAwardId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46104 */   private static final Descriptors.Descriptor internal_static_pomelo_area_awardPreview_descriptor = getDescriptor().getMessageTypes().get(10);
/* 46105 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_awardPreview_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_awardPreview_descriptor, new String[] { "CurrNum", "NeedNum", "AwardItems", "State", "AwardId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46110 */   private static final Descriptors.Descriptor internal_static_pomelo_area_totalInfo_descriptor = getDescriptor().getMessageTypes().get(11);
/* 46111 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_totalInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_totalInfo_descriptor, new String[] { "BeginTime", "EndTime", "Describe", "Awards" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46116 */   private static final Descriptors.Descriptor internal_static_pomelo_area_awardState_descriptor = getDescriptor().getMessageTypes().get(12);
/* 46117 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_awardState_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_awardState_descriptor, new String[] { "State", "AwardId", "NeedValue", "AwardItems" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46122 */   private static final Descriptors.Descriptor internal_static_pomelo_area_awardSevenDay_descriptor = getDescriptor().getMessageTypes().get(13);
/* 46123 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_awardSevenDay_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_awardSevenDay_descriptor, new String[] { "State", "AwardId", "CurrNum", "NeedNum", "Condition", "ConValue", "AwardItems" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46128 */   private static final Descriptors.Descriptor internal_static_pomelo_area_openFundsAward_descriptor = getDescriptor().getMessageTypes().get(14);
/* 46129 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_openFundsAward_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_openFundsAward_descriptor, new String[] { "Award", "Type", "Value", "Diamond" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46134 */   private static final Descriptors.Descriptor internal_static_pomelo_area_PayTotalRequest_descriptor = getDescriptor().getMessageTypes().get(15);
/* 46135 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_PayTotalRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_PayTotalRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46140 */   private static final Descriptors.Descriptor internal_static_pomelo_area_PayTotalResponse_descriptor = getDescriptor().getMessageTypes().get(16);
/* 46141 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_PayTotalResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_PayTotalResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CData" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46146 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ConsumeTotalRequest_descriptor = getDescriptor().getMessageTypes().get(17);
/* 46147 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ConsumeTotalRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ConsumeTotalRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46152 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ConsumeTotalResponse_descriptor = getDescriptor().getMessageTypes().get(18);
/* 46153 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ConsumeTotalResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ConsumeTotalResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CData" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46158 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ActivityAwardRequest_descriptor = getDescriptor().getMessageTypes().get(19);
/* 46159 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ActivityAwardRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ActivityAwardRequest_descriptor, new String[] { "S2CAwardId", "S2CActivityId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46164 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ActivityAwardResponse_descriptor = getDescriptor().getMessageTypes().get(20);
/* 46165 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ActivityAwardResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ActivityAwardResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CActivityHud" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46170 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ActivityNoticeReq_descriptor = getDescriptor().getMessageTypes().get(21);
/* 46171 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ActivityNoticeReq_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ActivityNoticeReq_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46176 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ActivityNoticeRes_descriptor = getDescriptor().getMessageTypes().get(22);
/* 46177 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ActivityNoticeRes_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ActivityNoticeRes_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CContext" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46182 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ActivityLevelOrSwordRequest_descriptor = getDescriptor().getMessageTypes().get(23);
/* 46183 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ActivityLevelOrSwordRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ActivityLevelOrSwordRequest_descriptor, new String[] { "C2SActivityId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46188 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ActivityLevelOrSwordResponse_descriptor = getDescriptor().getMessageTypes().get(24);
/* 46189 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ActivityLevelOrSwordResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ActivityLevelOrSwordResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CBeginTime", "S2CEndTime", "S2CContent", "S2CData" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46194 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ActivityBuyFundsReq_descriptor = getDescriptor().getMessageTypes().get(25);
/* 46195 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ActivityBuyFundsReq_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ActivityBuyFundsReq_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46200 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ActivityBuyFundsRes_descriptor = getDescriptor().getMessageTypes().get(26);
/* 46201 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ActivityBuyFundsRes_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ActivityBuyFundsRes_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46206 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ActivityOpenFundsReq_descriptor = getDescriptor().getMessageTypes().get(27);
/* 46207 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ActivityOpenFundsReq_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ActivityOpenFundsReq_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46212 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ActivityOpenFundsRes_descriptor = getDescriptor().getMessageTypes().get(28);
/* 46213 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ActivityOpenFundsRes_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ActivityOpenFundsRes_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CHasBuyNum", "S2CNeedDiamond", "S2CNeedVipLevel", "S2CBuyState", "S2CData" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46218 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ActivityLuckyAwardViewRequest_descriptor = getDescriptor().getMessageTypes().get(29);
/* 46219 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ActivityLuckyAwardViewRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ActivityLuckyAwardViewRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46224 */   private static final Descriptors.Descriptor internal_static_pomelo_area_awardInfo_descriptor = getDescriptor().getMessageTypes().get(30);
/* 46225 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_awardInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_awardInfo_descriptor, new String[] { "Pos", "ItemInfo" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46230 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ActivityLuckyAwardViewResponse_descriptor = getDescriptor().getMessageTypes().get(31);
/* 46231 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ActivityLuckyAwardViewResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ActivityLuckyAwardViewResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CLeftRefreshTime", "S2CAwards", "S2CRecommendAwards", "S2CDrawedAwards" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46236 */   private static final Descriptors.Descriptor internal_static_pomelo_area_LuckyAwardViewRequest_descriptor = getDescriptor().getMessageTypes().get(32);
/* 46237 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_LuckyAwardViewRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_LuckyAwardViewRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46242 */   private static final Descriptors.Descriptor internal_static_pomelo_area_LuckyAwardViewResponse_descriptor = getDescriptor().getMessageTypes().get(33);
/* 46243 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_LuckyAwardViewResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_LuckyAwardViewResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CData" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46248 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ReSetluckyAwardRequest_descriptor = getDescriptor().getMessageTypes().get(34);
/* 46249 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ReSetluckyAwardRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ReSetluckyAwardRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46254 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ReSetluckyAwardResponse_descriptor = getDescriptor().getMessageTypes().get(35);
/* 46255 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ReSetluckyAwardResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ReSetluckyAwardResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CAwards" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46260 */   private static final Descriptors.Descriptor internal_static_pomelo_area_OpenSevenDayRequest_descriptor = getDescriptor().getMessageTypes().get(36);
/* 46261 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_OpenSevenDayRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_OpenSevenDayRequest_descriptor, new String[] { "C2SDay" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46266 */   private static final Descriptors.Descriptor internal_static_pomelo_area_OpenSevenDayResponse_descriptor = getDescriptor().getMessageTypes().get(37);
/* 46267 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_OpenSevenDayResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_OpenSevenDayResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CCurDay", "S2CBeginTime", "S2CEndTime", "S2CContent", "S2CAwardInfo", "S2CHudDays" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46272 */   private static final Descriptors.Descriptor internal_static_pomelo_area_changeItem_descriptor = getDescriptor().getMessageTypes().get(38);
/* 46273 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_changeItem_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_changeItem_descriptor, new String[] { "ItemCode", "ItemNum", "IsBind" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46278 */   private static final Descriptors.Descriptor internal_static_pomelo_area_changeInfo_descriptor = getDescriptor().getMessageTypes().get(39);
/* 46279 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_changeInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_changeInfo_descriptor, new String[] { "ChangeId", "CostItem", "RewardItem", "ChangeSate", "ChangeNum", "ChangeMax" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46284 */   private static final Descriptors.Descriptor internal_static_pomelo_area_OpenChangeRequest_descriptor = getDescriptor().getMessageTypes().get(40);
/* 46285 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_OpenChangeRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_OpenChangeRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46290 */   private static final Descriptors.Descriptor internal_static_pomelo_area_OpenChangeResponse_descriptor = getDescriptor().getMessageTypes().get(41);
/* 46291 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_OpenChangeResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_OpenChangeResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CBeginTime", "S2CEndTime", "S2CContent", "S2CChangeInfo" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46296 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ActivityLsRequest_descriptor = getDescriptor().getMessageTypes().get(42);
/* 46297 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ActivityLsRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ActivityLsRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46302 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ActivityLsResponse_descriptor = getDescriptor().getMessageTypes().get(43);
/* 46303 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ActivityLsResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ActivityLsResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CWelfareLs" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46308 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ActivityDrawInfoRequest_descriptor = getDescriptor().getMessageTypes().get(44);
/* 46309 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ActivityDrawInfoRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ActivityDrawInfoRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46314 */   private static final Descriptors.Descriptor internal_static_pomelo_area_DrawScoreReward_descriptor = getDescriptor().getMessageTypes().get(45);
/* 46315 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DrawScoreReward_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DrawScoreReward_descriptor, new String[] { "Score", "Status", "Items" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46320 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ActivityDrawInfoResponse_descriptor = getDescriptor().getMessageTypes().get(46);
/* 46321 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ActivityDrawInfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ActivityDrawInfoResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "Score", "FreeCount", "SinglePrice", "TenPrice", "BeginTime", "EndTime", "ScoreReward", "DrawItems", "ShowItems" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46326 */   private static final Descriptors.Descriptor internal_static_pomelo_area_DrawInfo_descriptor = getDescriptor().getMessageTypes().get(47);
/* 46327 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DrawInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DrawInfo_descriptor, new String[] { "Date", "Message" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46332 */   private static final Descriptors.Descriptor internal_static_pomelo_area_DrawInfoRequest_descriptor = getDescriptor().getMessageTypes().get(48);
/* 46333 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DrawInfoRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DrawInfoRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46338 */   private static final Descriptors.Descriptor internal_static_pomelo_area_DrawInfoResponse_descriptor = getDescriptor().getMessageTypes().get(49);
/* 46339 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DrawInfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DrawInfoResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "AllDrawInfo", "MyDrawInfo", "IsLow" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46344 */   private static final Descriptors.Descriptor internal_static_pomelo_area_DrawRankRequest_descriptor = getDescriptor().getMessageTypes().get(50);
/* 46345 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DrawRankRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DrawRankRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46350 */   private static final Descriptors.Descriptor internal_static_pomelo_area_DrawRankInfo_descriptor = getDescriptor().getMessageTypes().get(51);
/* 46351 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DrawRankInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DrawRankInfo_descriptor, new String[] { "PlayerName", "PlayerPro", "PlayerLevel", "Score", "MyItems" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46356 */   private static final Descriptors.Descriptor internal_static_pomelo_area_DrawRankResponse_descriptor = getDescriptor().getMessageTypes().get(52);
/* 46357 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DrawRankResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DrawRankResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "MyRank", "MyScore", "MyItems", "RankInfo" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46362 */   private static final Descriptors.Descriptor internal_static_pomelo_area_DrawSetLowRequest_descriptor = getDescriptor().getMessageTypes().get(53);
/* 46363 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DrawSetLowRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DrawSetLowRequest_descriptor, new String[] { "IsLow" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46368 */   private static final Descriptors.Descriptor internal_static_pomelo_area_DrawSetLowResponse_descriptor = getDescriptor().getMessageTypes().get(54);
/* 46369 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DrawSetLowResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DrawSetLowResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46374 */   private static final Descriptors.Descriptor internal_static_pomelo_area_DrawAwardRequest_descriptor = getDescriptor().getMessageTypes().get(55);
/* 46375 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DrawAwardRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DrawAwardRequest_descriptor, new String[] { "Type", "UseItem" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 46380 */   private static final Descriptors.Descriptor internal_static_pomelo_area_DrawAwardResponse_descriptor = getDescriptor().getMessageTypes().get(56);
/* 46381 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DrawAwardResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DrawAwardResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "Awards" });
/*       */   private static Descriptors.FileDescriptor descriptor;
/*       */   
/*       */   static {
/* 46385 */     Common.getDescriptor();
/* 46386 */     ItemOuterClass.getDescriptor();
/*       */   }
/*       */   
/*       */   public static interface DrawAwardResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     List<Common.KeyValueStruct> getAwardsList();
/*       */     
/*       */     Common.KeyValueStruct getAwards(int param1Int);
/*       */     
/*       */     int getAwardsCount();
/*       */     
/*       */     List<? extends Common.KeyValueStructOrBuilder> getAwardsOrBuilderList();
/*       */     
/*       */     Common.KeyValueStructOrBuilder getAwardsOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface DrawAwardRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasType();
/*       */     
/*       */     int getType();
/*       */     
/*       */     boolean hasUseItem();
/*       */     
/*       */     int getUseItem();
/*       */   }
/*       */   
/*       */   public static interface DrawSetLowResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface DrawSetLowRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasIsLow();
/*       */     
/*       */     int getIsLow();
/*       */   }
/*       */   
/*       */   public static interface DrawRankResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     boolean hasMyRank();
/*       */     
/*       */     int getMyRank();
/*       */     
/*       */     boolean hasMyScore();
/*       */     
/*       */     int getMyScore();
/*       */     
/*       */     List<Common.KeyValueStruct> getMyItemsList();
/*       */     
/*       */     Common.KeyValueStruct getMyItems(int param1Int);
/*       */     
/*       */     int getMyItemsCount();
/*       */     
/*       */     List<? extends Common.KeyValueStructOrBuilder> getMyItemsOrBuilderList();
/*       */     
/*       */     Common.KeyValueStructOrBuilder getMyItemsOrBuilder(int param1Int);
/*       */     
/*       */     List<ActivityHandler.DrawRankInfo> getRankInfoList();
/*       */     
/*       */     ActivityHandler.DrawRankInfo getRankInfo(int param1Int);
/*       */     
/*       */     int getRankInfoCount();
/*       */     
/*       */     List<? extends ActivityHandler.DrawRankInfoOrBuilder> getRankInfoOrBuilderList();
/*       */     
/*       */     ActivityHandler.DrawRankInfoOrBuilder getRankInfoOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface DrawRankInfoOrBuilder extends MessageOrBuilder {
/*       */     boolean hasPlayerName();
/*       */     
/*       */     String getPlayerName();
/*       */     
/*       */     ByteString getPlayerNameBytes();
/*       */     
/*       */     boolean hasPlayerPro();
/*       */     
/*       */     int getPlayerPro();
/*       */     
/*       */     boolean hasPlayerLevel();
/*       */     
/*       */     int getPlayerLevel();
/*       */     
/*       */     boolean hasScore();
/*       */     
/*       */     int getScore();
/*       */     
/*       */     List<Common.KeyValueStruct> getMyItemsList();
/*       */     
/*       */     Common.KeyValueStruct getMyItems(int param1Int);
/*       */     
/*       */     int getMyItemsCount();
/*       */     
/*       */     List<? extends Common.KeyValueStructOrBuilder> getMyItemsOrBuilderList();
/*       */     
/*       */     Common.KeyValueStructOrBuilder getMyItemsOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface DrawRankRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface DrawInfoResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     List<ActivityHandler.DrawInfo> getAllDrawInfoList();
/*       */     
/*       */     ActivityHandler.DrawInfo getAllDrawInfo(int param1Int);
/*       */     
/*       */     int getAllDrawInfoCount();
/*       */     
/*       */     List<? extends ActivityHandler.DrawInfoOrBuilder> getAllDrawInfoOrBuilderList();
/*       */     
/*       */     ActivityHandler.DrawInfoOrBuilder getAllDrawInfoOrBuilder(int param1Int);
/*       */     
/*       */     List<ActivityHandler.DrawInfo> getMyDrawInfoList();
/*       */     
/*       */     ActivityHandler.DrawInfo getMyDrawInfo(int param1Int);
/*       */     
/*       */     int getMyDrawInfoCount();
/*       */     
/*       */     List<? extends ActivityHandler.DrawInfoOrBuilder> getMyDrawInfoOrBuilderList();
/*       */     
/*       */     ActivityHandler.DrawInfoOrBuilder getMyDrawInfoOrBuilder(int param1Int);
/*       */     
/*       */     boolean hasIsLow();
/*       */     
/*       */     int getIsLow();
/*       */   }
/*       */   
/*       */   public static interface DrawInfoRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface DrawInfoOrBuilder extends MessageOrBuilder {
/*       */     boolean hasDate();
/*       */     
/*       */     String getDate();
/*       */     
/*       */     ByteString getDateBytes();
/*       */     
/*       */     ProtocolStringList getMessageList();
/*       */     
/*       */     int getMessageCount();
/*       */     
/*       */     String getMessage(int param1Int);
/*       */     
/*       */     ByteString getMessageBytes(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface ActivityDrawInfoResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     boolean hasScore();
/*       */     
/*       */     int getScore();
/*       */     
/*       */     boolean hasFreeCount();
/*       */     
/*       */     int getFreeCount();
/*       */     
/*       */     boolean hasSinglePrice();
/*       */     
/*       */     int getSinglePrice();
/*       */     
/*       */     boolean hasTenPrice();
/*       */     
/*       */     int getTenPrice();
/*       */     
/*       */     boolean hasBeginTime();
/*       */     
/*       */     String getBeginTime();
/*       */     
/*       */     ByteString getBeginTimeBytes();
/*       */     
/*       */     boolean hasEndTime();
/*       */     
/*       */     String getEndTime();
/*       */     
/*       */     ByteString getEndTimeBytes();
/*       */     
/*       */     List<ActivityHandler.DrawScoreReward> getScoreRewardList();
/*       */     
/*       */     ActivityHandler.DrawScoreReward getScoreReward(int param1Int);
/*       */     
/*       */     int getScoreRewardCount();
/*       */     
/*       */     List<? extends ActivityHandler.DrawScoreRewardOrBuilder> getScoreRewardOrBuilderList();
/*       */     
/*       */     ActivityHandler.DrawScoreRewardOrBuilder getScoreRewardOrBuilder(int param1Int);
/*       */     
/*       */     List<Common.KeyValueStruct> getDrawItemsList();
/*       */     
/*       */     Common.KeyValueStruct getDrawItems(int param1Int);
/*       */     
/*       */     int getDrawItemsCount();
/*       */     
/*       */     List<? extends Common.KeyValueStructOrBuilder> getDrawItemsOrBuilderList();
/*       */     
/*       */     Common.KeyValueStructOrBuilder getDrawItemsOrBuilder(int param1Int);
/*       */     
/*       */     List<Common.KeyValueStruct> getShowItemsList();
/*       */     
/*       */     Common.KeyValueStruct getShowItems(int param1Int);
/*       */     
/*       */     int getShowItemsCount();
/*       */     
/*       */     List<? extends Common.KeyValueStructOrBuilder> getShowItemsOrBuilderList();
/*       */     
/*       */     Common.KeyValueStructOrBuilder getShowItemsOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface DrawScoreRewardOrBuilder extends MessageOrBuilder {
/*       */     boolean hasScore();
/*       */     
/*       */     int getScore();
/*       */     
/*       */     boolean hasStatus();
/*       */     
/*       */     int getStatus();
/*       */     
/*       */     List<Common.KeyValueStruct> getItemsList();
/*       */     
/*       */     Common.KeyValueStruct getItems(int param1Int);
/*       */     
/*       */     int getItemsCount();
/*       */     
/*       */     List<? extends Common.KeyValueStructOrBuilder> getItemsOrBuilderList();
/*       */     
/*       */     Common.KeyValueStructOrBuilder getItemsOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface ActivityDrawInfoRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface ActivityLsResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     List<ActivityHandler.ActivityLs> getS2CWelfareLsList();
/*       */     
/*       */     ActivityHandler.ActivityLs getS2CWelfareLs(int param1Int);
/*       */     
/*       */     int getS2CWelfareLsCount();
/*       */     
/*       */     List<? extends ActivityHandler.ActivityLsOrBuilder> getS2CWelfareLsOrBuilderList();
/*       */     
/*       */     ActivityHandler.ActivityLsOrBuilder getS2CWelfareLsOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface ActivityLsRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface OpenChangeResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     boolean hasS2CBeginTime();
/*       */     
/*       */     String getS2CBeginTime();
/*       */     
/*       */     ByteString getS2CBeginTimeBytes();
/*       */     
/*       */     boolean hasS2CEndTime();
/*       */     
/*       */     String getS2CEndTime();
/*       */     
/*       */     ByteString getS2CEndTimeBytes();
/*       */     
/*       */     boolean hasS2CContent();
/*       */     
/*       */     String getS2CContent();
/*       */     
/*       */     ByteString getS2CContentBytes();
/*       */     
/*       */     List<ActivityHandler.changeInfo> getS2CChangeInfoList();
/*       */     
/*       */     ActivityHandler.changeInfo getS2CChangeInfo(int param1Int);
/*       */     
/*       */     int getS2CChangeInfoCount();
/*       */     
/*       */     List<? extends ActivityHandler.changeInfoOrBuilder> getS2CChangeInfoOrBuilderList();
/*       */     
/*       */     ActivityHandler.changeInfoOrBuilder getS2CChangeInfoOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface OpenChangeRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface changeInfoOrBuilder extends MessageOrBuilder {
/*       */     boolean hasChangeId();
/*       */     
/*       */     int getChangeId();
/*       */     
/*       */     List<ActivityHandler.changeItem> getCostItemList();
/*       */     
/*       */     ActivityHandler.changeItem getCostItem(int param1Int);
/*       */     
/*       */     int getCostItemCount();
/*       */     
/*       */     List<? extends ActivityHandler.changeItemOrBuilder> getCostItemOrBuilderList();
/*       */     
/*       */     ActivityHandler.changeItemOrBuilder getCostItemOrBuilder(int param1Int);
/*       */     
/*       */     List<ActivityHandler.changeItem> getRewardItemList();
/*       */     
/*       */     ActivityHandler.changeItem getRewardItem(int param1Int);
/*       */     
/*       */     int getRewardItemCount();
/*       */     
/*       */     List<? extends ActivityHandler.changeItemOrBuilder> getRewardItemOrBuilderList();
/*       */     
/*       */     ActivityHandler.changeItemOrBuilder getRewardItemOrBuilder(int param1Int);
/*       */     
/*       */     boolean hasChangeSate();
/*       */     
/*       */     int getChangeSate();
/*       */     
/*       */     boolean hasChangeNum();
/*       */     
/*       */     int getChangeNum();
/*       */     
/*       */     boolean hasChangeMax();
/*       */     
/*       */     int getChangeMax();
/*       */   }
/*       */   
/*       */   public static interface changeItemOrBuilder extends MessageOrBuilder {
/*       */     boolean hasItemCode();
/*       */     
/*       */     String getItemCode();
/*       */     
/*       */     ByteString getItemCodeBytes();
/*       */     
/*       */     boolean hasItemNum();
/*       */     
/*       */     int getItemNum();
/*       */     
/*       */     boolean hasIsBind();
/*       */     
/*       */     int getIsBind();
/*       */   }
/*       */   
/*       */   public static interface OpenSevenDayResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     boolean hasS2CCurDay();
/*       */     
/*       */     int getS2CCurDay();
/*       */     
/*       */     boolean hasS2CBeginTime();
/*       */     
/*       */     String getS2CBeginTime();
/*       */     
/*       */     ByteString getS2CBeginTimeBytes();
/*       */     
/*       */     boolean hasS2CEndTime();
/*       */     
/*       */     String getS2CEndTime();
/*       */     
/*       */     ByteString getS2CEndTimeBytes();
/*       */     
/*       */     boolean hasS2CContent();
/*       */     
/*       */     String getS2CContent();
/*       */     
/*       */     ByteString getS2CContentBytes();
/*       */     
/*       */     List<ActivityHandler.awardSevenDay> getS2CAwardInfoList();
/*       */     
/*       */     ActivityHandler.awardSevenDay getS2CAwardInfo(int param1Int);
/*       */     
/*       */     int getS2CAwardInfoCount();
/*       */     
/*       */     List<? extends ActivityHandler.awardSevenDayOrBuilder> getS2CAwardInfoOrBuilderList();
/*       */     
/*       */     ActivityHandler.awardSevenDayOrBuilder getS2CAwardInfoOrBuilder(int param1Int);
/*       */     
/*       */     List<Integer> getS2CHudDaysList();
/*       */     
/*       */     int getS2CHudDaysCount();
/*       */     
/*       */     int getS2CHudDays(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface OpenSevenDayRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SDay();
/*       */     
/*       */     int getC2SDay();
/*       */   }
/*       */   
/*       */   public static interface ReSetluckyAwardResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     List<ItemOuterClass.MiniItem> getS2CAwardsList();
/*       */     
/*       */     ItemOuterClass.MiniItem getS2CAwards(int param1Int);
/*       */     
/*       */     int getS2CAwardsCount();
/*       */     
/*       */     List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CAwardsOrBuilderList();
/*       */     
/*       */     ItemOuterClass.MiniItemOrBuilder getS2CAwardsOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface ReSetluckyAwardRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface LuckyAwardViewResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     List<ItemOuterClass.MiniItem> getS2CDataList();
/*       */     
/*       */     ItemOuterClass.MiniItem getS2CData(int param1Int);
/*       */     
/*       */     int getS2CDataCount();
/*       */     
/*       */     List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CDataOrBuilderList();
/*       */     
/*       */     ItemOuterClass.MiniItemOrBuilder getS2CDataOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface LuckyAwardViewRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface ActivityLuckyAwardViewResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     boolean hasS2CLeftRefreshTime();
/*       */     
/*       */     int getS2CLeftRefreshTime();
/*       */     
/*       */     List<ItemOuterClass.MiniItem> getS2CAwardsList();
/*       */     
/*       */     ItemOuterClass.MiniItem getS2CAwards(int param1Int);
/*       */     
/*       */     int getS2CAwardsCount();
/*       */     
/*       */     List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CAwardsOrBuilderList();
/*       */     
/*       */     ItemOuterClass.MiniItemOrBuilder getS2CAwardsOrBuilder(int param1Int);
/*       */     
/*       */     List<ItemOuterClass.MiniItem> getS2CRecommendAwardsList();
/*       */     
/*       */     ItemOuterClass.MiniItem getS2CRecommendAwards(int param1Int);
/*       */     
/*       */     int getS2CRecommendAwardsCount();
/*       */     
/*       */     List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CRecommendAwardsOrBuilderList();
/*       */     
/*       */     ItemOuterClass.MiniItemOrBuilder getS2CRecommendAwardsOrBuilder(int param1Int);
/*       */     
/*       */     List<ActivityHandler.awardInfo> getS2CDrawedAwardsList();
/*       */     
/*       */     ActivityHandler.awardInfo getS2CDrawedAwards(int param1Int);
/*       */     
/*       */     int getS2CDrawedAwardsCount();
/*       */     
/*       */     List<? extends ActivityHandler.awardInfoOrBuilder> getS2CDrawedAwardsOrBuilderList();
/*       */     
/*       */     ActivityHandler.awardInfoOrBuilder getS2CDrawedAwardsOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface awardInfoOrBuilder extends MessageOrBuilder {
/*       */     boolean hasPos();
/*       */     
/*       */     int getPos();
/*       */     
/*       */     boolean hasItemInfo();
/*       */     
/*       */     ItemOuterClass.MiniItem getItemInfo();
/*       */     
/*       */     ItemOuterClass.MiniItemOrBuilder getItemInfoOrBuilder();
/*       */   }
/*       */   
/*       */   public static interface ActivityLuckyAwardViewRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface ActivityOpenFundsResOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     boolean hasS2CHasBuyNum();
/*       */     
/*       */     int getS2CHasBuyNum();
/*       */     
/*       */     boolean hasS2CNeedDiamond();
/*       */     
/*       */     int getS2CNeedDiamond();
/*       */     
/*       */     boolean hasS2CNeedVipLevel();
/*       */     
/*       */     int getS2CNeedVipLevel();
/*       */     
/*       */     boolean hasS2CBuyState();
/*       */     
/*       */     int getS2CBuyState();
/*       */     
/*       */     List<ActivityHandler.openFundsAward> getS2CDataList();
/*       */     
/*       */     ActivityHandler.openFundsAward getS2CData(int param1Int);
/*       */     
/*       */     int getS2CDataCount();
/*       */     
/*       */     List<? extends ActivityHandler.openFundsAwardOrBuilder> getS2CDataOrBuilderList();
/*       */     
/*       */     ActivityHandler.openFundsAwardOrBuilder getS2CDataOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface ActivityOpenFundsReqOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface ActivityBuyFundsResOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface ActivityBuyFundsReqOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface ActivityLevelOrSwordResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     boolean hasS2CBeginTime();
/*       */     
/*       */     String getS2CBeginTime();
/*       */     
/*       */     ByteString getS2CBeginTimeBytes();
/*       */     
/*       */     boolean hasS2CEndTime();
/*       */     
/*       */     String getS2CEndTime();
/*       */     
/*       */     ByteString getS2CEndTimeBytes();
/*       */     
/*       */     boolean hasS2CContent();
/*       */     
/*       */     String getS2CContent();
/*       */     
/*       */     ByteString getS2CContentBytes();
/*       */     
/*       */     List<ActivityHandler.awardState> getS2CDataList();
/*       */     
/*       */     ActivityHandler.awardState getS2CData(int param1Int);
/*       */     
/*       */     int getS2CDataCount();
/*       */     
/*       */     List<? extends ActivityHandler.awardStateOrBuilder> getS2CDataOrBuilderList();
/*       */     
/*       */     ActivityHandler.awardStateOrBuilder getS2CDataOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface ActivityLevelOrSwordRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SActivityId();
/*       */     
/*       */     int getC2SActivityId();
/*       */   }
/*       */   
/*       */   public static interface ActivityNoticeResOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     boolean hasS2CContext();
/*       */     
/*       */     String getS2CContext();
/*       */     
/*       */     ByteString getS2CContextBytes();
/*       */   }
/*       */   
/*       */   public static interface ActivityNoticeReqOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface ActivityAwardResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     boolean hasS2CActivityHud();
/*       */     
/*       */     ActivityHandler.ActivityListInfo getS2CActivityHud();
/*       */     
/*       */     ActivityHandler.ActivityListInfoOrBuilder getS2CActivityHudOrBuilder();
/*       */   }
/*       */   
/*       */   public static interface ActivityAwardRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CAwardId();
/*       */     
/*       */     int getS2CAwardId();
/*       */     
/*       */     boolean hasS2CActivityId();
/*       */     
/*       */     int getS2CActivityId();
/*       */   }
/*       */   
/*       */   public static interface ConsumeTotalResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     boolean hasS2CData();
/*       */     
/*       */     ActivityHandler.totalInfo getS2CData();
/*       */     
/*       */     ActivityHandler.totalInfoOrBuilder getS2CDataOrBuilder();
/*       */   }
/*       */   
/*       */   public static interface ConsumeTotalRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface PayTotalResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     boolean hasS2CData();
/*       */     
/*       */     ActivityHandler.totalInfo getS2CData();
/*       */     
/*       */     ActivityHandler.totalInfoOrBuilder getS2CDataOrBuilder();
/*       */   }
/*       */   
/*       */   public static interface PayTotalRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface openFundsAwardOrBuilder extends MessageOrBuilder {
/*       */     boolean hasAward();
/*       */     
/*       */     ActivityHandler.awardState getAward();
/*       */     
/*       */     ActivityHandler.awardStateOrBuilder getAwardOrBuilder();
/*       */     
/*       */     boolean hasType();
/*       */     
/*       */     int getType();
/*       */     
/*       */     boolean hasValue();
/*       */     
/*       */     int getValue();
/*       */     
/*       */     boolean hasDiamond();
/*       */     
/*       */     int getDiamond();
/*       */   }
/*       */   
/*       */   public static interface awardSevenDayOrBuilder extends MessageOrBuilder {
/*       */     boolean hasState();
/*       */     
/*       */     int getState();
/*       */     
/*       */     boolean hasAwardId();
/*       */     
/*       */     int getAwardId();
/*       */     
/*       */     boolean hasCurrNum();
/*       */     
/*       */     int getCurrNum();
/*       */     
/*       */     boolean hasNeedNum();
/*       */     
/*       */     int getNeedNum();
/*       */     
/*       */     boolean hasCondition();
/*       */     
/*       */     String getCondition();
/*       */     
/*       */     ByteString getConditionBytes();
/*       */     
/*       */     boolean hasConValue();
/*       */     
/*       */     int getConValue();
/*       */     
/*       */     List<ItemOuterClass.MiniItem> getAwardItemsList();
/*       */     
/*       */     ItemOuterClass.MiniItem getAwardItems(int param1Int);
/*       */     
/*       */     int getAwardItemsCount();
/*       */     
/*       */     List<? extends ItemOuterClass.MiniItemOrBuilder> getAwardItemsOrBuilderList();
/*       */     
/*       */     ItemOuterClass.MiniItemOrBuilder getAwardItemsOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface awardStateOrBuilder extends MessageOrBuilder {
/*       */     boolean hasState();
/*       */     
/*       */     int getState();
/*       */     
/*       */     boolean hasAwardId();
/*       */     
/*       */     int getAwardId();
/*       */     
/*       */     boolean hasNeedValue();
/*       */     
/*       */     int getNeedValue();
/*       */     
/*       */     List<ItemOuterClass.MiniItem> getAwardItemsList();
/*       */     
/*       */     ItemOuterClass.MiniItem getAwardItems(int param1Int);
/*       */     
/*       */     int getAwardItemsCount();
/*       */     
/*       */     List<? extends ItemOuterClass.MiniItemOrBuilder> getAwardItemsOrBuilderList();
/*       */     
/*       */     ItemOuterClass.MiniItemOrBuilder getAwardItemsOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface totalInfoOrBuilder extends MessageOrBuilder {
/*       */     boolean hasBeginTime();
/*       */     
/*       */     String getBeginTime();
/*       */     
/*       */     ByteString getBeginTimeBytes();
/*       */     
/*       */     boolean hasEndTime();
/*       */     
/*       */     String getEndTime();
/*       */     
/*       */     ByteString getEndTimeBytes();
/*       */     
/*       */     boolean hasDescribe();
/*       */     
/*       */     String getDescribe();
/*       */     
/*       */     ByteString getDescribeBytes();
/*       */     
/*       */     List<ActivityHandler.awardPreview> getAwardsList();
/*       */     
/*       */     ActivityHandler.awardPreview getAwards(int param1Int);
/*       */     
/*       */     int getAwardsCount();
/*       */     
/*       */     List<? extends ActivityHandler.awardPreviewOrBuilder> getAwardsOrBuilderList();
/*       */     
/*       */     ActivityHandler.awardPreviewOrBuilder getAwardsOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface awardPreviewOrBuilder extends MessageOrBuilder {
/*       */     boolean hasCurrNum();
/*       */     
/*       */     int getCurrNum();
/*       */     
/*       */     boolean hasNeedNum();
/*       */     
/*       */     int getNeedNum();
/*       */     
/*       */     List<ItemOuterClass.MiniItem> getAwardItemsList();
/*       */     
/*       */     ItemOuterClass.MiniItem getAwardItems(int param1Int);
/*       */     
/*       */     int getAwardItemsCount();
/*       */     
/*       */     List<? extends ItemOuterClass.MiniItemOrBuilder> getAwardItemsOrBuilderList();
/*       */     
/*       */     ItemOuterClass.MiniItemOrBuilder getAwardItemsOrBuilder(int param1Int);
/*       */     
/*       */     boolean hasState();
/*       */     
/*       */     int getState();
/*       */     
/*       */     boolean hasAwardId();
/*       */     
/*       */     int getAwardId();
/*       */   }
/*       */   
/*       */   public static interface PaySecondResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     List<ItemOuterClass.MiniItem> getS2CAwardItemsList();
/*       */     
/*       */     ItemOuterClass.MiniItem getS2CAwardItems(int param1Int);
/*       */     
/*       */     int getS2CAwardItemsCount();
/*       */     
/*       */     List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CAwardItemsOrBuilderList();
/*       */     
/*       */     ItemOuterClass.MiniItemOrBuilder getS2CAwardItemsOrBuilder(int param1Int);
/*       */     
/*       */     boolean hasS2CState();
/*       */     
/*       */     int getS2CState();
/*       */     
/*       */     boolean hasS2CAwardId();
/*       */     
/*       */     int getS2CAwardId();
/*       */   }
/*       */   
/*       */   public static interface PaySecondRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface PayFirstResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     List<ItemOuterClass.MiniItem> getS2CAwardItemsList();
/*       */     
/*       */     ItemOuterClass.MiniItem getS2CAwardItems(int param1Int);
/*       */     
/*       */     int getS2CAwardItemsCount();
/*       */     
/*       */     List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CAwardItemsOrBuilderList();
/*       */     
/*       */     ItemOuterClass.MiniItemOrBuilder getS2CAwardItemsOrBuilder(int param1Int);
/*       */     
/*       */     boolean hasS2CState();
/*       */     
/*       */     int getS2CState();
/*       */     
/*       */     boolean hasS2CAwardId();
/*       */     
/*       */     int getS2CAwardId();
/*       */   }
/*       */   
/*       */   public static interface PayFirstRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface ActivityInviteCodeResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface ActivityInviteCodeRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SInviteCode();
/*       */     
/*       */     String getC2SInviteCode();
/*       */     
/*       */     ByteString getC2SInviteCodeBytes();
/*       */   }
/*       */   
/*       */   public static interface InterestActivityAdResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     List<ActivityHandler.ActivityListInfo> getS2CActivityListList();
/*       */     
/*       */     ActivityHandler.ActivityListInfo getS2CActivityList(int param1Int);
/*       */     
/*       */     int getS2CActivityListCount();
/*       */     
/*       */     List<? extends ActivityHandler.ActivityListInfoOrBuilder> getS2CActivityListOrBuilderList();
/*       */     
/*       */     ActivityHandler.ActivityListInfoOrBuilder getS2CActivityListOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface InterestActivityAdRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface ActivityListInfoOrBuilder extends MessageOrBuilder {
/*       */     boolean hasActivityId();
/*       */     
/*       */     int getActivityId();
/*       */     
/*       */     boolean hasHudNum();
/*       */     
/*       */     int getHudNum();
/*       */   }
/*       */   
/*       */   public static interface ActivityLsOrBuilder extends MessageOrBuilder {
/*       */     boolean hasId();
/*       */     
/*       */     int getId();
/*       */   }
/*       */ }


/* Location:              D:\Yxdl\xmds-server\mmoarpg-game.jar!\pomelo\area\ActivityHandler.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */