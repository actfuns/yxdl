/*       */ package pomelo.area;
/*       */ 
/*       */ import com.google.protobuf.AbstractMessage;
/*       */ import com.google.protobuf.AbstractMessageLite;
/*       */ import com.google.protobuf.AbstractParser;
/*       */ import com.google.protobuf.ByteString;
/*       */ import com.google.protobuf.CodedInputStream;
/*       */ import com.google.protobuf.CodedOutputStream;
/*       */ import com.google.protobuf.Descriptors;
/*       */ import com.google.protobuf.ExtensionRegistry;
/*       */ import com.google.protobuf.ExtensionRegistryLite;
/*       */ import com.google.protobuf.GeneratedMessage;
/*       */ import com.google.protobuf.InvalidProtocolBufferException;
/*       */ import com.google.protobuf.LazyStringArrayList;
/*       */ import com.google.protobuf.LazyStringList;
/*       */ import com.google.protobuf.Message;
/*       */ import com.google.protobuf.MessageLite;
/*       */ import com.google.protobuf.MessageOrBuilder;
/*       */ import com.google.protobuf.Parser;
/*       */ import com.google.protobuf.ProtocolStringList;
/*       */ import com.google.protobuf.RepeatedFieldBuilder;
/*       */ import com.google.protobuf.SingleFieldBuilder;
/*       */ import com.google.protobuf.UnknownFieldSet;
/*       */ import java.io.IOException;
/*       */ import java.io.InputStream;
/*       */ import java.io.ObjectStreamException;
/*       */ import java.util.ArrayList;
/*       */ import java.util.Collection;
/*       */ import java.util.Collections;
/*       */ import java.util.List;
/*       */ import pomelo.Common;
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ public final class FriendHandler
/*       */ {
/*       */   public static void registerAllExtensions(ExtensionRegistry registry) {}
/*       */   
/*       */   public static final class Position
/*       */     extends GeneratedMessage
/*       */     implements PositionOrBuilder
/*       */   {
/*   714 */     private static final Position defaultInstance = new Position(true); private final UnknownFieldSet unknownFields; private Position(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private Position(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static Position getDefaultInstance() { return defaultInstance; } public Position getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private Position(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.targetX_ = input.readInt32(); break;case 16: this.bitField0_ |= 0x2; this.targetY_ = input.readInt32(); break;case 26: bs = input.readBytes(); this.bitField0_ |= 0x4; this.areaName_ = bs; break;case 32: this.bitField0_ |= 0x8; this.areaId_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_Position_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_Position_fieldAccessorTable.ensureFieldAccessorsInitialized(Position.class, Builder.class); } public static Parser<Position> PARSER = (Parser<Position>)new AbstractParser<Position>() { public FriendHandler.Position parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.Position(input, extensionRegistry); } }; private int bitField0_; public static final int TARGETX_FIELD_NUMBER = 1; private int targetX_; public static final int TARGETY_FIELD_NUMBER = 2; private int targetY_; public static final int AREANAME_FIELD_NUMBER = 3; private Object areaName_; public static final int AREAID_FIELD_NUMBER = 4; private int areaId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<Position> getParserForType() { return PARSER; } public boolean hasTargetX() { return ((this.bitField0_ & 0x1) == 1); } public int getTargetX() { return this.targetX_; } public boolean hasTargetY() { return ((this.bitField0_ & 0x2) == 2); } public int getTargetY() { return this.targetY_; } public boolean hasAreaName() { return ((this.bitField0_ & 0x4) == 4); } public String getAreaName() { Object ref = this.areaName_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.areaName_ = s;  return s; } public ByteString getAreaNameBytes() { Object ref = this.areaName_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.areaName_ = b; return b; }  return (ByteString)ref; } public boolean hasAreaId() { return ((this.bitField0_ & 0x8) == 8); } public int getAreaId() { return this.areaId_; } private void initFields() { this.targetX_ = 0; this.targetY_ = 0; this.areaName_ = ""; this.areaId_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.targetX_);  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.targetY_);  if ((this.bitField0_ & 0x4) == 4) output.writeBytes(3, getAreaNameBytes());  if ((this.bitField0_ & 0x8) == 8) output.writeInt32(4, this.areaId_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.targetX_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.targetY_);  if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeBytesSize(3, getAreaNameBytes());  if ((this.bitField0_ & 0x8) == 8) size += CodedOutputStream.computeInt32Size(4, this.areaId_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static Position parseFrom(ByteString data) throws InvalidProtocolBufferException { return (Position)PARSER.parseFrom(data); } public static Position parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (Position)PARSER.parseFrom(data, extensionRegistry); } public static Position parseFrom(byte[] data) throws InvalidProtocolBufferException { return (Position)PARSER.parseFrom(data); } public static Position parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (Position)PARSER.parseFrom(data, extensionRegistry); } public static Position parseFrom(InputStream input) throws IOException { return (Position)PARSER.parseFrom(input); } public static Position parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (Position)PARSER.parseFrom(input, extensionRegistry); } public static Position parseDelimitedFrom(InputStream input) throws IOException { return (Position)PARSER.parseDelimitedFrom(input); } public static Position parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (Position)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static Position parseFrom(CodedInputStream input) throws IOException { return (Position)PARSER.parseFrom(input); } public static Position parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (Position)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(Position prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.PositionOrBuilder {
/*   715 */       private int bitField0_; private int targetX_; private int targetY_; private Object areaName_; private int areaId_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_Position_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_Position_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.Position.class, Builder.class); } private Builder() { this.areaName_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.areaName_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.Position.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.targetX_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.targetY_ = 0; this.bitField0_ &= 0xFFFFFFFD; this.areaName_ = ""; this.bitField0_ &= 0xFFFFFFFB; this.areaId_ = 0; this.bitField0_ &= 0xFFFFFFF7; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_Position_descriptor; } public FriendHandler.Position getDefaultInstanceForType() { return FriendHandler.Position.getDefaultInstance(); } public FriendHandler.Position build() { FriendHandler.Position result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.Position buildPartial() { FriendHandler.Position result = new FriendHandler.Position(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.targetX_ = this.targetX_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.targetY_ = this.targetY_; if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;  result.areaName_ = this.areaName_; if ((from_bitField0_ & 0x8) == 8) to_bitField0_ |= 0x8;  result.areaId_ = this.areaId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.Position) return mergeFrom((FriendHandler.Position)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.Position other) { if (other == FriendHandler.Position.getDefaultInstance()) return this;  if (other.hasTargetX()) setTargetX(other.getTargetX());  if (other.hasTargetY()) setTargetY(other.getTargetY());  if (other.hasAreaName()) { this.bitField0_ |= 0x4; this.areaName_ = other.areaName_; onChanged(); }  if (other.hasAreaId()) setAreaId(other.getAreaId());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.Position parsedMessage = null; try { parsedMessage = (FriendHandler.Position)FriendHandler.Position.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.Position)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasTargetX() { return ((this.bitField0_ & 0x1) == 1); } public int getTargetX() { return this.targetX_; } public Builder setTargetX(int value) { this.bitField0_ |= 0x1; this.targetX_ = value; onChanged(); return this; } public Builder clearTargetX() { this.bitField0_ &= 0xFFFFFFFE; this.targetX_ = 0; onChanged(); return this; } public boolean hasTargetY() { return ((this.bitField0_ & 0x2) == 2); } public int getTargetY() { return this.targetY_; } public Builder setTargetY(int value) { this.bitField0_ |= 0x2; this.targetY_ = value; onChanged(); return this; } public Builder clearTargetY() { this.bitField0_ &= 0xFFFFFFFD; this.targetY_ = 0; onChanged(); return this; } public boolean hasAreaName() { return ((this.bitField0_ & 0x4) == 4); } public String getAreaName() { Object ref = this.areaName_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.areaName_ = s;  return s; }  return (String)ref; } public ByteString getAreaNameBytes() { Object ref = this.areaName_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.areaName_ = b; return b; }  return (ByteString)ref; } public Builder setAreaName(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x4; this.areaName_ = value; onChanged(); return this; } public Builder clearAreaName() { this.bitField0_ &= 0xFFFFFFFB; this.areaName_ = FriendHandler.Position.getDefaultInstance().getAreaName(); onChanged(); return this; } public Builder setAreaNameBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x4; this.areaName_ = value; onChanged(); return this; } public boolean hasAreaId() { return ((this.bitField0_ & 0x8) == 8); } public int getAreaId() { return this.areaId_; } public Builder setAreaId(int value) { this.bitField0_ |= 0x8; this.areaId_ = value; onChanged(); return this; } public Builder clearAreaId() { this.bitField0_ &= 0xFFFFFFF7; this.areaId_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class PlayerInfo
/*       */     extends GeneratedMessage
/*       */     implements PlayerInfoOrBuilder
/*       */   {
/*  3817 */     private static final PlayerInfo defaultInstance = new PlayerInfo(true); private final UnknownFieldSet unknownFields; private PlayerInfo(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private PlayerInfo(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static PlayerInfo getDefaultInstance() { return defaultInstance; } public PlayerInfo getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private PlayerInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString byteString1; FriendHandler.Position.Builder subBuilder; ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: byteString1 = input.readBytes(); this.bitField0_ |= 0x1; this.id_ = byteString1; break;case 16: this.bitField0_ |= 0x2; this.pro_ = input.readInt32(); break;case 26: byteString1 = input.readBytes(); this.bitField0_ |= 0x4; this.guildId_ = byteString1; break;case 34: byteString1 = input.readBytes(); this.bitField0_ |= 0x8; this.guildName_ = byteString1; break;case 42: byteString1 = input.readBytes(); this.bitField0_ |= 0x10; this.name_ = byteString1; break;case 48: this.bitField0_ |= 0x20; this.level_ = input.readInt32(); break;case 56: this.bitField0_ |= 0x40; this.stageLevel_ = input.readInt32(); break;case 64: this.bitField0_ |= 0x80; this.vip_ = input.readInt32(); break;case 72: this.bitField0_ |= 0x100; this.friendLv_ = input.readInt32(); break;case 80: this.bitField0_ |= 0x200; this.isConcerned_ = input.readInt32(); break;case 88: this.bitField0_ |= 0x400; this.isOnline_ = input.readInt32(); break;case 98: subBuilder = null; if ((this.bitField0_ & 0x800) == 2048) subBuilder = this.currentPos_.toBuilder();  this.currentPos_ = (FriendHandler.Position)input.readMessage(FriendHandler.Position.PARSER, extensionRegistry); if (subBuilder != null) { subBuilder.mergeFrom(this.currentPos_); this.currentPos_ = subBuilder.buildPartial(); }  this.bitField0_ |= 0x800; break;case 104: this.bitField0_ |= 0x1000; this.fightPower_ = input.readInt32(); break;case 112: this.bitField0_ |= 0x2000; this.hasAlly_ = input.readInt32(); break;case 120: this.bitField0_ |= 0x4000; this.icon_ = input.readInt32(); break;case 128: this.bitField0_ |= 0x8000; this.chouHenPoint_ = input.readInt32(); break;case 138: bs = input.readBytes(); this.bitField0_ |= 0x10000; this.createTimeStamp_ = bs; break;case 146: bs = input.readBytes(); this.bitField0_ |= 0x20000; this.createTime_ = bs; break;case 152: this.bitField0_ |= 0x40000; this.addFriendShipPoint_ = input.readInt32(); break;case 160: this.bitField0_ |= 0x80000; this.type_ = input.readInt32(); break;case 170: bs = input.readBytes(); this.bitField0_ |= 0x100000; this.time_ = bs; break;case 176: this.bitField0_ |= 0x200000; this.isHaveDaoYou_ = input.readInt32(); break;case 186: if ((mutable_bitField0_ & 0x400000) != 4194304) { this.avatars_ = new ArrayList<>(); mutable_bitField0_ |= 0x400000; }  this.avatars_.add(input.readMessage(Common.Avatar.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x400000) == 4194304) this.avatars_ = Collections.unmodifiableList(this.avatars_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_PlayerInfo_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_PlayerInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(PlayerInfo.class, Builder.class); } public static Parser<PlayerInfo> PARSER = (Parser<PlayerInfo>)new AbstractParser<PlayerInfo>() { public FriendHandler.PlayerInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.PlayerInfo(input, extensionRegistry); } }
/*  3818 */     ; private int bitField0_; public static final int ID_FIELD_NUMBER = 1; private Object id_; public static final int PRO_FIELD_NUMBER = 2; private int pro_; public static final int GUILDID_FIELD_NUMBER = 3; private Object guildId_; public static final int GUILDNAME_FIELD_NUMBER = 4; private Object guildName_; public static final int NAME_FIELD_NUMBER = 5; private Object name_; public static final int LEVEL_FIELD_NUMBER = 6; private int level_; public static final int STAGELEVEL_FIELD_NUMBER = 7; private int stageLevel_; public static final int VIP_FIELD_NUMBER = 8; private int vip_; public static final int FRIENDLV_FIELD_NUMBER = 9; private int friendLv_; public static final int ISCONCERNED_FIELD_NUMBER = 10; private int isConcerned_; public static final int ISONLINE_FIELD_NUMBER = 11; private int isOnline_; public static final int CURRENTPOS_FIELD_NUMBER = 12; private FriendHandler.Position currentPos_; public static final int FIGHTPOWER_FIELD_NUMBER = 13; private int fightPower_; public static final int HASALLY_FIELD_NUMBER = 14; private int hasAlly_; public static final int ICON_FIELD_NUMBER = 15; private int icon_; public static final int CHOUHENPOINT_FIELD_NUMBER = 16; private int chouHenPoint_; public static final int CREATETIMESTAMP_FIELD_NUMBER = 17; private Object createTimeStamp_; public static final int CREATETIME_FIELD_NUMBER = 18; private Object createTime_; public static final int ADDFRIENDSHIPPOINT_FIELD_NUMBER = 19; private int addFriendShipPoint_; public static final int TYPE_FIELD_NUMBER = 20; private int type_; public static final int TIME_FIELD_NUMBER = 21; private Object time_; public static final int ISHAVEDAOYOU_FIELD_NUMBER = 22; private int isHaveDaoYou_; public static final int AVATARS_FIELD_NUMBER = 23; private List<Common.Avatar> avatars_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<PlayerInfo> getParserForType() { return PARSER; } public boolean hasId() { return ((this.bitField0_ & 0x1) == 1); } public String getId() { Object ref = this.id_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.id_ = s;  return s; } public ByteString getIdBytes() { Object ref = this.id_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.id_ = b; return b; }  return (ByteString)ref; } public boolean hasPro() { return ((this.bitField0_ & 0x2) == 2); } public int getPro() { return this.pro_; } public boolean hasGuildId() { return ((this.bitField0_ & 0x4) == 4); } public String getGuildId() { Object ref = this.guildId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.guildId_ = s;  return s; } public ByteString getGuildIdBytes() { Object ref = this.guildId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.guildId_ = b; return b; }  return (ByteString)ref; } static { defaultInstance.initFields(); } public boolean hasGuildName() { return ((this.bitField0_ & 0x8) == 8); } public String getGuildName() { Object ref = this.guildName_;
/*       */       if (ref instanceof String)
/*       */         return (String)ref; 
/*       */       ByteString bs = (ByteString)ref;
/*       */       String s = bs.toStringUtf8();
/*       */       if (bs.isValidUtf8())
/*       */         this.guildName_ = s; 
/*       */       return s; } public ByteString getGuildNameBytes() { Object ref = this.guildName_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.guildName_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref; } public boolean hasName() { return ((this.bitField0_ & 0x10) == 16); } public String getName() { Object ref = this.name_;
/*       */       if (ref instanceof String)
/*       */         return (String)ref; 
/*       */       ByteString bs = (ByteString)ref;
/*       */       String s = bs.toStringUtf8();
/*       */       if (bs.isValidUtf8())
/*       */         this.name_ = s; 
/*       */       return s; } public ByteString getNameBytes() { Object ref = this.name_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.name_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref; } public boolean hasLevel() { return ((this.bitField0_ & 0x20) == 32); } public int getLevel() { return this.level_; } public boolean hasStageLevel() { return ((this.bitField0_ & 0x40) == 64); } public int getStageLevel() { return this.stageLevel_; } public boolean hasVip() { return ((this.bitField0_ & 0x80) == 128); } public int getVip() { return this.vip_; } public boolean hasFriendLv() { return ((this.bitField0_ & 0x100) == 256); } public int getFriendLv() { return this.friendLv_; } public boolean hasIsConcerned() { return ((this.bitField0_ & 0x200) == 512); } public int getIsConcerned() { return this.isConcerned_; } public boolean hasIsOnline() { return ((this.bitField0_ & 0x400) == 1024); } public int getIsOnline() { return this.isOnline_; } public boolean hasCurrentPos() { return ((this.bitField0_ & 0x800) == 2048); } public FriendHandler.Position getCurrentPos() { return this.currentPos_; } public FriendHandler.PositionOrBuilder getCurrentPosOrBuilder() { return this.currentPos_; } public boolean hasFightPower() { return ((this.bitField0_ & 0x1000) == 4096); } public int getFightPower() { return this.fightPower_; } public boolean hasHasAlly() { return ((this.bitField0_ & 0x2000) == 8192); } public int getHasAlly() { return this.hasAlly_; } public boolean hasIcon() { return ((this.bitField0_ & 0x4000) == 16384); } public int getIcon() { return this.icon_; } public boolean hasChouHenPoint() { return ((this.bitField0_ & 0x8000) == 32768); } public int getChouHenPoint() { return this.chouHenPoint_; } public boolean hasCreateTimeStamp() { return ((this.bitField0_ & 0x10000) == 65536); } public String getCreateTimeStamp() { Object ref = this.createTimeStamp_;
/*       */       if (ref instanceof String)
/*       */         return (String)ref; 
/*       */       ByteString bs = (ByteString)ref;
/*       */       String s = bs.toStringUtf8();
/*       */       if (bs.isValidUtf8())
/*       */         this.createTimeStamp_ = s; 
/*       */       return s; } public ByteString getCreateTimeStampBytes() { Object ref = this.createTimeStamp_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.createTimeStamp_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref; } public boolean hasCreateTime() { return ((this.bitField0_ & 0x20000) == 131072); } public String getCreateTime() { Object ref = this.createTime_;
/*       */       if (ref instanceof String)
/*       */         return (String)ref; 
/*       */       ByteString bs = (ByteString)ref;
/*       */       String s = bs.toStringUtf8();
/*       */       if (bs.isValidUtf8())
/*       */         this.createTime_ = s; 
/*       */       return s; } public ByteString getCreateTimeBytes() { Object ref = this.createTime_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.createTime_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref; } public boolean hasAddFriendShipPoint() { return ((this.bitField0_ & 0x40000) == 262144); } public int getAddFriendShipPoint() { return this.addFriendShipPoint_; } public boolean hasType() { return ((this.bitField0_ & 0x80000) == 524288); } public int getType() { return this.type_; } public boolean hasTime() { return ((this.bitField0_ & 0x100000) == 1048576); } public String getTime() { Object ref = this.time_;
/*       */       if (ref instanceof String)
/*       */         return (String)ref; 
/*       */       ByteString bs = (ByteString)ref;
/*       */       String s = bs.toStringUtf8();
/*       */       if (bs.isValidUtf8())
/*       */         this.time_ = s; 
/*       */       return s; } public ByteString getTimeBytes() { Object ref = this.time_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.time_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref; } public boolean hasIsHaveDaoYou() { return ((this.bitField0_ & 0x200000) == 2097152); } public int getIsHaveDaoYou() { return this.isHaveDaoYou_; } public List<Common.Avatar> getAvatarsList() { return this.avatars_; } public List<? extends Common.AvatarOrBuilder> getAvatarsOrBuilderList() { return (List)this.avatars_; } public int getAvatarsCount() { return this.avatars_.size(); } public Common.Avatar getAvatars(int index) { return this.avatars_.get(index); } public Common.AvatarOrBuilder getAvatarsOrBuilder(int index) { return (Common.AvatarOrBuilder)this.avatars_.get(index); } private void initFields() { this.id_ = "";
/*       */       this.pro_ = 0;
/*       */       this.guildId_ = "";
/*       */       this.guildName_ = "";
/*       */       this.name_ = "";
/*       */       this.level_ = 0;
/*       */       this.stageLevel_ = 0;
/*       */       this.vip_ = 0;
/*       */       this.friendLv_ = 0;
/*       */       this.isConcerned_ = 0;
/*       */       this.isOnline_ = 0;
/*       */       this.currentPos_ = FriendHandler.Position.getDefaultInstance();
/*       */       this.fightPower_ = 0;
/*       */       this.hasAlly_ = 0;
/*       */       this.icon_ = 0;
/*       */       this.chouHenPoint_ = 0;
/*       */       this.createTimeStamp_ = "";
/*       */       this.createTime_ = "";
/*       */       this.addFriendShipPoint_ = 0;
/*       */       this.type_ = 0;
/*       */       this.time_ = "";
/*       */       this.isHaveDaoYou_ = 0;
/*       */       this.avatars_ = Collections.emptyList(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1)
/*       */         return true; 
/*       */       if (isInitialized == 0)
/*       */         return false; 
/*       */       for (int i = 0; i < getAvatarsCount(); i++) {
/*       */         if (!getAvatars(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0;
/*       */           return false;
/*       */         } 
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1)
/*       */         output.writeBytes(1, getIdBytes()); 
/*       */       if ((this.bitField0_ & 0x2) == 2)
/*       */         output.writeInt32(2, this.pro_); 
/*       */       if ((this.bitField0_ & 0x4) == 4)
/*       */         output.writeBytes(3, getGuildIdBytes()); 
/*       */       if ((this.bitField0_ & 0x8) == 8)
/*       */         output.writeBytes(4, getGuildNameBytes()); 
/*       */       if ((this.bitField0_ & 0x10) == 16)
/*       */         output.writeBytes(5, getNameBytes()); 
/*       */       if ((this.bitField0_ & 0x20) == 32)
/*       */         output.writeInt32(6, this.level_); 
/*       */       if ((this.bitField0_ & 0x40) == 64)
/*       */         output.writeInt32(7, this.stageLevel_); 
/*       */       if ((this.bitField0_ & 0x80) == 128)
/*       */         output.writeInt32(8, this.vip_); 
/*       */       if ((this.bitField0_ & 0x100) == 256)
/*       */         output.writeInt32(9, this.friendLv_); 
/*       */       if ((this.bitField0_ & 0x200) == 512)
/*       */         output.writeInt32(10, this.isConcerned_); 
/*       */       if ((this.bitField0_ & 0x400) == 1024)
/*       */         output.writeInt32(11, this.isOnline_); 
/*       */       if ((this.bitField0_ & 0x800) == 2048)
/*       */         output.writeMessage(12, (MessageLite)this.currentPos_); 
/*       */       if ((this.bitField0_ & 0x1000) == 4096)
/*       */         output.writeInt32(13, this.fightPower_); 
/*       */       if ((this.bitField0_ & 0x2000) == 8192)
/*       */         output.writeInt32(14, this.hasAlly_); 
/*       */       if ((this.bitField0_ & 0x4000) == 16384)
/*       */         output.writeInt32(15, this.icon_); 
/*       */       if ((this.bitField0_ & 0x8000) == 32768)
/*       */         output.writeInt32(16, this.chouHenPoint_); 
/*       */       if ((this.bitField0_ & 0x10000) == 65536)
/*       */         output.writeBytes(17, getCreateTimeStampBytes()); 
/*       */       if ((this.bitField0_ & 0x20000) == 131072)
/*       */         output.writeBytes(18, getCreateTimeBytes()); 
/*       */       if ((this.bitField0_ & 0x40000) == 262144)
/*       */         output.writeInt32(19, this.addFriendShipPoint_); 
/*       */       if ((this.bitField0_ & 0x80000) == 524288)
/*       */         output.writeInt32(20, this.type_); 
/*       */       if ((this.bitField0_ & 0x100000) == 1048576)
/*       */         output.writeBytes(21, getTimeBytes()); 
/*       */       if ((this.bitField0_ & 0x200000) == 2097152)
/*       */         output.writeInt32(22, this.isHaveDaoYou_); 
/*       */       for (int i = 0; i < this.avatars_.size(); i++)
/*       */         output.writeMessage(23, (MessageLite)this.avatars_.get(i)); 
/*       */       getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize;
/*       */       if (size != -1)
/*       */         return size; 
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1)
/*       */         size += CodedOutputStream.computeBytesSize(1, getIdBytes()); 
/*       */       if ((this.bitField0_ & 0x2) == 2)
/*       */         size += CodedOutputStream.computeInt32Size(2, this.pro_); 
/*       */       if ((this.bitField0_ & 0x4) == 4)
/*       */         size += CodedOutputStream.computeBytesSize(3, getGuildIdBytes()); 
/*       */       if ((this.bitField0_ & 0x8) == 8)
/*       */         size += CodedOutputStream.computeBytesSize(4, getGuildNameBytes()); 
/*       */       if ((this.bitField0_ & 0x10) == 16)
/*       */         size += CodedOutputStream.computeBytesSize(5, getNameBytes()); 
/*       */       if ((this.bitField0_ & 0x20) == 32)
/*       */         size += CodedOutputStream.computeInt32Size(6, this.level_); 
/*       */       if ((this.bitField0_ & 0x40) == 64)
/*       */         size += CodedOutputStream.computeInt32Size(7, this.stageLevel_); 
/*       */       if ((this.bitField0_ & 0x80) == 128)
/*       */         size += CodedOutputStream.computeInt32Size(8, this.vip_); 
/*       */       if ((this.bitField0_ & 0x100) == 256)
/*       */         size += CodedOutputStream.computeInt32Size(9, this.friendLv_); 
/*       */       if ((this.bitField0_ & 0x200) == 512)
/*       */         size += CodedOutputStream.computeInt32Size(10, this.isConcerned_); 
/*       */       if ((this.bitField0_ & 0x400) == 1024)
/*       */         size += CodedOutputStream.computeInt32Size(11, this.isOnline_); 
/*       */       if ((this.bitField0_ & 0x800) == 2048)
/*       */         size += CodedOutputStream.computeMessageSize(12, (MessageLite)this.currentPos_); 
/*       */       if ((this.bitField0_ & 0x1000) == 4096)
/*       */         size += CodedOutputStream.computeInt32Size(13, this.fightPower_); 
/*       */       if ((this.bitField0_ & 0x2000) == 8192)
/*       */         size += CodedOutputStream.computeInt32Size(14, this.hasAlly_); 
/*       */       if ((this.bitField0_ & 0x4000) == 16384)
/*       */         size += CodedOutputStream.computeInt32Size(15, this.icon_); 
/*       */       if ((this.bitField0_ & 0x8000) == 32768)
/*       */         size += CodedOutputStream.computeInt32Size(16, this.chouHenPoint_); 
/*       */       if ((this.bitField0_ & 0x10000) == 65536)
/*       */         size += CodedOutputStream.computeBytesSize(17, getCreateTimeStampBytes()); 
/*       */       if ((this.bitField0_ & 0x20000) == 131072)
/*       */         size += CodedOutputStream.computeBytesSize(18, getCreateTimeBytes()); 
/*       */       if ((this.bitField0_ & 0x40000) == 262144)
/*       */         size += CodedOutputStream.computeInt32Size(19, this.addFriendShipPoint_); 
/*       */       if ((this.bitField0_ & 0x80000) == 524288)
/*       */         size += CodedOutputStream.computeInt32Size(20, this.type_); 
/*       */       if ((this.bitField0_ & 0x100000) == 1048576)
/*       */         size += CodedOutputStream.computeBytesSize(21, getTimeBytes()); 
/*       */       if ((this.bitField0_ & 0x200000) == 2097152)
/*       */         size += CodedOutputStream.computeInt32Size(22, this.isHaveDaoYou_); 
/*       */       for (int i = 0; i < this.avatars_.size(); i++)
/*       */         size += CodedOutputStream.computeMessageSize(23, (MessageLite)this.avatars_.get(i)); 
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size; }
/*       */     protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); }
/*       */     public static PlayerInfo parseFrom(ByteString data) throws InvalidProtocolBufferException { return (PlayerInfo)PARSER.parseFrom(data); }
/*       */     public static PlayerInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PlayerInfo)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static PlayerInfo parseFrom(byte[] data) throws InvalidProtocolBufferException { return (PlayerInfo)PARSER.parseFrom(data); }
/*       */     public static PlayerInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (PlayerInfo)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static PlayerInfo parseFrom(InputStream input) throws IOException { return (PlayerInfo)PARSER.parseFrom(input); }
/*       */     public static PlayerInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PlayerInfo)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static PlayerInfo parseDelimitedFrom(InputStream input) throws IOException { return (PlayerInfo)PARSER.parseDelimitedFrom(input); }
/*       */     public static PlayerInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PlayerInfo)PARSER.parseDelimitedFrom(input, extensionRegistry); }
/*       */     public static PlayerInfo parseFrom(CodedInputStream input) throws IOException { return (PlayerInfo)PARSER.parseFrom(input); }
/*       */     public static PlayerInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (PlayerInfo)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static Builder newBuilder() { return Builder.create(); }
/*       */     public Builder newBuilderForType() { return newBuilder(); }
/*       */     public static Builder newBuilder(PlayerInfo prototype) { return newBuilder().mergeFrom(prototype); }
/*       */     public Builder toBuilder() { return newBuilder(this); }
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent);
/*       */       return builder; }
/*       */     public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.PlayerInfoOrBuilder { private int bitField0_; private Object id_; private int pro_; private Object guildId_; private Object guildName_; private Object name_; private int level_; private int stageLevel_; private int vip_; private int friendLv_; private int isConcerned_; private int isOnline_; private FriendHandler.Position currentPos_; private SingleFieldBuilder<FriendHandler.Position, FriendHandler.Position.Builder, FriendHandler.PositionOrBuilder> currentPosBuilder_; private int fightPower_; private int hasAlly_; private int icon_; private int chouHenPoint_; private Object createTimeStamp_; private Object createTime_; private int addFriendShipPoint_; private int type_; private Object time_; private int isHaveDaoYou_; private List<Common.Avatar> avatars_; private RepeatedFieldBuilder<Common.Avatar, Common.Avatar.Builder, Common.AvatarOrBuilder> avatarsBuilder_;
/*       */       public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_PlayerInfo_descriptor; }
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_PlayerInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.PlayerInfo.class, Builder.class); }
/*       */       private Builder() { this.id_ = "";
/*       */         this.guildId_ = "";
/*       */         this.guildName_ = "";
/*       */         this.name_ = "";
/*       */         this.currentPos_ = FriendHandler.Position.getDefaultInstance();
/*       */         this.createTimeStamp_ = "";
/*       */         this.createTime_ = "";
/*       */         this.time_ = "";
/*       */         this.avatars_ = Collections.emptyList();
/*       */         maybeForceBuilderInitialization(); }
/*       */       private Builder(GeneratedMessage.BuilderParent parent) { super(parent);
/*       */         this.id_ = "";
/*       */         this.guildId_ = "";
/*       */         this.guildName_ = "";
/*       */         this.name_ = "";
/*       */         this.currentPos_ = FriendHandler.Position.getDefaultInstance();
/*       */         this.createTimeStamp_ = "";
/*       */         this.createTime_ = "";
/*       */         this.time_ = "";
/*       */         this.avatars_ = Collections.emptyList();
/*       */         maybeForceBuilderInitialization(); }
/*       */       private void maybeForceBuilderInitialization() { if (FriendHandler.PlayerInfo.alwaysUseFieldBuilders) {
/*       */           getCurrentPosFieldBuilder();
/*       */           getAvatarsFieldBuilder();
/*       */         }  }
/*       */       private static Builder create() { return new Builder(); }
/*       */       public Builder clear() { super.clear();
/*       */         this.id_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.pro_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.guildId_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.guildName_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.name_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.level_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFDF;
/*       */         this.stageLevel_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFBF;
/*       */         this.vip_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFF7F;
/*       */         this.friendLv_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFEFF;
/*       */         this.isConcerned_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFDFF;
/*       */         this.isOnline_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFBFF;
/*       */         if (this.currentPosBuilder_ == null) {
/*       */           this.currentPos_ = FriendHandler.Position.getDefaultInstance();
/*       */         } else {
/*       */           this.currentPosBuilder_.clear();
/*       */         } 
/*       */         this.bitField0_ &= 0xFFFFF7FF;
/*       */         this.fightPower_ = 0;
/*       */         this.bitField0_ &= 0xFFFFEFFF;
/*       */         this.hasAlly_ = 0;
/*       */         this.bitField0_ &= 0xFFFFDFFF;
/*       */         this.icon_ = 0;
/*       */         this.bitField0_ &= 0xFFFFBFFF;
/*       */         this.chouHenPoint_ = 0;
/*       */         this.bitField0_ &= 0xFFFF7FFF;
/*       */         this.createTimeStamp_ = "";
/*       */         this.bitField0_ &= 0xFFFEFFFF;
/*       */         this.createTime_ = "";
/*       */         this.bitField0_ &= 0xFFFDFFFF;
/*       */         this.addFriendShipPoint_ = 0;
/*       */         this.bitField0_ &= 0xFFFBFFFF;
/*       */         this.type_ = 0;
/*       */         this.bitField0_ &= 0xFFF7FFFF;
/*       */         this.time_ = "";
/*       */         this.bitField0_ &= 0xFFEFFFFF;
/*       */         this.isHaveDaoYou_ = 0;
/*       */         this.bitField0_ &= 0xFFDFFFFF;
/*       */         if (this.avatarsBuilder_ == null) {
/*       */           this.avatars_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFBFFFFF;
/*       */         } else {
/*       */           this.avatarsBuilder_.clear();
/*       */         } 
/*       */         return this; }
/*       */       public Builder clone() { return create().mergeFrom(buildPartial()); }
/*       */       public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_PlayerInfo_descriptor; }
/*       */       public FriendHandler.PlayerInfo getDefaultInstanceForType() { return FriendHandler.PlayerInfo.getDefaultInstance(); }
/*       */       public FriendHandler.PlayerInfo build() { FriendHandler.PlayerInfo result = buildPartial();
/*       */         if (!result.isInitialized())
/*       */           throw newUninitializedMessageException(result); 
/*       */         return result; }
/*       */       public FriendHandler.PlayerInfo buildPartial() { FriendHandler.PlayerInfo result = new FriendHandler.PlayerInfo(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1)
/*       */           to_bitField0_ |= 0x1; 
/*       */         result.id_ = this.id_;
/*       */         if ((from_bitField0_ & 0x2) == 2)
/*       */           to_bitField0_ |= 0x2; 
/*       */         result.pro_ = this.pro_;
/*       */         if ((from_bitField0_ & 0x4) == 4)
/*       */           to_bitField0_ |= 0x4; 
/*       */         result.guildId_ = this.guildId_;
/*       */         if ((from_bitField0_ & 0x8) == 8)
/*       */           to_bitField0_ |= 0x8; 
/*       */         result.guildName_ = this.guildName_;
/*       */         if ((from_bitField0_ & 0x10) == 16)
/*       */           to_bitField0_ |= 0x10; 
/*       */         result.name_ = this.name_;
/*       */         if ((from_bitField0_ & 0x20) == 32)
/*       */           to_bitField0_ |= 0x20; 
/*       */         result.level_ = this.level_;
/*       */         if ((from_bitField0_ & 0x40) == 64)
/*       */           to_bitField0_ |= 0x40; 
/*       */         result.stageLevel_ = this.stageLevel_;
/*       */         if ((from_bitField0_ & 0x80) == 128)
/*       */           to_bitField0_ |= 0x80; 
/*       */         result.vip_ = this.vip_;
/*       */         if ((from_bitField0_ & 0x100) == 256)
/*       */           to_bitField0_ |= 0x100; 
/*       */         result.friendLv_ = this.friendLv_;
/*       */         if ((from_bitField0_ & 0x200) == 512)
/*       */           to_bitField0_ |= 0x200; 
/*       */         result.isConcerned_ = this.isConcerned_;
/*       */         if ((from_bitField0_ & 0x400) == 1024)
/*       */           to_bitField0_ |= 0x400; 
/*       */         result.isOnline_ = this.isOnline_;
/*       */         if ((from_bitField0_ & 0x800) == 2048)
/*       */           to_bitField0_ |= 0x800; 
/*       */         if (this.currentPosBuilder_ == null) {
/*       */           result.currentPos_ = this.currentPos_;
/*       */         } else {
/*       */           result.currentPos_ = (FriendHandler.Position)this.currentPosBuilder_.build();
/*       */         } 
/*       */         if ((from_bitField0_ & 0x1000) == 4096)
/*       */           to_bitField0_ |= 0x1000; 
/*       */         result.fightPower_ = this.fightPower_;
/*       */         if ((from_bitField0_ & 0x2000) == 8192)
/*       */           to_bitField0_ |= 0x2000; 
/*       */         result.hasAlly_ = this.hasAlly_;
/*       */         if ((from_bitField0_ & 0x4000) == 16384)
/*       */           to_bitField0_ |= 0x4000; 
/*       */         result.icon_ = this.icon_;
/*       */         if ((from_bitField0_ & 0x8000) == 32768)
/*       */           to_bitField0_ |= 0x8000; 
/*       */         result.chouHenPoint_ = this.chouHenPoint_;
/*       */         if ((from_bitField0_ & 0x10000) == 65536)
/*       */           to_bitField0_ |= 0x10000; 
/*       */         result.createTimeStamp_ = this.createTimeStamp_;
/*       */         if ((from_bitField0_ & 0x20000) == 131072)
/*       */           to_bitField0_ |= 0x20000; 
/*       */         result.createTime_ = this.createTime_;
/*       */         if ((from_bitField0_ & 0x40000) == 262144)
/*       */           to_bitField0_ |= 0x40000; 
/*       */         result.addFriendShipPoint_ = this.addFriendShipPoint_;
/*       */         if ((from_bitField0_ & 0x80000) == 524288)
/*       */           to_bitField0_ |= 0x80000; 
/*       */         result.type_ = this.type_;
/*       */         if ((from_bitField0_ & 0x100000) == 1048576)
/*       */           to_bitField0_ |= 0x100000; 
/*       */         result.time_ = this.time_;
/*       */         if ((from_bitField0_ & 0x200000) == 2097152)
/*       */           to_bitField0_ |= 0x200000; 
/*       */         result.isHaveDaoYou_ = this.isHaveDaoYou_;
/*       */         if (this.avatarsBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x400000) == 4194304) {
/*       */             this.avatars_ = Collections.unmodifiableList(this.avatars_);
/*       */             this.bitField0_ &= 0xFFBFFFFF;
/*       */           } 
/*       */           result.avatars_ = this.avatars_;
/*       */         } else {
/*       */           result.avatars_ = this.avatarsBuilder_.build();
/*       */         } 
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result; }
/*       */       public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.PlayerInfo)
/*       */           return mergeFrom((FriendHandler.PlayerInfo)other); 
/*       */         super.mergeFrom(other);
/*       */         return this; }
/*       */       public Builder mergeFrom(FriendHandler.PlayerInfo other) { if (other == FriendHandler.PlayerInfo.getDefaultInstance())
/*       */           return this; 
/*       */         if (other.hasId()) {
/*       */           this.bitField0_ |= 0x1;
/*       */           this.id_ = other.id_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasPro())
/*       */           setPro(other.getPro()); 
/*       */         if (other.hasGuildId()) {
/*       */           this.bitField0_ |= 0x4;
/*       */           this.guildId_ = other.guildId_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasGuildName()) {
/*       */           this.bitField0_ |= 0x8;
/*       */           this.guildName_ = other.guildName_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasName()) {
/*       */           this.bitField0_ |= 0x10;
/*       */           this.name_ = other.name_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasLevel())
/*       */           setLevel(other.getLevel()); 
/*       */         if (other.hasStageLevel())
/*       */           setStageLevel(other.getStageLevel()); 
/*       */         if (other.hasVip())
/*       */           setVip(other.getVip()); 
/*       */         if (other.hasFriendLv())
/*       */           setFriendLv(other.getFriendLv()); 
/*       */         if (other.hasIsConcerned())
/*       */           setIsConcerned(other.getIsConcerned()); 
/*       */         if (other.hasIsOnline())
/*       */           setIsOnline(other.getIsOnline()); 
/*       */         if (other.hasCurrentPos())
/*       */           mergeCurrentPos(other.getCurrentPos()); 
/*       */         if (other.hasFightPower())
/*       */           setFightPower(other.getFightPower()); 
/*       */         if (other.hasHasAlly())
/*       */           setHasAlly(other.getHasAlly()); 
/*       */         if (other.hasIcon())
/*       */           setIcon(other.getIcon()); 
/*       */         if (other.hasChouHenPoint())
/*       */           setChouHenPoint(other.getChouHenPoint()); 
/*       */         if (other.hasCreateTimeStamp()) {
/*       */           this.bitField0_ |= 0x10000;
/*       */           this.createTimeStamp_ = other.createTimeStamp_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasCreateTime()) {
/*       */           this.bitField0_ |= 0x20000;
/*       */           this.createTime_ = other.createTime_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasAddFriendShipPoint())
/*       */           setAddFriendShipPoint(other.getAddFriendShipPoint()); 
/*       */         if (other.hasType())
/*       */           setType(other.getType()); 
/*       */         if (other.hasTime()) {
/*       */           this.bitField0_ |= 0x100000;
/*       */           this.time_ = other.time_;
/*       */           onChanged();
/*       */         } 
/*       */         if (other.hasIsHaveDaoYou())
/*       */           setIsHaveDaoYou(other.getIsHaveDaoYou()); 
/*       */         if (this.avatarsBuilder_ == null) {
/*       */           if (!other.avatars_.isEmpty()) {
/*       */             if (this.avatars_.isEmpty()) {
/*       */               this.avatars_ = other.avatars_;
/*       */               this.bitField0_ &= 0xFFBFFFFF;
/*       */             } else {
/*       */               ensureAvatarsIsMutable();
/*       */               this.avatars_.addAll(other.avatars_);
/*       */             } 
/*       */             onChanged();
/*       */           } 
/*       */         } else if (!other.avatars_.isEmpty()) {
/*       */           if (this.avatarsBuilder_.isEmpty()) {
/*       */             this.avatarsBuilder_.dispose();
/*       */             this.avatarsBuilder_ = null;
/*       */             this.avatars_ = other.avatars_;
/*       */             this.bitField0_ &= 0xFFBFFFFF;
/*       */             this.avatarsBuilder_ = FriendHandler.PlayerInfo.alwaysUseFieldBuilders ? getAvatarsFieldBuilder() : null;
/*       */           } else {
/*       */             this.avatarsBuilder_.addAllMessages(other.avatars_);
/*       */           } 
/*       */         } 
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this; }
/*       */       public final boolean isInitialized() { for (int i = 0; i < getAvatarsCount(); i++) {
/*       */           if (!getAvatars(i).isInitialized())
/*       */             return false; 
/*       */         } 
/*       */         return true; }
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.PlayerInfo parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (FriendHandler.PlayerInfo)FriendHandler.PlayerInfo.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (FriendHandler.PlayerInfo)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null)
/*       */             mergeFrom(parsedMessage); 
/*       */         } 
/*       */         return this; }
/*       */       public boolean hasId() { return ((this.bitField0_ & 0x1) == 1); }
/*       */       public String getId() { Object ref = this.id_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.id_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref; }
/*       */       public ByteString getIdBytes() { Object ref = this.id_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.id_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref; }
/*       */       public Builder setId(String value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x1;
/*       */         this.id_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearId() { this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.id_ = FriendHandler.PlayerInfo.getDefaultInstance().getId();
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder setIdBytes(ByteString value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x1;
/*       */         this.id_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasPro() { return ((this.bitField0_ & 0x2) == 2); }
/*       */       public int getPro() { return this.pro_; }
/*       */       public Builder setPro(int value) { this.bitField0_ |= 0x2;
/*       */         this.pro_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearPro() { this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.pro_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasGuildId() { return ((this.bitField0_ & 0x4) == 4); }
/*       */       public String getGuildId() { Object ref = this.guildId_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.guildId_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref; }
/*       */       public ByteString getGuildIdBytes() { Object ref = this.guildId_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.guildId_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref; }
/*       */       public Builder setGuildId(String value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x4;
/*       */         this.guildId_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearGuildId() { this.bitField0_ &= 0xFFFFFFFB;
/*       */         this.guildId_ = FriendHandler.PlayerInfo.getDefaultInstance().getGuildId();
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder setGuildIdBytes(ByteString value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x4;
/*       */         this.guildId_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasGuildName() { return ((this.bitField0_ & 0x8) == 8); }
/*       */       public String getGuildName() { Object ref = this.guildName_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.guildName_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref; }
/*       */       public ByteString getGuildNameBytes() { Object ref = this.guildName_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.guildName_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref; }
/*       */       public Builder setGuildName(String value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x8;
/*       */         this.guildName_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearGuildName() { this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.guildName_ = FriendHandler.PlayerInfo.getDefaultInstance().getGuildName();
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder setGuildNameBytes(ByteString value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x8;
/*       */         this.guildName_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasName() { return ((this.bitField0_ & 0x10) == 16); }
/*       */       public String getName() { Object ref = this.name_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.name_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref; }
/*       */       public ByteString getNameBytes() { Object ref = this.name_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.name_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref; }
/*       */       public Builder setName(String value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x10;
/*       */         this.name_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearName() { this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.name_ = FriendHandler.PlayerInfo.getDefaultInstance().getName();
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder setNameBytes(ByteString value) { if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x10;
/*       */         this.name_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasLevel() { return ((this.bitField0_ & 0x20) == 32); }
/*       */       public int getLevel() { return this.level_; }
/*       */       public Builder setLevel(int value) { this.bitField0_ |= 0x20;
/*       */         this.level_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearLevel() { this.bitField0_ &= 0xFFFFFFDF;
/*       */         this.level_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasStageLevel() { return ((this.bitField0_ & 0x40) == 64); }
/*       */       public int getStageLevel() { return this.stageLevel_; }
/*       */       public Builder setStageLevel(int value) { this.bitField0_ |= 0x40;
/*       */         this.stageLevel_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearStageLevel() { this.bitField0_ &= 0xFFFFFFBF;
/*       */         this.stageLevel_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasVip() { return ((this.bitField0_ & 0x80) == 128); }
/*       */       public int getVip() { return this.vip_; }
/*       */       public Builder setVip(int value) { this.bitField0_ |= 0x80;
/*       */         this.vip_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearVip() { this.bitField0_ &= 0xFFFFFF7F;
/*       */         this.vip_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasFriendLv() { return ((this.bitField0_ & 0x100) == 256); }
/*       */       public int getFriendLv() { return this.friendLv_; }
/*       */       public Builder setFriendLv(int value) { this.bitField0_ |= 0x100;
/*       */         this.friendLv_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearFriendLv() { this.bitField0_ &= 0xFFFFFEFF;
/*       */         this.friendLv_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasIsConcerned() { return ((this.bitField0_ & 0x200) == 512); }
/*       */       public int getIsConcerned() { return this.isConcerned_; }
/*       */       public Builder setIsConcerned(int value) { this.bitField0_ |= 0x200;
/*       */         this.isConcerned_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearIsConcerned() { this.bitField0_ &= 0xFFFFFDFF;
/*       */         this.isConcerned_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasIsOnline() { return ((this.bitField0_ & 0x400) == 1024); }
/*       */       public int getIsOnline() { return this.isOnline_; }
/*       */       public Builder setIsOnline(int value) { this.bitField0_ |= 0x400;
/*       */         this.isOnline_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearIsOnline() { this.bitField0_ &= 0xFFFFFBFF;
/*       */         this.isOnline_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasCurrentPos() { return ((this.bitField0_ & 0x800) == 2048); }
/*       */       public FriendHandler.Position getCurrentPos() { if (this.currentPosBuilder_ == null)
/*       */           return this.currentPos_; 
/*       */         return (FriendHandler.Position)this.currentPosBuilder_.getMessage(); }
/*       */       public Builder setCurrentPos(FriendHandler.Position value) { if (this.currentPosBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           this.currentPos_ = value;
/*       */           onChanged();
/*       */         } else {
/*       */           this.currentPosBuilder_.setMessage(value);
/*       */         } 
/*       */         this.bitField0_ |= 0x800;
/*       */         return this; }
/*       */       public Builder setCurrentPos(FriendHandler.Position.Builder builderForValue) { if (this.currentPosBuilder_ == null) {
/*       */           this.currentPos_ = builderForValue.build();
/*       */           onChanged();
/*       */         } else {
/*       */           this.currentPosBuilder_.setMessage(builderForValue.build());
/*       */         } 
/*       */         this.bitField0_ |= 0x800;
/*       */         return this; }
/*       */       public Builder mergeCurrentPos(FriendHandler.Position value) { if (this.currentPosBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x800) == 2048 && this.currentPos_ != FriendHandler.Position.getDefaultInstance()) {
/*       */             this.currentPos_ = FriendHandler.Position.newBuilder(this.currentPos_).mergeFrom(value).buildPartial();
/*       */           } else {
/*       */             this.currentPos_ = value;
/*       */           } 
/*       */           onChanged();
/*       */         } else {
/*       */           this.currentPosBuilder_.mergeFrom(value);
/*       */         } 
/*       */         this.bitField0_ |= 0x800;
/*       */         return this; }
/*       */       public Builder clearCurrentPos() { if (this.currentPosBuilder_ == null) {
/*       */           this.currentPos_ = FriendHandler.Position.getDefaultInstance();
/*       */           onChanged();
/*       */         } else {
/*       */           this.currentPosBuilder_.clear();
/*       */         } 
/*       */         this.bitField0_ &= 0xFFFFF7FF;
/*       */         return this; }
/*       */       public FriendHandler.Position.Builder getCurrentPosBuilder() { this.bitField0_ |= 0x800;
/*       */         onChanged();
/*       */         return (FriendHandler.Position.Builder)getCurrentPosFieldBuilder().getBuilder(); }
/*       */       public FriendHandler.PositionOrBuilder getCurrentPosOrBuilder() { if (this.currentPosBuilder_ != null)
/*       */           return (FriendHandler.PositionOrBuilder)this.currentPosBuilder_.getMessageOrBuilder(); 
/*       */         return this.currentPos_; }
/*       */       private SingleFieldBuilder<FriendHandler.Position, FriendHandler.Position.Builder, FriendHandler.PositionOrBuilder> getCurrentPosFieldBuilder() { if (this.currentPosBuilder_ == null) {
/*       */           this.currentPosBuilder_ = new SingleFieldBuilder(getCurrentPos(), getParentForChildren(), isClean());
/*       */           this.currentPos_ = null;
/*       */         } 
/*       */         return this.currentPosBuilder_; }
/*       */       public boolean hasFightPower() { return ((this.bitField0_ & 0x1000) == 4096); }
/*       */       public int getFightPower() { return this.fightPower_; }
/*       */       public Builder setFightPower(int value) { this.bitField0_ |= 0x1000;
/*       */         this.fightPower_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearFightPower() { this.bitField0_ &= 0xFFFFEFFF;
/*       */         this.fightPower_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasHasAlly() { return ((this.bitField0_ & 0x2000) == 8192); }
/*       */       public int getHasAlly() { return this.hasAlly_; }
/*       */       public Builder setHasAlly(int value) { this.bitField0_ |= 0x2000;
/*       */         this.hasAlly_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearHasAlly() { this.bitField0_ &= 0xFFFFDFFF;
/*       */         this.hasAlly_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasIcon() { return ((this.bitField0_ & 0x4000) == 16384); }
/*       */       public int getIcon() { return this.icon_; }
/*       */       public Builder setIcon(int value) { this.bitField0_ |= 0x4000;
/*       */         this.icon_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearIcon() { this.bitField0_ &= 0xFFFFBFFF;
/*       */         this.icon_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasChouHenPoint() { return ((this.bitField0_ & 0x8000) == 32768); }
/*       */       public int getChouHenPoint() { return this.chouHenPoint_; }
/*       */       public Builder setChouHenPoint(int value) {
/*       */         this.bitField0_ |= 0x8000;
/*       */         this.chouHenPoint_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder clearChouHenPoint() {
/*       */         this.bitField0_ &= 0xFFFF7FFF;
/*       */         this.chouHenPoint_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public boolean hasCreateTimeStamp() {
/*       */         return ((this.bitField0_ & 0x10000) == 65536);
/*       */       }
/*       */       public String getCreateTimeStamp() {
/*       */         Object ref = this.createTimeStamp_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.createTimeStamp_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */       public ByteString getCreateTimeStampBytes() {
/*       */         Object ref = this.createTimeStamp_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.createTimeStamp_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */       public Builder setCreateTimeStamp(String value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x10000;
/*       */         this.createTimeStamp_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder clearCreateTimeStamp() {
/*       */         this.bitField0_ &= 0xFFFEFFFF;
/*       */         this.createTimeStamp_ = FriendHandler.PlayerInfo.getDefaultInstance().getCreateTimeStamp();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder setCreateTimeStampBytes(ByteString value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x10000;
/*       */         this.createTimeStamp_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public boolean hasCreateTime() {
/*       */         return ((this.bitField0_ & 0x20000) == 131072);
/*       */       }
/*       */       public String getCreateTime() {
/*       */         Object ref = this.createTime_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.createTime_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */       public ByteString getCreateTimeBytes() {
/*       */         Object ref = this.createTime_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.createTime_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */       public Builder setCreateTime(String value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x20000;
/*       */         this.createTime_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder clearCreateTime() {
/*       */         this.bitField0_ &= 0xFFFDFFFF;
/*       */         this.createTime_ = FriendHandler.PlayerInfo.getDefaultInstance().getCreateTime();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder setCreateTimeBytes(ByteString value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x20000;
/*       */         this.createTime_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public boolean hasAddFriendShipPoint() {
/*       */         return ((this.bitField0_ & 0x40000) == 262144);
/*       */       }
/*       */       public int getAddFriendShipPoint() {
/*       */         return this.addFriendShipPoint_;
/*       */       }
/*       */       public Builder setAddFriendShipPoint(int value) {
/*       */         this.bitField0_ |= 0x40000;
/*       */         this.addFriendShipPoint_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder clearAddFriendShipPoint() {
/*       */         this.bitField0_ &= 0xFFFBFFFF;
/*       */         this.addFriendShipPoint_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public boolean hasType() {
/*       */         return ((this.bitField0_ & 0x80000) == 524288);
/*       */       }
/*       */       public int getType() {
/*       */         return this.type_;
/*       */       }
/*       */       public Builder setType(int value) {
/*       */         this.bitField0_ |= 0x80000;
/*       */         this.type_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder clearType() {
/*       */         this.bitField0_ &= 0xFFF7FFFF;
/*       */         this.type_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public boolean hasTime() {
/*       */         return ((this.bitField0_ & 0x100000) == 1048576);
/*       */       }
/*       */       public String getTime() {
/*       */         Object ref = this.time_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.time_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */       public ByteString getTimeBytes() {
/*       */         Object ref = this.time_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.time_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */       public Builder setTime(String value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x100000;
/*       */         this.time_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder clearTime() {
/*       */         this.bitField0_ &= 0xFFEFFFFF;
/*       */         this.time_ = FriendHandler.PlayerInfo.getDefaultInstance().getTime();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder setTimeBytes(ByteString value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x100000;
/*       */         this.time_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public boolean hasIsHaveDaoYou() {
/*       */         return ((this.bitField0_ & 0x200000) == 2097152);
/*       */       }
/*       */       public int getIsHaveDaoYou() {
/*       */         return this.isHaveDaoYou_;
/*       */       }
/*       */       public Builder setIsHaveDaoYou(int value) {
/*       */         this.bitField0_ |= 0x200000;
/*       */         this.isHaveDaoYou_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder clearIsHaveDaoYou() {
/*       */         this.bitField0_ &= 0xFFDFFFFF;
/*       */         this.isHaveDaoYou_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       private void ensureAvatarsIsMutable() {
/*       */         if ((this.bitField0_ & 0x400000) != 4194304) {
/*       */           this.avatars_ = new ArrayList<>(this.avatars_);
/*       */           this.bitField0_ |= 0x400000;
/*       */         } 
/*       */       }
/*       */       public List<Common.Avatar> getAvatarsList() {
/*       */         if (this.avatarsBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.avatars_); 
/*       */         return this.avatarsBuilder_.getMessageList();
/*       */       }
/*       */       public int getAvatarsCount() {
/*       */         if (this.avatarsBuilder_ == null)
/*       */           return this.avatars_.size(); 
/*       */         return this.avatarsBuilder_.getCount();
/*       */       }
/*       */       public Common.Avatar getAvatars(int index) {
/*       */         if (this.avatarsBuilder_ == null)
/*       */           return this.avatars_.get(index); 
/*       */         return (Common.Avatar)this.avatarsBuilder_.getMessage(index);
/*       */       }
/*       */       public Builder setAvatars(int index, Common.Avatar value) {
/*       */         if (this.avatarsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureAvatarsIsMutable();
/*       */           this.avatars_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.avatarsBuilder_.setMessage(index, (GeneratedMessage)value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder setAvatars(int index, Common.Avatar.Builder builderForValue) {
/*       */         if (this.avatarsBuilder_ == null) {
/*       */           ensureAvatarsIsMutable();
/*       */           this.avatars_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.avatarsBuilder_.setMessage(index, (GeneratedMessage)builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addAvatars(Common.Avatar value) {
/*       */         if (this.avatarsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureAvatarsIsMutable();
/*       */           this.avatars_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.avatarsBuilder_.addMessage((GeneratedMessage)value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addAvatars(int index, Common.Avatar value) {
/*       */         if (this.avatarsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureAvatarsIsMutable();
/*       */           this.avatars_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.avatarsBuilder_.addMessage(index, (GeneratedMessage)value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addAvatars(Common.Avatar.Builder builderForValue) {
/*       */         if (this.avatarsBuilder_ == null) {
/*       */           ensureAvatarsIsMutable();
/*       */           this.avatars_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.avatarsBuilder_.addMessage((GeneratedMessage)builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addAvatars(int index, Common.Avatar.Builder builderForValue) {
/*       */         if (this.avatarsBuilder_ == null) {
/*       */           ensureAvatarsIsMutable();
/*       */           this.avatars_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.avatarsBuilder_.addMessage(index, (GeneratedMessage)builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addAllAvatars(Iterable<? extends Common.Avatar> values) {
/*       */         if (this.avatarsBuilder_ == null) {
/*       */           ensureAvatarsIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.avatars_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.avatarsBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder clearAvatars() {
/*       */         if (this.avatarsBuilder_ == null) {
/*       */           this.avatars_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFBFFFFF;
/*       */           onChanged();
/*       */         } else {
/*       */           this.avatarsBuilder_.clear();
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder removeAvatars(int index) {
/*       */         if (this.avatarsBuilder_ == null) {
/*       */           ensureAvatarsIsMutable();
/*       */           this.avatars_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.avatarsBuilder_.remove(index);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Common.Avatar.Builder getAvatarsBuilder(int index) {
/*       */         return (Common.Avatar.Builder)getAvatarsFieldBuilder().getBuilder(index);
/*       */       }
/*       */       public Common.AvatarOrBuilder getAvatarsOrBuilder(int index) {
/*       */         if (this.avatarsBuilder_ == null)
/*       */           return (Common.AvatarOrBuilder)this.avatars_.get(index); 
/*       */         return (Common.AvatarOrBuilder)this.avatarsBuilder_.getMessageOrBuilder(index);
/*       */       }
/*       */       public List<? extends Common.AvatarOrBuilder> getAvatarsOrBuilderList() {
/*       */         if (this.avatarsBuilder_ != null)
/*       */           return this.avatarsBuilder_.getMessageOrBuilderList(); 
/*       */         return (List)Collections.unmodifiableList(this.avatars_);
/*       */       }
/*       */       public Common.Avatar.Builder addAvatarsBuilder() {
/*       */         return (Common.Avatar.Builder)getAvatarsFieldBuilder().addBuilder((GeneratedMessage)Common.Avatar.getDefaultInstance());
/*       */       }
/*       */       public Common.Avatar.Builder addAvatarsBuilder(int index) {
/*       */         return (Common.Avatar.Builder)getAvatarsFieldBuilder().addBuilder(index, (GeneratedMessage)Common.Avatar.getDefaultInstance());
/*       */       }
/*       */       public List<Common.Avatar.Builder> getAvatarsBuilderList() {
/*       */         return getAvatarsFieldBuilder().getBuilderList();
/*       */       }
/*       */       private RepeatedFieldBuilder<Common.Avatar, Common.Avatar.Builder, Common.AvatarOrBuilder> getAvatarsFieldBuilder() {
/*       */         if (this.avatarsBuilder_ == null) {
/*       */           this.avatarsBuilder_ = new RepeatedFieldBuilder(this.avatars_, ((this.bitField0_ & 0x400000) == 4194304), getParentForChildren(), isClean());
/*       */           this.avatars_ = null;
/*       */         } 
/*       */         return this.avatarsBuilder_;
/*       */       } } }
/*  4956 */   public static final class ChatMsg extends GeneratedMessage implements ChatMsgOrBuilder { private static final ChatMsg defaultInstance = new ChatMsg(true); private final UnknownFieldSet unknownFields; private ChatMsg(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ChatMsg(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ChatMsg getDefaultInstance() { return defaultInstance; } public ChatMsg getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ChatMsg(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.s2CPlayerId_ = bs; break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CContent_ = bs; break;case 26: bs = input.readBytes(); this.bitField0_ |= 0x4; this.s2CTime_ = bs; break;case 34: bs = input.readBytes(); this.bitField0_ |= 0x8; this.s2CAcceptRid_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_ChatMsg_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_ChatMsg_fieldAccessorTable.ensureFieldAccessorsInitialized(ChatMsg.class, Builder.class); } public static Parser<ChatMsg> PARSER = (Parser<ChatMsg>)new AbstractParser<ChatMsg>() { public FriendHandler.ChatMsg parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.ChatMsg(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_PLAYERID_FIELD_NUMBER = 1; private Object s2CPlayerId_; public static final int S2C_CONTENT_FIELD_NUMBER = 2; private Object s2CContent_; public static final int S2C_TIME_FIELD_NUMBER = 3; private Object s2CTime_; public static final int S2C_ACCEPTRID_FIELD_NUMBER = 4; private Object s2CAcceptRid_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ChatMsg> getParserForType() { return PARSER; } public boolean hasS2CPlayerId() { return ((this.bitField0_ & 0x1) == 1); } public String getS2CPlayerId() { Object ref = this.s2CPlayerId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CPlayerId_ = s;  return s; } public ByteString getS2CPlayerIdBytes() { Object ref = this.s2CPlayerId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CPlayerId_ = b; return b; }  return (ByteString)ref; } public boolean hasS2CContent() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CContent() { Object ref = this.s2CContent_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CContent_ = s;  return s; } public ByteString getS2CContentBytes() { Object ref = this.s2CContent_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CContent_ = b; return b; }  return (ByteString)ref; } public boolean hasS2CTime() { return ((this.bitField0_ & 0x4) == 4); } public String getS2CTime() { Object ref = this.s2CTime_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CTime_ = s;  return s; } public ByteString getS2CTimeBytes() { Object ref = this.s2CTime_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CTime_ = b; return b; }  return (ByteString)ref; } public boolean hasS2CAcceptRid() { return ((this.bitField0_ & 0x8) == 8); } public String getS2CAcceptRid() { Object ref = this.s2CAcceptRid_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CAcceptRid_ = s;  return s; } public ByteString getS2CAcceptRidBytes() { Object ref = this.s2CAcceptRid_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CAcceptRid_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CPlayerId_ = ""; this.s2CContent_ = ""; this.s2CTime_ = ""; this.s2CAcceptRid_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getS2CPlayerIdBytes());  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CContentBytes());  if ((this.bitField0_ & 0x4) == 4) output.writeBytes(3, getS2CTimeBytes());  if ((this.bitField0_ & 0x8) == 8) output.writeBytes(4, getS2CAcceptRidBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getS2CPlayerIdBytes());  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CContentBytes());  if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeBytesSize(3, getS2CTimeBytes());  if ((this.bitField0_ & 0x8) == 8) size += CodedOutputStream.computeBytesSize(4, getS2CAcceptRidBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ChatMsg parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ChatMsg)PARSER.parseFrom(data); } public static ChatMsg parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ChatMsg)PARSER.parseFrom(data, extensionRegistry); } public static ChatMsg parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ChatMsg)PARSER.parseFrom(data); } public static ChatMsg parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ChatMsg)PARSER.parseFrom(data, extensionRegistry); } public static ChatMsg parseFrom(InputStream input) throws IOException { return (ChatMsg)PARSER.parseFrom(input); } public static ChatMsg parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ChatMsg)PARSER.parseFrom(input, extensionRegistry); } public static ChatMsg parseDelimitedFrom(InputStream input) throws IOException { return (ChatMsg)PARSER.parseDelimitedFrom(input); } public static ChatMsg parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ChatMsg)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ChatMsg parseFrom(CodedInputStream input) throws IOException { return (ChatMsg)PARSER.parseFrom(input); } public static ChatMsg parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ChatMsg)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ChatMsg prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.ChatMsgOrBuilder {
/*  4957 */       private int bitField0_; private Object s2CPlayerId_; private Object s2CContent_; private Object s2CTime_; private Object s2CAcceptRid_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_ChatMsg_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_ChatMsg_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.ChatMsg.class, Builder.class); } private Builder() { this.s2CPlayerId_ = ""; this.s2CContent_ = ""; this.s2CTime_ = ""; this.s2CAcceptRid_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CPlayerId_ = ""; this.s2CContent_ = ""; this.s2CTime_ = ""; this.s2CAcceptRid_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.ChatMsg.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CPlayerId_ = ""; this.bitField0_ &= 0xFFFFFFFE; this.s2CContent_ = ""; this.bitField0_ &= 0xFFFFFFFD; this.s2CTime_ = ""; this.bitField0_ &= 0xFFFFFFFB; this.s2CAcceptRid_ = ""; this.bitField0_ &= 0xFFFFFFF7; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_ChatMsg_descriptor; } public FriendHandler.ChatMsg getDefaultInstanceForType() { return FriendHandler.ChatMsg.getDefaultInstance(); } public FriendHandler.ChatMsg build() { FriendHandler.ChatMsg result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.ChatMsg buildPartial() { FriendHandler.ChatMsg result = new FriendHandler.ChatMsg(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CPlayerId_ = this.s2CPlayerId_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CContent_ = this.s2CContent_; if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;  result.s2CTime_ = this.s2CTime_; if ((from_bitField0_ & 0x8) == 8) to_bitField0_ |= 0x8;  result.s2CAcceptRid_ = this.s2CAcceptRid_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.ChatMsg) return mergeFrom((FriendHandler.ChatMsg)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.ChatMsg other) { if (other == FriendHandler.ChatMsg.getDefaultInstance()) return this;  if (other.hasS2CPlayerId()) { this.bitField0_ |= 0x1; this.s2CPlayerId_ = other.s2CPlayerId_; onChanged(); }  if (other.hasS2CContent()) { this.bitField0_ |= 0x2; this.s2CContent_ = other.s2CContent_; onChanged(); }  if (other.hasS2CTime()) { this.bitField0_ |= 0x4; this.s2CTime_ = other.s2CTime_; onChanged(); }  if (other.hasS2CAcceptRid()) { this.bitField0_ |= 0x8; this.s2CAcceptRid_ = other.s2CAcceptRid_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.ChatMsg parsedMessage = null; try { parsedMessage = (FriendHandler.ChatMsg)FriendHandler.ChatMsg.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.ChatMsg)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CPlayerId() { return ((this.bitField0_ & 0x1) == 1); } public String getS2CPlayerId() { Object ref = this.s2CPlayerId_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CPlayerId_ = s;  return s; }  return (String)ref; } public ByteString getS2CPlayerIdBytes() { Object ref = this.s2CPlayerId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CPlayerId_ = b; return b; }  return (ByteString)ref; } public Builder setS2CPlayerId(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.s2CPlayerId_ = value; onChanged(); return this; } public Builder clearS2CPlayerId() { this.bitField0_ &= 0xFFFFFFFE; this.s2CPlayerId_ = FriendHandler.ChatMsg.getDefaultInstance().getS2CPlayerId(); onChanged(); return this; } public Builder setS2CPlayerIdBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.s2CPlayerId_ = value; onChanged(); return this; } public boolean hasS2CContent() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CContent() { Object ref = this.s2CContent_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CContent_ = s;  return s; }  return (String)ref; } public ByteString getS2CContentBytes() { Object ref = this.s2CContent_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CContent_ = b; return b; }  return (ByteString)ref; } public Builder setS2CContent(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CContent_ = value; onChanged(); return this; } public Builder clearS2CContent() { this.bitField0_ &= 0xFFFFFFFD; this.s2CContent_ = FriendHandler.ChatMsg.getDefaultInstance().getS2CContent(); onChanged(); return this; } public Builder setS2CContentBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CContent_ = value; onChanged(); return this; } public boolean hasS2CTime() { return ((this.bitField0_ & 0x4) == 4); } public String getS2CTime() { Object ref = this.s2CTime_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CTime_ = s;  return s; }  return (String)ref; } public ByteString getS2CTimeBytes() { Object ref = this.s2CTime_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CTime_ = b; return b; }  return (ByteString)ref; } public Builder setS2CTime(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x4; this.s2CTime_ = value; onChanged(); return this; } public Builder clearS2CTime() { this.bitField0_ &= 0xFFFFFFFB; this.s2CTime_ = FriendHandler.ChatMsg.getDefaultInstance().getS2CTime(); onChanged(); return this; } public Builder setS2CTimeBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x4; this.s2CTime_ = value; onChanged(); return this; } public boolean hasS2CAcceptRid() { return ((this.bitField0_ & 0x8) == 8); } public String getS2CAcceptRid() { Object ref = this.s2CAcceptRid_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CAcceptRid_ = s;  return s; }  return (String)ref; } public ByteString getS2CAcceptRidBytes() { Object ref = this.s2CAcceptRid_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CAcceptRid_ = b; return b; }  return (ByteString)ref; } public Builder setS2CAcceptRid(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x8; this.s2CAcceptRid_ = value; onChanged(); return this; } public Builder clearS2CAcceptRid() { this.bitField0_ &= 0xFFFFFFF7; this.s2CAcceptRid_ = FriendHandler.ChatMsg.getDefaultInstance().getS2CAcceptRid(); onChanged(); return this; } public Builder setS2CAcceptRidBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x8; this.s2CAcceptRid_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */      }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendShopCondition
/*       */     extends GeneratedMessage
/*       */     implements FriendShopConditionOrBuilder
/*       */   {
/*  5495 */     private static final FriendShopCondition defaultInstance = new FriendShopCondition(true); private final UnknownFieldSet unknownFields; private FriendShopCondition(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendShopCondition(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendShopCondition getDefaultInstance() { return defaultInstance; } public FriendShopCondition getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendShopCondition(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.type_ = input.readInt32(); break;case 16: this.bitField0_ |= 0x2; this.number_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendShopCondition_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendShopCondition_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendShopCondition.class, Builder.class); } public static Parser<FriendShopCondition> PARSER = (Parser<FriendShopCondition>)new AbstractParser<FriendShopCondition>() { public FriendHandler.FriendShopCondition parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendShopCondition(input, extensionRegistry); } }; private int bitField0_; public static final int TYPE_FIELD_NUMBER = 1; private int type_; public static final int NUMBER_FIELD_NUMBER = 2; private int number_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendShopCondition> getParserForType() { return PARSER; } public boolean hasType() { return ((this.bitField0_ & 0x1) == 1); } public int getType() { return this.type_; } public boolean hasNumber() { return ((this.bitField0_ & 0x2) == 2); } public int getNumber() { return this.number_; } private void initFields() { this.type_ = 0; this.number_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.type_);  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.number_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.type_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.number_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendShopCondition parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendShopCondition)PARSER.parseFrom(data); } public static FriendShopCondition parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendShopCondition)PARSER.parseFrom(data, extensionRegistry); } public static FriendShopCondition parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendShopCondition)PARSER.parseFrom(data); } public static FriendShopCondition parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendShopCondition)PARSER.parseFrom(data, extensionRegistry); } public static FriendShopCondition parseFrom(InputStream input) throws IOException { return (FriendShopCondition)PARSER.parseFrom(input); } public static FriendShopCondition parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendShopCondition)PARSER.parseFrom(input, extensionRegistry); } public static FriendShopCondition parseDelimitedFrom(InputStream input) throws IOException { return (FriendShopCondition)PARSER.parseDelimitedFrom(input); } public static FriendShopCondition parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendShopCondition)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendShopCondition parseFrom(CodedInputStream input) throws IOException { return (FriendShopCondition)PARSER.parseFrom(input); } public static FriendShopCondition parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendShopCondition)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendShopCondition prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendShopConditionOrBuilder {
/*  5496 */       private int bitField0_; private int type_; private int number_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendShopCondition_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendShopCondition_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendShopCondition.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendShopCondition.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.type_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.number_ = 0; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendShopCondition_descriptor; } public FriendHandler.FriendShopCondition getDefaultInstanceForType() { return FriendHandler.FriendShopCondition.getDefaultInstance(); } public FriendHandler.FriendShopCondition build() { FriendHandler.FriendShopCondition result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendShopCondition buildPartial() { FriendHandler.FriendShopCondition result = new FriendHandler.FriendShopCondition(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.type_ = this.type_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.number_ = this.number_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendShopCondition) return mergeFrom((FriendHandler.FriendShopCondition)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendShopCondition other) { if (other == FriendHandler.FriendShopCondition.getDefaultInstance()) return this;  if (other.hasType()) setType(other.getType());  if (other.hasNumber()) setNumber(other.getNumber());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendShopCondition parsedMessage = null; try { parsedMessage = (FriendHandler.FriendShopCondition)FriendHandler.FriendShopCondition.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendShopCondition)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasType() { return ((this.bitField0_ & 0x1) == 1); } public int getType() { return this.type_; } public Builder setType(int value) { this.bitField0_ |= 0x1; this.type_ = value; onChanged(); return this; } public Builder clearType() { this.bitField0_ &= 0xFFFFFFFE; this.type_ = 0; onChanged(); return this; } public boolean hasNumber() { return ((this.bitField0_ & 0x2) == 2); } public int getNumber() { return this.number_; } public Builder setNumber(int value) { this.bitField0_ |= 0x2; this.number_ = value; onChanged(); return this; } public Builder clearNumber() { this.bitField0_ &= 0xFFFFFFFD; this.number_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendShopMoneyInfo
/*       */     extends GeneratedMessage
/*       */     implements FriendShopMoneyInfoOrBuilder
/*       */   {
/*  6058 */     private static final FriendShopMoneyInfo defaultInstance = new FriendShopMoneyInfo(true); private final UnknownFieldSet unknownFields; private FriendShopMoneyInfo(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendShopMoneyInfo(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendShopMoneyInfo getDefaultInstance() { return defaultInstance; } public FriendShopMoneyInfo getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendShopMoneyInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.type_ = input.readInt32(); break;case 16: this.bitField0_ |= 0x2; this.value_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendShopMoneyInfo_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendShopMoneyInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendShopMoneyInfo.class, Builder.class); } public static Parser<FriendShopMoneyInfo> PARSER = (Parser<FriendShopMoneyInfo>)new AbstractParser<FriendShopMoneyInfo>() { public FriendHandler.FriendShopMoneyInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendShopMoneyInfo(input, extensionRegistry); } }; private int bitField0_; public static final int TYPE_FIELD_NUMBER = 1; private int type_; public static final int VALUE_FIELD_NUMBER = 2; private int value_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendShopMoneyInfo> getParserForType() { return PARSER; } public boolean hasType() { return ((this.bitField0_ & 0x1) == 1); } public int getType() { return this.type_; } public boolean hasValue() { return ((this.bitField0_ & 0x2) == 2); } public int getValue() { return this.value_; } private void initFields() { this.type_ = 0; this.value_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasType()) { this.memoizedIsInitialized = 0; return false; }  if (!hasValue()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.type_);  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.value_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.type_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.value_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendShopMoneyInfo parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendShopMoneyInfo)PARSER.parseFrom(data); } public static FriendShopMoneyInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendShopMoneyInfo)PARSER.parseFrom(data, extensionRegistry); } public static FriendShopMoneyInfo parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendShopMoneyInfo)PARSER.parseFrom(data); } public static FriendShopMoneyInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendShopMoneyInfo)PARSER.parseFrom(data, extensionRegistry); } public static FriendShopMoneyInfo parseFrom(InputStream input) throws IOException { return (FriendShopMoneyInfo)PARSER.parseFrom(input); } public static FriendShopMoneyInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendShopMoneyInfo)PARSER.parseFrom(input, extensionRegistry); } public static FriendShopMoneyInfo parseDelimitedFrom(InputStream input) throws IOException { return (FriendShopMoneyInfo)PARSER.parseDelimitedFrom(input); } public static FriendShopMoneyInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendShopMoneyInfo)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendShopMoneyInfo parseFrom(CodedInputStream input) throws IOException { return (FriendShopMoneyInfo)PARSER.parseFrom(input); } public static FriendShopMoneyInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendShopMoneyInfo)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendShopMoneyInfo prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendShopMoneyInfoOrBuilder {
/*  6059 */       private int bitField0_; private int type_; private int value_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendShopMoneyInfo_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendShopMoneyInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendShopMoneyInfo.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendShopMoneyInfo.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.type_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.value_ = 0; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendShopMoneyInfo_descriptor; } public FriendHandler.FriendShopMoneyInfo getDefaultInstanceForType() { return FriendHandler.FriendShopMoneyInfo.getDefaultInstance(); } public FriendHandler.FriendShopMoneyInfo build() { FriendHandler.FriendShopMoneyInfo result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendShopMoneyInfo buildPartial() { FriendHandler.FriendShopMoneyInfo result = new FriendHandler.FriendShopMoneyInfo(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.type_ = this.type_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.value_ = this.value_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendShopMoneyInfo) return mergeFrom((FriendHandler.FriendShopMoneyInfo)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendShopMoneyInfo other) { if (other == FriendHandler.FriendShopMoneyInfo.getDefaultInstance()) return this;  if (other.hasType()) setType(other.getType());  if (other.hasValue()) setValue(other.getValue());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasType()) return false;  if (!hasValue()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendShopMoneyInfo parsedMessage = null; try { parsedMessage = (FriendHandler.FriendShopMoneyInfo)FriendHandler.FriendShopMoneyInfo.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendShopMoneyInfo)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasType() { return ((this.bitField0_ & 0x1) == 1); } public int getType() { return this.type_; } public Builder setType(int value) { this.bitField0_ |= 0x1; this.type_ = value; onChanged(); return this; } public Builder clearType() { this.bitField0_ &= 0xFFFFFFFE; this.type_ = 0; onChanged(); return this; } public boolean hasValue() { return ((this.bitField0_ & 0x2) == 2); } public int getValue() { return this.value_; } public Builder setValue(int value) { this.bitField0_ |= 0x2; this.value_ = value; onChanged(); return this; } public Builder clearValue() { this.bitField0_ &= 0xFFFFFFFD; this.value_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendGetAllFriendsRequest
/*       */     extends GeneratedMessage
/*       */     implements FriendGetAllFriendsRequestOrBuilder
/*       */   {
/*  6371 */     private static final FriendGetAllFriendsRequest defaultInstance = new FriendGetAllFriendsRequest(true); private final UnknownFieldSet unknownFields; private FriendGetAllFriendsRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendGetAllFriendsRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendGetAllFriendsRequest getDefaultInstance() { return defaultInstance; } public FriendGetAllFriendsRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendGetAllFriendsRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendGetAllFriendsRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendGetAllFriendsRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendGetAllFriendsRequest.class, Builder.class); } public static Parser<FriendGetAllFriendsRequest> PARSER = (Parser<FriendGetAllFriendsRequest>)new AbstractParser<FriendGetAllFriendsRequest>() { public FriendHandler.FriendGetAllFriendsRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendGetAllFriendsRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendGetAllFriendsRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendGetAllFriendsRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendGetAllFriendsRequest)PARSER.parseFrom(data); } public static FriendGetAllFriendsRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendGetAllFriendsRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendGetAllFriendsRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendGetAllFriendsRequest)PARSER.parseFrom(data); } public static FriendGetAllFriendsRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendGetAllFriendsRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendGetAllFriendsRequest parseFrom(InputStream input) throws IOException { return (FriendGetAllFriendsRequest)PARSER.parseFrom(input); } public static FriendGetAllFriendsRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendGetAllFriendsRequest)PARSER.parseFrom(input, extensionRegistry); } public static FriendGetAllFriendsRequest parseDelimitedFrom(InputStream input) throws IOException { return (FriendGetAllFriendsRequest)PARSER.parseDelimitedFrom(input); } public static FriendGetAllFriendsRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendGetAllFriendsRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendGetAllFriendsRequest parseFrom(CodedInputStream input) throws IOException { return (FriendGetAllFriendsRequest)PARSER.parseFrom(input); } public static FriendGetAllFriendsRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendGetAllFriendsRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendGetAllFriendsRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendGetAllFriendsRequestOrBuilder {
/*  6372 */       public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendGetAllFriendsRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendGetAllFriendsRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendGetAllFriendsRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendGetAllFriendsRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendGetAllFriendsRequest_descriptor; } public FriendHandler.FriendGetAllFriendsRequest getDefaultInstanceForType() { return FriendHandler.FriendGetAllFriendsRequest.getDefaultInstance(); } public FriendHandler.FriendGetAllFriendsRequest build() { FriendHandler.FriendGetAllFriendsRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendGetAllFriendsRequest buildPartial() { FriendHandler.FriendGetAllFriendsRequest result = new FriendHandler.FriendGetAllFriendsRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendGetAllFriendsRequest) return mergeFrom((FriendHandler.FriendGetAllFriendsRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendGetAllFriendsRequest other) { if (other == FriendHandler.FriendGetAllFriendsRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendGetAllFriendsRequest parsedMessage = null; try { parsedMessage = (FriendHandler.FriendGetAllFriendsRequest)FriendHandler.FriendGetAllFriendsRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendGetAllFriendsRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendApplyRequest
/*       */     extends GeneratedMessage
/*       */     implements FriendApplyRequestOrBuilder
/*       */   {
/*  6855 */     private static final FriendApplyRequest defaultInstance = new FriendApplyRequest(true); private final UnknownFieldSet unknownFields; private FriendApplyRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendApplyRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendApplyRequest getDefaultInstance() { return defaultInstance; } public FriendApplyRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendApplyRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2SToPlayerId_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendApplyRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendApplyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendApplyRequest.class, Builder.class); } public static Parser<FriendApplyRequest> PARSER = (Parser<FriendApplyRequest>)new AbstractParser<FriendApplyRequest>() { public FriendHandler.FriendApplyRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendApplyRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_TOPLAYERID_FIELD_NUMBER = 1; private Object c2SToPlayerId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendApplyRequest> getParserForType() { return PARSER; } public boolean hasC2SToPlayerId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SToPlayerId() { Object ref = this.c2SToPlayerId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SToPlayerId_ = s;  return s; } public ByteString getC2SToPlayerIdBytes() { Object ref = this.c2SToPlayerId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SToPlayerId_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.c2SToPlayerId_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SToPlayerId()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SToPlayerIdBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SToPlayerIdBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendApplyRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendApplyRequest)PARSER.parseFrom(data); } public static FriendApplyRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendApplyRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendApplyRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendApplyRequest)PARSER.parseFrom(data); } public static FriendApplyRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendApplyRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendApplyRequest parseFrom(InputStream input) throws IOException { return (FriendApplyRequest)PARSER.parseFrom(input); } public static FriendApplyRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendApplyRequest)PARSER.parseFrom(input, extensionRegistry); } public static FriendApplyRequest parseDelimitedFrom(InputStream input) throws IOException { return (FriendApplyRequest)PARSER.parseDelimitedFrom(input); } public static FriendApplyRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendApplyRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendApplyRequest parseFrom(CodedInputStream input) throws IOException { return (FriendApplyRequest)PARSER.parseFrom(input); } public static FriendApplyRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendApplyRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendApplyRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendApplyRequestOrBuilder {
/*  6856 */       private int bitField0_; private Object c2SToPlayerId_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendApplyRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendApplyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendApplyRequest.class, Builder.class); } private Builder() { this.c2SToPlayerId_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SToPlayerId_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendApplyRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SToPlayerId_ = ""; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendApplyRequest_descriptor; } public FriendHandler.FriendApplyRequest getDefaultInstanceForType() { return FriendHandler.FriendApplyRequest.getDefaultInstance(); } public FriendHandler.FriendApplyRequest build() { FriendHandler.FriendApplyRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendApplyRequest buildPartial() { FriendHandler.FriendApplyRequest result = new FriendHandler.FriendApplyRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SToPlayerId_ = this.c2SToPlayerId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendApplyRequest) return mergeFrom((FriendHandler.FriendApplyRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendApplyRequest other) { if (other == FriendHandler.FriendApplyRequest.getDefaultInstance()) return this;  if (other.hasC2SToPlayerId()) { this.bitField0_ |= 0x1; this.c2SToPlayerId_ = other.c2SToPlayerId_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SToPlayerId()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendApplyRequest parsedMessage = null; try { parsedMessage = (FriendHandler.FriendApplyRequest)FriendHandler.FriendApplyRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendApplyRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SToPlayerId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SToPlayerId() { Object ref = this.c2SToPlayerId_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SToPlayerId_ = s;  return s; }  return (String)ref; } public ByteString getC2SToPlayerIdBytes() { Object ref = this.c2SToPlayerId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SToPlayerId_ = b; return b; }  return (ByteString)ref; } public Builder setC2SToPlayerId(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SToPlayerId_ = value; onChanged(); return this; } public Builder clearC2SToPlayerId() { this.bitField0_ &= 0xFFFFFFFE; this.c2SToPlayerId_ = FriendHandler.FriendApplyRequest.getDefaultInstance().getC2SToPlayerId(); onChanged(); return this; } public Builder setC2SToPlayerIdBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SToPlayerId_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendAllApplyRequest
/*       */     extends GeneratedMessage
/*       */     implements FriendAllApplyRequestOrBuilder
/*       */   {
/*  7354 */     private static final FriendAllApplyRequest defaultInstance = new FriendAllApplyRequest(true); private final UnknownFieldSet unknownFields; private FriendAllApplyRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendAllApplyRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendAllApplyRequest getDefaultInstance() { return defaultInstance; } public FriendAllApplyRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendAllApplyRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); if ((mutable_bitField0_ & 0x1) != 1) { this.c2SToPlayerIds_ = (LazyStringList)new LazyStringArrayList(); mutable_bitField0_ |= 0x1; }  this.c2SToPlayerIds_.add(bs); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x1) == 1) this.c2SToPlayerIds_ = this.c2SToPlayerIds_.getUnmodifiableView();  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAllApplyRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAllApplyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendAllApplyRequest.class, Builder.class); } public static Parser<FriendAllApplyRequest> PARSER = (Parser<FriendAllApplyRequest>)new AbstractParser<FriendAllApplyRequest>() { public FriendHandler.FriendAllApplyRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendAllApplyRequest(input, extensionRegistry); } }; public static final int C2S_TOPLAYERIDS_FIELD_NUMBER = 1; private LazyStringList c2SToPlayerIds_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendAllApplyRequest> getParserForType() { return PARSER; } public ProtocolStringList getC2SToPlayerIdsList() { return (ProtocolStringList)this.c2SToPlayerIds_; } public int getC2SToPlayerIdsCount() { return this.c2SToPlayerIds_.size(); } public String getC2SToPlayerIds(int index) { return (String)this.c2SToPlayerIds_.get(index); } public ByteString getC2SToPlayerIdsBytes(int index) { return this.c2SToPlayerIds_.getByteString(index); } private void initFields() { this.c2SToPlayerIds_ = LazyStringArrayList.EMPTY; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); for (int i = 0; i < this.c2SToPlayerIds_.size(); i++) output.writeBytes(1, this.c2SToPlayerIds_.getByteString(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; int dataSize = 0; for (int i = 0; i < this.c2SToPlayerIds_.size(); i++) dataSize += CodedOutputStream.computeBytesSizeNoTag(this.c2SToPlayerIds_.getByteString(i));  size += dataSize; size += 1 * getC2SToPlayerIdsList().size(); size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendAllApplyRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendAllApplyRequest)PARSER.parseFrom(data); } public static FriendAllApplyRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAllApplyRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendAllApplyRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendAllApplyRequest)PARSER.parseFrom(data); } public static FriendAllApplyRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAllApplyRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendAllApplyRequest parseFrom(InputStream input) throws IOException { return (FriendAllApplyRequest)PARSER.parseFrom(input); } public static FriendAllApplyRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllApplyRequest)PARSER.parseFrom(input, extensionRegistry); } public static FriendAllApplyRequest parseDelimitedFrom(InputStream input) throws IOException { return (FriendAllApplyRequest)PARSER.parseDelimitedFrom(input); } public static FriendAllApplyRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllApplyRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendAllApplyRequest parseFrom(CodedInputStream input) throws IOException { return (FriendAllApplyRequest)PARSER.parseFrom(input); } public static FriendAllApplyRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllApplyRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendAllApplyRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendAllApplyRequestOrBuilder {
/*  7355 */       private int bitField0_; private LazyStringList c2SToPlayerIds_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAllApplyRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAllApplyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendAllApplyRequest.class, Builder.class); } private Builder() { this.c2SToPlayerIds_ = LazyStringArrayList.EMPTY; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SToPlayerIds_ = LazyStringArrayList.EMPTY; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendAllApplyRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SToPlayerIds_ = LazyStringArrayList.EMPTY; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendAllApplyRequest_descriptor; } public FriendHandler.FriendAllApplyRequest getDefaultInstanceForType() { return FriendHandler.FriendAllApplyRequest.getDefaultInstance(); } public FriendHandler.FriendAllApplyRequest build() { FriendHandler.FriendAllApplyRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendAllApplyRequest buildPartial() { FriendHandler.FriendAllApplyRequest result = new FriendHandler.FriendAllApplyRequest(this); int from_bitField0_ = this.bitField0_; if ((this.bitField0_ & 0x1) == 1) { this.c2SToPlayerIds_ = this.c2SToPlayerIds_.getUnmodifiableView(); this.bitField0_ &= 0xFFFFFFFE; }  result.c2SToPlayerIds_ = this.c2SToPlayerIds_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendAllApplyRequest) return mergeFrom((FriendHandler.FriendAllApplyRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendAllApplyRequest other) { if (other == FriendHandler.FriendAllApplyRequest.getDefaultInstance()) return this;  if (!other.c2SToPlayerIds_.isEmpty()) { if (this.c2SToPlayerIds_.isEmpty()) { this.c2SToPlayerIds_ = other.c2SToPlayerIds_; this.bitField0_ &= 0xFFFFFFFE; } else { ensureC2SToPlayerIdsIsMutable(); this.c2SToPlayerIds_.addAll((Collection)other.c2SToPlayerIds_); }  onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendAllApplyRequest parsedMessage = null; try { parsedMessage = (FriendHandler.FriendAllApplyRequest)FriendHandler.FriendAllApplyRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendAllApplyRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } private void ensureC2SToPlayerIdsIsMutable() { if ((this.bitField0_ & 0x1) != 1) { this.c2SToPlayerIds_ = (LazyStringList)new LazyStringArrayList(this.c2SToPlayerIds_); this.bitField0_ |= 0x1; }  } public ProtocolStringList getC2SToPlayerIdsList() { return (ProtocolStringList)this.c2SToPlayerIds_.getUnmodifiableView(); } public int getC2SToPlayerIdsCount() { return this.c2SToPlayerIds_.size(); } public String getC2SToPlayerIds(int index) { return (String)this.c2SToPlayerIds_.get(index); } public ByteString getC2SToPlayerIdsBytes(int index) { return this.c2SToPlayerIds_.getByteString(index); } public Builder setC2SToPlayerIds(int index, String value) { if (value == null) throw new NullPointerException();  ensureC2SToPlayerIdsIsMutable(); this.c2SToPlayerIds_.set(index, value); onChanged(); return this; } public Builder addC2SToPlayerIds(String value) { if (value == null) throw new NullPointerException();  ensureC2SToPlayerIdsIsMutable(); this.c2SToPlayerIds_.add(value); onChanged(); return this; } public Builder addAllC2SToPlayerIds(Iterable<String> values) { ensureC2SToPlayerIdsIsMutable(); AbstractMessageLite.Builder.addAll(values, (Collection)this.c2SToPlayerIds_); onChanged(); return this; } public Builder clearC2SToPlayerIds() { this.c2SToPlayerIds_ = LazyStringArrayList.EMPTY; this.bitField0_ &= 0xFFFFFFFE; onChanged(); return this; } public Builder addC2SToPlayerIdsBytes(ByteString value) { if (value == null) throw new NullPointerException();  ensureC2SToPlayerIdsIsMutable(); this.c2SToPlayerIds_.add(value); onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendAgreeApplyRequest
/*       */     extends GeneratedMessage
/*       */     implements FriendAgreeApplyRequestOrBuilder
/*       */   {
/*  7838 */     private static final FriendAgreeApplyRequest defaultInstance = new FriendAgreeApplyRequest(true); private final UnknownFieldSet unknownFields; private FriendAgreeApplyRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendAgreeApplyRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendAgreeApplyRequest getDefaultInstance() { return defaultInstance; } public FriendAgreeApplyRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendAgreeApplyRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2SRequestId_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAgreeApplyRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAgreeApplyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendAgreeApplyRequest.class, Builder.class); } public static Parser<FriendAgreeApplyRequest> PARSER = (Parser<FriendAgreeApplyRequest>)new AbstractParser<FriendAgreeApplyRequest>() { public FriendHandler.FriendAgreeApplyRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendAgreeApplyRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_REQUESTID_FIELD_NUMBER = 1; private Object c2SRequestId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendAgreeApplyRequest> getParserForType() { return PARSER; } public boolean hasC2SRequestId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SRequestId() { Object ref = this.c2SRequestId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SRequestId_ = s;  return s; } public ByteString getC2SRequestIdBytes() { Object ref = this.c2SRequestId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SRequestId_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.c2SRequestId_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SRequestId()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SRequestIdBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SRequestIdBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendAgreeApplyRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendAgreeApplyRequest)PARSER.parseFrom(data); } public static FriendAgreeApplyRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAgreeApplyRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendAgreeApplyRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendAgreeApplyRequest)PARSER.parseFrom(data); } public static FriendAgreeApplyRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAgreeApplyRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendAgreeApplyRequest parseFrom(InputStream input) throws IOException { return (FriendAgreeApplyRequest)PARSER.parseFrom(input); } public static FriendAgreeApplyRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAgreeApplyRequest)PARSER.parseFrom(input, extensionRegistry); } public static FriendAgreeApplyRequest parseDelimitedFrom(InputStream input) throws IOException { return (FriendAgreeApplyRequest)PARSER.parseDelimitedFrom(input); } public static FriendAgreeApplyRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAgreeApplyRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendAgreeApplyRequest parseFrom(CodedInputStream input) throws IOException { return (FriendAgreeApplyRequest)PARSER.parseFrom(input); } public static FriendAgreeApplyRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAgreeApplyRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendAgreeApplyRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendAgreeApplyRequestOrBuilder {
/*  7839 */       private int bitField0_; private Object c2SRequestId_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAgreeApplyRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAgreeApplyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendAgreeApplyRequest.class, Builder.class); } private Builder() { this.c2SRequestId_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SRequestId_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendAgreeApplyRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SRequestId_ = ""; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendAgreeApplyRequest_descriptor; } public FriendHandler.FriendAgreeApplyRequest getDefaultInstanceForType() { return FriendHandler.FriendAgreeApplyRequest.getDefaultInstance(); } public FriendHandler.FriendAgreeApplyRequest build() { FriendHandler.FriendAgreeApplyRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendAgreeApplyRequest buildPartial() { FriendHandler.FriendAgreeApplyRequest result = new FriendHandler.FriendAgreeApplyRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SRequestId_ = this.c2SRequestId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendAgreeApplyRequest) return mergeFrom((FriendHandler.FriendAgreeApplyRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendAgreeApplyRequest other) { if (other == FriendHandler.FriendAgreeApplyRequest.getDefaultInstance()) return this;  if (other.hasC2SRequestId()) { this.bitField0_ |= 0x1; this.c2SRequestId_ = other.c2SRequestId_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SRequestId()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendAgreeApplyRequest parsedMessage = null; try { parsedMessage = (FriendHandler.FriendAgreeApplyRequest)FriendHandler.FriendAgreeApplyRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendAgreeApplyRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SRequestId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SRequestId() { Object ref = this.c2SRequestId_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SRequestId_ = s;  return s; }  return (String)ref; } public ByteString getC2SRequestIdBytes() { Object ref = this.c2SRequestId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SRequestId_ = b; return b; }  return (ByteString)ref; } public Builder setC2SRequestId(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SRequestId_ = value; onChanged(); return this; } public Builder clearC2SRequestId() { this.bitField0_ &= 0xFFFFFFFE; this.c2SRequestId_ = FriendHandler.FriendAgreeApplyRequest.getDefaultInstance().getC2SRequestId(); onChanged(); return this; } public Builder setC2SRequestIdBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SRequestId_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendAllAgreeApplyRequest
/*       */     extends GeneratedMessage
/*       */     implements FriendAllAgreeApplyRequestOrBuilder
/*       */   {
/*  8337 */     private static final FriendAllAgreeApplyRequest defaultInstance = new FriendAllAgreeApplyRequest(true); private final UnknownFieldSet unknownFields; private FriendAllAgreeApplyRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendAllAgreeApplyRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendAllAgreeApplyRequest getDefaultInstance() { return defaultInstance; } public FriendAllAgreeApplyRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendAllAgreeApplyRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); if ((mutable_bitField0_ & 0x1) != 1) { this.c2SRequestIds_ = (LazyStringList)new LazyStringArrayList(); mutable_bitField0_ |= 0x1; }  this.c2SRequestIds_.add(bs); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x1) == 1) this.c2SRequestIds_ = this.c2SRequestIds_.getUnmodifiableView();  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAllAgreeApplyRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAllAgreeApplyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendAllAgreeApplyRequest.class, Builder.class); } public static Parser<FriendAllAgreeApplyRequest> PARSER = (Parser<FriendAllAgreeApplyRequest>)new AbstractParser<FriendAllAgreeApplyRequest>() { public FriendHandler.FriendAllAgreeApplyRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendAllAgreeApplyRequest(input, extensionRegistry); } }; public static final int C2S_REQUESTIDS_FIELD_NUMBER = 1; private LazyStringList c2SRequestIds_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendAllAgreeApplyRequest> getParserForType() { return PARSER; } public ProtocolStringList getC2SRequestIdsList() { return (ProtocolStringList)this.c2SRequestIds_; } public int getC2SRequestIdsCount() { return this.c2SRequestIds_.size(); } public String getC2SRequestIds(int index) { return (String)this.c2SRequestIds_.get(index); } public ByteString getC2SRequestIdsBytes(int index) { return this.c2SRequestIds_.getByteString(index); } private void initFields() { this.c2SRequestIds_ = LazyStringArrayList.EMPTY; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); for (int i = 0; i < this.c2SRequestIds_.size(); i++) output.writeBytes(1, this.c2SRequestIds_.getByteString(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; int dataSize = 0; for (int i = 0; i < this.c2SRequestIds_.size(); i++) dataSize += CodedOutputStream.computeBytesSizeNoTag(this.c2SRequestIds_.getByteString(i));  size += dataSize; size += 1 * getC2SRequestIdsList().size(); size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendAllAgreeApplyRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendAllAgreeApplyRequest)PARSER.parseFrom(data); } public static FriendAllAgreeApplyRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAllAgreeApplyRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendAllAgreeApplyRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendAllAgreeApplyRequest)PARSER.parseFrom(data); } public static FriendAllAgreeApplyRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAllAgreeApplyRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendAllAgreeApplyRequest parseFrom(InputStream input) throws IOException { return (FriendAllAgreeApplyRequest)PARSER.parseFrom(input); } public static FriendAllAgreeApplyRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllAgreeApplyRequest)PARSER.parseFrom(input, extensionRegistry); } public static FriendAllAgreeApplyRequest parseDelimitedFrom(InputStream input) throws IOException { return (FriendAllAgreeApplyRequest)PARSER.parseDelimitedFrom(input); } public static FriendAllAgreeApplyRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllAgreeApplyRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendAllAgreeApplyRequest parseFrom(CodedInputStream input) throws IOException { return (FriendAllAgreeApplyRequest)PARSER.parseFrom(input); } public static FriendAllAgreeApplyRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllAgreeApplyRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendAllAgreeApplyRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendAllAgreeApplyRequestOrBuilder {
/*  8338 */       private int bitField0_; private LazyStringList c2SRequestIds_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAllAgreeApplyRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAllAgreeApplyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendAllAgreeApplyRequest.class, Builder.class); } private Builder() { this.c2SRequestIds_ = LazyStringArrayList.EMPTY; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SRequestIds_ = LazyStringArrayList.EMPTY; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendAllAgreeApplyRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SRequestIds_ = LazyStringArrayList.EMPTY; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendAllAgreeApplyRequest_descriptor; } public FriendHandler.FriendAllAgreeApplyRequest getDefaultInstanceForType() { return FriendHandler.FriendAllAgreeApplyRequest.getDefaultInstance(); } public FriendHandler.FriendAllAgreeApplyRequest build() { FriendHandler.FriendAllAgreeApplyRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendAllAgreeApplyRequest buildPartial() { FriendHandler.FriendAllAgreeApplyRequest result = new FriendHandler.FriendAllAgreeApplyRequest(this); int from_bitField0_ = this.bitField0_; if ((this.bitField0_ & 0x1) == 1) { this.c2SRequestIds_ = this.c2SRequestIds_.getUnmodifiableView(); this.bitField0_ &= 0xFFFFFFFE; }  result.c2SRequestIds_ = this.c2SRequestIds_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendAllAgreeApplyRequest) return mergeFrom((FriendHandler.FriendAllAgreeApplyRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendAllAgreeApplyRequest other) { if (other == FriendHandler.FriendAllAgreeApplyRequest.getDefaultInstance()) return this;  if (!other.c2SRequestIds_.isEmpty()) { if (this.c2SRequestIds_.isEmpty()) { this.c2SRequestIds_ = other.c2SRequestIds_; this.bitField0_ &= 0xFFFFFFFE; } else { ensureC2SRequestIdsIsMutable(); this.c2SRequestIds_.addAll((Collection)other.c2SRequestIds_); }  onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendAllAgreeApplyRequest parsedMessage = null; try { parsedMessage = (FriendHandler.FriendAllAgreeApplyRequest)FriendHandler.FriendAllAgreeApplyRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendAllAgreeApplyRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } private void ensureC2SRequestIdsIsMutable() { if ((this.bitField0_ & 0x1) != 1) { this.c2SRequestIds_ = (LazyStringList)new LazyStringArrayList(this.c2SRequestIds_); this.bitField0_ |= 0x1; }  } public ProtocolStringList getC2SRequestIdsList() { return (ProtocolStringList)this.c2SRequestIds_.getUnmodifiableView(); } public int getC2SRequestIdsCount() { return this.c2SRequestIds_.size(); } public String getC2SRequestIds(int index) { return (String)this.c2SRequestIds_.get(index); } public ByteString getC2SRequestIdsBytes(int index) { return this.c2SRequestIds_.getByteString(index); } public Builder setC2SRequestIds(int index, String value) { if (value == null) throw new NullPointerException();  ensureC2SRequestIdsIsMutable(); this.c2SRequestIds_.set(index, value); onChanged(); return this; } public Builder addC2SRequestIds(String value) { if (value == null) throw new NullPointerException();  ensureC2SRequestIdsIsMutable(); this.c2SRequestIds_.add(value); onChanged(); return this; } public Builder addAllC2SRequestIds(Iterable<String> values) { ensureC2SRequestIdsIsMutable(); AbstractMessageLite.Builder.addAll(values, (Collection)this.c2SRequestIds_); onChanged(); return this; } public Builder clearC2SRequestIds() { this.c2SRequestIds_ = LazyStringArrayList.EMPTY; this.bitField0_ &= 0xFFFFFFFE; onChanged(); return this; } public Builder addC2SRequestIdsBytes(ByteString value) { if (value == null) throw new NullPointerException();  ensureC2SRequestIdsIsMutable(); this.c2SRequestIds_.add(value); onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendRefuceApplyRequest
/*       */     extends GeneratedMessage
/*       */     implements FriendRefuceApplyRequestOrBuilder
/*       */   {
/*  8821 */     private static final FriendRefuceApplyRequest defaultInstance = new FriendRefuceApplyRequest(true); private final UnknownFieldSet unknownFields; private FriendRefuceApplyRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendRefuceApplyRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendRefuceApplyRequest getDefaultInstance() { return defaultInstance; } public FriendRefuceApplyRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendRefuceApplyRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2SRequestId_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendRefuceApplyRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendRefuceApplyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendRefuceApplyRequest.class, Builder.class); } public static Parser<FriendRefuceApplyRequest> PARSER = (Parser<FriendRefuceApplyRequest>)new AbstractParser<FriendRefuceApplyRequest>() { public FriendHandler.FriendRefuceApplyRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendRefuceApplyRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_REQUESTID_FIELD_NUMBER = 1; private Object c2SRequestId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendRefuceApplyRequest> getParserForType() { return PARSER; } public boolean hasC2SRequestId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SRequestId() { Object ref = this.c2SRequestId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SRequestId_ = s;  return s; } public ByteString getC2SRequestIdBytes() { Object ref = this.c2SRequestId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SRequestId_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.c2SRequestId_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SRequestId()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SRequestIdBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SRequestIdBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendRefuceApplyRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendRefuceApplyRequest)PARSER.parseFrom(data); } public static FriendRefuceApplyRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendRefuceApplyRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendRefuceApplyRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendRefuceApplyRequest)PARSER.parseFrom(data); } public static FriendRefuceApplyRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendRefuceApplyRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendRefuceApplyRequest parseFrom(InputStream input) throws IOException { return (FriendRefuceApplyRequest)PARSER.parseFrom(input); } public static FriendRefuceApplyRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendRefuceApplyRequest)PARSER.parseFrom(input, extensionRegistry); } public static FriendRefuceApplyRequest parseDelimitedFrom(InputStream input) throws IOException { return (FriendRefuceApplyRequest)PARSER.parseDelimitedFrom(input); } public static FriendRefuceApplyRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendRefuceApplyRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendRefuceApplyRequest parseFrom(CodedInputStream input) throws IOException { return (FriendRefuceApplyRequest)PARSER.parseFrom(input); } public static FriendRefuceApplyRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendRefuceApplyRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendRefuceApplyRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendRefuceApplyRequestOrBuilder {
/*  8822 */       private int bitField0_; private Object c2SRequestId_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendRefuceApplyRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendRefuceApplyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendRefuceApplyRequest.class, Builder.class); } private Builder() { this.c2SRequestId_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SRequestId_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendRefuceApplyRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SRequestId_ = ""; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendRefuceApplyRequest_descriptor; } public FriendHandler.FriendRefuceApplyRequest getDefaultInstanceForType() { return FriendHandler.FriendRefuceApplyRequest.getDefaultInstance(); } public FriendHandler.FriendRefuceApplyRequest build() { FriendHandler.FriendRefuceApplyRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendRefuceApplyRequest buildPartial() { FriendHandler.FriendRefuceApplyRequest result = new FriendHandler.FriendRefuceApplyRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SRequestId_ = this.c2SRequestId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendRefuceApplyRequest) return mergeFrom((FriendHandler.FriendRefuceApplyRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendRefuceApplyRequest other) { if (other == FriendHandler.FriendRefuceApplyRequest.getDefaultInstance()) return this;  if (other.hasC2SRequestId()) { this.bitField0_ |= 0x1; this.c2SRequestId_ = other.c2SRequestId_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SRequestId()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendRefuceApplyRequest parsedMessage = null; try { parsedMessage = (FriendHandler.FriendRefuceApplyRequest)FriendHandler.FriendRefuceApplyRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendRefuceApplyRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SRequestId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SRequestId() { Object ref = this.c2SRequestId_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SRequestId_ = s;  return s; }  return (String)ref; } public ByteString getC2SRequestIdBytes() { Object ref = this.c2SRequestId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SRequestId_ = b; return b; }  return (ByteString)ref; } public Builder setC2SRequestId(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SRequestId_ = value; onChanged(); return this; } public Builder clearC2SRequestId() { this.bitField0_ &= 0xFFFFFFFE; this.c2SRequestId_ = FriendHandler.FriendRefuceApplyRequest.getDefaultInstance().getC2SRequestId(); onChanged(); return this; } public Builder setC2SRequestIdBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SRequestId_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendAllRefuceApplyRequest
/*       */     extends GeneratedMessage
/*       */     implements FriendAllRefuceApplyRequestOrBuilder
/*       */   {
/*  9320 */     private static final FriendAllRefuceApplyRequest defaultInstance = new FriendAllRefuceApplyRequest(true); private final UnknownFieldSet unknownFields; private FriendAllRefuceApplyRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendAllRefuceApplyRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendAllRefuceApplyRequest getDefaultInstance() { return defaultInstance; } public FriendAllRefuceApplyRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendAllRefuceApplyRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); if ((mutable_bitField0_ & 0x1) != 1) { this.c2SRequestIds_ = (LazyStringList)new LazyStringArrayList(); mutable_bitField0_ |= 0x1; }  this.c2SRequestIds_.add(bs); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x1) == 1) this.c2SRequestIds_ = this.c2SRequestIds_.getUnmodifiableView();  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAllRefuceApplyRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAllRefuceApplyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendAllRefuceApplyRequest.class, Builder.class); } public static Parser<FriendAllRefuceApplyRequest> PARSER = (Parser<FriendAllRefuceApplyRequest>)new AbstractParser<FriendAllRefuceApplyRequest>() { public FriendHandler.FriendAllRefuceApplyRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendAllRefuceApplyRequest(input, extensionRegistry); } }; public static final int C2S_REQUESTIDS_FIELD_NUMBER = 1; private LazyStringList c2SRequestIds_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendAllRefuceApplyRequest> getParserForType() { return PARSER; } public ProtocolStringList getC2SRequestIdsList() { return (ProtocolStringList)this.c2SRequestIds_; } public int getC2SRequestIdsCount() { return this.c2SRequestIds_.size(); } public String getC2SRequestIds(int index) { return (String)this.c2SRequestIds_.get(index); } public ByteString getC2SRequestIdsBytes(int index) { return this.c2SRequestIds_.getByteString(index); } private void initFields() { this.c2SRequestIds_ = LazyStringArrayList.EMPTY; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); for (int i = 0; i < this.c2SRequestIds_.size(); i++) output.writeBytes(1, this.c2SRequestIds_.getByteString(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; int dataSize = 0; for (int i = 0; i < this.c2SRequestIds_.size(); i++) dataSize += CodedOutputStream.computeBytesSizeNoTag(this.c2SRequestIds_.getByteString(i));  size += dataSize; size += 1 * getC2SRequestIdsList().size(); size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendAllRefuceApplyRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendAllRefuceApplyRequest)PARSER.parseFrom(data); } public static FriendAllRefuceApplyRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAllRefuceApplyRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendAllRefuceApplyRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendAllRefuceApplyRequest)PARSER.parseFrom(data); } public static FriendAllRefuceApplyRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAllRefuceApplyRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendAllRefuceApplyRequest parseFrom(InputStream input) throws IOException { return (FriendAllRefuceApplyRequest)PARSER.parseFrom(input); } public static FriendAllRefuceApplyRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllRefuceApplyRequest)PARSER.parseFrom(input, extensionRegistry); } public static FriendAllRefuceApplyRequest parseDelimitedFrom(InputStream input) throws IOException { return (FriendAllRefuceApplyRequest)PARSER.parseDelimitedFrom(input); } public static FriendAllRefuceApplyRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllRefuceApplyRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendAllRefuceApplyRequest parseFrom(CodedInputStream input) throws IOException { return (FriendAllRefuceApplyRequest)PARSER.parseFrom(input); } public static FriendAllRefuceApplyRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllRefuceApplyRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendAllRefuceApplyRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendAllRefuceApplyRequestOrBuilder {
/*  9321 */       private int bitField0_; private LazyStringList c2SRequestIds_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAllRefuceApplyRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAllRefuceApplyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendAllRefuceApplyRequest.class, Builder.class); } private Builder() { this.c2SRequestIds_ = LazyStringArrayList.EMPTY; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SRequestIds_ = LazyStringArrayList.EMPTY; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendAllRefuceApplyRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SRequestIds_ = LazyStringArrayList.EMPTY; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendAllRefuceApplyRequest_descriptor; } public FriendHandler.FriendAllRefuceApplyRequest getDefaultInstanceForType() { return FriendHandler.FriendAllRefuceApplyRequest.getDefaultInstance(); } public FriendHandler.FriendAllRefuceApplyRequest build() { FriendHandler.FriendAllRefuceApplyRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendAllRefuceApplyRequest buildPartial() { FriendHandler.FriendAllRefuceApplyRequest result = new FriendHandler.FriendAllRefuceApplyRequest(this); int from_bitField0_ = this.bitField0_; if ((this.bitField0_ & 0x1) == 1) { this.c2SRequestIds_ = this.c2SRequestIds_.getUnmodifiableView(); this.bitField0_ &= 0xFFFFFFFE; }  result.c2SRequestIds_ = this.c2SRequestIds_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendAllRefuceApplyRequest) return mergeFrom((FriendHandler.FriendAllRefuceApplyRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendAllRefuceApplyRequest other) { if (other == FriendHandler.FriendAllRefuceApplyRequest.getDefaultInstance()) return this;  if (!other.c2SRequestIds_.isEmpty()) { if (this.c2SRequestIds_.isEmpty()) { this.c2SRequestIds_ = other.c2SRequestIds_; this.bitField0_ &= 0xFFFFFFFE; } else { ensureC2SRequestIdsIsMutable(); this.c2SRequestIds_.addAll((Collection)other.c2SRequestIds_); }  onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendAllRefuceApplyRequest parsedMessage = null; try { parsedMessage = (FriendHandler.FriendAllRefuceApplyRequest)FriendHandler.FriendAllRefuceApplyRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendAllRefuceApplyRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } private void ensureC2SRequestIdsIsMutable() { if ((this.bitField0_ & 0x1) != 1) { this.c2SRequestIds_ = (LazyStringList)new LazyStringArrayList(this.c2SRequestIds_); this.bitField0_ |= 0x1; }  } public ProtocolStringList getC2SRequestIdsList() { return (ProtocolStringList)this.c2SRequestIds_.getUnmodifiableView(); } public int getC2SRequestIdsCount() { return this.c2SRequestIds_.size(); } public String getC2SRequestIds(int index) { return (String)this.c2SRequestIds_.get(index); } public ByteString getC2SRequestIdsBytes(int index) { return this.c2SRequestIds_.getByteString(index); } public Builder setC2SRequestIds(int index, String value) { if (value == null) throw new NullPointerException();  ensureC2SRequestIdsIsMutable(); this.c2SRequestIds_.set(index, value); onChanged(); return this; } public Builder addC2SRequestIds(String value) { if (value == null) throw new NullPointerException();  ensureC2SRequestIdsIsMutable(); this.c2SRequestIds_.add(value); onChanged(); return this; } public Builder addAllC2SRequestIds(Iterable<String> values) { ensureC2SRequestIdsIsMutable(); AbstractMessageLite.Builder.addAll(values, (Collection)this.c2SRequestIds_); onChanged(); return this; } public Builder clearC2SRequestIds() { this.c2SRequestIds_ = LazyStringArrayList.EMPTY; this.bitField0_ &= 0xFFFFFFFE; onChanged(); return this; } public Builder addC2SRequestIdsBytes(ByteString value) { if (value == null) throw new NullPointerException();  ensureC2SRequestIdsIsMutable(); this.c2SRequestIds_.add(value); onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendGetFriendAwardRequest
/*       */     extends GeneratedMessage
/*       */     implements FriendGetFriendAwardRequestOrBuilder
/*       */   {
/*  9890 */     private static final FriendGetFriendAwardRequest defaultInstance = new FriendGetFriendAwardRequest(true); private final UnknownFieldSet unknownFields; private FriendGetFriendAwardRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendGetFriendAwardRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendGetFriendAwardRequest getDefaultInstance() { return defaultInstance; } public FriendGetFriendAwardRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendGetFriendAwardRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2SFriendId_ = bs; break;case 16: this.bitField0_ |= 0x2; this.c2SAwardId_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendGetFriendAwardRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendGetFriendAwardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendGetFriendAwardRequest.class, Builder.class); } public static Parser<FriendGetFriendAwardRequest> PARSER = (Parser<FriendGetFriendAwardRequest>)new AbstractParser<FriendGetFriendAwardRequest>() { public FriendHandler.FriendGetFriendAwardRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendGetFriendAwardRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_FRIENDID_FIELD_NUMBER = 1; private Object c2SFriendId_; public static final int C2S_AWARDID_FIELD_NUMBER = 2; private int c2SAwardId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendGetFriendAwardRequest> getParserForType() { return PARSER; } public boolean hasC2SFriendId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SFriendId() { Object ref = this.c2SFriendId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SFriendId_ = s;  return s; } public ByteString getC2SFriendIdBytes() { Object ref = this.c2SFriendId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SFriendId_ = b; return b; }  return (ByteString)ref; } public boolean hasC2SAwardId() { return ((this.bitField0_ & 0x2) == 2); } public int getC2SAwardId() { return this.c2SAwardId_; } private void initFields() { this.c2SFriendId_ = ""; this.c2SAwardId_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SFriendId()) { this.memoizedIsInitialized = 0; return false; }  if (!hasC2SAwardId()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SFriendIdBytes());  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.c2SAwardId_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SFriendIdBytes());  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.c2SAwardId_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendGetFriendAwardRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendGetFriendAwardRequest)PARSER.parseFrom(data); } public static FriendGetFriendAwardRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendGetFriendAwardRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendGetFriendAwardRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendGetFriendAwardRequest)PARSER.parseFrom(data); } public static FriendGetFriendAwardRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendGetFriendAwardRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendGetFriendAwardRequest parseFrom(InputStream input) throws IOException { return (FriendGetFriendAwardRequest)PARSER.parseFrom(input); } public static FriendGetFriendAwardRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendGetFriendAwardRequest)PARSER.parseFrom(input, extensionRegistry); } public static FriendGetFriendAwardRequest parseDelimitedFrom(InputStream input) throws IOException { return (FriendGetFriendAwardRequest)PARSER.parseDelimitedFrom(input); } public static FriendGetFriendAwardRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendGetFriendAwardRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendGetFriendAwardRequest parseFrom(CodedInputStream input) throws IOException { return (FriendGetFriendAwardRequest)PARSER.parseFrom(input); } public static FriendGetFriendAwardRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendGetFriendAwardRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendGetFriendAwardRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendGetFriendAwardRequestOrBuilder {
/*  9891 */       private int bitField0_; private Object c2SFriendId_; private int c2SAwardId_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendGetFriendAwardRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendGetFriendAwardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendGetFriendAwardRequest.class, Builder.class); } private Builder() { this.c2SFriendId_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SFriendId_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendGetFriendAwardRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SFriendId_ = ""; this.bitField0_ &= 0xFFFFFFFE; this.c2SAwardId_ = 0; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendGetFriendAwardRequest_descriptor; } public FriendHandler.FriendGetFriendAwardRequest getDefaultInstanceForType() { return FriendHandler.FriendGetFriendAwardRequest.getDefaultInstance(); } public FriendHandler.FriendGetFriendAwardRequest build() { FriendHandler.FriendGetFriendAwardRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendGetFriendAwardRequest buildPartial() { FriendHandler.FriendGetFriendAwardRequest result = new FriendHandler.FriendGetFriendAwardRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SFriendId_ = this.c2SFriendId_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.c2SAwardId_ = this.c2SAwardId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendGetFriendAwardRequest) return mergeFrom((FriendHandler.FriendGetFriendAwardRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendGetFriendAwardRequest other) { if (other == FriendHandler.FriendGetFriendAwardRequest.getDefaultInstance()) return this;  if (other.hasC2SFriendId()) { this.bitField0_ |= 0x1; this.c2SFriendId_ = other.c2SFriendId_; onChanged(); }  if (other.hasC2SAwardId()) setC2SAwardId(other.getC2SAwardId());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SFriendId()) return false;  if (!hasC2SAwardId()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendGetFriendAwardRequest parsedMessage = null; try { parsedMessage = (FriendHandler.FriendGetFriendAwardRequest)FriendHandler.FriendGetFriendAwardRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendGetFriendAwardRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SFriendId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SFriendId() { Object ref = this.c2SFriendId_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SFriendId_ = s;  return s; }  return (String)ref; } public ByteString getC2SFriendIdBytes() { Object ref = this.c2SFriendId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SFriendId_ = b; return b; }  return (ByteString)ref; } public Builder setC2SFriendId(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SFriendId_ = value; onChanged(); return this; } public Builder clearC2SFriendId() { this.bitField0_ &= 0xFFFFFFFE; this.c2SFriendId_ = FriendHandler.FriendGetFriendAwardRequest.getDefaultInstance().getC2SFriendId(); onChanged(); return this; } public Builder setC2SFriendIdBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SFriendId_ = value; onChanged(); return this; } public boolean hasC2SAwardId() { return ((this.bitField0_ & 0x2) == 2); } public int getC2SAwardId() { return this.c2SAwardId_; } public Builder setC2SAwardId(int value) { this.bitField0_ |= 0x2; this.c2SAwardId_ = value; onChanged(); return this; } public Builder clearC2SAwardId() { this.bitField0_ &= 0xFFFFFFFD; this.c2SAwardId_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendDeleteRequest
/*       */     extends GeneratedMessage
/*       */     implements FriendDeleteRequestOrBuilder
/*       */   {
/* 10374 */     private static final FriendDeleteRequest defaultInstance = new FriendDeleteRequest(true); private final UnknownFieldSet unknownFields; private FriendDeleteRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendDeleteRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendDeleteRequest getDefaultInstance() { return defaultInstance; } public FriendDeleteRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendDeleteRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2SFriendId_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendDeleteRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendDeleteRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendDeleteRequest.class, Builder.class); } public static Parser<FriendDeleteRequest> PARSER = (Parser<FriendDeleteRequest>)new AbstractParser<FriendDeleteRequest>() { public FriendHandler.FriendDeleteRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendDeleteRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_FRIENDID_FIELD_NUMBER = 1; private Object c2SFriendId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendDeleteRequest> getParserForType() { return PARSER; } public boolean hasC2SFriendId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SFriendId() { Object ref = this.c2SFriendId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SFriendId_ = s;  return s; } public ByteString getC2SFriendIdBytes() { Object ref = this.c2SFriendId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SFriendId_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.c2SFriendId_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SFriendId()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SFriendIdBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SFriendIdBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendDeleteRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendDeleteRequest)PARSER.parseFrom(data); } public static FriendDeleteRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendDeleteRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendDeleteRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendDeleteRequest)PARSER.parseFrom(data); } public static FriendDeleteRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendDeleteRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendDeleteRequest parseFrom(InputStream input) throws IOException { return (FriendDeleteRequest)PARSER.parseFrom(input); } public static FriendDeleteRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendDeleteRequest)PARSER.parseFrom(input, extensionRegistry); } public static FriendDeleteRequest parseDelimitedFrom(InputStream input) throws IOException { return (FriendDeleteRequest)PARSER.parseDelimitedFrom(input); } public static FriendDeleteRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendDeleteRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendDeleteRequest parseFrom(CodedInputStream input) throws IOException { return (FriendDeleteRequest)PARSER.parseFrom(input); } public static FriendDeleteRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendDeleteRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendDeleteRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendDeleteRequestOrBuilder {
/* 10375 */       private int bitField0_; private Object c2SFriendId_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendDeleteRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendDeleteRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendDeleteRequest.class, Builder.class); } private Builder() { this.c2SFriendId_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SFriendId_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendDeleteRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SFriendId_ = ""; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendDeleteRequest_descriptor; } public FriendHandler.FriendDeleteRequest getDefaultInstanceForType() { return FriendHandler.FriendDeleteRequest.getDefaultInstance(); } public FriendHandler.FriendDeleteRequest build() { FriendHandler.FriendDeleteRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendDeleteRequest buildPartial() { FriendHandler.FriendDeleteRequest result = new FriendHandler.FriendDeleteRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SFriendId_ = this.c2SFriendId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendDeleteRequest) return mergeFrom((FriendHandler.FriendDeleteRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendDeleteRequest other) { if (other == FriendHandler.FriendDeleteRequest.getDefaultInstance()) return this;  if (other.hasC2SFriendId()) { this.bitField0_ |= 0x1; this.c2SFriendId_ = other.c2SFriendId_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SFriendId()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendDeleteRequest parsedMessage = null; try { parsedMessage = (FriendHandler.FriendDeleteRequest)FriendHandler.FriendDeleteRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendDeleteRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SFriendId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SFriendId() { Object ref = this.c2SFriendId_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SFriendId_ = s;  return s; }  return (String)ref; } public ByteString getC2SFriendIdBytes() { Object ref = this.c2SFriendId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SFriendId_ = b; return b; }  return (ByteString)ref; } public Builder setC2SFriendId(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SFriendId_ = value; onChanged(); return this; } public Builder clearC2SFriendId() { this.bitField0_ &= 0xFFFFFFFE; this.c2SFriendId_ = FriendHandler.FriendDeleteRequest.getDefaultInstance().getC2SFriendId(); onChanged(); return this; } public Builder setC2SFriendIdBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SFriendId_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendAddFriendExpRequest
/*       */     extends GeneratedMessage
/*       */     implements FriendAddFriendExpRequestOrBuilder
/*       */   {
/* 10944 */     private static final FriendAddFriendExpRequest defaultInstance = new FriendAddFriendExpRequest(true); private final UnknownFieldSet unknownFields; private FriendAddFriendExpRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendAddFriendExpRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendAddFriendExpRequest getDefaultInstance() { return defaultInstance; } public FriendAddFriendExpRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendAddFriendExpRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2SFriendId_ = bs; break;case 16: this.bitField0_ |= 0x2; this.c2SPoint_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAddFriendExpRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAddFriendExpRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendAddFriendExpRequest.class, Builder.class); } public static Parser<FriendAddFriendExpRequest> PARSER = (Parser<FriendAddFriendExpRequest>)new AbstractParser<FriendAddFriendExpRequest>() { public FriendHandler.FriendAddFriendExpRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendAddFriendExpRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_FRIENDID_FIELD_NUMBER = 1; private Object c2SFriendId_; public static final int C2S_POINT_FIELD_NUMBER = 2; private int c2SPoint_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendAddFriendExpRequest> getParserForType() { return PARSER; } public boolean hasC2SFriendId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SFriendId() { Object ref = this.c2SFriendId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SFriendId_ = s;  return s; } public ByteString getC2SFriendIdBytes() { Object ref = this.c2SFriendId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SFriendId_ = b; return b; }  return (ByteString)ref; } public boolean hasC2SPoint() { return ((this.bitField0_ & 0x2) == 2); } public int getC2SPoint() { return this.c2SPoint_; } private void initFields() { this.c2SFriendId_ = ""; this.c2SPoint_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SFriendId()) { this.memoizedIsInitialized = 0; return false; }  if (!hasC2SPoint()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SFriendIdBytes());  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.c2SPoint_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SFriendIdBytes());  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.c2SPoint_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendAddFriendExpRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendAddFriendExpRequest)PARSER.parseFrom(data); } public static FriendAddFriendExpRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAddFriendExpRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendAddFriendExpRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendAddFriendExpRequest)PARSER.parseFrom(data); } public static FriendAddFriendExpRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAddFriendExpRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendAddFriendExpRequest parseFrom(InputStream input) throws IOException { return (FriendAddFriendExpRequest)PARSER.parseFrom(input); } public static FriendAddFriendExpRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAddFriendExpRequest)PARSER.parseFrom(input, extensionRegistry); } public static FriendAddFriendExpRequest parseDelimitedFrom(InputStream input) throws IOException { return (FriendAddFriendExpRequest)PARSER.parseDelimitedFrom(input); } public static FriendAddFriendExpRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAddFriendExpRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendAddFriendExpRequest parseFrom(CodedInputStream input) throws IOException { return (FriendAddFriendExpRequest)PARSER.parseFrom(input); } public static FriendAddFriendExpRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAddFriendExpRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendAddFriendExpRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendAddFriendExpRequestOrBuilder {
/* 10945 */       private int bitField0_; private Object c2SFriendId_; private int c2SPoint_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAddFriendExpRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAddFriendExpRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendAddFriendExpRequest.class, Builder.class); } private Builder() { this.c2SFriendId_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SFriendId_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendAddFriendExpRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SFriendId_ = ""; this.bitField0_ &= 0xFFFFFFFE; this.c2SPoint_ = 0; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendAddFriendExpRequest_descriptor; } public FriendHandler.FriendAddFriendExpRequest getDefaultInstanceForType() { return FriendHandler.FriendAddFriendExpRequest.getDefaultInstance(); } public FriendHandler.FriendAddFriendExpRequest build() { FriendHandler.FriendAddFriendExpRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendAddFriendExpRequest buildPartial() { FriendHandler.FriendAddFriendExpRequest result = new FriendHandler.FriendAddFriendExpRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SFriendId_ = this.c2SFriendId_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.c2SPoint_ = this.c2SPoint_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendAddFriendExpRequest) return mergeFrom((FriendHandler.FriendAddFriendExpRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendAddFriendExpRequest other) { if (other == FriendHandler.FriendAddFriendExpRequest.getDefaultInstance()) return this;  if (other.hasC2SFriendId()) { this.bitField0_ |= 0x1; this.c2SFriendId_ = other.c2SFriendId_; onChanged(); }  if (other.hasC2SPoint()) setC2SPoint(other.getC2SPoint());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SFriendId()) return false;  if (!hasC2SPoint()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendAddFriendExpRequest parsedMessage = null; try { parsedMessage = (FriendHandler.FriendAddFriendExpRequest)FriendHandler.FriendAddFriendExpRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendAddFriendExpRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SFriendId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SFriendId() { Object ref = this.c2SFriendId_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SFriendId_ = s;  return s; }  return (String)ref; } public ByteString getC2SFriendIdBytes() { Object ref = this.c2SFriendId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SFriendId_ = b; return b; }  return (ByteString)ref; } public Builder setC2SFriendId(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SFriendId_ = value; onChanged(); return this; } public Builder clearC2SFriendId() { this.bitField0_ &= 0xFFFFFFFE; this.c2SFriendId_ = FriendHandler.FriendAddFriendExpRequest.getDefaultInstance().getC2SFriendId(); onChanged(); return this; } public Builder setC2SFriendIdBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SFriendId_ = value; onChanged(); return this; } public boolean hasC2SPoint() { return ((this.bitField0_ & 0x2) == 2); } public int getC2SPoint() { return this.c2SPoint_; } public Builder setC2SPoint(int value) { this.bitField0_ |= 0x2; this.c2SPoint_ = value; onChanged(); return this; } public Builder clearC2SPoint() { this.bitField0_ &= 0xFFFFFFFD; this.c2SPoint_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendDeleteChouRenRequest
/*       */     extends GeneratedMessage
/*       */     implements FriendDeleteChouRenRequestOrBuilder
/*       */   {
/* 11428 */     private static final FriendDeleteChouRenRequest defaultInstance = new FriendDeleteChouRenRequest(true); private final UnknownFieldSet unknownFields; private FriendDeleteChouRenRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendDeleteChouRenRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendDeleteChouRenRequest getDefaultInstance() { return defaultInstance; } public FriendDeleteChouRenRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendDeleteChouRenRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2SChouRenId_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendDeleteChouRenRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendDeleteChouRenRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendDeleteChouRenRequest.class, Builder.class); } public static Parser<FriendDeleteChouRenRequest> PARSER = (Parser<FriendDeleteChouRenRequest>)new AbstractParser<FriendDeleteChouRenRequest>() { public FriendHandler.FriendDeleteChouRenRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendDeleteChouRenRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_CHOURENID_FIELD_NUMBER = 1; private Object c2SChouRenId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendDeleteChouRenRequest> getParserForType() { return PARSER; } public boolean hasC2SChouRenId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SChouRenId() { Object ref = this.c2SChouRenId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SChouRenId_ = s;  return s; } public ByteString getC2SChouRenIdBytes() { Object ref = this.c2SChouRenId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SChouRenId_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.c2SChouRenId_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SChouRenId()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SChouRenIdBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SChouRenIdBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendDeleteChouRenRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendDeleteChouRenRequest)PARSER.parseFrom(data); } public static FriendDeleteChouRenRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendDeleteChouRenRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendDeleteChouRenRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendDeleteChouRenRequest)PARSER.parseFrom(data); } public static FriendDeleteChouRenRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendDeleteChouRenRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendDeleteChouRenRequest parseFrom(InputStream input) throws IOException { return (FriendDeleteChouRenRequest)PARSER.parseFrom(input); } public static FriendDeleteChouRenRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendDeleteChouRenRequest)PARSER.parseFrom(input, extensionRegistry); } public static FriendDeleteChouRenRequest parseDelimitedFrom(InputStream input) throws IOException { return (FriendDeleteChouRenRequest)PARSER.parseDelimitedFrom(input); } public static FriendDeleteChouRenRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendDeleteChouRenRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendDeleteChouRenRequest parseFrom(CodedInputStream input) throws IOException { return (FriendDeleteChouRenRequest)PARSER.parseFrom(input); } public static FriendDeleteChouRenRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendDeleteChouRenRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendDeleteChouRenRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendDeleteChouRenRequestOrBuilder {
/* 11429 */       private int bitField0_; private Object c2SChouRenId_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendDeleteChouRenRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendDeleteChouRenRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendDeleteChouRenRequest.class, Builder.class); } private Builder() { this.c2SChouRenId_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SChouRenId_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendDeleteChouRenRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SChouRenId_ = ""; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendDeleteChouRenRequest_descriptor; } public FriendHandler.FriendDeleteChouRenRequest getDefaultInstanceForType() { return FriendHandler.FriendDeleteChouRenRequest.getDefaultInstance(); } public FriendHandler.FriendDeleteChouRenRequest build() { FriendHandler.FriendDeleteChouRenRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendDeleteChouRenRequest buildPartial() { FriendHandler.FriendDeleteChouRenRequest result = new FriendHandler.FriendDeleteChouRenRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SChouRenId_ = this.c2SChouRenId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendDeleteChouRenRequest) return mergeFrom((FriendHandler.FriendDeleteChouRenRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendDeleteChouRenRequest other) { if (other == FriendHandler.FriendDeleteChouRenRequest.getDefaultInstance()) return this;  if (other.hasC2SChouRenId()) { this.bitField0_ |= 0x1; this.c2SChouRenId_ = other.c2SChouRenId_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SChouRenId()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendDeleteChouRenRequest parsedMessage = null; try { parsedMessage = (FriendHandler.FriendDeleteChouRenRequest)FriendHandler.FriendDeleteChouRenRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendDeleteChouRenRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SChouRenId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SChouRenId() { Object ref = this.c2SChouRenId_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SChouRenId_ = s;  return s; }  return (String)ref; } public ByteString getC2SChouRenIdBytes() { Object ref = this.c2SChouRenId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SChouRenId_ = b; return b; }  return (ByteString)ref; } public Builder setC2SChouRenId(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SChouRenId_ = value; onChanged(); return this; } public Builder clearC2SChouRenId() { this.bitField0_ &= 0xFFFFFFFE; this.c2SChouRenId_ = FriendHandler.FriendDeleteChouRenRequest.getDefaultInstance().getC2SChouRenId(); onChanged(); return this; } public Builder setC2SChouRenIdBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SChouRenId_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendAllDeleteChouRenRequest
/*       */     extends GeneratedMessage
/*       */     implements FriendAllDeleteChouRenRequestOrBuilder
/*       */   {
/* 11927 */     private static final FriendAllDeleteChouRenRequest defaultInstance = new FriendAllDeleteChouRenRequest(true); private final UnknownFieldSet unknownFields; private FriendAllDeleteChouRenRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendAllDeleteChouRenRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendAllDeleteChouRenRequest getDefaultInstance() { return defaultInstance; } public FriendAllDeleteChouRenRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendAllDeleteChouRenRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); if ((mutable_bitField0_ & 0x1) != 1) { this.c2SChouRenIds_ = (LazyStringList)new LazyStringArrayList(); mutable_bitField0_ |= 0x1; }  this.c2SChouRenIds_.add(bs); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x1) == 1) this.c2SChouRenIds_ = this.c2SChouRenIds_.getUnmodifiableView();  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAllDeleteChouRenRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAllDeleteChouRenRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendAllDeleteChouRenRequest.class, Builder.class); } public static Parser<FriendAllDeleteChouRenRequest> PARSER = (Parser<FriendAllDeleteChouRenRequest>)new AbstractParser<FriendAllDeleteChouRenRequest>() { public FriendHandler.FriendAllDeleteChouRenRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendAllDeleteChouRenRequest(input, extensionRegistry); } }; public static final int C2S_CHOURENIDS_FIELD_NUMBER = 1; private LazyStringList c2SChouRenIds_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendAllDeleteChouRenRequest> getParserForType() { return PARSER; } public ProtocolStringList getC2SChouRenIdsList() { return (ProtocolStringList)this.c2SChouRenIds_; } public int getC2SChouRenIdsCount() { return this.c2SChouRenIds_.size(); } public String getC2SChouRenIds(int index) { return (String)this.c2SChouRenIds_.get(index); } public ByteString getC2SChouRenIdsBytes(int index) { return this.c2SChouRenIds_.getByteString(index); } private void initFields() { this.c2SChouRenIds_ = LazyStringArrayList.EMPTY; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); for (int i = 0; i < this.c2SChouRenIds_.size(); i++) output.writeBytes(1, this.c2SChouRenIds_.getByteString(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; int dataSize = 0; for (int i = 0; i < this.c2SChouRenIds_.size(); i++) dataSize += CodedOutputStream.computeBytesSizeNoTag(this.c2SChouRenIds_.getByteString(i));  size += dataSize; size += 1 * getC2SChouRenIdsList().size(); size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendAllDeleteChouRenRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendAllDeleteChouRenRequest)PARSER.parseFrom(data); } public static FriendAllDeleteChouRenRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAllDeleteChouRenRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendAllDeleteChouRenRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendAllDeleteChouRenRequest)PARSER.parseFrom(data); } public static FriendAllDeleteChouRenRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAllDeleteChouRenRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendAllDeleteChouRenRequest parseFrom(InputStream input) throws IOException { return (FriendAllDeleteChouRenRequest)PARSER.parseFrom(input); } public static FriendAllDeleteChouRenRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllDeleteChouRenRequest)PARSER.parseFrom(input, extensionRegistry); } public static FriendAllDeleteChouRenRequest parseDelimitedFrom(InputStream input) throws IOException { return (FriendAllDeleteChouRenRequest)PARSER.parseDelimitedFrom(input); } public static FriendAllDeleteChouRenRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllDeleteChouRenRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendAllDeleteChouRenRequest parseFrom(CodedInputStream input) throws IOException { return (FriendAllDeleteChouRenRequest)PARSER.parseFrom(input); } public static FriendAllDeleteChouRenRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllDeleteChouRenRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendAllDeleteChouRenRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendAllDeleteChouRenRequestOrBuilder {
/* 11928 */       private int bitField0_; private LazyStringList c2SChouRenIds_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAllDeleteChouRenRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAllDeleteChouRenRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendAllDeleteChouRenRequest.class, Builder.class); } private Builder() { this.c2SChouRenIds_ = LazyStringArrayList.EMPTY; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SChouRenIds_ = LazyStringArrayList.EMPTY; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendAllDeleteChouRenRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SChouRenIds_ = LazyStringArrayList.EMPTY; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendAllDeleteChouRenRequest_descriptor; } public FriendHandler.FriendAllDeleteChouRenRequest getDefaultInstanceForType() { return FriendHandler.FriendAllDeleteChouRenRequest.getDefaultInstance(); } public FriendHandler.FriendAllDeleteChouRenRequest build() { FriendHandler.FriendAllDeleteChouRenRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendAllDeleteChouRenRequest buildPartial() { FriendHandler.FriendAllDeleteChouRenRequest result = new FriendHandler.FriendAllDeleteChouRenRequest(this); int from_bitField0_ = this.bitField0_; if ((this.bitField0_ & 0x1) == 1) { this.c2SChouRenIds_ = this.c2SChouRenIds_.getUnmodifiableView(); this.bitField0_ &= 0xFFFFFFFE; }  result.c2SChouRenIds_ = this.c2SChouRenIds_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendAllDeleteChouRenRequest) return mergeFrom((FriendHandler.FriendAllDeleteChouRenRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendAllDeleteChouRenRequest other) { if (other == FriendHandler.FriendAllDeleteChouRenRequest.getDefaultInstance()) return this;  if (!other.c2SChouRenIds_.isEmpty()) { if (this.c2SChouRenIds_.isEmpty()) { this.c2SChouRenIds_ = other.c2SChouRenIds_; this.bitField0_ &= 0xFFFFFFFE; } else { ensureC2SChouRenIdsIsMutable(); this.c2SChouRenIds_.addAll((Collection)other.c2SChouRenIds_); }  onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendAllDeleteChouRenRequest parsedMessage = null; try { parsedMessage = (FriendHandler.FriendAllDeleteChouRenRequest)FriendHandler.FriendAllDeleteChouRenRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendAllDeleteChouRenRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } private void ensureC2SChouRenIdsIsMutable() { if ((this.bitField0_ & 0x1) != 1) { this.c2SChouRenIds_ = (LazyStringList)new LazyStringArrayList(this.c2SChouRenIds_); this.bitField0_ |= 0x1; }  } public ProtocolStringList getC2SChouRenIdsList() { return (ProtocolStringList)this.c2SChouRenIds_.getUnmodifiableView(); } public int getC2SChouRenIdsCount() { return this.c2SChouRenIds_.size(); } public String getC2SChouRenIds(int index) { return (String)this.c2SChouRenIds_.get(index); } public ByteString getC2SChouRenIdsBytes(int index) { return this.c2SChouRenIds_.getByteString(index); } public Builder setC2SChouRenIds(int index, String value) { if (value == null) throw new NullPointerException();  ensureC2SChouRenIdsIsMutable(); this.c2SChouRenIds_.set(index, value); onChanged(); return this; } public Builder addC2SChouRenIds(String value) { if (value == null) throw new NullPointerException();  ensureC2SChouRenIdsIsMutable(); this.c2SChouRenIds_.add(value); onChanged(); return this; } public Builder addAllC2SChouRenIds(Iterable<String> values) { ensureC2SChouRenIdsIsMutable(); AbstractMessageLite.Builder.addAll(values, (Collection)this.c2SChouRenIds_); onChanged(); return this; } public Builder clearC2SChouRenIds() { this.c2SChouRenIds_ = LazyStringArrayList.EMPTY; this.bitField0_ &= 0xFFFFFFFE; onChanged(); return this; } public Builder addC2SChouRenIdsBytes(ByteString value) { if (value == null) throw new NullPointerException();  ensureC2SChouRenIdsIsMutable(); this.c2SChouRenIds_.add(value); onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendAddChouRenRequest
/*       */     extends GeneratedMessage
/*       */     implements FriendAddChouRenRequestOrBuilder
/*       */   {
/* 12411 */     private static final FriendAddChouRenRequest defaultInstance = new FriendAddChouRenRequest(true); private final UnknownFieldSet unknownFields; private FriendAddChouRenRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendAddChouRenRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendAddChouRenRequest getDefaultInstance() { return defaultInstance; } public FriendAddChouRenRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendAddChouRenRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2SChouRenId_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAddChouRenRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAddChouRenRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendAddChouRenRequest.class, Builder.class); } public static Parser<FriendAddChouRenRequest> PARSER = (Parser<FriendAddChouRenRequest>)new AbstractParser<FriendAddChouRenRequest>() { public FriendHandler.FriendAddChouRenRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendAddChouRenRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_CHOURENID_FIELD_NUMBER = 1; private Object c2SChouRenId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendAddChouRenRequest> getParserForType() { return PARSER; } public boolean hasC2SChouRenId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SChouRenId() { Object ref = this.c2SChouRenId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SChouRenId_ = s;  return s; } public ByteString getC2SChouRenIdBytes() { Object ref = this.c2SChouRenId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SChouRenId_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.c2SChouRenId_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SChouRenId()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SChouRenIdBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SChouRenIdBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendAddChouRenRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendAddChouRenRequest)PARSER.parseFrom(data); } public static FriendAddChouRenRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAddChouRenRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendAddChouRenRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendAddChouRenRequest)PARSER.parseFrom(data); } public static FriendAddChouRenRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAddChouRenRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendAddChouRenRequest parseFrom(InputStream input) throws IOException { return (FriendAddChouRenRequest)PARSER.parseFrom(input); } public static FriendAddChouRenRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAddChouRenRequest)PARSER.parseFrom(input, extensionRegistry); } public static FriendAddChouRenRequest parseDelimitedFrom(InputStream input) throws IOException { return (FriendAddChouRenRequest)PARSER.parseDelimitedFrom(input); } public static FriendAddChouRenRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAddChouRenRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendAddChouRenRequest parseFrom(CodedInputStream input) throws IOException { return (FriendAddChouRenRequest)PARSER.parseFrom(input); } public static FriendAddChouRenRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAddChouRenRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendAddChouRenRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendAddChouRenRequestOrBuilder {
/* 12412 */       private int bitField0_; private Object c2SChouRenId_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAddChouRenRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAddChouRenRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendAddChouRenRequest.class, Builder.class); } private Builder() { this.c2SChouRenId_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SChouRenId_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendAddChouRenRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SChouRenId_ = ""; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendAddChouRenRequest_descriptor; } public FriendHandler.FriendAddChouRenRequest getDefaultInstanceForType() { return FriendHandler.FriendAddChouRenRequest.getDefaultInstance(); } public FriendHandler.FriendAddChouRenRequest build() { FriendHandler.FriendAddChouRenRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendAddChouRenRequest buildPartial() { FriendHandler.FriendAddChouRenRequest result = new FriendHandler.FriendAddChouRenRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SChouRenId_ = this.c2SChouRenId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendAddChouRenRequest) return mergeFrom((FriendHandler.FriendAddChouRenRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendAddChouRenRequest other) { if (other == FriendHandler.FriendAddChouRenRequest.getDefaultInstance()) return this;  if (other.hasC2SChouRenId()) { this.bitField0_ |= 0x1; this.c2SChouRenId_ = other.c2SChouRenId_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SChouRenId()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendAddChouRenRequest parsedMessage = null; try { parsedMessage = (FriendHandler.FriendAddChouRenRequest)FriendHandler.FriendAddChouRenRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendAddChouRenRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SChouRenId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SChouRenId() { Object ref = this.c2SChouRenId_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SChouRenId_ = s;  return s; }  return (String)ref; } public ByteString getC2SChouRenIdBytes() { Object ref = this.c2SChouRenId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SChouRenId_ = b; return b; }  return (ByteString)ref; } public Builder setC2SChouRenId(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SChouRenId_ = value; onChanged(); return this; } public Builder clearC2SChouRenId() { this.bitField0_ &= 0xFFFFFFFE; this.c2SChouRenId_ = FriendHandler.FriendAddChouRenRequest.getDefaultInstance().getC2SChouRenId(); onChanged(); return this; } public Builder setC2SChouRenIdBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SChouRenId_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class AddFriendInfoRequest
/*       */     extends GeneratedMessage
/*       */     implements AddFriendInfoRequestOrBuilder
/*       */   {
/* 12724 */     private static final AddFriendInfoRequest defaultInstance = new AddFriendInfoRequest(true); private final UnknownFieldSet unknownFields; private AddFriendInfoRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private AddFriendInfoRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static AddFriendInfoRequest getDefaultInstance() { return defaultInstance; } public AddFriendInfoRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private AddFriendInfoRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_AddFriendInfoRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_AddFriendInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(AddFriendInfoRequest.class, Builder.class); } public static Parser<AddFriendInfoRequest> PARSER = (Parser<AddFriendInfoRequest>)new AbstractParser<AddFriendInfoRequest>() { public FriendHandler.AddFriendInfoRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.AddFriendInfoRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<AddFriendInfoRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static AddFriendInfoRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (AddFriendInfoRequest)PARSER.parseFrom(data); } public static AddFriendInfoRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (AddFriendInfoRequest)PARSER.parseFrom(data, extensionRegistry); } public static AddFriendInfoRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (AddFriendInfoRequest)PARSER.parseFrom(data); } public static AddFriendInfoRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (AddFriendInfoRequest)PARSER.parseFrom(data, extensionRegistry); } public static AddFriendInfoRequest parseFrom(InputStream input) throws IOException { return (AddFriendInfoRequest)PARSER.parseFrom(input); } public static AddFriendInfoRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (AddFriendInfoRequest)PARSER.parseFrom(input, extensionRegistry); } public static AddFriendInfoRequest parseDelimitedFrom(InputStream input) throws IOException { return (AddFriendInfoRequest)PARSER.parseDelimitedFrom(input); } public static AddFriendInfoRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (AddFriendInfoRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static AddFriendInfoRequest parseFrom(CodedInputStream input) throws IOException { return (AddFriendInfoRequest)PARSER.parseFrom(input); } public static AddFriendInfoRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (AddFriendInfoRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(AddFriendInfoRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.AddFriendInfoRequestOrBuilder {
/* 12725 */       public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_AddFriendInfoRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_AddFriendInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.AddFriendInfoRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.AddFriendInfoRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_AddFriendInfoRequest_descriptor; } public FriendHandler.AddFriendInfoRequest getDefaultInstanceForType() { return FriendHandler.AddFriendInfoRequest.getDefaultInstance(); } public FriendHandler.AddFriendInfoRequest build() { FriendHandler.AddFriendInfoRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.AddFriendInfoRequest buildPartial() { FriendHandler.AddFriendInfoRequest result = new FriendHandler.AddFriendInfoRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.AddFriendInfoRequest) return mergeFrom((FriendHandler.AddFriendInfoRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.AddFriendInfoRequest other) { if (other == FriendHandler.AddFriendInfoRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.AddFriendInfoRequest parsedMessage = null; try { parsedMessage = (FriendHandler.AddFriendInfoRequest)FriendHandler.AddFriendInfoRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.AddFriendInfoRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class QueryPlayerNameRequest
/*       */     extends GeneratedMessage
/*       */     implements QueryPlayerNameRequestOrBuilder
/*       */   {
/* 13208 */     private static final QueryPlayerNameRequest defaultInstance = new QueryPlayerNameRequest(true); private final UnknownFieldSet unknownFields; private QueryPlayerNameRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private QueryPlayerNameRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static QueryPlayerNameRequest getDefaultInstance() { return defaultInstance; } public QueryPlayerNameRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private QueryPlayerNameRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2SStrName_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_QueryPlayerNameRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_QueryPlayerNameRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryPlayerNameRequest.class, Builder.class); } public static Parser<QueryPlayerNameRequest> PARSER = (Parser<QueryPlayerNameRequest>)new AbstractParser<QueryPlayerNameRequest>() { public FriendHandler.QueryPlayerNameRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.QueryPlayerNameRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_STRNAME_FIELD_NUMBER = 1; private Object c2SStrName_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<QueryPlayerNameRequest> getParserForType() { return PARSER; } public boolean hasC2SStrName() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SStrName() { Object ref = this.c2SStrName_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SStrName_ = s;  return s; } public ByteString getC2SStrNameBytes() { Object ref = this.c2SStrName_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SStrName_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.c2SStrName_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SStrName()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SStrNameBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SStrNameBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static QueryPlayerNameRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (QueryPlayerNameRequest)PARSER.parseFrom(data); } public static QueryPlayerNameRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (QueryPlayerNameRequest)PARSER.parseFrom(data, extensionRegistry); } public static QueryPlayerNameRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (QueryPlayerNameRequest)PARSER.parseFrom(data); } public static QueryPlayerNameRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (QueryPlayerNameRequest)PARSER.parseFrom(data, extensionRegistry); } public static QueryPlayerNameRequest parseFrom(InputStream input) throws IOException { return (QueryPlayerNameRequest)PARSER.parseFrom(input); } public static QueryPlayerNameRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (QueryPlayerNameRequest)PARSER.parseFrom(input, extensionRegistry); } public static QueryPlayerNameRequest parseDelimitedFrom(InputStream input) throws IOException { return (QueryPlayerNameRequest)PARSER.parseDelimitedFrom(input); } public static QueryPlayerNameRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (QueryPlayerNameRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static QueryPlayerNameRequest parseFrom(CodedInputStream input) throws IOException { return (QueryPlayerNameRequest)PARSER.parseFrom(input); } public static QueryPlayerNameRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (QueryPlayerNameRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(QueryPlayerNameRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.QueryPlayerNameRequestOrBuilder {
/* 13209 */       private int bitField0_; private Object c2SStrName_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_QueryPlayerNameRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_QueryPlayerNameRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.QueryPlayerNameRequest.class, Builder.class); } private Builder() { this.c2SStrName_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SStrName_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.QueryPlayerNameRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SStrName_ = ""; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_QueryPlayerNameRequest_descriptor; } public FriendHandler.QueryPlayerNameRequest getDefaultInstanceForType() { return FriendHandler.QueryPlayerNameRequest.getDefaultInstance(); } public FriendHandler.QueryPlayerNameRequest build() { FriendHandler.QueryPlayerNameRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.QueryPlayerNameRequest buildPartial() { FriendHandler.QueryPlayerNameRequest result = new FriendHandler.QueryPlayerNameRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SStrName_ = this.c2SStrName_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.QueryPlayerNameRequest) return mergeFrom((FriendHandler.QueryPlayerNameRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.QueryPlayerNameRequest other) { if (other == FriendHandler.QueryPlayerNameRequest.getDefaultInstance()) return this;  if (other.hasC2SStrName()) { this.bitField0_ |= 0x1; this.c2SStrName_ = other.c2SStrName_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SStrName()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.QueryPlayerNameRequest parsedMessage = null; try { parsedMessage = (FriendHandler.QueryPlayerNameRequest)FriendHandler.QueryPlayerNameRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.QueryPlayerNameRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SStrName() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SStrName() { Object ref = this.c2SStrName_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SStrName_ = s;  return s; }  return (String)ref; } public ByteString getC2SStrNameBytes() { Object ref = this.c2SStrName_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SStrName_ = b; return b; }  return (ByteString)ref; } public Builder setC2SStrName(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SStrName_ = value; onChanged(); return this; } public Builder clearC2SStrName() { this.bitField0_ &= 0xFFFFFFFE; this.c2SStrName_ = FriendHandler.QueryPlayerNameRequest.getDefaultInstance().getC2SStrName(); onChanged(); return this; } public Builder setC2SStrNameBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SStrName_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ConcernFriendRequest
/*       */     extends GeneratedMessage
/*       */     implements ConcernFriendRequestOrBuilder
/*       */   {
/* 13692 */     private static final ConcernFriendRequest defaultInstance = new ConcernFriendRequest(true); private final UnknownFieldSet unknownFields; private ConcernFriendRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ConcernFriendRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ConcernFriendRequest getDefaultInstance() { return defaultInstance; } public ConcernFriendRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ConcernFriendRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2SFriendId_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_ConcernFriendRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_ConcernFriendRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ConcernFriendRequest.class, Builder.class); } public static Parser<ConcernFriendRequest> PARSER = (Parser<ConcernFriendRequest>)new AbstractParser<ConcernFriendRequest>() { public FriendHandler.ConcernFriendRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.ConcernFriendRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_FRIENDID_FIELD_NUMBER = 1; private Object c2SFriendId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ConcernFriendRequest> getParserForType() { return PARSER; } public boolean hasC2SFriendId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SFriendId() { Object ref = this.c2SFriendId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SFriendId_ = s;  return s; } public ByteString getC2SFriendIdBytes() { Object ref = this.c2SFriendId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SFriendId_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.c2SFriendId_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SFriendId()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SFriendIdBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SFriendIdBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ConcernFriendRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ConcernFriendRequest)PARSER.parseFrom(data); } public static ConcernFriendRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ConcernFriendRequest)PARSER.parseFrom(data, extensionRegistry); } public static ConcernFriendRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ConcernFriendRequest)PARSER.parseFrom(data); } public static ConcernFriendRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ConcernFriendRequest)PARSER.parseFrom(data, extensionRegistry); } public static ConcernFriendRequest parseFrom(InputStream input) throws IOException { return (ConcernFriendRequest)PARSER.parseFrom(input); } public static ConcernFriendRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ConcernFriendRequest)PARSER.parseFrom(input, extensionRegistry); } public static ConcernFriendRequest parseDelimitedFrom(InputStream input) throws IOException { return (ConcernFriendRequest)PARSER.parseDelimitedFrom(input); } public static ConcernFriendRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ConcernFriendRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ConcernFriendRequest parseFrom(CodedInputStream input) throws IOException { return (ConcernFriendRequest)PARSER.parseFrom(input); } public static ConcernFriendRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ConcernFriendRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ConcernFriendRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.ConcernFriendRequestOrBuilder {
/* 13693 */       private int bitField0_; private Object c2SFriendId_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_ConcernFriendRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_ConcernFriendRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.ConcernFriendRequest.class, Builder.class); } private Builder() { this.c2SFriendId_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SFriendId_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.ConcernFriendRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SFriendId_ = ""; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_ConcernFriendRequest_descriptor; } public FriendHandler.ConcernFriendRequest getDefaultInstanceForType() { return FriendHandler.ConcernFriendRequest.getDefaultInstance(); } public FriendHandler.ConcernFriendRequest build() { FriendHandler.ConcernFriendRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.ConcernFriendRequest buildPartial() { FriendHandler.ConcernFriendRequest result = new FriendHandler.ConcernFriendRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SFriendId_ = this.c2SFriendId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.ConcernFriendRequest) return mergeFrom((FriendHandler.ConcernFriendRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.ConcernFriendRequest other) { if (other == FriendHandler.ConcernFriendRequest.getDefaultInstance()) return this;  if (other.hasC2SFriendId()) { this.bitField0_ |= 0x1; this.c2SFriendId_ = other.c2SFriendId_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SFriendId()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.ConcernFriendRequest parsedMessage = null; try { parsedMessage = (FriendHandler.ConcernFriendRequest)FriendHandler.ConcernFriendRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.ConcernFriendRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SFriendId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SFriendId() { Object ref = this.c2SFriendId_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SFriendId_ = s;  return s; }  return (String)ref; } public ByteString getC2SFriendIdBytes() { Object ref = this.c2SFriendId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SFriendId_ = b; return b; }  return (ByteString)ref; } public Builder setC2SFriendId(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SFriendId_ = value; onChanged(); return this; } public Builder clearC2SFriendId() { this.bitField0_ &= 0xFFFFFFFE; this.c2SFriendId_ = FriendHandler.ConcernFriendRequest.getDefaultInstance().getC2SFriendId(); onChanged(); return this; } public Builder setC2SFriendIdBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SFriendId_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ConcernAllFriendRequest
/*       */     extends GeneratedMessage
/*       */     implements ConcernAllFriendRequestOrBuilder
/*       */   {
/* 14191 */     private static final ConcernAllFriendRequest defaultInstance = new ConcernAllFriendRequest(true); private final UnknownFieldSet unknownFields; private ConcernAllFriendRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ConcernAllFriendRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ConcernAllFriendRequest getDefaultInstance() { return defaultInstance; } public ConcernAllFriendRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ConcernAllFriendRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); if ((mutable_bitField0_ & 0x1) != 1) { this.c2SFriendIds_ = (LazyStringList)new LazyStringArrayList(); mutable_bitField0_ |= 0x1; }  this.c2SFriendIds_.add(bs); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x1) == 1) this.c2SFriendIds_ = this.c2SFriendIds_.getUnmodifiableView();  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_ConcernAllFriendRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_ConcernAllFriendRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ConcernAllFriendRequest.class, Builder.class); } public static Parser<ConcernAllFriendRequest> PARSER = (Parser<ConcernAllFriendRequest>)new AbstractParser<ConcernAllFriendRequest>() { public FriendHandler.ConcernAllFriendRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.ConcernAllFriendRequest(input, extensionRegistry); } }; public static final int C2S_FRIENDIDS_FIELD_NUMBER = 1; private LazyStringList c2SFriendIds_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ConcernAllFriendRequest> getParserForType() { return PARSER; } public ProtocolStringList getC2SFriendIdsList() { return (ProtocolStringList)this.c2SFriendIds_; } public int getC2SFriendIdsCount() { return this.c2SFriendIds_.size(); } public String getC2SFriendIds(int index) { return (String)this.c2SFriendIds_.get(index); } public ByteString getC2SFriendIdsBytes(int index) { return this.c2SFriendIds_.getByteString(index); } private void initFields() { this.c2SFriendIds_ = LazyStringArrayList.EMPTY; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); for (int i = 0; i < this.c2SFriendIds_.size(); i++) output.writeBytes(1, this.c2SFriendIds_.getByteString(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; int dataSize = 0; for (int i = 0; i < this.c2SFriendIds_.size(); i++) dataSize += CodedOutputStream.computeBytesSizeNoTag(this.c2SFriendIds_.getByteString(i));  size += dataSize; size += 1 * getC2SFriendIdsList().size(); size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ConcernAllFriendRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ConcernAllFriendRequest)PARSER.parseFrom(data); } public static ConcernAllFriendRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ConcernAllFriendRequest)PARSER.parseFrom(data, extensionRegistry); } public static ConcernAllFriendRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ConcernAllFriendRequest)PARSER.parseFrom(data); } public static ConcernAllFriendRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ConcernAllFriendRequest)PARSER.parseFrom(data, extensionRegistry); } public static ConcernAllFriendRequest parseFrom(InputStream input) throws IOException { return (ConcernAllFriendRequest)PARSER.parseFrom(input); } public static ConcernAllFriendRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ConcernAllFriendRequest)PARSER.parseFrom(input, extensionRegistry); } public static ConcernAllFriendRequest parseDelimitedFrom(InputStream input) throws IOException { return (ConcernAllFriendRequest)PARSER.parseDelimitedFrom(input); } public static ConcernAllFriendRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ConcernAllFriendRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ConcernAllFriendRequest parseFrom(CodedInputStream input) throws IOException { return (ConcernAllFriendRequest)PARSER.parseFrom(input); } public static ConcernAllFriendRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ConcernAllFriendRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ConcernAllFriendRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.ConcernAllFriendRequestOrBuilder {
/* 14192 */       private int bitField0_; private LazyStringList c2SFriendIds_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_ConcernAllFriendRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_ConcernAllFriendRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.ConcernAllFriendRequest.class, Builder.class); } private Builder() { this.c2SFriendIds_ = LazyStringArrayList.EMPTY; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SFriendIds_ = LazyStringArrayList.EMPTY; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.ConcernAllFriendRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SFriendIds_ = LazyStringArrayList.EMPTY; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_ConcernAllFriendRequest_descriptor; } public FriendHandler.ConcernAllFriendRequest getDefaultInstanceForType() { return FriendHandler.ConcernAllFriendRequest.getDefaultInstance(); } public FriendHandler.ConcernAllFriendRequest build() { FriendHandler.ConcernAllFriendRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.ConcernAllFriendRequest buildPartial() { FriendHandler.ConcernAllFriendRequest result = new FriendHandler.ConcernAllFriendRequest(this); int from_bitField0_ = this.bitField0_; if ((this.bitField0_ & 0x1) == 1) { this.c2SFriendIds_ = this.c2SFriendIds_.getUnmodifiableView(); this.bitField0_ &= 0xFFFFFFFE; }  result.c2SFriendIds_ = this.c2SFriendIds_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.ConcernAllFriendRequest) return mergeFrom((FriendHandler.ConcernAllFriendRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.ConcernAllFriendRequest other) { if (other == FriendHandler.ConcernAllFriendRequest.getDefaultInstance()) return this;  if (!other.c2SFriendIds_.isEmpty()) { if (this.c2SFriendIds_.isEmpty()) { this.c2SFriendIds_ = other.c2SFriendIds_; this.bitField0_ &= 0xFFFFFFFE; } else { ensureC2SFriendIdsIsMutable(); this.c2SFriendIds_.addAll((Collection)other.c2SFriendIds_); }  onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.ConcernAllFriendRequest parsedMessage = null; try { parsedMessage = (FriendHandler.ConcernAllFriendRequest)FriendHandler.ConcernAllFriendRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.ConcernAllFriendRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } private void ensureC2SFriendIdsIsMutable() { if ((this.bitField0_ & 0x1) != 1) { this.c2SFriendIds_ = (LazyStringList)new LazyStringArrayList(this.c2SFriendIds_); this.bitField0_ |= 0x1; }  } public ProtocolStringList getC2SFriendIdsList() { return (ProtocolStringList)this.c2SFriendIds_.getUnmodifiableView(); } public int getC2SFriendIdsCount() { return this.c2SFriendIds_.size(); } public String getC2SFriendIds(int index) { return (String)this.c2SFriendIds_.get(index); } public ByteString getC2SFriendIdsBytes(int index) { return this.c2SFriendIds_.getByteString(index); } public Builder setC2SFriendIds(int index, String value) { if (value == null) throw new NullPointerException();  ensureC2SFriendIdsIsMutable(); this.c2SFriendIds_.set(index, value); onChanged(); return this; } public Builder addC2SFriendIds(String value) { if (value == null) throw new NullPointerException();  ensureC2SFriendIdsIsMutable(); this.c2SFriendIds_.add(value); onChanged(); return this; } public Builder addAllC2SFriendIds(Iterable<String> values) { ensureC2SFriendIdsIsMutable(); AbstractMessageLite.Builder.addAll(values, (Collection)this.c2SFriendIds_); onChanged(); return this; } public Builder clearC2SFriendIds() { this.c2SFriendIds_ = LazyStringArrayList.EMPTY; this.bitField0_ &= 0xFFFFFFFE; onChanged(); return this; } public Builder addC2SFriendIdsBytes(ByteString value) { if (value == null) throw new NullPointerException();  ensureC2SFriendIdsIsMutable(); this.c2SFriendIds_.add(value); onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendMessageListRequest
/*       */     extends GeneratedMessage
/*       */     implements FriendMessageListRequestOrBuilder
/*       */   {
/* 14504 */     private static final FriendMessageListRequest defaultInstance = new FriendMessageListRequest(true); private final UnknownFieldSet unknownFields; private FriendMessageListRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendMessageListRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendMessageListRequest getDefaultInstance() { return defaultInstance; } public FriendMessageListRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendMessageListRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendMessageListRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendMessageListRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendMessageListRequest.class, Builder.class); } public static Parser<FriendMessageListRequest> PARSER = (Parser<FriendMessageListRequest>)new AbstractParser<FriendMessageListRequest>() { public FriendHandler.FriendMessageListRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendMessageListRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendMessageListRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendMessageListRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendMessageListRequest)PARSER.parseFrom(data); } public static FriendMessageListRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendMessageListRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendMessageListRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendMessageListRequest)PARSER.parseFrom(data); } public static FriendMessageListRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendMessageListRequest)PARSER.parseFrom(data, extensionRegistry); } public static FriendMessageListRequest parseFrom(InputStream input) throws IOException { return (FriendMessageListRequest)PARSER.parseFrom(input); } public static FriendMessageListRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendMessageListRequest)PARSER.parseFrom(input, extensionRegistry); } public static FriendMessageListRequest parseDelimitedFrom(InputStream input) throws IOException { return (FriendMessageListRequest)PARSER.parseDelimitedFrom(input); } public static FriendMessageListRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendMessageListRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendMessageListRequest parseFrom(CodedInputStream input) throws IOException { return (FriendMessageListRequest)PARSER.parseFrom(input); } public static FriendMessageListRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendMessageListRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendMessageListRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendMessageListRequestOrBuilder {
/* 14505 */       public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendMessageListRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendMessageListRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendMessageListRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendMessageListRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendMessageListRequest_descriptor; } public FriendHandler.FriendMessageListRequest getDefaultInstanceForType() { return FriendHandler.FriendMessageListRequest.getDefaultInstance(); } public FriendHandler.FriendMessageListRequest build() { FriendHandler.FriendMessageListRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendMessageListRequest buildPartial() { FriendHandler.FriendMessageListRequest result = new FriendHandler.FriendMessageListRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendMessageListRequest) return mergeFrom((FriendHandler.FriendMessageListRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendMessageListRequest other) { if (other == FriendHandler.FriendMessageListRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendMessageListRequest parsedMessage = null; try { parsedMessage = (FriendHandler.FriendMessageListRequest)FriendHandler.FriendMessageListRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendMessageListRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class DeleteAllFriendMessageRequest
/*       */     extends GeneratedMessage
/*       */     implements DeleteAllFriendMessageRequestOrBuilder
/*       */   {
/* 14817 */     private static final DeleteAllFriendMessageRequest defaultInstance = new DeleteAllFriendMessageRequest(true); private final UnknownFieldSet unknownFields; private DeleteAllFriendMessageRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private DeleteAllFriendMessageRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static DeleteAllFriendMessageRequest getDefaultInstance() { return defaultInstance; } public DeleteAllFriendMessageRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private DeleteAllFriendMessageRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_DeleteAllFriendMessageRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_DeleteAllFriendMessageRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(DeleteAllFriendMessageRequest.class, Builder.class); } public static Parser<DeleteAllFriendMessageRequest> PARSER = (Parser<DeleteAllFriendMessageRequest>)new AbstractParser<DeleteAllFriendMessageRequest>() { public FriendHandler.DeleteAllFriendMessageRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.DeleteAllFriendMessageRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<DeleteAllFriendMessageRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static DeleteAllFriendMessageRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (DeleteAllFriendMessageRequest)PARSER.parseFrom(data); } public static DeleteAllFriendMessageRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DeleteAllFriendMessageRequest)PARSER.parseFrom(data, extensionRegistry); } public static DeleteAllFriendMessageRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (DeleteAllFriendMessageRequest)PARSER.parseFrom(data); } public static DeleteAllFriendMessageRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DeleteAllFriendMessageRequest)PARSER.parseFrom(data, extensionRegistry); } public static DeleteAllFriendMessageRequest parseFrom(InputStream input) throws IOException { return (DeleteAllFriendMessageRequest)PARSER.parseFrom(input); } public static DeleteAllFriendMessageRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DeleteAllFriendMessageRequest)PARSER.parseFrom(input, extensionRegistry); } public static DeleteAllFriendMessageRequest parseDelimitedFrom(InputStream input) throws IOException { return (DeleteAllFriendMessageRequest)PARSER.parseDelimitedFrom(input); } public static DeleteAllFriendMessageRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DeleteAllFriendMessageRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static DeleteAllFriendMessageRequest parseFrom(CodedInputStream input) throws IOException { return (DeleteAllFriendMessageRequest)PARSER.parseFrom(input); } public static DeleteAllFriendMessageRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DeleteAllFriendMessageRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(DeleteAllFriendMessageRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.DeleteAllFriendMessageRequestOrBuilder {
/* 14818 */       public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_DeleteAllFriendMessageRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_DeleteAllFriendMessageRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.DeleteAllFriendMessageRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.DeleteAllFriendMessageRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_DeleteAllFriendMessageRequest_descriptor; } public FriendHandler.DeleteAllFriendMessageRequest getDefaultInstanceForType() { return FriendHandler.DeleteAllFriendMessageRequest.getDefaultInstance(); } public FriendHandler.DeleteAllFriendMessageRequest build() { FriendHandler.DeleteAllFriendMessageRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.DeleteAllFriendMessageRequest buildPartial() { FriendHandler.DeleteAllFriendMessageRequest result = new FriendHandler.DeleteAllFriendMessageRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.DeleteAllFriendMessageRequest) return mergeFrom((FriendHandler.DeleteAllFriendMessageRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.DeleteAllFriendMessageRequest other) { if (other == FriendHandler.DeleteAllFriendMessageRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.DeleteAllFriendMessageRequest parsedMessage = null; try { parsedMessage = (FriendHandler.DeleteAllFriendMessageRequest)FriendHandler.DeleteAllFriendMessageRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.DeleteAllFriendMessageRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class DeleteBlackListRequest
/*       */     extends GeneratedMessage
/*       */     implements DeleteBlackListRequestOrBuilder
/*       */   {
/* 15301 */     private static final DeleteBlackListRequest defaultInstance = new DeleteBlackListRequest(true); private final UnknownFieldSet unknownFields; private DeleteBlackListRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private DeleteBlackListRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static DeleteBlackListRequest getDefaultInstance() { return defaultInstance; } public DeleteBlackListRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private DeleteBlackListRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2SBlackListId_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_DeleteBlackListRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_DeleteBlackListRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(DeleteBlackListRequest.class, Builder.class); } public static Parser<DeleteBlackListRequest> PARSER = (Parser<DeleteBlackListRequest>)new AbstractParser<DeleteBlackListRequest>() { public FriendHandler.DeleteBlackListRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.DeleteBlackListRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_BLACKLISTID_FIELD_NUMBER = 1; private Object c2SBlackListId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<DeleteBlackListRequest> getParserForType() { return PARSER; } public boolean hasC2SBlackListId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SBlackListId() { Object ref = this.c2SBlackListId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SBlackListId_ = s;  return s; } public ByteString getC2SBlackListIdBytes() { Object ref = this.c2SBlackListId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SBlackListId_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.c2SBlackListId_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SBlackListId()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SBlackListIdBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SBlackListIdBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static DeleteBlackListRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (DeleteBlackListRequest)PARSER.parseFrom(data); } public static DeleteBlackListRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DeleteBlackListRequest)PARSER.parseFrom(data, extensionRegistry); } public static DeleteBlackListRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (DeleteBlackListRequest)PARSER.parseFrom(data); } public static DeleteBlackListRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DeleteBlackListRequest)PARSER.parseFrom(data, extensionRegistry); } public static DeleteBlackListRequest parseFrom(InputStream input) throws IOException { return (DeleteBlackListRequest)PARSER.parseFrom(input); } public static DeleteBlackListRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DeleteBlackListRequest)PARSER.parseFrom(input, extensionRegistry); } public static DeleteBlackListRequest parseDelimitedFrom(InputStream input) throws IOException { return (DeleteBlackListRequest)PARSER.parseDelimitedFrom(input); } public static DeleteBlackListRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DeleteBlackListRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static DeleteBlackListRequest parseFrom(CodedInputStream input) throws IOException { return (DeleteBlackListRequest)PARSER.parseFrom(input); } public static DeleteBlackListRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DeleteBlackListRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(DeleteBlackListRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.DeleteBlackListRequestOrBuilder {
/* 15302 */       private int bitField0_; private Object c2SBlackListId_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_DeleteBlackListRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_DeleteBlackListRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.DeleteBlackListRequest.class, Builder.class); } private Builder() { this.c2SBlackListId_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SBlackListId_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.DeleteBlackListRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SBlackListId_ = ""; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_DeleteBlackListRequest_descriptor; } public FriendHandler.DeleteBlackListRequest getDefaultInstanceForType() { return FriendHandler.DeleteBlackListRequest.getDefaultInstance(); } public FriendHandler.DeleteBlackListRequest build() { FriendHandler.DeleteBlackListRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.DeleteBlackListRequest buildPartial() { FriendHandler.DeleteBlackListRequest result = new FriendHandler.DeleteBlackListRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SBlackListId_ = this.c2SBlackListId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.DeleteBlackListRequest) return mergeFrom((FriendHandler.DeleteBlackListRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.DeleteBlackListRequest other) { if (other == FriendHandler.DeleteBlackListRequest.getDefaultInstance()) return this;  if (other.hasC2SBlackListId()) { this.bitField0_ |= 0x1; this.c2SBlackListId_ = other.c2SBlackListId_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SBlackListId()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.DeleteBlackListRequest parsedMessage = null; try { parsedMessage = (FriendHandler.DeleteBlackListRequest)FriendHandler.DeleteBlackListRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.DeleteBlackListRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SBlackListId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SBlackListId() { Object ref = this.c2SBlackListId_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SBlackListId_ = s;  return s; }  return (String)ref; } public ByteString getC2SBlackListIdBytes() { Object ref = this.c2SBlackListId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SBlackListId_ = b; return b; }  return (ByteString)ref; } public Builder setC2SBlackListId(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SBlackListId_ = value; onChanged(); return this; } public Builder clearC2SBlackListId() { this.bitField0_ &= 0xFFFFFFFE; this.c2SBlackListId_ = FriendHandler.DeleteBlackListRequest.getDefaultInstance().getC2SBlackListId(); onChanged(); return this; } public Builder setC2SBlackListIdBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SBlackListId_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class DeleteAllBlackListRequest
/*       */     extends GeneratedMessage
/*       */     implements DeleteAllBlackListRequestOrBuilder
/*       */   {
/* 15614 */     private static final DeleteAllBlackListRequest defaultInstance = new DeleteAllBlackListRequest(true); private final UnknownFieldSet unknownFields; private DeleteAllBlackListRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private DeleteAllBlackListRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static DeleteAllBlackListRequest getDefaultInstance() { return defaultInstance; } public DeleteAllBlackListRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private DeleteAllBlackListRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_DeleteAllBlackListRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_DeleteAllBlackListRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(DeleteAllBlackListRequest.class, Builder.class); } public static Parser<DeleteAllBlackListRequest> PARSER = (Parser<DeleteAllBlackListRequest>)new AbstractParser<DeleteAllBlackListRequest>() { public FriendHandler.DeleteAllBlackListRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.DeleteAllBlackListRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<DeleteAllBlackListRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static DeleteAllBlackListRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (DeleteAllBlackListRequest)PARSER.parseFrom(data); } public static DeleteAllBlackListRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DeleteAllBlackListRequest)PARSER.parseFrom(data, extensionRegistry); } public static DeleteAllBlackListRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (DeleteAllBlackListRequest)PARSER.parseFrom(data); } public static DeleteAllBlackListRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DeleteAllBlackListRequest)PARSER.parseFrom(data, extensionRegistry); } public static DeleteAllBlackListRequest parseFrom(InputStream input) throws IOException { return (DeleteAllBlackListRequest)PARSER.parseFrom(input); } public static DeleteAllBlackListRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DeleteAllBlackListRequest)PARSER.parseFrom(input, extensionRegistry); } public static DeleteAllBlackListRequest parseDelimitedFrom(InputStream input) throws IOException { return (DeleteAllBlackListRequest)PARSER.parseDelimitedFrom(input); } public static DeleteAllBlackListRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DeleteAllBlackListRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static DeleteAllBlackListRequest parseFrom(CodedInputStream input) throws IOException { return (DeleteAllBlackListRequest)PARSER.parseFrom(input); } public static DeleteAllBlackListRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DeleteAllBlackListRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(DeleteAllBlackListRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.DeleteAllBlackListRequestOrBuilder {
/* 15615 */       public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_DeleteAllBlackListRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_DeleteAllBlackListRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.DeleteAllBlackListRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.DeleteAllBlackListRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_DeleteAllBlackListRequest_descriptor; } public FriendHandler.DeleteAllBlackListRequest getDefaultInstanceForType() { return FriendHandler.DeleteAllBlackListRequest.getDefaultInstance(); } public FriendHandler.DeleteAllBlackListRequest build() { FriendHandler.DeleteAllBlackListRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.DeleteAllBlackListRequest buildPartial() { FriendHandler.DeleteAllBlackListRequest result = new FriendHandler.DeleteAllBlackListRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.DeleteAllBlackListRequest) return mergeFrom((FriendHandler.DeleteAllBlackListRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.DeleteAllBlackListRequest other) { if (other == FriendHandler.DeleteAllBlackListRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.DeleteAllBlackListRequest parsedMessage = null; try { parsedMessage = (FriendHandler.DeleteAllBlackListRequest)FriendHandler.DeleteAllBlackListRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.DeleteAllBlackListRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class AddBlackListRequest
/*       */     extends GeneratedMessage
/*       */     implements AddBlackListRequestOrBuilder
/*       */   {
/* 16098 */     private static final AddBlackListRequest defaultInstance = new AddBlackListRequest(true); private final UnknownFieldSet unknownFields; private AddBlackListRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private AddBlackListRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static AddBlackListRequest getDefaultInstance() { return defaultInstance; } public AddBlackListRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private AddBlackListRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2SBlackListId_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_AddBlackListRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_AddBlackListRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(AddBlackListRequest.class, Builder.class); } public static Parser<AddBlackListRequest> PARSER = (Parser<AddBlackListRequest>)new AbstractParser<AddBlackListRequest>() { public FriendHandler.AddBlackListRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.AddBlackListRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_BLACKLISTID_FIELD_NUMBER = 1; private Object c2SBlackListId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<AddBlackListRequest> getParserForType() { return PARSER; } public boolean hasC2SBlackListId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SBlackListId() { Object ref = this.c2SBlackListId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SBlackListId_ = s;  return s; } public ByteString getC2SBlackListIdBytes() { Object ref = this.c2SBlackListId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SBlackListId_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.c2SBlackListId_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SBlackListId()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SBlackListIdBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SBlackListIdBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static AddBlackListRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (AddBlackListRequest)PARSER.parseFrom(data); } public static AddBlackListRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (AddBlackListRequest)PARSER.parseFrom(data, extensionRegistry); } public static AddBlackListRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (AddBlackListRequest)PARSER.parseFrom(data); } public static AddBlackListRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (AddBlackListRequest)PARSER.parseFrom(data, extensionRegistry); } public static AddBlackListRequest parseFrom(InputStream input) throws IOException { return (AddBlackListRequest)PARSER.parseFrom(input); } public static AddBlackListRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (AddBlackListRequest)PARSER.parseFrom(input, extensionRegistry); } public static AddBlackListRequest parseDelimitedFrom(InputStream input) throws IOException { return (AddBlackListRequest)PARSER.parseDelimitedFrom(input); } public static AddBlackListRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (AddBlackListRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static AddBlackListRequest parseFrom(CodedInputStream input) throws IOException { return (AddBlackListRequest)PARSER.parseFrom(input); } public static AddBlackListRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (AddBlackListRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(AddBlackListRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.AddBlackListRequestOrBuilder {
/* 16099 */       private int bitField0_; private Object c2SBlackListId_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_AddBlackListRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_AddBlackListRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.AddBlackListRequest.class, Builder.class); } private Builder() { this.c2SBlackListId_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SBlackListId_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.AddBlackListRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SBlackListId_ = ""; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_AddBlackListRequest_descriptor; } public FriendHandler.AddBlackListRequest getDefaultInstanceForType() { return FriendHandler.AddBlackListRequest.getDefaultInstance(); } public FriendHandler.AddBlackListRequest build() { FriendHandler.AddBlackListRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.AddBlackListRequest buildPartial() { FriendHandler.AddBlackListRequest result = new FriendHandler.AddBlackListRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SBlackListId_ = this.c2SBlackListId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.AddBlackListRequest) return mergeFrom((FriendHandler.AddBlackListRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.AddBlackListRequest other) { if (other == FriendHandler.AddBlackListRequest.getDefaultInstance()) return this;  if (other.hasC2SBlackListId()) { this.bitField0_ |= 0x1; this.c2SBlackListId_ = other.c2SBlackListId_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SBlackListId()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.AddBlackListRequest parsedMessage = null; try { parsedMessage = (FriendHandler.AddBlackListRequest)FriendHandler.AddBlackListRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.AddBlackListRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SBlackListId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SBlackListId() { Object ref = this.c2SBlackListId_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SBlackListId_ = s;  return s; }  return (String)ref; } public ByteString getC2SBlackListIdBytes() { Object ref = this.c2SBlackListId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SBlackListId_ = b; return b; }  return (ByteString)ref; } public Builder setC2SBlackListId(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SBlackListId_ = value; onChanged(); return this; } public Builder clearC2SBlackListId() { this.bitField0_ &= 0xFFFFFFFE; this.c2SBlackListId_ = FriendHandler.AddBlackListRequest.getDefaultInstance().getC2SBlackListId(); onChanged(); return this; } public Builder setC2SBlackListIdBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SBlackListId_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class GetSocialInfoRequest
/*       */     extends GeneratedMessage
/*       */     implements GetSocialInfoRequestOrBuilder
/*       */   {
/* 16411 */     private static final GetSocialInfoRequest defaultInstance = new GetSocialInfoRequest(true); private final UnknownFieldSet unknownFields; private GetSocialInfoRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private GetSocialInfoRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static GetSocialInfoRequest getDefaultInstance() { return defaultInstance; } public GetSocialInfoRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private GetSocialInfoRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_GetSocialInfoRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_GetSocialInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(GetSocialInfoRequest.class, Builder.class); } public static Parser<GetSocialInfoRequest> PARSER = (Parser<GetSocialInfoRequest>)new AbstractParser<GetSocialInfoRequest>() { public FriendHandler.GetSocialInfoRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.GetSocialInfoRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<GetSocialInfoRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static GetSocialInfoRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (GetSocialInfoRequest)PARSER.parseFrom(data); } public static GetSocialInfoRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetSocialInfoRequest)PARSER.parseFrom(data, extensionRegistry); } public static GetSocialInfoRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (GetSocialInfoRequest)PARSER.parseFrom(data); } public static GetSocialInfoRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetSocialInfoRequest)PARSER.parseFrom(data, extensionRegistry); } public static GetSocialInfoRequest parseFrom(InputStream input) throws IOException { return (GetSocialInfoRequest)PARSER.parseFrom(input); } public static GetSocialInfoRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetSocialInfoRequest)PARSER.parseFrom(input, extensionRegistry); } public static GetSocialInfoRequest parseDelimitedFrom(InputStream input) throws IOException { return (GetSocialInfoRequest)PARSER.parseDelimitedFrom(input); } public static GetSocialInfoRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetSocialInfoRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static GetSocialInfoRequest parseFrom(CodedInputStream input) throws IOException { return (GetSocialInfoRequest)PARSER.parseFrom(input); } public static GetSocialInfoRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetSocialInfoRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(GetSocialInfoRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.GetSocialInfoRequestOrBuilder {
/* 16412 */       public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_GetSocialInfoRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_GetSocialInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.GetSocialInfoRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.GetSocialInfoRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_GetSocialInfoRequest_descriptor; } public FriendHandler.GetSocialInfoRequest getDefaultInstanceForType() { return FriendHandler.GetSocialInfoRequest.getDefaultInstance(); } public FriendHandler.GetSocialInfoRequest build() { FriendHandler.GetSocialInfoRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.GetSocialInfoRequest buildPartial() { FriendHandler.GetSocialInfoRequest result = new FriendHandler.GetSocialInfoRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.GetSocialInfoRequest) return mergeFrom((FriendHandler.GetSocialInfoRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.GetSocialInfoRequest other) { if (other == FriendHandler.GetSocialInfoRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.GetSocialInfoRequest parsedMessage = null; try { parsedMessage = (FriendHandler.GetSocialInfoRequest)FriendHandler.GetSocialInfoRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.GetSocialInfoRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendGetAllFriendsResponse
/*       */     extends GeneratedMessage
/*       */     implements FriendGetAllFriendsResponseOrBuilder
/*       */   {
/* 18911 */     private static final FriendGetAllFriendsResponse defaultInstance = new FriendGetAllFriendsResponse(true); private final UnknownFieldSet unknownFields; private FriendGetAllFriendsResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendGetAllFriendsResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendGetAllFriendsResponse getDefaultInstance() { return defaultInstance; } public FriendGetAllFriendsResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendGetAllFriendsResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: if ((mutable_bitField0_ & 0x4) != 4) { this.friends_ = new ArrayList<>(); mutable_bitField0_ |= 0x4; }  this.friends_.add(input.readMessage(FriendHandler.PlayerInfo.PARSER, extensionRegistry)); break;case 32: this.bitField0_ |= 0x4; this.concernNum_ = input.readInt32(); break;case 40: this.bitField0_ |= 0x8; this.allConcernNum_ = input.readInt32(); break;case 48: this.bitField0_ |= 0x10; this.friendsNumMax_ = input.readInt32(); break;case 58: if ((mutable_bitField0_ & 0x40) != 64) { this.chouRens_ = new ArrayList<>(); mutable_bitField0_ |= 0x40; }  this.chouRens_.add(input.readMessage(FriendHandler.PlayerInfo.PARSER, extensionRegistry)); break;case 64: this.bitField0_ |= 0x20; this.chouRensNumMax_ = input.readInt32(); break;case 74: if ((mutable_bitField0_ & 0x100) != 256) { this.blackList_ = new ArrayList<>(); mutable_bitField0_ |= 0x100; }  this.blackList_.add(input.readMessage(FriendHandler.PlayerInfo.PARSER, extensionRegistry)); break;case 80: this.bitField0_ |= 0x40; this.blackListNumMax_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x4) == 4) this.friends_ = Collections.unmodifiableList(this.friends_);  if ((mutable_bitField0_ & 0x40) == 64) this.chouRens_ = Collections.unmodifiableList(this.chouRens_);  if ((mutable_bitField0_ & 0x100) == 256) this.blackList_ = Collections.unmodifiableList(this.blackList_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendGetAllFriendsResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendGetAllFriendsResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendGetAllFriendsResponse.class, Builder.class); } public static Parser<FriendGetAllFriendsResponse> PARSER = (Parser<FriendGetAllFriendsResponse>)new AbstractParser<FriendGetAllFriendsResponse>() { public FriendHandler.FriendGetAllFriendsResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendGetAllFriendsResponse(input, extensionRegistry); } }
/* 18912 */     ; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int FRIENDS_FIELD_NUMBER = 3; private List<FriendHandler.PlayerInfo> friends_; public static final int CONCERNNUM_FIELD_NUMBER = 4; private int concernNum_; public static final int ALLCONCERNNUM_FIELD_NUMBER = 5; private int allConcernNum_; public static final int FRIENDSNUMMAX_FIELD_NUMBER = 6; private int friendsNumMax_; public static final int CHOURENS_FIELD_NUMBER = 7; private List<FriendHandler.PlayerInfo> chouRens_; public static final int CHOURENSNUMMAX_FIELD_NUMBER = 8; private int chouRensNumMax_; public static final int BLACKLIST_FIELD_NUMBER = 9; private List<FriendHandler.PlayerInfo> blackList_; public static final int BLACKLISTNUMMAX_FIELD_NUMBER = 10; private int blackListNumMax_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendGetAllFriendsResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public List<FriendHandler.PlayerInfo> getFriendsList() { return this.friends_; } public List<? extends FriendHandler.PlayerInfoOrBuilder> getFriendsOrBuilderList() { return (List)this.friends_; } public int getFriendsCount() { return this.friends_.size(); } public FriendHandler.PlayerInfo getFriends(int index) { return this.friends_.get(index); } public FriendHandler.PlayerInfoOrBuilder getFriendsOrBuilder(int index) { return this.friends_.get(index); } public boolean hasConcernNum() { return ((this.bitField0_ & 0x4) == 4); } public int getConcernNum() { return this.concernNum_; } public boolean hasAllConcernNum() { return ((this.bitField0_ & 0x8) == 8); } public int getAllConcernNum() { return this.allConcernNum_; } public boolean hasFriendsNumMax() { return ((this.bitField0_ & 0x10) == 16); } public int getFriendsNumMax() { return this.friendsNumMax_; } public List<FriendHandler.PlayerInfo> getChouRensList() { return this.chouRens_; } public List<? extends FriendHandler.PlayerInfoOrBuilder> getChouRensOrBuilderList() { return (List)this.chouRens_; } public int getChouRensCount() { return this.chouRens_.size(); } public FriendHandler.PlayerInfo getChouRens(int index) { return this.chouRens_.get(index); } public FriendHandler.PlayerInfoOrBuilder getChouRensOrBuilder(int index) { return this.chouRens_.get(index); } public boolean hasChouRensNumMax() { return ((this.bitField0_ & 0x20) == 32); } public int getChouRensNumMax() { return this.chouRensNumMax_; } public List<FriendHandler.PlayerInfo> getBlackListList() { return this.blackList_; } public List<? extends FriendHandler.PlayerInfoOrBuilder> getBlackListOrBuilderList() { return (List)this.blackList_; } public int getBlackListCount() { return this.blackList_.size(); } public FriendHandler.PlayerInfo getBlackList(int index) { return this.blackList_.get(index); } public FriendHandler.PlayerInfoOrBuilder getBlackListOrBuilder(int index) { return this.blackList_.get(index); } public boolean hasBlackListNumMax() { return ((this.bitField0_ & 0x40) == 64); } public int getBlackListNumMax() { return this.blackListNumMax_; } static { defaultInstance.initFields(); }
/*       */     private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.friends_ = Collections.emptyList(); this.concernNum_ = 0; this.allConcernNum_ = 0; this.friendsNumMax_ = 0; this.chouRens_ = Collections.emptyList(); this.chouRensNumMax_ = 0; this.blackList_ = Collections.emptyList(); this.blackListNumMax_ = 0; }
/*       */     public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1)
/*       */         return true;  if (isInitialized == 0)
/*       */         return false;  if (!hasS2CCode()) {
/*       */         this.memoizedIsInitialized = 0; return false;
/*       */       }  int i; for (i = 0; i < getFriendsCount(); i++) {
/*       */         if (!getFriends(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0; return false;
/*       */         } 
/*       */       }  for (i = 0; i < getChouRensCount(); i++) {
/*       */         if (!getChouRens(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0; return false;
/*       */         } 
/*       */       }  for (i = 0; i < getBlackListCount(); i++) {
/*       */         if (!getBlackList(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0; return false;
/*       */         } 
/*       */       }  this.memoizedIsInitialized = 1; return true; }
/*       */     public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1)
/*       */         output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2)
/*       */         output.writeBytes(2, getS2CMsgBytes());  int i; for (i = 0; i < this.friends_.size(); i++)
/*       */         output.writeMessage(3, (MessageLite)this.friends_.get(i));  if ((this.bitField0_ & 0x4) == 4)
/*       */         output.writeInt32(4, this.concernNum_);  if ((this.bitField0_ & 0x8) == 8)
/*       */         output.writeInt32(5, this.allConcernNum_);  if ((this.bitField0_ & 0x10) == 16)
/*       */         output.writeInt32(6, this.friendsNumMax_);  for (i = 0; i < this.chouRens_.size(); i++)
/*       */         output.writeMessage(7, (MessageLite)this.chouRens_.get(i));  if ((this.bitField0_ & 0x20) == 32)
/*       */         output.writeInt32(8, this.chouRensNumMax_);  for (i = 0; i < this.blackList_.size(); i++)
/*       */         output.writeMessage(9, (MessageLite)this.blackList_.get(i));  if ((this.bitField0_ & 0x40) == 64)
/*       */         output.writeInt32(10, this.blackListNumMax_);  getUnknownFields().writeTo(output); }
/*       */     public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1)
/*       */         return size;  size = 0; if ((this.bitField0_ & 0x1) == 1)
/*       */         size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2)
/*       */         size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  int i; for (i = 0; i < this.friends_.size(); i++)
/*       */         size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.friends_.get(i));  if ((this.bitField0_ & 0x4) == 4)
/*       */         size += CodedOutputStream.computeInt32Size(4, this.concernNum_);  if ((this.bitField0_ & 0x8) == 8)
/*       */         size += CodedOutputStream.computeInt32Size(5, this.allConcernNum_);  if ((this.bitField0_ & 0x10) == 16)
/*       */         size += CodedOutputStream.computeInt32Size(6, this.friendsNumMax_);  for (i = 0; i < this.chouRens_.size(); i++)
/*       */         size += CodedOutputStream.computeMessageSize(7, (MessageLite)this.chouRens_.get(i));  if ((this.bitField0_ & 0x20) == 32)
/*       */         size += CodedOutputStream.computeInt32Size(8, this.chouRensNumMax_);  for (i = 0; i < this.blackList_.size(); i++)
/*       */         size += CodedOutputStream.computeMessageSize(9, (MessageLite)this.blackList_.get(i));  if ((this.bitField0_ & 0x40) == 64)
/*       */         size += CodedOutputStream.computeInt32Size(10, this.blackListNumMax_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; }
/*       */     protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); }
/*       */     public static FriendGetAllFriendsResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendGetAllFriendsResponse)PARSER.parseFrom(data); }
/*       */     public static FriendGetAllFriendsResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendGetAllFriendsResponse)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static FriendGetAllFriendsResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendGetAllFriendsResponse)PARSER.parseFrom(data); }
/*       */     public static FriendGetAllFriendsResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendGetAllFriendsResponse)PARSER.parseFrom(data, extensionRegistry); }
/*       */     public static FriendGetAllFriendsResponse parseFrom(InputStream input) throws IOException { return (FriendGetAllFriendsResponse)PARSER.parseFrom(input); }
/*       */     public static FriendGetAllFriendsResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendGetAllFriendsResponse)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static FriendGetAllFriendsResponse parseDelimitedFrom(InputStream input) throws IOException { return (FriendGetAllFriendsResponse)PARSER.parseDelimitedFrom(input); }
/*       */     public static FriendGetAllFriendsResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendGetAllFriendsResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); }
/*       */     public static FriendGetAllFriendsResponse parseFrom(CodedInputStream input) throws IOException { return (FriendGetAllFriendsResponse)PARSER.parseFrom(input); }
/*       */     public static FriendGetAllFriendsResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendGetAllFriendsResponse)PARSER.parseFrom(input, extensionRegistry); }
/*       */     public static Builder newBuilder() { return Builder.create(); }
/*       */     public Builder newBuilderForType() { return newBuilder(); }
/*       */     public static Builder newBuilder(FriendGetAllFriendsResponse prototype) { return newBuilder().mergeFrom(prototype); }
/*       */     public Builder toBuilder() { return newBuilder(this); }
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; }
/*       */     public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendGetAllFriendsResponseOrBuilder {
/*       */       private int bitField0_;
/*       */       private int s2CCode_;
/*       */       private Object s2CMsg_;
/*       */       private List<FriendHandler.PlayerInfo> friends_;
/*       */       private RepeatedFieldBuilder<FriendHandler.PlayerInfo, FriendHandler.PlayerInfo.Builder, FriendHandler.PlayerInfoOrBuilder> friendsBuilder_;
/*       */       private int concernNum_;
/*       */       private int allConcernNum_;
/*       */       private int friendsNumMax_;
/*       */       private List<FriendHandler.PlayerInfo> chouRens_;
/*       */       private RepeatedFieldBuilder<FriendHandler.PlayerInfo, FriendHandler.PlayerInfo.Builder, FriendHandler.PlayerInfoOrBuilder> chouRensBuilder_;
/*       */       private int chouRensNumMax_;
/*       */       private List<FriendHandler.PlayerInfo> blackList_;
/*       */       private RepeatedFieldBuilder<FriendHandler.PlayerInfo, FriendHandler.PlayerInfo.Builder, FriendHandler.PlayerInfoOrBuilder> blackListBuilder_;
/*       */       private int blackListNumMax_;
/*       */       public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendGetAllFriendsResponse_descriptor; }
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendGetAllFriendsResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendGetAllFriendsResponse.class, Builder.class); }
/*       */       private Builder() { this.s2CMsg_ = ""; this.friends_ = Collections.emptyList(); this.chouRens_ = Collections.emptyList(); this.blackList_ = Collections.emptyList(); maybeForceBuilderInitialization(); }
/*       */       private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; this.friends_ = Collections.emptyList(); this.chouRens_ = Collections.emptyList(); this.blackList_ = Collections.emptyList(); maybeForceBuilderInitialization(); }
/*       */       private void maybeForceBuilderInitialization() { if (FriendHandler.FriendGetAllFriendsResponse.alwaysUseFieldBuilders) {
/*       */           getFriendsFieldBuilder(); getChouRensFieldBuilder(); getBlackListFieldBuilder();
/*       */         }  }
/*       */       private static Builder create() { return new Builder(); }
/*       */       public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; if (this.friendsBuilder_ == null) {
/*       */           this.friends_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB;
/*       */         } else {
/*       */           this.friendsBuilder_.clear();
/*       */         }  this.concernNum_ = 0; this.bitField0_ &= 0xFFFFFFF7; this.allConcernNum_ = 0; this.bitField0_ &= 0xFFFFFFEF; this.friendsNumMax_ = 0; this.bitField0_ &= 0xFFFFFFDF; if (this.chouRensBuilder_ == null) {
/*       */           this.chouRens_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFBF;
/*       */         } else {
/*       */           this.chouRensBuilder_.clear();
/*       */         }  this.chouRensNumMax_ = 0; this.bitField0_ &= 0xFFFFFF7F; if (this.blackListBuilder_ == null) {
/*       */           this.blackList_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFEFF;
/*       */         } else {
/*       */           this.blackListBuilder_.clear();
/*       */         }  this.blackListNumMax_ = 0; this.bitField0_ &= 0xFFFFFDFF; return this; }
/*       */       public Builder clone() { return create().mergeFrom(buildPartial()); }
/*       */       public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendGetAllFriendsResponse_descriptor; }
/*       */       public FriendHandler.FriendGetAllFriendsResponse getDefaultInstanceForType() { return FriendHandler.FriendGetAllFriendsResponse.getDefaultInstance(); }
/*       */       public FriendHandler.FriendGetAllFriendsResponse build() { FriendHandler.FriendGetAllFriendsResponse result = buildPartial(); if (!result.isInitialized())
/*       */           throw newUninitializedMessageException(result);  return result; }
/*       */       public FriendHandler.FriendGetAllFriendsResponse buildPartial() { FriendHandler.FriendGetAllFriendsResponse result = new FriendHandler.FriendGetAllFriendsResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1)
/*       */           to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2)
/*       */           to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if (this.friendsBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x4) == 4) {
/*       */             this.friends_ = Collections.unmodifiableList(this.friends_); this.bitField0_ &= 0xFFFFFFFB;
/*       */           }  result.friends_ = this.friends_;
/*       */         } else {
/*       */           result.friends_ = this.friendsBuilder_.build();
/*       */         }  if ((from_bitField0_ & 0x8) == 8)
/*       */           to_bitField0_ |= 0x4;  result.concernNum_ = this.concernNum_; if ((from_bitField0_ & 0x10) == 16)
/*       */           to_bitField0_ |= 0x8;  result.allConcernNum_ = this.allConcernNum_; if ((from_bitField0_ & 0x20) == 32)
/*       */           to_bitField0_ |= 0x10;  result.friendsNumMax_ = this.friendsNumMax_; if (this.chouRensBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x40) == 64) {
/*       */             this.chouRens_ = Collections.unmodifiableList(this.chouRens_); this.bitField0_ &= 0xFFFFFFBF;
/*       */           }  result.chouRens_ = this.chouRens_;
/*       */         } else {
/*       */           result.chouRens_ = this.chouRensBuilder_.build();
/*       */         }  if ((from_bitField0_ & 0x80) == 128)
/*       */           to_bitField0_ |= 0x20;  result.chouRensNumMax_ = this.chouRensNumMax_; if (this.blackListBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x100) == 256) {
/*       */             this.blackList_ = Collections.unmodifiableList(this.blackList_); this.bitField0_ &= 0xFFFFFEFF;
/*       */           }  result.blackList_ = this.blackList_;
/*       */         } else {
/*       */           result.blackList_ = this.blackListBuilder_.build();
/*       */         }  if ((from_bitField0_ & 0x200) == 512)
/*       */           to_bitField0_ |= 0x40;  result.blackListNumMax_ = this.blackListNumMax_; result.bitField0_ = to_bitField0_; onBuilt(); return result; }
/*       */       public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendGetAllFriendsResponse)
/*       */           return mergeFrom((FriendHandler.FriendGetAllFriendsResponse)other);  super.mergeFrom(other); return this; }
/*       */       public Builder mergeFrom(FriendHandler.FriendGetAllFriendsResponse other) { if (other == FriendHandler.FriendGetAllFriendsResponse.getDefaultInstance())
/*       */           return this;  if (other.hasS2CCode())
/*       */           setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) {
/*       */           this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged();
/*       */         }  if (this.friendsBuilder_ == null) {
/*       */           if (!other.friends_.isEmpty()) {
/*       */             if (this.friends_.isEmpty()) {
/*       */               this.friends_ = other.friends_; this.bitField0_ &= 0xFFFFFFFB;
/*       */             } else {
/*       */               ensureFriendsIsMutable(); this.friends_.addAll(other.friends_);
/*       */             }  onChanged();
/*       */           } 
/*       */         } else if (!other.friends_.isEmpty()) {
/*       */           if (this.friendsBuilder_.isEmpty()) {
/*       */             this.friendsBuilder_.dispose(); this.friendsBuilder_ = null; this.friends_ = other.friends_; this.bitField0_ &= 0xFFFFFFFB; this.friendsBuilder_ = FriendHandler.FriendGetAllFriendsResponse.alwaysUseFieldBuilders ? getFriendsFieldBuilder() : null;
/*       */           } else {
/*       */             this.friendsBuilder_.addAllMessages(other.friends_);
/*       */           } 
/*       */         }  if (other.hasConcernNum())
/*       */           setConcernNum(other.getConcernNum());  if (other.hasAllConcernNum())
/*       */           setAllConcernNum(other.getAllConcernNum());  if (other.hasFriendsNumMax())
/*       */           setFriendsNumMax(other.getFriendsNumMax());  if (this.chouRensBuilder_ == null) {
/*       */           if (!other.chouRens_.isEmpty()) {
/*       */             if (this.chouRens_.isEmpty()) {
/*       */               this.chouRens_ = other.chouRens_; this.bitField0_ &= 0xFFFFFFBF;
/*       */             } else {
/*       */               ensureChouRensIsMutable(); this.chouRens_.addAll(other.chouRens_);
/*       */             }  onChanged();
/*       */           } 
/*       */         } else if (!other.chouRens_.isEmpty()) {
/*       */           if (this.chouRensBuilder_.isEmpty()) {
/*       */             this.chouRensBuilder_.dispose(); this.chouRensBuilder_ = null; this.chouRens_ = other.chouRens_; this.bitField0_ &= 0xFFFFFFBF; this.chouRensBuilder_ = FriendHandler.FriendGetAllFriendsResponse.alwaysUseFieldBuilders ? getChouRensFieldBuilder() : null;
/*       */           } else {
/*       */             this.chouRensBuilder_.addAllMessages(other.chouRens_);
/*       */           } 
/*       */         }  if (other.hasChouRensNumMax())
/*       */           setChouRensNumMax(other.getChouRensNumMax());  if (this.blackListBuilder_ == null) {
/*       */           if (!other.blackList_.isEmpty()) {
/*       */             if (this.blackList_.isEmpty()) {
/*       */               this.blackList_ = other.blackList_; this.bitField0_ &= 0xFFFFFEFF;
/*       */             } else {
/*       */               ensureBlackListIsMutable(); this.blackList_.addAll(other.blackList_);
/*       */             }  onChanged();
/*       */           } 
/*       */         } else if (!other.blackList_.isEmpty()) {
/*       */           if (this.blackListBuilder_.isEmpty()) {
/*       */             this.blackListBuilder_.dispose(); this.blackListBuilder_ = null; this.blackList_ = other.blackList_; this.bitField0_ &= 0xFFFFFEFF; this.blackListBuilder_ = FriendHandler.FriendGetAllFriendsResponse.alwaysUseFieldBuilders ? getBlackListFieldBuilder() : null;
/*       */           } else {
/*       */             this.blackListBuilder_.addAllMessages(other.blackList_);
/*       */           } 
/*       */         }  if (other.hasBlackListNumMax())
/*       */           setBlackListNumMax(other.getBlackListNumMax());  mergeUnknownFields(other.getUnknownFields()); return this; }
/*       */       public final boolean isInitialized() { if (!hasS2CCode())
/*       */           return false;  int i; for (i = 0; i < getFriendsCount(); i++) {
/*       */           if (!getFriends(i).isInitialized())
/*       */             return false; 
/*       */         }  for (i = 0; i < getChouRensCount(); i++) {
/*       */           if (!getChouRens(i).isInitialized())
/*       */             return false; 
/*       */         }  for (i = 0; i < getBlackListCount(); i++) {
/*       */           if (!getBlackList(i).isInitialized())
/*       */             return false; 
/*       */         }  return true; }
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendGetAllFriendsResponse parsedMessage = null; try {
/*       */           parsedMessage = (FriendHandler.FriendGetAllFriendsResponse)FriendHandler.FriendGetAllFriendsResponse.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (FriendHandler.FriendGetAllFriendsResponse)e.getUnfinishedMessage(); throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null)
/*       */             mergeFrom(parsedMessage); 
/*       */         }  return this; }
/*       */       public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); }
/*       */       public int getS2CCode() { return this.s2CCode_; }
/*       */       public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; }
/*       */       public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; }
/*       */       public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); }
/*       */       public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8())
/*       */             this.s2CMsg_ = s;  return s;
/*       */         }  return (String)ref; }
/*       */       public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b;
/*       */         }  return (ByteString)ref; }
/*       */       public Builder setS2CMsg(String value) { if (value == null)
/*       */           throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; }
/*       */       public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.FriendGetAllFriendsResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; }
/*       */       public Builder setS2CMsgBytes(ByteString value) { if (value == null)
/*       */           throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; }
/*       */       private void ensureFriendsIsMutable() { if ((this.bitField0_ & 0x4) != 4) {
/*       */           this.friends_ = new ArrayList<>(this.friends_); this.bitField0_ |= 0x4;
/*       */         }  }
/*       */       public List<FriendHandler.PlayerInfo> getFriendsList() { if (this.friendsBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.friends_);  return this.friendsBuilder_.getMessageList(); }
/*       */       public int getFriendsCount() { if (this.friendsBuilder_ == null)
/*       */           return this.friends_.size();  return this.friendsBuilder_.getCount(); }
/*       */       public FriendHandler.PlayerInfo getFriends(int index) { if (this.friendsBuilder_ == null)
/*       */           return this.friends_.get(index);  return (FriendHandler.PlayerInfo)this.friendsBuilder_.getMessage(index); }
/*       */       public Builder setFriends(int index, FriendHandler.PlayerInfo value) { if (this.friendsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException();  ensureFriendsIsMutable(); this.friends_.set(index, value); onChanged();
/*       */         } else {
/*       */           this.friendsBuilder_.setMessage(index, value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder setFriends(int index, FriendHandler.PlayerInfo.Builder builderForValue) { if (this.friendsBuilder_ == null) {
/*       */           ensureFriendsIsMutable();
/*       */           this.friends_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.friendsBuilder_.setMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addFriends(FriendHandler.PlayerInfo value) { if (this.friendsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureFriendsIsMutable();
/*       */           this.friends_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.friendsBuilder_.addMessage(value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder addFriends(int index, FriendHandler.PlayerInfo value) { if (this.friendsBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureFriendsIsMutable();
/*       */           this.friends_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.friendsBuilder_.addMessage(index, value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder addFriends(FriendHandler.PlayerInfo.Builder builderForValue) { if (this.friendsBuilder_ == null) {
/*       */           ensureFriendsIsMutable();
/*       */           this.friends_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.friendsBuilder_.addMessage(builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addFriends(int index, FriendHandler.PlayerInfo.Builder builderForValue) { if (this.friendsBuilder_ == null) {
/*       */           ensureFriendsIsMutable();
/*       */           this.friends_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.friendsBuilder_.addMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addAllFriends(Iterable<? extends FriendHandler.PlayerInfo> values) { if (this.friendsBuilder_ == null) {
/*       */           ensureFriendsIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.friends_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.friendsBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this; }
/*       */       public Builder clearFriends() { if (this.friendsBuilder_ == null) {
/*       */           this.friends_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFFB;
/*       */           onChanged();
/*       */         } else {
/*       */           this.friendsBuilder_.clear();
/*       */         } 
/*       */         return this; }
/*       */       public Builder removeFriends(int index) { if (this.friendsBuilder_ == null) {
/*       */           ensureFriendsIsMutable();
/*       */           this.friends_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.friendsBuilder_.remove(index);
/*       */         } 
/*       */         return this; }
/*       */       public FriendHandler.PlayerInfo.Builder getFriendsBuilder(int index) { return (FriendHandler.PlayerInfo.Builder)getFriendsFieldBuilder().getBuilder(index); }
/*       */       public FriendHandler.PlayerInfoOrBuilder getFriendsOrBuilder(int index) { if (this.friendsBuilder_ == null)
/*       */           return this.friends_.get(index); 
/*       */         return (FriendHandler.PlayerInfoOrBuilder)this.friendsBuilder_.getMessageOrBuilder(index); }
/*       */       public List<? extends FriendHandler.PlayerInfoOrBuilder> getFriendsOrBuilderList() { if (this.friendsBuilder_ != null)
/*       */           return this.friendsBuilder_.getMessageOrBuilderList(); 
/*       */         return Collections.unmodifiableList((List)this.friends_); }
/*       */       public FriendHandler.PlayerInfo.Builder addFriendsBuilder() { return (FriendHandler.PlayerInfo.Builder)getFriendsFieldBuilder().addBuilder(FriendHandler.PlayerInfo.getDefaultInstance()); }
/*       */       public FriendHandler.PlayerInfo.Builder addFriendsBuilder(int index) { return (FriendHandler.PlayerInfo.Builder)getFriendsFieldBuilder().addBuilder(index, FriendHandler.PlayerInfo.getDefaultInstance()); }
/*       */       public List<FriendHandler.PlayerInfo.Builder> getFriendsBuilderList() { return getFriendsFieldBuilder().getBuilderList(); }
/*       */       private RepeatedFieldBuilder<FriendHandler.PlayerInfo, FriendHandler.PlayerInfo.Builder, FriendHandler.PlayerInfoOrBuilder> getFriendsFieldBuilder() { if (this.friendsBuilder_ == null) {
/*       */           this.friendsBuilder_ = new RepeatedFieldBuilder(this.friends_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean());
/*       */           this.friends_ = null;
/*       */         } 
/*       */         return this.friendsBuilder_; }
/*       */       public boolean hasConcernNum() { return ((this.bitField0_ & 0x8) == 8); }
/*       */       public int getConcernNum() { return this.concernNum_; }
/*       */       public Builder setConcernNum(int value) { this.bitField0_ |= 0x8;
/*       */         this.concernNum_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearConcernNum() { this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.concernNum_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasAllConcernNum() { return ((this.bitField0_ & 0x10) == 16); }
/*       */       public int getAllConcernNum() { return this.allConcernNum_; }
/*       */       public Builder setAllConcernNum(int value) { this.bitField0_ |= 0x10;
/*       */         this.allConcernNum_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearAllConcernNum() { this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.allConcernNum_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       public boolean hasFriendsNumMax() { return ((this.bitField0_ & 0x20) == 32); }
/*       */       public int getFriendsNumMax() { return this.friendsNumMax_; }
/*       */       public Builder setFriendsNumMax(int value) { this.bitField0_ |= 0x20;
/*       */         this.friendsNumMax_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearFriendsNumMax() { this.bitField0_ &= 0xFFFFFFDF;
/*       */         this.friendsNumMax_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       private void ensureChouRensIsMutable() { if ((this.bitField0_ & 0x40) != 64) {
/*       */           this.chouRens_ = new ArrayList<>(this.chouRens_);
/*       */           this.bitField0_ |= 0x40;
/*       */         }  }
/*       */       public List<FriendHandler.PlayerInfo> getChouRensList() { if (this.chouRensBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.chouRens_); 
/*       */         return this.chouRensBuilder_.getMessageList(); }
/*       */       public int getChouRensCount() { if (this.chouRensBuilder_ == null)
/*       */           return this.chouRens_.size(); 
/*       */         return this.chouRensBuilder_.getCount(); }
/*       */       public FriendHandler.PlayerInfo getChouRens(int index) { if (this.chouRensBuilder_ == null)
/*       */           return this.chouRens_.get(index); 
/*       */         return (FriendHandler.PlayerInfo)this.chouRensBuilder_.getMessage(index); }
/*       */       public Builder setChouRens(int index, FriendHandler.PlayerInfo value) { if (this.chouRensBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureChouRensIsMutable();
/*       */           this.chouRens_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.chouRensBuilder_.setMessage(index, value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder setChouRens(int index, FriendHandler.PlayerInfo.Builder builderForValue) { if (this.chouRensBuilder_ == null) {
/*       */           ensureChouRensIsMutable();
/*       */           this.chouRens_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.chouRensBuilder_.setMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addChouRens(FriendHandler.PlayerInfo value) { if (this.chouRensBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureChouRensIsMutable();
/*       */           this.chouRens_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.chouRensBuilder_.addMessage(value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder addChouRens(int index, FriendHandler.PlayerInfo value) { if (this.chouRensBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureChouRensIsMutable();
/*       */           this.chouRens_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.chouRensBuilder_.addMessage(index, value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder addChouRens(FriendHandler.PlayerInfo.Builder builderForValue) { if (this.chouRensBuilder_ == null) {
/*       */           ensureChouRensIsMutable();
/*       */           this.chouRens_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.chouRensBuilder_.addMessage(builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addChouRens(int index, FriendHandler.PlayerInfo.Builder builderForValue) { if (this.chouRensBuilder_ == null) {
/*       */           ensureChouRensIsMutable();
/*       */           this.chouRens_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.chouRensBuilder_.addMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addAllChouRens(Iterable<? extends FriendHandler.PlayerInfo> values) { if (this.chouRensBuilder_ == null) {
/*       */           ensureChouRensIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.chouRens_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.chouRensBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this; }
/*       */       public Builder clearChouRens() { if (this.chouRensBuilder_ == null) {
/*       */           this.chouRens_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFBF;
/*       */           onChanged();
/*       */         } else {
/*       */           this.chouRensBuilder_.clear();
/*       */         } 
/*       */         return this; }
/*       */       public Builder removeChouRens(int index) { if (this.chouRensBuilder_ == null) {
/*       */           ensureChouRensIsMutable();
/*       */           this.chouRens_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.chouRensBuilder_.remove(index);
/*       */         } 
/*       */         return this; }
/*       */       public FriendHandler.PlayerInfo.Builder getChouRensBuilder(int index) { return (FriendHandler.PlayerInfo.Builder)getChouRensFieldBuilder().getBuilder(index); }
/*       */       public FriendHandler.PlayerInfoOrBuilder getChouRensOrBuilder(int index) { if (this.chouRensBuilder_ == null)
/*       */           return this.chouRens_.get(index); 
/*       */         return (FriendHandler.PlayerInfoOrBuilder)this.chouRensBuilder_.getMessageOrBuilder(index); }
/*       */       public List<? extends FriendHandler.PlayerInfoOrBuilder> getChouRensOrBuilderList() { if (this.chouRensBuilder_ != null)
/*       */           return this.chouRensBuilder_.getMessageOrBuilderList(); 
/*       */         return Collections.unmodifiableList((List)this.chouRens_); }
/*       */       public FriendHandler.PlayerInfo.Builder addChouRensBuilder() { return (FriendHandler.PlayerInfo.Builder)getChouRensFieldBuilder().addBuilder(FriendHandler.PlayerInfo.getDefaultInstance()); }
/*       */       public FriendHandler.PlayerInfo.Builder addChouRensBuilder(int index) { return (FriendHandler.PlayerInfo.Builder)getChouRensFieldBuilder().addBuilder(index, FriendHandler.PlayerInfo.getDefaultInstance()); }
/*       */       public List<FriendHandler.PlayerInfo.Builder> getChouRensBuilderList() { return getChouRensFieldBuilder().getBuilderList(); }
/*       */       private RepeatedFieldBuilder<FriendHandler.PlayerInfo, FriendHandler.PlayerInfo.Builder, FriendHandler.PlayerInfoOrBuilder> getChouRensFieldBuilder() { if (this.chouRensBuilder_ == null) {
/*       */           this.chouRensBuilder_ = new RepeatedFieldBuilder(this.chouRens_, ((this.bitField0_ & 0x40) == 64), getParentForChildren(), isClean());
/*       */           this.chouRens_ = null;
/*       */         } 
/*       */         return this.chouRensBuilder_; }
/*       */       public boolean hasChouRensNumMax() { return ((this.bitField0_ & 0x80) == 128); }
/*       */       public int getChouRensNumMax() { return this.chouRensNumMax_; }
/*       */       public Builder setChouRensNumMax(int value) { this.bitField0_ |= 0x80;
/*       */         this.chouRensNumMax_ = value;
/*       */         onChanged();
/*       */         return this; }
/*       */       public Builder clearChouRensNumMax() { this.bitField0_ &= 0xFFFFFF7F;
/*       */         this.chouRensNumMax_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */       private void ensureBlackListIsMutable() { if ((this.bitField0_ & 0x100) != 256) {
/*       */           this.blackList_ = new ArrayList<>(this.blackList_);
/*       */           this.bitField0_ |= 0x100;
/*       */         }  }
/*       */       public List<FriendHandler.PlayerInfo> getBlackListList() { if (this.blackListBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.blackList_); 
/*       */         return this.blackListBuilder_.getMessageList(); }
/*       */       public int getBlackListCount() { if (this.blackListBuilder_ == null)
/*       */           return this.blackList_.size(); 
/*       */         return this.blackListBuilder_.getCount(); }
/*       */       public FriendHandler.PlayerInfo getBlackList(int index) { if (this.blackListBuilder_ == null)
/*       */           return this.blackList_.get(index); 
/*       */         return (FriendHandler.PlayerInfo)this.blackListBuilder_.getMessage(index); }
/*       */       public Builder setBlackList(int index, FriendHandler.PlayerInfo value) { if (this.blackListBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureBlackListIsMutable();
/*       */           this.blackList_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.blackListBuilder_.setMessage(index, value);
/*       */         } 
/*       */         return this; }
/*       */       public Builder setBlackList(int index, FriendHandler.PlayerInfo.Builder builderForValue) { if (this.blackListBuilder_ == null) {
/*       */           ensureBlackListIsMutable();
/*       */           this.blackList_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.blackListBuilder_.setMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this; }
/*       */       public Builder addBlackList(FriendHandler.PlayerInfo value) { if (this.blackListBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureBlackListIsMutable();
/*       */           this.blackList_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.blackListBuilder_.addMessage(value);
/*       */         } 
/*       */         return this; } public Builder addBlackList(int index, FriendHandler.PlayerInfo value) { if (this.blackListBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureBlackListIsMutable();
/*       */           this.blackList_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.blackListBuilder_.addMessage(index, value);
/*       */         } 
/*       */         return this; } public Builder addBlackList(FriendHandler.PlayerInfo.Builder builderForValue) { if (this.blackListBuilder_ == null) {
/*       */           ensureBlackListIsMutable();
/*       */           this.blackList_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.blackListBuilder_.addMessage(builderForValue.build());
/*       */         } 
/*       */         return this; } public Builder addBlackList(int index, FriendHandler.PlayerInfo.Builder builderForValue) { if (this.blackListBuilder_ == null) {
/*       */           ensureBlackListIsMutable();
/*       */           this.blackList_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.blackListBuilder_.addMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this; } public Builder addAllBlackList(Iterable<? extends FriendHandler.PlayerInfo> values) { if (this.blackListBuilder_ == null) {
/*       */           ensureBlackListIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.blackList_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.blackListBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this; } public Builder clearBlackList() { if (this.blackListBuilder_ == null) {
/*       */           this.blackList_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFEFF;
/*       */           onChanged();
/*       */         } else {
/*       */           this.blackListBuilder_.clear();
/*       */         } 
/*       */         return this; } public Builder removeBlackList(int index) { if (this.blackListBuilder_ == null) {
/*       */           ensureBlackListIsMutable();
/*       */           this.blackList_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.blackListBuilder_.remove(index);
/*       */         } 
/*       */         return this; } public FriendHandler.PlayerInfo.Builder getBlackListBuilder(int index) { return (FriendHandler.PlayerInfo.Builder)getBlackListFieldBuilder().getBuilder(index); } public FriendHandler.PlayerInfoOrBuilder getBlackListOrBuilder(int index) { if (this.blackListBuilder_ == null)
/*       */           return this.blackList_.get(index); 
/*       */         return (FriendHandler.PlayerInfoOrBuilder)this.blackListBuilder_.getMessageOrBuilder(index); } public List<? extends FriendHandler.PlayerInfoOrBuilder> getBlackListOrBuilderList() { if (this.blackListBuilder_ != null)
/*       */           return this.blackListBuilder_.getMessageOrBuilderList(); 
/*       */         return Collections.unmodifiableList((List)this.blackList_); } public FriendHandler.PlayerInfo.Builder addBlackListBuilder() { return (FriendHandler.PlayerInfo.Builder)getBlackListFieldBuilder().addBuilder(FriendHandler.PlayerInfo.getDefaultInstance()); } public FriendHandler.PlayerInfo.Builder addBlackListBuilder(int index) { return (FriendHandler.PlayerInfo.Builder)getBlackListFieldBuilder().addBuilder(index, FriendHandler.PlayerInfo.getDefaultInstance()); } public List<FriendHandler.PlayerInfo.Builder> getBlackListBuilderList() { return getBlackListFieldBuilder().getBuilderList(); } private RepeatedFieldBuilder<FriendHandler.PlayerInfo, FriendHandler.PlayerInfo.Builder, FriendHandler.PlayerInfoOrBuilder> getBlackListFieldBuilder() { if (this.blackListBuilder_ == null) {
/*       */           this.blackListBuilder_ = new RepeatedFieldBuilder(this.blackList_, ((this.bitField0_ & 0x100) == 256), getParentForChildren(), isClean());
/*       */           this.blackList_ = null;
/*       */         } 
/*       */         return this.blackListBuilder_; } public boolean hasBlackListNumMax() { return ((this.bitField0_ & 0x200) == 512); } public int getBlackListNumMax() { return this.blackListNumMax_; } public Builder setBlackListNumMax(int value) { this.bitField0_ |= 0x200;
/*       */         this.blackListNumMax_ = value;
/*       */         onChanged();
/*       */         return this; } public Builder clearBlackListNumMax() { this.bitField0_ &= 0xFFFFFDFF;
/*       */         this.blackListNumMax_ = 0;
/*       */         onChanged();
/*       */         return this; }
/*       */     }
/*       */   } public static final class FriendApplyResponse extends GeneratedMessage implements FriendApplyResponseOrBuilder {
/* 19473 */     private static final FriendApplyResponse defaultInstance = new FriendApplyResponse(true); private final UnknownFieldSet unknownFields; private FriendApplyResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendApplyResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendApplyResponse getDefaultInstance() { return defaultInstance; } public FriendApplyResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendApplyResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendApplyResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendApplyResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendApplyResponse.class, Builder.class); } public static Parser<FriendApplyResponse> PARSER = (Parser<FriendApplyResponse>)new AbstractParser<FriendApplyResponse>() { public FriendHandler.FriendApplyResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendApplyResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendApplyResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendApplyResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendApplyResponse)PARSER.parseFrom(data); } public static FriendApplyResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendApplyResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendApplyResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendApplyResponse)PARSER.parseFrom(data); } public static FriendApplyResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendApplyResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendApplyResponse parseFrom(InputStream input) throws IOException { return (FriendApplyResponse)PARSER.parseFrom(input); } public static FriendApplyResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendApplyResponse)PARSER.parseFrom(input, extensionRegistry); } public static FriendApplyResponse parseDelimitedFrom(InputStream input) throws IOException { return (FriendApplyResponse)PARSER.parseDelimitedFrom(input); } public static FriendApplyResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendApplyResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendApplyResponse parseFrom(CodedInputStream input) throws IOException { return (FriendApplyResponse)PARSER.parseFrom(input); } public static FriendApplyResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendApplyResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendApplyResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendApplyResponseOrBuilder {
/* 19474 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendApplyResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendApplyResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendApplyResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendApplyResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendApplyResponse_descriptor; } public FriendHandler.FriendApplyResponse getDefaultInstanceForType() { return FriendHandler.FriendApplyResponse.getDefaultInstance(); } public FriendHandler.FriendApplyResponse build() { FriendHandler.FriendApplyResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendApplyResponse buildPartial() { FriendHandler.FriendApplyResponse result = new FriendHandler.FriendApplyResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendApplyResponse) return mergeFrom((FriendHandler.FriendApplyResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendApplyResponse other) { if (other == FriendHandler.FriendApplyResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendApplyResponse parsedMessage = null; try { parsedMessage = (FriendHandler.FriendApplyResponse)FriendHandler.FriendApplyResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendApplyResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.FriendApplyResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendAllApplyResponse
/*       */     extends GeneratedMessage
/*       */     implements FriendAllApplyResponseOrBuilder
/*       */   {
/* 20035 */     private static final FriendAllApplyResponse defaultInstance = new FriendAllApplyResponse(true); private final UnknownFieldSet unknownFields; private FriendAllApplyResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendAllApplyResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendAllApplyResponse getDefaultInstance() { return defaultInstance; } public FriendAllApplyResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendAllApplyResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAllApplyResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAllApplyResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendAllApplyResponse.class, Builder.class); } public static Parser<FriendAllApplyResponse> PARSER = (Parser<FriendAllApplyResponse>)new AbstractParser<FriendAllApplyResponse>() { public FriendHandler.FriendAllApplyResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendAllApplyResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendAllApplyResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendAllApplyResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendAllApplyResponse)PARSER.parseFrom(data); } public static FriendAllApplyResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAllApplyResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendAllApplyResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendAllApplyResponse)PARSER.parseFrom(data); } public static FriendAllApplyResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAllApplyResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendAllApplyResponse parseFrom(InputStream input) throws IOException { return (FriendAllApplyResponse)PARSER.parseFrom(input); } public static FriendAllApplyResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllApplyResponse)PARSER.parseFrom(input, extensionRegistry); } public static FriendAllApplyResponse parseDelimitedFrom(InputStream input) throws IOException { return (FriendAllApplyResponse)PARSER.parseDelimitedFrom(input); } public static FriendAllApplyResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllApplyResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendAllApplyResponse parseFrom(CodedInputStream input) throws IOException { return (FriendAllApplyResponse)PARSER.parseFrom(input); } public static FriendAllApplyResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllApplyResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendAllApplyResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendAllApplyResponseOrBuilder {
/* 20036 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAllApplyResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAllApplyResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendAllApplyResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendAllApplyResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendAllApplyResponse_descriptor; } public FriendHandler.FriendAllApplyResponse getDefaultInstanceForType() { return FriendHandler.FriendAllApplyResponse.getDefaultInstance(); } public FriendHandler.FriendAllApplyResponse build() { FriendHandler.FriendAllApplyResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendAllApplyResponse buildPartial() { FriendHandler.FriendAllApplyResponse result = new FriendHandler.FriendAllApplyResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendAllApplyResponse) return mergeFrom((FriendHandler.FriendAllApplyResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendAllApplyResponse other) { if (other == FriendHandler.FriendAllApplyResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendAllApplyResponse parsedMessage = null; try { parsedMessage = (FriendHandler.FriendAllApplyResponse)FriendHandler.FriendAllApplyResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendAllApplyResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.FriendAllApplyResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendAgreeApplyResponse
/*       */     extends GeneratedMessage
/*       */     implements FriendAgreeApplyResponseOrBuilder
/*       */   {
/* 20597 */     private static final FriendAgreeApplyResponse defaultInstance = new FriendAgreeApplyResponse(true); private final UnknownFieldSet unknownFields; private FriendAgreeApplyResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendAgreeApplyResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendAgreeApplyResponse getDefaultInstance() { return defaultInstance; } public FriendAgreeApplyResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendAgreeApplyResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAgreeApplyResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAgreeApplyResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendAgreeApplyResponse.class, Builder.class); } public static Parser<FriendAgreeApplyResponse> PARSER = (Parser<FriendAgreeApplyResponse>)new AbstractParser<FriendAgreeApplyResponse>() { public FriendHandler.FriendAgreeApplyResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendAgreeApplyResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendAgreeApplyResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendAgreeApplyResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendAgreeApplyResponse)PARSER.parseFrom(data); } public static FriendAgreeApplyResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAgreeApplyResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendAgreeApplyResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendAgreeApplyResponse)PARSER.parseFrom(data); } public static FriendAgreeApplyResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAgreeApplyResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendAgreeApplyResponse parseFrom(InputStream input) throws IOException { return (FriendAgreeApplyResponse)PARSER.parseFrom(input); } public static FriendAgreeApplyResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAgreeApplyResponse)PARSER.parseFrom(input, extensionRegistry); } public static FriendAgreeApplyResponse parseDelimitedFrom(InputStream input) throws IOException { return (FriendAgreeApplyResponse)PARSER.parseDelimitedFrom(input); } public static FriendAgreeApplyResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAgreeApplyResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendAgreeApplyResponse parseFrom(CodedInputStream input) throws IOException { return (FriendAgreeApplyResponse)PARSER.parseFrom(input); } public static FriendAgreeApplyResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAgreeApplyResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendAgreeApplyResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendAgreeApplyResponseOrBuilder {
/* 20598 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAgreeApplyResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAgreeApplyResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendAgreeApplyResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendAgreeApplyResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendAgreeApplyResponse_descriptor; } public FriendHandler.FriendAgreeApplyResponse getDefaultInstanceForType() { return FriendHandler.FriendAgreeApplyResponse.getDefaultInstance(); } public FriendHandler.FriendAgreeApplyResponse build() { FriendHandler.FriendAgreeApplyResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendAgreeApplyResponse buildPartial() { FriendHandler.FriendAgreeApplyResponse result = new FriendHandler.FriendAgreeApplyResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendAgreeApplyResponse) return mergeFrom((FriendHandler.FriendAgreeApplyResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendAgreeApplyResponse other) { if (other == FriendHandler.FriendAgreeApplyResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendAgreeApplyResponse parsedMessage = null; try { parsedMessage = (FriendHandler.FriendAgreeApplyResponse)FriendHandler.FriendAgreeApplyResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendAgreeApplyResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.FriendAgreeApplyResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendAllAgreeApplyResponse
/*       */     extends GeneratedMessage
/*       */     implements FriendAllAgreeApplyResponseOrBuilder
/*       */   {
/* 21159 */     private static final FriendAllAgreeApplyResponse defaultInstance = new FriendAllAgreeApplyResponse(true); private final UnknownFieldSet unknownFields; private FriendAllAgreeApplyResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendAllAgreeApplyResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendAllAgreeApplyResponse getDefaultInstance() { return defaultInstance; } public FriendAllAgreeApplyResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendAllAgreeApplyResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAllAgreeApplyResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAllAgreeApplyResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendAllAgreeApplyResponse.class, Builder.class); } public static Parser<FriendAllAgreeApplyResponse> PARSER = (Parser<FriendAllAgreeApplyResponse>)new AbstractParser<FriendAllAgreeApplyResponse>() { public FriendHandler.FriendAllAgreeApplyResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendAllAgreeApplyResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendAllAgreeApplyResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendAllAgreeApplyResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendAllAgreeApplyResponse)PARSER.parseFrom(data); } public static FriendAllAgreeApplyResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAllAgreeApplyResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendAllAgreeApplyResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendAllAgreeApplyResponse)PARSER.parseFrom(data); } public static FriendAllAgreeApplyResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAllAgreeApplyResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendAllAgreeApplyResponse parseFrom(InputStream input) throws IOException { return (FriendAllAgreeApplyResponse)PARSER.parseFrom(input); } public static FriendAllAgreeApplyResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllAgreeApplyResponse)PARSER.parseFrom(input, extensionRegistry); } public static FriendAllAgreeApplyResponse parseDelimitedFrom(InputStream input) throws IOException { return (FriendAllAgreeApplyResponse)PARSER.parseDelimitedFrom(input); } public static FriendAllAgreeApplyResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllAgreeApplyResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendAllAgreeApplyResponse parseFrom(CodedInputStream input) throws IOException { return (FriendAllAgreeApplyResponse)PARSER.parseFrom(input); } public static FriendAllAgreeApplyResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllAgreeApplyResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendAllAgreeApplyResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendAllAgreeApplyResponseOrBuilder {
/* 21160 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAllAgreeApplyResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAllAgreeApplyResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendAllAgreeApplyResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendAllAgreeApplyResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendAllAgreeApplyResponse_descriptor; } public FriendHandler.FriendAllAgreeApplyResponse getDefaultInstanceForType() { return FriendHandler.FriendAllAgreeApplyResponse.getDefaultInstance(); } public FriendHandler.FriendAllAgreeApplyResponse build() { FriendHandler.FriendAllAgreeApplyResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendAllAgreeApplyResponse buildPartial() { FriendHandler.FriendAllAgreeApplyResponse result = new FriendHandler.FriendAllAgreeApplyResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendAllAgreeApplyResponse) return mergeFrom((FriendHandler.FriendAllAgreeApplyResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendAllAgreeApplyResponse other) { if (other == FriendHandler.FriendAllAgreeApplyResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendAllAgreeApplyResponse parsedMessage = null; try { parsedMessage = (FriendHandler.FriendAllAgreeApplyResponse)FriendHandler.FriendAllAgreeApplyResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendAllAgreeApplyResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.FriendAllAgreeApplyResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendRefuceApplyResponse
/*       */     extends GeneratedMessage
/*       */     implements FriendRefuceApplyResponseOrBuilder
/*       */   {
/* 21721 */     private static final FriendRefuceApplyResponse defaultInstance = new FriendRefuceApplyResponse(true); private final UnknownFieldSet unknownFields; private FriendRefuceApplyResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendRefuceApplyResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendRefuceApplyResponse getDefaultInstance() { return defaultInstance; } public FriendRefuceApplyResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendRefuceApplyResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendRefuceApplyResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendRefuceApplyResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendRefuceApplyResponse.class, Builder.class); } public static Parser<FriendRefuceApplyResponse> PARSER = (Parser<FriendRefuceApplyResponse>)new AbstractParser<FriendRefuceApplyResponse>() { public FriendHandler.FriendRefuceApplyResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendRefuceApplyResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendRefuceApplyResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendRefuceApplyResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendRefuceApplyResponse)PARSER.parseFrom(data); } public static FriendRefuceApplyResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendRefuceApplyResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendRefuceApplyResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendRefuceApplyResponse)PARSER.parseFrom(data); } public static FriendRefuceApplyResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendRefuceApplyResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendRefuceApplyResponse parseFrom(InputStream input) throws IOException { return (FriendRefuceApplyResponse)PARSER.parseFrom(input); } public static FriendRefuceApplyResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendRefuceApplyResponse)PARSER.parseFrom(input, extensionRegistry); } public static FriendRefuceApplyResponse parseDelimitedFrom(InputStream input) throws IOException { return (FriendRefuceApplyResponse)PARSER.parseDelimitedFrom(input); } public static FriendRefuceApplyResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendRefuceApplyResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendRefuceApplyResponse parseFrom(CodedInputStream input) throws IOException { return (FriendRefuceApplyResponse)PARSER.parseFrom(input); } public static FriendRefuceApplyResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendRefuceApplyResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendRefuceApplyResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendRefuceApplyResponseOrBuilder {
/* 21722 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendRefuceApplyResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendRefuceApplyResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendRefuceApplyResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendRefuceApplyResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendRefuceApplyResponse_descriptor; } public FriendHandler.FriendRefuceApplyResponse getDefaultInstanceForType() { return FriendHandler.FriendRefuceApplyResponse.getDefaultInstance(); } public FriendHandler.FriendRefuceApplyResponse build() { FriendHandler.FriendRefuceApplyResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendRefuceApplyResponse buildPartial() { FriendHandler.FriendRefuceApplyResponse result = new FriendHandler.FriendRefuceApplyResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendRefuceApplyResponse) return mergeFrom((FriendHandler.FriendRefuceApplyResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendRefuceApplyResponse other) { if (other == FriendHandler.FriendRefuceApplyResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendRefuceApplyResponse parsedMessage = null; try { parsedMessage = (FriendHandler.FriendRefuceApplyResponse)FriendHandler.FriendRefuceApplyResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendRefuceApplyResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.FriendRefuceApplyResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendAllRefuceApplyResponse
/*       */     extends GeneratedMessage
/*       */     implements FriendAllRefuceApplyResponseOrBuilder
/*       */   {
/* 22283 */     private static final FriendAllRefuceApplyResponse defaultInstance = new FriendAllRefuceApplyResponse(true); private final UnknownFieldSet unknownFields; private FriendAllRefuceApplyResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendAllRefuceApplyResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendAllRefuceApplyResponse getDefaultInstance() { return defaultInstance; } public FriendAllRefuceApplyResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendAllRefuceApplyResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAllRefuceApplyResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAllRefuceApplyResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendAllRefuceApplyResponse.class, Builder.class); } public static Parser<FriendAllRefuceApplyResponse> PARSER = (Parser<FriendAllRefuceApplyResponse>)new AbstractParser<FriendAllRefuceApplyResponse>() { public FriendHandler.FriendAllRefuceApplyResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendAllRefuceApplyResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendAllRefuceApplyResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendAllRefuceApplyResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendAllRefuceApplyResponse)PARSER.parseFrom(data); } public static FriendAllRefuceApplyResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAllRefuceApplyResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendAllRefuceApplyResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendAllRefuceApplyResponse)PARSER.parseFrom(data); } public static FriendAllRefuceApplyResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAllRefuceApplyResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendAllRefuceApplyResponse parseFrom(InputStream input) throws IOException { return (FriendAllRefuceApplyResponse)PARSER.parseFrom(input); } public static FriendAllRefuceApplyResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllRefuceApplyResponse)PARSER.parseFrom(input, extensionRegistry); } public static FriendAllRefuceApplyResponse parseDelimitedFrom(InputStream input) throws IOException { return (FriendAllRefuceApplyResponse)PARSER.parseDelimitedFrom(input); } public static FriendAllRefuceApplyResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllRefuceApplyResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendAllRefuceApplyResponse parseFrom(CodedInputStream input) throws IOException { return (FriendAllRefuceApplyResponse)PARSER.parseFrom(input); } public static FriendAllRefuceApplyResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllRefuceApplyResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendAllRefuceApplyResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendAllRefuceApplyResponseOrBuilder {
/* 22284 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAllRefuceApplyResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAllRefuceApplyResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendAllRefuceApplyResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendAllRefuceApplyResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendAllRefuceApplyResponse_descriptor; } public FriendHandler.FriendAllRefuceApplyResponse getDefaultInstanceForType() { return FriendHandler.FriendAllRefuceApplyResponse.getDefaultInstance(); } public FriendHandler.FriendAllRefuceApplyResponse build() { FriendHandler.FriendAllRefuceApplyResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendAllRefuceApplyResponse buildPartial() { FriendHandler.FriendAllRefuceApplyResponse result = new FriendHandler.FriendAllRefuceApplyResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendAllRefuceApplyResponse) return mergeFrom((FriendHandler.FriendAllRefuceApplyResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendAllRefuceApplyResponse other) { if (other == FriendHandler.FriendAllRefuceApplyResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendAllRefuceApplyResponse parsedMessage = null; try { parsedMessage = (FriendHandler.FriendAllRefuceApplyResponse)FriendHandler.FriendAllRefuceApplyResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendAllRefuceApplyResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.FriendAllRefuceApplyResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendGetFriendAwardResponse
/*       */     extends GeneratedMessage
/*       */     implements FriendGetFriendAwardResponseOrBuilder
/*       */   {
/* 22845 */     private static final FriendGetFriendAwardResponse defaultInstance = new FriendGetFriendAwardResponse(true); private final UnknownFieldSet unknownFields; private FriendGetFriendAwardResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendGetFriendAwardResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendGetFriendAwardResponse getDefaultInstance() { return defaultInstance; } public FriendGetFriendAwardResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendGetFriendAwardResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendGetFriendAwardResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendGetFriendAwardResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendGetFriendAwardResponse.class, Builder.class); } public static Parser<FriendGetFriendAwardResponse> PARSER = (Parser<FriendGetFriendAwardResponse>)new AbstractParser<FriendGetFriendAwardResponse>() { public FriendHandler.FriendGetFriendAwardResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendGetFriendAwardResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendGetFriendAwardResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendGetFriendAwardResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendGetFriendAwardResponse)PARSER.parseFrom(data); } public static FriendGetFriendAwardResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendGetFriendAwardResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendGetFriendAwardResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendGetFriendAwardResponse)PARSER.parseFrom(data); } public static FriendGetFriendAwardResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendGetFriendAwardResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendGetFriendAwardResponse parseFrom(InputStream input) throws IOException { return (FriendGetFriendAwardResponse)PARSER.parseFrom(input); } public static FriendGetFriendAwardResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendGetFriendAwardResponse)PARSER.parseFrom(input, extensionRegistry); } public static FriendGetFriendAwardResponse parseDelimitedFrom(InputStream input) throws IOException { return (FriendGetFriendAwardResponse)PARSER.parseDelimitedFrom(input); } public static FriendGetFriendAwardResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendGetFriendAwardResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendGetFriendAwardResponse parseFrom(CodedInputStream input) throws IOException { return (FriendGetFriendAwardResponse)PARSER.parseFrom(input); } public static FriendGetFriendAwardResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendGetFriendAwardResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendGetFriendAwardResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendGetFriendAwardResponseOrBuilder {
/* 22846 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendGetFriendAwardResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendGetFriendAwardResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendGetFriendAwardResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendGetFriendAwardResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendGetFriendAwardResponse_descriptor; } public FriendHandler.FriendGetFriendAwardResponse getDefaultInstanceForType() { return FriendHandler.FriendGetFriendAwardResponse.getDefaultInstance(); } public FriendHandler.FriendGetFriendAwardResponse build() { FriendHandler.FriendGetFriendAwardResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendGetFriendAwardResponse buildPartial() { FriendHandler.FriendGetFriendAwardResponse result = new FriendHandler.FriendGetFriendAwardResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendGetFriendAwardResponse) return mergeFrom((FriendHandler.FriendGetFriendAwardResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendGetFriendAwardResponse other) { if (other == FriendHandler.FriendGetFriendAwardResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendGetFriendAwardResponse parsedMessage = null; try { parsedMessage = (FriendHandler.FriendGetFriendAwardResponse)FriendHandler.FriendGetFriendAwardResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendGetFriendAwardResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.FriendGetFriendAwardResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendDeleteResponse
/*       */     extends GeneratedMessage
/*       */     implements FriendDeleteResponseOrBuilder
/*       */   {
/* 23407 */     private static final FriendDeleteResponse defaultInstance = new FriendDeleteResponse(true); private final UnknownFieldSet unknownFields; private FriendDeleteResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendDeleteResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendDeleteResponse getDefaultInstance() { return defaultInstance; } public FriendDeleteResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendDeleteResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendDeleteResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendDeleteResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendDeleteResponse.class, Builder.class); } public static Parser<FriendDeleteResponse> PARSER = (Parser<FriendDeleteResponse>)new AbstractParser<FriendDeleteResponse>() { public FriendHandler.FriendDeleteResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendDeleteResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendDeleteResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendDeleteResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendDeleteResponse)PARSER.parseFrom(data); } public static FriendDeleteResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendDeleteResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendDeleteResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendDeleteResponse)PARSER.parseFrom(data); } public static FriendDeleteResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendDeleteResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendDeleteResponse parseFrom(InputStream input) throws IOException { return (FriendDeleteResponse)PARSER.parseFrom(input); } public static FriendDeleteResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendDeleteResponse)PARSER.parseFrom(input, extensionRegistry); } public static FriendDeleteResponse parseDelimitedFrom(InputStream input) throws IOException { return (FriendDeleteResponse)PARSER.parseDelimitedFrom(input); } public static FriendDeleteResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendDeleteResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendDeleteResponse parseFrom(CodedInputStream input) throws IOException { return (FriendDeleteResponse)PARSER.parseFrom(input); } public static FriendDeleteResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendDeleteResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendDeleteResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendDeleteResponseOrBuilder {
/* 23408 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendDeleteResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendDeleteResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendDeleteResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendDeleteResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendDeleteResponse_descriptor; } public FriendHandler.FriendDeleteResponse getDefaultInstanceForType() { return FriendHandler.FriendDeleteResponse.getDefaultInstance(); } public FriendHandler.FriendDeleteResponse build() { FriendHandler.FriendDeleteResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendDeleteResponse buildPartial() { FriendHandler.FriendDeleteResponse result = new FriendHandler.FriendDeleteResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendDeleteResponse) return mergeFrom((FriendHandler.FriendDeleteResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendDeleteResponse other) { if (other == FriendHandler.FriendDeleteResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendDeleteResponse parsedMessage = null; try { parsedMessage = (FriendHandler.FriendDeleteResponse)FriendHandler.FriendDeleteResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendDeleteResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.FriendDeleteResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendAddFriendExpResponse
/*       */     extends GeneratedMessage
/*       */     implements FriendAddFriendExpResponseOrBuilder
/*       */   {
/* 24227 */     private static final FriendAddFriendExpResponse defaultInstance = new FriendAddFriendExpResponse(true); private final UnknownFieldSet unknownFields; private FriendAddFriendExpResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendAddFriendExpResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendAddFriendExpResponse getDefaultInstance() { return defaultInstance; } public FriendAddFriendExpResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendAddFriendExpResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 24: this.bitField0_ |= 0x4; this.friendLv_ = input.readInt32(); break;case 32: this.bitField0_ |= 0x8; this.friendExp_ = input.readInt32(); break;case 40: this.bitField0_ |= 0x10; this.validAwardsNum_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAddFriendExpResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAddFriendExpResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendAddFriendExpResponse.class, Builder.class); } public static Parser<FriendAddFriendExpResponse> PARSER = (Parser<FriendAddFriendExpResponse>)new AbstractParser<FriendAddFriendExpResponse>() { public FriendHandler.FriendAddFriendExpResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendAddFriendExpResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int FRIENDLV_FIELD_NUMBER = 3; private int friendLv_; public static final int FRIENDEXP_FIELD_NUMBER = 4; private int friendExp_; public static final int VALIDAWARDSNUM_FIELD_NUMBER = 5; private int validAwardsNum_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendAddFriendExpResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public boolean hasFriendLv() { return ((this.bitField0_ & 0x4) == 4); } public int getFriendLv() { return this.friendLv_; } public boolean hasFriendExp() { return ((this.bitField0_ & 0x8) == 8); } public int getFriendExp() { return this.friendExp_; } public boolean hasValidAwardsNum() { return ((this.bitField0_ & 0x10) == 16); } public int getValidAwardsNum() { return this.validAwardsNum_; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.friendLv_ = 0; this.friendExp_ = 0; this.validAwardsNum_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  if (!hasFriendLv()) { this.memoizedIsInitialized = 0; return false; }  if (!hasFriendExp()) { this.memoizedIsInitialized = 0; return false; }  if (!hasValidAwardsNum()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4) output.writeInt32(3, this.friendLv_);  if ((this.bitField0_ & 0x8) == 8) output.writeInt32(4, this.friendExp_);  if ((this.bitField0_ & 0x10) == 16) output.writeInt32(5, this.validAwardsNum_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt32Size(3, this.friendLv_);  if ((this.bitField0_ & 0x8) == 8) size += CodedOutputStream.computeInt32Size(4, this.friendExp_);  if ((this.bitField0_ & 0x10) == 16) size += CodedOutputStream.computeInt32Size(5, this.validAwardsNum_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendAddFriendExpResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendAddFriendExpResponse)PARSER.parseFrom(data); } public static FriendAddFriendExpResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAddFriendExpResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendAddFriendExpResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendAddFriendExpResponse)PARSER.parseFrom(data); } public static FriendAddFriendExpResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAddFriendExpResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendAddFriendExpResponse parseFrom(InputStream input) throws IOException { return (FriendAddFriendExpResponse)PARSER.parseFrom(input); } public static FriendAddFriendExpResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAddFriendExpResponse)PARSER.parseFrom(input, extensionRegistry); } public static FriendAddFriendExpResponse parseDelimitedFrom(InputStream input) throws IOException { return (FriendAddFriendExpResponse)PARSER.parseDelimitedFrom(input); } public static FriendAddFriendExpResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAddFriendExpResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendAddFriendExpResponse parseFrom(CodedInputStream input) throws IOException { return (FriendAddFriendExpResponse)PARSER.parseFrom(input); } public static FriendAddFriendExpResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAddFriendExpResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendAddFriendExpResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendAddFriendExpResponseOrBuilder {
/* 24228 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; private int friendLv_; private int friendExp_; private int validAwardsNum_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAddFriendExpResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAddFriendExpResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendAddFriendExpResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendAddFriendExpResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; this.friendLv_ = 0; this.bitField0_ &= 0xFFFFFFFB; this.friendExp_ = 0; this.bitField0_ &= 0xFFFFFFF7; this.validAwardsNum_ = 0; this.bitField0_ &= 0xFFFFFFEF; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendAddFriendExpResponse_descriptor; } public FriendHandler.FriendAddFriendExpResponse getDefaultInstanceForType() { return FriendHandler.FriendAddFriendExpResponse.getDefaultInstance(); } public FriendHandler.FriendAddFriendExpResponse build() { FriendHandler.FriendAddFriendExpResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendAddFriendExpResponse buildPartial() { FriendHandler.FriendAddFriendExpResponse result = new FriendHandler.FriendAddFriendExpResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;  result.friendLv_ = this.friendLv_; if ((from_bitField0_ & 0x8) == 8) to_bitField0_ |= 0x8;  result.friendExp_ = this.friendExp_; if ((from_bitField0_ & 0x10) == 16) to_bitField0_ |= 0x10;  result.validAwardsNum_ = this.validAwardsNum_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendAddFriendExpResponse) return mergeFrom((FriendHandler.FriendAddFriendExpResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendAddFriendExpResponse other) { if (other == FriendHandler.FriendAddFriendExpResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  if (other.hasFriendLv()) setFriendLv(other.getFriendLv());  if (other.hasFriendExp()) setFriendExp(other.getFriendExp());  if (other.hasValidAwardsNum()) setValidAwardsNum(other.getValidAwardsNum());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  if (!hasFriendLv()) return false;  if (!hasFriendExp()) return false;  if (!hasValidAwardsNum()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendAddFriendExpResponse parsedMessage = null; try { parsedMessage = (FriendHandler.FriendAddFriendExpResponse)FriendHandler.FriendAddFriendExpResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendAddFriendExpResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.FriendAddFriendExpResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public boolean hasFriendLv() { return ((this.bitField0_ & 0x4) == 4); } public int getFriendLv() { return this.friendLv_; } public Builder setFriendLv(int value) { this.bitField0_ |= 0x4; this.friendLv_ = value; onChanged(); return this; } public Builder clearFriendLv() { this.bitField0_ &= 0xFFFFFFFB; this.friendLv_ = 0; onChanged(); return this; } public boolean hasFriendExp() { return ((this.bitField0_ & 0x8) == 8); } public int getFriendExp() { return this.friendExp_; } public Builder setFriendExp(int value) { this.bitField0_ |= 0x8; this.friendExp_ = value; onChanged(); return this; } public Builder clearFriendExp() { this.bitField0_ &= 0xFFFFFFF7; this.friendExp_ = 0; onChanged(); return this; } public boolean hasValidAwardsNum() { return ((this.bitField0_ & 0x10) == 16); } public int getValidAwardsNum() { return this.validAwardsNum_; } public Builder setValidAwardsNum(int value) { this.bitField0_ |= 0x10; this.validAwardsNum_ = value; onChanged(); return this; } public Builder clearValidAwardsNum() { this.bitField0_ &= 0xFFFFFFEF; this.validAwardsNum_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendDeleteChouRenResponse
/*       */     extends GeneratedMessage
/*       */     implements FriendDeleteChouRenResponseOrBuilder
/*       */   {
/* 24789 */     private static final FriendDeleteChouRenResponse defaultInstance = new FriendDeleteChouRenResponse(true); private final UnknownFieldSet unknownFields; private FriendDeleteChouRenResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendDeleteChouRenResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendDeleteChouRenResponse getDefaultInstance() { return defaultInstance; } public FriendDeleteChouRenResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendDeleteChouRenResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendDeleteChouRenResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendDeleteChouRenResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendDeleteChouRenResponse.class, Builder.class); } public static Parser<FriendDeleteChouRenResponse> PARSER = (Parser<FriendDeleteChouRenResponse>)new AbstractParser<FriendDeleteChouRenResponse>() { public FriendHandler.FriendDeleteChouRenResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendDeleteChouRenResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendDeleteChouRenResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendDeleteChouRenResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendDeleteChouRenResponse)PARSER.parseFrom(data); } public static FriendDeleteChouRenResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendDeleteChouRenResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendDeleteChouRenResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendDeleteChouRenResponse)PARSER.parseFrom(data); } public static FriendDeleteChouRenResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendDeleteChouRenResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendDeleteChouRenResponse parseFrom(InputStream input) throws IOException { return (FriendDeleteChouRenResponse)PARSER.parseFrom(input); } public static FriendDeleteChouRenResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendDeleteChouRenResponse)PARSER.parseFrom(input, extensionRegistry); } public static FriendDeleteChouRenResponse parseDelimitedFrom(InputStream input) throws IOException { return (FriendDeleteChouRenResponse)PARSER.parseDelimitedFrom(input); } public static FriendDeleteChouRenResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendDeleteChouRenResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendDeleteChouRenResponse parseFrom(CodedInputStream input) throws IOException { return (FriendDeleteChouRenResponse)PARSER.parseFrom(input); } public static FriendDeleteChouRenResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendDeleteChouRenResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendDeleteChouRenResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendDeleteChouRenResponseOrBuilder {
/* 24790 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendDeleteChouRenResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendDeleteChouRenResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendDeleteChouRenResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendDeleteChouRenResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendDeleteChouRenResponse_descriptor; } public FriendHandler.FriendDeleteChouRenResponse getDefaultInstanceForType() { return FriendHandler.FriendDeleteChouRenResponse.getDefaultInstance(); } public FriendHandler.FriendDeleteChouRenResponse build() { FriendHandler.FriendDeleteChouRenResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendDeleteChouRenResponse buildPartial() { FriendHandler.FriendDeleteChouRenResponse result = new FriendHandler.FriendDeleteChouRenResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendDeleteChouRenResponse) return mergeFrom((FriendHandler.FriendDeleteChouRenResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendDeleteChouRenResponse other) { if (other == FriendHandler.FriendDeleteChouRenResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendDeleteChouRenResponse parsedMessage = null; try { parsedMessage = (FriendHandler.FriendDeleteChouRenResponse)FriendHandler.FriendDeleteChouRenResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendDeleteChouRenResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.FriendDeleteChouRenResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendAllDeleteChouRenResponse
/*       */     extends GeneratedMessage
/*       */     implements FriendAllDeleteChouRenResponseOrBuilder
/*       */   {
/* 25351 */     private static final FriendAllDeleteChouRenResponse defaultInstance = new FriendAllDeleteChouRenResponse(true); private final UnknownFieldSet unknownFields; private FriendAllDeleteChouRenResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendAllDeleteChouRenResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendAllDeleteChouRenResponse getDefaultInstance() { return defaultInstance; } public FriendAllDeleteChouRenResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendAllDeleteChouRenResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAllDeleteChouRenResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAllDeleteChouRenResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendAllDeleteChouRenResponse.class, Builder.class); } public static Parser<FriendAllDeleteChouRenResponse> PARSER = (Parser<FriendAllDeleteChouRenResponse>)new AbstractParser<FriendAllDeleteChouRenResponse>() { public FriendHandler.FriendAllDeleteChouRenResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendAllDeleteChouRenResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendAllDeleteChouRenResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendAllDeleteChouRenResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendAllDeleteChouRenResponse)PARSER.parseFrom(data); } public static FriendAllDeleteChouRenResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAllDeleteChouRenResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendAllDeleteChouRenResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendAllDeleteChouRenResponse)PARSER.parseFrom(data); } public static FriendAllDeleteChouRenResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAllDeleteChouRenResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendAllDeleteChouRenResponse parseFrom(InputStream input) throws IOException { return (FriendAllDeleteChouRenResponse)PARSER.parseFrom(input); } public static FriendAllDeleteChouRenResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllDeleteChouRenResponse)PARSER.parseFrom(input, extensionRegistry); } public static FriendAllDeleteChouRenResponse parseDelimitedFrom(InputStream input) throws IOException { return (FriendAllDeleteChouRenResponse)PARSER.parseDelimitedFrom(input); } public static FriendAllDeleteChouRenResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllDeleteChouRenResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendAllDeleteChouRenResponse parseFrom(CodedInputStream input) throws IOException { return (FriendAllDeleteChouRenResponse)PARSER.parseFrom(input); } public static FriendAllDeleteChouRenResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAllDeleteChouRenResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendAllDeleteChouRenResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendAllDeleteChouRenResponseOrBuilder {
/* 25352 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAllDeleteChouRenResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAllDeleteChouRenResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendAllDeleteChouRenResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendAllDeleteChouRenResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendAllDeleteChouRenResponse_descriptor; } public FriendHandler.FriendAllDeleteChouRenResponse getDefaultInstanceForType() { return FriendHandler.FriendAllDeleteChouRenResponse.getDefaultInstance(); } public FriendHandler.FriendAllDeleteChouRenResponse build() { FriendHandler.FriendAllDeleteChouRenResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendAllDeleteChouRenResponse buildPartial() { FriendHandler.FriendAllDeleteChouRenResponse result = new FriendHandler.FriendAllDeleteChouRenResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendAllDeleteChouRenResponse) return mergeFrom((FriendHandler.FriendAllDeleteChouRenResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendAllDeleteChouRenResponse other) { if (other == FriendHandler.FriendAllDeleteChouRenResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendAllDeleteChouRenResponse parsedMessage = null; try { parsedMessage = (FriendHandler.FriendAllDeleteChouRenResponse)FriendHandler.FriendAllDeleteChouRenResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendAllDeleteChouRenResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.FriendAllDeleteChouRenResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendAddChouRenResponse
/*       */     extends GeneratedMessage
/*       */     implements FriendAddChouRenResponseOrBuilder
/*       */   {
/* 25913 */     private static final FriendAddChouRenResponse defaultInstance = new FriendAddChouRenResponse(true); private final UnknownFieldSet unknownFields; private FriendAddChouRenResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendAddChouRenResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendAddChouRenResponse getDefaultInstance() { return defaultInstance; } public FriendAddChouRenResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendAddChouRenResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAddChouRenResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAddChouRenResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendAddChouRenResponse.class, Builder.class); } public static Parser<FriendAddChouRenResponse> PARSER = (Parser<FriendAddChouRenResponse>)new AbstractParser<FriendAddChouRenResponse>() { public FriendHandler.FriendAddChouRenResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendAddChouRenResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendAddChouRenResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static FriendAddChouRenResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (FriendAddChouRenResponse)PARSER.parseFrom(data); } public static FriendAddChouRenResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAddChouRenResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendAddChouRenResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (FriendAddChouRenResponse)PARSER.parseFrom(data); } public static FriendAddChouRenResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (FriendAddChouRenResponse)PARSER.parseFrom(data, extensionRegistry); } public static FriendAddChouRenResponse parseFrom(InputStream input) throws IOException { return (FriendAddChouRenResponse)PARSER.parseFrom(input); } public static FriendAddChouRenResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAddChouRenResponse)PARSER.parseFrom(input, extensionRegistry); } public static FriendAddChouRenResponse parseDelimitedFrom(InputStream input) throws IOException { return (FriendAddChouRenResponse)PARSER.parseDelimitedFrom(input); } public static FriendAddChouRenResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAddChouRenResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static FriendAddChouRenResponse parseFrom(CodedInputStream input) throws IOException { return (FriendAddChouRenResponse)PARSER.parseFrom(input); } public static FriendAddChouRenResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (FriendAddChouRenResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(FriendAddChouRenResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendAddChouRenResponseOrBuilder {
/* 25914 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendAddChouRenResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendAddChouRenResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendAddChouRenResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.FriendAddChouRenResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_FriendAddChouRenResponse_descriptor; } public FriendHandler.FriendAddChouRenResponse getDefaultInstanceForType() { return FriendHandler.FriendAddChouRenResponse.getDefaultInstance(); } public FriendHandler.FriendAddChouRenResponse build() { FriendHandler.FriendAddChouRenResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.FriendAddChouRenResponse buildPartial() { FriendHandler.FriendAddChouRenResponse result = new FriendHandler.FriendAddChouRenResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.FriendAddChouRenResponse) return mergeFrom((FriendHandler.FriendAddChouRenResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.FriendAddChouRenResponse other) { if (other == FriendHandler.FriendAddChouRenResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.FriendAddChouRenResponse parsedMessage = null; try { parsedMessage = (FriendHandler.FriendAddChouRenResponse)FriendHandler.FriendAddChouRenResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.FriendAddChouRenResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.FriendAddChouRenResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class AddFriendInfoResponse
/*       */     extends GeneratedMessage
/*       */     implements AddFriendInfoResponseOrBuilder
/*       */   {
/* 26847 */     private static final AddFriendInfoResponse defaultInstance = new AddFriendInfoResponse(true); private final UnknownFieldSet unknownFields; private AddFriendInfoResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private AddFriendInfoResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static AddFriendInfoResponse getDefaultInstance() { return defaultInstance; } public AddFriendInfoResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private AddFriendInfoResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: if ((mutable_bitField0_ & 0x4) != 4) { this.data_ = new ArrayList<>(); mutable_bitField0_ |= 0x4; }  this.data_.add(input.readMessage(FriendHandler.PlayerInfo.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x4) == 4) this.data_ = Collections.unmodifiableList(this.data_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_AddFriendInfoResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_AddFriendInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(AddFriendInfoResponse.class, Builder.class); } public static Parser<AddFriendInfoResponse> PARSER = (Parser<AddFriendInfoResponse>)new AbstractParser<AddFriendInfoResponse>() { public FriendHandler.AddFriendInfoResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.AddFriendInfoResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int DATA_FIELD_NUMBER = 3; private List<FriendHandler.PlayerInfo> data_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<AddFriendInfoResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public List<FriendHandler.PlayerInfo> getDataList() { return this.data_; } public List<? extends FriendHandler.PlayerInfoOrBuilder> getDataOrBuilderList() { return (List)this.data_; } public int getDataCount() { return this.data_.size(); } public FriendHandler.PlayerInfo getData(int index) { return this.data_.get(index); } public FriendHandler.PlayerInfoOrBuilder getDataOrBuilder(int index) { return this.data_.get(index); } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.data_ = Collections.emptyList(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  for (int i = 0; i < getDataCount(); i++) { if (!getData(i).isInitialized()) { this.memoizedIsInitialized = 0; return false; }  }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  for (int i = 0; i < this.data_.size(); i++) output.writeMessage(3, (MessageLite)this.data_.get(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  for (int i = 0; i < this.data_.size(); i++) size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.data_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static AddFriendInfoResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (AddFriendInfoResponse)PARSER.parseFrom(data); } public static AddFriendInfoResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (AddFriendInfoResponse)PARSER.parseFrom(data, extensionRegistry); } public static AddFriendInfoResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (AddFriendInfoResponse)PARSER.parseFrom(data); } public static AddFriendInfoResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (AddFriendInfoResponse)PARSER.parseFrom(data, extensionRegistry); } public static AddFriendInfoResponse parseFrom(InputStream input) throws IOException { return (AddFriendInfoResponse)PARSER.parseFrom(input); } public static AddFriendInfoResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (AddFriendInfoResponse)PARSER.parseFrom(input, extensionRegistry); } public static AddFriendInfoResponse parseDelimitedFrom(InputStream input) throws IOException { return (AddFriendInfoResponse)PARSER.parseDelimitedFrom(input); } public static AddFriendInfoResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (AddFriendInfoResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static AddFriendInfoResponse parseFrom(CodedInputStream input) throws IOException { return (AddFriendInfoResponse)PARSER.parseFrom(input); } public static AddFriendInfoResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (AddFriendInfoResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(AddFriendInfoResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.AddFriendInfoResponseOrBuilder {
/* 26848 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; private List<FriendHandler.PlayerInfo> data_; private RepeatedFieldBuilder<FriendHandler.PlayerInfo, FriendHandler.PlayerInfo.Builder, FriendHandler.PlayerInfoOrBuilder> dataBuilder_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_AddFriendInfoResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_AddFriendInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.AddFriendInfoResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; this.data_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; this.data_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.AddFriendInfoResponse.alwaysUseFieldBuilders) getDataFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; if (this.dataBuilder_ == null) { this.data_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; } else { this.dataBuilder_.clear(); }  return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_AddFriendInfoResponse_descriptor; } public FriendHandler.AddFriendInfoResponse getDefaultInstanceForType() { return FriendHandler.AddFriendInfoResponse.getDefaultInstance(); } public FriendHandler.AddFriendInfoResponse build() { FriendHandler.AddFriendInfoResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.AddFriendInfoResponse buildPartial() { FriendHandler.AddFriendInfoResponse result = new FriendHandler.AddFriendInfoResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if (this.dataBuilder_ == null) { if ((this.bitField0_ & 0x4) == 4) { this.data_ = Collections.unmodifiableList(this.data_); this.bitField0_ &= 0xFFFFFFFB; }  result.data_ = this.data_; } else { result.data_ = this.dataBuilder_.build(); }  result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.AddFriendInfoResponse) return mergeFrom((FriendHandler.AddFriendInfoResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.AddFriendInfoResponse other) { if (other == FriendHandler.AddFriendInfoResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  if (this.dataBuilder_ == null) { if (!other.data_.isEmpty()) { if (this.data_.isEmpty()) { this.data_ = other.data_; this.bitField0_ &= 0xFFFFFFFB; } else { ensureDataIsMutable(); this.data_.addAll(other.data_); }  onChanged(); }  } else if (!other.data_.isEmpty()) { if (this.dataBuilder_.isEmpty()) { this.dataBuilder_.dispose(); this.dataBuilder_ = null; this.data_ = other.data_; this.bitField0_ &= 0xFFFFFFFB; this.dataBuilder_ = FriendHandler.AddFriendInfoResponse.alwaysUseFieldBuilders ? getDataFieldBuilder() : null; } else { this.dataBuilder_.addAllMessages(other.data_); }  }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  for (int i = 0; i < getDataCount(); i++) { if (!getData(i).isInitialized()) return false;  }  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.AddFriendInfoResponse parsedMessage = null; try { parsedMessage = (FriendHandler.AddFriendInfoResponse)FriendHandler.AddFriendInfoResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.AddFriendInfoResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.AddFriendInfoResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } private void ensureDataIsMutable() { if ((this.bitField0_ & 0x4) != 4) { this.data_ = new ArrayList<>(this.data_); this.bitField0_ |= 0x4; }  } public List<FriendHandler.PlayerInfo> getDataList() { if (this.dataBuilder_ == null) return Collections.unmodifiableList(this.data_);  return this.dataBuilder_.getMessageList(); } public int getDataCount() { if (this.dataBuilder_ == null) return this.data_.size();  return this.dataBuilder_.getCount(); } public FriendHandler.PlayerInfo getData(int index) { if (this.dataBuilder_ == null) return this.data_.get(index);  return (FriendHandler.PlayerInfo)this.dataBuilder_.getMessage(index); } public Builder setData(int index, FriendHandler.PlayerInfo value) { if (this.dataBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureDataIsMutable(); this.data_.set(index, value); onChanged(); } else { this.dataBuilder_.setMessage(index, value); }  return this; } public Builder setData(int index, FriendHandler.PlayerInfo.Builder builderForValue) { if (this.dataBuilder_ == null) { ensureDataIsMutable(); this.data_.set(index, builderForValue.build()); onChanged(); } else { this.dataBuilder_.setMessage(index, builderForValue.build()); }  return this; } public Builder addData(FriendHandler.PlayerInfo value) { if (this.dataBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureDataIsMutable(); this.data_.add(value); onChanged(); } else { this.dataBuilder_.addMessage(value); }  return this; } public Builder addData(int index, FriendHandler.PlayerInfo value) { if (this.dataBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureDataIsMutable(); this.data_.add(index, value); onChanged(); } else { this.dataBuilder_.addMessage(index, value); }  return this; } public Builder addData(FriendHandler.PlayerInfo.Builder builderForValue) { if (this.dataBuilder_ == null) { ensureDataIsMutable(); this.data_.add(builderForValue.build()); onChanged(); } else { this.dataBuilder_.addMessage(builderForValue.build()); }  return this; } public Builder addData(int index, FriendHandler.PlayerInfo.Builder builderForValue) { if (this.dataBuilder_ == null) { ensureDataIsMutable(); this.data_.add(index, builderForValue.build()); onChanged(); } else { this.dataBuilder_.addMessage(index, builderForValue.build()); }  return this; } public Builder addAllData(Iterable<? extends FriendHandler.PlayerInfo> values) { if (this.dataBuilder_ == null) { ensureDataIsMutable(); AbstractMessageLite.Builder.addAll(values, this.data_); onChanged(); } else { this.dataBuilder_.addAllMessages(values); }  return this; } public Builder clearData() { if (this.dataBuilder_ == null) { this.data_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; onChanged(); } else { this.dataBuilder_.clear(); }  return this; } public Builder removeData(int index) { if (this.dataBuilder_ == null) { ensureDataIsMutable(); this.data_.remove(index); onChanged(); } else { this.dataBuilder_.remove(index); }  return this; } public FriendHandler.PlayerInfo.Builder getDataBuilder(int index) { return (FriendHandler.PlayerInfo.Builder)getDataFieldBuilder().getBuilder(index); } public FriendHandler.PlayerInfoOrBuilder getDataOrBuilder(int index) { if (this.dataBuilder_ == null) return this.data_.get(index);  return (FriendHandler.PlayerInfoOrBuilder)this.dataBuilder_.getMessageOrBuilder(index); } public List<? extends FriendHandler.PlayerInfoOrBuilder> getDataOrBuilderList() { if (this.dataBuilder_ != null) return this.dataBuilder_.getMessageOrBuilderList();  return Collections.unmodifiableList((List)this.data_); } public FriendHandler.PlayerInfo.Builder addDataBuilder() { return (FriendHandler.PlayerInfo.Builder)getDataFieldBuilder().addBuilder(FriendHandler.PlayerInfo.getDefaultInstance()); } public FriendHandler.PlayerInfo.Builder addDataBuilder(int index) { return (FriendHandler.PlayerInfo.Builder)getDataFieldBuilder().addBuilder(index, FriendHandler.PlayerInfo.getDefaultInstance()); } public List<FriendHandler.PlayerInfo.Builder> getDataBuilderList() { return getDataFieldBuilder().getBuilderList(); } private RepeatedFieldBuilder<FriendHandler.PlayerInfo, FriendHandler.PlayerInfo.Builder, FriendHandler.PlayerInfoOrBuilder> getDataFieldBuilder() { if (this.dataBuilder_ == null) { this.dataBuilder_ = new RepeatedFieldBuilder(this.data_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean()); this.data_ = null; }  return this.dataBuilder_; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class QueryPlayerNameResponse
/*       */     extends GeneratedMessage
/*       */     implements QueryPlayerNameResponseOrBuilder
/*       */   {
/* 27781 */     private static final QueryPlayerNameResponse defaultInstance = new QueryPlayerNameResponse(true); private final UnknownFieldSet unknownFields; private QueryPlayerNameResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private QueryPlayerNameResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static QueryPlayerNameResponse getDefaultInstance() { return defaultInstance; } public QueryPlayerNameResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private QueryPlayerNameResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: if ((mutable_bitField0_ & 0x4) != 4) { this.data_ = new ArrayList<>(); mutable_bitField0_ |= 0x4; }  this.data_.add(input.readMessage(FriendHandler.PlayerInfo.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x4) == 4) this.data_ = Collections.unmodifiableList(this.data_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_QueryPlayerNameResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_QueryPlayerNameResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryPlayerNameResponse.class, Builder.class); } public static Parser<QueryPlayerNameResponse> PARSER = (Parser<QueryPlayerNameResponse>)new AbstractParser<QueryPlayerNameResponse>() { public FriendHandler.QueryPlayerNameResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.QueryPlayerNameResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int DATA_FIELD_NUMBER = 3; private List<FriendHandler.PlayerInfo> data_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<QueryPlayerNameResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public List<FriendHandler.PlayerInfo> getDataList() { return this.data_; } public List<? extends FriendHandler.PlayerInfoOrBuilder> getDataOrBuilderList() { return (List)this.data_; } public int getDataCount() { return this.data_.size(); } public FriendHandler.PlayerInfo getData(int index) { return this.data_.get(index); } public FriendHandler.PlayerInfoOrBuilder getDataOrBuilder(int index) { return this.data_.get(index); } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.data_ = Collections.emptyList(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  for (int i = 0; i < getDataCount(); i++) { if (!getData(i).isInitialized()) { this.memoizedIsInitialized = 0; return false; }  }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  for (int i = 0; i < this.data_.size(); i++) output.writeMessage(3, (MessageLite)this.data_.get(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  for (int i = 0; i < this.data_.size(); i++) size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.data_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static QueryPlayerNameResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (QueryPlayerNameResponse)PARSER.parseFrom(data); } public static QueryPlayerNameResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (QueryPlayerNameResponse)PARSER.parseFrom(data, extensionRegistry); } public static QueryPlayerNameResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (QueryPlayerNameResponse)PARSER.parseFrom(data); } public static QueryPlayerNameResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (QueryPlayerNameResponse)PARSER.parseFrom(data, extensionRegistry); } public static QueryPlayerNameResponse parseFrom(InputStream input) throws IOException { return (QueryPlayerNameResponse)PARSER.parseFrom(input); } public static QueryPlayerNameResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (QueryPlayerNameResponse)PARSER.parseFrom(input, extensionRegistry); } public static QueryPlayerNameResponse parseDelimitedFrom(InputStream input) throws IOException { return (QueryPlayerNameResponse)PARSER.parseDelimitedFrom(input); } public static QueryPlayerNameResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (QueryPlayerNameResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static QueryPlayerNameResponse parseFrom(CodedInputStream input) throws IOException { return (QueryPlayerNameResponse)PARSER.parseFrom(input); } public static QueryPlayerNameResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (QueryPlayerNameResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(QueryPlayerNameResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.QueryPlayerNameResponseOrBuilder {
/* 27782 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; private List<FriendHandler.PlayerInfo> data_; private RepeatedFieldBuilder<FriendHandler.PlayerInfo, FriendHandler.PlayerInfo.Builder, FriendHandler.PlayerInfoOrBuilder> dataBuilder_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_QueryPlayerNameResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_QueryPlayerNameResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.QueryPlayerNameResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; this.data_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; this.data_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.QueryPlayerNameResponse.alwaysUseFieldBuilders) getDataFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; if (this.dataBuilder_ == null) { this.data_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; } else { this.dataBuilder_.clear(); }  return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_QueryPlayerNameResponse_descriptor; } public FriendHandler.QueryPlayerNameResponse getDefaultInstanceForType() { return FriendHandler.QueryPlayerNameResponse.getDefaultInstance(); } public FriendHandler.QueryPlayerNameResponse build() { FriendHandler.QueryPlayerNameResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.QueryPlayerNameResponse buildPartial() { FriendHandler.QueryPlayerNameResponse result = new FriendHandler.QueryPlayerNameResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if (this.dataBuilder_ == null) { if ((this.bitField0_ & 0x4) == 4) { this.data_ = Collections.unmodifiableList(this.data_); this.bitField0_ &= 0xFFFFFFFB; }  result.data_ = this.data_; } else { result.data_ = this.dataBuilder_.build(); }  result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.QueryPlayerNameResponse) return mergeFrom((FriendHandler.QueryPlayerNameResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.QueryPlayerNameResponse other) { if (other == FriendHandler.QueryPlayerNameResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  if (this.dataBuilder_ == null) { if (!other.data_.isEmpty()) { if (this.data_.isEmpty()) { this.data_ = other.data_; this.bitField0_ &= 0xFFFFFFFB; } else { ensureDataIsMutable(); this.data_.addAll(other.data_); }  onChanged(); }  } else if (!other.data_.isEmpty()) { if (this.dataBuilder_.isEmpty()) { this.dataBuilder_.dispose(); this.dataBuilder_ = null; this.data_ = other.data_; this.bitField0_ &= 0xFFFFFFFB; this.dataBuilder_ = FriendHandler.QueryPlayerNameResponse.alwaysUseFieldBuilders ? getDataFieldBuilder() : null; } else { this.dataBuilder_.addAllMessages(other.data_); }  }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  for (int i = 0; i < getDataCount(); i++) { if (!getData(i).isInitialized()) return false;  }  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.QueryPlayerNameResponse parsedMessage = null; try { parsedMessage = (FriendHandler.QueryPlayerNameResponse)FriendHandler.QueryPlayerNameResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.QueryPlayerNameResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.QueryPlayerNameResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } private void ensureDataIsMutable() { if ((this.bitField0_ & 0x4) != 4) { this.data_ = new ArrayList<>(this.data_); this.bitField0_ |= 0x4; }  } public List<FriendHandler.PlayerInfo> getDataList() { if (this.dataBuilder_ == null) return Collections.unmodifiableList(this.data_);  return this.dataBuilder_.getMessageList(); } public int getDataCount() { if (this.dataBuilder_ == null) return this.data_.size();  return this.dataBuilder_.getCount(); } public FriendHandler.PlayerInfo getData(int index) { if (this.dataBuilder_ == null) return this.data_.get(index);  return (FriendHandler.PlayerInfo)this.dataBuilder_.getMessage(index); } public Builder setData(int index, FriendHandler.PlayerInfo value) { if (this.dataBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureDataIsMutable(); this.data_.set(index, value); onChanged(); } else { this.dataBuilder_.setMessage(index, value); }  return this; } public Builder setData(int index, FriendHandler.PlayerInfo.Builder builderForValue) { if (this.dataBuilder_ == null) { ensureDataIsMutable(); this.data_.set(index, builderForValue.build()); onChanged(); } else { this.dataBuilder_.setMessage(index, builderForValue.build()); }  return this; } public Builder addData(FriendHandler.PlayerInfo value) { if (this.dataBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureDataIsMutable(); this.data_.add(value); onChanged(); } else { this.dataBuilder_.addMessage(value); }  return this; } public Builder addData(int index, FriendHandler.PlayerInfo value) { if (this.dataBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureDataIsMutable(); this.data_.add(index, value); onChanged(); } else { this.dataBuilder_.addMessage(index, value); }  return this; } public Builder addData(FriendHandler.PlayerInfo.Builder builderForValue) { if (this.dataBuilder_ == null) { ensureDataIsMutable(); this.data_.add(builderForValue.build()); onChanged(); } else { this.dataBuilder_.addMessage(builderForValue.build()); }  return this; } public Builder addData(int index, FriendHandler.PlayerInfo.Builder builderForValue) { if (this.dataBuilder_ == null) { ensureDataIsMutable(); this.data_.add(index, builderForValue.build()); onChanged(); } else { this.dataBuilder_.addMessage(index, builderForValue.build()); }  return this; } public Builder addAllData(Iterable<? extends FriendHandler.PlayerInfo> values) { if (this.dataBuilder_ == null) { ensureDataIsMutable(); AbstractMessageLite.Builder.addAll(values, this.data_); onChanged(); } else { this.dataBuilder_.addAllMessages(values); }  return this; } public Builder clearData() { if (this.dataBuilder_ == null) { this.data_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; onChanged(); } else { this.dataBuilder_.clear(); }  return this; } public Builder removeData(int index) { if (this.dataBuilder_ == null) { ensureDataIsMutable(); this.data_.remove(index); onChanged(); } else { this.dataBuilder_.remove(index); }  return this; } public FriendHandler.PlayerInfo.Builder getDataBuilder(int index) { return (FriendHandler.PlayerInfo.Builder)getDataFieldBuilder().getBuilder(index); } public FriendHandler.PlayerInfoOrBuilder getDataOrBuilder(int index) { if (this.dataBuilder_ == null) return this.data_.get(index);  return (FriendHandler.PlayerInfoOrBuilder)this.dataBuilder_.getMessageOrBuilder(index); } public List<? extends FriendHandler.PlayerInfoOrBuilder> getDataOrBuilderList() { if (this.dataBuilder_ != null) return this.dataBuilder_.getMessageOrBuilderList();  return Collections.unmodifiableList((List)this.data_); } public FriendHandler.PlayerInfo.Builder addDataBuilder() { return (FriendHandler.PlayerInfo.Builder)getDataFieldBuilder().addBuilder(FriendHandler.PlayerInfo.getDefaultInstance()); } public FriendHandler.PlayerInfo.Builder addDataBuilder(int index) { return (FriendHandler.PlayerInfo.Builder)getDataFieldBuilder().addBuilder(index, FriendHandler.PlayerInfo.getDefaultInstance()); } public List<FriendHandler.PlayerInfo.Builder> getDataBuilderList() { return getDataFieldBuilder().getBuilderList(); } private RepeatedFieldBuilder<FriendHandler.PlayerInfo, FriendHandler.PlayerInfo.Builder, FriendHandler.PlayerInfoOrBuilder> getDataFieldBuilder() { if (this.dataBuilder_ == null) { this.dataBuilder_ = new RepeatedFieldBuilder(this.data_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean()); this.data_ = null; }  return this.dataBuilder_; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ConcernFriendResponse
/*       */     extends GeneratedMessage
/*       */     implements ConcernFriendResponseOrBuilder
/*       */   {
/* 28343 */     private static final ConcernFriendResponse defaultInstance = new ConcernFriendResponse(true); private final UnknownFieldSet unknownFields; private ConcernFriendResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ConcernFriendResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ConcernFriendResponse getDefaultInstance() { return defaultInstance; } public ConcernFriendResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ConcernFriendResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_ConcernFriendResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_ConcernFriendResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ConcernFriendResponse.class, Builder.class); } public static Parser<ConcernFriendResponse> PARSER = (Parser<ConcernFriendResponse>)new AbstractParser<ConcernFriendResponse>() { public FriendHandler.ConcernFriendResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.ConcernFriendResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ConcernFriendResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ConcernFriendResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ConcernFriendResponse)PARSER.parseFrom(data); } public static ConcernFriendResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ConcernFriendResponse)PARSER.parseFrom(data, extensionRegistry); } public static ConcernFriendResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ConcernFriendResponse)PARSER.parseFrom(data); } public static ConcernFriendResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ConcernFriendResponse)PARSER.parseFrom(data, extensionRegistry); } public static ConcernFriendResponse parseFrom(InputStream input) throws IOException { return (ConcernFriendResponse)PARSER.parseFrom(input); } public static ConcernFriendResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ConcernFriendResponse)PARSER.parseFrom(input, extensionRegistry); } public static ConcernFriendResponse parseDelimitedFrom(InputStream input) throws IOException { return (ConcernFriendResponse)PARSER.parseDelimitedFrom(input); } public static ConcernFriendResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ConcernFriendResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ConcernFriendResponse parseFrom(CodedInputStream input) throws IOException { return (ConcernFriendResponse)PARSER.parseFrom(input); } public static ConcernFriendResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ConcernFriendResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ConcernFriendResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.ConcernFriendResponseOrBuilder {
/* 28344 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_ConcernFriendResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_ConcernFriendResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.ConcernFriendResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.ConcernFriendResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_ConcernFriendResponse_descriptor; } public FriendHandler.ConcernFriendResponse getDefaultInstanceForType() { return FriendHandler.ConcernFriendResponse.getDefaultInstance(); } public FriendHandler.ConcernFriendResponse build() { FriendHandler.ConcernFriendResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.ConcernFriendResponse buildPartial() { FriendHandler.ConcernFriendResponse result = new FriendHandler.ConcernFriendResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.ConcernFriendResponse) return mergeFrom((FriendHandler.ConcernFriendResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.ConcernFriendResponse other) { if (other == FriendHandler.ConcernFriendResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.ConcernFriendResponse parsedMessage = null; try { parsedMessage = (FriendHandler.ConcernFriendResponse)FriendHandler.ConcernFriendResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.ConcernFriendResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.ConcernFriendResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ConcernAllFriendResponse
/*       */     extends GeneratedMessage
/*       */     implements ConcernAllFriendResponseOrBuilder
/*       */   {
/* 28905 */     private static final ConcernAllFriendResponse defaultInstance = new ConcernAllFriendResponse(true); private final UnknownFieldSet unknownFields; private ConcernAllFriendResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ConcernAllFriendResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ConcernAllFriendResponse getDefaultInstance() { return defaultInstance; } public ConcernAllFriendResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ConcernAllFriendResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_ConcernAllFriendResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_ConcernAllFriendResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ConcernAllFriendResponse.class, Builder.class); } public static Parser<ConcernAllFriendResponse> PARSER = (Parser<ConcernAllFriendResponse>)new AbstractParser<ConcernAllFriendResponse>() { public FriendHandler.ConcernAllFriendResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.ConcernAllFriendResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ConcernAllFriendResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ConcernAllFriendResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ConcernAllFriendResponse)PARSER.parseFrom(data); } public static ConcernAllFriendResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ConcernAllFriendResponse)PARSER.parseFrom(data, extensionRegistry); } public static ConcernAllFriendResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ConcernAllFriendResponse)PARSER.parseFrom(data); } public static ConcernAllFriendResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ConcernAllFriendResponse)PARSER.parseFrom(data, extensionRegistry); } public static ConcernAllFriendResponse parseFrom(InputStream input) throws IOException { return (ConcernAllFriendResponse)PARSER.parseFrom(input); } public static ConcernAllFriendResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ConcernAllFriendResponse)PARSER.parseFrom(input, extensionRegistry); } public static ConcernAllFriendResponse parseDelimitedFrom(InputStream input) throws IOException { return (ConcernAllFriendResponse)PARSER.parseDelimitedFrom(input); } public static ConcernAllFriendResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ConcernAllFriendResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ConcernAllFriendResponse parseFrom(CodedInputStream input) throws IOException { return (ConcernAllFriendResponse)PARSER.parseFrom(input); } public static ConcernAllFriendResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ConcernAllFriendResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ConcernAllFriendResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.ConcernAllFriendResponseOrBuilder {
/* 28906 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_ConcernAllFriendResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_ConcernAllFriendResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.ConcernAllFriendResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.ConcernAllFriendResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_ConcernAllFriendResponse_descriptor; } public FriendHandler.ConcernAllFriendResponse getDefaultInstanceForType() { return FriendHandler.ConcernAllFriendResponse.getDefaultInstance(); } public FriendHandler.ConcernAllFriendResponse build() { FriendHandler.ConcernAllFriendResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.ConcernAllFriendResponse buildPartial() { FriendHandler.ConcernAllFriendResponse result = new FriendHandler.ConcernAllFriendResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.ConcernAllFriendResponse) return mergeFrom((FriendHandler.ConcernAllFriendResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.ConcernAllFriendResponse other) { if (other == FriendHandler.ConcernAllFriendResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.ConcernAllFriendResponse parsedMessage = null; try { parsedMessage = (FriendHandler.ConcernAllFriendResponse)FriendHandler.ConcernAllFriendResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.ConcernAllFriendResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.ConcernAllFriendResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendMessageListResponse
/*       */     extends GeneratedMessage
/*       */     implements FriendMessageListResponseOrBuilder
/*       */   {
/* 30090 */     private static final FriendMessageListResponse defaultInstance = new FriendMessageListResponse(true); private final UnknownFieldSet unknownFields; private FriendMessageListResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendMessageListResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendMessageListResponse getDefaultInstance() { return defaultInstance; } public FriendMessageListResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendMessageListResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: if ((mutable_bitField0_ & 0x4) != 4) { this.friendMessageInfos_ = new ArrayList<>(); mutable_bitField0_ |= 0x4; }  this.friendMessageInfos_.add(input.readMessage(FriendHandler.PlayerInfo.PARSER, extensionRegistry)); break;case 32: this.bitField0_ |= 0x4; this.messageNumMax_ = input.readInt32(); break;case 42: bs = input.readBytes(); this.bitField0_ |= 0x8; this.friendlyCode_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x4) == 4) this.friendMessageInfos_ = Collections.unmodifiableList(this.friendMessageInfos_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendMessageListResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendMessageListResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendMessageListResponse.class, Builder.class); } public static Parser<FriendMessageListResponse> PARSER = (Parser<FriendMessageListResponse>)new AbstractParser<FriendMessageListResponse>() { public FriendHandler.FriendMessageListResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendMessageListResponse(input, extensionRegistry); } }
/* 30091 */     ; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int FRIENDMESSAGEINFOS_FIELD_NUMBER = 3; private List<FriendHandler.PlayerInfo> friendMessageInfos_; public static final int MESSAGENUMMAX_FIELD_NUMBER = 4; private int messageNumMax_; public static final int FRIENDLYCODE_FIELD_NUMBER = 5; private Object friendlyCode_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendMessageListResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } static { defaultInstance.initFields(); }
/*       */      public List<FriendHandler.PlayerInfo> getFriendMessageInfosList() {
/*       */       return this.friendMessageInfos_;
/*       */     } public List<? extends FriendHandler.PlayerInfoOrBuilder> getFriendMessageInfosOrBuilderList() {
/*       */       return (List)this.friendMessageInfos_;
/*       */     } public int getFriendMessageInfosCount() {
/*       */       return this.friendMessageInfos_.size();
/*       */     } public FriendHandler.PlayerInfo getFriendMessageInfos(int index) {
/*       */       return this.friendMessageInfos_.get(index);
/*       */     } public FriendHandler.PlayerInfoOrBuilder getFriendMessageInfosOrBuilder(int index) {
/*       */       return this.friendMessageInfos_.get(index);
/*       */     } public boolean hasMessageNumMax() {
/*       */       return ((this.bitField0_ & 0x4) == 4);
/*       */     } public int getMessageNumMax() {
/*       */       return this.messageNumMax_;
/*       */     } public boolean hasFriendlyCode() {
/*       */       return ((this.bitField0_ & 0x8) == 8);
/*       */     } public String getFriendlyCode() {
/*       */       Object ref = this.friendlyCode_;
/*       */       if (ref instanceof String)
/*       */         return (String)ref; 
/*       */       ByteString bs = (ByteString)ref;
/*       */       String s = bs.toStringUtf8();
/*       */       if (bs.isValidUtf8())
/*       */         this.friendlyCode_ = s; 
/*       */       return s;
/*       */     } public ByteString getFriendlyCodeBytes() {
/*       */       Object ref = this.friendlyCode_;
/*       */       if (ref instanceof String) {
/*       */         ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */         this.friendlyCode_ = b;
/*       */         return b;
/*       */       } 
/*       */       return (ByteString)ref;
/*       */     } private void initFields() {
/*       */       this.s2CCode_ = 0;
/*       */       this.s2CMsg_ = "";
/*       */       this.friendMessageInfos_ = Collections.emptyList();
/*       */       this.messageNumMax_ = 0;
/*       */       this.friendlyCode_ = "";
/*       */     } public final boolean isInitialized() {
/*       */       byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1)
/*       */         return true; 
/*       */       if (isInitialized == 0)
/*       */         return false; 
/*       */       if (!hasS2CCode()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasMessageNumMax()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       if (!hasFriendlyCode()) {
/*       */         this.memoizedIsInitialized = 0;
/*       */         return false;
/*       */       } 
/*       */       for (int i = 0; i < getFriendMessageInfosCount(); i++) {
/*       */         if (!getFriendMessageInfos(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0;
/*       */           return false;
/*       */         } 
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true;
/*       */     } public void writeTo(CodedOutputStream output) throws IOException {
/*       */       getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1)
/*       */         output.writeInt32(1, this.s2CCode_); 
/*       */       if ((this.bitField0_ & 0x2) == 2)
/*       */         output.writeBytes(2, getS2CMsgBytes()); 
/*       */       for (int i = 0; i < this.friendMessageInfos_.size(); i++)
/*       */         output.writeMessage(3, (MessageLite)this.friendMessageInfos_.get(i)); 
/*       */       if ((this.bitField0_ & 0x4) == 4)
/*       */         output.writeInt32(4, this.messageNumMax_); 
/*       */       if ((this.bitField0_ & 0x8) == 8)
/*       */         output.writeBytes(5, getFriendlyCodeBytes()); 
/*       */       getUnknownFields().writeTo(output);
/*       */     } public int getSerializedSize() {
/*       */       int size = this.memoizedSerializedSize;
/*       */       if (size != -1)
/*       */         return size; 
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1)
/*       */         size += CodedOutputStream.computeInt32Size(1, this.s2CCode_); 
/*       */       if ((this.bitField0_ & 0x2) == 2)
/*       */         size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes()); 
/*       */       for (int i = 0; i < this.friendMessageInfos_.size(); i++)
/*       */         size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.friendMessageInfos_.get(i)); 
/*       */       if ((this.bitField0_ & 0x4) == 4)
/*       */         size += CodedOutputStream.computeInt32Size(4, this.messageNumMax_); 
/*       */       if ((this.bitField0_ & 0x8) == 8)
/*       */         size += CodedOutputStream.computeBytesSize(5, getFriendlyCodeBytes()); 
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size;
/*       */     } protected Object writeReplace() throws ObjectStreamException {
/*       */       return super.writeReplace();
/*       */     } public static FriendMessageListResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
/*       */       return (FriendMessageListResponse)PARSER.parseFrom(data);
/*       */     } public static FriendMessageListResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (FriendMessageListResponse)PARSER.parseFrom(data, extensionRegistry);
/*       */     } public static FriendMessageListResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
/*       */       return (FriendMessageListResponse)PARSER.parseFrom(data);
/*       */     } public static FriendMessageListResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (FriendMessageListResponse)PARSER.parseFrom(data, extensionRegistry);
/*       */     } public static FriendMessageListResponse parseFrom(InputStream input) throws IOException {
/*       */       return (FriendMessageListResponse)PARSER.parseFrom(input);
/*       */     } public static FriendMessageListResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (FriendMessageListResponse)PARSER.parseFrom(input, extensionRegistry);
/*       */     } public static FriendMessageListResponse parseDelimitedFrom(InputStream input) throws IOException {
/*       */       return (FriendMessageListResponse)PARSER.parseDelimitedFrom(input);
/*       */     } public static FriendMessageListResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (FriendMessageListResponse)PARSER.parseDelimitedFrom(input, extensionRegistry);
/*       */     } public static FriendMessageListResponse parseFrom(CodedInputStream input) throws IOException {
/*       */       return (FriendMessageListResponse)PARSER.parseFrom(input);
/*       */     } public static FriendMessageListResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (FriendMessageListResponse)PARSER.parseFrom(input, extensionRegistry);
/*       */     } public static Builder newBuilder() {
/*       */       return Builder.create();
/*       */     } public Builder newBuilderForType() {
/*       */       return newBuilder();
/*       */     } public static Builder newBuilder(FriendMessageListResponse prototype) {
/*       */       return newBuilder().mergeFrom(prototype);
/*       */     } public Builder toBuilder() {
/*       */       return newBuilder(this);
/*       */     } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
/*       */       Builder builder = new Builder(parent);
/*       */       return builder;
/*       */     } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.FriendMessageListResponseOrBuilder { private int bitField0_; private int s2CCode_; private Object s2CMsg_; private List<FriendHandler.PlayerInfo> friendMessageInfos_; private RepeatedFieldBuilder<FriendHandler.PlayerInfo, FriendHandler.PlayerInfo.Builder, FriendHandler.PlayerInfoOrBuilder> friendMessageInfosBuilder_; private int messageNumMax_; private Object friendlyCode_; public static final Descriptors.Descriptor getDescriptor() {
/*       */         return FriendHandler.internal_static_pomelo_area_FriendMessageListResponse_descriptor;
/*       */       } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */         return FriendHandler.internal_static_pomelo_area_FriendMessageListResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendMessageListResponse.class, Builder.class);
/*       */       } private Builder() {
/*       */         this.s2CMsg_ = "";
/*       */         this.friendMessageInfos_ = Collections.emptyList();
/*       */         this.friendlyCode_ = "";
/*       */         maybeForceBuilderInitialization();
/*       */       } private Builder(GeneratedMessage.BuilderParent parent) {
/*       */         super(parent);
/*       */         this.s2CMsg_ = "";
/*       */         this.friendMessageInfos_ = Collections.emptyList();
/*       */         this.friendlyCode_ = "";
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */       private void maybeForceBuilderInitialization() {
/*       */         if (FriendHandler.FriendMessageListResponse.alwaysUseFieldBuilders)
/*       */           getFriendMessageInfosFieldBuilder(); 
/*       */       }
/*       */       private static Builder create() {
/*       */         return new Builder();
/*       */       }
/*       */       public Builder clear() {
/*       */         super.clear();
/*       */         this.s2CCode_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CMsg_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         if (this.friendMessageInfosBuilder_ == null) {
/*       */           this.friendMessageInfos_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFFB;
/*       */         } else {
/*       */           this.friendMessageInfosBuilder_.clear();
/*       */         } 
/*       */         this.messageNumMax_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.friendlyCode_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFEF;
/*       */         return this;
/*       */       }
/*       */       public Builder clone() {
/*       */         return create().mergeFrom(buildPartial());
/*       */       }
/*       */       public Descriptors.Descriptor getDescriptorForType() {
/*       */         return FriendHandler.internal_static_pomelo_area_FriendMessageListResponse_descriptor;
/*       */       }
/*       */       public FriendHandler.FriendMessageListResponse getDefaultInstanceForType() {
/*       */         return FriendHandler.FriendMessageListResponse.getDefaultInstance();
/*       */       }
/*       */       public FriendHandler.FriendMessageListResponse build() {
/*       */         FriendHandler.FriendMessageListResponse result = buildPartial();
/*       */         if (!result.isInitialized())
/*       */           throw newUninitializedMessageException(result); 
/*       */         return result;
/*       */       }
/*       */       public FriendHandler.FriendMessageListResponse buildPartial() {
/*       */         FriendHandler.FriendMessageListResponse result = new FriendHandler.FriendMessageListResponse(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1)
/*       */           to_bitField0_ |= 0x1; 
/*       */         result.s2CCode_ = this.s2CCode_;
/*       */         if ((from_bitField0_ & 0x2) == 2)
/*       */           to_bitField0_ |= 0x2; 
/*       */         result.s2CMsg_ = this.s2CMsg_;
/*       */         if (this.friendMessageInfosBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x4) == 4) {
/*       */             this.friendMessageInfos_ = Collections.unmodifiableList(this.friendMessageInfos_);
/*       */             this.bitField0_ &= 0xFFFFFFFB;
/*       */           } 
/*       */           result.friendMessageInfos_ = this.friendMessageInfos_;
/*       */         } else {
/*       */           result.friendMessageInfos_ = this.friendMessageInfosBuilder_.build();
/*       */         } 
/*       */         if ((from_bitField0_ & 0x8) == 8)
/*       */           to_bitField0_ |= 0x4; 
/*       */         result.messageNumMax_ = this.messageNumMax_;
/*       */         if ((from_bitField0_ & 0x10) == 16)
/*       */           to_bitField0_ |= 0x8; 
/*       */         result.friendlyCode_ = this.friendlyCode_;
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result;
/*       */       }
/*       */       public Builder mergeFrom(Message other) {
/*       */         if (other instanceof FriendHandler.FriendMessageListResponse)
/*       */           return mergeFrom((FriendHandler.FriendMessageListResponse)other); 
/*       */         super.mergeFrom(other);
/*       */         return this;
/*       */       }
/*       */       public Builder mergeFrom(FriendHandler.FriendMessageListResponse other) {
/*       */         if (other == FriendHandler.FriendMessageListResponse.getDefaultInstance())
/*       */           return this; 
/*       */         if (other.hasS2CCode())
/*       */           setS2CCode(other.getS2CCode()); 
/*       */         if (other.hasS2CMsg()) {
/*       */           this.bitField0_ |= 0x2;
/*       */           this.s2CMsg_ = other.s2CMsg_;
/*       */           onChanged();
/*       */         } 
/*       */         if (this.friendMessageInfosBuilder_ == null) {
/*       */           if (!other.friendMessageInfos_.isEmpty()) {
/*       */             if (this.friendMessageInfos_.isEmpty()) {
/*       */               this.friendMessageInfos_ = other.friendMessageInfos_;
/*       */               this.bitField0_ &= 0xFFFFFFFB;
/*       */             } else {
/*       */               ensureFriendMessageInfosIsMutable();
/*       */               this.friendMessageInfos_.addAll(other.friendMessageInfos_);
/*       */             } 
/*       */             onChanged();
/*       */           } 
/*       */         } else if (!other.friendMessageInfos_.isEmpty()) {
/*       */           if (this.friendMessageInfosBuilder_.isEmpty()) {
/*       */             this.friendMessageInfosBuilder_.dispose();
/*       */             this.friendMessageInfosBuilder_ = null;
/*       */             this.friendMessageInfos_ = other.friendMessageInfos_;
/*       */             this.bitField0_ &= 0xFFFFFFFB;
/*       */             this.friendMessageInfosBuilder_ = FriendHandler.FriendMessageListResponse.alwaysUseFieldBuilders ? getFriendMessageInfosFieldBuilder() : null;
/*       */           } else {
/*       */             this.friendMessageInfosBuilder_.addAllMessages(other.friendMessageInfos_);
/*       */           } 
/*       */         } 
/*       */         if (other.hasMessageNumMax())
/*       */           setMessageNumMax(other.getMessageNumMax()); 
/*       */         if (other.hasFriendlyCode()) {
/*       */           this.bitField0_ |= 0x10;
/*       */           this.friendlyCode_ = other.friendlyCode_;
/*       */           onChanged();
/*       */         } 
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this;
/*       */       }
/*       */       public final boolean isInitialized() {
/*       */         if (!hasS2CCode())
/*       */           return false; 
/*       */         if (!hasMessageNumMax())
/*       */           return false; 
/*       */         if (!hasFriendlyCode())
/*       */           return false; 
/*       */         for (int i = 0; i < getFriendMessageInfosCount(); i++) {
/*       */           if (!getFriendMessageInfos(i).isInitialized())
/*       */             return false; 
/*       */         } 
/*       */         return true;
/*       */       }
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */         FriendHandler.FriendMessageListResponse parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (FriendHandler.FriendMessageListResponse)FriendHandler.FriendMessageListResponse.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (FriendHandler.FriendMessageListResponse)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null)
/*       */             mergeFrom(parsedMessage); 
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public boolean hasS2CCode() {
/*       */         return ((this.bitField0_ & 0x1) == 1);
/*       */       }
/*       */       public int getS2CCode() {
/*       */         return this.s2CCode_;
/*       */       }
/*       */       public Builder setS2CCode(int value) {
/*       */         this.bitField0_ |= 0x1;
/*       */         this.s2CCode_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder clearS2CCode() {
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.s2CCode_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public boolean hasS2CMsg() {
/*       */         return ((this.bitField0_ & 0x2) == 2);
/*       */       }
/*       */       public String getS2CMsg() {
/*       */         Object ref = this.s2CMsg_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.s2CMsg_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */       public ByteString getS2CMsgBytes() {
/*       */         Object ref = this.s2CMsg_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.s2CMsg_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */       public Builder setS2CMsg(String value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder clearS2CMsg() {
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.s2CMsg_ = FriendHandler.FriendMessageListResponse.getDefaultInstance().getS2CMsg();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder setS2CMsgBytes(ByteString value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x2;
/*       */         this.s2CMsg_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       private void ensureFriendMessageInfosIsMutable() {
/*       */         if ((this.bitField0_ & 0x4) != 4) {
/*       */           this.friendMessageInfos_ = new ArrayList<>(this.friendMessageInfos_);
/*       */           this.bitField0_ |= 0x4;
/*       */         } 
/*       */       }
/*       */       public List<FriendHandler.PlayerInfo> getFriendMessageInfosList() {
/*       */         if (this.friendMessageInfosBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.friendMessageInfos_); 
/*       */         return this.friendMessageInfosBuilder_.getMessageList();
/*       */       }
/*       */       public int getFriendMessageInfosCount() {
/*       */         if (this.friendMessageInfosBuilder_ == null)
/*       */           return this.friendMessageInfos_.size(); 
/*       */         return this.friendMessageInfosBuilder_.getCount();
/*       */       }
/*       */       public FriendHandler.PlayerInfo getFriendMessageInfos(int index) {
/*       */         if (this.friendMessageInfosBuilder_ == null)
/*       */           return this.friendMessageInfos_.get(index); 
/*       */         return (FriendHandler.PlayerInfo)this.friendMessageInfosBuilder_.getMessage(index);
/*       */       }
/*       */       public Builder setFriendMessageInfos(int index, FriendHandler.PlayerInfo value) {
/*       */         if (this.friendMessageInfosBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureFriendMessageInfosIsMutable();
/*       */           this.friendMessageInfos_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.friendMessageInfosBuilder_.setMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder setFriendMessageInfos(int index, FriendHandler.PlayerInfo.Builder builderForValue) {
/*       */         if (this.friendMessageInfosBuilder_ == null) {
/*       */           ensureFriendMessageInfosIsMutable();
/*       */           this.friendMessageInfos_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.friendMessageInfosBuilder_.setMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addFriendMessageInfos(FriendHandler.PlayerInfo value) {
/*       */         if (this.friendMessageInfosBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureFriendMessageInfosIsMutable();
/*       */           this.friendMessageInfos_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.friendMessageInfosBuilder_.addMessage(value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addFriendMessageInfos(int index, FriendHandler.PlayerInfo value) {
/*       */         if (this.friendMessageInfosBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureFriendMessageInfosIsMutable();
/*       */           this.friendMessageInfos_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.friendMessageInfosBuilder_.addMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addFriendMessageInfos(FriendHandler.PlayerInfo.Builder builderForValue) {
/*       */         if (this.friendMessageInfosBuilder_ == null) {
/*       */           ensureFriendMessageInfosIsMutable();
/*       */           this.friendMessageInfos_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.friendMessageInfosBuilder_.addMessage(builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addFriendMessageInfos(int index, FriendHandler.PlayerInfo.Builder builderForValue) {
/*       */         if (this.friendMessageInfosBuilder_ == null) {
/*       */           ensureFriendMessageInfosIsMutable();
/*       */           this.friendMessageInfos_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.friendMessageInfosBuilder_.addMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder addAllFriendMessageInfos(Iterable<? extends FriendHandler.PlayerInfo> values) {
/*       */         if (this.friendMessageInfosBuilder_ == null) {
/*       */           ensureFriendMessageInfosIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.friendMessageInfos_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.friendMessageInfosBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder clearFriendMessageInfos() {
/*       */         if (this.friendMessageInfosBuilder_ == null) {
/*       */           this.friendMessageInfos_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFFB;
/*       */           onChanged();
/*       */         } else {
/*       */           this.friendMessageInfosBuilder_.clear();
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public Builder removeFriendMessageInfos(int index) {
/*       */         if (this.friendMessageInfosBuilder_ == null) {
/*       */           ensureFriendMessageInfosIsMutable();
/*       */           this.friendMessageInfos_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.friendMessageInfosBuilder_.remove(index);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       public FriendHandler.PlayerInfo.Builder getFriendMessageInfosBuilder(int index) {
/*       */         return (FriendHandler.PlayerInfo.Builder)getFriendMessageInfosFieldBuilder().getBuilder(index);
/*       */       }
/*       */       public FriendHandler.PlayerInfoOrBuilder getFriendMessageInfosOrBuilder(int index) {
/*       */         if (this.friendMessageInfosBuilder_ == null)
/*       */           return this.friendMessageInfos_.get(index); 
/*       */         return (FriendHandler.PlayerInfoOrBuilder)this.friendMessageInfosBuilder_.getMessageOrBuilder(index);
/*       */       }
/*       */       public List<? extends FriendHandler.PlayerInfoOrBuilder> getFriendMessageInfosOrBuilderList() {
/*       */         if (this.friendMessageInfosBuilder_ != null)
/*       */           return this.friendMessageInfosBuilder_.getMessageOrBuilderList(); 
/*       */         return Collections.unmodifiableList((List)this.friendMessageInfos_);
/*       */       }
/*       */       public FriendHandler.PlayerInfo.Builder addFriendMessageInfosBuilder() {
/*       */         return (FriendHandler.PlayerInfo.Builder)getFriendMessageInfosFieldBuilder().addBuilder(FriendHandler.PlayerInfo.getDefaultInstance());
/*       */       }
/*       */       public FriendHandler.PlayerInfo.Builder addFriendMessageInfosBuilder(int index) {
/*       */         return (FriendHandler.PlayerInfo.Builder)getFriendMessageInfosFieldBuilder().addBuilder(index, FriendHandler.PlayerInfo.getDefaultInstance());
/*       */       }
/*       */       public List<FriendHandler.PlayerInfo.Builder> getFriendMessageInfosBuilderList() {
/*       */         return getFriendMessageInfosFieldBuilder().getBuilderList();
/*       */       }
/*       */       private RepeatedFieldBuilder<FriendHandler.PlayerInfo, FriendHandler.PlayerInfo.Builder, FriendHandler.PlayerInfoOrBuilder> getFriendMessageInfosFieldBuilder() {
/*       */         if (this.friendMessageInfosBuilder_ == null) {
/*       */           this.friendMessageInfosBuilder_ = new RepeatedFieldBuilder(this.friendMessageInfos_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean());
/*       */           this.friendMessageInfos_ = null;
/*       */         } 
/*       */         return this.friendMessageInfosBuilder_;
/*       */       }
/*       */       public boolean hasMessageNumMax() {
/*       */         return ((this.bitField0_ & 0x8) == 8);
/*       */       }
/*       */       public int getMessageNumMax() {
/*       */         return this.messageNumMax_;
/*       */       }
/*       */       public Builder setMessageNumMax(int value) {
/*       */         this.bitField0_ |= 0x8;
/*       */         this.messageNumMax_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder clearMessageNumMax() {
/*       */         this.bitField0_ &= 0xFFFFFFF7;
/*       */         this.messageNumMax_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public boolean hasFriendlyCode() {
/*       */         return ((this.bitField0_ & 0x10) == 16);
/*       */       }
/*       */       public String getFriendlyCode() {
/*       */         Object ref = this.friendlyCode_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.friendlyCode_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */       public ByteString getFriendlyCodeBytes() {
/*       */         Object ref = this.friendlyCode_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.friendlyCode_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */       public Builder setFriendlyCode(String value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x10;
/*       */         this.friendlyCode_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder clearFriendlyCode() {
/*       */         this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.friendlyCode_ = FriendHandler.FriendMessageListResponse.getDefaultInstance().getFriendlyCode();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       public Builder setFriendlyCodeBytes(ByteString value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x10;
/*       */         this.friendlyCode_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       } } }
/* 30652 */   public static final class DeleteAllFriendMessageResponse extends GeneratedMessage implements DeleteAllFriendMessageResponseOrBuilder { private static final DeleteAllFriendMessageResponse defaultInstance = new DeleteAllFriendMessageResponse(true); private final UnknownFieldSet unknownFields; private DeleteAllFriendMessageResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private DeleteAllFriendMessageResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static DeleteAllFriendMessageResponse getDefaultInstance() { return defaultInstance; } public DeleteAllFriendMessageResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private DeleteAllFriendMessageResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_DeleteAllFriendMessageResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_DeleteAllFriendMessageResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(DeleteAllFriendMessageResponse.class, Builder.class); } public static Parser<DeleteAllFriendMessageResponse> PARSER = (Parser<DeleteAllFriendMessageResponse>)new AbstractParser<DeleteAllFriendMessageResponse>() { public FriendHandler.DeleteAllFriendMessageResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.DeleteAllFriendMessageResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<DeleteAllFriendMessageResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static DeleteAllFriendMessageResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (DeleteAllFriendMessageResponse)PARSER.parseFrom(data); } public static DeleteAllFriendMessageResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DeleteAllFriendMessageResponse)PARSER.parseFrom(data, extensionRegistry); } public static DeleteAllFriendMessageResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (DeleteAllFriendMessageResponse)PARSER.parseFrom(data); } public static DeleteAllFriendMessageResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DeleteAllFriendMessageResponse)PARSER.parseFrom(data, extensionRegistry); } public static DeleteAllFriendMessageResponse parseFrom(InputStream input) throws IOException { return (DeleteAllFriendMessageResponse)PARSER.parseFrom(input); } public static DeleteAllFriendMessageResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DeleteAllFriendMessageResponse)PARSER.parseFrom(input, extensionRegistry); } public static DeleteAllFriendMessageResponse parseDelimitedFrom(InputStream input) throws IOException { return (DeleteAllFriendMessageResponse)PARSER.parseDelimitedFrom(input); } public static DeleteAllFriendMessageResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DeleteAllFriendMessageResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static DeleteAllFriendMessageResponse parseFrom(CodedInputStream input) throws IOException { return (DeleteAllFriendMessageResponse)PARSER.parseFrom(input); } public static DeleteAllFriendMessageResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DeleteAllFriendMessageResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(DeleteAllFriendMessageResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.DeleteAllFriendMessageResponseOrBuilder {
/* 30653 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_DeleteAllFriendMessageResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_DeleteAllFriendMessageResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.DeleteAllFriendMessageResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.DeleteAllFriendMessageResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_DeleteAllFriendMessageResponse_descriptor; } public FriendHandler.DeleteAllFriendMessageResponse getDefaultInstanceForType() { return FriendHandler.DeleteAllFriendMessageResponse.getDefaultInstance(); } public FriendHandler.DeleteAllFriendMessageResponse build() { FriendHandler.DeleteAllFriendMessageResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.DeleteAllFriendMessageResponse buildPartial() { FriendHandler.DeleteAllFriendMessageResponse result = new FriendHandler.DeleteAllFriendMessageResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.DeleteAllFriendMessageResponse) return mergeFrom((FriendHandler.DeleteAllFriendMessageResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.DeleteAllFriendMessageResponse other) { if (other == FriendHandler.DeleteAllFriendMessageResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.DeleteAllFriendMessageResponse parsedMessage = null; try { parsedMessage = (FriendHandler.DeleteAllFriendMessageResponse)FriendHandler.DeleteAllFriendMessageResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.DeleteAllFriendMessageResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.DeleteAllFriendMessageResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */      }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class DeleteBlackListResponse
/*       */     extends GeneratedMessage
/*       */     implements DeleteBlackListResponseOrBuilder
/*       */   {
/* 31214 */     private static final DeleteBlackListResponse defaultInstance = new DeleteBlackListResponse(true); private final UnknownFieldSet unknownFields; private DeleteBlackListResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private DeleteBlackListResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static DeleteBlackListResponse getDefaultInstance() { return defaultInstance; } public DeleteBlackListResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private DeleteBlackListResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_DeleteBlackListResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_DeleteBlackListResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(DeleteBlackListResponse.class, Builder.class); } public static Parser<DeleteBlackListResponse> PARSER = (Parser<DeleteBlackListResponse>)new AbstractParser<DeleteBlackListResponse>() { public FriendHandler.DeleteBlackListResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.DeleteBlackListResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<DeleteBlackListResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static DeleteBlackListResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (DeleteBlackListResponse)PARSER.parseFrom(data); } public static DeleteBlackListResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DeleteBlackListResponse)PARSER.parseFrom(data, extensionRegistry); } public static DeleteBlackListResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (DeleteBlackListResponse)PARSER.parseFrom(data); } public static DeleteBlackListResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DeleteBlackListResponse)PARSER.parseFrom(data, extensionRegistry); } public static DeleteBlackListResponse parseFrom(InputStream input) throws IOException { return (DeleteBlackListResponse)PARSER.parseFrom(input); } public static DeleteBlackListResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DeleteBlackListResponse)PARSER.parseFrom(input, extensionRegistry); } public static DeleteBlackListResponse parseDelimitedFrom(InputStream input) throws IOException { return (DeleteBlackListResponse)PARSER.parseDelimitedFrom(input); } public static DeleteBlackListResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DeleteBlackListResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static DeleteBlackListResponse parseFrom(CodedInputStream input) throws IOException { return (DeleteBlackListResponse)PARSER.parseFrom(input); } public static DeleteBlackListResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DeleteBlackListResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(DeleteBlackListResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.DeleteBlackListResponseOrBuilder {
/* 31215 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_DeleteBlackListResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_DeleteBlackListResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.DeleteBlackListResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.DeleteBlackListResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_DeleteBlackListResponse_descriptor; } public FriendHandler.DeleteBlackListResponse getDefaultInstanceForType() { return FriendHandler.DeleteBlackListResponse.getDefaultInstance(); } public FriendHandler.DeleteBlackListResponse build() { FriendHandler.DeleteBlackListResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.DeleteBlackListResponse buildPartial() { FriendHandler.DeleteBlackListResponse result = new FriendHandler.DeleteBlackListResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.DeleteBlackListResponse) return mergeFrom((FriendHandler.DeleteBlackListResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.DeleteBlackListResponse other) { if (other == FriendHandler.DeleteBlackListResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.DeleteBlackListResponse parsedMessage = null; try { parsedMessage = (FriendHandler.DeleteBlackListResponse)FriendHandler.DeleteBlackListResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.DeleteBlackListResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.DeleteBlackListResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class DeleteAllBlackListResponse
/*       */     extends GeneratedMessage
/*       */     implements DeleteAllBlackListResponseOrBuilder
/*       */   {
/* 31776 */     private static final DeleteAllBlackListResponse defaultInstance = new DeleteAllBlackListResponse(true); private final UnknownFieldSet unknownFields; private DeleteAllBlackListResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private DeleteAllBlackListResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static DeleteAllBlackListResponse getDefaultInstance() { return defaultInstance; } public DeleteAllBlackListResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private DeleteAllBlackListResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_DeleteAllBlackListResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_DeleteAllBlackListResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(DeleteAllBlackListResponse.class, Builder.class); } public static Parser<DeleteAllBlackListResponse> PARSER = (Parser<DeleteAllBlackListResponse>)new AbstractParser<DeleteAllBlackListResponse>() { public FriendHandler.DeleteAllBlackListResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.DeleteAllBlackListResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<DeleteAllBlackListResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static DeleteAllBlackListResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (DeleteAllBlackListResponse)PARSER.parseFrom(data); } public static DeleteAllBlackListResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DeleteAllBlackListResponse)PARSER.parseFrom(data, extensionRegistry); } public static DeleteAllBlackListResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (DeleteAllBlackListResponse)PARSER.parseFrom(data); } public static DeleteAllBlackListResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (DeleteAllBlackListResponse)PARSER.parseFrom(data, extensionRegistry); } public static DeleteAllBlackListResponse parseFrom(InputStream input) throws IOException { return (DeleteAllBlackListResponse)PARSER.parseFrom(input); } public static DeleteAllBlackListResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DeleteAllBlackListResponse)PARSER.parseFrom(input, extensionRegistry); } public static DeleteAllBlackListResponse parseDelimitedFrom(InputStream input) throws IOException { return (DeleteAllBlackListResponse)PARSER.parseDelimitedFrom(input); } public static DeleteAllBlackListResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DeleteAllBlackListResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static DeleteAllBlackListResponse parseFrom(CodedInputStream input) throws IOException { return (DeleteAllBlackListResponse)PARSER.parseFrom(input); } public static DeleteAllBlackListResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (DeleteAllBlackListResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(DeleteAllBlackListResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.DeleteAllBlackListResponseOrBuilder {
/* 31777 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_DeleteAllBlackListResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_DeleteAllBlackListResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.DeleteAllBlackListResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.DeleteAllBlackListResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_DeleteAllBlackListResponse_descriptor; } public FriendHandler.DeleteAllBlackListResponse getDefaultInstanceForType() { return FriendHandler.DeleteAllBlackListResponse.getDefaultInstance(); } public FriendHandler.DeleteAllBlackListResponse build() { FriendHandler.DeleteAllBlackListResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.DeleteAllBlackListResponse buildPartial() { FriendHandler.DeleteAllBlackListResponse result = new FriendHandler.DeleteAllBlackListResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.DeleteAllBlackListResponse) return mergeFrom((FriendHandler.DeleteAllBlackListResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.DeleteAllBlackListResponse other) { if (other == FriendHandler.DeleteAllBlackListResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.DeleteAllBlackListResponse parsedMessage = null; try { parsedMessage = (FriendHandler.DeleteAllBlackListResponse)FriendHandler.DeleteAllBlackListResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.DeleteAllBlackListResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.DeleteAllBlackListResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class AddBlackListResponse
/*       */     extends GeneratedMessage
/*       */     implements AddBlackListResponseOrBuilder
/*       */   {
/* 32338 */     private static final AddBlackListResponse defaultInstance = new AddBlackListResponse(true); private final UnknownFieldSet unknownFields; private AddBlackListResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private AddBlackListResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static AddBlackListResponse getDefaultInstance() { return defaultInstance; } public AddBlackListResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private AddBlackListResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_AddBlackListResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_AddBlackListResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(AddBlackListResponse.class, Builder.class); } public static Parser<AddBlackListResponse> PARSER = (Parser<AddBlackListResponse>)new AbstractParser<AddBlackListResponse>() { public FriendHandler.AddBlackListResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.AddBlackListResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<AddBlackListResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static AddBlackListResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (AddBlackListResponse)PARSER.parseFrom(data); } public static AddBlackListResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (AddBlackListResponse)PARSER.parseFrom(data, extensionRegistry); } public static AddBlackListResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (AddBlackListResponse)PARSER.parseFrom(data); } public static AddBlackListResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (AddBlackListResponse)PARSER.parseFrom(data, extensionRegistry); } public static AddBlackListResponse parseFrom(InputStream input) throws IOException { return (AddBlackListResponse)PARSER.parseFrom(input); } public static AddBlackListResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (AddBlackListResponse)PARSER.parseFrom(input, extensionRegistry); } public static AddBlackListResponse parseDelimitedFrom(InputStream input) throws IOException { return (AddBlackListResponse)PARSER.parseDelimitedFrom(input); } public static AddBlackListResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (AddBlackListResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static AddBlackListResponse parseFrom(CodedInputStream input) throws IOException { return (AddBlackListResponse)PARSER.parseFrom(input); } public static AddBlackListResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (AddBlackListResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(AddBlackListResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.AddBlackListResponseOrBuilder {
/* 32339 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_AddBlackListResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_AddBlackListResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.AddBlackListResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.AddBlackListResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_AddBlackListResponse_descriptor; } public FriendHandler.AddBlackListResponse getDefaultInstanceForType() { return FriendHandler.AddBlackListResponse.getDefaultInstance(); } public FriendHandler.AddBlackListResponse build() { FriendHandler.AddBlackListResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.AddBlackListResponse buildPartial() { FriendHandler.AddBlackListResponse result = new FriendHandler.AddBlackListResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.AddBlackListResponse) return mergeFrom((FriendHandler.AddBlackListResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.AddBlackListResponse other) { if (other == FriendHandler.AddBlackListResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.AddBlackListResponse parsedMessage = null; try { parsedMessage = (FriendHandler.AddBlackListResponse)FriendHandler.AddBlackListResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.AddBlackListResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.AddBlackListResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class GetSocialInfoResponse
/*       */     extends GeneratedMessage
/*       */     implements GetSocialInfoResponseOrBuilder
/*       */   {
/* 33158 */     private static final GetSocialInfoResponse defaultInstance = new GetSocialInfoResponse(true); private final UnknownFieldSet unknownFields; private GetSocialInfoResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private GetSocialInfoResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static GetSocialInfoResponse getDefaultInstance() { return defaultInstance; } public GetSocialInfoResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private GetSocialInfoResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 24: this.bitField0_ |= 0x4; this.addPointToday_ = input.readInt32(); break;case 32: this.bitField0_ |= 0x8; this.friendShipPoint_ = input.readInt32(); break;case 40: this.bitField0_ |= 0x10; this.addPointTodayMax_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_GetSocialInfoResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_GetSocialInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(GetSocialInfoResponse.class, Builder.class); } public static Parser<GetSocialInfoResponse> PARSER = (Parser<GetSocialInfoResponse>)new AbstractParser<GetSocialInfoResponse>() { public FriendHandler.GetSocialInfoResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.GetSocialInfoResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int ADDPOINTTODAY_FIELD_NUMBER = 3; private int addPointToday_; public static final int FRIENDSHIPPOINT_FIELD_NUMBER = 4; private int friendShipPoint_; public static final int ADDPOINTTODAYMAX_FIELD_NUMBER = 5; private int addPointTodayMax_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<GetSocialInfoResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public boolean hasAddPointToday() { return ((this.bitField0_ & 0x4) == 4); } public int getAddPointToday() { return this.addPointToday_; } public boolean hasFriendShipPoint() { return ((this.bitField0_ & 0x8) == 8); } public int getFriendShipPoint() { return this.friendShipPoint_; } public boolean hasAddPointTodayMax() { return ((this.bitField0_ & 0x10) == 16); } public int getAddPointTodayMax() { return this.addPointTodayMax_; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.addPointToday_ = 0; this.friendShipPoint_ = 0; this.addPointTodayMax_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  if (!hasAddPointToday()) { this.memoizedIsInitialized = 0; return false; }  if (!hasFriendShipPoint()) { this.memoizedIsInitialized = 0; return false; }  if (!hasAddPointTodayMax()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4) output.writeInt32(3, this.addPointToday_);  if ((this.bitField0_ & 0x8) == 8) output.writeInt32(4, this.friendShipPoint_);  if ((this.bitField0_ & 0x10) == 16) output.writeInt32(5, this.addPointTodayMax_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt32Size(3, this.addPointToday_);  if ((this.bitField0_ & 0x8) == 8) size += CodedOutputStream.computeInt32Size(4, this.friendShipPoint_);  if ((this.bitField0_ & 0x10) == 16) size += CodedOutputStream.computeInt32Size(5, this.addPointTodayMax_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static GetSocialInfoResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (GetSocialInfoResponse)PARSER.parseFrom(data); } public static GetSocialInfoResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetSocialInfoResponse)PARSER.parseFrom(data, extensionRegistry); } public static GetSocialInfoResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (GetSocialInfoResponse)PARSER.parseFrom(data); } public static GetSocialInfoResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetSocialInfoResponse)PARSER.parseFrom(data, extensionRegistry); } public static GetSocialInfoResponse parseFrom(InputStream input) throws IOException { return (GetSocialInfoResponse)PARSER.parseFrom(input); } public static GetSocialInfoResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetSocialInfoResponse)PARSER.parseFrom(input, extensionRegistry); } public static GetSocialInfoResponse parseDelimitedFrom(InputStream input) throws IOException { return (GetSocialInfoResponse)PARSER.parseDelimitedFrom(input); } public static GetSocialInfoResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetSocialInfoResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static GetSocialInfoResponse parseFrom(CodedInputStream input) throws IOException { return (GetSocialInfoResponse)PARSER.parseFrom(input); } public static GetSocialInfoResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetSocialInfoResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(GetSocialInfoResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.GetSocialInfoResponseOrBuilder {
/* 33159 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; private int addPointToday_; private int friendShipPoint_; private int addPointTodayMax_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_GetSocialInfoResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_GetSocialInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.GetSocialInfoResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.GetSocialInfoResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; this.addPointToday_ = 0; this.bitField0_ &= 0xFFFFFFFB; this.friendShipPoint_ = 0; this.bitField0_ &= 0xFFFFFFF7; this.addPointTodayMax_ = 0; this.bitField0_ &= 0xFFFFFFEF; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_GetSocialInfoResponse_descriptor; } public FriendHandler.GetSocialInfoResponse getDefaultInstanceForType() { return FriendHandler.GetSocialInfoResponse.getDefaultInstance(); } public FriendHandler.GetSocialInfoResponse build() { FriendHandler.GetSocialInfoResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.GetSocialInfoResponse buildPartial() { FriendHandler.GetSocialInfoResponse result = new FriendHandler.GetSocialInfoResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;  result.addPointToday_ = this.addPointToday_; if ((from_bitField0_ & 0x8) == 8) to_bitField0_ |= 0x8;  result.friendShipPoint_ = this.friendShipPoint_; if ((from_bitField0_ & 0x10) == 16) to_bitField0_ |= 0x10;  result.addPointTodayMax_ = this.addPointTodayMax_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.GetSocialInfoResponse) return mergeFrom((FriendHandler.GetSocialInfoResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.GetSocialInfoResponse other) { if (other == FriendHandler.GetSocialInfoResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  if (other.hasAddPointToday()) setAddPointToday(other.getAddPointToday());  if (other.hasFriendShipPoint()) setFriendShipPoint(other.getFriendShipPoint());  if (other.hasAddPointTodayMax()) setAddPointTodayMax(other.getAddPointTodayMax());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  if (!hasAddPointToday()) return false;  if (!hasFriendShipPoint()) return false;  if (!hasAddPointTodayMax()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.GetSocialInfoResponse parsedMessage = null; try { parsedMessage = (FriendHandler.GetSocialInfoResponse)FriendHandler.GetSocialInfoResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.GetSocialInfoResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.GetSocialInfoResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public boolean hasAddPointToday() { return ((this.bitField0_ & 0x4) == 4); } public int getAddPointToday() { return this.addPointToday_; } public Builder setAddPointToday(int value) { this.bitField0_ |= 0x4; this.addPointToday_ = value; onChanged(); return this; } public Builder clearAddPointToday() { this.bitField0_ &= 0xFFFFFFFB; this.addPointToday_ = 0; onChanged(); return this; } public boolean hasFriendShipPoint() { return ((this.bitField0_ & 0x8) == 8); } public int getFriendShipPoint() { return this.friendShipPoint_; } public Builder setFriendShipPoint(int value) { this.bitField0_ |= 0x8; this.friendShipPoint_ = value; onChanged(); return this; } public Builder clearFriendShipPoint() { this.bitField0_ &= 0xFFFFFFF7; this.friendShipPoint_ = 0; onChanged(); return this; } public boolean hasAddPointTodayMax() { return ((this.bitField0_ & 0x10) == 16); } public int getAddPointTodayMax() { return this.addPointTodayMax_; } public Builder setAddPointTodayMax(int value) { this.bitField0_ |= 0x10; this.addPointTodayMax_ = value; onChanged(); return this; } public Builder clearAddPointTodayMax() { this.bitField0_ &= 0xFFFFFFEF; this.addPointTodayMax_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class GetShopItemListRequest
/*       */     extends GeneratedMessage
/*       */     implements GetShopItemListRequestOrBuilder
/*       */   {
/* 33471 */     private static final GetShopItemListRequest defaultInstance = new GetShopItemListRequest(true); private final UnknownFieldSet unknownFields; private GetShopItemListRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private GetShopItemListRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static GetShopItemListRequest getDefaultInstance() { return defaultInstance; } public GetShopItemListRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private GetShopItemListRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_GetShopItemListRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_GetShopItemListRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(GetShopItemListRequest.class, Builder.class); } public static Parser<GetShopItemListRequest> PARSER = (Parser<GetShopItemListRequest>)new AbstractParser<GetShopItemListRequest>() { public FriendHandler.GetShopItemListRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.GetShopItemListRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<GetShopItemListRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static GetShopItemListRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (GetShopItemListRequest)PARSER.parseFrom(data); } public static GetShopItemListRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetShopItemListRequest)PARSER.parseFrom(data, extensionRegistry); } public static GetShopItemListRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (GetShopItemListRequest)PARSER.parseFrom(data); } public static GetShopItemListRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetShopItemListRequest)PARSER.parseFrom(data, extensionRegistry); } public static GetShopItemListRequest parseFrom(InputStream input) throws IOException { return (GetShopItemListRequest)PARSER.parseFrom(input); } public static GetShopItemListRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetShopItemListRequest)PARSER.parseFrom(input, extensionRegistry); } public static GetShopItemListRequest parseDelimitedFrom(InputStream input) throws IOException { return (GetShopItemListRequest)PARSER.parseDelimitedFrom(input); } public static GetShopItemListRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetShopItemListRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static GetShopItemListRequest parseFrom(CodedInputStream input) throws IOException { return (GetShopItemListRequest)PARSER.parseFrom(input); } public static GetShopItemListRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetShopItemListRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(GetShopItemListRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.GetShopItemListRequestOrBuilder {
/* 33472 */       public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_GetShopItemListRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_GetShopItemListRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.GetShopItemListRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.GetShopItemListRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_GetShopItemListRequest_descriptor; } public FriendHandler.GetShopItemListRequest getDefaultInstanceForType() { return FriendHandler.GetShopItemListRequest.getDefaultInstance(); } public FriendHandler.GetShopItemListRequest build() { FriendHandler.GetShopItemListRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.GetShopItemListRequest buildPartial() { FriendHandler.GetShopItemListRequest result = new FriendHandler.GetShopItemListRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.GetShopItemListRequest) return mergeFrom((FriendHandler.GetShopItemListRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.GetShopItemListRequest other) { if (other == FriendHandler.GetShopItemListRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.GetShopItemListRequest parsedMessage = null; try { parsedMessage = (FriendHandler.GetShopItemListRequest)FriendHandler.GetShopItemListRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.GetShopItemListRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ExchangeFriendShopItemRequest
/*       */     extends GeneratedMessage
/*       */     implements ExchangeFriendShopItemRequestOrBuilder
/*       */   {
/* 33994 */     private static final ExchangeFriendShopItemRequest defaultInstance = new ExchangeFriendShopItemRequest(true); private final UnknownFieldSet unknownFields; private ExchangeFriendShopItemRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ExchangeFriendShopItemRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ExchangeFriendShopItemRequest getDefaultInstance() { return defaultInstance; } public ExchangeFriendShopItemRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ExchangeFriendShopItemRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.c2SItemId_ = input.readInt32(); break;case 24: this.bitField0_ |= 0x2; this.c2SNum_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_ExchangeFriendShopItemRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_ExchangeFriendShopItemRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ExchangeFriendShopItemRequest.class, Builder.class); } public static Parser<ExchangeFriendShopItemRequest> PARSER = (Parser<ExchangeFriendShopItemRequest>)new AbstractParser<ExchangeFriendShopItemRequest>() { public FriendHandler.ExchangeFriendShopItemRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.ExchangeFriendShopItemRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_ITEMID_FIELD_NUMBER = 1; private int c2SItemId_; public static final int C2S_NUM_FIELD_NUMBER = 3; private int c2SNum_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ExchangeFriendShopItemRequest> getParserForType() { return PARSER; } public boolean hasC2SItemId() { return ((this.bitField0_ & 0x1) == 1); } public int getC2SItemId() { return this.c2SItemId_; } public boolean hasC2SNum() { return ((this.bitField0_ & 0x2) == 2); } public int getC2SNum() { return this.c2SNum_; } private void initFields() { this.c2SItemId_ = 0; this.c2SNum_ = 0; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SItemId()) { this.memoizedIsInitialized = 0; return false; }  if (!hasC2SNum()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.c2SItemId_);  if ((this.bitField0_ & 0x2) == 2) output.writeInt32(3, this.c2SNum_);  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.c2SItemId_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(3, this.c2SNum_);  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ExchangeFriendShopItemRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ExchangeFriendShopItemRequest)PARSER.parseFrom(data); } public static ExchangeFriendShopItemRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ExchangeFriendShopItemRequest)PARSER.parseFrom(data, extensionRegistry); } public static ExchangeFriendShopItemRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ExchangeFriendShopItemRequest)PARSER.parseFrom(data); } public static ExchangeFriendShopItemRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ExchangeFriendShopItemRequest)PARSER.parseFrom(data, extensionRegistry); } public static ExchangeFriendShopItemRequest parseFrom(InputStream input) throws IOException { return (ExchangeFriendShopItemRequest)PARSER.parseFrom(input); } public static ExchangeFriendShopItemRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ExchangeFriendShopItemRequest)PARSER.parseFrom(input, extensionRegistry); } public static ExchangeFriendShopItemRequest parseDelimitedFrom(InputStream input) throws IOException { return (ExchangeFriendShopItemRequest)PARSER.parseDelimitedFrom(input); } public static ExchangeFriendShopItemRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ExchangeFriendShopItemRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ExchangeFriendShopItemRequest parseFrom(CodedInputStream input) throws IOException { return (ExchangeFriendShopItemRequest)PARSER.parseFrom(input); } public static ExchangeFriendShopItemRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ExchangeFriendShopItemRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ExchangeFriendShopItemRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.ExchangeFriendShopItemRequestOrBuilder {
/* 33995 */       private int bitField0_; private int c2SItemId_; private int c2SNum_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_ExchangeFriendShopItemRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_ExchangeFriendShopItemRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.ExchangeFriendShopItemRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.ExchangeFriendShopItemRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SItemId_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.c2SNum_ = 0; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_ExchangeFriendShopItemRequest_descriptor; } public FriendHandler.ExchangeFriendShopItemRequest getDefaultInstanceForType() { return FriendHandler.ExchangeFriendShopItemRequest.getDefaultInstance(); } public FriendHandler.ExchangeFriendShopItemRequest build() { FriendHandler.ExchangeFriendShopItemRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.ExchangeFriendShopItemRequest buildPartial() { FriendHandler.ExchangeFriendShopItemRequest result = new FriendHandler.ExchangeFriendShopItemRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SItemId_ = this.c2SItemId_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.c2SNum_ = this.c2SNum_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.ExchangeFriendShopItemRequest) return mergeFrom((FriendHandler.ExchangeFriendShopItemRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.ExchangeFriendShopItemRequest other) { if (other == FriendHandler.ExchangeFriendShopItemRequest.getDefaultInstance()) return this;  if (other.hasC2SItemId()) setC2SItemId(other.getC2SItemId());  if (other.hasC2SNum()) setC2SNum(other.getC2SNum());  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SItemId()) return false;  if (!hasC2SNum()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.ExchangeFriendShopItemRequest parsedMessage = null; try { parsedMessage = (FriendHandler.ExchangeFriendShopItemRequest)FriendHandler.ExchangeFriendShopItemRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.ExchangeFriendShopItemRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SItemId() { return ((this.bitField0_ & 0x1) == 1); } public int getC2SItemId() { return this.c2SItemId_; } public Builder setC2SItemId(int value) { this.bitField0_ |= 0x1; this.c2SItemId_ = value; onChanged(); return this; } public Builder clearC2SItemId() { this.bitField0_ &= 0xFFFFFFFE; this.c2SItemId_ = 0; onChanged(); return this; } public boolean hasC2SNum() { return ((this.bitField0_ & 0x2) == 2); } public int getC2SNum() { return this.c2SNum_; } public Builder setC2SNum(int value) { this.bitField0_ |= 0x2; this.c2SNum_ = value; onChanged(); return this; } public Builder clearC2SNum() { this.bitField0_ &= 0xFFFFFFFD; this.c2SNum_ = 0; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class FriendShopExchangeInfo
/*       */     extends GeneratedMessage
/*       */     implements FriendShopExchangeInfoOrBuilder
/*       */   {
/* 35914 */     private static final FriendShopExchangeInfo defaultInstance = new FriendShopExchangeInfo(true); private final UnknownFieldSet unknownFields; private FriendShopExchangeInfo(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private FriendShopExchangeInfo(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static FriendShopExchangeInfo getDefaultInstance() { return defaultInstance; } public FriendShopExchangeInfo getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private FriendShopExchangeInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.itemId_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.itemCode_ = bs; break;case 26: if ((mutable_bitField0_ & 0x4) != 4) { this.condition_ = new ArrayList<>(); mutable_bitField0_ |= 0x4; }  this.condition_.add(input.readMessage(FriendHandler.FriendShopCondition.PARSER, extensionRegistry)); break;case 34: if ((mutable_bitField0_ & 0x8) != 8) { this.needMoney_ = new ArrayList<>(); mutable_bitField0_ |= 0x8; }  this.needMoney_.add(input.readMessage(FriendHandler.FriendShopMoneyInfo.PARSER, extensionRegistry)); break;case 40: this.bitField0_ |= 0x4; this.meetCondition_ = input.readInt32(); break;case 48: this.bitField0_ |= 0x8; this.maxExchangeNum_ = input.readInt32(); break;case 56: this.bitField0_ |= 0x10; this.state_ = input.readInt32(); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x4) == 4) this.condition_ = Collections.unmodifiableList(this.condition_);  if ((mutable_bitField0_ & 0x8) == 8) this.needMoney_ = Collections.unmodifiableList(this.needMoney_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_FriendShopExchangeInfo_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_FriendShopExchangeInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendShopExchangeInfo.class, Builder.class); } public static Parser<FriendShopExchangeInfo> PARSER = (Parser<FriendShopExchangeInfo>)new AbstractParser<FriendShopExchangeInfo>() { public FriendHandler.FriendShopExchangeInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.FriendShopExchangeInfo(input, extensionRegistry); } }
/* 35915 */     ; private int bitField0_; public static final int ITEMID_FIELD_NUMBER = 1; private int itemId_; public static final int ITEMCODE_FIELD_NUMBER = 2; private Object itemCode_; public static final int CONDITION_FIELD_NUMBER = 3; private List<FriendHandler.FriendShopCondition> condition_; public static final int NEEDMONEY_FIELD_NUMBER = 4; private List<FriendHandler.FriendShopMoneyInfo> needMoney_; public static final int MEETCONDITION_FIELD_NUMBER = 5; private int meetCondition_; public static final int MAXEXCHANGENUM_FIELD_NUMBER = 6; private int maxExchangeNum_; public static final int STATE_FIELD_NUMBER = 7; private int state_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<FriendShopExchangeInfo> getParserForType() { return PARSER; } public boolean hasItemId() { return ((this.bitField0_ & 0x1) == 1); } public int getItemId() { return this.itemId_; } public boolean hasItemCode() { return ((this.bitField0_ & 0x2) == 2); } public String getItemCode() { Object ref = this.itemCode_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.itemCode_ = s;  return s; } public ByteString getItemCodeBytes() { Object ref = this.itemCode_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.itemCode_ = b; return b; }  return (ByteString)ref; } public List<FriendHandler.FriendShopCondition> getConditionList() { return this.condition_; } static { defaultInstance.initFields(); }
/*       */ 
/*       */     
/*       */     public List<? extends FriendHandler.FriendShopConditionOrBuilder> getConditionOrBuilderList() {
/*       */       return (List)this.condition_;
/*       */     }
/*       */     
/*       */     public int getConditionCount() {
/*       */       return this.condition_.size();
/*       */     }
/*       */     
/*       */     public FriendHandler.FriendShopCondition getCondition(int index) {
/*       */       return this.condition_.get(index);
/*       */     }
/*       */     
/*       */     public FriendHandler.FriendShopConditionOrBuilder getConditionOrBuilder(int index) {
/*       */       return this.condition_.get(index);
/*       */     }
/*       */     
/*       */     public List<FriendHandler.FriendShopMoneyInfo> getNeedMoneyList() {
/*       */       return this.needMoney_;
/*       */     }
/*       */     
/*       */     public List<? extends FriendHandler.FriendShopMoneyInfoOrBuilder> getNeedMoneyOrBuilderList() {
/*       */       return (List)this.needMoney_;
/*       */     }
/*       */     
/*       */     public int getNeedMoneyCount() {
/*       */       return this.needMoney_.size();
/*       */     }
/*       */     
/*       */     public FriendHandler.FriendShopMoneyInfo getNeedMoney(int index) {
/*       */       return this.needMoney_.get(index);
/*       */     }
/*       */     
/*       */     public FriendHandler.FriendShopMoneyInfoOrBuilder getNeedMoneyOrBuilder(int index) {
/*       */       return this.needMoney_.get(index);
/*       */     }
/*       */     
/*       */     public boolean hasMeetCondition() {
/*       */       return ((this.bitField0_ & 0x4) == 4);
/*       */     }
/*       */     
/*       */     public int getMeetCondition() {
/*       */       return this.meetCondition_;
/*       */     }
/*       */     
/*       */     public boolean hasMaxExchangeNum() {
/*       */       return ((this.bitField0_ & 0x8) == 8);
/*       */     }
/*       */     
/*       */     public int getMaxExchangeNum() {
/*       */       return this.maxExchangeNum_;
/*       */     }
/*       */     
/*       */     public boolean hasState() {
/*       */       return ((this.bitField0_ & 0x10) == 16);
/*       */     }
/*       */     
/*       */     public int getState() {
/*       */       return this.state_;
/*       */     }
/*       */     
/*       */     private void initFields() {
/*       */       this.itemId_ = 0;
/*       */       this.itemCode_ = "";
/*       */       this.condition_ = Collections.emptyList();
/*       */       this.needMoney_ = Collections.emptyList();
/*       */       this.meetCondition_ = 0;
/*       */       this.maxExchangeNum_ = 0;
/*       */       this.state_ = 0;
/*       */     }
/*       */     
/*       */     public final boolean isInitialized() {
/*       */       byte isInitialized = this.memoizedIsInitialized;
/*       */       if (isInitialized == 1) {
/*       */         return true;
/*       */       }
/*       */       if (isInitialized == 0) {
/*       */         return false;
/*       */       }
/*       */       for (int i = 0; i < getNeedMoneyCount(); i++) {
/*       */         if (!getNeedMoney(i).isInitialized()) {
/*       */           this.memoizedIsInitialized = 0;
/*       */           return false;
/*       */         } 
/*       */       } 
/*       */       this.memoizedIsInitialized = 1;
/*       */       return true;
/*       */     }
/*       */     
/*       */     public void writeTo(CodedOutputStream output) throws IOException {
/*       */       getSerializedSize();
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         output.writeInt32(1, this.itemId_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         output.writeBytes(2, getItemCodeBytes());
/*       */       }
/*       */       int i;
/*       */       for (i = 0; i < this.condition_.size(); i++) {
/*       */         output.writeMessage(3, (MessageLite)this.condition_.get(i));
/*       */       }
/*       */       for (i = 0; i < this.needMoney_.size(); i++) {
/*       */         output.writeMessage(4, (MessageLite)this.needMoney_.get(i));
/*       */       }
/*       */       if ((this.bitField0_ & 0x4) == 4) {
/*       */         output.writeInt32(5, this.meetCondition_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x8) == 8) {
/*       */         output.writeInt32(6, this.maxExchangeNum_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x10) == 16) {
/*       */         output.writeInt32(7, this.state_);
/*       */       }
/*       */       getUnknownFields().writeTo(output);
/*       */     }
/*       */     
/*       */     public int getSerializedSize() {
/*       */       int size = this.memoizedSerializedSize;
/*       */       if (size != -1) {
/*       */         return size;
/*       */       }
/*       */       size = 0;
/*       */       if ((this.bitField0_ & 0x1) == 1) {
/*       */         size += CodedOutputStream.computeInt32Size(1, this.itemId_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x2) == 2) {
/*       */         size += CodedOutputStream.computeBytesSize(2, getItemCodeBytes());
/*       */       }
/*       */       int i;
/*       */       for (i = 0; i < this.condition_.size(); i++) {
/*       */         size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.condition_.get(i));
/*       */       }
/*       */       for (i = 0; i < this.needMoney_.size(); i++) {
/*       */         size += CodedOutputStream.computeMessageSize(4, (MessageLite)this.needMoney_.get(i));
/*       */       }
/*       */       if ((this.bitField0_ & 0x4) == 4) {
/*       */         size += CodedOutputStream.computeInt32Size(5, this.meetCondition_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x8) == 8) {
/*       */         size += CodedOutputStream.computeInt32Size(6, this.maxExchangeNum_);
/*       */       }
/*       */       if ((this.bitField0_ & 0x10) == 16) {
/*       */         size += CodedOutputStream.computeInt32Size(7, this.state_);
/*       */       }
/*       */       size += getUnknownFields().getSerializedSize();
/*       */       this.memoizedSerializedSize = size;
/*       */       return size;
/*       */     }
/*       */     
/*       */     protected Object writeReplace() throws ObjectStreamException {
/*       */       return super.writeReplace();
/*       */     }
/*       */     
/*       */     public static FriendShopExchangeInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
/*       */       return (FriendShopExchangeInfo)PARSER.parseFrom(data);
/*       */     }
/*       */     
/*       */     public static FriendShopExchangeInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (FriendShopExchangeInfo)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */     
/*       */     public static FriendShopExchangeInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
/*       */       return (FriendShopExchangeInfo)PARSER.parseFrom(data);
/*       */     }
/*       */     
/*       */     public static FriendShopExchangeInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
/*       */       return (FriendShopExchangeInfo)PARSER.parseFrom(data, extensionRegistry);
/*       */     }
/*       */     
/*       */     public static FriendShopExchangeInfo parseFrom(InputStream input) throws IOException {
/*       */       return (FriendShopExchangeInfo)PARSER.parseFrom(input);
/*       */     }
/*       */     
/*       */     public static FriendShopExchangeInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (FriendShopExchangeInfo)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */     
/*       */     public static FriendShopExchangeInfo parseDelimitedFrom(InputStream input) throws IOException {
/*       */       return (FriendShopExchangeInfo)PARSER.parseDelimitedFrom(input);
/*       */     }
/*       */     
/*       */     public static FriendShopExchangeInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (FriendShopExchangeInfo)PARSER.parseDelimitedFrom(input, extensionRegistry);
/*       */     }
/*       */     
/*       */     public static FriendShopExchangeInfo parseFrom(CodedInputStream input) throws IOException {
/*       */       return (FriendShopExchangeInfo)PARSER.parseFrom(input);
/*       */     }
/*       */     
/*       */     public static FriendShopExchangeInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */       return (FriendShopExchangeInfo)PARSER.parseFrom(input, extensionRegistry);
/*       */     }
/*       */     
/*       */     public static Builder newBuilder() {
/*       */       return Builder.create();
/*       */     }
/*       */     
/*       */     public Builder newBuilderForType() {
/*       */       return newBuilder();
/*       */     }
/*       */     
/*       */     public static Builder newBuilder(FriendShopExchangeInfo prototype) {
/*       */       return newBuilder().mergeFrom(prototype);
/*       */     }
/*       */     
/*       */     public Builder toBuilder() {
/*       */       return newBuilder(this);
/*       */     }
/*       */     
/*       */     protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
/*       */       Builder builder = new Builder(parent);
/*       */       return builder;
/*       */     }
/*       */     
/*       */     public static final class Builder
/*       */       extends GeneratedMessage.Builder<Builder>
/*       */       implements FriendHandler.FriendShopExchangeInfoOrBuilder
/*       */     {
/*       */       private int bitField0_;
/*       */       private int itemId_;
/*       */       private Object itemCode_;
/*       */       private List<FriendHandler.FriendShopCondition> condition_;
/*       */       private RepeatedFieldBuilder<FriendHandler.FriendShopCondition, FriendHandler.FriendShopCondition.Builder, FriendHandler.FriendShopConditionOrBuilder> conditionBuilder_;
/*       */       private List<FriendHandler.FriendShopMoneyInfo> needMoney_;
/*       */       private RepeatedFieldBuilder<FriendHandler.FriendShopMoneyInfo, FriendHandler.FriendShopMoneyInfo.Builder, FriendHandler.FriendShopMoneyInfoOrBuilder> needMoneyBuilder_;
/*       */       private int meetCondition_;
/*       */       private int maxExchangeNum_;
/*       */       private int state_;
/*       */       
/*       */       public static final Descriptors.Descriptor getDescriptor() {
/*       */         return FriendHandler.internal_static_pomelo_area_FriendShopExchangeInfo_descriptor;
/*       */       }
/*       */       
/*       */       protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
/*       */         return FriendHandler.internal_static_pomelo_area_FriendShopExchangeInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.FriendShopExchangeInfo.class, Builder.class);
/*       */       }
/*       */       
/*       */       private Builder() {
/*       */         this.itemCode_ = "";
/*       */         this.condition_ = Collections.emptyList();
/*       */         this.needMoney_ = Collections.emptyList();
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */       
/*       */       private Builder(GeneratedMessage.BuilderParent parent) {
/*       */         super(parent);
/*       */         this.itemCode_ = "";
/*       */         this.condition_ = Collections.emptyList();
/*       */         this.needMoney_ = Collections.emptyList();
/*       */         maybeForceBuilderInitialization();
/*       */       }
/*       */       
/*       */       private void maybeForceBuilderInitialization() {
/*       */         if (FriendHandler.FriendShopExchangeInfo.alwaysUseFieldBuilders) {
/*       */           getConditionFieldBuilder();
/*       */           getNeedMoneyFieldBuilder();
/*       */         } 
/*       */       }
/*       */       
/*       */       private static Builder create() {
/*       */         return new Builder();
/*       */       }
/*       */       
/*       */       public Builder clear() {
/*       */         super.clear();
/*       */         this.itemId_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.itemCode_ = "";
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         if (this.conditionBuilder_ == null) {
/*       */           this.condition_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFFB;
/*       */         } else {
/*       */           this.conditionBuilder_.clear();
/*       */         } 
/*       */         if (this.needMoneyBuilder_ == null) {
/*       */           this.needMoney_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFF7;
/*       */         } else {
/*       */           this.needMoneyBuilder_.clear();
/*       */         } 
/*       */         this.meetCondition_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.maxExchangeNum_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFDF;
/*       */         this.state_ = 0;
/*       */         this.bitField0_ &= 0xFFFFFFBF;
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clone() {
/*       */         return create().mergeFrom(buildPartial());
/*       */       }
/*       */       
/*       */       public Descriptors.Descriptor getDescriptorForType() {
/*       */         return FriendHandler.internal_static_pomelo_area_FriendShopExchangeInfo_descriptor;
/*       */       }
/*       */       
/*       */       public FriendHandler.FriendShopExchangeInfo getDefaultInstanceForType() {
/*       */         return FriendHandler.FriendShopExchangeInfo.getDefaultInstance();
/*       */       }
/*       */       
/*       */       public FriendHandler.FriendShopExchangeInfo build() {
/*       */         FriendHandler.FriendShopExchangeInfo result = buildPartial();
/*       */         if (!result.isInitialized()) {
/*       */           throw newUninitializedMessageException(result);
/*       */         }
/*       */         return result;
/*       */       }
/*       */       
/*       */       public FriendHandler.FriendShopExchangeInfo buildPartial() {
/*       */         FriendHandler.FriendShopExchangeInfo result = new FriendHandler.FriendShopExchangeInfo(this);
/*       */         int from_bitField0_ = this.bitField0_;
/*       */         int to_bitField0_ = 0;
/*       */         if ((from_bitField0_ & 0x1) == 1) {
/*       */           to_bitField0_ |= 0x1;
/*       */         }
/*       */         result.itemId_ = this.itemId_;
/*       */         if ((from_bitField0_ & 0x2) == 2) {
/*       */           to_bitField0_ |= 0x2;
/*       */         }
/*       */         result.itemCode_ = this.itemCode_;
/*       */         if (this.conditionBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x4) == 4) {
/*       */             this.condition_ = Collections.unmodifiableList(this.condition_);
/*       */             this.bitField0_ &= 0xFFFFFFFB;
/*       */           } 
/*       */           result.condition_ = this.condition_;
/*       */         } else {
/*       */           result.condition_ = this.conditionBuilder_.build();
/*       */         } 
/*       */         if (this.needMoneyBuilder_ == null) {
/*       */           if ((this.bitField0_ & 0x8) == 8) {
/*       */             this.needMoney_ = Collections.unmodifiableList(this.needMoney_);
/*       */             this.bitField0_ &= 0xFFFFFFF7;
/*       */           } 
/*       */           result.needMoney_ = this.needMoney_;
/*       */         } else {
/*       */           result.needMoney_ = this.needMoneyBuilder_.build();
/*       */         } 
/*       */         if ((from_bitField0_ & 0x10) == 16) {
/*       */           to_bitField0_ |= 0x4;
/*       */         }
/*       */         result.meetCondition_ = this.meetCondition_;
/*       */         if ((from_bitField0_ & 0x20) == 32) {
/*       */           to_bitField0_ |= 0x8;
/*       */         }
/*       */         result.maxExchangeNum_ = this.maxExchangeNum_;
/*       */         if ((from_bitField0_ & 0x40) == 64) {
/*       */           to_bitField0_ |= 0x10;
/*       */         }
/*       */         result.state_ = this.state_;
/*       */         result.bitField0_ = to_bitField0_;
/*       */         onBuilt();
/*       */         return result;
/*       */       }
/*       */       
/*       */       public Builder mergeFrom(Message other) {
/*       */         if (other instanceof FriendHandler.FriendShopExchangeInfo) {
/*       */           return mergeFrom((FriendHandler.FriendShopExchangeInfo)other);
/*       */         }
/*       */         super.mergeFrom(other);
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder mergeFrom(FriendHandler.FriendShopExchangeInfo other) {
/*       */         if (other == FriendHandler.FriendShopExchangeInfo.getDefaultInstance()) {
/*       */           return this;
/*       */         }
/*       */         if (other.hasItemId()) {
/*       */           setItemId(other.getItemId());
/*       */         }
/*       */         if (other.hasItemCode()) {
/*       */           this.bitField0_ |= 0x2;
/*       */           this.itemCode_ = other.itemCode_;
/*       */           onChanged();
/*       */         } 
/*       */         if (this.conditionBuilder_ == null) {
/*       */           if (!other.condition_.isEmpty()) {
/*       */             if (this.condition_.isEmpty()) {
/*       */               this.condition_ = other.condition_;
/*       */               this.bitField0_ &= 0xFFFFFFFB;
/*       */             } else {
/*       */               ensureConditionIsMutable();
/*       */               this.condition_.addAll(other.condition_);
/*       */             } 
/*       */             onChanged();
/*       */           } 
/*       */         } else if (!other.condition_.isEmpty()) {
/*       */           if (this.conditionBuilder_.isEmpty()) {
/*       */             this.conditionBuilder_.dispose();
/*       */             this.conditionBuilder_ = null;
/*       */             this.condition_ = other.condition_;
/*       */             this.bitField0_ &= 0xFFFFFFFB;
/*       */             this.conditionBuilder_ = FriendHandler.FriendShopExchangeInfo.alwaysUseFieldBuilders ? getConditionFieldBuilder() : null;
/*       */           } else {
/*       */             this.conditionBuilder_.addAllMessages(other.condition_);
/*       */           } 
/*       */         } 
/*       */         if (this.needMoneyBuilder_ == null) {
/*       */           if (!other.needMoney_.isEmpty()) {
/*       */             if (this.needMoney_.isEmpty()) {
/*       */               this.needMoney_ = other.needMoney_;
/*       */               this.bitField0_ &= 0xFFFFFFF7;
/*       */             } else {
/*       */               ensureNeedMoneyIsMutable();
/*       */               this.needMoney_.addAll(other.needMoney_);
/*       */             } 
/*       */             onChanged();
/*       */           } 
/*       */         } else if (!other.needMoney_.isEmpty()) {
/*       */           if (this.needMoneyBuilder_.isEmpty()) {
/*       */             this.needMoneyBuilder_.dispose();
/*       */             this.needMoneyBuilder_ = null;
/*       */             this.needMoney_ = other.needMoney_;
/*       */             this.bitField0_ &= 0xFFFFFFF7;
/*       */             this.needMoneyBuilder_ = FriendHandler.FriendShopExchangeInfo.alwaysUseFieldBuilders ? getNeedMoneyFieldBuilder() : null;
/*       */           } else {
/*       */             this.needMoneyBuilder_.addAllMessages(other.needMoney_);
/*       */           } 
/*       */         } 
/*       */         if (other.hasMeetCondition()) {
/*       */           setMeetCondition(other.getMeetCondition());
/*       */         }
/*       */         if (other.hasMaxExchangeNum())
/*       */           setMaxExchangeNum(other.getMaxExchangeNum()); 
/*       */         if (other.hasState())
/*       */           setState(other.getState()); 
/*       */         mergeUnknownFields(other.getUnknownFields());
/*       */         return this;
/*       */       }
/*       */       
/*       */       public final boolean isInitialized() {
/*       */         for (int i = 0; i < getNeedMoneyCount(); i++) {
/*       */           if (!getNeedMoney(i).isInitialized())
/*       */             return false; 
/*       */         } 
/*       */         return true;
/*       */       }
/*       */       
/*       */       public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
/*       */         FriendHandler.FriendShopExchangeInfo parsedMessage = null;
/*       */         try {
/*       */           parsedMessage = (FriendHandler.FriendShopExchangeInfo)FriendHandler.FriendShopExchangeInfo.PARSER.parsePartialFrom(input, extensionRegistry);
/*       */         } catch (InvalidProtocolBufferException e) {
/*       */           parsedMessage = (FriendHandler.FriendShopExchangeInfo)e.getUnfinishedMessage();
/*       */           throw e;
/*       */         } finally {
/*       */           if (parsedMessage != null)
/*       */             mergeFrom(parsedMessage); 
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public boolean hasItemId() {
/*       */         return ((this.bitField0_ & 0x1) == 1);
/*       */       }
/*       */       
/*       */       public int getItemId() {
/*       */         return this.itemId_;
/*       */       }
/*       */       
/*       */       public Builder setItemId(int value) {
/*       */         this.bitField0_ |= 0x1;
/*       */         this.itemId_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearItemId() {
/*       */         this.bitField0_ &= 0xFFFFFFFE;
/*       */         this.itemId_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public boolean hasItemCode() {
/*       */         return ((this.bitField0_ & 0x2) == 2);
/*       */       }
/*       */       
/*       */       public String getItemCode() {
/*       */         Object ref = this.itemCode_;
/*       */         if (!(ref instanceof String)) {
/*       */           ByteString bs = (ByteString)ref;
/*       */           String s = bs.toStringUtf8();
/*       */           if (bs.isValidUtf8())
/*       */             this.itemCode_ = s; 
/*       */           return s;
/*       */         } 
/*       */         return (String)ref;
/*       */       }
/*       */       
/*       */       public ByteString getItemCodeBytes() {
/*       */         Object ref = this.itemCode_;
/*       */         if (ref instanceof String) {
/*       */           ByteString b = ByteString.copyFromUtf8((String)ref);
/*       */           this.itemCode_ = b;
/*       */           return b;
/*       */         } 
/*       */         return (ByteString)ref;
/*       */       }
/*       */       
/*       */       public Builder setItemCode(String value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x2;
/*       */         this.itemCode_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearItemCode() {
/*       */         this.bitField0_ &= 0xFFFFFFFD;
/*       */         this.itemCode_ = FriendHandler.FriendShopExchangeInfo.getDefaultInstance().getItemCode();
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder setItemCodeBytes(ByteString value) {
/*       */         if (value == null)
/*       */           throw new NullPointerException(); 
/*       */         this.bitField0_ |= 0x2;
/*       */         this.itemCode_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       private void ensureConditionIsMutable() {
/*       */         if ((this.bitField0_ & 0x4) != 4) {
/*       */           this.condition_ = new ArrayList<>(this.condition_);
/*       */           this.bitField0_ |= 0x4;
/*       */         } 
/*       */       }
/*       */       
/*       */       public List<FriendHandler.FriendShopCondition> getConditionList() {
/*       */         if (this.conditionBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.condition_); 
/*       */         return this.conditionBuilder_.getMessageList();
/*       */       }
/*       */       
/*       */       public int getConditionCount() {
/*       */         if (this.conditionBuilder_ == null)
/*       */           return this.condition_.size(); 
/*       */         return this.conditionBuilder_.getCount();
/*       */       }
/*       */       
/*       */       public FriendHandler.FriendShopCondition getCondition(int index) {
/*       */         if (this.conditionBuilder_ == null)
/*       */           return this.condition_.get(index); 
/*       */         return (FriendHandler.FriendShopCondition)this.conditionBuilder_.getMessage(index);
/*       */       }
/*       */       
/*       */       public Builder setCondition(int index, FriendHandler.FriendShopCondition value) {
/*       */         if (this.conditionBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureConditionIsMutable();
/*       */           this.condition_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.conditionBuilder_.setMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder setCondition(int index, FriendHandler.FriendShopCondition.Builder builderForValue) {
/*       */         if (this.conditionBuilder_ == null) {
/*       */           ensureConditionIsMutable();
/*       */           this.condition_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.conditionBuilder_.setMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder addCondition(FriendHandler.FriendShopCondition value) {
/*       */         if (this.conditionBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureConditionIsMutable();
/*       */           this.condition_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.conditionBuilder_.addMessage(value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder addCondition(int index, FriendHandler.FriendShopCondition value) {
/*       */         if (this.conditionBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureConditionIsMutable();
/*       */           this.condition_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.conditionBuilder_.addMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder addCondition(FriendHandler.FriendShopCondition.Builder builderForValue) {
/*       */         if (this.conditionBuilder_ == null) {
/*       */           ensureConditionIsMutable();
/*       */           this.condition_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.conditionBuilder_.addMessage(builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder addCondition(int index, FriendHandler.FriendShopCondition.Builder builderForValue) {
/*       */         if (this.conditionBuilder_ == null) {
/*       */           ensureConditionIsMutable();
/*       */           this.condition_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.conditionBuilder_.addMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder addAllCondition(Iterable<? extends FriendHandler.FriendShopCondition> values) {
/*       */         if (this.conditionBuilder_ == null) {
/*       */           ensureConditionIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.condition_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.conditionBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearCondition() {
/*       */         if (this.conditionBuilder_ == null) {
/*       */           this.condition_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFFB;
/*       */           onChanged();
/*       */         } else {
/*       */           this.conditionBuilder_.clear();
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder removeCondition(int index) {
/*       */         if (this.conditionBuilder_ == null) {
/*       */           ensureConditionIsMutable();
/*       */           this.condition_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.conditionBuilder_.remove(index);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public FriendHandler.FriendShopCondition.Builder getConditionBuilder(int index) {
/*       */         return (FriendHandler.FriendShopCondition.Builder)getConditionFieldBuilder().getBuilder(index);
/*       */       }
/*       */       
/*       */       public FriendHandler.FriendShopConditionOrBuilder getConditionOrBuilder(int index) {
/*       */         if (this.conditionBuilder_ == null)
/*       */           return this.condition_.get(index); 
/*       */         return (FriendHandler.FriendShopConditionOrBuilder)this.conditionBuilder_.getMessageOrBuilder(index);
/*       */       }
/*       */       
/*       */       public List<? extends FriendHandler.FriendShopConditionOrBuilder> getConditionOrBuilderList() {
/*       */         if (this.conditionBuilder_ != null)
/*       */           return this.conditionBuilder_.getMessageOrBuilderList(); 
/*       */         return Collections.unmodifiableList((List)this.condition_);
/*       */       }
/*       */       
/*       */       public FriendHandler.FriendShopCondition.Builder addConditionBuilder() {
/*       */         return (FriendHandler.FriendShopCondition.Builder)getConditionFieldBuilder().addBuilder(FriendHandler.FriendShopCondition.getDefaultInstance());
/*       */       }
/*       */       
/*       */       public FriendHandler.FriendShopCondition.Builder addConditionBuilder(int index) {
/*       */         return (FriendHandler.FriendShopCondition.Builder)getConditionFieldBuilder().addBuilder(index, FriendHandler.FriendShopCondition.getDefaultInstance());
/*       */       }
/*       */       
/*       */       public List<FriendHandler.FriendShopCondition.Builder> getConditionBuilderList() {
/*       */         return getConditionFieldBuilder().getBuilderList();
/*       */       }
/*       */       
/*       */       private RepeatedFieldBuilder<FriendHandler.FriendShopCondition, FriendHandler.FriendShopCondition.Builder, FriendHandler.FriendShopConditionOrBuilder> getConditionFieldBuilder() {
/*       */         if (this.conditionBuilder_ == null) {
/*       */           this.conditionBuilder_ = new RepeatedFieldBuilder(this.condition_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean());
/*       */           this.condition_ = null;
/*       */         } 
/*       */         return this.conditionBuilder_;
/*       */       }
/*       */       
/*       */       private void ensureNeedMoneyIsMutable() {
/*       */         if ((this.bitField0_ & 0x8) != 8) {
/*       */           this.needMoney_ = new ArrayList<>(this.needMoney_);
/*       */           this.bitField0_ |= 0x8;
/*       */         } 
/*       */       }
/*       */       
/*       */       public List<FriendHandler.FriendShopMoneyInfo> getNeedMoneyList() {
/*       */         if (this.needMoneyBuilder_ == null)
/*       */           return Collections.unmodifiableList(this.needMoney_); 
/*       */         return this.needMoneyBuilder_.getMessageList();
/*       */       }
/*       */       
/*       */       public int getNeedMoneyCount() {
/*       */         if (this.needMoneyBuilder_ == null)
/*       */           return this.needMoney_.size(); 
/*       */         return this.needMoneyBuilder_.getCount();
/*       */       }
/*       */       
/*       */       public FriendHandler.FriendShopMoneyInfo getNeedMoney(int index) {
/*       */         if (this.needMoneyBuilder_ == null)
/*       */           return this.needMoney_.get(index); 
/*       */         return (FriendHandler.FriendShopMoneyInfo)this.needMoneyBuilder_.getMessage(index);
/*       */       }
/*       */       
/*       */       public Builder setNeedMoney(int index, FriendHandler.FriendShopMoneyInfo value) {
/*       */         if (this.needMoneyBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureNeedMoneyIsMutable();
/*       */           this.needMoney_.set(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.needMoneyBuilder_.setMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder setNeedMoney(int index, FriendHandler.FriendShopMoneyInfo.Builder builderForValue) {
/*       */         if (this.needMoneyBuilder_ == null) {
/*       */           ensureNeedMoneyIsMutable();
/*       */           this.needMoney_.set(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.needMoneyBuilder_.setMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder addNeedMoney(FriendHandler.FriendShopMoneyInfo value) {
/*       */         if (this.needMoneyBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureNeedMoneyIsMutable();
/*       */           this.needMoney_.add(value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.needMoneyBuilder_.addMessage(value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder addNeedMoney(int index, FriendHandler.FriendShopMoneyInfo value) {
/*       */         if (this.needMoneyBuilder_ == null) {
/*       */           if (value == null)
/*       */             throw new NullPointerException(); 
/*       */           ensureNeedMoneyIsMutable();
/*       */           this.needMoney_.add(index, value);
/*       */           onChanged();
/*       */         } else {
/*       */           this.needMoneyBuilder_.addMessage(index, value);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder addNeedMoney(FriendHandler.FriendShopMoneyInfo.Builder builderForValue) {
/*       */         if (this.needMoneyBuilder_ == null) {
/*       */           ensureNeedMoneyIsMutable();
/*       */           this.needMoney_.add(builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.needMoneyBuilder_.addMessage(builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder addNeedMoney(int index, FriendHandler.FriendShopMoneyInfo.Builder builderForValue) {
/*       */         if (this.needMoneyBuilder_ == null) {
/*       */           ensureNeedMoneyIsMutable();
/*       */           this.needMoney_.add(index, builderForValue.build());
/*       */           onChanged();
/*       */         } else {
/*       */           this.needMoneyBuilder_.addMessage(index, builderForValue.build());
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder addAllNeedMoney(Iterable<? extends FriendHandler.FriendShopMoneyInfo> values) {
/*       */         if (this.needMoneyBuilder_ == null) {
/*       */           ensureNeedMoneyIsMutable();
/*       */           AbstractMessageLite.Builder.addAll(values, this.needMoney_);
/*       */           onChanged();
/*       */         } else {
/*       */           this.needMoneyBuilder_.addAllMessages(values);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearNeedMoney() {
/*       */         if (this.needMoneyBuilder_ == null) {
/*       */           this.needMoney_ = Collections.emptyList();
/*       */           this.bitField0_ &= 0xFFFFFFF7;
/*       */           onChanged();
/*       */         } else {
/*       */           this.needMoneyBuilder_.clear();
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder removeNeedMoney(int index) {
/*       */         if (this.needMoneyBuilder_ == null) {
/*       */           ensureNeedMoneyIsMutable();
/*       */           this.needMoney_.remove(index);
/*       */           onChanged();
/*       */         } else {
/*       */           this.needMoneyBuilder_.remove(index);
/*       */         } 
/*       */         return this;
/*       */       }
/*       */       
/*       */       public FriendHandler.FriendShopMoneyInfo.Builder getNeedMoneyBuilder(int index) {
/*       */         return (FriendHandler.FriendShopMoneyInfo.Builder)getNeedMoneyFieldBuilder().getBuilder(index);
/*       */       }
/*       */       
/*       */       public FriendHandler.FriendShopMoneyInfoOrBuilder getNeedMoneyOrBuilder(int index) {
/*       */         if (this.needMoneyBuilder_ == null)
/*       */           return this.needMoney_.get(index); 
/*       */         return (FriendHandler.FriendShopMoneyInfoOrBuilder)this.needMoneyBuilder_.getMessageOrBuilder(index);
/*       */       }
/*       */       
/*       */       public List<? extends FriendHandler.FriendShopMoneyInfoOrBuilder> getNeedMoneyOrBuilderList() {
/*       */         if (this.needMoneyBuilder_ != null)
/*       */           return this.needMoneyBuilder_.getMessageOrBuilderList(); 
/*       */         return Collections.unmodifiableList((List)this.needMoney_);
/*       */       }
/*       */       
/*       */       public FriendHandler.FriendShopMoneyInfo.Builder addNeedMoneyBuilder() {
/*       */         return (FriendHandler.FriendShopMoneyInfo.Builder)getNeedMoneyFieldBuilder().addBuilder(FriendHandler.FriendShopMoneyInfo.getDefaultInstance());
/*       */       }
/*       */       
/*       */       public FriendHandler.FriendShopMoneyInfo.Builder addNeedMoneyBuilder(int index) {
/*       */         return (FriendHandler.FriendShopMoneyInfo.Builder)getNeedMoneyFieldBuilder().addBuilder(index, FriendHandler.FriendShopMoneyInfo.getDefaultInstance());
/*       */       }
/*       */       
/*       */       public List<FriendHandler.FriendShopMoneyInfo.Builder> getNeedMoneyBuilderList() {
/*       */         return getNeedMoneyFieldBuilder().getBuilderList();
/*       */       }
/*       */       
/*       */       private RepeatedFieldBuilder<FriendHandler.FriendShopMoneyInfo, FriendHandler.FriendShopMoneyInfo.Builder, FriendHandler.FriendShopMoneyInfoOrBuilder> getNeedMoneyFieldBuilder() {
/*       */         if (this.needMoneyBuilder_ == null) {
/*       */           this.needMoneyBuilder_ = new RepeatedFieldBuilder(this.needMoney_, ((this.bitField0_ & 0x8) == 8), getParentForChildren(), isClean());
/*       */           this.needMoney_ = null;
/*       */         } 
/*       */         return this.needMoneyBuilder_;
/*       */       }
/*       */       
/*       */       public boolean hasMeetCondition() {
/*       */         return ((this.bitField0_ & 0x10) == 16);
/*       */       }
/*       */       
/*       */       public int getMeetCondition() {
/*       */         return this.meetCondition_;
/*       */       }
/*       */       
/*       */       public Builder setMeetCondition(int value) {
/*       */         this.bitField0_ |= 0x10;
/*       */         this.meetCondition_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearMeetCondition() {
/*       */         this.bitField0_ &= 0xFFFFFFEF;
/*       */         this.meetCondition_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public boolean hasMaxExchangeNum() {
/*       */         return ((this.bitField0_ & 0x20) == 32);
/*       */       }
/*       */       
/*       */       public int getMaxExchangeNum() {
/*       */         return this.maxExchangeNum_;
/*       */       }
/*       */       
/*       */       public Builder setMaxExchangeNum(int value) {
/*       */         this.bitField0_ |= 0x20;
/*       */         this.maxExchangeNum_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearMaxExchangeNum() {
/*       */         this.bitField0_ &= 0xFFFFFFDF;
/*       */         this.maxExchangeNum_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public boolean hasState() {
/*       */         return ((this.bitField0_ & 0x40) == 64);
/*       */       }
/*       */       
/*       */       public int getState() {
/*       */         return this.state_;
/*       */       }
/*       */       
/*       */       public Builder setState(int value) {
/*       */         this.bitField0_ |= 0x40;
/*       */         this.state_ = value;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */       
/*       */       public Builder clearState() {
/*       */         this.bitField0_ &= 0xFFFFFFBF;
/*       */         this.state_ = 0;
/*       */         onChanged();
/*       */         return this;
/*       */       }
/*       */     }
/*       */   }
/*       */   
/*       */   public static final class GetShopItemListResponse
/*       */     extends GeneratedMessage
/*       */     implements GetShopItemListResponseOrBuilder
/*       */   {
/* 36848 */     private static final GetShopItemListResponse defaultInstance = new GetShopItemListResponse(true); private final UnknownFieldSet unknownFields; private GetShopItemListResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private GetShopItemListResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static GetShopItemListResponse getDefaultInstance() { return defaultInstance; } public GetShopItemListResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private GetShopItemListResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: if ((mutable_bitField0_ & 0x4) != 4) { this.s2CData_ = new ArrayList<>(); mutable_bitField0_ |= 0x4; }  this.s2CData_.add(input.readMessage(FriendHandler.FriendShopExchangeInfo.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x4) == 4) this.s2CData_ = Collections.unmodifiableList(this.s2CData_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_GetShopItemListResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_GetShopItemListResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(GetShopItemListResponse.class, Builder.class); } public static Parser<GetShopItemListResponse> PARSER = (Parser<GetShopItemListResponse>)new AbstractParser<GetShopItemListResponse>() { public FriendHandler.GetShopItemListResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.GetShopItemListResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_DATA_FIELD_NUMBER = 3; private List<FriendHandler.FriendShopExchangeInfo> s2CData_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<GetShopItemListResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public List<FriendHandler.FriendShopExchangeInfo> getS2CDataList() { return this.s2CData_; } public List<? extends FriendHandler.FriendShopExchangeInfoOrBuilder> getS2CDataOrBuilderList() { return (List)this.s2CData_; } public int getS2CDataCount() { return this.s2CData_.size(); } public FriendHandler.FriendShopExchangeInfo getS2CData(int index) { return this.s2CData_.get(index); } public FriendHandler.FriendShopExchangeInfoOrBuilder getS2CDataOrBuilder(int index) { return this.s2CData_.get(index); } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.s2CData_ = Collections.emptyList(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  for (int i = 0; i < getS2CDataCount(); i++) { if (!getS2CData(i).isInitialized()) { this.memoizedIsInitialized = 0; return false; }  }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  for (int i = 0; i < this.s2CData_.size(); i++) output.writeMessage(3, (MessageLite)this.s2CData_.get(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  for (int i = 0; i < this.s2CData_.size(); i++) size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.s2CData_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static GetShopItemListResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (GetShopItemListResponse)PARSER.parseFrom(data); } public static GetShopItemListResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetShopItemListResponse)PARSER.parseFrom(data, extensionRegistry); } public static GetShopItemListResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (GetShopItemListResponse)PARSER.parseFrom(data); } public static GetShopItemListResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetShopItemListResponse)PARSER.parseFrom(data, extensionRegistry); } public static GetShopItemListResponse parseFrom(InputStream input) throws IOException { return (GetShopItemListResponse)PARSER.parseFrom(input); } public static GetShopItemListResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetShopItemListResponse)PARSER.parseFrom(input, extensionRegistry); } public static GetShopItemListResponse parseDelimitedFrom(InputStream input) throws IOException { return (GetShopItemListResponse)PARSER.parseDelimitedFrom(input); } public static GetShopItemListResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetShopItemListResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static GetShopItemListResponse parseFrom(CodedInputStream input) throws IOException { return (GetShopItemListResponse)PARSER.parseFrom(input); } public static GetShopItemListResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetShopItemListResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(GetShopItemListResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.GetShopItemListResponseOrBuilder {
/* 36849 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; private List<FriendHandler.FriendShopExchangeInfo> s2CData_; private RepeatedFieldBuilder<FriendHandler.FriendShopExchangeInfo, FriendHandler.FriendShopExchangeInfo.Builder, FriendHandler.FriendShopExchangeInfoOrBuilder> s2CDataBuilder_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_GetShopItemListResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_GetShopItemListResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.GetShopItemListResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; this.s2CData_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; this.s2CData_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.GetShopItemListResponse.alwaysUseFieldBuilders) getS2CDataFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; if (this.s2CDataBuilder_ == null) { this.s2CData_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; } else { this.s2CDataBuilder_.clear(); }  return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_GetShopItemListResponse_descriptor; } public FriendHandler.GetShopItemListResponse getDefaultInstanceForType() { return FriendHandler.GetShopItemListResponse.getDefaultInstance(); } public FriendHandler.GetShopItemListResponse build() { FriendHandler.GetShopItemListResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.GetShopItemListResponse buildPartial() { FriendHandler.GetShopItemListResponse result = new FriendHandler.GetShopItemListResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if (this.s2CDataBuilder_ == null) { if ((this.bitField0_ & 0x4) == 4) { this.s2CData_ = Collections.unmodifiableList(this.s2CData_); this.bitField0_ &= 0xFFFFFFFB; }  result.s2CData_ = this.s2CData_; } else { result.s2CData_ = this.s2CDataBuilder_.build(); }  result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.GetShopItemListResponse) return mergeFrom((FriendHandler.GetShopItemListResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.GetShopItemListResponse other) { if (other == FriendHandler.GetShopItemListResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  if (this.s2CDataBuilder_ == null) { if (!other.s2CData_.isEmpty()) { if (this.s2CData_.isEmpty()) { this.s2CData_ = other.s2CData_; this.bitField0_ &= 0xFFFFFFFB; } else { ensureS2CDataIsMutable(); this.s2CData_.addAll(other.s2CData_); }  onChanged(); }  } else if (!other.s2CData_.isEmpty()) { if (this.s2CDataBuilder_.isEmpty()) { this.s2CDataBuilder_.dispose(); this.s2CDataBuilder_ = null; this.s2CData_ = other.s2CData_; this.bitField0_ &= 0xFFFFFFFB; this.s2CDataBuilder_ = FriendHandler.GetShopItemListResponse.alwaysUseFieldBuilders ? getS2CDataFieldBuilder() : null; } else { this.s2CDataBuilder_.addAllMessages(other.s2CData_); }  }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  for (int i = 0; i < getS2CDataCount(); i++) { if (!getS2CData(i).isInitialized()) return false;  }  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.GetShopItemListResponse parsedMessage = null; try { parsedMessage = (FriendHandler.GetShopItemListResponse)FriendHandler.GetShopItemListResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.GetShopItemListResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.GetShopItemListResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } private void ensureS2CDataIsMutable() { if ((this.bitField0_ & 0x4) != 4) { this.s2CData_ = new ArrayList<>(this.s2CData_); this.bitField0_ |= 0x4; }  } public List<FriendHandler.FriendShopExchangeInfo> getS2CDataList() { if (this.s2CDataBuilder_ == null) return Collections.unmodifiableList(this.s2CData_);  return this.s2CDataBuilder_.getMessageList(); } public int getS2CDataCount() { if (this.s2CDataBuilder_ == null) return this.s2CData_.size();  return this.s2CDataBuilder_.getCount(); } public FriendHandler.FriendShopExchangeInfo getS2CData(int index) { if (this.s2CDataBuilder_ == null) return this.s2CData_.get(index);  return (FriendHandler.FriendShopExchangeInfo)this.s2CDataBuilder_.getMessage(index); } public Builder setS2CData(int index, FriendHandler.FriendShopExchangeInfo value) { if (this.s2CDataBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CDataIsMutable(); this.s2CData_.set(index, value); onChanged(); } else { this.s2CDataBuilder_.setMessage(index, value); }  return this; } public Builder setS2CData(int index, FriendHandler.FriendShopExchangeInfo.Builder builderForValue) { if (this.s2CDataBuilder_ == null) { ensureS2CDataIsMutable(); this.s2CData_.set(index, builderForValue.build()); onChanged(); } else { this.s2CDataBuilder_.setMessage(index, builderForValue.build()); }  return this; } public Builder addS2CData(FriendHandler.FriendShopExchangeInfo value) { if (this.s2CDataBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CDataIsMutable(); this.s2CData_.add(value); onChanged(); } else { this.s2CDataBuilder_.addMessage(value); }  return this; } public Builder addS2CData(int index, FriendHandler.FriendShopExchangeInfo value) { if (this.s2CDataBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CDataIsMutable(); this.s2CData_.add(index, value); onChanged(); } else { this.s2CDataBuilder_.addMessage(index, value); }  return this; } public Builder addS2CData(FriendHandler.FriendShopExchangeInfo.Builder builderForValue) { if (this.s2CDataBuilder_ == null) { ensureS2CDataIsMutable(); this.s2CData_.add(builderForValue.build()); onChanged(); } else { this.s2CDataBuilder_.addMessage(builderForValue.build()); }  return this; } public Builder addS2CData(int index, FriendHandler.FriendShopExchangeInfo.Builder builderForValue) { if (this.s2CDataBuilder_ == null) { ensureS2CDataIsMutable(); this.s2CData_.add(index, builderForValue.build()); onChanged(); } else { this.s2CDataBuilder_.addMessage(index, builderForValue.build()); }  return this; } public Builder addAllS2CData(Iterable<? extends FriendHandler.FriendShopExchangeInfo> values) { if (this.s2CDataBuilder_ == null) { ensureS2CDataIsMutable(); AbstractMessageLite.Builder.addAll(values, this.s2CData_); onChanged(); } else { this.s2CDataBuilder_.addAllMessages(values); }  return this; } public Builder clearS2CData() { if (this.s2CDataBuilder_ == null) { this.s2CData_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; onChanged(); } else { this.s2CDataBuilder_.clear(); }  return this; } public Builder removeS2CData(int index) { if (this.s2CDataBuilder_ == null) { ensureS2CDataIsMutable(); this.s2CData_.remove(index); onChanged(); } else { this.s2CDataBuilder_.remove(index); }  return this; } public FriendHandler.FriendShopExchangeInfo.Builder getS2CDataBuilder(int index) { return (FriendHandler.FriendShopExchangeInfo.Builder)getS2CDataFieldBuilder().getBuilder(index); } public FriendHandler.FriendShopExchangeInfoOrBuilder getS2CDataOrBuilder(int index) { if (this.s2CDataBuilder_ == null) return this.s2CData_.get(index);  return (FriendHandler.FriendShopExchangeInfoOrBuilder)this.s2CDataBuilder_.getMessageOrBuilder(index); } public List<? extends FriendHandler.FriendShopExchangeInfoOrBuilder> getS2CDataOrBuilderList() { if (this.s2CDataBuilder_ != null) return this.s2CDataBuilder_.getMessageOrBuilderList();  return Collections.unmodifiableList((List)this.s2CData_); } public FriendHandler.FriendShopExchangeInfo.Builder addS2CDataBuilder() { return (FriendHandler.FriendShopExchangeInfo.Builder)getS2CDataFieldBuilder().addBuilder(FriendHandler.FriendShopExchangeInfo.getDefaultInstance()); } public FriendHandler.FriendShopExchangeInfo.Builder addS2CDataBuilder(int index) { return (FriendHandler.FriendShopExchangeInfo.Builder)getS2CDataFieldBuilder().addBuilder(index, FriendHandler.FriendShopExchangeInfo.getDefaultInstance()); } public List<FriendHandler.FriendShopExchangeInfo.Builder> getS2CDataBuilderList() { return getS2CDataFieldBuilder().getBuilderList(); } private RepeatedFieldBuilder<FriendHandler.FriendShopExchangeInfo, FriendHandler.FriendShopExchangeInfo.Builder, FriendHandler.FriendShopExchangeInfoOrBuilder> getS2CDataFieldBuilder() { if (this.s2CDataBuilder_ == null) { this.s2CDataBuilder_ = new RepeatedFieldBuilder(this.s2CData_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean()); this.s2CData_ = null; }  return this.s2CDataBuilder_; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class ExchangeFriendShopItemResponse
/*       */     extends GeneratedMessage
/*       */     implements ExchangeFriendShopItemResponseOrBuilder
/*       */   {
/* 37410 */     private static final ExchangeFriendShopItemResponse defaultInstance = new ExchangeFriendShopItemResponse(true); private final UnknownFieldSet unknownFields; private ExchangeFriendShopItemResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private ExchangeFriendShopItemResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static ExchangeFriendShopItemResponse getDefaultInstance() { return defaultInstance; } public ExchangeFriendShopItemResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private ExchangeFriendShopItemResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_ExchangeFriendShopItemResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_ExchangeFriendShopItemResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ExchangeFriendShopItemResponse.class, Builder.class); } public static Parser<ExchangeFriendShopItemResponse> PARSER = (Parser<ExchangeFriendShopItemResponse>)new AbstractParser<ExchangeFriendShopItemResponse>() { public FriendHandler.ExchangeFriendShopItemResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.ExchangeFriendShopItemResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<ExchangeFriendShopItemResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static ExchangeFriendShopItemResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (ExchangeFriendShopItemResponse)PARSER.parseFrom(data); } public static ExchangeFriendShopItemResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ExchangeFriendShopItemResponse)PARSER.parseFrom(data, extensionRegistry); } public static ExchangeFriendShopItemResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (ExchangeFriendShopItemResponse)PARSER.parseFrom(data); } public static ExchangeFriendShopItemResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (ExchangeFriendShopItemResponse)PARSER.parseFrom(data, extensionRegistry); } public static ExchangeFriendShopItemResponse parseFrom(InputStream input) throws IOException { return (ExchangeFriendShopItemResponse)PARSER.parseFrom(input); } public static ExchangeFriendShopItemResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ExchangeFriendShopItemResponse)PARSER.parseFrom(input, extensionRegistry); } public static ExchangeFriendShopItemResponse parseDelimitedFrom(InputStream input) throws IOException { return (ExchangeFriendShopItemResponse)PARSER.parseDelimitedFrom(input); } public static ExchangeFriendShopItemResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ExchangeFriendShopItemResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static ExchangeFriendShopItemResponse parseFrom(CodedInputStream input) throws IOException { return (ExchangeFriendShopItemResponse)PARSER.parseFrom(input); } public static ExchangeFriendShopItemResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (ExchangeFriendShopItemResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(ExchangeFriendShopItemResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.ExchangeFriendShopItemResponseOrBuilder {
/* 37411 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_ExchangeFriendShopItemResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_ExchangeFriendShopItemResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.ExchangeFriendShopItemResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.ExchangeFriendShopItemResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_ExchangeFriendShopItemResponse_descriptor; } public FriendHandler.ExchangeFriendShopItemResponse getDefaultInstanceForType() { return FriendHandler.ExchangeFriendShopItemResponse.getDefaultInstance(); } public FriendHandler.ExchangeFriendShopItemResponse build() { FriendHandler.ExchangeFriendShopItemResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.ExchangeFriendShopItemResponse buildPartial() { FriendHandler.ExchangeFriendShopItemResponse result = new FriendHandler.ExchangeFriendShopItemResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.ExchangeFriendShopItemResponse) return mergeFrom((FriendHandler.ExchangeFriendShopItemResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.ExchangeFriendShopItemResponse other) { if (other == FriendHandler.ExchangeFriendShopItemResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.ExchangeFriendShopItemResponse parsedMessage = null; try { parsedMessage = (FriendHandler.ExchangeFriendShopItemResponse)FriendHandler.ExchangeFriendShopItemResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.ExchangeFriendShopItemResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.ExchangeFriendShopItemResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class GetRecentChatListRequest
/*       */     extends GeneratedMessage
/*       */     implements GetRecentChatListRequestOrBuilder
/*       */   {
/* 37731 */     private static final GetRecentChatListRequest defaultInstance = new GetRecentChatListRequest(true); private final UnknownFieldSet unknownFields; private GetRecentChatListRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private GetRecentChatListRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static GetRecentChatListRequest getDefaultInstance() { return defaultInstance; } public GetRecentChatListRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private GetRecentChatListRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { int tag = input.readTag(); switch (tag) { case 0: done = true; continue; }  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_GetRecentChatListRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_GetRecentChatListRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(GetRecentChatListRequest.class, Builder.class); } public static Parser<GetRecentChatListRequest> PARSER = (Parser<GetRecentChatListRequest>)new AbstractParser<GetRecentChatListRequest>() { public FriendHandler.GetRecentChatListRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.GetRecentChatListRequest(input, extensionRegistry); } }; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<GetRecentChatListRequest> getParserForType() { return PARSER; } private void initFields() {} public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static GetRecentChatListRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (GetRecentChatListRequest)PARSER.parseFrom(data); } public static GetRecentChatListRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetRecentChatListRequest)PARSER.parseFrom(data, extensionRegistry); } public static GetRecentChatListRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (GetRecentChatListRequest)PARSER.parseFrom(data); } public static GetRecentChatListRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetRecentChatListRequest)PARSER.parseFrom(data, extensionRegistry); } public static GetRecentChatListRequest parseFrom(InputStream input) throws IOException { return (GetRecentChatListRequest)PARSER.parseFrom(input); } public static GetRecentChatListRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetRecentChatListRequest)PARSER.parseFrom(input, extensionRegistry); } public static GetRecentChatListRequest parseDelimitedFrom(InputStream input) throws IOException { return (GetRecentChatListRequest)PARSER.parseDelimitedFrom(input); } public static GetRecentChatListRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetRecentChatListRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static GetRecentChatListRequest parseFrom(CodedInputStream input) throws IOException { return (GetRecentChatListRequest)PARSER.parseFrom(input); } public static GetRecentChatListRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetRecentChatListRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(GetRecentChatListRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.GetRecentChatListRequestOrBuilder {
/* 37732 */       public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_GetRecentChatListRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_GetRecentChatListRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.GetRecentChatListRequest.class, Builder.class); } private Builder() { maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.GetRecentChatListRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_GetRecentChatListRequest_descriptor; } public FriendHandler.GetRecentChatListRequest getDefaultInstanceForType() { return FriendHandler.GetRecentChatListRequest.getDefaultInstance(); } public FriendHandler.GetRecentChatListRequest build() { FriendHandler.GetRecentChatListRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.GetRecentChatListRequest buildPartial() { FriendHandler.GetRecentChatListRequest result = new FriendHandler.GetRecentChatListRequest(this); onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.GetRecentChatListRequest) return mergeFrom((FriendHandler.GetRecentChatListRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.GetRecentChatListRequest other) { if (other == FriendHandler.GetRecentChatListRequest.getDefaultInstance()) return this;  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.GetRecentChatListRequest parsedMessage = null; try { parsedMessage = (FriendHandler.GetRecentChatListRequest)FriendHandler.GetRecentChatListRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.GetRecentChatListRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class GetRecentChatListResponse
/*       */     extends GeneratedMessage
/*       */     implements GetRecentChatListResponseOrBuilder
/*       */   {
/* 38673 */     private static final GetRecentChatListResponse defaultInstance = new GetRecentChatListResponse(true); private final UnknownFieldSet unknownFields; private GetRecentChatListResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private GetRecentChatListResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static GetRecentChatListResponse getDefaultInstance() { return defaultInstance; } public GetRecentChatListResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private GetRecentChatListResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: if ((mutable_bitField0_ & 0x4) != 4) { this.s2CLs_ = new ArrayList<>(); mutable_bitField0_ |= 0x4; }  this.s2CLs_.add(input.readMessage(FriendHandler.PlayerInfo.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x4) == 4) this.s2CLs_ = Collections.unmodifiableList(this.s2CLs_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_GetRecentChatListResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_GetRecentChatListResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(GetRecentChatListResponse.class, Builder.class); } public static Parser<GetRecentChatListResponse> PARSER = (Parser<GetRecentChatListResponse>)new AbstractParser<GetRecentChatListResponse>() { public FriendHandler.GetRecentChatListResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.GetRecentChatListResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_LS_FIELD_NUMBER = 3; private List<FriendHandler.PlayerInfo> s2CLs_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<GetRecentChatListResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public List<FriendHandler.PlayerInfo> getS2CLsList() { return this.s2CLs_; } public List<? extends FriendHandler.PlayerInfoOrBuilder> getS2CLsOrBuilderList() { return (List)this.s2CLs_; } public int getS2CLsCount() { return this.s2CLs_.size(); } public FriendHandler.PlayerInfo getS2CLs(int index) { return this.s2CLs_.get(index); } public FriendHandler.PlayerInfoOrBuilder getS2CLsOrBuilder(int index) { return this.s2CLs_.get(index); } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.s2CLs_ = Collections.emptyList(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  for (int i = 0; i < getS2CLsCount(); i++) { if (!getS2CLs(i).isInitialized()) { this.memoizedIsInitialized = 0; return false; }  }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  for (int i = 0; i < this.s2CLs_.size(); i++) output.writeMessage(3, (MessageLite)this.s2CLs_.get(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  for (int i = 0; i < this.s2CLs_.size(); i++) size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.s2CLs_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static GetRecentChatListResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (GetRecentChatListResponse)PARSER.parseFrom(data); } public static GetRecentChatListResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetRecentChatListResponse)PARSER.parseFrom(data, extensionRegistry); } public static GetRecentChatListResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (GetRecentChatListResponse)PARSER.parseFrom(data); } public static GetRecentChatListResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetRecentChatListResponse)PARSER.parseFrom(data, extensionRegistry); } public static GetRecentChatListResponse parseFrom(InputStream input) throws IOException { return (GetRecentChatListResponse)PARSER.parseFrom(input); } public static GetRecentChatListResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetRecentChatListResponse)PARSER.parseFrom(input, extensionRegistry); } public static GetRecentChatListResponse parseDelimitedFrom(InputStream input) throws IOException { return (GetRecentChatListResponse)PARSER.parseDelimitedFrom(input); } public static GetRecentChatListResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetRecentChatListResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static GetRecentChatListResponse parseFrom(CodedInputStream input) throws IOException { return (GetRecentChatListResponse)PARSER.parseFrom(input); } public static GetRecentChatListResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetRecentChatListResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(GetRecentChatListResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.GetRecentChatListResponseOrBuilder {
/* 38674 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; private List<FriendHandler.PlayerInfo> s2CLs_; private RepeatedFieldBuilder<FriendHandler.PlayerInfo, FriendHandler.PlayerInfo.Builder, FriendHandler.PlayerInfoOrBuilder> s2CLsBuilder_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_GetRecentChatListResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_GetRecentChatListResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.GetRecentChatListResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; this.s2CLs_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; this.s2CLs_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.GetRecentChatListResponse.alwaysUseFieldBuilders) getS2CLsFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; if (this.s2CLsBuilder_ == null) { this.s2CLs_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; } else { this.s2CLsBuilder_.clear(); }  return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_GetRecentChatListResponse_descriptor; } public FriendHandler.GetRecentChatListResponse getDefaultInstanceForType() { return FriendHandler.GetRecentChatListResponse.getDefaultInstance(); } public FriendHandler.GetRecentChatListResponse build() { FriendHandler.GetRecentChatListResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.GetRecentChatListResponse buildPartial() { FriendHandler.GetRecentChatListResponse result = new FriendHandler.GetRecentChatListResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if (this.s2CLsBuilder_ == null) { if ((this.bitField0_ & 0x4) == 4) { this.s2CLs_ = Collections.unmodifiableList(this.s2CLs_); this.bitField0_ &= 0xFFFFFFFB; }  result.s2CLs_ = this.s2CLs_; } else { result.s2CLs_ = this.s2CLsBuilder_.build(); }  result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.GetRecentChatListResponse) return mergeFrom((FriendHandler.GetRecentChatListResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.GetRecentChatListResponse other) { if (other == FriendHandler.GetRecentChatListResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  if (this.s2CLsBuilder_ == null) { if (!other.s2CLs_.isEmpty()) { if (this.s2CLs_.isEmpty()) { this.s2CLs_ = other.s2CLs_; this.bitField0_ &= 0xFFFFFFFB; } else { ensureS2CLsIsMutable(); this.s2CLs_.addAll(other.s2CLs_); }  onChanged(); }  } else if (!other.s2CLs_.isEmpty()) { if (this.s2CLsBuilder_.isEmpty()) { this.s2CLsBuilder_.dispose(); this.s2CLsBuilder_ = null; this.s2CLs_ = other.s2CLs_; this.bitField0_ &= 0xFFFFFFFB; this.s2CLsBuilder_ = FriendHandler.GetRecentChatListResponse.alwaysUseFieldBuilders ? getS2CLsFieldBuilder() : null; } else { this.s2CLsBuilder_.addAllMessages(other.s2CLs_); }  }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  for (int i = 0; i < getS2CLsCount(); i++) { if (!getS2CLs(i).isInitialized()) return false;  }  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.GetRecentChatListResponse parsedMessage = null; try { parsedMessage = (FriendHandler.GetRecentChatListResponse)FriendHandler.GetRecentChatListResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.GetRecentChatListResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.GetRecentChatListResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } private void ensureS2CLsIsMutable() { if ((this.bitField0_ & 0x4) != 4) { this.s2CLs_ = new ArrayList<>(this.s2CLs_); this.bitField0_ |= 0x4; }  } public List<FriendHandler.PlayerInfo> getS2CLsList() { if (this.s2CLsBuilder_ == null) return Collections.unmodifiableList(this.s2CLs_);  return this.s2CLsBuilder_.getMessageList(); } public int getS2CLsCount() { if (this.s2CLsBuilder_ == null) return this.s2CLs_.size();  return this.s2CLsBuilder_.getCount(); } public FriendHandler.PlayerInfo getS2CLs(int index) { if (this.s2CLsBuilder_ == null) return this.s2CLs_.get(index);  return (FriendHandler.PlayerInfo)this.s2CLsBuilder_.getMessage(index); } public Builder setS2CLs(int index, FriendHandler.PlayerInfo value) { if (this.s2CLsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CLsIsMutable(); this.s2CLs_.set(index, value); onChanged(); } else { this.s2CLsBuilder_.setMessage(index, value); }  return this; } public Builder setS2CLs(int index, FriendHandler.PlayerInfo.Builder builderForValue) { if (this.s2CLsBuilder_ == null) { ensureS2CLsIsMutable(); this.s2CLs_.set(index, builderForValue.build()); onChanged(); } else { this.s2CLsBuilder_.setMessage(index, builderForValue.build()); }  return this; } public Builder addS2CLs(FriendHandler.PlayerInfo value) { if (this.s2CLsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CLsIsMutable(); this.s2CLs_.add(value); onChanged(); } else { this.s2CLsBuilder_.addMessage(value); }  return this; } public Builder addS2CLs(int index, FriendHandler.PlayerInfo value) { if (this.s2CLsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CLsIsMutable(); this.s2CLs_.add(index, value); onChanged(); } else { this.s2CLsBuilder_.addMessage(index, value); }  return this; } public Builder addS2CLs(FriendHandler.PlayerInfo.Builder builderForValue) { if (this.s2CLsBuilder_ == null) { ensureS2CLsIsMutable(); this.s2CLs_.add(builderForValue.build()); onChanged(); } else { this.s2CLsBuilder_.addMessage(builderForValue.build()); }  return this; } public Builder addS2CLs(int index, FriendHandler.PlayerInfo.Builder builderForValue) { if (this.s2CLsBuilder_ == null) { ensureS2CLsIsMutable(); this.s2CLs_.add(index, builderForValue.build()); onChanged(); } else { this.s2CLsBuilder_.addMessage(index, builderForValue.build()); }  return this; } public Builder addAllS2CLs(Iterable<? extends FriendHandler.PlayerInfo> values) { if (this.s2CLsBuilder_ == null) { ensureS2CLsIsMutable(); AbstractMessageLite.Builder.addAll(values, this.s2CLs_); onChanged(); } else { this.s2CLsBuilder_.addAllMessages(values); }  return this; } public Builder clearS2CLs() { if (this.s2CLsBuilder_ == null) { this.s2CLs_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; onChanged(); } else { this.s2CLsBuilder_.clear(); }  return this; } public Builder removeS2CLs(int index) { if (this.s2CLsBuilder_ == null) { ensureS2CLsIsMutable(); this.s2CLs_.remove(index); onChanged(); } else { this.s2CLsBuilder_.remove(index); }  return this; } public FriendHandler.PlayerInfo.Builder getS2CLsBuilder(int index) { return (FriendHandler.PlayerInfo.Builder)getS2CLsFieldBuilder().getBuilder(index); } public FriendHandler.PlayerInfoOrBuilder getS2CLsOrBuilder(int index) { if (this.s2CLsBuilder_ == null) return this.s2CLs_.get(index);  return (FriendHandler.PlayerInfoOrBuilder)this.s2CLsBuilder_.getMessageOrBuilder(index); } public List<? extends FriendHandler.PlayerInfoOrBuilder> getS2CLsOrBuilderList() { if (this.s2CLsBuilder_ != null) return this.s2CLsBuilder_.getMessageOrBuilderList();  return Collections.unmodifiableList((List)this.s2CLs_); } public FriendHandler.PlayerInfo.Builder addS2CLsBuilder() { return (FriendHandler.PlayerInfo.Builder)getS2CLsFieldBuilder().addBuilder(FriendHandler.PlayerInfo.getDefaultInstance()); } public FriendHandler.PlayerInfo.Builder addS2CLsBuilder(int index) { return (FriendHandler.PlayerInfo.Builder)getS2CLsFieldBuilder().addBuilder(index, FriendHandler.PlayerInfo.getDefaultInstance()); } public List<FriendHandler.PlayerInfo.Builder> getS2CLsBuilderList() { return getS2CLsFieldBuilder().getBuilderList(); } private RepeatedFieldBuilder<FriendHandler.PlayerInfo, FriendHandler.PlayerInfo.Builder, FriendHandler.PlayerInfoOrBuilder> getS2CLsFieldBuilder() { if (this.s2CLsBuilder_ == null) { this.s2CLsBuilder_ = new RepeatedFieldBuilder(this.s2CLs_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean()); this.s2CLs_ = null; }  return this.s2CLsBuilder_; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class GetChatMsgRequest
/*       */     extends GeneratedMessage
/*       */     implements GetChatMsgRequestOrBuilder
/*       */   {
/* 39165 */     private static final GetChatMsgRequest defaultInstance = new GetChatMsgRequest(true); private final UnknownFieldSet unknownFields; private GetChatMsgRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private GetChatMsgRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static GetChatMsgRequest getDefaultInstance() { return defaultInstance; } public GetChatMsgRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private GetChatMsgRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2SFriendId_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_GetChatMsgRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_GetChatMsgRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(GetChatMsgRequest.class, Builder.class); } public static Parser<GetChatMsgRequest> PARSER = (Parser<GetChatMsgRequest>)new AbstractParser<GetChatMsgRequest>() { public FriendHandler.GetChatMsgRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.GetChatMsgRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_FRIENDID_FIELD_NUMBER = 1; private Object c2SFriendId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<GetChatMsgRequest> getParserForType() { return PARSER; } public boolean hasC2SFriendId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SFriendId() { Object ref = this.c2SFriendId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SFriendId_ = s;  return s; } public ByteString getC2SFriendIdBytes() { Object ref = this.c2SFriendId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SFriendId_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.c2SFriendId_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SFriendId()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SFriendIdBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SFriendIdBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static GetChatMsgRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (GetChatMsgRequest)PARSER.parseFrom(data); } public static GetChatMsgRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetChatMsgRequest)PARSER.parseFrom(data, extensionRegistry); } public static GetChatMsgRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (GetChatMsgRequest)PARSER.parseFrom(data); } public static GetChatMsgRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetChatMsgRequest)PARSER.parseFrom(data, extensionRegistry); } public static GetChatMsgRequest parseFrom(InputStream input) throws IOException { return (GetChatMsgRequest)PARSER.parseFrom(input); } public static GetChatMsgRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetChatMsgRequest)PARSER.parseFrom(input, extensionRegistry); } public static GetChatMsgRequest parseDelimitedFrom(InputStream input) throws IOException { return (GetChatMsgRequest)PARSER.parseDelimitedFrom(input); } public static GetChatMsgRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetChatMsgRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static GetChatMsgRequest parseFrom(CodedInputStream input) throws IOException { return (GetChatMsgRequest)PARSER.parseFrom(input); } public static GetChatMsgRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetChatMsgRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(GetChatMsgRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.GetChatMsgRequestOrBuilder {
/* 39166 */       private int bitField0_; private Object c2SFriendId_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_GetChatMsgRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_GetChatMsgRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.GetChatMsgRequest.class, Builder.class); } private Builder() { this.c2SFriendId_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SFriendId_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.GetChatMsgRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SFriendId_ = ""; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_GetChatMsgRequest_descriptor; } public FriendHandler.GetChatMsgRequest getDefaultInstanceForType() { return FriendHandler.GetChatMsgRequest.getDefaultInstance(); } public FriendHandler.GetChatMsgRequest build() { FriendHandler.GetChatMsgRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.GetChatMsgRequest buildPartial() { FriendHandler.GetChatMsgRequest result = new FriendHandler.GetChatMsgRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SFriendId_ = this.c2SFriendId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.GetChatMsgRequest) return mergeFrom((FriendHandler.GetChatMsgRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.GetChatMsgRequest other) { if (other == FriendHandler.GetChatMsgRequest.getDefaultInstance()) return this;  if (other.hasC2SFriendId()) { this.bitField0_ |= 0x1; this.c2SFriendId_ = other.c2SFriendId_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SFriendId()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.GetChatMsgRequest parsedMessage = null; try { parsedMessage = (FriendHandler.GetChatMsgRequest)FriendHandler.GetChatMsgRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.GetChatMsgRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SFriendId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SFriendId() { Object ref = this.c2SFriendId_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SFriendId_ = s;  return s; }  return (String)ref; } public ByteString getC2SFriendIdBytes() { Object ref = this.c2SFriendId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SFriendId_ = b; return b; }  return (ByteString)ref; } public Builder setC2SFriendId(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SFriendId_ = value; onChanged(); return this; } public Builder clearC2SFriendId() { this.bitField0_ &= 0xFFFFFFFE; this.c2SFriendId_ = FriendHandler.GetChatMsgRequest.getDefaultInstance().getC2SFriendId(); onChanged(); return this; } public Builder setC2SFriendIdBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SFriendId_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class GetChatMsgResponse
/*       */     extends GeneratedMessage
/*       */     implements GetChatMsgResponseOrBuilder
/*       */   {
/* 40095 */     private static final GetChatMsgResponse defaultInstance = new GetChatMsgResponse(true); private final UnknownFieldSet unknownFields; private GetChatMsgResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private GetChatMsgResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static GetChatMsgResponse getDefaultInstance() { return defaultInstance; } public GetChatMsgResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private GetChatMsgResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break;case 26: if ((mutable_bitField0_ & 0x4) != 4) { this.s2CMsgLs_ = new ArrayList<>(); mutable_bitField0_ |= 0x4; }  this.s2CMsgLs_.add(input.readMessage(FriendHandler.ChatMsg.PARSER, extensionRegistry)); break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { if ((mutable_bitField0_ & 0x4) == 4) this.s2CMsgLs_ = Collections.unmodifiableList(this.s2CMsgLs_);  this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_GetChatMsgResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_GetChatMsgResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(GetChatMsgResponse.class, Builder.class); } public static Parser<GetChatMsgResponse> PARSER = (Parser<GetChatMsgResponse>)new AbstractParser<GetChatMsgResponse>() { public FriendHandler.GetChatMsgResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.GetChatMsgResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; public static final int S2C_MSGLS_FIELD_NUMBER = 3; private List<FriendHandler.ChatMsg> s2CMsgLs_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<GetChatMsgResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public List<FriendHandler.ChatMsg> getS2CMsgLsList() { return this.s2CMsgLs_; } public List<? extends FriendHandler.ChatMsgOrBuilder> getS2CMsgLsOrBuilderList() { return (List)this.s2CMsgLs_; } public int getS2CMsgLsCount() { return this.s2CMsgLs_.size(); } public FriendHandler.ChatMsg getS2CMsgLs(int index) { return this.s2CMsgLs_.get(index); } public FriendHandler.ChatMsgOrBuilder getS2CMsgLsOrBuilder(int index) { return this.s2CMsgLs_.get(index); } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; this.s2CMsgLs_ = Collections.emptyList(); } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  for (int i = 0; i < this.s2CMsgLs_.size(); i++) output.writeMessage(3, (MessageLite)this.s2CMsgLs_.get(i));  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  for (int i = 0; i < this.s2CMsgLs_.size(); i++) size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.s2CMsgLs_.get(i));  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static GetChatMsgResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (GetChatMsgResponse)PARSER.parseFrom(data); } public static GetChatMsgResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetChatMsgResponse)PARSER.parseFrom(data, extensionRegistry); } public static GetChatMsgResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (GetChatMsgResponse)PARSER.parseFrom(data); } public static GetChatMsgResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (GetChatMsgResponse)PARSER.parseFrom(data, extensionRegistry); } public static GetChatMsgResponse parseFrom(InputStream input) throws IOException { return (GetChatMsgResponse)PARSER.parseFrom(input); } public static GetChatMsgResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetChatMsgResponse)PARSER.parseFrom(input, extensionRegistry); } public static GetChatMsgResponse parseDelimitedFrom(InputStream input) throws IOException { return (GetChatMsgResponse)PARSER.parseDelimitedFrom(input); } public static GetChatMsgResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetChatMsgResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static GetChatMsgResponse parseFrom(CodedInputStream input) throws IOException { return (GetChatMsgResponse)PARSER.parseFrom(input); } public static GetChatMsgResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (GetChatMsgResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(GetChatMsgResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.GetChatMsgResponseOrBuilder {
/* 40096 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; private List<FriendHandler.ChatMsg> s2CMsgLs_; private RepeatedFieldBuilder<FriendHandler.ChatMsg, FriendHandler.ChatMsg.Builder, FriendHandler.ChatMsgOrBuilder> s2CMsgLsBuilder_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_GetChatMsgResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_GetChatMsgResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.GetChatMsgResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; this.s2CMsgLs_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; this.s2CMsgLs_ = Collections.emptyList(); maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.GetChatMsgResponse.alwaysUseFieldBuilders) getS2CMsgLsFieldBuilder();  } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; if (this.s2CMsgLsBuilder_ == null) { this.s2CMsgLs_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; } else { this.s2CMsgLsBuilder_.clear(); }  return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_GetChatMsgResponse_descriptor; } public FriendHandler.GetChatMsgResponse getDefaultInstanceForType() { return FriendHandler.GetChatMsgResponse.getDefaultInstance(); } public FriendHandler.GetChatMsgResponse build() { FriendHandler.GetChatMsgResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.GetChatMsgResponse buildPartial() { FriendHandler.GetChatMsgResponse result = new FriendHandler.GetChatMsgResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; if (this.s2CMsgLsBuilder_ == null) { if ((this.bitField0_ & 0x4) == 4) { this.s2CMsgLs_ = Collections.unmodifiableList(this.s2CMsgLs_); this.bitField0_ &= 0xFFFFFFFB; }  result.s2CMsgLs_ = this.s2CMsgLs_; } else { result.s2CMsgLs_ = this.s2CMsgLsBuilder_.build(); }  result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.GetChatMsgResponse) return mergeFrom((FriendHandler.GetChatMsgResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.GetChatMsgResponse other) { if (other == FriendHandler.GetChatMsgResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  if (this.s2CMsgLsBuilder_ == null) { if (!other.s2CMsgLs_.isEmpty()) { if (this.s2CMsgLs_.isEmpty()) { this.s2CMsgLs_ = other.s2CMsgLs_; this.bitField0_ &= 0xFFFFFFFB; } else { ensureS2CMsgLsIsMutable(); this.s2CMsgLs_.addAll(other.s2CMsgLs_); }  onChanged(); }  } else if (!other.s2CMsgLs_.isEmpty()) { if (this.s2CMsgLsBuilder_.isEmpty()) { this.s2CMsgLsBuilder_.dispose(); this.s2CMsgLsBuilder_ = null; this.s2CMsgLs_ = other.s2CMsgLs_; this.bitField0_ &= 0xFFFFFFFB; this.s2CMsgLsBuilder_ = FriendHandler.GetChatMsgResponse.alwaysUseFieldBuilders ? getS2CMsgLsFieldBuilder() : null; } else { this.s2CMsgLsBuilder_.addAllMessages(other.s2CMsgLs_); }  }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.GetChatMsgResponse parsedMessage = null; try { parsedMessage = (FriendHandler.GetChatMsgResponse)FriendHandler.GetChatMsgResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.GetChatMsgResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.GetChatMsgResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } private void ensureS2CMsgLsIsMutable() { if ((this.bitField0_ & 0x4) != 4) { this.s2CMsgLs_ = new ArrayList<>(this.s2CMsgLs_); this.bitField0_ |= 0x4; }  } public List<FriendHandler.ChatMsg> getS2CMsgLsList() { if (this.s2CMsgLsBuilder_ == null) return Collections.unmodifiableList(this.s2CMsgLs_);  return this.s2CMsgLsBuilder_.getMessageList(); } public int getS2CMsgLsCount() { if (this.s2CMsgLsBuilder_ == null) return this.s2CMsgLs_.size();  return this.s2CMsgLsBuilder_.getCount(); } public FriendHandler.ChatMsg getS2CMsgLs(int index) { if (this.s2CMsgLsBuilder_ == null) return this.s2CMsgLs_.get(index);  return (FriendHandler.ChatMsg)this.s2CMsgLsBuilder_.getMessage(index); } public Builder setS2CMsgLs(int index, FriendHandler.ChatMsg value) { if (this.s2CMsgLsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CMsgLsIsMutable(); this.s2CMsgLs_.set(index, value); onChanged(); } else { this.s2CMsgLsBuilder_.setMessage(index, value); }  return this; } public Builder setS2CMsgLs(int index, FriendHandler.ChatMsg.Builder builderForValue) { if (this.s2CMsgLsBuilder_ == null) { ensureS2CMsgLsIsMutable(); this.s2CMsgLs_.set(index, builderForValue.build()); onChanged(); } else { this.s2CMsgLsBuilder_.setMessage(index, builderForValue.build()); }  return this; } public Builder addS2CMsgLs(FriendHandler.ChatMsg value) { if (this.s2CMsgLsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CMsgLsIsMutable(); this.s2CMsgLs_.add(value); onChanged(); } else { this.s2CMsgLsBuilder_.addMessage(value); }  return this; } public Builder addS2CMsgLs(int index, FriendHandler.ChatMsg value) { if (this.s2CMsgLsBuilder_ == null) { if (value == null) throw new NullPointerException();  ensureS2CMsgLsIsMutable(); this.s2CMsgLs_.add(index, value); onChanged(); } else { this.s2CMsgLsBuilder_.addMessage(index, value); }  return this; } public Builder addS2CMsgLs(FriendHandler.ChatMsg.Builder builderForValue) { if (this.s2CMsgLsBuilder_ == null) { ensureS2CMsgLsIsMutable(); this.s2CMsgLs_.add(builderForValue.build()); onChanged(); } else { this.s2CMsgLsBuilder_.addMessage(builderForValue.build()); }  return this; } public Builder addS2CMsgLs(int index, FriendHandler.ChatMsg.Builder builderForValue) { if (this.s2CMsgLsBuilder_ == null) { ensureS2CMsgLsIsMutable(); this.s2CMsgLs_.add(index, builderForValue.build()); onChanged(); } else { this.s2CMsgLsBuilder_.addMessage(index, builderForValue.build()); }  return this; } public Builder addAllS2CMsgLs(Iterable<? extends FriendHandler.ChatMsg> values) { if (this.s2CMsgLsBuilder_ == null) { ensureS2CMsgLsIsMutable(); AbstractMessageLite.Builder.addAll(values, this.s2CMsgLs_); onChanged(); } else { this.s2CMsgLsBuilder_.addAllMessages(values); }  return this; } public Builder clearS2CMsgLs() { if (this.s2CMsgLsBuilder_ == null) { this.s2CMsgLs_ = Collections.emptyList(); this.bitField0_ &= 0xFFFFFFFB; onChanged(); } else { this.s2CMsgLsBuilder_.clear(); }  return this; } public Builder removeS2CMsgLs(int index) { if (this.s2CMsgLsBuilder_ == null) { ensureS2CMsgLsIsMutable(); this.s2CMsgLs_.remove(index); onChanged(); } else { this.s2CMsgLsBuilder_.remove(index); }  return this; } public FriendHandler.ChatMsg.Builder getS2CMsgLsBuilder(int index) { return (FriendHandler.ChatMsg.Builder)getS2CMsgLsFieldBuilder().getBuilder(index); } public FriendHandler.ChatMsgOrBuilder getS2CMsgLsOrBuilder(int index) { if (this.s2CMsgLsBuilder_ == null) return this.s2CMsgLs_.get(index);  return (FriendHandler.ChatMsgOrBuilder)this.s2CMsgLsBuilder_.getMessageOrBuilder(index); } public List<? extends FriendHandler.ChatMsgOrBuilder> getS2CMsgLsOrBuilderList() { if (this.s2CMsgLsBuilder_ != null) return this.s2CMsgLsBuilder_.getMessageOrBuilderList();  return Collections.unmodifiableList((List)this.s2CMsgLs_); } public FriendHandler.ChatMsg.Builder addS2CMsgLsBuilder() { return (FriendHandler.ChatMsg.Builder)getS2CMsgLsFieldBuilder().addBuilder(FriendHandler.ChatMsg.getDefaultInstance()); } public FriendHandler.ChatMsg.Builder addS2CMsgLsBuilder(int index) { return (FriendHandler.ChatMsg.Builder)getS2CMsgLsFieldBuilder().addBuilder(index, FriendHandler.ChatMsg.getDefaultInstance()); } public List<FriendHandler.ChatMsg.Builder> getS2CMsgLsBuilderList() { return getS2CMsgLsFieldBuilder().getBuilderList(); } private RepeatedFieldBuilder<FriendHandler.ChatMsg, FriendHandler.ChatMsg.Builder, FriendHandler.ChatMsgOrBuilder> getS2CMsgLsFieldBuilder() { if (this.s2CMsgLsBuilder_ == null) { this.s2CMsgLsBuilder_ = new RepeatedFieldBuilder(this.s2CMsgLs_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean()); this.s2CMsgLs_ = null; }  return this.s2CMsgLsBuilder_; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class RmChatMsgRequest
/*       */     extends GeneratedMessage
/*       */     implements RmChatMsgRequestOrBuilder
/*       */   {
/* 40587 */     private static final RmChatMsgRequest defaultInstance = new RmChatMsgRequest(true); private final UnknownFieldSet unknownFields; private RmChatMsgRequest(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private RmChatMsgRequest(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static RmChatMsgRequest getDefaultInstance() { return defaultInstance; } public RmChatMsgRequest getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private RmChatMsgRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 10: bs = input.readBytes(); this.bitField0_ |= 0x1; this.c2SFriendId_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_RmChatMsgRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_RmChatMsgRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(RmChatMsgRequest.class, Builder.class); } public static Parser<RmChatMsgRequest> PARSER = (Parser<RmChatMsgRequest>)new AbstractParser<RmChatMsgRequest>() { public FriendHandler.RmChatMsgRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.RmChatMsgRequest(input, extensionRegistry); } }; private int bitField0_; public static final int C2S_FRIENDID_FIELD_NUMBER = 1; private Object c2SFriendId_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<RmChatMsgRequest> getParserForType() { return PARSER; } public boolean hasC2SFriendId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SFriendId() { Object ref = this.c2SFriendId_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SFriendId_ = s;  return s; } public ByteString getC2SFriendIdBytes() { Object ref = this.c2SFriendId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SFriendId_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.c2SFriendId_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasC2SFriendId()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SFriendIdBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SFriendIdBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static RmChatMsgRequest parseFrom(ByteString data) throws InvalidProtocolBufferException { return (RmChatMsgRequest)PARSER.parseFrom(data); } public static RmChatMsgRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (RmChatMsgRequest)PARSER.parseFrom(data, extensionRegistry); } public static RmChatMsgRequest parseFrom(byte[] data) throws InvalidProtocolBufferException { return (RmChatMsgRequest)PARSER.parseFrom(data); } public static RmChatMsgRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (RmChatMsgRequest)PARSER.parseFrom(data, extensionRegistry); } public static RmChatMsgRequest parseFrom(InputStream input) throws IOException { return (RmChatMsgRequest)PARSER.parseFrom(input); } public static RmChatMsgRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (RmChatMsgRequest)PARSER.parseFrom(input, extensionRegistry); } public static RmChatMsgRequest parseDelimitedFrom(InputStream input) throws IOException { return (RmChatMsgRequest)PARSER.parseDelimitedFrom(input); } public static RmChatMsgRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (RmChatMsgRequest)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static RmChatMsgRequest parseFrom(CodedInputStream input) throws IOException { return (RmChatMsgRequest)PARSER.parseFrom(input); } public static RmChatMsgRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (RmChatMsgRequest)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(RmChatMsgRequest prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.RmChatMsgRequestOrBuilder {
/* 40588 */       private int bitField0_; private Object c2SFriendId_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_RmChatMsgRequest_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_RmChatMsgRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.RmChatMsgRequest.class, Builder.class); } private Builder() { this.c2SFriendId_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.c2SFriendId_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.RmChatMsgRequest.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.c2SFriendId_ = ""; this.bitField0_ &= 0xFFFFFFFE; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_RmChatMsgRequest_descriptor; } public FriendHandler.RmChatMsgRequest getDefaultInstanceForType() { return FriendHandler.RmChatMsgRequest.getDefaultInstance(); } public FriendHandler.RmChatMsgRequest build() { FriendHandler.RmChatMsgRequest result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.RmChatMsgRequest buildPartial() { FriendHandler.RmChatMsgRequest result = new FriendHandler.RmChatMsgRequest(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.c2SFriendId_ = this.c2SFriendId_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.RmChatMsgRequest) return mergeFrom((FriendHandler.RmChatMsgRequest)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.RmChatMsgRequest other) { if (other == FriendHandler.RmChatMsgRequest.getDefaultInstance()) return this;  if (other.hasC2SFriendId()) { this.bitField0_ |= 0x1; this.c2SFriendId_ = other.c2SFriendId_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasC2SFriendId()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.RmChatMsgRequest parsedMessage = null; try { parsedMessage = (FriendHandler.RmChatMsgRequest)FriendHandler.RmChatMsgRequest.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.RmChatMsgRequest)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasC2SFriendId() { return ((this.bitField0_ & 0x1) == 1); } public String getC2SFriendId() { Object ref = this.c2SFriendId_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.c2SFriendId_ = s;  return s; }  return (String)ref; } public ByteString getC2SFriendIdBytes() { Object ref = this.c2SFriendId_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.c2SFriendId_ = b; return b; }  return (ByteString)ref; } public Builder setC2SFriendId(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SFriendId_ = value; onChanged(); return this; } public Builder clearC2SFriendId() { this.bitField0_ &= 0xFFFFFFFE; this.c2SFriendId_ = FriendHandler.RmChatMsgRequest.getDefaultInstance().getC2SFriendId(); onChanged(); return this; } public Builder setC2SFriendIdBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x1; this.c2SFriendId_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static final class RmChatMsgResponse
/*       */     extends GeneratedMessage
/*       */     implements RmChatMsgResponseOrBuilder
/*       */   {
/* 41149 */     private static final RmChatMsgResponse defaultInstance = new RmChatMsgResponse(true); private final UnknownFieldSet unknownFields; private RmChatMsgResponse(GeneratedMessage.Builder<?> builder) { super(builder); this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = builder.getUnknownFields(); } private RmChatMsgResponse(boolean noInit) { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; this.unknownFields = UnknownFieldSet.getDefaultInstance(); } public static RmChatMsgResponse getDefaultInstance() { return defaultInstance; } public RmChatMsgResponse getDefaultInstanceForType() { return defaultInstance; } public final UnknownFieldSet getUnknownFields() { return this.unknownFields; } private RmChatMsgResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { this.memoizedIsInitialized = -1; this.memoizedSerializedSize = -1; initFields(); int mutable_bitField0_ = 0; UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder(); try { boolean done = false; while (!done) { ByteString bs; int tag = input.readTag(); switch (tag) { case 0: done = true; break;case 8: this.bitField0_ |= 0x1; this.s2CCode_ = input.readInt32(); break;case 18: bs = input.readBytes(); this.bitField0_ |= 0x2; this.s2CMsg_ = bs; break; }  }  } catch (InvalidProtocolBufferException e) { throw e.setUnfinishedMessage(this); } catch (IOException e) { throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this); } finally { this.unknownFields = unknownFields.build(); makeExtensionsImmutable(); }  } public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_RmChatMsgResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_RmChatMsgResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(RmChatMsgResponse.class, Builder.class); } public static Parser<RmChatMsgResponse> PARSER = (Parser<RmChatMsgResponse>)new AbstractParser<RmChatMsgResponse>() { public FriendHandler.RmChatMsgResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return new FriendHandler.RmChatMsgResponse(input, extensionRegistry); } }; private int bitField0_; public static final int S2C_CODE_FIELD_NUMBER = 1; private int s2CCode_; public static final int S2C_MSG_FIELD_NUMBER = 2; private Object s2CMsg_; private byte memoizedIsInitialized; private int memoizedSerializedSize; private static final long serialVersionUID = 0L; public Parser<RmChatMsgResponse> getParserForType() { return PARSER; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (ref instanceof String) return (String)ref;  ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } private void initFields() { this.s2CCode_ = 0; this.s2CMsg_ = ""; } public final boolean isInitialized() { byte isInitialized = this.memoizedIsInitialized; if (isInitialized == 1) return true;  if (isInitialized == 0) return false;  if (!hasS2CCode()) { this.memoizedIsInitialized = 0; return false; }  this.memoizedIsInitialized = 1; return true; } public void writeTo(CodedOutputStream output) throws IOException { getSerializedSize(); if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());  getUnknownFields().writeTo(output); } public int getSerializedSize() { int size = this.memoizedSerializedSize; if (size != -1) return size;  size = 0; if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);  if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());  size += getUnknownFields().getSerializedSize(); this.memoizedSerializedSize = size; return size; } protected Object writeReplace() throws ObjectStreamException { return super.writeReplace(); } public static RmChatMsgResponse parseFrom(ByteString data) throws InvalidProtocolBufferException { return (RmChatMsgResponse)PARSER.parseFrom(data); } public static RmChatMsgResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (RmChatMsgResponse)PARSER.parseFrom(data, extensionRegistry); } public static RmChatMsgResponse parseFrom(byte[] data) throws InvalidProtocolBufferException { return (RmChatMsgResponse)PARSER.parseFrom(data); } public static RmChatMsgResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException { return (RmChatMsgResponse)PARSER.parseFrom(data, extensionRegistry); } public static RmChatMsgResponse parseFrom(InputStream input) throws IOException { return (RmChatMsgResponse)PARSER.parseFrom(input); } public static RmChatMsgResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (RmChatMsgResponse)PARSER.parseFrom(input, extensionRegistry); } public static RmChatMsgResponse parseDelimitedFrom(InputStream input) throws IOException { return (RmChatMsgResponse)PARSER.parseDelimitedFrom(input); } public static RmChatMsgResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (RmChatMsgResponse)PARSER.parseDelimitedFrom(input, extensionRegistry); } public static RmChatMsgResponse parseFrom(CodedInputStream input) throws IOException { return (RmChatMsgResponse)PARSER.parseFrom(input); } public static RmChatMsgResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { return (RmChatMsgResponse)PARSER.parseFrom(input, extensionRegistry); } public static Builder newBuilder() { return Builder.create(); } public Builder newBuilderForType() { return newBuilder(); } public static Builder newBuilder(RmChatMsgResponse prototype) { return newBuilder().mergeFrom(prototype); } public Builder toBuilder() { return newBuilder(this); } protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) { Builder builder = new Builder(parent); return builder; } public static final class Builder extends GeneratedMessage.Builder<Builder> implements FriendHandler.RmChatMsgResponseOrBuilder {
/* 41150 */       private int bitField0_; private int s2CCode_; private Object s2CMsg_; public static final Descriptors.Descriptor getDescriptor() { return FriendHandler.internal_static_pomelo_area_RmChatMsgResponse_descriptor; } protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() { return FriendHandler.internal_static_pomelo_area_RmChatMsgResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FriendHandler.RmChatMsgResponse.class, Builder.class); } private Builder() { this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private Builder(GeneratedMessage.BuilderParent parent) { super(parent); this.s2CMsg_ = ""; maybeForceBuilderInitialization(); } private void maybeForceBuilderInitialization() { if (FriendHandler.RmChatMsgResponse.alwaysUseFieldBuilders); } private static Builder create() { return new Builder(); } public Builder clear() { super.clear(); this.s2CCode_ = 0; this.bitField0_ &= 0xFFFFFFFE; this.s2CMsg_ = ""; this.bitField0_ &= 0xFFFFFFFD; return this; } public Builder clone() { return create().mergeFrom(buildPartial()); } public Descriptors.Descriptor getDescriptorForType() { return FriendHandler.internal_static_pomelo_area_RmChatMsgResponse_descriptor; } public FriendHandler.RmChatMsgResponse getDefaultInstanceForType() { return FriendHandler.RmChatMsgResponse.getDefaultInstance(); } public FriendHandler.RmChatMsgResponse build() { FriendHandler.RmChatMsgResponse result = buildPartial(); if (!result.isInitialized()) throw newUninitializedMessageException(result);  return result; } public FriendHandler.RmChatMsgResponse buildPartial() { FriendHandler.RmChatMsgResponse result = new FriendHandler.RmChatMsgResponse(this); int from_bitField0_ = this.bitField0_; int to_bitField0_ = 0; if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;  result.s2CCode_ = this.s2CCode_; if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;  result.s2CMsg_ = this.s2CMsg_; result.bitField0_ = to_bitField0_; onBuilt(); return result; } public Builder mergeFrom(Message other) { if (other instanceof FriendHandler.RmChatMsgResponse) return mergeFrom((FriendHandler.RmChatMsgResponse)other);  super.mergeFrom(other); return this; } public Builder mergeFrom(FriendHandler.RmChatMsgResponse other) { if (other == FriendHandler.RmChatMsgResponse.getDefaultInstance()) return this;  if (other.hasS2CCode()) setS2CCode(other.getS2CCode());  if (other.hasS2CMsg()) { this.bitField0_ |= 0x2; this.s2CMsg_ = other.s2CMsg_; onChanged(); }  mergeUnknownFields(other.getUnknownFields()); return this; } public final boolean isInitialized() { if (!hasS2CCode()) return false;  return true; } public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException { FriendHandler.RmChatMsgResponse parsedMessage = null; try { parsedMessage = (FriendHandler.RmChatMsgResponse)FriendHandler.RmChatMsgResponse.PARSER.parsePartialFrom(input, extensionRegistry); } catch (InvalidProtocolBufferException e) { parsedMessage = (FriendHandler.RmChatMsgResponse)e.getUnfinishedMessage(); throw e; } finally { if (parsedMessage != null) mergeFrom(parsedMessage);  }  return this; } public boolean hasS2CCode() { return ((this.bitField0_ & 0x1) == 1); } public int getS2CCode() { return this.s2CCode_; } public Builder setS2CCode(int value) { this.bitField0_ |= 0x1; this.s2CCode_ = value; onChanged(); return this; } public Builder clearS2CCode() { this.bitField0_ &= 0xFFFFFFFE; this.s2CCode_ = 0; onChanged(); return this; } public boolean hasS2CMsg() { return ((this.bitField0_ & 0x2) == 2); } public String getS2CMsg() { Object ref = this.s2CMsg_; if (!(ref instanceof String)) { ByteString bs = (ByteString)ref; String s = bs.toStringUtf8(); if (bs.isValidUtf8()) this.s2CMsg_ = s;  return s; }  return (String)ref; } public ByteString getS2CMsgBytes() { Object ref = this.s2CMsg_; if (ref instanceof String) { ByteString b = ByteString.copyFromUtf8((String)ref); this.s2CMsg_ = b; return b; }  return (ByteString)ref; } public Builder setS2CMsg(String value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } public Builder clearS2CMsg() { this.bitField0_ &= 0xFFFFFFFD; this.s2CMsg_ = FriendHandler.RmChatMsgResponse.getDefaultInstance().getS2CMsg(); onChanged(); return this; } public Builder setS2CMsgBytes(ByteString value) { if (value == null) throw new NullPointerException();  this.bitField0_ |= 0x2; this.s2CMsg_ = value; onChanged(); return this; } } static { defaultInstance.initFields(); }
/*       */   
/*       */   }
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   
/*       */   public static Descriptors.FileDescriptor getDescriptor() {
/* 41469 */     return descriptor;
/*       */   }
/*       */ 
/*       */   
/*       */   static {
/* 41474 */     String[] descriptorData = { "\n\023friendHandler.proto\022\013pomelo.area\032\fcommon.proto\"N\n\bPosition\022\017\n\007targetX\030\001 \001(\005\022\017\n\007targetY\030\002 \001(\005\022\020\n\bareaName\030\003 \001(\t\022\016\n\006areaId\030\004 \001(\005\"Ð\003\n\nPlayerInfo\022\n\n\002id\030\001 \001(\t\022\013\n\003pro\030\002 \001(\005\022\017\n\007guildId\030\003 \001(\t\022\021\n\tguildName\030\004 \001(\t\022\f\n\004name\030\005 \001(\t\022\r\n\005level\030\006 \001(\005\022\022\n\nstageLevel\030\007 \001(\005\022\013\n\003vip\030\b \001(\005\022\020\n\bfriendLv\030\t \001(\005\022\023\n\013isConcerned\030\n \001(\005\022\020\n\bisOnline\030\013 \001(\005\022)\n\ncurrentPos\030\f \001(\0132\025.pomelo.area.Position\022\022\n\nfightPower\030\r \001(\005\022\017\n\007hasAlly\030\016 ", "\001(\005\022\f\n\004icon\030\017 \001(\005\022\024\n\fchouHenPoint\030\020 \001(\005\022\027\n\017createTimeStamp\030\021 \001(\t\022\022\n\ncreateTime\030\022 \001(\t\022\032\n\022addFriendShipPoint\030\023 \001(\005\022\f\n\004type\030\024 \001(\005\022\f\n\004time\030\025 \001(\t\022\024\n\fisHaveDaoYou\030\026 \001(\005\022\037\n\007avatars\030\027 \003(\0132\016.pomelo.Avatar\"]\n\007ChatMsg\022\024\n\fs2c_playerId\030\001 \001(\t\022\023\n\013s2c_content\030\002 \001(\t\022\020\n\bs2c_time\030\003 \001(\t\022\025\n\rs2c_acceptRid\030\004 \001(\t\"3\n\023FriendShopCondition\022\f\n\004type\030\001 \001(\005\022\016\n\006number\030\002 \001(\005\"2\n\023FriendShopMoneyInfo\022\f\n\004type\030\001 \002(\005\022\r\n\005value\030\002 \002(\005\"\034\n\032F", "riendGetAllFriendsRequest\",\n\022FriendApplyRequest\022\026\n\016c2s_toPlayerId\030\001 \002(\t\"0\n\025FriendAllApplyRequest\022\027\n\017c2s_toPlayerIds\030\001 \003(\t\"0\n\027FriendAgreeApplyRequest\022\025\n\rc2s_requestId\030\001 \002(\t\"4\n\032FriendAllAgreeApplyRequest\022\026\n\016c2s_requestIds\030\001 \003(\t\"1\n\030FriendRefuceApplyRequest\022\025\n\rc2s_requestId\030\001 \002(\t\"5\n\033FriendAllRefuceApplyRequest\022\026\n\016c2s_requestIds\030\001 \003(\t\"H\n\033FriendGetFriendAwardRequest\022\024\n\fc2s_friendId\030\001 \002(\t\022\023\n\013c2s_awardId\030", "\002 \002(\005\"+\n\023FriendDeleteRequest\022\024\n\fc2s_friendId\030\001 \002(\t\"D\n\031FriendAddFriendExpRequest\022\024\n\fc2s_friendId\030\001 \002(\t\022\021\n\tc2s_point\030\002 \002(\005\"3\n\032FriendDeleteChouRenRequest\022\025\n\rc2s_chouRenId\030\001 \002(\t\"7\n\035FriendAllDeleteChouRenRequest\022\026\n\016c2s_chouRenIds\030\001 \003(\t\"0\n\027FriendAddChouRenRequest\022\025\n\rc2s_chouRenId\030\001 \002(\t\"\026\n\024AddFriendInfoRequest\"-\n\026QueryPlayerNameRequest\022\023\n\013c2s_strName\030\001 \002(\t\",\n\024ConcernFriendRequest\022\024\n\fc2s_friendId\030\001 \002(\t\"0\n", "\027ConcernAllFriendRequest\022\025\n\rc2s_friendIds\030\001 \003(\t\"\032\n\030FriendMessageListRequest\"\037\n\035DeleteAllFriendMessageRequest\"1\n\026DeleteBlackListRequest\022\027\n\017c2s_blackListId\030\001 \002(\t\"\033\n\031DeleteAllBlackListRequest\".\n\023AddBlackListRequest\022\027\n\017c2s_blackListId\030\001 \002(\t\"\026\n\024GetSocialInfoRequest\"´\002\n\033FriendGetAllFriendsResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022(\n\007friends\030\003 \003(\0132\027.pomelo.area.PlayerInfo\022\022\n\nconcernNum\030\004 \001(\005\022\025\n\rallConc", "ernNum\030\005 \001(\005\022\025\n\rfriendsNumMax\030\006 \001(\005\022)\n\bchouRens\030\007 \003(\0132\027.pomelo.area.PlayerInfo\022\026\n\016chouRensNumMax\030\b \001(\005\022*\n\tblackList\030\t \003(\0132\027.pomelo.area.PlayerInfo\022\027\n\017blackListNumMax\030\n \001(\005\"8\n\023FriendApplyResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\";\n\026FriendAllApplyResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"=\n\030FriendAgreeApplyResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"@\n\033FriendAllAgreeApplyResponse\022\020\n\bs2c_code\030\001 \002", "(\005\022\017\n\007s2c_msg\030\002 \001(\t\">\n\031FriendRefuceApplyResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"A\n\034FriendAllRefuceApplyResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"A\n\034FriendGetFriendAwardResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"9\n\024FriendDeleteResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"|\n\032FriendAddFriendExpResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022\020\n\bfriendLv\030\003 \002(\005\022\021\n\tfriendExp\030\004 \002(\005\022\026\n\016validAwardsNum\030\005 \002", "(\005\"@\n\033FriendDeleteChouRenResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"C\n\036FriendAllDeleteChouRenResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"=\n\030FriendAddChouRenResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"a\n\025AddFriendInfoResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022%\n\004data\030\003 \003(\0132\027.pomelo.area.PlayerInfo\"c\n\027QueryPlayerNameResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022%\n\004data\030\003 \003(\0132\027.pomelo.area.PlayerInfo", "\":\n\025ConcernFriendResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"=\n\030ConcernAllFriendResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\" \001\n\031FriendMessageListResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\0223\n\022friendMessageInfos\030\003 \003(\0132\027.pomelo.area.PlayerInfo\022\025\n\rmessageNumMax\030\004 \002(\005\022\024\n\ffriendlyCode\030\005 \002(\t\"C\n\036DeleteAllFriendMessageResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"<\n\027DeleteBlackListResponse\022\020\n\bs2c_code\030\001 \002(\005", "\022\017\n\007s2c_msg\030\002 \001(\t\"?\n\032DeleteAllBlackListResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"9\n\024AddBlackListResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"\001\n\025GetSocialInfoResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022\025\n\raddPointToday\030\003 \002(\005\022\027\n\017friendShipPoint\030\004 \002(\005\022\030\n\020addPointTodayMax\030\005 \002(\005\"\030\n\026GetShopItemListRequest\"D\n\035ExchangeFriendShopItemRequest\022\022\n\nc2s_itemId\030\001 \002(\005\022\017\n\007c2s_num\030\003 \002(\005\"â\001\n\026FriendShopExchangeInfo\022", "\016\n\006itemId\030\001 \001(\005\022\020\n\bItemCode\030\002 \001(\t\0223\n\tcondition\030\003 \003(\0132 .pomelo.area.FriendShopCondition\0223\n\tneedMoney\030\004 \003(\0132 .pomelo.area.FriendShopMoneyInfo\022\025\n\rmeetCondition\030\005 \001(\005\022\026\n\016maxExchangeNum\030\006 \001(\005\022\r\n\005state\030\007 \001(\005\"s\n\027GetShopItemListResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\0225\n\bs2c_data\030\003 \003(\0132#.pomelo.area.FriendShopExchangeInfo\"C\n\036ExchangeFriendShopItemResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"\032\n\030GetRecent", "ChatListRequest\"g\n\031GetRecentChatListResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022'\n\006s2c_ls\030\003 \003(\0132\027.pomelo.area.PlayerInfo\")\n\021GetChatMsgRequest\022\024\n\fc2s_friendId\030\001 \002(\t\"`\n\022GetChatMsgResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022'\n\ts2c_msgLs\030\003 \003(\0132\024.pomelo.area.ChatMsg\"(\n\020RmChatMsgRequest\022\024\n\fc2s_friendId\030\001 \002(\t\"6\n\021RmChatMsgResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t2\025\n\rfriendHandler\022o\n\032friendGetAllFriends", "Request\022'.pomelo.area.FriendGetAllFriendsRequest\032(.pomelo.area.FriendGetAllFriendsResponse\022W\n\022friendApplyRequest\022\037.pomelo.area.FriendApplyRequest\032 .pomelo.area.FriendApplyResponse\022`\n\025friendAllApplyRequest\022\".pomelo.area.FriendAllApplyRequest\032#.pomelo.area.FriendAllApplyResponse\022f\n\027friendAgreeApplyRequest\022$.pomelo.area.FriendAgreeApplyRequest\032%.pomelo.area.FriendAgreeApplyResponse\022o\n\032friendAllAgreeA", "pplyRequest\022'.pomelo.area.FriendAllAgreeApplyRequest\032(.pomelo.area.FriendAllAgreeApplyResponse\022i\n\030friendRefuceApplyRequest\022%.pomelo.area.FriendRefuceApplyRequest\032&.pomelo.area.FriendRefuceApplyResponse\022r\n\033friendAllRefuceApplyRequest\022(.pomelo.area.FriendAllRefuceApplyRequest\032).pomelo.area.FriendAllRefuceApplyResponse\022Z\n\023friendDeleteRequest\022 .pomelo.area.FriendDeleteRequest\032!.pomelo.area.FriendDelet", "eResponse\022o\n\032friendDeleteChouRenRequest\022'.pomelo.area.FriendDeleteChouRenRequest\032(.pomelo.area.FriendDeleteChouRenResponse\022x\n\035friendAllDeleteChouRenRequest\022*.pomelo.area.FriendAllDeleteChouRenRequest\032+.pomelo.area.FriendAllDeleteChouRenResponse\022f\n\027friendAddChouRenRequest\022$.pomelo.area.FriendAddChouRenRequest\032%.pomelo.area.FriendAddChouRenResponse\022]\n\024addFriendInfoRequest\022!.pomelo.area.AddFriendInfo", "Request\032\".pomelo.area.AddFriendInfoResponse\022c\n\026queryPlayerNameRequest\022#.pomelo.area.QueryPlayerNameRequest\032$.pomelo.area.QueryPlayerNameResponse\022]\n\024concernFriendRequest\022!.pomelo.area.ConcernFriendRequest\032\".pomelo.area.ConcernFriendResponse\022f\n\027concernAllFriendRequest\022$.pomelo.area.ConcernAllFriendRequest\032%.pomelo.area.ConcernAllFriendResponse\022i\n\030friendMessageListRequest\022%.pomelo.area.FriendMessageL", "istRequest\032&.pomelo.area.FriendMessageListResponse\022x\n\035deleteAllFriendMessageRequest\022*.pomelo.area.DeleteAllFriendMessageRequest\032+.pomelo.area.DeleteAllFriendMessageResponse\022c\n\026deleteBlackListRequest\022#.pomelo.area.DeleteBlackListRequest\032$.pomelo.area.DeleteBlackListResponse\022l\n\031deleteAllBlackListRequest\022&.pomelo.area.DeleteAllBlackListRequest\032'.pomelo.area.DeleteAllBlackListResponse\022Z\n\023addBlackListR", "equest\022 .pomelo.area.AddBlackListRequest\032!.pomelo.area.AddBlackListResponse\022]\n\024getSocialInfoRequest\022!.pomelo.area.GetSocialInfoRequest\032\".pomelo.area.GetSocialInfoResponse\022c\n\026getShopItemListRequest\022#.pomelo.area.GetShopItemListRequest\032$.pomelo.area.GetShopItemListResponse\022x\n\035exchangeFriendShopItemRequest\022*.pomelo.area.ExchangeFriendShopItemRequest\032+.pomelo.area.ExchangeFriendShopItemResponse\022i\n\030get", "RecentChatListRequest\022%.pomelo.area.GetRecentChatListRequest\032&.pomelo.area.GetRecentChatListResponse\022T\n\021getChatMsgRequest\022\036.pomelo.area.GetChatMsgRequest\032\037.pomelo.area.GetChatMsgResponse\022Q\n\020rmChatMsgRequest\022\035.pomelo.area.RmChatMsgRequest\032\036.pomelo.area.RmChatMsgResponse" };
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */     
/* 41663 */     Descriptors.FileDescriptor.InternalDescriptorAssigner assigner = new Descriptors.FileDescriptor.InternalDescriptorAssigner()
/*       */       {
/*       */         public ExtensionRegistry assignDescriptors(Descriptors.FileDescriptor root)
/*       */         {
/* 41667 */           FriendHandler.descriptor = root;
/* 41668 */           return null;
/*       */         }
/*       */       };
/*       */     
/* 41672 */     Descriptors.FileDescriptor.internalBuildGeneratedFileFrom(descriptorData, new Descriptors.FileDescriptor[] {
/*       */           
/* 41674 */           Common.getDescriptor() }, assigner);
/*       */   }
/*       */   
/* 41677 */   private static final Descriptors.Descriptor internal_static_pomelo_area_Position_descriptor = getDescriptor().getMessageTypes().get(0);
/* 41678 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_Position_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_Position_descriptor, new String[] { "TargetX", "TargetY", "AreaName", "AreaId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41683 */   private static final Descriptors.Descriptor internal_static_pomelo_area_PlayerInfo_descriptor = getDescriptor().getMessageTypes().get(1);
/* 41684 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_PlayerInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_PlayerInfo_descriptor, new String[] { "Id", "Pro", "GuildId", "GuildName", "Name", "Level", "StageLevel", "Vip", "FriendLv", "IsConcerned", "IsOnline", "CurrentPos", "FightPower", "HasAlly", "Icon", "ChouHenPoint", "CreateTimeStamp", "CreateTime", "AddFriendShipPoint", "Type", "Time", "IsHaveDaoYou", "Avatars" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41689 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ChatMsg_descriptor = getDescriptor().getMessageTypes().get(2);
/* 41690 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ChatMsg_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ChatMsg_descriptor, new String[] { "S2CPlayerId", "S2CContent", "S2CTime", "S2CAcceptRid" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41695 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendShopCondition_descriptor = getDescriptor().getMessageTypes().get(3);
/* 41696 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendShopCondition_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendShopCondition_descriptor, new String[] { "Type", "Number" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41701 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendShopMoneyInfo_descriptor = getDescriptor().getMessageTypes().get(4);
/* 41702 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendShopMoneyInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendShopMoneyInfo_descriptor, new String[] { "Type", "Value" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41707 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendGetAllFriendsRequest_descriptor = getDescriptor().getMessageTypes().get(5);
/* 41708 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendGetAllFriendsRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendGetAllFriendsRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41713 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendApplyRequest_descriptor = getDescriptor().getMessageTypes().get(6);
/* 41714 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendApplyRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendApplyRequest_descriptor, new String[] { "C2SToPlayerId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41719 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendAllApplyRequest_descriptor = getDescriptor().getMessageTypes().get(7);
/* 41720 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendAllApplyRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendAllApplyRequest_descriptor, new String[] { "C2SToPlayerIds" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41725 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendAgreeApplyRequest_descriptor = getDescriptor().getMessageTypes().get(8);
/* 41726 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendAgreeApplyRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendAgreeApplyRequest_descriptor, new String[] { "C2SRequestId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41731 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendAllAgreeApplyRequest_descriptor = getDescriptor().getMessageTypes().get(9);
/* 41732 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendAllAgreeApplyRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendAllAgreeApplyRequest_descriptor, new String[] { "C2SRequestIds" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41737 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendRefuceApplyRequest_descriptor = getDescriptor().getMessageTypes().get(10);
/* 41738 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendRefuceApplyRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendRefuceApplyRequest_descriptor, new String[] { "C2SRequestId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41743 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendAllRefuceApplyRequest_descriptor = getDescriptor().getMessageTypes().get(11);
/* 41744 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendAllRefuceApplyRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendAllRefuceApplyRequest_descriptor, new String[] { "C2SRequestIds" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41749 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendGetFriendAwardRequest_descriptor = getDescriptor().getMessageTypes().get(12);
/* 41750 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendGetFriendAwardRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendGetFriendAwardRequest_descriptor, new String[] { "C2SFriendId", "C2SAwardId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41755 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendDeleteRequest_descriptor = getDescriptor().getMessageTypes().get(13);
/* 41756 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendDeleteRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendDeleteRequest_descriptor, new String[] { "C2SFriendId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41761 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendAddFriendExpRequest_descriptor = getDescriptor().getMessageTypes().get(14);
/* 41762 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendAddFriendExpRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendAddFriendExpRequest_descriptor, new String[] { "C2SFriendId", "C2SPoint" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41767 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendDeleteChouRenRequest_descriptor = getDescriptor().getMessageTypes().get(15);
/* 41768 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendDeleteChouRenRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendDeleteChouRenRequest_descriptor, new String[] { "C2SChouRenId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41773 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendAllDeleteChouRenRequest_descriptor = getDescriptor().getMessageTypes().get(16);
/* 41774 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendAllDeleteChouRenRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendAllDeleteChouRenRequest_descriptor, new String[] { "C2SChouRenIds" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41779 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendAddChouRenRequest_descriptor = getDescriptor().getMessageTypes().get(17);
/* 41780 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendAddChouRenRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendAddChouRenRequest_descriptor, new String[] { "C2SChouRenId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41785 */   private static final Descriptors.Descriptor internal_static_pomelo_area_AddFriendInfoRequest_descriptor = getDescriptor().getMessageTypes().get(18);
/* 41786 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_AddFriendInfoRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_AddFriendInfoRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41791 */   private static final Descriptors.Descriptor internal_static_pomelo_area_QueryPlayerNameRequest_descriptor = getDescriptor().getMessageTypes().get(19);
/* 41792 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_QueryPlayerNameRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_QueryPlayerNameRequest_descriptor, new String[] { "C2SStrName" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41797 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ConcernFriendRequest_descriptor = getDescriptor().getMessageTypes().get(20);
/* 41798 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ConcernFriendRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ConcernFriendRequest_descriptor, new String[] { "C2SFriendId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41803 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ConcernAllFriendRequest_descriptor = getDescriptor().getMessageTypes().get(21);
/* 41804 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ConcernAllFriendRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ConcernAllFriendRequest_descriptor, new String[] { "C2SFriendIds" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41809 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendMessageListRequest_descriptor = getDescriptor().getMessageTypes().get(22);
/* 41810 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendMessageListRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendMessageListRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41815 */   private static final Descriptors.Descriptor internal_static_pomelo_area_DeleteAllFriendMessageRequest_descriptor = getDescriptor().getMessageTypes().get(23);
/* 41816 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DeleteAllFriendMessageRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DeleteAllFriendMessageRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41821 */   private static final Descriptors.Descriptor internal_static_pomelo_area_DeleteBlackListRequest_descriptor = getDescriptor().getMessageTypes().get(24);
/* 41822 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DeleteBlackListRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DeleteBlackListRequest_descriptor, new String[] { "C2SBlackListId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41827 */   private static final Descriptors.Descriptor internal_static_pomelo_area_DeleteAllBlackListRequest_descriptor = getDescriptor().getMessageTypes().get(25);
/* 41828 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DeleteAllBlackListRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DeleteAllBlackListRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41833 */   private static final Descriptors.Descriptor internal_static_pomelo_area_AddBlackListRequest_descriptor = getDescriptor().getMessageTypes().get(26);
/* 41834 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_AddBlackListRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_AddBlackListRequest_descriptor, new String[] { "C2SBlackListId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41839 */   private static final Descriptors.Descriptor internal_static_pomelo_area_GetSocialInfoRequest_descriptor = getDescriptor().getMessageTypes().get(27);
/* 41840 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetSocialInfoRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetSocialInfoRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41845 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendGetAllFriendsResponse_descriptor = getDescriptor().getMessageTypes().get(28);
/* 41846 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendGetAllFriendsResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendGetAllFriendsResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "Friends", "ConcernNum", "AllConcernNum", "FriendsNumMax", "ChouRens", "ChouRensNumMax", "BlackList", "BlackListNumMax" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41851 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendApplyResponse_descriptor = getDescriptor().getMessageTypes().get(29);
/* 41852 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendApplyResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendApplyResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41857 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendAllApplyResponse_descriptor = getDescriptor().getMessageTypes().get(30);
/* 41858 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendAllApplyResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendAllApplyResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41863 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendAgreeApplyResponse_descriptor = getDescriptor().getMessageTypes().get(31);
/* 41864 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendAgreeApplyResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendAgreeApplyResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41869 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendAllAgreeApplyResponse_descriptor = getDescriptor().getMessageTypes().get(32);
/* 41870 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendAllAgreeApplyResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendAllAgreeApplyResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41875 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendRefuceApplyResponse_descriptor = getDescriptor().getMessageTypes().get(33);
/* 41876 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendRefuceApplyResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendRefuceApplyResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41881 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendAllRefuceApplyResponse_descriptor = getDescriptor().getMessageTypes().get(34);
/* 41882 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendAllRefuceApplyResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendAllRefuceApplyResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41887 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendGetFriendAwardResponse_descriptor = getDescriptor().getMessageTypes().get(35);
/* 41888 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendGetFriendAwardResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendGetFriendAwardResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41893 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendDeleteResponse_descriptor = getDescriptor().getMessageTypes().get(36);
/* 41894 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendDeleteResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendDeleteResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41899 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendAddFriendExpResponse_descriptor = getDescriptor().getMessageTypes().get(37);
/* 41900 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendAddFriendExpResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendAddFriendExpResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "FriendLv", "FriendExp", "ValidAwardsNum" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41905 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendDeleteChouRenResponse_descriptor = getDescriptor().getMessageTypes().get(38);
/* 41906 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendDeleteChouRenResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendDeleteChouRenResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41911 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendAllDeleteChouRenResponse_descriptor = getDescriptor().getMessageTypes().get(39);
/* 41912 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendAllDeleteChouRenResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendAllDeleteChouRenResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41917 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendAddChouRenResponse_descriptor = getDescriptor().getMessageTypes().get(40);
/* 41918 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendAddChouRenResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendAddChouRenResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41923 */   private static final Descriptors.Descriptor internal_static_pomelo_area_AddFriendInfoResponse_descriptor = getDescriptor().getMessageTypes().get(41);
/* 41924 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_AddFriendInfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_AddFriendInfoResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "Data" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41929 */   private static final Descriptors.Descriptor internal_static_pomelo_area_QueryPlayerNameResponse_descriptor = getDescriptor().getMessageTypes().get(42);
/* 41930 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_QueryPlayerNameResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_QueryPlayerNameResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "Data" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41935 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ConcernFriendResponse_descriptor = getDescriptor().getMessageTypes().get(43);
/* 41936 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ConcernFriendResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ConcernFriendResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41941 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ConcernAllFriendResponse_descriptor = getDescriptor().getMessageTypes().get(44);
/* 41942 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ConcernAllFriendResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ConcernAllFriendResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41947 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendMessageListResponse_descriptor = getDescriptor().getMessageTypes().get(45);
/* 41948 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendMessageListResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendMessageListResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "FriendMessageInfos", "MessageNumMax", "FriendlyCode" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41953 */   private static final Descriptors.Descriptor internal_static_pomelo_area_DeleteAllFriendMessageResponse_descriptor = getDescriptor().getMessageTypes().get(46);
/* 41954 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DeleteAllFriendMessageResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DeleteAllFriendMessageResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41959 */   private static final Descriptors.Descriptor internal_static_pomelo_area_DeleteBlackListResponse_descriptor = getDescriptor().getMessageTypes().get(47);
/* 41960 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DeleteBlackListResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DeleteBlackListResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41965 */   private static final Descriptors.Descriptor internal_static_pomelo_area_DeleteAllBlackListResponse_descriptor = getDescriptor().getMessageTypes().get(48);
/* 41966 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DeleteAllBlackListResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DeleteAllBlackListResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41971 */   private static final Descriptors.Descriptor internal_static_pomelo_area_AddBlackListResponse_descriptor = getDescriptor().getMessageTypes().get(49);
/* 41972 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_AddBlackListResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_AddBlackListResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41977 */   private static final Descriptors.Descriptor internal_static_pomelo_area_GetSocialInfoResponse_descriptor = getDescriptor().getMessageTypes().get(50);
/* 41978 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetSocialInfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetSocialInfoResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "AddPointToday", "FriendShipPoint", "AddPointTodayMax" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41983 */   private static final Descriptors.Descriptor internal_static_pomelo_area_GetShopItemListRequest_descriptor = getDescriptor().getMessageTypes().get(51);
/* 41984 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetShopItemListRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetShopItemListRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41989 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ExchangeFriendShopItemRequest_descriptor = getDescriptor().getMessageTypes().get(52);
/* 41990 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ExchangeFriendShopItemRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ExchangeFriendShopItemRequest_descriptor, new String[] { "C2SItemId", "C2SNum" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 41995 */   private static final Descriptors.Descriptor internal_static_pomelo_area_FriendShopExchangeInfo_descriptor = getDescriptor().getMessageTypes().get(53);
/* 41996 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FriendShopExchangeInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FriendShopExchangeInfo_descriptor, new String[] { "ItemId", "ItemCode", "Condition", "NeedMoney", "MeetCondition", "MaxExchangeNum", "State" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 42001 */   private static final Descriptors.Descriptor internal_static_pomelo_area_GetShopItemListResponse_descriptor = getDescriptor().getMessageTypes().get(54);
/* 42002 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetShopItemListResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetShopItemListResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CData" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 42007 */   private static final Descriptors.Descriptor internal_static_pomelo_area_ExchangeFriendShopItemResponse_descriptor = getDescriptor().getMessageTypes().get(55);
/* 42008 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ExchangeFriendShopItemResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ExchangeFriendShopItemResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 42013 */   private static final Descriptors.Descriptor internal_static_pomelo_area_GetRecentChatListRequest_descriptor = getDescriptor().getMessageTypes().get(56);
/* 42014 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetRecentChatListRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetRecentChatListRequest_descriptor, new String[0]);
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 42019 */   private static final Descriptors.Descriptor internal_static_pomelo_area_GetRecentChatListResponse_descriptor = getDescriptor().getMessageTypes().get(57);
/* 42020 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetRecentChatListResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetRecentChatListResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CLs" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 42025 */   private static final Descriptors.Descriptor internal_static_pomelo_area_GetChatMsgRequest_descriptor = getDescriptor().getMessageTypes().get(58);
/* 42026 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetChatMsgRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetChatMsgRequest_descriptor, new String[] { "C2SFriendId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 42031 */   private static final Descriptors.Descriptor internal_static_pomelo_area_GetChatMsgResponse_descriptor = getDescriptor().getMessageTypes().get(59);
/* 42032 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetChatMsgResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetChatMsgResponse_descriptor, new String[] { "S2CCode", "S2CMsg", "S2CMsgLs" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 42037 */   private static final Descriptors.Descriptor internal_static_pomelo_area_RmChatMsgRequest_descriptor = getDescriptor().getMessageTypes().get(60);
/* 42038 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_RmChatMsgRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_RmChatMsgRequest_descriptor, new String[] { "C2SFriendId" });
/*       */ 
/*       */ 
/*       */ 
/*       */   
/* 42043 */   private static final Descriptors.Descriptor internal_static_pomelo_area_RmChatMsgResponse_descriptor = getDescriptor().getMessageTypes().get(61);
/* 42044 */   private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_RmChatMsgResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_RmChatMsgResponse_descriptor, new String[] { "S2CCode", "S2CMsg" });
/*       */   private static Descriptors.FileDescriptor descriptor;
/*       */   
/*       */   static {
/* 42048 */     Common.getDescriptor();
/*       */   }
/*       */   
/*       */   public static interface RmChatMsgResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface RmChatMsgRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SFriendId();
/*       */     
/*       */     String getC2SFriendId();
/*       */     
/*       */     ByteString getC2SFriendIdBytes();
/*       */   }
/*       */   
/*       */   public static interface GetChatMsgResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     List<FriendHandler.ChatMsg> getS2CMsgLsList();
/*       */     
/*       */     FriendHandler.ChatMsg getS2CMsgLs(int param1Int);
/*       */     
/*       */     int getS2CMsgLsCount();
/*       */     
/*       */     List<? extends FriendHandler.ChatMsgOrBuilder> getS2CMsgLsOrBuilderList();
/*       */     
/*       */     FriendHandler.ChatMsgOrBuilder getS2CMsgLsOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface GetChatMsgRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SFriendId();
/*       */     
/*       */     String getC2SFriendId();
/*       */     
/*       */     ByteString getC2SFriendIdBytes();
/*       */   }
/*       */   
/*       */   public static interface GetRecentChatListResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     List<FriendHandler.PlayerInfo> getS2CLsList();
/*       */     
/*       */     FriendHandler.PlayerInfo getS2CLs(int param1Int);
/*       */     
/*       */     int getS2CLsCount();
/*       */     
/*       */     List<? extends FriendHandler.PlayerInfoOrBuilder> getS2CLsOrBuilderList();
/*       */     
/*       */     FriendHandler.PlayerInfoOrBuilder getS2CLsOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface GetRecentChatListRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface ExchangeFriendShopItemResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface GetShopItemListResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     List<FriendHandler.FriendShopExchangeInfo> getS2CDataList();
/*       */     
/*       */     FriendHandler.FriendShopExchangeInfo getS2CData(int param1Int);
/*       */     
/*       */     int getS2CDataCount();
/*       */     
/*       */     List<? extends FriendHandler.FriendShopExchangeInfoOrBuilder> getS2CDataOrBuilderList();
/*       */     
/*       */     FriendHandler.FriendShopExchangeInfoOrBuilder getS2CDataOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface FriendShopExchangeInfoOrBuilder extends MessageOrBuilder {
/*       */     boolean hasItemId();
/*       */     
/*       */     int getItemId();
/*       */     
/*       */     boolean hasItemCode();
/*       */     
/*       */     String getItemCode();
/*       */     
/*       */     ByteString getItemCodeBytes();
/*       */     
/*       */     List<FriendHandler.FriendShopCondition> getConditionList();
/*       */     
/*       */     FriendHandler.FriendShopCondition getCondition(int param1Int);
/*       */     
/*       */     int getConditionCount();
/*       */     
/*       */     List<? extends FriendHandler.FriendShopConditionOrBuilder> getConditionOrBuilderList();
/*       */     
/*       */     FriendHandler.FriendShopConditionOrBuilder getConditionOrBuilder(int param1Int);
/*       */     
/*       */     List<FriendHandler.FriendShopMoneyInfo> getNeedMoneyList();
/*       */     
/*       */     FriendHandler.FriendShopMoneyInfo getNeedMoney(int param1Int);
/*       */     
/*       */     int getNeedMoneyCount();
/*       */     
/*       */     List<? extends FriendHandler.FriendShopMoneyInfoOrBuilder> getNeedMoneyOrBuilderList();
/*       */     
/*       */     FriendHandler.FriendShopMoneyInfoOrBuilder getNeedMoneyOrBuilder(int param1Int);
/*       */     
/*       */     boolean hasMeetCondition();
/*       */     
/*       */     int getMeetCondition();
/*       */     
/*       */     boolean hasMaxExchangeNum();
/*       */     
/*       */     int getMaxExchangeNum();
/*       */     
/*       */     boolean hasState();
/*       */     
/*       */     int getState();
/*       */   }
/*       */   
/*       */   public static interface ExchangeFriendShopItemRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SItemId();
/*       */     
/*       */     int getC2SItemId();
/*       */     
/*       */     boolean hasC2SNum();
/*       */     
/*       */     int getC2SNum();
/*       */   }
/*       */   
/*       */   public static interface GetShopItemListRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface GetSocialInfoResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     boolean hasAddPointToday();
/*       */     
/*       */     int getAddPointToday();
/*       */     
/*       */     boolean hasFriendShipPoint();
/*       */     
/*       */     int getFriendShipPoint();
/*       */     
/*       */     boolean hasAddPointTodayMax();
/*       */     
/*       */     int getAddPointTodayMax();
/*       */   }
/*       */   
/*       */   public static interface AddBlackListResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface DeleteAllBlackListResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface DeleteBlackListResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface DeleteAllFriendMessageResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface FriendMessageListResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     List<FriendHandler.PlayerInfo> getFriendMessageInfosList();
/*       */     
/*       */     FriendHandler.PlayerInfo getFriendMessageInfos(int param1Int);
/*       */     
/*       */     int getFriendMessageInfosCount();
/*       */     
/*       */     List<? extends FriendHandler.PlayerInfoOrBuilder> getFriendMessageInfosOrBuilderList();
/*       */     
/*       */     FriendHandler.PlayerInfoOrBuilder getFriendMessageInfosOrBuilder(int param1Int);
/*       */     
/*       */     boolean hasMessageNumMax();
/*       */     
/*       */     int getMessageNumMax();
/*       */     
/*       */     boolean hasFriendlyCode();
/*       */     
/*       */     String getFriendlyCode();
/*       */     
/*       */     ByteString getFriendlyCodeBytes();
/*       */   }
/*       */   
/*       */   public static interface ConcernAllFriendResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface ConcernFriendResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface QueryPlayerNameResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     List<FriendHandler.PlayerInfo> getDataList();
/*       */     
/*       */     FriendHandler.PlayerInfo getData(int param1Int);
/*       */     
/*       */     int getDataCount();
/*       */     
/*       */     List<? extends FriendHandler.PlayerInfoOrBuilder> getDataOrBuilderList();
/*       */     
/*       */     FriendHandler.PlayerInfoOrBuilder getDataOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface AddFriendInfoResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     List<FriendHandler.PlayerInfo> getDataList();
/*       */     
/*       */     FriendHandler.PlayerInfo getData(int param1Int);
/*       */     
/*       */     int getDataCount();
/*       */     
/*       */     List<? extends FriendHandler.PlayerInfoOrBuilder> getDataOrBuilderList();
/*       */     
/*       */     FriendHandler.PlayerInfoOrBuilder getDataOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface FriendAddChouRenResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface FriendAllDeleteChouRenResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface FriendDeleteChouRenResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface FriendAddFriendExpResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     boolean hasFriendLv();
/*       */     
/*       */     int getFriendLv();
/*       */     
/*       */     boolean hasFriendExp();
/*       */     
/*       */     int getFriendExp();
/*       */     
/*       */     boolean hasValidAwardsNum();
/*       */     
/*       */     int getValidAwardsNum();
/*       */   }
/*       */   
/*       */   public static interface FriendDeleteResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface FriendGetFriendAwardResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface FriendAllRefuceApplyResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface FriendRefuceApplyResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface FriendAllAgreeApplyResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface FriendAgreeApplyResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface FriendAllApplyResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface FriendApplyResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */   }
/*       */   
/*       */   public static interface FriendGetAllFriendsResponseOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CCode();
/*       */     
/*       */     int getS2CCode();
/*       */     
/*       */     boolean hasS2CMsg();
/*       */     
/*       */     String getS2CMsg();
/*       */     
/*       */     ByteString getS2CMsgBytes();
/*       */     
/*       */     List<FriendHandler.PlayerInfo> getFriendsList();
/*       */     
/*       */     FriendHandler.PlayerInfo getFriends(int param1Int);
/*       */     
/*       */     int getFriendsCount();
/*       */     
/*       */     List<? extends FriendHandler.PlayerInfoOrBuilder> getFriendsOrBuilderList();
/*       */     
/*       */     FriendHandler.PlayerInfoOrBuilder getFriendsOrBuilder(int param1Int);
/*       */     
/*       */     boolean hasConcernNum();
/*       */     
/*       */     int getConcernNum();
/*       */     
/*       */     boolean hasAllConcernNum();
/*       */     
/*       */     int getAllConcernNum();
/*       */     
/*       */     boolean hasFriendsNumMax();
/*       */     
/*       */     int getFriendsNumMax();
/*       */     
/*       */     List<FriendHandler.PlayerInfo> getChouRensList();
/*       */     
/*       */     FriendHandler.PlayerInfo getChouRens(int param1Int);
/*       */     
/*       */     int getChouRensCount();
/*       */     
/*       */     List<? extends FriendHandler.PlayerInfoOrBuilder> getChouRensOrBuilderList();
/*       */     
/*       */     FriendHandler.PlayerInfoOrBuilder getChouRensOrBuilder(int param1Int);
/*       */     
/*       */     boolean hasChouRensNumMax();
/*       */     
/*       */     int getChouRensNumMax();
/*       */     
/*       */     List<FriendHandler.PlayerInfo> getBlackListList();
/*       */     
/*       */     FriendHandler.PlayerInfo getBlackList(int param1Int);
/*       */     
/*       */     int getBlackListCount();
/*       */     
/*       */     List<? extends FriendHandler.PlayerInfoOrBuilder> getBlackListOrBuilderList();
/*       */     
/*       */     FriendHandler.PlayerInfoOrBuilder getBlackListOrBuilder(int param1Int);
/*       */     
/*       */     boolean hasBlackListNumMax();
/*       */     
/*       */     int getBlackListNumMax();
/*       */   }
/*       */   
/*       */   public static interface GetSocialInfoRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface AddBlackListRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SBlackListId();
/*       */     
/*       */     String getC2SBlackListId();
/*       */     
/*       */     ByteString getC2SBlackListIdBytes();
/*       */   }
/*       */   
/*       */   public static interface DeleteAllBlackListRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface DeleteBlackListRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SBlackListId();
/*       */     
/*       */     String getC2SBlackListId();
/*       */     
/*       */     ByteString getC2SBlackListIdBytes();
/*       */   }
/*       */   
/*       */   public static interface DeleteAllFriendMessageRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface FriendMessageListRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface ConcernAllFriendRequestOrBuilder extends MessageOrBuilder {
/*       */     ProtocolStringList getC2SFriendIdsList();
/*       */     
/*       */     int getC2SFriendIdsCount();
/*       */     
/*       */     String getC2SFriendIds(int param1Int);
/*       */     
/*       */     ByteString getC2SFriendIdsBytes(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface ConcernFriendRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SFriendId();
/*       */     
/*       */     String getC2SFriendId();
/*       */     
/*       */     ByteString getC2SFriendIdBytes();
/*       */   }
/*       */   
/*       */   public static interface QueryPlayerNameRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SStrName();
/*       */     
/*       */     String getC2SStrName();
/*       */     
/*       */     ByteString getC2SStrNameBytes();
/*       */   }
/*       */   
/*       */   public static interface AddFriendInfoRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface FriendAddChouRenRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SChouRenId();
/*       */     
/*       */     String getC2SChouRenId();
/*       */     
/*       */     ByteString getC2SChouRenIdBytes();
/*       */   }
/*       */   
/*       */   public static interface FriendAllDeleteChouRenRequestOrBuilder extends MessageOrBuilder {
/*       */     ProtocolStringList getC2SChouRenIdsList();
/*       */     
/*       */     int getC2SChouRenIdsCount();
/*       */     
/*       */     String getC2SChouRenIds(int param1Int);
/*       */     
/*       */     ByteString getC2SChouRenIdsBytes(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface FriendDeleteChouRenRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SChouRenId();
/*       */     
/*       */     String getC2SChouRenId();
/*       */     
/*       */     ByteString getC2SChouRenIdBytes();
/*       */   }
/*       */   
/*       */   public static interface FriendAddFriendExpRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SFriendId();
/*       */     
/*       */     String getC2SFriendId();
/*       */     
/*       */     ByteString getC2SFriendIdBytes();
/*       */     
/*       */     boolean hasC2SPoint();
/*       */     
/*       */     int getC2SPoint();
/*       */   }
/*       */   
/*       */   public static interface FriendDeleteRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SFriendId();
/*       */     
/*       */     String getC2SFriendId();
/*       */     
/*       */     ByteString getC2SFriendIdBytes();
/*       */   }
/*       */   
/*       */   public static interface FriendGetFriendAwardRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SFriendId();
/*       */     
/*       */     String getC2SFriendId();
/*       */     
/*       */     ByteString getC2SFriendIdBytes();
/*       */     
/*       */     boolean hasC2SAwardId();
/*       */     
/*       */     int getC2SAwardId();
/*       */   }
/*       */   
/*       */   public static interface FriendAllRefuceApplyRequestOrBuilder extends MessageOrBuilder {
/*       */     ProtocolStringList getC2SRequestIdsList();
/*       */     
/*       */     int getC2SRequestIdsCount();
/*       */     
/*       */     String getC2SRequestIds(int param1Int);
/*       */     
/*       */     ByteString getC2SRequestIdsBytes(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface FriendRefuceApplyRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SRequestId();
/*       */     
/*       */     String getC2SRequestId();
/*       */     
/*       */     ByteString getC2SRequestIdBytes();
/*       */   }
/*       */   
/*       */   public static interface FriendAllAgreeApplyRequestOrBuilder extends MessageOrBuilder {
/*       */     ProtocolStringList getC2SRequestIdsList();
/*       */     
/*       */     int getC2SRequestIdsCount();
/*       */     
/*       */     String getC2SRequestIds(int param1Int);
/*       */     
/*       */     ByteString getC2SRequestIdsBytes(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface FriendAgreeApplyRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SRequestId();
/*       */     
/*       */     String getC2SRequestId();
/*       */     
/*       */     ByteString getC2SRequestIdBytes();
/*       */   }
/*       */   
/*       */   public static interface FriendAllApplyRequestOrBuilder extends MessageOrBuilder {
/*       */     ProtocolStringList getC2SToPlayerIdsList();
/*       */     
/*       */     int getC2SToPlayerIdsCount();
/*       */     
/*       */     String getC2SToPlayerIds(int param1Int);
/*       */     
/*       */     ByteString getC2SToPlayerIdsBytes(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface FriendApplyRequestOrBuilder extends MessageOrBuilder {
/*       */     boolean hasC2SToPlayerId();
/*       */     
/*       */     String getC2SToPlayerId();
/*       */     
/*       */     ByteString getC2SToPlayerIdBytes();
/*       */   }
/*       */   
/*       */   public static interface FriendGetAllFriendsRequestOrBuilder extends MessageOrBuilder {}
/*       */   
/*       */   public static interface FriendShopMoneyInfoOrBuilder extends MessageOrBuilder {
/*       */     boolean hasType();
/*       */     
/*       */     int getType();
/*       */     
/*       */     boolean hasValue();
/*       */     
/*       */     int getValue();
/*       */   }
/*       */   
/*       */   public static interface FriendShopConditionOrBuilder extends MessageOrBuilder {
/*       */     boolean hasType();
/*       */     
/*       */     int getType();
/*       */     
/*       */     boolean hasNumber();
/*       */     
/*       */     int getNumber();
/*       */   }
/*       */   
/*       */   public static interface ChatMsgOrBuilder extends MessageOrBuilder {
/*       */     boolean hasS2CPlayerId();
/*       */     
/*       */     String getS2CPlayerId();
/*       */     
/*       */     ByteString getS2CPlayerIdBytes();
/*       */     
/*       */     boolean hasS2CContent();
/*       */     
/*       */     String getS2CContent();
/*       */     
/*       */     ByteString getS2CContentBytes();
/*       */     
/*       */     boolean hasS2CTime();
/*       */     
/*       */     String getS2CTime();
/*       */     
/*       */     ByteString getS2CTimeBytes();
/*       */     
/*       */     boolean hasS2CAcceptRid();
/*       */     
/*       */     String getS2CAcceptRid();
/*       */     
/*       */     ByteString getS2CAcceptRidBytes();
/*       */   }
/*       */   
/*       */   public static interface PlayerInfoOrBuilder extends MessageOrBuilder {
/*       */     boolean hasId();
/*       */     
/*       */     String getId();
/*       */     
/*       */     ByteString getIdBytes();
/*       */     
/*       */     boolean hasPro();
/*       */     
/*       */     int getPro();
/*       */     
/*       */     boolean hasGuildId();
/*       */     
/*       */     String getGuildId();
/*       */     
/*       */     ByteString getGuildIdBytes();
/*       */     
/*       */     boolean hasGuildName();
/*       */     
/*       */     String getGuildName();
/*       */     
/*       */     ByteString getGuildNameBytes();
/*       */     
/*       */     boolean hasName();
/*       */     
/*       */     String getName();
/*       */     
/*       */     ByteString getNameBytes();
/*       */     
/*       */     boolean hasLevel();
/*       */     
/*       */     int getLevel();
/*       */     
/*       */     boolean hasStageLevel();
/*       */     
/*       */     int getStageLevel();
/*       */     
/*       */     boolean hasVip();
/*       */     
/*       */     int getVip();
/*       */     
/*       */     boolean hasFriendLv();
/*       */     
/*       */     int getFriendLv();
/*       */     
/*       */     boolean hasIsConcerned();
/*       */     
/*       */     int getIsConcerned();
/*       */     
/*       */     boolean hasIsOnline();
/*       */     
/*       */     int getIsOnline();
/*       */     
/*       */     boolean hasCurrentPos();
/*       */     
/*       */     FriendHandler.Position getCurrentPos();
/*       */     
/*       */     FriendHandler.PositionOrBuilder getCurrentPosOrBuilder();
/*       */     
/*       */     boolean hasFightPower();
/*       */     
/*       */     int getFightPower();
/*       */     
/*       */     boolean hasHasAlly();
/*       */     
/*       */     int getHasAlly();
/*       */     
/*       */     boolean hasIcon();
/*       */     
/*       */     int getIcon();
/*       */     
/*       */     boolean hasChouHenPoint();
/*       */     
/*       */     int getChouHenPoint();
/*       */     
/*       */     boolean hasCreateTimeStamp();
/*       */     
/*       */     String getCreateTimeStamp();
/*       */     
/*       */     ByteString getCreateTimeStampBytes();
/*       */     
/*       */     boolean hasCreateTime();
/*       */     
/*       */     String getCreateTime();
/*       */     
/*       */     ByteString getCreateTimeBytes();
/*       */     
/*       */     boolean hasAddFriendShipPoint();
/*       */     
/*       */     int getAddFriendShipPoint();
/*       */     
/*       */     boolean hasType();
/*       */     
/*       */     int getType();
/*       */     
/*       */     boolean hasTime();
/*       */     
/*       */     String getTime();
/*       */     
/*       */     ByteString getTimeBytes();
/*       */     
/*       */     boolean hasIsHaveDaoYou();
/*       */     
/*       */     int getIsHaveDaoYou();
/*       */     
/*       */     List<Common.Avatar> getAvatarsList();
/*       */     
/*       */     Common.Avatar getAvatars(int param1Int);
/*       */     
/*       */     int getAvatarsCount();
/*       */     
/*       */     List<? extends Common.AvatarOrBuilder> getAvatarsOrBuilderList();
/*       */     
/*       */     Common.AvatarOrBuilder getAvatarsOrBuilder(int param1Int);
/*       */   }
/*       */   
/*       */   public static interface PositionOrBuilder extends MessageOrBuilder {
/*       */     boolean hasTargetX();
/*       */     
/*       */     int getTargetX();
/*       */     
/*       */     boolean hasTargetY();
/*       */     
/*       */     int getTargetY();
/*       */     
/*       */     boolean hasAreaName();
/*       */     
/*       */     String getAreaName();
/*       */     
/*       */     ByteString getAreaNameBytes();
/*       */     
/*       */     boolean hasAreaId();
/*       */     
/*       */     int getAreaId();
/*       */   }
/*       */ }


/* Location:              D:\Yxdl\xmds-server\mmoarpg-game.jar!\pomelo\area\FriendHandler.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */