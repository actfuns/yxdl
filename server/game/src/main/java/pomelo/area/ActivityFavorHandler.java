package pomelo.area;

import com.google.protobuf.AbstractMessage;
import com.google.protobuf.AbstractMessageLite;
import com.google.protobuf.AbstractParser;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors;
import com.google.protobuf.ExtensionRegistry;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessage;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.Message;
import com.google.protobuf.MessageLite;
import com.google.protobuf.MessageOrBuilder;
import com.google.protobuf.Parser;
import com.google.protobuf.RepeatedFieldBuilder;
import com.google.protobuf.SingleFieldBuilder;
import com.google.protobuf.UnknownFieldSet;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import pomelo.Common;


public final class ActivityFavorHandler {
    public static void registerAllExtensions(ExtensionRegistry registry) {
    }

    public static final class DailyRechargeGetInfoRequest
            extends GeneratedMessage
            implements DailyRechargeGetInfoRequestOrBuilder {
        private static final DailyRechargeGetInfoRequest defaultInstance = new DailyRechargeGetInfoRequest(true);
        private final UnknownFieldSet unknownFields;

        private DailyRechargeGetInfoRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private DailyRechargeGetInfoRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static DailyRechargeGetInfoRequest getDefaultInstance() {
            return defaultInstance;
        }

        public DailyRechargeGetInfoRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private DailyRechargeGetInfoRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_DailyRechargeGetInfoRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_DailyRechargeGetInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(DailyRechargeGetInfoRequest.class, Builder.class);
        }

        public static Parser<DailyRechargeGetInfoRequest> PARSER = (Parser<DailyRechargeGetInfoRequest>) new AbstractParser<DailyRechargeGetInfoRequest>() {
            public ActivityFavorHandler.DailyRechargeGetInfoRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.DailyRechargeGetInfoRequest(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<DailyRechargeGetInfoRequest> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static DailyRechargeGetInfoRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (DailyRechargeGetInfoRequest) PARSER.parseFrom(data);
        }

        public static DailyRechargeGetInfoRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (DailyRechargeGetInfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static DailyRechargeGetInfoRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (DailyRechargeGetInfoRequest) PARSER.parseFrom(data);
        }

        public static DailyRechargeGetInfoRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (DailyRechargeGetInfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static DailyRechargeGetInfoRequest parseFrom(InputStream input) throws IOException {
            return (DailyRechargeGetInfoRequest) PARSER.parseFrom(input);
        }

        public static DailyRechargeGetInfoRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyRechargeGetInfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static DailyRechargeGetInfoRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (DailyRechargeGetInfoRequest) PARSER.parseDelimitedFrom(input);
        }

        public static DailyRechargeGetInfoRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyRechargeGetInfoRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static DailyRechargeGetInfoRequest parseFrom(CodedInputStream input) throws IOException {
            return (DailyRechargeGetInfoRequest) PARSER.parseFrom(input);
        }

        public static DailyRechargeGetInfoRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyRechargeGetInfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(DailyRechargeGetInfoRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.DailyRechargeGetInfoRequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyRechargeGetInfoRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyRechargeGetInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.DailyRechargeGetInfoRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.DailyRechargeGetInfoRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyRechargeGetInfoRequest_descriptor;
            }

            public ActivityFavorHandler.DailyRechargeGetInfoRequest getDefaultInstanceForType() {
                return ActivityFavorHandler.DailyRechargeGetInfoRequest.getDefaultInstance();
            }

            public ActivityFavorHandler.DailyRechargeGetInfoRequest build() {
                ActivityFavorHandler.DailyRechargeGetInfoRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.DailyRechargeGetInfoRequest buildPartial() {
                ActivityFavorHandler.DailyRechargeGetInfoRequest result = new ActivityFavorHandler.DailyRechargeGetInfoRequest(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.DailyRechargeGetInfoRequest)
                    return mergeFrom((ActivityFavorHandler.DailyRechargeGetInfoRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.DailyRechargeGetInfoRequest other) {
                if (other == ActivityFavorHandler.DailyRechargeGetInfoRequest.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.DailyRechargeGetInfoRequest parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.DailyRechargeGetInfoRequest) ActivityFavorHandler.DailyRechargeGetInfoRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.DailyRechargeGetInfoRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class DailyRechargeGetInfoResponse
            extends GeneratedMessage
            implements DailyRechargeGetInfoResponseOrBuilder {
        private static final DailyRechargeGetInfoResponse defaultInstance = new DailyRechargeGetInfoResponse(true);
        private final UnknownFieldSet unknownFields;

        private DailyRechargeGetInfoResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private DailyRechargeGetInfoResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static DailyRechargeGetInfoResponse getDefaultInstance() {
            return defaultInstance;
        }

        public DailyRechargeGetInfoResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private DailyRechargeGetInfoResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    ActivityHandler.totalInfo.Builder subBuilder;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                        case 26:
                            subBuilder = null;
                            if ((this.bitField0_ & 0x4) == 4) subBuilder = this.totalInfo_.toBuilder();
                            this.totalInfo_ = (ActivityHandler.totalInfo) input.readMessage(ActivityHandler.totalInfo.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(this.totalInfo_);
                                this.totalInfo_ = subBuilder.buildPartial();
                            }
                            this.bitField0_ |= 0x4;
                            break;
                        case 32:
                            this.bitField0_ |= 0x8;
                            this.rechargeNum_ = input.readInt32();
                            break;
                        case 40:
                            this.bitField0_ |= 0x10;
                            this.rechargeMax_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_DailyRechargeGetInfoResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_DailyRechargeGetInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(DailyRechargeGetInfoResponse.class, Builder.class);
        }

        public static Parser<DailyRechargeGetInfoResponse> PARSER = (Parser<DailyRechargeGetInfoResponse>) new AbstractParser<DailyRechargeGetInfoResponse>() {
            public ActivityFavorHandler.DailyRechargeGetInfoResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.DailyRechargeGetInfoResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int TOTALINFO_FIELD_NUMBER = 3;
        private ActivityHandler.totalInfo totalInfo_;
        public static final int RECHARGENUM_FIELD_NUMBER = 4;
        private int rechargeNum_;
        public static final int RECHARGEMAX_FIELD_NUMBER = 5;
        private int rechargeMax_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<DailyRechargeGetInfoResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        static {
            defaultInstance.initFields();
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasTotalInfo() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public ActivityHandler.totalInfo getTotalInfo() {
            return this.totalInfo_;
        }

        public ActivityHandler.totalInfoOrBuilder getTotalInfoOrBuilder() {
            return this.totalInfo_;
        }

        public boolean hasRechargeNum() {
            return ((this.bitField0_ & 0x8) == 8);
        }

        public int getRechargeNum() {
            return this.rechargeNum_;
        }

        public boolean hasRechargeMax() {
            return ((this.bitField0_ & 0x10) == 16);
        }

        public int getRechargeMax() {
            return this.rechargeMax_;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
            this.totalInfo_ = ActivityHandler.totalInfo.getDefaultInstance();
            this.rechargeNum_ = 0;
            this.rechargeMax_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (hasTotalInfo() && !getTotalInfo().isInitialized()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(2, getS2CMsgBytes());
            if ((this.bitField0_ & 0x4) == 4)
                output.writeMessage(3, (MessageLite) this.totalInfo_);
            if ((this.bitField0_ & 0x8) == 8)
                output.writeInt32(4, this.rechargeNum_);
            if ((this.bitField0_ & 0x10) == 16)
                output.writeInt32(5, this.rechargeMax_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeMessageSize(3, (MessageLite) this.totalInfo_);
            if ((this.bitField0_ & 0x8) == 8)
                size += CodedOutputStream.computeInt32Size(4, this.rechargeNum_);
            if ((this.bitField0_ & 0x10) == 16)
                size += CodedOutputStream.computeInt32Size(5, this.rechargeMax_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static DailyRechargeGetInfoResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (DailyRechargeGetInfoResponse) PARSER.parseFrom(data);
        }

        public static DailyRechargeGetInfoResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (DailyRechargeGetInfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static DailyRechargeGetInfoResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (DailyRechargeGetInfoResponse) PARSER.parseFrom(data);
        }

        public static DailyRechargeGetInfoResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (DailyRechargeGetInfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static DailyRechargeGetInfoResponse parseFrom(InputStream input) throws IOException {
            return (DailyRechargeGetInfoResponse) PARSER.parseFrom(input);
        }

        public static DailyRechargeGetInfoResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyRechargeGetInfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static DailyRechargeGetInfoResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (DailyRechargeGetInfoResponse) PARSER.parseDelimitedFrom(input);
        }

        public static DailyRechargeGetInfoResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyRechargeGetInfoResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static DailyRechargeGetInfoResponse parseFrom(CodedInputStream input) throws IOException {
            return (DailyRechargeGetInfoResponse) PARSER.parseFrom(input);
        }

        public static DailyRechargeGetInfoResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyRechargeGetInfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(DailyRechargeGetInfoResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.DailyRechargeGetInfoResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;
            private ActivityHandler.totalInfo totalInfo_;
            private SingleFieldBuilder<ActivityHandler.totalInfo, ActivityHandler.totalInfo.Builder, ActivityHandler.totalInfoOrBuilder> totalInfoBuilder_;
            private int rechargeNum_;
            private int rechargeMax_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyRechargeGetInfoResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyRechargeGetInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.DailyRechargeGetInfoResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                this.totalInfo_ = ActivityHandler.totalInfo.getDefaultInstance();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                this.totalInfo_ = ActivityHandler.totalInfo.getDefaultInstance();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.DailyRechargeGetInfoResponse.alwaysUseFieldBuilders)
                    getTotalInfoFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                if (this.totalInfoBuilder_ == null) {
                    this.totalInfo_ = ActivityHandler.totalInfo.getDefaultInstance();
                } else {
                    this.totalInfoBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFB;
                this.rechargeNum_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                this.rechargeMax_ = 0;
                this.bitField0_ &= 0xFFFFFFEF;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyRechargeGetInfoResponse_descriptor;
            }

            public ActivityFavorHandler.DailyRechargeGetInfoResponse getDefaultInstanceForType() {
                return ActivityFavorHandler.DailyRechargeGetInfoResponse.getDefaultInstance();
            }

            public ActivityFavorHandler.DailyRechargeGetInfoResponse build() {
                ActivityFavorHandler.DailyRechargeGetInfoResponse result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.DailyRechargeGetInfoResponse buildPartial() {
                ActivityFavorHandler.DailyRechargeGetInfoResponse result = new ActivityFavorHandler.DailyRechargeGetInfoResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                if ((from_bitField0_ & 0x4) == 4)
                    to_bitField0_ |= 0x4;
                if (this.totalInfoBuilder_ == null) {
                    result.totalInfo_ = this.totalInfo_;
                } else {
                    result.totalInfo_ = (ActivityHandler.totalInfo) this.totalInfoBuilder_.build();
                }
                if ((from_bitField0_ & 0x8) == 8)
                    to_bitField0_ |= 0x8;
                result.rechargeNum_ = this.rechargeNum_;
                if ((from_bitField0_ & 0x10) == 16)
                    to_bitField0_ |= 0x10;
                result.rechargeMax_ = this.rechargeMax_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.DailyRechargeGetInfoResponse)
                    return mergeFrom((ActivityFavorHandler.DailyRechargeGetInfoResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.DailyRechargeGetInfoResponse other) {
                if (other == ActivityFavorHandler.DailyRechargeGetInfoResponse.getDefaultInstance())
                    return this;
                if (other.hasS2CCode())
                    setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (other.hasTotalInfo())
                    mergeTotalInfo(other.getTotalInfo());
                if (other.hasRechargeNum())
                    setRechargeNum(other.getRechargeNum());
                if (other.hasRechargeMax())
                    setRechargeMax(other.getRechargeMax());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode())
                    return false;
                if (hasTotalInfo() && !getTotalInfo().isInitialized())
                    return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.DailyRechargeGetInfoResponse parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.DailyRechargeGetInfoResponse) ActivityFavorHandler.DailyRechargeGetInfoResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.DailyRechargeGetInfoResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = ActivityFavorHandler.DailyRechargeGetInfoResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public boolean hasTotalInfo() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public ActivityHandler.totalInfo getTotalInfo() {
                if (this.totalInfoBuilder_ == null)
                    return this.totalInfo_;
                return (ActivityHandler.totalInfo) this.totalInfoBuilder_.getMessage();
            }

            public Builder setTotalInfo(ActivityHandler.totalInfo value) {
                if (this.totalInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    this.totalInfo_ = value;
                    onChanged();
                } else {
                    this.totalInfoBuilder_.setMessage(value);
                }
                this.bitField0_ |= 0x4;
                return this;
            }

            public Builder setTotalInfo(ActivityHandler.totalInfo.Builder builderForValue) {
                if (this.totalInfoBuilder_ == null) {
                    this.totalInfo_ = builderForValue.build();
                    onChanged();
                } else {
                    this.totalInfoBuilder_.setMessage(builderForValue.build());
                }
                this.bitField0_ |= 0x4;
                return this;
            }

            public Builder mergeTotalInfo(ActivityHandler.totalInfo value) {
                if (this.totalInfoBuilder_ == null) {
                    if ((this.bitField0_ & 0x4) == 4 && this.totalInfo_ != ActivityHandler.totalInfo.getDefaultInstance()) {
                        this.totalInfo_ = ActivityHandler.totalInfo.newBuilder(this.totalInfo_).mergeFrom(value).buildPartial();
                    } else {
                        this.totalInfo_ = value;
                    }
                    onChanged();
                } else {
                    this.totalInfoBuilder_.mergeFrom(value);
                }
                this.bitField0_ |= 0x4;
                return this;
            }

            public Builder clearTotalInfo() {
                if (this.totalInfoBuilder_ == null) {
                    this.totalInfo_ = ActivityHandler.totalInfo.getDefaultInstance();
                    onChanged();
                } else {
                    this.totalInfoBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }

            public ActivityHandler.totalInfo.Builder getTotalInfoBuilder() {
                this.bitField0_ |= 0x4;
                onChanged();
                return (ActivityHandler.totalInfo.Builder) getTotalInfoFieldBuilder().getBuilder();
            }

            public ActivityHandler.totalInfoOrBuilder getTotalInfoOrBuilder() {
                if (this.totalInfoBuilder_ != null)
                    return (ActivityHandler.totalInfoOrBuilder) this.totalInfoBuilder_.getMessageOrBuilder();
                return this.totalInfo_;
            }

            private SingleFieldBuilder<ActivityHandler.totalInfo, ActivityHandler.totalInfo.Builder, ActivityHandler.totalInfoOrBuilder> getTotalInfoFieldBuilder() {
                if (this.totalInfoBuilder_ == null) {
                    this.totalInfoBuilder_ = new SingleFieldBuilder(getTotalInfo(), getParentForChildren(), isClean());
                    this.totalInfo_ = null;
                }
                return this.totalInfoBuilder_;
            }

            public boolean hasRechargeNum() {
                return ((this.bitField0_ & 0x8) == 8);
            }

            public int getRechargeNum() {
                return this.rechargeNum_;
            }

            public Builder setRechargeNum(int value) {
                this.bitField0_ |= 0x8;
                this.rechargeNum_ = value;
                onChanged();
                return this;
            }

            public Builder clearRechargeNum() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.rechargeNum_ = 0;
                onChanged();
                return this;
            }

            public boolean hasRechargeMax() {
                return ((this.bitField0_ & 0x10) == 16);
            }

            public int getRechargeMax() {
                return this.rechargeMax_;
            }

            public Builder setRechargeMax(int value) {
                this.bitField0_ |= 0x10;
                this.rechargeMax_ = value;
                onChanged();
                return this;
            }

            public Builder clearRechargeMax() {
                this.bitField0_ &= 0xFFFFFFEF;
                this.rechargeMax_ = 0;
                onChanged();
                return this;
            }
        }
    }

    public static final class DailyRechargeGetAwardRequest extends GeneratedMessage implements DailyRechargeGetAwardRequestOrBuilder {
        private static final DailyRechargeGetAwardRequest defaultInstance = new DailyRechargeGetAwardRequest(true);
        private final UnknownFieldSet unknownFields;

        private DailyRechargeGetAwardRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private DailyRechargeGetAwardRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static DailyRechargeGetAwardRequest getDefaultInstance() {
            return defaultInstance;
        }

        public DailyRechargeGetAwardRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private DailyRechargeGetAwardRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.awardId_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_DailyRechargeGetAwardRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_DailyRechargeGetAwardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(DailyRechargeGetAwardRequest.class, Builder.class);
        }

        public static Parser<DailyRechargeGetAwardRequest> PARSER = (Parser<DailyRechargeGetAwardRequest>) new AbstractParser<DailyRechargeGetAwardRequest>() {
            public ActivityFavorHandler.DailyRechargeGetAwardRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.DailyRechargeGetAwardRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int AWARDID_FIELD_NUMBER = 1;
        private int awardId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<DailyRechargeGetAwardRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasAwardId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getAwardId() {
            return this.awardId_;
        }

        private void initFields() {
            this.awardId_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasAwardId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.awardId_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.awardId_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static DailyRechargeGetAwardRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (DailyRechargeGetAwardRequest) PARSER.parseFrom(data);
        }

        public static DailyRechargeGetAwardRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (DailyRechargeGetAwardRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static DailyRechargeGetAwardRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (DailyRechargeGetAwardRequest) PARSER.parseFrom(data);
        }

        public static DailyRechargeGetAwardRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (DailyRechargeGetAwardRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static DailyRechargeGetAwardRequest parseFrom(InputStream input) throws IOException {
            return (DailyRechargeGetAwardRequest) PARSER.parseFrom(input);
        }

        public static DailyRechargeGetAwardRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyRechargeGetAwardRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static DailyRechargeGetAwardRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (DailyRechargeGetAwardRequest) PARSER.parseDelimitedFrom(input);
        }

        public static DailyRechargeGetAwardRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyRechargeGetAwardRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static DailyRechargeGetAwardRequest parseFrom(CodedInputStream input) throws IOException {
            return (DailyRechargeGetAwardRequest) PARSER.parseFrom(input);
        }

        public static DailyRechargeGetAwardRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyRechargeGetAwardRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(DailyRechargeGetAwardRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.DailyRechargeGetAwardRequestOrBuilder {
            private int bitField0_;
            private int awardId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyRechargeGetAwardRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyRechargeGetAwardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.DailyRechargeGetAwardRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.DailyRechargeGetAwardRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.awardId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyRechargeGetAwardRequest_descriptor;
            }

            public ActivityFavorHandler.DailyRechargeGetAwardRequest getDefaultInstanceForType() {
                return ActivityFavorHandler.DailyRechargeGetAwardRequest.getDefaultInstance();
            }

            public ActivityFavorHandler.DailyRechargeGetAwardRequest build() {
                ActivityFavorHandler.DailyRechargeGetAwardRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.DailyRechargeGetAwardRequest buildPartial() {
                ActivityFavorHandler.DailyRechargeGetAwardRequest result = new ActivityFavorHandler.DailyRechargeGetAwardRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.awardId_ = this.awardId_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.DailyRechargeGetAwardRequest)
                    return mergeFrom((ActivityFavorHandler.DailyRechargeGetAwardRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.DailyRechargeGetAwardRequest other) {
                if (other == ActivityFavorHandler.DailyRechargeGetAwardRequest.getDefaultInstance()) return this;
                if (other.hasAwardId()) setAwardId(other.getAwardId());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasAwardId()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.DailyRechargeGetAwardRequest parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.DailyRechargeGetAwardRequest) ActivityFavorHandler.DailyRechargeGetAwardRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.DailyRechargeGetAwardRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasAwardId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getAwardId() {
                return this.awardId_;
            }

            public Builder setAwardId(int value) {
                this.bitField0_ |= 0x1;
                this.awardId_ = value;
                onChanged();
                return this;
            }

            public Builder clearAwardId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.awardId_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class DailyRechargeGetAwardResponse
            extends GeneratedMessage
            implements DailyRechargeGetAwardResponseOrBuilder {
        private static final DailyRechargeGetAwardResponse defaultInstance = new DailyRechargeGetAwardResponse(true);
        private final UnknownFieldSet unknownFields;

        private DailyRechargeGetAwardResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private DailyRechargeGetAwardResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static DailyRechargeGetAwardResponse getDefaultInstance() {
            return defaultInstance;
        }

        public DailyRechargeGetAwardResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private DailyRechargeGetAwardResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_DailyRechargeGetAwardResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_DailyRechargeGetAwardResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(DailyRechargeGetAwardResponse.class, Builder.class);
        }

        public static Parser<DailyRechargeGetAwardResponse> PARSER = (Parser<DailyRechargeGetAwardResponse>) new AbstractParser<DailyRechargeGetAwardResponse>() {
            public ActivityFavorHandler.DailyRechargeGetAwardResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.DailyRechargeGetAwardResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<DailyRechargeGetAwardResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static DailyRechargeGetAwardResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (DailyRechargeGetAwardResponse) PARSER.parseFrom(data);
        }

        public static DailyRechargeGetAwardResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (DailyRechargeGetAwardResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static DailyRechargeGetAwardResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (DailyRechargeGetAwardResponse) PARSER.parseFrom(data);
        }

        public static DailyRechargeGetAwardResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (DailyRechargeGetAwardResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static DailyRechargeGetAwardResponse parseFrom(InputStream input) throws IOException {
            return (DailyRechargeGetAwardResponse) PARSER.parseFrom(input);
        }

        public static DailyRechargeGetAwardResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyRechargeGetAwardResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static DailyRechargeGetAwardResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (DailyRechargeGetAwardResponse) PARSER.parseDelimitedFrom(input);
        }

        public static DailyRechargeGetAwardResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyRechargeGetAwardResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static DailyRechargeGetAwardResponse parseFrom(CodedInputStream input) throws IOException {
            return (DailyRechargeGetAwardResponse) PARSER.parseFrom(input);
        }

        public static DailyRechargeGetAwardResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyRechargeGetAwardResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(DailyRechargeGetAwardResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.DailyRechargeGetAwardResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyRechargeGetAwardResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyRechargeGetAwardResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.DailyRechargeGetAwardResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.DailyRechargeGetAwardResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyRechargeGetAwardResponse_descriptor;
            }

            public ActivityFavorHandler.DailyRechargeGetAwardResponse getDefaultInstanceForType() {
                return ActivityFavorHandler.DailyRechargeGetAwardResponse.getDefaultInstance();
            }

            public ActivityFavorHandler.DailyRechargeGetAwardResponse build() {
                ActivityFavorHandler.DailyRechargeGetAwardResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.DailyRechargeGetAwardResponse buildPartial() {
                ActivityFavorHandler.DailyRechargeGetAwardResponse result = new ActivityFavorHandler.DailyRechargeGetAwardResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.DailyRechargeGetAwardResponse)
                    return mergeFrom((ActivityFavorHandler.DailyRechargeGetAwardResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.DailyRechargeGetAwardResponse other) {
                if (other == ActivityFavorHandler.DailyRechargeGetAwardResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.DailyRechargeGetAwardResponse parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.DailyRechargeGetAwardResponse) ActivityFavorHandler.DailyRechargeGetAwardResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.DailyRechargeGetAwardResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = ActivityFavorHandler.DailyRechargeGetAwardResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class SuperPackageAwardInfo
            extends GeneratedMessage
            implements SuperPackageAwardInfoOrBuilder {
        private static final SuperPackageAwardInfo defaultInstance = new SuperPackageAwardInfo(true);
        private final UnknownFieldSet unknownFields;

        private SuperPackageAwardInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SuperPackageAwardInfo(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SuperPackageAwardInfo getDefaultInstance() {
            return defaultInstance;
        }

        public SuperPackageAwardInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SuperPackageAwardInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.packageId_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.packageName_ = bs;
                            break;
                        case 26:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x4;
                            this.packageCode_ = bs;
                            break;
                        case 32:
                            this.bitField0_ |= 0x8;
                            this.packageNum_ = input.readInt32();
                            break;
                        case 42:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x10;
                            this.packageIcon_ = bs;
                            break;
                        case 48:
                            this.bitField0_ |= 0x20;
                            this.packageScript_ = input.readInt32();
                            break;
                        case 56:
                            this.bitField0_ |= 0x40;
                            this.packagePrice_ = input.readInt32();
                            break;
                        case 64:
                            this.bitField0_ |= 0x80;
                            this.packageState_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageAwardInfo_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageAwardInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(SuperPackageAwardInfo.class, Builder.class);
        }

        public static Parser<SuperPackageAwardInfo> PARSER = (Parser<SuperPackageAwardInfo>) new AbstractParser<SuperPackageAwardInfo>() {
            public ActivityFavorHandler.SuperPackageAwardInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.SuperPackageAwardInfo(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int PACKAGEID_FIELD_NUMBER = 1;
        private int packageId_;
        public static final int PACKAGENAME_FIELD_NUMBER = 2;
        private Object packageName_;
        public static final int PACKAGECODE_FIELD_NUMBER = 3;
        private Object packageCode_;
        public static final int PACKAGENUM_FIELD_NUMBER = 4;
        private int packageNum_;
        public static final int PACKAGEICON_FIELD_NUMBER = 5;
        private Object packageIcon_;
        public static final int PACKAGESCRIPT_FIELD_NUMBER = 6;
        private int packageScript_;
        public static final int PACKAGEPRICE_FIELD_NUMBER = 7;
        private int packagePrice_;
        public static final int PACKAGESTATE_FIELD_NUMBER = 8;
        private int packageState_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SuperPackageAwardInfo> getParserForType() {
            return PARSER;
        }

        public boolean hasPackageId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getPackageId() {
            return this.packageId_;
        }

        public boolean hasPackageName() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getPackageName() {
            Object ref = this.packageName_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.packageName_ = s;
            return s;
        }

        static {
            defaultInstance.initFields();
        }


        public ByteString getPackageNameBytes() {
            Object ref = this.packageName_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.packageName_ = b;
                return b;
            }
            return (ByteString) ref;
        }


        public boolean hasPackageCode() {
            return ((this.bitField0_ & 0x4) == 4);
        }


        public String getPackageCode() {
            Object ref = this.packageCode_;
            if (ref instanceof String) {
                return (String) ref;
            }
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                this.packageCode_ = s;
            }
            return s;
        }


        public ByteString getPackageCodeBytes() {
            Object ref = this.packageCode_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.packageCode_ = b;
                return b;
            }
            return (ByteString) ref;
        }


        public boolean hasPackageNum() {
            return ((this.bitField0_ & 0x8) == 8);
        }


        public int getPackageNum() {
            return this.packageNum_;
        }


        public boolean hasPackageIcon() {
            return ((this.bitField0_ & 0x10) == 16);
        }


        public String getPackageIcon() {
            Object ref = this.packageIcon_;
            if (ref instanceof String) {
                return (String) ref;
            }
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                this.packageIcon_ = s;
            }
            return s;
        }


        public ByteString getPackageIconBytes() {
            Object ref = this.packageIcon_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.packageIcon_ = b;
                return b;
            }
            return (ByteString) ref;
        }


        public boolean hasPackageScript() {
            return ((this.bitField0_ & 0x20) == 32);
        }


        public int getPackageScript() {
            return this.packageScript_;
        }


        public boolean hasPackagePrice() {
            return ((this.bitField0_ & 0x40) == 64);
        }


        public int getPackagePrice() {
            return this.packagePrice_;
        }


        public boolean hasPackageState() {
            return ((this.bitField0_ & 0x80) == 128);
        }


        public int getPackageState() {
            return this.packageState_;
        }


        private void initFields() {
            this.packageId_ = 0;
            this.packageName_ = "";
            this.packageCode_ = "";
            this.packageNum_ = 0;
            this.packageIcon_ = "";
            this.packageScript_ = 0;
            this.packagePrice_ = 0;
            this.packageState_ = 0;
        }


        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            if (!hasPackageId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasPackageName()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasPackageCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasPackageNum()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasPackageIcon()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasPackageScript()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasPackagePrice()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasPackageState()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }


        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeInt32(1, this.packageId_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeBytes(2, getPackageNameBytes());
            }
            if ((this.bitField0_ & 0x4) == 4) {
                output.writeBytes(3, getPackageCodeBytes());
            }
            if ((this.bitField0_ & 0x8) == 8) {
                output.writeInt32(4, this.packageNum_);
            }
            if ((this.bitField0_ & 0x10) == 16) {
                output.writeBytes(5, getPackageIconBytes());
            }
            if ((this.bitField0_ & 0x20) == 32) {
                output.writeInt32(6, this.packageScript_);
            }
            if ((this.bitField0_ & 0x40) == 64) {
                output.writeInt32(7, this.packagePrice_);
            }
            if ((this.bitField0_ & 0x80) == 128) {
                output.writeInt32(8, this.packageState_);
            }
            getUnknownFields().writeTo(output);
        }


        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeInt32Size(1, this.packageId_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeBytesSize(2, getPackageNameBytes());
            }
            if ((this.bitField0_ & 0x4) == 4) {
                size += CodedOutputStream.computeBytesSize(3, getPackageCodeBytes());
            }
            if ((this.bitField0_ & 0x8) == 8) {
                size += CodedOutputStream.computeInt32Size(4, this.packageNum_);
            }
            if ((this.bitField0_ & 0x10) == 16) {
                size += CodedOutputStream.computeBytesSize(5, getPackageIconBytes());
            }
            if ((this.bitField0_ & 0x20) == 32) {
                size += CodedOutputStream.computeInt32Size(6, this.packageScript_);
            }
            if ((this.bitField0_ & 0x40) == 64) {
                size += CodedOutputStream.computeInt32Size(7, this.packagePrice_);
            }
            if ((this.bitField0_ & 0x80) == 128) {
                size += CodedOutputStream.computeInt32Size(8, this.packageState_);
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }


        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }


        public static SuperPackageAwardInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SuperPackageAwardInfo) PARSER.parseFrom(data);
        }


        public static SuperPackageAwardInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SuperPackageAwardInfo) PARSER.parseFrom(data, extensionRegistry);
        }


        public static SuperPackageAwardInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SuperPackageAwardInfo) PARSER.parseFrom(data);
        }


        public static SuperPackageAwardInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SuperPackageAwardInfo) PARSER.parseFrom(data, extensionRegistry);
        }


        public static SuperPackageAwardInfo parseFrom(InputStream input) throws IOException {
            return (SuperPackageAwardInfo) PARSER.parseFrom(input);
        }


        public static SuperPackageAwardInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SuperPackageAwardInfo) PARSER.parseFrom(input, extensionRegistry);
        }


        public static SuperPackageAwardInfo parseDelimitedFrom(InputStream input) throws IOException {
            return (SuperPackageAwardInfo) PARSER.parseDelimitedFrom(input);
        }


        public static SuperPackageAwardInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SuperPackageAwardInfo) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }


        public static SuperPackageAwardInfo parseFrom(CodedInputStream input) throws IOException {
            return (SuperPackageAwardInfo) PARSER.parseFrom(input);
        }


        public static SuperPackageAwardInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SuperPackageAwardInfo) PARSER.parseFrom(input, extensionRegistry);
        }


        public static Builder newBuilder() {
            return Builder.create();
        }


        public Builder newBuilderForType() {
            return newBuilder();
        }


        public static Builder newBuilder(SuperPackageAwardInfo prototype) {
            return newBuilder().mergeFrom(prototype);
        }


        public Builder toBuilder() {
            return newBuilder(this);
        }


        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }


        public static final class Builder
                extends GeneratedMessage.Builder<Builder>
                implements ActivityFavorHandler.SuperPackageAwardInfoOrBuilder {
            private int bitField0_;


            private int packageId_;


            private Object packageName_;


            private Object packageCode_;


            private int packageNum_;


            private Object packageIcon_;


            private int packageScript_;


            private int packagePrice_;


            private int packageState_;


            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageAwardInfo_descriptor;
            }


            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageAwardInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.SuperPackageAwardInfo.class, Builder.class);
            }


            private Builder() {
                this.packageName_ = "";
                this.packageCode_ = "";
                this.packageIcon_ = "";
                maybeForceBuilderInitialization();
            }


            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.packageName_ = "";
                this.packageCode_ = "";
                this.packageIcon_ = "";
                maybeForceBuilderInitialization();
            }


            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.SuperPackageAwardInfo.alwaysUseFieldBuilders) ;
            }


            private static Builder create() {
                return new Builder();
            }


            public Builder clear() {
                super.clear();
                this.packageId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.packageName_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                this.packageCode_ = "";
                this.bitField0_ &= 0xFFFFFFFB;
                this.packageNum_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                this.packageIcon_ = "";
                this.bitField0_ &= 0xFFFFFFEF;
                this.packageScript_ = 0;
                this.bitField0_ &= 0xFFFFFFDF;
                this.packagePrice_ = 0;
                this.bitField0_ &= 0xFFFFFFBF;
                this.packageState_ = 0;
                this.bitField0_ &= 0xFFFFFF7F;
                return this;
            }


            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }


            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageAwardInfo_descriptor;
            }


            public ActivityFavorHandler.SuperPackageAwardInfo getDefaultInstanceForType() {
                return ActivityFavorHandler.SuperPackageAwardInfo.getDefaultInstance();
            }


            public ActivityFavorHandler.SuperPackageAwardInfo build() {
                ActivityFavorHandler.SuperPackageAwardInfo result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }


            public ActivityFavorHandler.SuperPackageAwardInfo buildPartial() {
                ActivityFavorHandler.SuperPackageAwardInfo result = new ActivityFavorHandler.SuperPackageAwardInfo(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) {
                    to_bitField0_ |= 0x1;
                }
                result.packageId_ = this.packageId_;
                if ((from_bitField0_ & 0x2) == 2) {
                    to_bitField0_ |= 0x2;
                }
                result.packageName_ = this.packageName_;
                if ((from_bitField0_ & 0x4) == 4) {
                    to_bitField0_ |= 0x4;
                }
                result.packageCode_ = this.packageCode_;
                if ((from_bitField0_ & 0x8) == 8) {
                    to_bitField0_ |= 0x8;
                }
                result.packageNum_ = this.packageNum_;
                if ((from_bitField0_ & 0x10) == 16) {
                    to_bitField0_ |= 0x10;
                }
                result.packageIcon_ = this.packageIcon_;
                if ((from_bitField0_ & 0x20) == 32) {
                    to_bitField0_ |= 0x20;
                }
                result.packageScript_ = this.packageScript_;
                if ((from_bitField0_ & 0x40) == 64) {
                    to_bitField0_ |= 0x40;
                }
                result.packagePrice_ = this.packagePrice_;
                if ((from_bitField0_ & 0x80) == 128) {
                    to_bitField0_ |= 0x80;
                }
                result.packageState_ = this.packageState_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }


            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.SuperPackageAwardInfo) {
                    return mergeFrom((ActivityFavorHandler.SuperPackageAwardInfo) other);
                }
                super.mergeFrom(other);
                return this;
            }


            public Builder mergeFrom(ActivityFavorHandler.SuperPackageAwardInfo other) {
                if (other == ActivityFavorHandler.SuperPackageAwardInfo.getDefaultInstance()) {
                    return this;
                }
                if (other.hasPackageId()) {
                    setPackageId(other.getPackageId());
                }
                if (other.hasPackageName()) {
                    this.bitField0_ |= 0x2;
                    this.packageName_ = other.packageName_;
                    onChanged();
                }
                if (other.hasPackageCode()) {
                    this.bitField0_ |= 0x4;
                    this.packageCode_ = other.packageCode_;
                    onChanged();
                }
                if (other.hasPackageNum()) {
                    setPackageNum(other.getPackageNum());
                }
                if (other.hasPackageIcon()) {
                    this.bitField0_ |= 0x10;
                    this.packageIcon_ = other.packageIcon_;
                    onChanged();
                }
                if (other.hasPackageScript()) {
                    setPackageScript(other.getPackageScript());
                }
                if (other.hasPackagePrice()) {
                    setPackagePrice(other.getPackagePrice());
                }
                if (other.hasPackageState()) {
                    setPackageState(other.getPackageState());
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }


            public final boolean isInitialized() {
                if (!hasPackageId()) {
                    return false;
                }
                if (!hasPackageName()) {
                    return false;
                }
                if (!hasPackageCode()) {
                    return false;
                }
                if (!hasPackageNum()) {
                    return false;
                }
                if (!hasPackageIcon()) {
                    return false;
                }
                if (!hasPackageScript()) {
                    return false;
                }
                if (!hasPackagePrice()) {
                    return false;
                }
                if (!hasPackageState()) {
                    return false;
                }
                return true;
            }


            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.SuperPackageAwardInfo parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.SuperPackageAwardInfo) ActivityFavorHandler.SuperPackageAwardInfo.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.SuperPackageAwardInfo) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }


            public boolean hasPackageId() {
                return ((this.bitField0_ & 0x1) == 1);
            }


            public int getPackageId() {
                return this.packageId_;
            }


            public Builder setPackageId(int value) {
                this.bitField0_ |= 0x1;
                this.packageId_ = value;
                onChanged();
                return this;
            }


            public Builder clearPackageId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.packageId_ = 0;
                onChanged();
                return this;
            }


            public boolean hasPackageName() {
                return ((this.bitField0_ & 0x2) == 2);
            }


            public String getPackageName() {
                Object ref = this.packageName_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.packageName_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getPackageNameBytes() {
                Object ref = this.packageName_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.packageName_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setPackageName(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x2;
                this.packageName_ = value;
                onChanged();
                return this;
            }


            public Builder clearPackageName() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.packageName_ = ActivityFavorHandler.SuperPackageAwardInfo.getDefaultInstance().getPackageName();
                onChanged();
                return this;
            }


            public Builder setPackageNameBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x2;
                this.packageName_ = value;
                onChanged();
                return this;
            }


            public boolean hasPackageCode() {
                return ((this.bitField0_ & 0x4) == 4);
            }


            public String getPackageCode() {
                Object ref = this.packageCode_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.packageCode_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getPackageCodeBytes() {
                Object ref = this.packageCode_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.packageCode_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setPackageCode(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x4;
                this.packageCode_ = value;
                onChanged();
                return this;
            }


            public Builder clearPackageCode() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.packageCode_ = ActivityFavorHandler.SuperPackageAwardInfo.getDefaultInstance().getPackageCode();
                onChanged();
                return this;
            }


            public Builder setPackageCodeBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x4;
                this.packageCode_ = value;
                onChanged();
                return this;
            }


            public boolean hasPackageNum() {
                return ((this.bitField0_ & 0x8) == 8);
            }


            public int getPackageNum() {
                return this.packageNum_;
            }


            public Builder setPackageNum(int value) {
                this.bitField0_ |= 0x8;
                this.packageNum_ = value;
                onChanged();
                return this;
            }


            public Builder clearPackageNum() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.packageNum_ = 0;
                onChanged();
                return this;
            }


            public boolean hasPackageIcon() {
                return ((this.bitField0_ & 0x10) == 16);
            }


            public String getPackageIcon() {
                Object ref = this.packageIcon_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.packageIcon_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getPackageIconBytes() {
                Object ref = this.packageIcon_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.packageIcon_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setPackageIcon(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x10;
                this.packageIcon_ = value;
                onChanged();
                return this;
            }


            public Builder clearPackageIcon() {
                this.bitField0_ &= 0xFFFFFFEF;
                this.packageIcon_ = ActivityFavorHandler.SuperPackageAwardInfo.getDefaultInstance().getPackageIcon();
                onChanged();
                return this;
            }


            public Builder setPackageIconBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x10;
                this.packageIcon_ = value;
                onChanged();
                return this;
            }


            public boolean hasPackageScript() {
                return ((this.bitField0_ & 0x20) == 32);
            }


            public int getPackageScript() {
                return this.packageScript_;
            }


            public Builder setPackageScript(int value) {
                this.bitField0_ |= 0x20;
                this.packageScript_ = value;
                onChanged();
                return this;
            }


            public Builder clearPackageScript() {
                this.bitField0_ &= 0xFFFFFFDF;
                this.packageScript_ = 0;
                onChanged();
                return this;
            }


            public boolean hasPackagePrice() {
                return ((this.bitField0_ & 0x40) == 64);
            }


            public int getPackagePrice() {
                return this.packagePrice_;
            }


            public Builder setPackagePrice(int value) {
                this.bitField0_ |= 0x40;
                this.packagePrice_ = value;
                onChanged();
                return this;
            }


            public Builder clearPackagePrice() {
                this.bitField0_ &= 0xFFFFFFBF;
                this.packagePrice_ = 0;
                onChanged();
                return this;
            }


            public boolean hasPackageState() {
                return ((this.bitField0_ & 0x80) == 128);
            }


            public int getPackageState() {
                return this.packageState_;
            }


            public Builder setPackageState(int value) {
                this.bitField0_ |= 0x80;
                this.packageState_ = value;
                onChanged();
                return this;
            }


            public Builder clearPackageState() {
                this.bitField0_ &= 0xFFFFFF7F;
                this.packageState_ = 0;
                onChanged();
                return this;
            }
        }
    }


    public static final class SuperPackageInfo
            extends GeneratedMessage
            implements SuperPackageInfoOrBuilder {
        private static final SuperPackageInfo defaultInstance = new SuperPackageInfo(true);
        private final UnknownFieldSet unknownFields;

        private SuperPackageInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SuperPackageInfo(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SuperPackageInfo getDefaultInstance() {
            return defaultInstance;
        }

        public SuperPackageInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SuperPackageInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.beginTime_ = bs;
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.endTime_ = bs;
                            break;
                        case 26:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x4;
                            this.describe_ = bs;
                            break;
                        case 34:
                            if ((mutable_bitField0_ & 0x8) != 8) {
                                this.superPackageAwardInfo_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x8;
                            }
                            this.superPackageAwardInfo_.add(input.readMessage(ActivityFavorHandler.SuperPackageAwardInfo.PARSER, extensionRegistry));
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x8) == 8)
                    this.superPackageAwardInfo_ = Collections.unmodifiableList(this.superPackageAwardInfo_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageInfo_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(SuperPackageInfo.class, Builder.class);
        }

        public static Parser<SuperPackageInfo> PARSER = (Parser<SuperPackageInfo>) new AbstractParser<SuperPackageInfo>() {
            public ActivityFavorHandler.SuperPackageInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.SuperPackageInfo(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int BEGINTIME_FIELD_NUMBER = 1;
        private Object beginTime_;
        public static final int ENDTIME_FIELD_NUMBER = 2;
        private Object endTime_;
        public static final int DESCRIBE_FIELD_NUMBER = 3;
        private Object describe_;
        public static final int SUPERPACKAGEAWARDINFO_FIELD_NUMBER = 4;
        private List<ActivityFavorHandler.SuperPackageAwardInfo> superPackageAwardInfo_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SuperPackageInfo> getParserForType() {
            return PARSER;
        }

        public boolean hasBeginTime() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getBeginTime() {
            Object ref = this.beginTime_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.beginTime_ = s;
            return s;
        }

        public ByteString getBeginTimeBytes() {
            Object ref = this.beginTime_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.beginTime_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasEndTime() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getEndTime() {
            Object ref = this.endTime_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.endTime_ = s;
            return s;
        }

        public ByteString getEndTimeBytes() {
            Object ref = this.endTime_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.endTime_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        static {
            defaultInstance.initFields();
        }

        public boolean hasDescribe() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public String getDescribe() {
            Object ref = this.describe_;
            if (ref instanceof String)
                return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8())
                this.describe_ = s;
            return s;
        }

        public ByteString getDescribeBytes() {
            Object ref = this.describe_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.describe_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public List<ActivityFavorHandler.SuperPackageAwardInfo> getSuperPackageAwardInfoList() {
            return this.superPackageAwardInfo_;
        }

        public List<? extends ActivityFavorHandler.SuperPackageAwardInfoOrBuilder> getSuperPackageAwardInfoOrBuilderList() {
            return (List) this.superPackageAwardInfo_;
        }

        public int getSuperPackageAwardInfoCount() {
            return this.superPackageAwardInfo_.size();
        }

        public ActivityFavorHandler.SuperPackageAwardInfo getSuperPackageAwardInfo(int index) {
            return this.superPackageAwardInfo_.get(index);
        }

        public ActivityFavorHandler.SuperPackageAwardInfoOrBuilder getSuperPackageAwardInfoOrBuilder(int index) {
            return this.superPackageAwardInfo_.get(index);
        }

        private void initFields() {
            this.beginTime_ = "";
            this.endTime_ = "";
            this.describe_ = "";
            this.superPackageAwardInfo_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasBeginTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasEndTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasDescribe()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getSuperPackageAwardInfoCount(); i++) {
                if (!getSuperPackageAwardInfo(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeBytes(1, getBeginTimeBytes());
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(2, getEndTimeBytes());
            if ((this.bitField0_ & 0x4) == 4)
                output.writeBytes(3, getDescribeBytes());
            for (int i = 0; i < this.superPackageAwardInfo_.size(); i++)
                output.writeMessage(4, (MessageLite) this.superPackageAwardInfo_.get(i));
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeBytesSize(1, getBeginTimeBytes());
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(2, getEndTimeBytes());
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeBytesSize(3, getDescribeBytes());
            for (int i = 0; i < this.superPackageAwardInfo_.size(); i++)
                size += CodedOutputStream.computeMessageSize(4, (MessageLite) this.superPackageAwardInfo_.get(i));
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SuperPackageInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SuperPackageInfo) PARSER.parseFrom(data);
        }

        public static SuperPackageInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SuperPackageInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SuperPackageInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SuperPackageInfo) PARSER.parseFrom(data);
        }

        public static SuperPackageInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SuperPackageInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SuperPackageInfo parseFrom(InputStream input) throws IOException {
            return (SuperPackageInfo) PARSER.parseFrom(input);
        }

        public static SuperPackageInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SuperPackageInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static SuperPackageInfo parseDelimitedFrom(InputStream input) throws IOException {
            return (SuperPackageInfo) PARSER.parseDelimitedFrom(input);
        }

        public static SuperPackageInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SuperPackageInfo) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static SuperPackageInfo parseFrom(CodedInputStream input) throws IOException {
            return (SuperPackageInfo) PARSER.parseFrom(input);
        }

        public static SuperPackageInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SuperPackageInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SuperPackageInfo prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.SuperPackageInfoOrBuilder {
            private int bitField0_;
            private Object beginTime_;
            private Object endTime_;
            private Object describe_;
            private List<ActivityFavorHandler.SuperPackageAwardInfo> superPackageAwardInfo_;
            private RepeatedFieldBuilder<ActivityFavorHandler.SuperPackageAwardInfo, ActivityFavorHandler.SuperPackageAwardInfo.Builder, ActivityFavorHandler.SuperPackageAwardInfoOrBuilder> superPackageAwardInfoBuilder_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageInfo_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.SuperPackageInfo.class, Builder.class);
            }

            private Builder() {
                this.beginTime_ = "";
                this.endTime_ = "";
                this.describe_ = "";
                this.superPackageAwardInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.beginTime_ = "";
                this.endTime_ = "";
                this.describe_ = "";
                this.superPackageAwardInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.SuperPackageInfo.alwaysUseFieldBuilders)
                    getSuperPackageAwardInfoFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.beginTime_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                this.endTime_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                this.describe_ = "";
                this.bitField0_ &= 0xFFFFFFFB;
                if (this.superPackageAwardInfoBuilder_ == null) {
                    this.superPackageAwardInfo_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFF7;
                } else {
                    this.superPackageAwardInfoBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageInfo_descriptor;
            }

            public ActivityFavorHandler.SuperPackageInfo getDefaultInstanceForType() {
                return ActivityFavorHandler.SuperPackageInfo.getDefaultInstance();
            }

            public ActivityFavorHandler.SuperPackageInfo build() {
                ActivityFavorHandler.SuperPackageInfo result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.SuperPackageInfo buildPartial() {
                ActivityFavorHandler.SuperPackageInfo result = new ActivityFavorHandler.SuperPackageInfo(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.beginTime_ = this.beginTime_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.endTime_ = this.endTime_;
                if ((from_bitField0_ & 0x4) == 4)
                    to_bitField0_ |= 0x4;
                result.describe_ = this.describe_;
                if (this.superPackageAwardInfoBuilder_ == null) {
                    if ((this.bitField0_ & 0x8) == 8) {
                        this.superPackageAwardInfo_ = Collections.unmodifiableList(this.superPackageAwardInfo_);
                        this.bitField0_ &= 0xFFFFFFF7;
                    }
                    result.superPackageAwardInfo_ = this.superPackageAwardInfo_;
                } else {
                    result.superPackageAwardInfo_ = this.superPackageAwardInfoBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.SuperPackageInfo)
                    return mergeFrom((ActivityFavorHandler.SuperPackageInfo) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.SuperPackageInfo other) {
                if (other == ActivityFavorHandler.SuperPackageInfo.getDefaultInstance())
                    return this;
                if (other.hasBeginTime()) {
                    this.bitField0_ |= 0x1;
                    this.beginTime_ = other.beginTime_;
                    onChanged();
                }
                if (other.hasEndTime()) {
                    this.bitField0_ |= 0x2;
                    this.endTime_ = other.endTime_;
                    onChanged();
                }
                if (other.hasDescribe()) {
                    this.bitField0_ |= 0x4;
                    this.describe_ = other.describe_;
                    onChanged();
                }
                if (this.superPackageAwardInfoBuilder_ == null) {
                    if (!other.superPackageAwardInfo_.isEmpty()) {
                        if (this.superPackageAwardInfo_.isEmpty()) {
                            this.superPackageAwardInfo_ = other.superPackageAwardInfo_;
                            this.bitField0_ &= 0xFFFFFFF7;
                        } else {
                            ensureSuperPackageAwardInfoIsMutable();
                            this.superPackageAwardInfo_.addAll(other.superPackageAwardInfo_);
                        }
                        onChanged();
                    }
                } else if (!other.superPackageAwardInfo_.isEmpty()) {
                    if (this.superPackageAwardInfoBuilder_.isEmpty()) {
                        this.superPackageAwardInfoBuilder_.dispose();
                        this.superPackageAwardInfoBuilder_ = null;
                        this.superPackageAwardInfo_ = other.superPackageAwardInfo_;
                        this.bitField0_ &= 0xFFFFFFF7;
                        this.superPackageAwardInfoBuilder_ = ActivityFavorHandler.SuperPackageInfo.alwaysUseFieldBuilders ? getSuperPackageAwardInfoFieldBuilder() : null;
                    } else {
                        this.superPackageAwardInfoBuilder_.addAllMessages(other.superPackageAwardInfo_);
                    }
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasBeginTime())
                    return false;
                if (!hasEndTime())
                    return false;
                if (!hasDescribe())
                    return false;
                for (int i = 0; i < getSuperPackageAwardInfoCount(); i++) {
                    if (!getSuperPackageAwardInfo(i).isInitialized())
                        return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.SuperPackageInfo parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.SuperPackageInfo) ActivityFavorHandler.SuperPackageInfo.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.SuperPackageInfo) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasBeginTime() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public String getBeginTime() {
                Object ref = this.beginTime_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.beginTime_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getBeginTimeBytes() {
                Object ref = this.beginTime_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.beginTime_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setBeginTime(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.beginTime_ = value;
                onChanged();
                return this;
            }

            public Builder clearBeginTime() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.beginTime_ = ActivityFavorHandler.SuperPackageInfo.getDefaultInstance().getBeginTime();
                onChanged();
                return this;
            }

            public Builder setBeginTimeBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.beginTime_ = value;
                onChanged();
                return this;
            }

            public boolean hasEndTime() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getEndTime() {
                Object ref = this.endTime_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.endTime_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getEndTimeBytes() {
                Object ref = this.endTime_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.endTime_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setEndTime(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.endTime_ = value;
                onChanged();
                return this;
            }

            public Builder clearEndTime() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.endTime_ = ActivityFavorHandler.SuperPackageInfo.getDefaultInstance().getEndTime();
                onChanged();
                return this;
            }

            public Builder setEndTimeBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.endTime_ = value;
                onChanged();
                return this;
            }

            public boolean hasDescribe() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public String getDescribe() {
                Object ref = this.describe_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.describe_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getDescribeBytes() {
                Object ref = this.describe_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.describe_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setDescribe(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x4;
                this.describe_ = value;
                onChanged();
                return this;
            }

            public Builder clearDescribe() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.describe_ = ActivityFavorHandler.SuperPackageInfo.getDefaultInstance().getDescribe();
                onChanged();
                return this;
            }

            public Builder setDescribeBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x4;
                this.describe_ = value;
                onChanged();
                return this;
            }

            private void ensureSuperPackageAwardInfoIsMutable() {
                if ((this.bitField0_ & 0x8) != 8) {
                    this.superPackageAwardInfo_ = new ArrayList<>(this.superPackageAwardInfo_);
                    this.bitField0_ |= 0x8;
                }
            }

            public List<ActivityFavorHandler.SuperPackageAwardInfo> getSuperPackageAwardInfoList() {
                if (this.superPackageAwardInfoBuilder_ == null)
                    return Collections.unmodifiableList(this.superPackageAwardInfo_);
                return this.superPackageAwardInfoBuilder_.getMessageList();
            }

            public int getSuperPackageAwardInfoCount() {
                if (this.superPackageAwardInfoBuilder_ == null)
                    return this.superPackageAwardInfo_.size();
                return this.superPackageAwardInfoBuilder_.getCount();
            }

            public ActivityFavorHandler.SuperPackageAwardInfo getSuperPackageAwardInfo(int index) {
                if (this.superPackageAwardInfoBuilder_ == null)
                    return this.superPackageAwardInfo_.get(index);
                return (ActivityFavorHandler.SuperPackageAwardInfo) this.superPackageAwardInfoBuilder_.getMessage(index);
            }

            public Builder setSuperPackageAwardInfo(int index, ActivityFavorHandler.SuperPackageAwardInfo value) {
                if (this.superPackageAwardInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureSuperPackageAwardInfoIsMutable();
                    this.superPackageAwardInfo_.set(index, value);
                    onChanged();
                } else {
                    this.superPackageAwardInfoBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setSuperPackageAwardInfo(int index, ActivityFavorHandler.SuperPackageAwardInfo.Builder builderForValue) {
                if (this.superPackageAwardInfoBuilder_ == null) {
                    ensureSuperPackageAwardInfoIsMutable();
                    this.superPackageAwardInfo_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.superPackageAwardInfoBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addSuperPackageAwardInfo(ActivityFavorHandler.SuperPackageAwardInfo value) {
                if (this.superPackageAwardInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureSuperPackageAwardInfoIsMutable();
                    this.superPackageAwardInfo_.add(value);
                    onChanged();
                } else {
                    this.superPackageAwardInfoBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addSuperPackageAwardInfo(int index, ActivityFavorHandler.SuperPackageAwardInfo value) {
                if (this.superPackageAwardInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureSuperPackageAwardInfoIsMutable();
                    this.superPackageAwardInfo_.add(index, value);
                    onChanged();
                } else {
                    this.superPackageAwardInfoBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addSuperPackageAwardInfo(ActivityFavorHandler.SuperPackageAwardInfo.Builder builderForValue) {
                if (this.superPackageAwardInfoBuilder_ == null) {
                    ensureSuperPackageAwardInfoIsMutable();
                    this.superPackageAwardInfo_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.superPackageAwardInfoBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addSuperPackageAwardInfo(int index, ActivityFavorHandler.SuperPackageAwardInfo.Builder builderForValue) {
                if (this.superPackageAwardInfoBuilder_ == null) {
                    ensureSuperPackageAwardInfoIsMutable();
                    this.superPackageAwardInfo_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.superPackageAwardInfoBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllSuperPackageAwardInfo(Iterable<? extends ActivityFavorHandler.SuperPackageAwardInfo> values) {
                if (this.superPackageAwardInfoBuilder_ == null) {
                    ensureSuperPackageAwardInfoIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.superPackageAwardInfo_);
                    onChanged();
                } else {
                    this.superPackageAwardInfoBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearSuperPackageAwardInfo() {
                if (this.superPackageAwardInfoBuilder_ == null) {
                    this.superPackageAwardInfo_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFF7;
                    onChanged();
                } else {
                    this.superPackageAwardInfoBuilder_.clear();
                }
                return this;
            }

            public Builder removeSuperPackageAwardInfo(int index) {
                if (this.superPackageAwardInfoBuilder_ == null) {
                    ensureSuperPackageAwardInfoIsMutable();
                    this.superPackageAwardInfo_.remove(index);
                    onChanged();
                } else {
                    this.superPackageAwardInfoBuilder_.remove(index);
                }
                return this;
            }

            public ActivityFavorHandler.SuperPackageAwardInfo.Builder getSuperPackageAwardInfoBuilder(int index) {
                return (ActivityFavorHandler.SuperPackageAwardInfo.Builder) getSuperPackageAwardInfoFieldBuilder().getBuilder(index);
            }

            public ActivityFavorHandler.SuperPackageAwardInfoOrBuilder getSuperPackageAwardInfoOrBuilder(int index) {
                if (this.superPackageAwardInfoBuilder_ == null)
                    return this.superPackageAwardInfo_.get(index);
                return (ActivityFavorHandler.SuperPackageAwardInfoOrBuilder) this.superPackageAwardInfoBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends ActivityFavorHandler.SuperPackageAwardInfoOrBuilder> getSuperPackageAwardInfoOrBuilderList() {
                if (this.superPackageAwardInfoBuilder_ != null)
                    return this.superPackageAwardInfoBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.superPackageAwardInfo_);
            }

            public ActivityFavorHandler.SuperPackageAwardInfo.Builder addSuperPackageAwardInfoBuilder() {
                return (ActivityFavorHandler.SuperPackageAwardInfo.Builder) getSuperPackageAwardInfoFieldBuilder().addBuilder(ActivityFavorHandler.SuperPackageAwardInfo.getDefaultInstance());
            }

            public ActivityFavorHandler.SuperPackageAwardInfo.Builder addSuperPackageAwardInfoBuilder(int index) {
                return (ActivityFavorHandler.SuperPackageAwardInfo.Builder) getSuperPackageAwardInfoFieldBuilder().addBuilder(index, ActivityFavorHandler.SuperPackageAwardInfo.getDefaultInstance());
            }

            public List<ActivityFavorHandler.SuperPackageAwardInfo.Builder> getSuperPackageAwardInfoBuilderList() {
                return getSuperPackageAwardInfoFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<ActivityFavorHandler.SuperPackageAwardInfo, ActivityFavorHandler.SuperPackageAwardInfo.Builder, ActivityFavorHandler.SuperPackageAwardInfoOrBuilder> getSuperPackageAwardInfoFieldBuilder() {
                if (this.superPackageAwardInfoBuilder_ == null) {
                    this.superPackageAwardInfoBuilder_ = new RepeatedFieldBuilder(this.superPackageAwardInfo_, ((this.bitField0_ & 0x8) == 8), getParentForChildren(), isClean());
                    this.superPackageAwardInfo_ = null;
                }
                return this.superPackageAwardInfoBuilder_;
            }
        }
    }

    public static final class SuperPackageGetInfoRequest extends GeneratedMessage implements SuperPackageGetInfoRequestOrBuilder {
        private static final SuperPackageGetInfoRequest defaultInstance = new SuperPackageGetInfoRequest(true);
        private final UnknownFieldSet unknownFields;

        private SuperPackageGetInfoRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SuperPackageGetInfoRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SuperPackageGetInfoRequest getDefaultInstance() {
            return defaultInstance;
        }

        public SuperPackageGetInfoRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SuperPackageGetInfoRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageGetInfoRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageGetInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(SuperPackageGetInfoRequest.class, Builder.class);
        }

        public static Parser<SuperPackageGetInfoRequest> PARSER = (Parser<SuperPackageGetInfoRequest>) new AbstractParser<SuperPackageGetInfoRequest>() {
            public ActivityFavorHandler.SuperPackageGetInfoRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.SuperPackageGetInfoRequest(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SuperPackageGetInfoRequest> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SuperPackageGetInfoRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SuperPackageGetInfoRequest) PARSER.parseFrom(data);
        }

        public static SuperPackageGetInfoRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SuperPackageGetInfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SuperPackageGetInfoRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SuperPackageGetInfoRequest) PARSER.parseFrom(data);
        }

        public static SuperPackageGetInfoRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SuperPackageGetInfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SuperPackageGetInfoRequest parseFrom(InputStream input) throws IOException {
            return (SuperPackageGetInfoRequest) PARSER.parseFrom(input);
        }

        public static SuperPackageGetInfoRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SuperPackageGetInfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static SuperPackageGetInfoRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (SuperPackageGetInfoRequest) PARSER.parseDelimitedFrom(input);
        }

        public static SuperPackageGetInfoRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SuperPackageGetInfoRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static SuperPackageGetInfoRequest parseFrom(CodedInputStream input) throws IOException {
            return (SuperPackageGetInfoRequest) PARSER.parseFrom(input);
        }

        public static SuperPackageGetInfoRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SuperPackageGetInfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SuperPackageGetInfoRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.SuperPackageGetInfoRequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageGetInfoRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageGetInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.SuperPackageGetInfoRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.SuperPackageGetInfoRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageGetInfoRequest_descriptor;
            }

            public ActivityFavorHandler.SuperPackageGetInfoRequest getDefaultInstanceForType() {
                return ActivityFavorHandler.SuperPackageGetInfoRequest.getDefaultInstance();
            }

            public ActivityFavorHandler.SuperPackageGetInfoRequest build() {
                ActivityFavorHandler.SuperPackageGetInfoRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.SuperPackageGetInfoRequest buildPartial() {
                ActivityFavorHandler.SuperPackageGetInfoRequest result = new ActivityFavorHandler.SuperPackageGetInfoRequest(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.SuperPackageGetInfoRequest)
                    return mergeFrom((ActivityFavorHandler.SuperPackageGetInfoRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.SuperPackageGetInfoRequest other) {
                if (other == ActivityFavorHandler.SuperPackageGetInfoRequest.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.SuperPackageGetInfoRequest parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.SuperPackageGetInfoRequest) ActivityFavorHandler.SuperPackageGetInfoRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.SuperPackageGetInfoRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class SuperPackageGetInfoResponse
            extends GeneratedMessage
            implements SuperPackageGetInfoResponseOrBuilder {
        private static final SuperPackageGetInfoResponse defaultInstance = new SuperPackageGetInfoResponse(true);
        private final UnknownFieldSet unknownFields;

        private SuperPackageGetInfoResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SuperPackageGetInfoResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SuperPackageGetInfoResponse getDefaultInstance() {
            return defaultInstance;
        }

        public SuperPackageGetInfoResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SuperPackageGetInfoResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    ActivityFavorHandler.SuperPackageInfo.Builder subBuilder;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                        case 26:
                            subBuilder = null;
                            if ((this.bitField0_ & 0x4) == 4) subBuilder = this.superPackageInfo_.toBuilder();
                            this.superPackageInfo_ = (ActivityFavorHandler.SuperPackageInfo) input.readMessage(ActivityFavorHandler.SuperPackageInfo.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(this.superPackageInfo_);
                                this.superPackageInfo_ = subBuilder.buildPartial();
                            }
                            this.bitField0_ |= 0x4;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageGetInfoResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageGetInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(SuperPackageGetInfoResponse.class, Builder.class);
        }

        public static Parser<SuperPackageGetInfoResponse> PARSER = (Parser<SuperPackageGetInfoResponse>) new AbstractParser<SuperPackageGetInfoResponse>() {
            public ActivityFavorHandler.SuperPackageGetInfoResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.SuperPackageGetInfoResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int SUPERPACKAGEINFO_FIELD_NUMBER = 3;
        private ActivityFavorHandler.SuperPackageInfo superPackageInfo_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SuperPackageGetInfoResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        static {
            defaultInstance.initFields();
        }


        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }


        public boolean hasSuperPackageInfo() {
            return ((this.bitField0_ & 0x4) == 4);
        }


        public ActivityFavorHandler.SuperPackageInfo getSuperPackageInfo() {
            return this.superPackageInfo_;
        }


        public ActivityFavorHandler.SuperPackageInfoOrBuilder getSuperPackageInfoOrBuilder() {
            return this.superPackageInfo_;
        }


        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
            this.superPackageInfo_ = ActivityFavorHandler.SuperPackageInfo.getDefaultInstance();
        }


        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (hasSuperPackageInfo() && !getSuperPackageInfo().isInitialized()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }


        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeInt32(1, this.s2CCode_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeBytes(2, getS2CMsgBytes());
            }
            if ((this.bitField0_ & 0x4) == 4) {
                output.writeMessage(3, (MessageLite) this.superPackageInfo_);
            }
            getUnknownFields().writeTo(output);
        }


        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            }
            if ((this.bitField0_ & 0x4) == 4) {
                size += CodedOutputStream.computeMessageSize(3, (MessageLite) this.superPackageInfo_);
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }


        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }


        public static SuperPackageGetInfoResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SuperPackageGetInfoResponse) PARSER.parseFrom(data);
        }


        public static SuperPackageGetInfoResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SuperPackageGetInfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }


        public static SuperPackageGetInfoResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SuperPackageGetInfoResponse) PARSER.parseFrom(data);
        }


        public static SuperPackageGetInfoResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SuperPackageGetInfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }


        public static SuperPackageGetInfoResponse parseFrom(InputStream input) throws IOException {
            return (SuperPackageGetInfoResponse) PARSER.parseFrom(input);
        }


        public static SuperPackageGetInfoResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SuperPackageGetInfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }


        public static SuperPackageGetInfoResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (SuperPackageGetInfoResponse) PARSER.parseDelimitedFrom(input);
        }


        public static SuperPackageGetInfoResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SuperPackageGetInfoResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }


        public static SuperPackageGetInfoResponse parseFrom(CodedInputStream input) throws IOException {
            return (SuperPackageGetInfoResponse) PARSER.parseFrom(input);
        }


        public static SuperPackageGetInfoResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SuperPackageGetInfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }


        public static Builder newBuilder() {
            return Builder.create();
        }


        public Builder newBuilderForType() {
            return newBuilder();
        }


        public static Builder newBuilder(SuperPackageGetInfoResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }


        public Builder toBuilder() {
            return newBuilder(this);
        }


        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }


        public static final class Builder
                extends GeneratedMessage.Builder<Builder>
                implements ActivityFavorHandler.SuperPackageGetInfoResponseOrBuilder {
            private int bitField0_;


            private int s2CCode_;


            private Object s2CMsg_;


            private ActivityFavorHandler.SuperPackageInfo superPackageInfo_;


            private SingleFieldBuilder<ActivityFavorHandler.SuperPackageInfo, ActivityFavorHandler.SuperPackageInfo.Builder, ActivityFavorHandler.SuperPackageInfoOrBuilder> superPackageInfoBuilder_;


            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageGetInfoResponse_descriptor;
            }


            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageGetInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.SuperPackageGetInfoResponse.class, Builder.class);
            }


            private Builder() {
                this.s2CMsg_ = "";
                this.superPackageInfo_ = ActivityFavorHandler.SuperPackageInfo.getDefaultInstance();
                maybeForceBuilderInitialization();
            }


            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                this.superPackageInfo_ = ActivityFavorHandler.SuperPackageInfo.getDefaultInstance();
                maybeForceBuilderInitialization();
            }


            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.SuperPackageGetInfoResponse.alwaysUseFieldBuilders) {
                    getSuperPackageInfoFieldBuilder();
                }
            }


            private static Builder create() {
                return new Builder();
            }


            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                if (this.superPackageInfoBuilder_ == null) {
                    this.superPackageInfo_ = ActivityFavorHandler.SuperPackageInfo.getDefaultInstance();
                } else {
                    this.superPackageInfoBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }


            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }


            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageGetInfoResponse_descriptor;
            }


            public ActivityFavorHandler.SuperPackageGetInfoResponse getDefaultInstanceForType() {
                return ActivityFavorHandler.SuperPackageGetInfoResponse.getDefaultInstance();
            }


            public ActivityFavorHandler.SuperPackageGetInfoResponse build() {
                ActivityFavorHandler.SuperPackageGetInfoResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }


            public ActivityFavorHandler.SuperPackageGetInfoResponse buildPartial() {
                ActivityFavorHandler.SuperPackageGetInfoResponse result = new ActivityFavorHandler.SuperPackageGetInfoResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) {
                    to_bitField0_ |= 0x1;
                }
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) {
                    to_bitField0_ |= 0x2;
                }
                result.s2CMsg_ = this.s2CMsg_;
                if ((from_bitField0_ & 0x4) == 4) {
                    to_bitField0_ |= 0x4;
                }
                if (this.superPackageInfoBuilder_ == null) {
                    result.superPackageInfo_ = this.superPackageInfo_;
                } else {
                    result.superPackageInfo_ = (ActivityFavorHandler.SuperPackageInfo) this.superPackageInfoBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }


            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.SuperPackageGetInfoResponse) {
                    return mergeFrom((ActivityFavorHandler.SuperPackageGetInfoResponse) other);
                }
                super.mergeFrom(other);
                return this;
            }


            public Builder mergeFrom(ActivityFavorHandler.SuperPackageGetInfoResponse other) {
                if (other == ActivityFavorHandler.SuperPackageGetInfoResponse.getDefaultInstance()) {
                    return this;
                }
                if (other.hasS2CCode()) {
                    setS2CCode(other.getS2CCode());
                }
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (other.hasSuperPackageInfo()) {
                    mergeSuperPackageInfo(other.getSuperPackageInfo());
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }


            public final boolean isInitialized() {
                if (!hasS2CCode()) {
                    return false;
                }
                if (hasSuperPackageInfo() && !getSuperPackageInfo().isInitialized()) {
                    return false;
                }
                return true;
            }


            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.SuperPackageGetInfoResponse parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.SuperPackageGetInfoResponse) ActivityFavorHandler.SuperPackageGetInfoResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.SuperPackageGetInfoResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }


            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }


            public int getS2CCode() {
                return this.s2CCode_;
            }


            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }


            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }


            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }


            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.s2CMsg_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setS2CMsg(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }


            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = ActivityFavorHandler.SuperPackageGetInfoResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }


            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }


            public boolean hasSuperPackageInfo() {
                return ((this.bitField0_ & 0x4) == 4);
            }


            public ActivityFavorHandler.SuperPackageInfo getSuperPackageInfo() {
                if (this.superPackageInfoBuilder_ == null) {
                    return this.superPackageInfo_;
                }
                return (ActivityFavorHandler.SuperPackageInfo) this.superPackageInfoBuilder_.getMessage();
            }


            public Builder setSuperPackageInfo(ActivityFavorHandler.SuperPackageInfo value) {
                if (this.superPackageInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    this.superPackageInfo_ = value;
                    onChanged();
                } else {
                    this.superPackageInfoBuilder_.setMessage(value);
                }
                this.bitField0_ |= 0x4;
                return this;
            }


            public Builder setSuperPackageInfo(ActivityFavorHandler.SuperPackageInfo.Builder builderForValue) {
                if (this.superPackageInfoBuilder_ == null) {
                    this.superPackageInfo_ = builderForValue.build();
                    onChanged();
                } else {
                    this.superPackageInfoBuilder_.setMessage(builderForValue.build());
                }
                this.bitField0_ |= 0x4;
                return this;
            }


            public Builder mergeSuperPackageInfo(ActivityFavorHandler.SuperPackageInfo value) {
                if (this.superPackageInfoBuilder_ == null) {
                    if ((this.bitField0_ & 0x4) == 4 && this.superPackageInfo_ != ActivityFavorHandler.SuperPackageInfo.getDefaultInstance()) {
                        this.superPackageInfo_ = ActivityFavorHandler.SuperPackageInfo.newBuilder(this.superPackageInfo_).mergeFrom(value).buildPartial();
                    } else {
                        this.superPackageInfo_ = value;
                    }
                    onChanged();
                } else {
                    this.superPackageInfoBuilder_.mergeFrom(value);
                }
                this.bitField0_ |= 0x4;
                return this;
            }


            public Builder clearSuperPackageInfo() {
                if (this.superPackageInfoBuilder_ == null) {
                    this.superPackageInfo_ = ActivityFavorHandler.SuperPackageInfo.getDefaultInstance();
                    onChanged();
                } else {
                    this.superPackageInfoBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }


            public ActivityFavorHandler.SuperPackageInfo.Builder getSuperPackageInfoBuilder() {
                this.bitField0_ |= 0x4;
                onChanged();
                return (ActivityFavorHandler.SuperPackageInfo.Builder) getSuperPackageInfoFieldBuilder().getBuilder();
            }


            public ActivityFavorHandler.SuperPackageInfoOrBuilder getSuperPackageInfoOrBuilder() {
                if (this.superPackageInfoBuilder_ != null) {
                    return (ActivityFavorHandler.SuperPackageInfoOrBuilder) this.superPackageInfoBuilder_.getMessageOrBuilder();
                }
                return this.superPackageInfo_;
            }


            private SingleFieldBuilder<ActivityFavorHandler.SuperPackageInfo, ActivityFavorHandler.SuperPackageInfo.Builder, ActivityFavorHandler.SuperPackageInfoOrBuilder> getSuperPackageInfoFieldBuilder() {
                if (this.superPackageInfoBuilder_ == null) {
                    this.superPackageInfoBuilder_ = new SingleFieldBuilder(getSuperPackageInfo(), getParentForChildren(), isClean());
                    this.superPackageInfo_ = null;
                }
                return this.superPackageInfoBuilder_;
            }
        }
    }


    public static final class SuperPackageBuyRequest
            extends GeneratedMessage
            implements SuperPackageBuyRequestOrBuilder {
        private static final SuperPackageBuyRequest defaultInstance = new SuperPackageBuyRequest(true);
        private final UnknownFieldSet unknownFields;

        private SuperPackageBuyRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SuperPackageBuyRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SuperPackageBuyRequest getDefaultInstance() {
            return defaultInstance;
        }

        public SuperPackageBuyRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SuperPackageBuyRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.packageId_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.channelId_ = input.readInt32();
                            break;
                        case 26:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x4;
                            this.c2SImei_ = bs;
                            break;
                        case 32:
                            this.bitField0_ |= 0x8;
                            this.c2SOs_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageBuyRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageBuyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(SuperPackageBuyRequest.class, Builder.class);
        }

        public static Parser<SuperPackageBuyRequest> PARSER = (Parser<SuperPackageBuyRequest>) new AbstractParser<SuperPackageBuyRequest>() {
            public ActivityFavorHandler.SuperPackageBuyRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.SuperPackageBuyRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int PACKAGEID_FIELD_NUMBER = 1;
        private int packageId_;
        public static final int CHANNELID_FIELD_NUMBER = 2;
        private int channelId_;
        public static final int C2S_IMEI_FIELD_NUMBER = 3;
        private Object c2SImei_;
        public static final int C2S_OS_FIELD_NUMBER = 4;
        private int c2SOs_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SuperPackageBuyRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasPackageId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getPackageId() {
            return this.packageId_;
        }

        public boolean hasChannelId() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getChannelId() {
            return this.channelId_;
        }

        public boolean hasC2SImei() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public String getC2SImei() {
            Object ref = this.c2SImei_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.c2SImei_ = s;
            return s;
        }

        public ByteString getC2SImeiBytes() {
            Object ref = this.c2SImei_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.c2SImei_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasC2SOs() {
            return ((this.bitField0_ & 0x8) == 8);
        }

        public int getC2SOs() {
            return this.c2SOs_;
        }

        private void initFields() {
            this.packageId_ = 0;
            this.channelId_ = 0;
            this.c2SImei_ = "";
            this.c2SOs_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasPackageId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasChannelId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.packageId_);
            if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.channelId_);
            if ((this.bitField0_ & 0x4) == 4) output.writeBytes(3, getC2SImeiBytes());
            if ((this.bitField0_ & 0x8) == 8) output.writeInt32(4, this.c2SOs_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.packageId_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.channelId_);
            if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeBytesSize(3, getC2SImeiBytes());
            if ((this.bitField0_ & 0x8) == 8) size += CodedOutputStream.computeInt32Size(4, this.c2SOs_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SuperPackageBuyRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SuperPackageBuyRequest) PARSER.parseFrom(data);
        }

        public static SuperPackageBuyRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SuperPackageBuyRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SuperPackageBuyRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SuperPackageBuyRequest) PARSER.parseFrom(data);
        }

        public static SuperPackageBuyRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SuperPackageBuyRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SuperPackageBuyRequest parseFrom(InputStream input) throws IOException {
            return (SuperPackageBuyRequest) PARSER.parseFrom(input);
        }

        public static SuperPackageBuyRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SuperPackageBuyRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static SuperPackageBuyRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (SuperPackageBuyRequest) PARSER.parseDelimitedFrom(input);
        }

        public static SuperPackageBuyRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SuperPackageBuyRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static SuperPackageBuyRequest parseFrom(CodedInputStream input) throws IOException {
            return (SuperPackageBuyRequest) PARSER.parseFrom(input);
        }

        public static SuperPackageBuyRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SuperPackageBuyRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SuperPackageBuyRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.SuperPackageBuyRequestOrBuilder {
            private int bitField0_;
            private int packageId_;
            private int channelId_;
            private Object c2SImei_;
            private int c2SOs_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageBuyRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageBuyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.SuperPackageBuyRequest.class, Builder.class);
            }

            private Builder() {
                this.c2SImei_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.c2SImei_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.SuperPackageBuyRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.packageId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.channelId_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                this.c2SImei_ = "";
                this.bitField0_ &= 0xFFFFFFFB;
                this.c2SOs_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageBuyRequest_descriptor;
            }

            public ActivityFavorHandler.SuperPackageBuyRequest getDefaultInstanceForType() {
                return ActivityFavorHandler.SuperPackageBuyRequest.getDefaultInstance();
            }

            public ActivityFavorHandler.SuperPackageBuyRequest build() {
                ActivityFavorHandler.SuperPackageBuyRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.SuperPackageBuyRequest buildPartial() {
                ActivityFavorHandler.SuperPackageBuyRequest result = new ActivityFavorHandler.SuperPackageBuyRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.packageId_ = this.packageId_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.channelId_ = this.channelId_;
                if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;
                result.c2SImei_ = this.c2SImei_;
                if ((from_bitField0_ & 0x8) == 8) to_bitField0_ |= 0x8;
                result.c2SOs_ = this.c2SOs_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.SuperPackageBuyRequest)
                    return mergeFrom((ActivityFavorHandler.SuperPackageBuyRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.SuperPackageBuyRequest other) {
                if (other == ActivityFavorHandler.SuperPackageBuyRequest.getDefaultInstance()) return this;
                if (other.hasPackageId()) setPackageId(other.getPackageId());
                if (other.hasChannelId()) setChannelId(other.getChannelId());
                if (other.hasC2SImei()) {
                    this.bitField0_ |= 0x4;
                    this.c2SImei_ = other.c2SImei_;
                    onChanged();
                }
                if (other.hasC2SOs()) setC2SOs(other.getC2SOs());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasPackageId()) return false;
                if (!hasChannelId()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.SuperPackageBuyRequest parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.SuperPackageBuyRequest) ActivityFavorHandler.SuperPackageBuyRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.SuperPackageBuyRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasPackageId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getPackageId() {
                return this.packageId_;
            }

            public Builder setPackageId(int value) {
                this.bitField0_ |= 0x1;
                this.packageId_ = value;
                onChanged();
                return this;
            }

            public Builder clearPackageId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.packageId_ = 0;
                onChanged();
                return this;
            }

            public boolean hasChannelId() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getChannelId() {
                return this.channelId_;
            }

            public Builder setChannelId(int value) {
                this.bitField0_ |= 0x2;
                this.channelId_ = value;
                onChanged();
                return this;
            }

            public Builder clearChannelId() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.channelId_ = 0;
                onChanged();
                return this;
            }

            public boolean hasC2SImei() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public String getC2SImei() {
                Object ref = this.c2SImei_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.c2SImei_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getC2SImeiBytes() {
                Object ref = this.c2SImei_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.c2SImei_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setC2SImei(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x4;
                this.c2SImei_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2SImei() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.c2SImei_ = ActivityFavorHandler.SuperPackageBuyRequest.getDefaultInstance().getC2SImei();
                onChanged();
                return this;
            }

            public Builder setC2SImeiBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x4;
                this.c2SImei_ = value;
                onChanged();
                return this;
            }

            public boolean hasC2SOs() {
                return ((this.bitField0_ & 0x8) == 8);
            }

            public int getC2SOs() {
                return this.c2SOs_;
            }

            public Builder setC2SOs(int value) {
                this.bitField0_ |= 0x8;
                this.c2SOs_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2SOs() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.c2SOs_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class SuperPackageBuyResponse
            extends GeneratedMessage
            implements SuperPackageBuyResponseOrBuilder {
        private static final SuperPackageBuyResponse defaultInstance = new SuperPackageBuyResponse(true);
        private final UnknownFieldSet unknownFields;

        private SuperPackageBuyResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SuperPackageBuyResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SuperPackageBuyResponse getDefaultInstance() {
            return defaultInstance;
        }

        public SuperPackageBuyResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SuperPackageBuyResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                        case 26:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x4;
                            this.s2COrderId_ = bs;
                            break;
                        case 34:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x8;
                            this.appNotifyUrl_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageBuyResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageBuyResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(SuperPackageBuyResponse.class, Builder.class);
        }

        public static Parser<SuperPackageBuyResponse> PARSER = (Parser<SuperPackageBuyResponse>) new AbstractParser<SuperPackageBuyResponse>() {
            public ActivityFavorHandler.SuperPackageBuyResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.SuperPackageBuyResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int S2C_ORDERID_FIELD_NUMBER = 3;
        private Object s2COrderId_;
        public static final int APP_NOTIFY_URL_FIELD_NUMBER = 4;
        private Object appNotifyUrl_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SuperPackageBuyResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        static {
            defaultInstance.initFields();
        }


        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }


        public boolean hasS2COrderId() {
            return ((this.bitField0_ & 0x4) == 4);
        }


        public String getS2COrderId() {
            Object ref = this.s2COrderId_;
            if (ref instanceof String) {
                return (String) ref;
            }
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                this.s2COrderId_ = s;
            }
            return s;
        }


        public ByteString getS2COrderIdBytes() {
            Object ref = this.s2COrderId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2COrderId_ = b;
                return b;
            }
            return (ByteString) ref;
        }


        public boolean hasAppNotifyUrl() {
            return ((this.bitField0_ & 0x8) == 8);
        }


        public String getAppNotifyUrl() {
            Object ref = this.appNotifyUrl_;
            if (ref instanceof String) {
                return (String) ref;
            }
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                this.appNotifyUrl_ = s;
            }
            return s;
        }


        public ByteString getAppNotifyUrlBytes() {
            Object ref = this.appNotifyUrl_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.appNotifyUrl_ = b;
                return b;
            }
            return (ByteString) ref;
        }


        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
            this.s2COrderId_ = "";
            this.appNotifyUrl_ = "";
        }


        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }


        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeInt32(1, this.s2CCode_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeBytes(2, getS2CMsgBytes());
            }
            if ((this.bitField0_ & 0x4) == 4) {
                output.writeBytes(3, getS2COrderIdBytes());
            }
            if ((this.bitField0_ & 0x8) == 8) {
                output.writeBytes(4, getAppNotifyUrlBytes());
            }
            getUnknownFields().writeTo(output);
        }


        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            }
            if ((this.bitField0_ & 0x4) == 4) {
                size += CodedOutputStream.computeBytesSize(3, getS2COrderIdBytes());
            }
            if ((this.bitField0_ & 0x8) == 8) {
                size += CodedOutputStream.computeBytesSize(4, getAppNotifyUrlBytes());
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }


        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }


        public static SuperPackageBuyResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SuperPackageBuyResponse) PARSER.parseFrom(data);
        }


        public static SuperPackageBuyResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SuperPackageBuyResponse) PARSER.parseFrom(data, extensionRegistry);
        }


        public static SuperPackageBuyResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SuperPackageBuyResponse) PARSER.parseFrom(data);
        }


        public static SuperPackageBuyResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SuperPackageBuyResponse) PARSER.parseFrom(data, extensionRegistry);
        }


        public static SuperPackageBuyResponse parseFrom(InputStream input) throws IOException {
            return (SuperPackageBuyResponse) PARSER.parseFrom(input);
        }


        public static SuperPackageBuyResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SuperPackageBuyResponse) PARSER.parseFrom(input, extensionRegistry);
        }


        public static SuperPackageBuyResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (SuperPackageBuyResponse) PARSER.parseDelimitedFrom(input);
        }


        public static SuperPackageBuyResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SuperPackageBuyResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }


        public static SuperPackageBuyResponse parseFrom(CodedInputStream input) throws IOException {
            return (SuperPackageBuyResponse) PARSER.parseFrom(input);
        }


        public static SuperPackageBuyResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SuperPackageBuyResponse) PARSER.parseFrom(input, extensionRegistry);
        }


        public static Builder newBuilder() {
            return Builder.create();
        }


        public Builder newBuilderForType() {
            return newBuilder();
        }


        public static Builder newBuilder(SuperPackageBuyResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }


        public Builder toBuilder() {
            return newBuilder(this);
        }


        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }


        public static final class Builder
                extends GeneratedMessage.Builder<Builder>
                implements ActivityFavorHandler.SuperPackageBuyResponseOrBuilder {
            private int bitField0_;


            private int s2CCode_;


            private Object s2CMsg_;


            private Object s2COrderId_;


            private Object appNotifyUrl_;


            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageBuyResponse_descriptor;
            }


            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageBuyResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.SuperPackageBuyResponse.class, Builder.class);
            }


            private Builder() {
                this.s2CMsg_ = "";
                this.s2COrderId_ = "";
                this.appNotifyUrl_ = "";
                maybeForceBuilderInitialization();
            }


            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                this.s2COrderId_ = "";
                this.appNotifyUrl_ = "";
                maybeForceBuilderInitialization();
            }


            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.SuperPackageBuyResponse.alwaysUseFieldBuilders) ;
            }


            private static Builder create() {
                return new Builder();
            }


            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2COrderId_ = "";
                this.bitField0_ &= 0xFFFFFFFB;
                this.appNotifyUrl_ = "";
                this.bitField0_ &= 0xFFFFFFF7;
                return this;
            }


            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }


            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageBuyResponse_descriptor;
            }


            public ActivityFavorHandler.SuperPackageBuyResponse getDefaultInstanceForType() {
                return ActivityFavorHandler.SuperPackageBuyResponse.getDefaultInstance();
            }


            public ActivityFavorHandler.SuperPackageBuyResponse build() {
                ActivityFavorHandler.SuperPackageBuyResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }


            public ActivityFavorHandler.SuperPackageBuyResponse buildPartial() {
                ActivityFavorHandler.SuperPackageBuyResponse result = new ActivityFavorHandler.SuperPackageBuyResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) {
                    to_bitField0_ |= 0x1;
                }
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) {
                    to_bitField0_ |= 0x2;
                }
                result.s2CMsg_ = this.s2CMsg_;
                if ((from_bitField0_ & 0x4) == 4) {
                    to_bitField0_ |= 0x4;
                }
                result.s2COrderId_ = this.s2COrderId_;
                if ((from_bitField0_ & 0x8) == 8) {
                    to_bitField0_ |= 0x8;
                }
                result.appNotifyUrl_ = this.appNotifyUrl_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }


            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.SuperPackageBuyResponse) {
                    return mergeFrom((ActivityFavorHandler.SuperPackageBuyResponse) other);
                }
                super.mergeFrom(other);
                return this;
            }


            public Builder mergeFrom(ActivityFavorHandler.SuperPackageBuyResponse other) {
                if (other == ActivityFavorHandler.SuperPackageBuyResponse.getDefaultInstance()) {
                    return this;
                }
                if (other.hasS2CCode()) {
                    setS2CCode(other.getS2CCode());
                }
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (other.hasS2COrderId()) {
                    this.bitField0_ |= 0x4;
                    this.s2COrderId_ = other.s2COrderId_;
                    onChanged();
                }
                if (other.hasAppNotifyUrl()) {
                    this.bitField0_ |= 0x8;
                    this.appNotifyUrl_ = other.appNotifyUrl_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }


            public final boolean isInitialized() {
                if (!hasS2CCode()) {
                    return false;
                }
                return true;
            }


            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.SuperPackageBuyResponse parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.SuperPackageBuyResponse) ActivityFavorHandler.SuperPackageBuyResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.SuperPackageBuyResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }


            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }


            public int getS2CCode() {
                return this.s2CCode_;
            }


            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }


            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }


            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }


            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.s2CMsg_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setS2CMsg(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }


            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = ActivityFavorHandler.SuperPackageBuyResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }


            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }


            public boolean hasS2COrderId() {
                return ((this.bitField0_ & 0x4) == 4);
            }


            public String getS2COrderId() {
                Object ref = this.s2COrderId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.s2COrderId_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getS2COrderIdBytes() {
                Object ref = this.s2COrderId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2COrderId_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setS2COrderId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x4;
                this.s2COrderId_ = value;
                onChanged();
                return this;
            }


            public Builder clearS2COrderId() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.s2COrderId_ = ActivityFavorHandler.SuperPackageBuyResponse.getDefaultInstance().getS2COrderId();
                onChanged();
                return this;
            }


            public Builder setS2COrderIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x4;
                this.s2COrderId_ = value;
                onChanged();
                return this;
            }


            public boolean hasAppNotifyUrl() {
                return ((this.bitField0_ & 0x8) == 8);
            }


            public String getAppNotifyUrl() {
                Object ref = this.appNotifyUrl_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.appNotifyUrl_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getAppNotifyUrlBytes() {
                Object ref = this.appNotifyUrl_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.appNotifyUrl_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setAppNotifyUrl(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x8;
                this.appNotifyUrl_ = value;
                onChanged();
                return this;
            }


            public Builder clearAppNotifyUrl() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.appNotifyUrl_ = ActivityFavorHandler.SuperPackageBuyResponse.getDefaultInstance().getAppNotifyUrl();
                onChanged();
                return this;
            }


            public Builder setAppNotifyUrlBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x8;
                this.appNotifyUrl_ = value;
                onChanged();
                return this;
            }
        }
    }


    public static final class SuperPackageBuyPush
            extends GeneratedMessage
            implements SuperPackageBuyPushOrBuilder {
        private static final SuperPackageBuyPush defaultInstance = new SuperPackageBuyPush(true);
        private final UnknownFieldSet unknownFields;

        private SuperPackageBuyPush(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SuperPackageBuyPush(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SuperPackageBuyPush getDefaultInstance() {
            return defaultInstance;
        }

        public SuperPackageBuyPush getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SuperPackageBuyPush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.packageId_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageBuyPush_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageBuyPush_fieldAccessorTable.ensureFieldAccessorsInitialized(SuperPackageBuyPush.class, Builder.class);
        }

        public static Parser<SuperPackageBuyPush> PARSER = (Parser<SuperPackageBuyPush>) new AbstractParser<SuperPackageBuyPush>() {
            public ActivityFavorHandler.SuperPackageBuyPush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.SuperPackageBuyPush(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int PACKAGEID_FIELD_NUMBER = 3;
        private int packageId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SuperPackageBuyPush> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasPackageId() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public int getPackageId() {
            return this.packageId_;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
            this.packageId_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasPackageId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            if ((this.bitField0_ & 0x4) == 4) output.writeInt32(3, this.packageId_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt32Size(3, this.packageId_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SuperPackageBuyPush parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SuperPackageBuyPush) PARSER.parseFrom(data);
        }

        public static SuperPackageBuyPush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SuperPackageBuyPush) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SuperPackageBuyPush parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SuperPackageBuyPush) PARSER.parseFrom(data);
        }

        public static SuperPackageBuyPush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SuperPackageBuyPush) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SuperPackageBuyPush parseFrom(InputStream input) throws IOException {
            return (SuperPackageBuyPush) PARSER.parseFrom(input);
        }

        public static SuperPackageBuyPush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SuperPackageBuyPush) PARSER.parseFrom(input, extensionRegistry);
        }

        public static SuperPackageBuyPush parseDelimitedFrom(InputStream input) throws IOException {
            return (SuperPackageBuyPush) PARSER.parseDelimitedFrom(input);
        }

        public static SuperPackageBuyPush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SuperPackageBuyPush) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static SuperPackageBuyPush parseFrom(CodedInputStream input) throws IOException {
            return (SuperPackageBuyPush) PARSER.parseFrom(input);
        }

        public static SuperPackageBuyPush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SuperPackageBuyPush) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SuperPackageBuyPush prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.SuperPackageBuyPushOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;
            private int packageId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageBuyPush_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageBuyPush_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.SuperPackageBuyPush.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.SuperPackageBuyPush.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                this.packageId_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_SuperPackageBuyPush_descriptor;
            }

            public ActivityFavorHandler.SuperPackageBuyPush getDefaultInstanceForType() {
                return ActivityFavorHandler.SuperPackageBuyPush.getDefaultInstance();
            }

            public ActivityFavorHandler.SuperPackageBuyPush build() {
                ActivityFavorHandler.SuperPackageBuyPush result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.SuperPackageBuyPush buildPartial() {
                ActivityFavorHandler.SuperPackageBuyPush result = new ActivityFavorHandler.SuperPackageBuyPush(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;
                result.packageId_ = this.packageId_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.SuperPackageBuyPush)
                    return mergeFrom((ActivityFavorHandler.SuperPackageBuyPush) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.SuperPackageBuyPush other) {
                if (other == ActivityFavorHandler.SuperPackageBuyPush.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (other.hasPackageId()) setPackageId(other.getPackageId());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                if (!hasPackageId()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.SuperPackageBuyPush parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.SuperPackageBuyPush) ActivityFavorHandler.SuperPackageBuyPush.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.SuperPackageBuyPush) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = ActivityFavorHandler.SuperPackageBuyPush.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public boolean hasPackageId() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public int getPackageId() {
                return this.packageId_;
            }

            public Builder setPackageId(int value) {
                this.bitField0_ |= 0x4;
                this.packageId_ = value;
                onChanged();
                return this;
            }

            public Builder clearPackageId() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.packageId_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class SevenDayPackageAwardInfo
            extends GeneratedMessage
            implements SevenDayPackageAwardInfoOrBuilder {
        private final UnknownFieldSet unknownFields;


        private SevenDayPackageAwardInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }


        private SevenDayPackageAwardInfo(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }


        public static SevenDayPackageAwardInfo getDefaultInstance() {
            return defaultInstance;
        }


        public SevenDayPackageAwardInfo getDefaultInstanceForType() {
            return defaultInstance;
        }


        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }


        private SevenDayPackageAwardInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.packageId_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.itemcode_ = bs;
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.itemcount_ = input.readInt32();
                            break;
                        case 34:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x8;
                            this.itemmodel_ = bs;
                            break;
                        case 40:
                            this.bitField0_ |= 0x10;
                            this.state_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }


        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageAwardInfo_descriptor;
        }


        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageAwardInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(SevenDayPackageAwardInfo.class, Builder.class);
        }


        public static Parser<SevenDayPackageAwardInfo> PARSER = (Parser<SevenDayPackageAwardInfo>) new AbstractParser<SevenDayPackageAwardInfo>() {
            public ActivityFavorHandler.SevenDayPackageAwardInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.SevenDayPackageAwardInfo(input, extensionRegistry);
            }
        };


        private int bitField0_;


        public static final int PACKAGEID_FIELD_NUMBER = 1;


        private int packageId_;


        public static final int ITEMCODE_FIELD_NUMBER = 2;


        private Object itemcode_;


        public static final int ITEMCOUNT_FIELD_NUMBER = 3;


        private int itemcount_;


        public static final int ITEMMODEL_FIELD_NUMBER = 4;


        private Object itemmodel_;


        public static final int STATE_FIELD_NUMBER = 5;


        private int state_;


        private byte memoizedIsInitialized;


        private int memoizedSerializedSize;


        private static final long serialVersionUID = 0L;


        public Parser<SevenDayPackageAwardInfo> getParserForType() {
            return PARSER;
        }


        public boolean hasPackageId() {
            return ((this.bitField0_ & 0x1) == 1);
        }


        public int getPackageId() {
            return this.packageId_;
        }


        public boolean hasItemcode() {
            return ((this.bitField0_ & 0x2) == 2);
        }


        public String getItemcode() {
            Object ref = this.itemcode_;
            if (ref instanceof String) {
                return (String) ref;
            }
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                this.itemcode_ = s;
            }
            return s;
        }


        private static final SevenDayPackageAwardInfo defaultInstance = new SevenDayPackageAwardInfo(true);

        public ByteString getItemcodeBytes() {
            Object ref = this.itemcode_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.itemcode_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasItemcount() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public int getItemcount() {
            return this.itemcount_;
        }

        public boolean hasItemmodel() {
            return ((this.bitField0_ & 0x8) == 8);
        }

        public String getItemmodel() {
            Object ref = this.itemmodel_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.itemmodel_ = s;
            return s;
        }

        public ByteString getItemmodelBytes() {
            Object ref = this.itemmodel_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.itemmodel_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasState() {
            return ((this.bitField0_ & 0x10) == 16);
        }

        public int getState() {
            return this.state_;
        }

        private void initFields() {
            this.packageId_ = 0;
            this.itemcode_ = "";
            this.itemcount_ = 0;
            this.itemmodel_ = "";
            this.state_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasPackageId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasItemcode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasItemcount()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasState()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.packageId_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getItemcodeBytes());
            if ((this.bitField0_ & 0x4) == 4) output.writeInt32(3, this.itemcount_);
            if ((this.bitField0_ & 0x8) == 8) output.writeBytes(4, getItemmodelBytes());
            if ((this.bitField0_ & 0x10) == 16) output.writeInt32(5, this.state_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.packageId_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getItemcodeBytes());
            if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt32Size(3, this.itemcount_);
            if ((this.bitField0_ & 0x8) == 8) size += CodedOutputStream.computeBytesSize(4, getItemmodelBytes());
            if ((this.bitField0_ & 0x10) == 16) size += CodedOutputStream.computeInt32Size(5, this.state_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SevenDayPackageAwardInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SevenDayPackageAwardInfo) PARSER.parseFrom(data);
        }

        public static SevenDayPackageAwardInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SevenDayPackageAwardInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SevenDayPackageAwardInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SevenDayPackageAwardInfo) PARSER.parseFrom(data);
        }

        public static SevenDayPackageAwardInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SevenDayPackageAwardInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SevenDayPackageAwardInfo parseFrom(InputStream input) throws IOException {
            return (SevenDayPackageAwardInfo) PARSER.parseFrom(input);
        }

        public static SevenDayPackageAwardInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SevenDayPackageAwardInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static SevenDayPackageAwardInfo parseDelimitedFrom(InputStream input) throws IOException {
            return (SevenDayPackageAwardInfo) PARSER.parseDelimitedFrom(input);
        }

        public static SevenDayPackageAwardInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SevenDayPackageAwardInfo) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static SevenDayPackageAwardInfo parseFrom(CodedInputStream input) throws IOException {
            return (SevenDayPackageAwardInfo) PARSER.parseFrom(input);
        }

        public static SevenDayPackageAwardInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SevenDayPackageAwardInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SevenDayPackageAwardInfo prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.SevenDayPackageAwardInfoOrBuilder {
            private int bitField0_;
            private int packageId_;
            private Object itemcode_;
            private int itemcount_;
            private Object itemmodel_;
            private int state_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageAwardInfo_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageAwardInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.SevenDayPackageAwardInfo.class, Builder.class);
            }

            private Builder() {
                this.itemcode_ = "";
                this.itemmodel_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.itemcode_ = "";
                this.itemmodel_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.SevenDayPackageAwardInfo.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.packageId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.itemcode_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                this.itemcount_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                this.itemmodel_ = "";
                this.bitField0_ &= 0xFFFFFFF7;
                this.state_ = 0;
                this.bitField0_ &= 0xFFFFFFEF;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageAwardInfo_descriptor;
            }

            public ActivityFavorHandler.SevenDayPackageAwardInfo getDefaultInstanceForType() {
                return ActivityFavorHandler.SevenDayPackageAwardInfo.getDefaultInstance();
            }

            public ActivityFavorHandler.SevenDayPackageAwardInfo build() {
                ActivityFavorHandler.SevenDayPackageAwardInfo result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.SevenDayPackageAwardInfo buildPartial() {
                ActivityFavorHandler.SevenDayPackageAwardInfo result = new ActivityFavorHandler.SevenDayPackageAwardInfo(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.packageId_ = this.packageId_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.itemcode_ = this.itemcode_;
                if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;
                result.itemcount_ = this.itemcount_;
                if ((from_bitField0_ & 0x8) == 8) to_bitField0_ |= 0x8;
                result.itemmodel_ = this.itemmodel_;
                if ((from_bitField0_ & 0x10) == 16) to_bitField0_ |= 0x10;
                result.state_ = this.state_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.SevenDayPackageAwardInfo)
                    return mergeFrom((ActivityFavorHandler.SevenDayPackageAwardInfo) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.SevenDayPackageAwardInfo other) {
                if (other == ActivityFavorHandler.SevenDayPackageAwardInfo.getDefaultInstance()) return this;
                if (other.hasPackageId()) setPackageId(other.getPackageId());
                if (other.hasItemcode()) {
                    this.bitField0_ |= 0x2;
                    this.itemcode_ = other.itemcode_;
                    onChanged();
                }
                if (other.hasItemcount()) setItemcount(other.getItemcount());
                if (other.hasItemmodel()) {
                    this.bitField0_ |= 0x8;
                    this.itemmodel_ = other.itemmodel_;
                    onChanged();
                }
                if (other.hasState()) setState(other.getState());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasPackageId()) return false;
                if (!hasItemcode()) return false;
                if (!hasItemcount()) return false;
                if (!hasState()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.SevenDayPackageAwardInfo parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.SevenDayPackageAwardInfo) ActivityFavorHandler.SevenDayPackageAwardInfo.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.SevenDayPackageAwardInfo) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasPackageId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getPackageId() {
                return this.packageId_;
            }

            public Builder setPackageId(int value) {
                this.bitField0_ |= 0x1;
                this.packageId_ = value;
                onChanged();
                return this;
            }

            public Builder clearPackageId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.packageId_ = 0;
                onChanged();
                return this;
            }

            public boolean hasItemcode() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getItemcode() {
                Object ref = this.itemcode_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.itemcode_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getItemcodeBytes() {
                Object ref = this.itemcode_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.itemcode_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setItemcode(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.itemcode_ = value;
                onChanged();
                return this;
            }

            public Builder clearItemcode() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.itemcode_ = ActivityFavorHandler.SevenDayPackageAwardInfo.getDefaultInstance().getItemcode();
                onChanged();
                return this;
            }

            public Builder setItemcodeBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.itemcode_ = value;
                onChanged();
                return this;
            }

            public boolean hasItemcount() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public int getItemcount() {
                return this.itemcount_;
            }

            public Builder setItemcount(int value) {
                this.bitField0_ |= 0x4;
                this.itemcount_ = value;
                onChanged();
                return this;
            }

            public Builder clearItemcount() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.itemcount_ = 0;
                onChanged();
                return this;
            }

            public boolean hasItemmodel() {
                return ((this.bitField0_ & 0x8) == 8);
            }

            public String getItemmodel() {
                Object ref = this.itemmodel_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.itemmodel_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getItemmodelBytes() {
                Object ref = this.itemmodel_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.itemmodel_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setItemmodel(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x8;
                this.itemmodel_ = value;
                onChanged();
                return this;
            }

            public Builder clearItemmodel() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.itemmodel_ = ActivityFavorHandler.SevenDayPackageAwardInfo.getDefaultInstance().getItemmodel();
                onChanged();
                return this;
            }

            public Builder setItemmodelBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x8;
                this.itemmodel_ = value;
                onChanged();
                return this;
            }

            public boolean hasState() {
                return ((this.bitField0_ & 0x10) == 16);
            }

            public int getState() {
                return this.state_;
            }

            public Builder setState(int value) {
                this.bitField0_ |= 0x10;
                this.state_ = value;
                onChanged();
                return this;
            }

            public Builder clearState() {
                this.bitField0_ &= 0xFFFFFFEF;
                this.state_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class SevenDayPackageInfo
            extends GeneratedMessage
            implements SevenDayPackageInfoOrBuilder {
        private static final SevenDayPackageInfo defaultInstance = new SevenDayPackageInfo(true);
        private final UnknownFieldSet unknownFields;

        private SevenDayPackageInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SevenDayPackageInfo(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SevenDayPackageInfo getDefaultInstance() {
            return defaultInstance;
        }

        public SevenDayPackageInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SevenDayPackageInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.beginTime_ = bs;
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.endTime_ = bs;
                            break;
                        case 26:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x4;
                            this.describe_ = bs;
                            break;
                        case 34:
                            if ((mutable_bitField0_ & 0x8) != 8) {
                                this.sevenDayPackageAwardInfo_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x8;
                            }
                            this.sevenDayPackageAwardInfo_.add(input.readMessage(ActivityFavorHandler.SevenDayPackageAwardInfo.PARSER, extensionRegistry));
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x8) == 8)
                    this.sevenDayPackageAwardInfo_ = Collections.unmodifiableList(this.sevenDayPackageAwardInfo_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageInfo_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(SevenDayPackageInfo.class, Builder.class);
        }

        public static Parser<SevenDayPackageInfo> PARSER = (Parser<SevenDayPackageInfo>) new AbstractParser<SevenDayPackageInfo>() {
            public ActivityFavorHandler.SevenDayPackageInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.SevenDayPackageInfo(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int BEGINTIME_FIELD_NUMBER = 1;
        private Object beginTime_;
        public static final int ENDTIME_FIELD_NUMBER = 2;
        private Object endTime_;
        public static final int DESCRIBE_FIELD_NUMBER = 3;
        private Object describe_;
        public static final int SEVENDAYPACKAGEAWARDINFO_FIELD_NUMBER = 4;
        private List<ActivityFavorHandler.SevenDayPackageAwardInfo> sevenDayPackageAwardInfo_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SevenDayPackageInfo> getParserForType() {
            return PARSER;
        }

        public boolean hasBeginTime() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getBeginTime() {
            Object ref = this.beginTime_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.beginTime_ = s;
            return s;
        }

        public ByteString getBeginTimeBytes() {
            Object ref = this.beginTime_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.beginTime_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasEndTime() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getEndTime() {
            Object ref = this.endTime_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.endTime_ = s;
            return s;
        }

        public ByteString getEndTimeBytes() {
            Object ref = this.endTime_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.endTime_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        static {
            defaultInstance.initFields();
        }

        public boolean hasDescribe() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public String getDescribe() {
            Object ref = this.describe_;
            if (ref instanceof String)
                return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8())
                this.describe_ = s;
            return s;
        }

        public ByteString getDescribeBytes() {
            Object ref = this.describe_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.describe_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public List<ActivityFavorHandler.SevenDayPackageAwardInfo> getSevenDayPackageAwardInfoList() {
            return this.sevenDayPackageAwardInfo_;
        }

        public List<? extends ActivityFavorHandler.SevenDayPackageAwardInfoOrBuilder> getSevenDayPackageAwardInfoOrBuilderList() {
            return (List) this.sevenDayPackageAwardInfo_;
        }

        public int getSevenDayPackageAwardInfoCount() {
            return this.sevenDayPackageAwardInfo_.size();
        }

        public ActivityFavorHandler.SevenDayPackageAwardInfo getSevenDayPackageAwardInfo(int index) {
            return this.sevenDayPackageAwardInfo_.get(index);
        }

        public ActivityFavorHandler.SevenDayPackageAwardInfoOrBuilder getSevenDayPackageAwardInfoOrBuilder(int index) {
            return this.sevenDayPackageAwardInfo_.get(index);
        }

        private void initFields() {
            this.beginTime_ = "";
            this.endTime_ = "";
            this.describe_ = "";
            this.sevenDayPackageAwardInfo_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasBeginTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasEndTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasDescribe()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getSevenDayPackageAwardInfoCount(); i++) {
                if (!getSevenDayPackageAwardInfo(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeBytes(1, getBeginTimeBytes());
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(2, getEndTimeBytes());
            if ((this.bitField0_ & 0x4) == 4)
                output.writeBytes(3, getDescribeBytes());
            for (int i = 0; i < this.sevenDayPackageAwardInfo_.size(); i++)
                output.writeMessage(4, (MessageLite) this.sevenDayPackageAwardInfo_.get(i));
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeBytesSize(1, getBeginTimeBytes());
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(2, getEndTimeBytes());
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeBytesSize(3, getDescribeBytes());
            for (int i = 0; i < this.sevenDayPackageAwardInfo_.size(); i++)
                size += CodedOutputStream.computeMessageSize(4, (MessageLite) this.sevenDayPackageAwardInfo_.get(i));
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SevenDayPackageInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SevenDayPackageInfo) PARSER.parseFrom(data);
        }

        public static SevenDayPackageInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SevenDayPackageInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SevenDayPackageInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SevenDayPackageInfo) PARSER.parseFrom(data);
        }

        public static SevenDayPackageInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SevenDayPackageInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SevenDayPackageInfo parseFrom(InputStream input) throws IOException {
            return (SevenDayPackageInfo) PARSER.parseFrom(input);
        }

        public static SevenDayPackageInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SevenDayPackageInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static SevenDayPackageInfo parseDelimitedFrom(InputStream input) throws IOException {
            return (SevenDayPackageInfo) PARSER.parseDelimitedFrom(input);
        }

        public static SevenDayPackageInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SevenDayPackageInfo) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static SevenDayPackageInfo parseFrom(CodedInputStream input) throws IOException {
            return (SevenDayPackageInfo) PARSER.parseFrom(input);
        }

        public static SevenDayPackageInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SevenDayPackageInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SevenDayPackageInfo prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.SevenDayPackageInfoOrBuilder {
            private int bitField0_;
            private Object beginTime_;
            private Object endTime_;
            private Object describe_;
            private List<ActivityFavorHandler.SevenDayPackageAwardInfo> sevenDayPackageAwardInfo_;
            private RepeatedFieldBuilder<ActivityFavorHandler.SevenDayPackageAwardInfo, ActivityFavorHandler.SevenDayPackageAwardInfo.Builder, ActivityFavorHandler.SevenDayPackageAwardInfoOrBuilder> sevenDayPackageAwardInfoBuilder_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageInfo_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.SevenDayPackageInfo.class, Builder.class);
            }

            private Builder() {
                this.beginTime_ = "";
                this.endTime_ = "";
                this.describe_ = "";
                this.sevenDayPackageAwardInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.beginTime_ = "";
                this.endTime_ = "";
                this.describe_ = "";
                this.sevenDayPackageAwardInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.SevenDayPackageInfo.alwaysUseFieldBuilders)
                    getSevenDayPackageAwardInfoFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.beginTime_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                this.endTime_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                this.describe_ = "";
                this.bitField0_ &= 0xFFFFFFFB;
                if (this.sevenDayPackageAwardInfoBuilder_ == null) {
                    this.sevenDayPackageAwardInfo_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFF7;
                } else {
                    this.sevenDayPackageAwardInfoBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageInfo_descriptor;
            }

            public ActivityFavorHandler.SevenDayPackageInfo getDefaultInstanceForType() {
                return ActivityFavorHandler.SevenDayPackageInfo.getDefaultInstance();
            }

            public ActivityFavorHandler.SevenDayPackageInfo build() {
                ActivityFavorHandler.SevenDayPackageInfo result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.SevenDayPackageInfo buildPartial() {
                ActivityFavorHandler.SevenDayPackageInfo result = new ActivityFavorHandler.SevenDayPackageInfo(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.beginTime_ = this.beginTime_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.endTime_ = this.endTime_;
                if ((from_bitField0_ & 0x4) == 4)
                    to_bitField0_ |= 0x4;
                result.describe_ = this.describe_;
                if (this.sevenDayPackageAwardInfoBuilder_ == null) {
                    if ((this.bitField0_ & 0x8) == 8) {
                        this.sevenDayPackageAwardInfo_ = Collections.unmodifiableList(this.sevenDayPackageAwardInfo_);
                        this.bitField0_ &= 0xFFFFFFF7;
                    }
                    result.sevenDayPackageAwardInfo_ = this.sevenDayPackageAwardInfo_;
                } else {
                    result.sevenDayPackageAwardInfo_ = this.sevenDayPackageAwardInfoBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.SevenDayPackageInfo)
                    return mergeFrom((ActivityFavorHandler.SevenDayPackageInfo) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.SevenDayPackageInfo other) {
                if (other == ActivityFavorHandler.SevenDayPackageInfo.getDefaultInstance())
                    return this;
                if (other.hasBeginTime()) {
                    this.bitField0_ |= 0x1;
                    this.beginTime_ = other.beginTime_;
                    onChanged();
                }
                if (other.hasEndTime()) {
                    this.bitField0_ |= 0x2;
                    this.endTime_ = other.endTime_;
                    onChanged();
                }
                if (other.hasDescribe()) {
                    this.bitField0_ |= 0x4;
                    this.describe_ = other.describe_;
                    onChanged();
                }
                if (this.sevenDayPackageAwardInfoBuilder_ == null) {
                    if (!other.sevenDayPackageAwardInfo_.isEmpty()) {
                        if (this.sevenDayPackageAwardInfo_.isEmpty()) {
                            this.sevenDayPackageAwardInfo_ = other.sevenDayPackageAwardInfo_;
                            this.bitField0_ &= 0xFFFFFFF7;
                        } else {
                            ensureSevenDayPackageAwardInfoIsMutable();
                            this.sevenDayPackageAwardInfo_.addAll(other.sevenDayPackageAwardInfo_);
                        }
                        onChanged();
                    }
                } else if (!other.sevenDayPackageAwardInfo_.isEmpty()) {
                    if (this.sevenDayPackageAwardInfoBuilder_.isEmpty()) {
                        this.sevenDayPackageAwardInfoBuilder_.dispose();
                        this.sevenDayPackageAwardInfoBuilder_ = null;
                        this.sevenDayPackageAwardInfo_ = other.sevenDayPackageAwardInfo_;
                        this.bitField0_ &= 0xFFFFFFF7;
                        this.sevenDayPackageAwardInfoBuilder_ = ActivityFavorHandler.SevenDayPackageInfo.alwaysUseFieldBuilders ? getSevenDayPackageAwardInfoFieldBuilder() : null;
                    } else {
                        this.sevenDayPackageAwardInfoBuilder_.addAllMessages(other.sevenDayPackageAwardInfo_);
                    }
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasBeginTime())
                    return false;
                if (!hasEndTime())
                    return false;
                if (!hasDescribe())
                    return false;
                for (int i = 0; i < getSevenDayPackageAwardInfoCount(); i++) {
                    if (!getSevenDayPackageAwardInfo(i).isInitialized())
                        return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.SevenDayPackageInfo parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.SevenDayPackageInfo) ActivityFavorHandler.SevenDayPackageInfo.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.SevenDayPackageInfo) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasBeginTime() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public String getBeginTime() {
                Object ref = this.beginTime_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.beginTime_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getBeginTimeBytes() {
                Object ref = this.beginTime_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.beginTime_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setBeginTime(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.beginTime_ = value;
                onChanged();
                return this;
            }

            public Builder clearBeginTime() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.beginTime_ = ActivityFavorHandler.SevenDayPackageInfo.getDefaultInstance().getBeginTime();
                onChanged();
                return this;
            }

            public Builder setBeginTimeBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.beginTime_ = value;
                onChanged();
                return this;
            }

            public boolean hasEndTime() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getEndTime() {
                Object ref = this.endTime_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.endTime_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getEndTimeBytes() {
                Object ref = this.endTime_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.endTime_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setEndTime(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.endTime_ = value;
                onChanged();
                return this;
            }

            public Builder clearEndTime() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.endTime_ = ActivityFavorHandler.SevenDayPackageInfo.getDefaultInstance().getEndTime();
                onChanged();
                return this;
            }

            public Builder setEndTimeBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.endTime_ = value;
                onChanged();
                return this;
            }

            public boolean hasDescribe() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public String getDescribe() {
                Object ref = this.describe_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.describe_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getDescribeBytes() {
                Object ref = this.describe_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.describe_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setDescribe(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x4;
                this.describe_ = value;
                onChanged();
                return this;
            }

            public Builder clearDescribe() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.describe_ = ActivityFavorHandler.SevenDayPackageInfo.getDefaultInstance().getDescribe();
                onChanged();
                return this;
            }

            public Builder setDescribeBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x4;
                this.describe_ = value;
                onChanged();
                return this;
            }

            private void ensureSevenDayPackageAwardInfoIsMutable() {
                if ((this.bitField0_ & 0x8) != 8) {
                    this.sevenDayPackageAwardInfo_ = new ArrayList<>(this.sevenDayPackageAwardInfo_);
                    this.bitField0_ |= 0x8;
                }
            }

            public List<ActivityFavorHandler.SevenDayPackageAwardInfo> getSevenDayPackageAwardInfoList() {
                if (this.sevenDayPackageAwardInfoBuilder_ == null)
                    return Collections.unmodifiableList(this.sevenDayPackageAwardInfo_);
                return this.sevenDayPackageAwardInfoBuilder_.getMessageList();
            }

            public int getSevenDayPackageAwardInfoCount() {
                if (this.sevenDayPackageAwardInfoBuilder_ == null)
                    return this.sevenDayPackageAwardInfo_.size();
                return this.sevenDayPackageAwardInfoBuilder_.getCount();
            }

            public ActivityFavorHandler.SevenDayPackageAwardInfo getSevenDayPackageAwardInfo(int index) {
                if (this.sevenDayPackageAwardInfoBuilder_ == null)
                    return this.sevenDayPackageAwardInfo_.get(index);
                return (ActivityFavorHandler.SevenDayPackageAwardInfo) this.sevenDayPackageAwardInfoBuilder_.getMessage(index);
            }

            public Builder setSevenDayPackageAwardInfo(int index, ActivityFavorHandler.SevenDayPackageAwardInfo value) {
                if (this.sevenDayPackageAwardInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureSevenDayPackageAwardInfoIsMutable();
                    this.sevenDayPackageAwardInfo_.set(index, value);
                    onChanged();
                } else {
                    this.sevenDayPackageAwardInfoBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setSevenDayPackageAwardInfo(int index, ActivityFavorHandler.SevenDayPackageAwardInfo.Builder builderForValue) {
                if (this.sevenDayPackageAwardInfoBuilder_ == null) {
                    ensureSevenDayPackageAwardInfoIsMutable();
                    this.sevenDayPackageAwardInfo_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.sevenDayPackageAwardInfoBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addSevenDayPackageAwardInfo(ActivityFavorHandler.SevenDayPackageAwardInfo value) {
                if (this.sevenDayPackageAwardInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureSevenDayPackageAwardInfoIsMutable();
                    this.sevenDayPackageAwardInfo_.add(value);
                    onChanged();
                } else {
                    this.sevenDayPackageAwardInfoBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addSevenDayPackageAwardInfo(int index, ActivityFavorHandler.SevenDayPackageAwardInfo value) {
                if (this.sevenDayPackageAwardInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureSevenDayPackageAwardInfoIsMutable();
                    this.sevenDayPackageAwardInfo_.add(index, value);
                    onChanged();
                } else {
                    this.sevenDayPackageAwardInfoBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addSevenDayPackageAwardInfo(ActivityFavorHandler.SevenDayPackageAwardInfo.Builder builderForValue) {
                if (this.sevenDayPackageAwardInfoBuilder_ == null) {
                    ensureSevenDayPackageAwardInfoIsMutable();
                    this.sevenDayPackageAwardInfo_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.sevenDayPackageAwardInfoBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addSevenDayPackageAwardInfo(int index, ActivityFavorHandler.SevenDayPackageAwardInfo.Builder builderForValue) {
                if (this.sevenDayPackageAwardInfoBuilder_ == null) {
                    ensureSevenDayPackageAwardInfoIsMutable();
                    this.sevenDayPackageAwardInfo_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.sevenDayPackageAwardInfoBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllSevenDayPackageAwardInfo(Iterable<? extends ActivityFavorHandler.SevenDayPackageAwardInfo> values) {
                if (this.sevenDayPackageAwardInfoBuilder_ == null) {
                    ensureSevenDayPackageAwardInfoIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.sevenDayPackageAwardInfo_);
                    onChanged();
                } else {
                    this.sevenDayPackageAwardInfoBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearSevenDayPackageAwardInfo() {
                if (this.sevenDayPackageAwardInfoBuilder_ == null) {
                    this.sevenDayPackageAwardInfo_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFF7;
                    onChanged();
                } else {
                    this.sevenDayPackageAwardInfoBuilder_.clear();
                }
                return this;
            }

            public Builder removeSevenDayPackageAwardInfo(int index) {
                if (this.sevenDayPackageAwardInfoBuilder_ == null) {
                    ensureSevenDayPackageAwardInfoIsMutable();
                    this.sevenDayPackageAwardInfo_.remove(index);
                    onChanged();
                } else {
                    this.sevenDayPackageAwardInfoBuilder_.remove(index);
                }
                return this;
            }

            public ActivityFavorHandler.SevenDayPackageAwardInfo.Builder getSevenDayPackageAwardInfoBuilder(int index) {
                return (ActivityFavorHandler.SevenDayPackageAwardInfo.Builder) getSevenDayPackageAwardInfoFieldBuilder().getBuilder(index);
            }

            public ActivityFavorHandler.SevenDayPackageAwardInfoOrBuilder getSevenDayPackageAwardInfoOrBuilder(int index) {
                if (this.sevenDayPackageAwardInfoBuilder_ == null)
                    return this.sevenDayPackageAwardInfo_.get(index);
                return (ActivityFavorHandler.SevenDayPackageAwardInfoOrBuilder) this.sevenDayPackageAwardInfoBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends ActivityFavorHandler.SevenDayPackageAwardInfoOrBuilder> getSevenDayPackageAwardInfoOrBuilderList() {
                if (this.sevenDayPackageAwardInfoBuilder_ != null)
                    return this.sevenDayPackageAwardInfoBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.sevenDayPackageAwardInfo_);
            }

            public ActivityFavorHandler.SevenDayPackageAwardInfo.Builder addSevenDayPackageAwardInfoBuilder() {
                return (ActivityFavorHandler.SevenDayPackageAwardInfo.Builder) getSevenDayPackageAwardInfoFieldBuilder().addBuilder(ActivityFavorHandler.SevenDayPackageAwardInfo.getDefaultInstance());
            }

            public ActivityFavorHandler.SevenDayPackageAwardInfo.Builder addSevenDayPackageAwardInfoBuilder(int index) {
                return (ActivityFavorHandler.SevenDayPackageAwardInfo.Builder) getSevenDayPackageAwardInfoFieldBuilder().addBuilder(index, ActivityFavorHandler.SevenDayPackageAwardInfo.getDefaultInstance());
            }

            public List<ActivityFavorHandler.SevenDayPackageAwardInfo.Builder> getSevenDayPackageAwardInfoBuilderList() {
                return getSevenDayPackageAwardInfoFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<ActivityFavorHandler.SevenDayPackageAwardInfo, ActivityFavorHandler.SevenDayPackageAwardInfo.Builder, ActivityFavorHandler.SevenDayPackageAwardInfoOrBuilder> getSevenDayPackageAwardInfoFieldBuilder() {
                if (this.sevenDayPackageAwardInfoBuilder_ == null) {
                    this.sevenDayPackageAwardInfoBuilder_ = new RepeatedFieldBuilder(this.sevenDayPackageAwardInfo_, ((this.bitField0_ & 0x8) == 8), getParentForChildren(), isClean());
                    this.sevenDayPackageAwardInfo_ = null;
                }
                return this.sevenDayPackageAwardInfoBuilder_;
            }
        }
    }

    public static final class SevenDayPackageGetInfoRequest extends GeneratedMessage implements SevenDayPackageGetInfoRequestOrBuilder {
        private static final SevenDayPackageGetInfoRequest defaultInstance = new SevenDayPackageGetInfoRequest(true);
        private final UnknownFieldSet unknownFields;

        private SevenDayPackageGetInfoRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SevenDayPackageGetInfoRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SevenDayPackageGetInfoRequest getDefaultInstance() {
            return defaultInstance;
        }

        public SevenDayPackageGetInfoRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SevenDayPackageGetInfoRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageGetInfoRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageGetInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(SevenDayPackageGetInfoRequest.class, Builder.class);
        }

        public static Parser<SevenDayPackageGetInfoRequest> PARSER = (Parser<SevenDayPackageGetInfoRequest>) new AbstractParser<SevenDayPackageGetInfoRequest>() {
            public ActivityFavorHandler.SevenDayPackageGetInfoRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.SevenDayPackageGetInfoRequest(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SevenDayPackageGetInfoRequest> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SevenDayPackageGetInfoRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SevenDayPackageGetInfoRequest) PARSER.parseFrom(data);
        }

        public static SevenDayPackageGetInfoRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SevenDayPackageGetInfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SevenDayPackageGetInfoRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SevenDayPackageGetInfoRequest) PARSER.parseFrom(data);
        }

        public static SevenDayPackageGetInfoRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SevenDayPackageGetInfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SevenDayPackageGetInfoRequest parseFrom(InputStream input) throws IOException {
            return (SevenDayPackageGetInfoRequest) PARSER.parseFrom(input);
        }

        public static SevenDayPackageGetInfoRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SevenDayPackageGetInfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static SevenDayPackageGetInfoRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (SevenDayPackageGetInfoRequest) PARSER.parseDelimitedFrom(input);
        }

        public static SevenDayPackageGetInfoRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SevenDayPackageGetInfoRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static SevenDayPackageGetInfoRequest parseFrom(CodedInputStream input) throws IOException {
            return (SevenDayPackageGetInfoRequest) PARSER.parseFrom(input);
        }

        public static SevenDayPackageGetInfoRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SevenDayPackageGetInfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SevenDayPackageGetInfoRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.SevenDayPackageGetInfoRequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageGetInfoRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageGetInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.SevenDayPackageGetInfoRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.SevenDayPackageGetInfoRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageGetInfoRequest_descriptor;
            }

            public ActivityFavorHandler.SevenDayPackageGetInfoRequest getDefaultInstanceForType() {
                return ActivityFavorHandler.SevenDayPackageGetInfoRequest.getDefaultInstance();
            }

            public ActivityFavorHandler.SevenDayPackageGetInfoRequest build() {
                ActivityFavorHandler.SevenDayPackageGetInfoRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.SevenDayPackageGetInfoRequest buildPartial() {
                ActivityFavorHandler.SevenDayPackageGetInfoRequest result = new ActivityFavorHandler.SevenDayPackageGetInfoRequest(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.SevenDayPackageGetInfoRequest)
                    return mergeFrom((ActivityFavorHandler.SevenDayPackageGetInfoRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.SevenDayPackageGetInfoRequest other) {
                if (other == ActivityFavorHandler.SevenDayPackageGetInfoRequest.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.SevenDayPackageGetInfoRequest parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.SevenDayPackageGetInfoRequest) ActivityFavorHandler.SevenDayPackageGetInfoRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.SevenDayPackageGetInfoRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class SevenDayPackageGetInfoResponse
            extends GeneratedMessage
            implements SevenDayPackageGetInfoResponseOrBuilder {
        private static final SevenDayPackageGetInfoResponse defaultInstance = new SevenDayPackageGetInfoResponse(true);
        private final UnknownFieldSet unknownFields;

        private SevenDayPackageGetInfoResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SevenDayPackageGetInfoResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SevenDayPackageGetInfoResponse getDefaultInstance() {
            return defaultInstance;
        }

        public SevenDayPackageGetInfoResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SevenDayPackageGetInfoResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    ActivityFavorHandler.SevenDayPackageInfo.Builder subBuilder;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                        case 26:
                            subBuilder = null;
                            if ((this.bitField0_ & 0x4) == 4) subBuilder = this.sevenDayPackageInfo_.toBuilder();
                            this.sevenDayPackageInfo_ = (ActivityFavorHandler.SevenDayPackageInfo) input.readMessage(ActivityFavorHandler.SevenDayPackageInfo.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(this.sevenDayPackageInfo_);
                                this.sevenDayPackageInfo_ = subBuilder.buildPartial();
                            }
                            this.bitField0_ |= 0x4;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageGetInfoResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageGetInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(SevenDayPackageGetInfoResponse.class, Builder.class);
        }

        public static Parser<SevenDayPackageGetInfoResponse> PARSER = (Parser<SevenDayPackageGetInfoResponse>) new AbstractParser<SevenDayPackageGetInfoResponse>() {
            public ActivityFavorHandler.SevenDayPackageGetInfoResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.SevenDayPackageGetInfoResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int SEVENDAYPACKAGEINFO_FIELD_NUMBER = 3;
        private ActivityFavorHandler.SevenDayPackageInfo sevenDayPackageInfo_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SevenDayPackageGetInfoResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        static {
            defaultInstance.initFields();
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasSevenDayPackageInfo() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public ActivityFavorHandler.SevenDayPackageInfo getSevenDayPackageInfo() {
            return this.sevenDayPackageInfo_;
        }

        public ActivityFavorHandler.SevenDayPackageInfoOrBuilder getSevenDayPackageInfoOrBuilder() {
            return this.sevenDayPackageInfo_;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
            this.sevenDayPackageInfo_ = ActivityFavorHandler.SevenDayPackageInfo.getDefaultInstance();
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (hasSevenDayPackageInfo() && !getSevenDayPackageInfo().isInitialized()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(2, getS2CMsgBytes());
            if ((this.bitField0_ & 0x4) == 4)
                output.writeMessage(3, (MessageLite) this.sevenDayPackageInfo_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeMessageSize(3, (MessageLite) this.sevenDayPackageInfo_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SevenDayPackageGetInfoResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SevenDayPackageGetInfoResponse) PARSER.parseFrom(data);
        }

        public static SevenDayPackageGetInfoResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SevenDayPackageGetInfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SevenDayPackageGetInfoResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SevenDayPackageGetInfoResponse) PARSER.parseFrom(data);
        }

        public static SevenDayPackageGetInfoResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SevenDayPackageGetInfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SevenDayPackageGetInfoResponse parseFrom(InputStream input) throws IOException {
            return (SevenDayPackageGetInfoResponse) PARSER.parseFrom(input);
        }

        public static SevenDayPackageGetInfoResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SevenDayPackageGetInfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static SevenDayPackageGetInfoResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (SevenDayPackageGetInfoResponse) PARSER.parseDelimitedFrom(input);
        }

        public static SevenDayPackageGetInfoResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SevenDayPackageGetInfoResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static SevenDayPackageGetInfoResponse parseFrom(CodedInputStream input) throws IOException {
            return (SevenDayPackageGetInfoResponse) PARSER.parseFrom(input);
        }

        public static SevenDayPackageGetInfoResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SevenDayPackageGetInfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SevenDayPackageGetInfoResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.SevenDayPackageGetInfoResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;
            private ActivityFavorHandler.SevenDayPackageInfo sevenDayPackageInfo_;
            private SingleFieldBuilder<ActivityFavorHandler.SevenDayPackageInfo, ActivityFavorHandler.SevenDayPackageInfo.Builder, ActivityFavorHandler.SevenDayPackageInfoOrBuilder> sevenDayPackageInfoBuilder_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageGetInfoResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageGetInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.SevenDayPackageGetInfoResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                this.sevenDayPackageInfo_ = ActivityFavorHandler.SevenDayPackageInfo.getDefaultInstance();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                this.sevenDayPackageInfo_ = ActivityFavorHandler.SevenDayPackageInfo.getDefaultInstance();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.SevenDayPackageGetInfoResponse.alwaysUseFieldBuilders)
                    getSevenDayPackageInfoFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                if (this.sevenDayPackageInfoBuilder_ == null) {
                    this.sevenDayPackageInfo_ = ActivityFavorHandler.SevenDayPackageInfo.getDefaultInstance();
                } else {
                    this.sevenDayPackageInfoBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageGetInfoResponse_descriptor;
            }

            public ActivityFavorHandler.SevenDayPackageGetInfoResponse getDefaultInstanceForType() {
                return ActivityFavorHandler.SevenDayPackageGetInfoResponse.getDefaultInstance();
            }

            public ActivityFavorHandler.SevenDayPackageGetInfoResponse build() {
                ActivityFavorHandler.SevenDayPackageGetInfoResponse result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.SevenDayPackageGetInfoResponse buildPartial() {
                ActivityFavorHandler.SevenDayPackageGetInfoResponse result = new ActivityFavorHandler.SevenDayPackageGetInfoResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                if ((from_bitField0_ & 0x4) == 4)
                    to_bitField0_ |= 0x4;
                if (this.sevenDayPackageInfoBuilder_ == null) {
                    result.sevenDayPackageInfo_ = this.sevenDayPackageInfo_;
                } else {
                    result.sevenDayPackageInfo_ = (ActivityFavorHandler.SevenDayPackageInfo) this.sevenDayPackageInfoBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.SevenDayPackageGetInfoResponse)
                    return mergeFrom((ActivityFavorHandler.SevenDayPackageGetInfoResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.SevenDayPackageGetInfoResponse other) {
                if (other == ActivityFavorHandler.SevenDayPackageGetInfoResponse.getDefaultInstance())
                    return this;
                if (other.hasS2CCode())
                    setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (other.hasSevenDayPackageInfo())
                    mergeSevenDayPackageInfo(other.getSevenDayPackageInfo());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode())
                    return false;
                if (hasSevenDayPackageInfo() && !getSevenDayPackageInfo().isInitialized())
                    return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.SevenDayPackageGetInfoResponse parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.SevenDayPackageGetInfoResponse) ActivityFavorHandler.SevenDayPackageGetInfoResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.SevenDayPackageGetInfoResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = ActivityFavorHandler.SevenDayPackageGetInfoResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public boolean hasSevenDayPackageInfo() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public ActivityFavorHandler.SevenDayPackageInfo getSevenDayPackageInfo() {
                if (this.sevenDayPackageInfoBuilder_ == null)
                    return this.sevenDayPackageInfo_;
                return (ActivityFavorHandler.SevenDayPackageInfo) this.sevenDayPackageInfoBuilder_.getMessage();
            }

            public Builder setSevenDayPackageInfo(ActivityFavorHandler.SevenDayPackageInfo value) {
                if (this.sevenDayPackageInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    this.sevenDayPackageInfo_ = value;
                    onChanged();
                } else {
                    this.sevenDayPackageInfoBuilder_.setMessage(value);
                }
                this.bitField0_ |= 0x4;
                return this;
            }

            public Builder setSevenDayPackageInfo(ActivityFavorHandler.SevenDayPackageInfo.Builder builderForValue) {
                if (this.sevenDayPackageInfoBuilder_ == null) {
                    this.sevenDayPackageInfo_ = builderForValue.build();
                    onChanged();
                } else {
                    this.sevenDayPackageInfoBuilder_.setMessage(builderForValue.build());
                }
                this.bitField0_ |= 0x4;
                return this;
            }

            public Builder mergeSevenDayPackageInfo(ActivityFavorHandler.SevenDayPackageInfo value) {
                if (this.sevenDayPackageInfoBuilder_ == null) {
                    if ((this.bitField0_ & 0x4) == 4 && this.sevenDayPackageInfo_ != ActivityFavorHandler.SevenDayPackageInfo.getDefaultInstance()) {
                        this.sevenDayPackageInfo_ = ActivityFavorHandler.SevenDayPackageInfo.newBuilder(this.sevenDayPackageInfo_).mergeFrom(value).buildPartial();
                    } else {
                        this.sevenDayPackageInfo_ = value;
                    }
                    onChanged();
                } else {
                    this.sevenDayPackageInfoBuilder_.mergeFrom(value);
                }
                this.bitField0_ |= 0x4;
                return this;
            }

            public Builder clearSevenDayPackageInfo() {
                if (this.sevenDayPackageInfoBuilder_ == null) {
                    this.sevenDayPackageInfo_ = ActivityFavorHandler.SevenDayPackageInfo.getDefaultInstance();
                    onChanged();
                } else {
                    this.sevenDayPackageInfoBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }

            public ActivityFavorHandler.SevenDayPackageInfo.Builder getSevenDayPackageInfoBuilder() {
                this.bitField0_ |= 0x4;
                onChanged();
                return (ActivityFavorHandler.SevenDayPackageInfo.Builder) getSevenDayPackageInfoFieldBuilder().getBuilder();
            }

            public ActivityFavorHandler.SevenDayPackageInfoOrBuilder getSevenDayPackageInfoOrBuilder() {
                if (this.sevenDayPackageInfoBuilder_ != null)
                    return (ActivityFavorHandler.SevenDayPackageInfoOrBuilder) this.sevenDayPackageInfoBuilder_.getMessageOrBuilder();
                return this.sevenDayPackageInfo_;
            }

            private SingleFieldBuilder<ActivityFavorHandler.SevenDayPackageInfo, ActivityFavorHandler.SevenDayPackageInfo.Builder, ActivityFavorHandler.SevenDayPackageInfoOrBuilder> getSevenDayPackageInfoFieldBuilder() {
                if (this.sevenDayPackageInfoBuilder_ == null) {
                    this.sevenDayPackageInfoBuilder_ = new SingleFieldBuilder(getSevenDayPackageInfo(), getParentForChildren(), isClean());
                    this.sevenDayPackageInfo_ = null;
                }
                return this.sevenDayPackageInfoBuilder_;
            }
        }
    }

    public static final class SevenDayPackageAwardRequest extends GeneratedMessage implements SevenDayPackageAwardRequestOrBuilder {
        private static final SevenDayPackageAwardRequest defaultInstance = new SevenDayPackageAwardRequest(true);
        private final UnknownFieldSet unknownFields;

        private SevenDayPackageAwardRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SevenDayPackageAwardRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SevenDayPackageAwardRequest getDefaultInstance() {
            return defaultInstance;
        }

        public SevenDayPackageAwardRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SevenDayPackageAwardRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.packageId_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageAwardRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageAwardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(SevenDayPackageAwardRequest.class, Builder.class);
        }

        public static Parser<SevenDayPackageAwardRequest> PARSER = (Parser<SevenDayPackageAwardRequest>) new AbstractParser<SevenDayPackageAwardRequest>() {
            public ActivityFavorHandler.SevenDayPackageAwardRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.SevenDayPackageAwardRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int PACKAGEID_FIELD_NUMBER = 1;
        private int packageId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SevenDayPackageAwardRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasPackageId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getPackageId() {
            return this.packageId_;
        }

        private void initFields() {
            this.packageId_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasPackageId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.packageId_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.packageId_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SevenDayPackageAwardRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SevenDayPackageAwardRequest) PARSER.parseFrom(data);
        }

        public static SevenDayPackageAwardRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SevenDayPackageAwardRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SevenDayPackageAwardRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SevenDayPackageAwardRequest) PARSER.parseFrom(data);
        }

        public static SevenDayPackageAwardRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SevenDayPackageAwardRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SevenDayPackageAwardRequest parseFrom(InputStream input) throws IOException {
            return (SevenDayPackageAwardRequest) PARSER.parseFrom(input);
        }

        public static SevenDayPackageAwardRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SevenDayPackageAwardRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static SevenDayPackageAwardRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (SevenDayPackageAwardRequest) PARSER.parseDelimitedFrom(input);
        }

        public static SevenDayPackageAwardRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SevenDayPackageAwardRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static SevenDayPackageAwardRequest parseFrom(CodedInputStream input) throws IOException {
            return (SevenDayPackageAwardRequest) PARSER.parseFrom(input);
        }

        public static SevenDayPackageAwardRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SevenDayPackageAwardRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SevenDayPackageAwardRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.SevenDayPackageAwardRequestOrBuilder {
            private int bitField0_;
            private int packageId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageAwardRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageAwardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.SevenDayPackageAwardRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.SevenDayPackageAwardRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.packageId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageAwardRequest_descriptor;
            }

            public ActivityFavorHandler.SevenDayPackageAwardRequest getDefaultInstanceForType() {
                return ActivityFavorHandler.SevenDayPackageAwardRequest.getDefaultInstance();
            }

            public ActivityFavorHandler.SevenDayPackageAwardRequest build() {
                ActivityFavorHandler.SevenDayPackageAwardRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.SevenDayPackageAwardRequest buildPartial() {
                ActivityFavorHandler.SevenDayPackageAwardRequest result = new ActivityFavorHandler.SevenDayPackageAwardRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.packageId_ = this.packageId_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.SevenDayPackageAwardRequest)
                    return mergeFrom((ActivityFavorHandler.SevenDayPackageAwardRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.SevenDayPackageAwardRequest other) {
                if (other == ActivityFavorHandler.SevenDayPackageAwardRequest.getDefaultInstance()) return this;
                if (other.hasPackageId()) setPackageId(other.getPackageId());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasPackageId()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.SevenDayPackageAwardRequest parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.SevenDayPackageAwardRequest) ActivityFavorHandler.SevenDayPackageAwardRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.SevenDayPackageAwardRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasPackageId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getPackageId() {
                return this.packageId_;
            }

            public Builder setPackageId(int value) {
                this.bitField0_ |= 0x1;
                this.packageId_ = value;
                onChanged();
                return this;
            }

            public Builder clearPackageId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.packageId_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class SevenDayPackageAwardResponse
            extends GeneratedMessage
            implements SevenDayPackageAwardResponseOrBuilder {
        private static final SevenDayPackageAwardResponse defaultInstance = new SevenDayPackageAwardResponse(true);
        private final UnknownFieldSet unknownFields;

        private SevenDayPackageAwardResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SevenDayPackageAwardResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SevenDayPackageAwardResponse getDefaultInstance() {
            return defaultInstance;
        }

        public SevenDayPackageAwardResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SevenDayPackageAwardResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageAwardResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageAwardResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(SevenDayPackageAwardResponse.class, Builder.class);
        }

        public static Parser<SevenDayPackageAwardResponse> PARSER = (Parser<SevenDayPackageAwardResponse>) new AbstractParser<SevenDayPackageAwardResponse>() {
            public ActivityFavorHandler.SevenDayPackageAwardResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.SevenDayPackageAwardResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SevenDayPackageAwardResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SevenDayPackageAwardResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SevenDayPackageAwardResponse) PARSER.parseFrom(data);
        }

        public static SevenDayPackageAwardResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SevenDayPackageAwardResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SevenDayPackageAwardResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SevenDayPackageAwardResponse) PARSER.parseFrom(data);
        }

        public static SevenDayPackageAwardResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SevenDayPackageAwardResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SevenDayPackageAwardResponse parseFrom(InputStream input) throws IOException {
            return (SevenDayPackageAwardResponse) PARSER.parseFrom(input);
        }

        public static SevenDayPackageAwardResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SevenDayPackageAwardResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static SevenDayPackageAwardResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (SevenDayPackageAwardResponse) PARSER.parseDelimitedFrom(input);
        }

        public static SevenDayPackageAwardResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SevenDayPackageAwardResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static SevenDayPackageAwardResponse parseFrom(CodedInputStream input) throws IOException {
            return (SevenDayPackageAwardResponse) PARSER.parseFrom(input);
        }

        public static SevenDayPackageAwardResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SevenDayPackageAwardResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SevenDayPackageAwardResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.SevenDayPackageAwardResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageAwardResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageAwardResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.SevenDayPackageAwardResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.SevenDayPackageAwardResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_SevenDayPackageAwardResponse_descriptor;
            }

            public ActivityFavorHandler.SevenDayPackageAwardResponse getDefaultInstanceForType() {
                return ActivityFavorHandler.SevenDayPackageAwardResponse.getDefaultInstance();
            }

            public ActivityFavorHandler.SevenDayPackageAwardResponse build() {
                ActivityFavorHandler.SevenDayPackageAwardResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.SevenDayPackageAwardResponse buildPartial() {
                ActivityFavorHandler.SevenDayPackageAwardResponse result = new ActivityFavorHandler.SevenDayPackageAwardResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.SevenDayPackageAwardResponse)
                    return mergeFrom((ActivityFavorHandler.SevenDayPackageAwardResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.SevenDayPackageAwardResponse other) {
                if (other == ActivityFavorHandler.SevenDayPackageAwardResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.SevenDayPackageAwardResponse parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.SevenDayPackageAwardResponse) ActivityFavorHandler.SevenDayPackageAwardResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.SevenDayPackageAwardResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = ActivityFavorHandler.SevenDayPackageAwardResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class DailyDrawAwardInfo
            extends GeneratedMessage
            implements DailyDrawAwardInfoOrBuilder {
        private static final DailyDrawAwardInfo defaultInstance = new DailyDrawAwardInfo(true);
        private final UnknownFieldSet unknownFields;

        private DailyDrawAwardInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private DailyDrawAwardInfo(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static DailyDrawAwardInfo getDefaultInstance() {
            return defaultInstance;
        }

        public DailyDrawAwardInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private DailyDrawAwardInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.id_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.code_ = bs;
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.num_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawAwardInfo_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawAwardInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(DailyDrawAwardInfo.class, Builder.class);
        }

        public static Parser<DailyDrawAwardInfo> PARSER = (Parser<DailyDrawAwardInfo>) new AbstractParser<DailyDrawAwardInfo>() {
            public ActivityFavorHandler.DailyDrawAwardInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.DailyDrawAwardInfo(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int ID_FIELD_NUMBER = 1;
        private int id_;
        public static final int CODE_FIELD_NUMBER = 2;
        private Object code_;
        public static final int NUM_FIELD_NUMBER = 3;
        private int num_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<DailyDrawAwardInfo> getParserForType() {
            return PARSER;
        }

        public boolean hasId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getId() {
            return this.id_;
        }

        public boolean hasCode() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getCode() {
            Object ref = this.code_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.code_ = s;
            return s;
        }

        public ByteString getCodeBytes() {
            Object ref = this.code_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.code_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasNum() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public int getNum() {
            return this.num_;
        }

        private void initFields() {
            this.id_ = 0;
            this.code_ = "";
            this.num_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasNum()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.id_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getCodeBytes());
            if ((this.bitField0_ & 0x4) == 4) output.writeInt32(3, this.num_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.id_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getCodeBytes());
            if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt32Size(3, this.num_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static DailyDrawAwardInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (DailyDrawAwardInfo) PARSER.parseFrom(data);
        }

        public static DailyDrawAwardInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (DailyDrawAwardInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static DailyDrawAwardInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (DailyDrawAwardInfo) PARSER.parseFrom(data);
        }

        public static DailyDrawAwardInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (DailyDrawAwardInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static DailyDrawAwardInfo parseFrom(InputStream input) throws IOException {
            return (DailyDrawAwardInfo) PARSER.parseFrom(input);
        }

        public static DailyDrawAwardInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyDrawAwardInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static DailyDrawAwardInfo parseDelimitedFrom(InputStream input) throws IOException {
            return (DailyDrawAwardInfo) PARSER.parseDelimitedFrom(input);
        }

        public static DailyDrawAwardInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyDrawAwardInfo) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static DailyDrawAwardInfo parseFrom(CodedInputStream input) throws IOException {
            return (DailyDrawAwardInfo) PARSER.parseFrom(input);
        }

        public static DailyDrawAwardInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyDrawAwardInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(DailyDrawAwardInfo prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.DailyDrawAwardInfoOrBuilder {
            private int bitField0_;
            private int id_;
            private Object code_;
            private int num_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawAwardInfo_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawAwardInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.DailyDrawAwardInfo.class, Builder.class);
            }

            private Builder() {
                this.code_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.code_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.DailyDrawAwardInfo.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.id_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.code_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                this.num_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawAwardInfo_descriptor;
            }

            public ActivityFavorHandler.DailyDrawAwardInfo getDefaultInstanceForType() {
                return ActivityFavorHandler.DailyDrawAwardInfo.getDefaultInstance();
            }

            public ActivityFavorHandler.DailyDrawAwardInfo build() {
                ActivityFavorHandler.DailyDrawAwardInfo result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.DailyDrawAwardInfo buildPartial() {
                ActivityFavorHandler.DailyDrawAwardInfo result = new ActivityFavorHandler.DailyDrawAwardInfo(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.id_ = this.id_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.code_ = this.code_;
                if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;
                result.num_ = this.num_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.DailyDrawAwardInfo)
                    return mergeFrom((ActivityFavorHandler.DailyDrawAwardInfo) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.DailyDrawAwardInfo other) {
                if (other == ActivityFavorHandler.DailyDrawAwardInfo.getDefaultInstance()) return this;
                if (other.hasId()) setId(other.getId());
                if (other.hasCode()) {
                    this.bitField0_ |= 0x2;
                    this.code_ = other.code_;
                    onChanged();
                }
                if (other.hasNum()) setNum(other.getNum());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasId()) return false;
                if (!hasCode()) return false;
                if (!hasNum()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.DailyDrawAwardInfo parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.DailyDrawAwardInfo) ActivityFavorHandler.DailyDrawAwardInfo.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.DailyDrawAwardInfo) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getId() {
                return this.id_;
            }

            public Builder setId(int value) {
                this.bitField0_ |= 0x1;
                this.id_ = value;
                onChanged();
                return this;
            }

            public Builder clearId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.id_ = 0;
                onChanged();
                return this;
            }

            public boolean hasCode() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getCode() {
                Object ref = this.code_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.code_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getCodeBytes() {
                Object ref = this.code_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.code_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setCode(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.code_ = value;
                onChanged();
                return this;
            }

            public Builder clearCode() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.code_ = ActivityFavorHandler.DailyDrawAwardInfo.getDefaultInstance().getCode();
                onChanged();
                return this;
            }

            public Builder setCodeBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.code_ = value;
                onChanged();
                return this;
            }

            public boolean hasNum() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public int getNum() {
                return this.num_;
            }

            public Builder setNum(int value) {
                this.bitField0_ |= 0x4;
                this.num_ = value;
                onChanged();
                return this;
            }

            public Builder clearNum() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.num_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class DailyDrawInfoRequest
            extends GeneratedMessage
            implements DailyDrawInfoRequestOrBuilder {
        private static final DailyDrawInfoRequest defaultInstance = new DailyDrawInfoRequest(true);
        private final UnknownFieldSet unknownFields;

        private DailyDrawInfoRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private DailyDrawInfoRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static DailyDrawInfoRequest getDefaultInstance() {
            return defaultInstance;
        }

        public DailyDrawInfoRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private DailyDrawInfoRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.id_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawInfoRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(DailyDrawInfoRequest.class, Builder.class);
        }

        public static Parser<DailyDrawInfoRequest> PARSER = (Parser<DailyDrawInfoRequest>) new AbstractParser<DailyDrawInfoRequest>() {
            public ActivityFavorHandler.DailyDrawInfoRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.DailyDrawInfoRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int ID_FIELD_NUMBER = 1;
        private int id_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<DailyDrawInfoRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getId() {
            return this.id_;
        }

        private void initFields() {
            this.id_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.id_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.id_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static DailyDrawInfoRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (DailyDrawInfoRequest) PARSER.parseFrom(data);
        }

        public static DailyDrawInfoRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (DailyDrawInfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static DailyDrawInfoRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (DailyDrawInfoRequest) PARSER.parseFrom(data);
        }

        public static DailyDrawInfoRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (DailyDrawInfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static DailyDrawInfoRequest parseFrom(InputStream input) throws IOException {
            return (DailyDrawInfoRequest) PARSER.parseFrom(input);
        }

        public static DailyDrawInfoRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyDrawInfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static DailyDrawInfoRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (DailyDrawInfoRequest) PARSER.parseDelimitedFrom(input);
        }

        public static DailyDrawInfoRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyDrawInfoRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static DailyDrawInfoRequest parseFrom(CodedInputStream input) throws IOException {
            return (DailyDrawInfoRequest) PARSER.parseFrom(input);
        }

        public static DailyDrawInfoRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyDrawInfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(DailyDrawInfoRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.DailyDrawInfoRequestOrBuilder {
            private int bitField0_;
            private int id_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawInfoRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.DailyDrawInfoRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.DailyDrawInfoRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.id_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawInfoRequest_descriptor;
            }

            public ActivityFavorHandler.DailyDrawInfoRequest getDefaultInstanceForType() {
                return ActivityFavorHandler.DailyDrawInfoRequest.getDefaultInstance();
            }

            public ActivityFavorHandler.DailyDrawInfoRequest build() {
                ActivityFavorHandler.DailyDrawInfoRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.DailyDrawInfoRequest buildPartial() {
                ActivityFavorHandler.DailyDrawInfoRequest result = new ActivityFavorHandler.DailyDrawInfoRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.id_ = this.id_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.DailyDrawInfoRequest)
                    return mergeFrom((ActivityFavorHandler.DailyDrawInfoRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.DailyDrawInfoRequest other) {
                if (other == ActivityFavorHandler.DailyDrawInfoRequest.getDefaultInstance()) return this;
                if (other.hasId()) setId(other.getId());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasId()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.DailyDrawInfoRequest parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.DailyDrawInfoRequest) ActivityFavorHandler.DailyDrawInfoRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.DailyDrawInfoRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getId() {
                return this.id_;
            }

            public Builder setId(int value) {
                this.bitField0_ |= 0x1;
                this.id_ = value;
                onChanged();
                return this;
            }

            public Builder clearId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.id_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class DailyDrawInfoResponse
            extends GeneratedMessage
            implements DailyDrawInfoResponseOrBuilder {
        private static final DailyDrawInfoResponse defaultInstance = new DailyDrawInfoResponse(true);
        private final UnknownFieldSet unknownFields;

        private DailyDrawInfoResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private DailyDrawInfoResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static DailyDrawInfoResponse getDefaultInstance() {
            return defaultInstance;
        }

        public DailyDrawInfoResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private DailyDrawInfoResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.freeCountLeft_ = input.readInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 0x8;
                            this.exploredTicketCountLeft_ = input.readInt32();
                            break;
                        case 42:
                            if ((mutable_bitField0_ & 0x10) != 16) {
                                this.awards_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x10;
                            }
                            this.awards_.add(input.readMessage(ActivityFavorHandler.DailyDrawAwardInfo.PARSER, extensionRegistry));
                            break;
                        case 50:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x10;
                            this.beginTime_ = bs;
                            break;
                        case 58:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x20;
                            this.endTime_ = bs;
                            break;
                        case 66:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x40;
                            this.describe_ = bs;
                            break;
                        case 72:
                            this.bitField0_ |= 0x80;
                            this.freeCountUpdateTimeStamp_ = input.readInt64();
                            break;
                        case 80:
                            this.bitField0_ |= 0x100;
                            this.proportion_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x10) == 16) this.awards_ = Collections.unmodifiableList(this.awards_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawInfoResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(DailyDrawInfoResponse.class, Builder.class);
        }

        public static Parser<DailyDrawInfoResponse> PARSER = (Parser<DailyDrawInfoResponse>) new AbstractParser<DailyDrawInfoResponse>() {
            public ActivityFavorHandler.DailyDrawInfoResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.DailyDrawInfoResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int FREECOUNTLEFT_FIELD_NUMBER = 3;
        private int freeCountLeft_;
        public static final int EXPLOREDTICKETCOUNTLEFT_FIELD_NUMBER = 4;
        private int exploredTicketCountLeft_;
        public static final int AWARDS_FIELD_NUMBER = 5;
        private List<ActivityFavorHandler.DailyDrawAwardInfo> awards_;
        public static final int BEGINTIME_FIELD_NUMBER = 6;
        private Object beginTime_;
        public static final int ENDTIME_FIELD_NUMBER = 7;
        private Object endTime_;
        public static final int DESCRIBE_FIELD_NUMBER = 8;
        private Object describe_;
        public static final int FREECOUNTUPDATETIMESTAMP_FIELD_NUMBER = 9;
        private long freeCountUpdateTimeStamp_;
        public static final int PROPORTION_FIELD_NUMBER = 10;
        private int proportion_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<DailyDrawInfoResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasFreeCountLeft() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        static {
            defaultInstance.initFields();
        }

        public int getFreeCountLeft() {
            return this.freeCountLeft_;
        }

        public boolean hasExploredTicketCountLeft() {
            return ((this.bitField0_ & 0x8) == 8);
        }

        public int getExploredTicketCountLeft() {
            return this.exploredTicketCountLeft_;
        }

        public List<ActivityFavorHandler.DailyDrawAwardInfo> getAwardsList() {
            return this.awards_;
        }

        public List<? extends ActivityFavorHandler.DailyDrawAwardInfoOrBuilder> getAwardsOrBuilderList() {
            return (List) this.awards_;
        }

        public int getAwardsCount() {
            return this.awards_.size();
        }

        public ActivityFavorHandler.DailyDrawAwardInfo getAwards(int index) {
            return this.awards_.get(index);
        }

        public ActivityFavorHandler.DailyDrawAwardInfoOrBuilder getAwardsOrBuilder(int index) {
            return this.awards_.get(index);
        }

        public boolean hasBeginTime() {
            return ((this.bitField0_ & 0x10) == 16);
        }

        public String getBeginTime() {
            Object ref = this.beginTime_;
            if (ref instanceof String)
                return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8())
                this.beginTime_ = s;
            return s;
        }

        public ByteString getBeginTimeBytes() {
            Object ref = this.beginTime_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.beginTime_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasEndTime() {
            return ((this.bitField0_ & 0x20) == 32);
        }

        public String getEndTime() {
            Object ref = this.endTime_;
            if (ref instanceof String)
                return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8())
                this.endTime_ = s;
            return s;
        }

        public ByteString getEndTimeBytes() {
            Object ref = this.endTime_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.endTime_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasDescribe() {
            return ((this.bitField0_ & 0x40) == 64);
        }

        public String getDescribe() {
            Object ref = this.describe_;
            if (ref instanceof String)
                return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8())
                this.describe_ = s;
            return s;
        }

        public ByteString getDescribeBytes() {
            Object ref = this.describe_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.describe_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasFreeCountUpdateTimeStamp() {
            return ((this.bitField0_ & 0x80) == 128);
        }

        public long getFreeCountUpdateTimeStamp() {
            return this.freeCountUpdateTimeStamp_;
        }

        public boolean hasProportion() {
            return ((this.bitField0_ & 0x100) == 256);
        }

        public int getProportion() {
            return this.proportion_;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
            this.freeCountLeft_ = 0;
            this.exploredTicketCountLeft_ = 0;
            this.awards_ = Collections.emptyList();
            this.beginTime_ = "";
            this.endTime_ = "";
            this.describe_ = "";
            this.freeCountUpdateTimeStamp_ = 0L;
            this.proportion_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasFreeCountLeft()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasExploredTicketCountLeft()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasBeginTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasEndTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasDescribe()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasFreeCountUpdateTimeStamp()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasProportion()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getAwardsCount(); i++) {
                if (!getAwards(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(2, getS2CMsgBytes());
            if ((this.bitField0_ & 0x4) == 4)
                output.writeInt32(3, this.freeCountLeft_);
            if ((this.bitField0_ & 0x8) == 8)
                output.writeInt32(4, this.exploredTicketCountLeft_);
            for (int i = 0; i < this.awards_.size(); i++)
                output.writeMessage(5, (MessageLite) this.awards_.get(i));
            if ((this.bitField0_ & 0x10) == 16)
                output.writeBytes(6, getBeginTimeBytes());
            if ((this.bitField0_ & 0x20) == 32)
                output.writeBytes(7, getEndTimeBytes());
            if ((this.bitField0_ & 0x40) == 64)
                output.writeBytes(8, getDescribeBytes());
            if ((this.bitField0_ & 0x80) == 128)
                output.writeInt64(9, this.freeCountUpdateTimeStamp_);
            if ((this.bitField0_ & 0x100) == 256)
                output.writeInt32(10, this.proportion_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeInt32Size(3, this.freeCountLeft_);
            if ((this.bitField0_ & 0x8) == 8)
                size += CodedOutputStream.computeInt32Size(4, this.exploredTicketCountLeft_);
            for (int i = 0; i < this.awards_.size(); i++)
                size += CodedOutputStream.computeMessageSize(5, (MessageLite) this.awards_.get(i));
            if ((this.bitField0_ & 0x10) == 16)
                size += CodedOutputStream.computeBytesSize(6, getBeginTimeBytes());
            if ((this.bitField0_ & 0x20) == 32)
                size += CodedOutputStream.computeBytesSize(7, getEndTimeBytes());
            if ((this.bitField0_ & 0x40) == 64)
                size += CodedOutputStream.computeBytesSize(8, getDescribeBytes());
            if ((this.bitField0_ & 0x80) == 128)
                size += CodedOutputStream.computeInt64Size(9, this.freeCountUpdateTimeStamp_);
            if ((this.bitField0_ & 0x100) == 256)
                size += CodedOutputStream.computeInt32Size(10, this.proportion_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static DailyDrawInfoResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (DailyDrawInfoResponse) PARSER.parseFrom(data);
        }

        public static DailyDrawInfoResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (DailyDrawInfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static DailyDrawInfoResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (DailyDrawInfoResponse) PARSER.parseFrom(data);
        }

        public static DailyDrawInfoResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (DailyDrawInfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static DailyDrawInfoResponse parseFrom(InputStream input) throws IOException {
            return (DailyDrawInfoResponse) PARSER.parseFrom(input);
        }

        public static DailyDrawInfoResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyDrawInfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static DailyDrawInfoResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (DailyDrawInfoResponse) PARSER.parseDelimitedFrom(input);
        }

        public static DailyDrawInfoResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyDrawInfoResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static DailyDrawInfoResponse parseFrom(CodedInputStream input) throws IOException {
            return (DailyDrawInfoResponse) PARSER.parseFrom(input);
        }

        public static DailyDrawInfoResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyDrawInfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(DailyDrawInfoResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.DailyDrawInfoResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;
            private int freeCountLeft_;
            private int exploredTicketCountLeft_;
            private List<ActivityFavorHandler.DailyDrawAwardInfo> awards_;
            private RepeatedFieldBuilder<ActivityFavorHandler.DailyDrawAwardInfo, ActivityFavorHandler.DailyDrawAwardInfo.Builder, ActivityFavorHandler.DailyDrawAwardInfoOrBuilder> awardsBuilder_;
            private Object beginTime_;
            private Object endTime_;
            private Object describe_;
            private long freeCountUpdateTimeStamp_;
            private int proportion_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawInfoResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.DailyDrawInfoResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                this.awards_ = Collections.emptyList();
                this.beginTime_ = "";
                this.endTime_ = "";
                this.describe_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                this.awards_ = Collections.emptyList();
                this.beginTime_ = "";
                this.endTime_ = "";
                this.describe_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.DailyDrawInfoResponse.alwaysUseFieldBuilders)
                    getAwardsFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                this.freeCountLeft_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                this.exploredTicketCountLeft_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                if (this.awardsBuilder_ == null) {
                    this.awards_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFEF;
                } else {
                    this.awardsBuilder_.clear();
                }
                this.beginTime_ = "";
                this.bitField0_ &= 0xFFFFFFDF;
                this.endTime_ = "";
                this.bitField0_ &= 0xFFFFFFBF;
                this.describe_ = "";
                this.bitField0_ &= 0xFFFFFF7F;
                this.freeCountUpdateTimeStamp_ = 0L;
                this.bitField0_ &= 0xFFFFFEFF;
                this.proportion_ = 0;
                this.bitField0_ &= 0xFFFFFDFF;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawInfoResponse_descriptor;
            }

            public ActivityFavorHandler.DailyDrawInfoResponse getDefaultInstanceForType() {
                return ActivityFavorHandler.DailyDrawInfoResponse.getDefaultInstance();
            }

            public ActivityFavorHandler.DailyDrawInfoResponse build() {
                ActivityFavorHandler.DailyDrawInfoResponse result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.DailyDrawInfoResponse buildPartial() {
                ActivityFavorHandler.DailyDrawInfoResponse result = new ActivityFavorHandler.DailyDrawInfoResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                if ((from_bitField0_ & 0x4) == 4)
                    to_bitField0_ |= 0x4;
                result.freeCountLeft_ = this.freeCountLeft_;
                if ((from_bitField0_ & 0x8) == 8)
                    to_bitField0_ |= 0x8;
                result.exploredTicketCountLeft_ = this.exploredTicketCountLeft_;
                if (this.awardsBuilder_ == null) {
                    if ((this.bitField0_ & 0x10) == 16) {
                        this.awards_ = Collections.unmodifiableList(this.awards_);
                        this.bitField0_ &= 0xFFFFFFEF;
                    }
                    result.awards_ = this.awards_;
                } else {
                    result.awards_ = this.awardsBuilder_.build();
                }
                if ((from_bitField0_ & 0x20) == 32)
                    to_bitField0_ |= 0x10;
                result.beginTime_ = this.beginTime_;
                if ((from_bitField0_ & 0x40) == 64)
                    to_bitField0_ |= 0x20;
                result.endTime_ = this.endTime_;
                if ((from_bitField0_ & 0x80) == 128)
                    to_bitField0_ |= 0x40;
                result.describe_ = this.describe_;
                if ((from_bitField0_ & 0x100) == 256)
                    to_bitField0_ |= 0x80;
                result.freeCountUpdateTimeStamp_ = this.freeCountUpdateTimeStamp_;
                if ((from_bitField0_ & 0x200) == 512)
                    to_bitField0_ |= 0x100;
                result.proportion_ = this.proportion_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.DailyDrawInfoResponse)
                    return mergeFrom((ActivityFavorHandler.DailyDrawInfoResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.DailyDrawInfoResponse other) {
                if (other == ActivityFavorHandler.DailyDrawInfoResponse.getDefaultInstance())
                    return this;
                if (other.hasS2CCode())
                    setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (other.hasFreeCountLeft())
                    setFreeCountLeft(other.getFreeCountLeft());
                if (other.hasExploredTicketCountLeft())
                    setExploredTicketCountLeft(other.getExploredTicketCountLeft());
                if (this.awardsBuilder_ == null) {
                    if (!other.awards_.isEmpty()) {
                        if (this.awards_.isEmpty()) {
                            this.awards_ = other.awards_;
                            this.bitField0_ &= 0xFFFFFFEF;
                        } else {
                            ensureAwardsIsMutable();
                            this.awards_.addAll(other.awards_);
                        }
                        onChanged();
                    }
                } else if (!other.awards_.isEmpty()) {
                    if (this.awardsBuilder_.isEmpty()) {
                        this.awardsBuilder_.dispose();
                        this.awardsBuilder_ = null;
                        this.awards_ = other.awards_;
                        this.bitField0_ &= 0xFFFFFFEF;
                        this.awardsBuilder_ = ActivityFavorHandler.DailyDrawInfoResponse.alwaysUseFieldBuilders ? getAwardsFieldBuilder() : null;
                    } else {
                        this.awardsBuilder_.addAllMessages(other.awards_);
                    }
                }
                if (other.hasBeginTime()) {
                    this.bitField0_ |= 0x20;
                    this.beginTime_ = other.beginTime_;
                    onChanged();
                }
                if (other.hasEndTime()) {
                    this.bitField0_ |= 0x40;
                    this.endTime_ = other.endTime_;
                    onChanged();
                }
                if (other.hasDescribe()) {
                    this.bitField0_ |= 0x80;
                    this.describe_ = other.describe_;
                    onChanged();
                }
                if (other.hasFreeCountUpdateTimeStamp())
                    setFreeCountUpdateTimeStamp(other.getFreeCountUpdateTimeStamp());
                if (other.hasProportion())
                    setProportion(other.getProportion());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode())
                    return false;
                if (!hasFreeCountLeft())
                    return false;
                if (!hasExploredTicketCountLeft())
                    return false;
                if (!hasBeginTime())
                    return false;
                if (!hasEndTime())
                    return false;
                if (!hasDescribe())
                    return false;
                if (!hasFreeCountUpdateTimeStamp())
                    return false;
                if (!hasProportion())
                    return false;
                for (int i = 0; i < getAwardsCount(); i++) {
                    if (!getAwards(i).isInitialized())
                        return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.DailyDrawInfoResponse parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.DailyDrawInfoResponse) ActivityFavorHandler.DailyDrawInfoResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.DailyDrawInfoResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = ActivityFavorHandler.DailyDrawInfoResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public boolean hasFreeCountLeft() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public int getFreeCountLeft() {
                return this.freeCountLeft_;
            }

            public Builder setFreeCountLeft(int value) {
                this.bitField0_ |= 0x4;
                this.freeCountLeft_ = value;
                onChanged();
                return this;
            }

            public Builder clearFreeCountLeft() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.freeCountLeft_ = 0;
                onChanged();
                return this;
            }

            public boolean hasExploredTicketCountLeft() {
                return ((this.bitField0_ & 0x8) == 8);
            }

            public int getExploredTicketCountLeft() {
                return this.exploredTicketCountLeft_;
            }

            public Builder setExploredTicketCountLeft(int value) {
                this.bitField0_ |= 0x8;
                this.exploredTicketCountLeft_ = value;
                onChanged();
                return this;
            }

            public Builder clearExploredTicketCountLeft() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.exploredTicketCountLeft_ = 0;
                onChanged();
                return this;
            }

            private void ensureAwardsIsMutable() {
                if ((this.bitField0_ & 0x10) != 16) {
                    this.awards_ = new ArrayList<>(this.awards_);
                    this.bitField0_ |= 0x10;
                }
            }

            public List<ActivityFavorHandler.DailyDrawAwardInfo> getAwardsList() {
                if (this.awardsBuilder_ == null)
                    return Collections.unmodifiableList(this.awards_);
                return this.awardsBuilder_.getMessageList();
            }

            public int getAwardsCount() {
                if (this.awardsBuilder_ == null)
                    return this.awards_.size();
                return this.awardsBuilder_.getCount();
            }

            public ActivityFavorHandler.DailyDrawAwardInfo getAwards(int index) {
                if (this.awardsBuilder_ == null)
                    return this.awards_.get(index);
                return (ActivityFavorHandler.DailyDrawAwardInfo) this.awardsBuilder_.getMessage(index);
            }

            public Builder setAwards(int index, ActivityFavorHandler.DailyDrawAwardInfo value) {
                if (this.awardsBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureAwardsIsMutable();
                    this.awards_.set(index, value);
                    onChanged();
                } else {
                    this.awardsBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setAwards(int index, ActivityFavorHandler.DailyDrawAwardInfo.Builder builderForValue) {
                if (this.awardsBuilder_ == null) {
                    ensureAwardsIsMutable();
                    this.awards_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.awardsBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAwards(ActivityFavorHandler.DailyDrawAwardInfo value) {
                if (this.awardsBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureAwardsIsMutable();
                    this.awards_.add(value);
                    onChanged();
                } else {
                    this.awardsBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addAwards(int index, ActivityFavorHandler.DailyDrawAwardInfo value) {
                if (this.awardsBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureAwardsIsMutable();
                    this.awards_.add(index, value);
                    onChanged();
                } else {
                    this.awardsBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addAwards(ActivityFavorHandler.DailyDrawAwardInfo.Builder builderForValue) {
                if (this.awardsBuilder_ == null) {
                    ensureAwardsIsMutable();
                    this.awards_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.awardsBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addAwards(int index, ActivityFavorHandler.DailyDrawAwardInfo.Builder builderForValue) {
                if (this.awardsBuilder_ == null) {
                    ensureAwardsIsMutable();
                    this.awards_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.awardsBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllAwards(Iterable<? extends ActivityFavorHandler.DailyDrawAwardInfo> values) {
                if (this.awardsBuilder_ == null) {
                    ensureAwardsIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.awards_);
                    onChanged();
                } else {
                    this.awardsBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearAwards() {
                if (this.awardsBuilder_ == null) {
                    this.awards_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFEF;
                    onChanged();
                } else {
                    this.awardsBuilder_.clear();
                }
                return this;
            }

            public Builder removeAwards(int index) {
                if (this.awardsBuilder_ == null) {
                    ensureAwardsIsMutable();
                    this.awards_.remove(index);
                    onChanged();
                } else {
                    this.awardsBuilder_.remove(index);
                }
                return this;
            }

            public ActivityFavorHandler.DailyDrawAwardInfo.Builder getAwardsBuilder(int index) {
                return (ActivityFavorHandler.DailyDrawAwardInfo.Builder) getAwardsFieldBuilder().getBuilder(index);
            }

            public ActivityFavorHandler.DailyDrawAwardInfoOrBuilder getAwardsOrBuilder(int index) {
                if (this.awardsBuilder_ == null)
                    return this.awards_.get(index);
                return (ActivityFavorHandler.DailyDrawAwardInfoOrBuilder) this.awardsBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends ActivityFavorHandler.DailyDrawAwardInfoOrBuilder> getAwardsOrBuilderList() {
                if (this.awardsBuilder_ != null)
                    return this.awardsBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.awards_);
            }

            public ActivityFavorHandler.DailyDrawAwardInfo.Builder addAwardsBuilder() {
                return (ActivityFavorHandler.DailyDrawAwardInfo.Builder) getAwardsFieldBuilder().addBuilder(ActivityFavorHandler.DailyDrawAwardInfo.getDefaultInstance());
            }

            public ActivityFavorHandler.DailyDrawAwardInfo.Builder addAwardsBuilder(int index) {
                return (ActivityFavorHandler.DailyDrawAwardInfo.Builder) getAwardsFieldBuilder().addBuilder(index, ActivityFavorHandler.DailyDrawAwardInfo.getDefaultInstance());
            }

            public List<ActivityFavorHandler.DailyDrawAwardInfo.Builder> getAwardsBuilderList() {
                return getAwardsFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<ActivityFavorHandler.DailyDrawAwardInfo, ActivityFavorHandler.DailyDrawAwardInfo.Builder, ActivityFavorHandler.DailyDrawAwardInfoOrBuilder> getAwardsFieldBuilder() {
                if (this.awardsBuilder_ == null) {
                    this.awardsBuilder_ = new RepeatedFieldBuilder(this.awards_, ((this.bitField0_ & 0x10) == 16), getParentForChildren(), isClean());
                    this.awards_ = null;
                }
                return this.awardsBuilder_;
            }

            public boolean hasBeginTime() {
                return ((this.bitField0_ & 0x20) == 32);
            }

            public String getBeginTime() {
                Object ref = this.beginTime_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.beginTime_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getBeginTimeBytes() {
                Object ref = this.beginTime_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.beginTime_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setBeginTime(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x20;
                this.beginTime_ = value;
                onChanged();
                return this;
            }

            public Builder clearBeginTime() {
                this.bitField0_ &= 0xFFFFFFDF;
                this.beginTime_ = ActivityFavorHandler.DailyDrawInfoResponse.getDefaultInstance().getBeginTime();
                onChanged();
                return this;
            }

            public Builder setBeginTimeBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x20;
                this.beginTime_ = value;
                onChanged();
                return this;
            }

            public boolean hasEndTime() {
                return ((this.bitField0_ & 0x40) == 64);
            }

            public String getEndTime() {
                Object ref = this.endTime_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.endTime_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getEndTimeBytes() {
                Object ref = this.endTime_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.endTime_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setEndTime(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x40;
                this.endTime_ = value;
                onChanged();
                return this;
            }

            public Builder clearEndTime() {
                this.bitField0_ &= 0xFFFFFFBF;
                this.endTime_ = ActivityFavorHandler.DailyDrawInfoResponse.getDefaultInstance().getEndTime();
                onChanged();
                return this;
            }

            public Builder setEndTimeBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x40;
                this.endTime_ = value;
                onChanged();
                return this;
            }

            public boolean hasDescribe() {
                return ((this.bitField0_ & 0x80) == 128);
            }

            public String getDescribe() {
                Object ref = this.describe_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.describe_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getDescribeBytes() {
                Object ref = this.describe_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.describe_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setDescribe(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x80;
                this.describe_ = value;
                onChanged();
                return this;
            }

            public Builder clearDescribe() {
                this.bitField0_ &= 0xFFFFFF7F;
                this.describe_ = ActivityFavorHandler.DailyDrawInfoResponse.getDefaultInstance().getDescribe();
                onChanged();
                return this;
            }

            public Builder setDescribeBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x80;
                this.describe_ = value;
                onChanged();
                return this;
            }

            public boolean hasFreeCountUpdateTimeStamp() {
                return ((this.bitField0_ & 0x100) == 256);
            }

            public long getFreeCountUpdateTimeStamp() {
                return this.freeCountUpdateTimeStamp_;
            }

            public Builder setFreeCountUpdateTimeStamp(long value) {
                this.bitField0_ |= 0x100;
                this.freeCountUpdateTimeStamp_ = value;
                onChanged();
                return this;
            }

            public Builder clearFreeCountUpdateTimeStamp() {
                this.bitField0_ &= 0xFFFFFEFF;
                this.freeCountUpdateTimeStamp_ = 0L;
                onChanged();
                return this;
            }

            public boolean hasProportion() {
                return ((this.bitField0_ & 0x200) == 512);
            }

            public int getProportion() {
                return this.proportion_;
            }

            public Builder setProportion(int value) {
                this.bitField0_ |= 0x200;
                this.proportion_ = value;
                onChanged();
                return this;
            }

            public Builder clearProportion() {
                this.bitField0_ &= 0xFFFFFDFF;
                this.proportion_ = 0;
                onChanged();
                return this;
            }
        }
    }

    public static final class DailyDrawRequest extends GeneratedMessage implements DailyDrawRequestOrBuilder {
        private static final DailyDrawRequest defaultInstance = new DailyDrawRequest(true);
        private final UnknownFieldSet unknownFields;

        private DailyDrawRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private DailyDrawRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static DailyDrawRequest getDefaultInstance() {
            return defaultInstance;
        }

        public DailyDrawRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private DailyDrawRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.timeType_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.costType_ = input.readInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.id_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(DailyDrawRequest.class, Builder.class);
        }

        public static Parser<DailyDrawRequest> PARSER = (Parser<DailyDrawRequest>) new AbstractParser<DailyDrawRequest>() {
            public ActivityFavorHandler.DailyDrawRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.DailyDrawRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int TIMETYPE_FIELD_NUMBER = 1;
        private int timeType_;
        public static final int COSTTYPE_FIELD_NUMBER = 2;
        private int costType_;
        public static final int ID_FIELD_NUMBER = 3;
        private int id_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<DailyDrawRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasTimeType() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getTimeType() {
            return this.timeType_;
        }

        public boolean hasCostType() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getCostType() {
            return this.costType_;
        }

        public boolean hasId() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public int getId() {
            return this.id_;
        }

        private void initFields() {
            this.timeType_ = 0;
            this.costType_ = 0;
            this.id_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasTimeType()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasCostType()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.timeType_);
            if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.costType_);
            if ((this.bitField0_ & 0x4) == 4) output.writeInt32(3, this.id_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.timeType_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.costType_);
            if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt32Size(3, this.id_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static DailyDrawRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (DailyDrawRequest) PARSER.parseFrom(data);
        }

        public static DailyDrawRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (DailyDrawRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static DailyDrawRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (DailyDrawRequest) PARSER.parseFrom(data);
        }

        public static DailyDrawRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (DailyDrawRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static DailyDrawRequest parseFrom(InputStream input) throws IOException {
            return (DailyDrawRequest) PARSER.parseFrom(input);
        }

        public static DailyDrawRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyDrawRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static DailyDrawRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (DailyDrawRequest) PARSER.parseDelimitedFrom(input);
        }

        public static DailyDrawRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyDrawRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static DailyDrawRequest parseFrom(CodedInputStream input) throws IOException {
            return (DailyDrawRequest) PARSER.parseFrom(input);
        }

        public static DailyDrawRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyDrawRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(DailyDrawRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.DailyDrawRequestOrBuilder {
            private int bitField0_;
            private int timeType_;
            private int costType_;
            private int id_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.DailyDrawRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.DailyDrawRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.timeType_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.costType_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                this.id_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawRequest_descriptor;
            }

            public ActivityFavorHandler.DailyDrawRequest getDefaultInstanceForType() {
                return ActivityFavorHandler.DailyDrawRequest.getDefaultInstance();
            }

            public ActivityFavorHandler.DailyDrawRequest build() {
                ActivityFavorHandler.DailyDrawRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.DailyDrawRequest buildPartial() {
                ActivityFavorHandler.DailyDrawRequest result = new ActivityFavorHandler.DailyDrawRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.timeType_ = this.timeType_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.costType_ = this.costType_;
                if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;
                result.id_ = this.id_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.DailyDrawRequest)
                    return mergeFrom((ActivityFavorHandler.DailyDrawRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.DailyDrawRequest other) {
                if (other == ActivityFavorHandler.DailyDrawRequest.getDefaultInstance()) return this;
                if (other.hasTimeType()) setTimeType(other.getTimeType());
                if (other.hasCostType()) setCostType(other.getCostType());
                if (other.hasId()) setId(other.getId());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasTimeType()) return false;
                if (!hasCostType()) return false;
                if (!hasId()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.DailyDrawRequest parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.DailyDrawRequest) ActivityFavorHandler.DailyDrawRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.DailyDrawRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasTimeType() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getTimeType() {
                return this.timeType_;
            }

            public Builder setTimeType(int value) {
                this.bitField0_ |= 0x1;
                this.timeType_ = value;
                onChanged();
                return this;
            }

            public Builder clearTimeType() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.timeType_ = 0;
                onChanged();
                return this;
            }

            public boolean hasCostType() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getCostType() {
                return this.costType_;
            }

            public Builder setCostType(int value) {
                this.bitField0_ |= 0x2;
                this.costType_ = value;
                onChanged();
                return this;
            }

            public Builder clearCostType() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.costType_ = 0;
                onChanged();
                return this;
            }

            public boolean hasId() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public int getId() {
                return this.id_;
            }

            public Builder setId(int value) {
                this.bitField0_ |= 0x4;
                this.id_ = value;
                onChanged();
                return this;
            }

            public Builder clearId() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.id_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class DailyDrawResponse
            extends GeneratedMessage
            implements DailyDrawResponseOrBuilder {
        private static final DailyDrawResponse defaultInstance = new DailyDrawResponse(true);
        private final UnknownFieldSet unknownFields;

        private DailyDrawResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private DailyDrawResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static DailyDrawResponse getDefaultInstance() {
            return defaultInstance;
        }

        public DailyDrawResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private DailyDrawResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                        case 26:
                            if ((mutable_bitField0_ & 0x4) != 4) {
                                this.awards_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x4;
                            }
                            this.awards_.add(input.readMessage(ActivityFavorHandler.DailyDrawAwardInfo.PARSER, extensionRegistry));
                            break;
                        case 32:
                            this.bitField0_ |= 0x4;
                            this.freeCountLeft_ = input.readInt32();
                            break;
                        case 40:
                            this.bitField0_ |= 0x8;
                            this.exploredTicketCountLeft_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x4) == 4) this.awards_ = Collections.unmodifiableList(this.awards_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(DailyDrawResponse.class, Builder.class);
        }

        public static Parser<DailyDrawResponse> PARSER = (Parser<DailyDrawResponse>) new AbstractParser<DailyDrawResponse>() {
            public ActivityFavorHandler.DailyDrawResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.DailyDrawResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int AWARDS_FIELD_NUMBER = 3;
        private List<ActivityFavorHandler.DailyDrawAwardInfo> awards_;
        public static final int FREECOUNTLEFT_FIELD_NUMBER = 4;
        private int freeCountLeft_;
        public static final int EXPLOREDTICKETCOUNTLEFT_FIELD_NUMBER = 5;
        private int exploredTicketCountLeft_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<DailyDrawResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        static {
            defaultInstance.initFields();
        }

        public List<ActivityFavorHandler.DailyDrawAwardInfo> getAwardsList() {
            return this.awards_;
        }

        public List<? extends ActivityFavorHandler.DailyDrawAwardInfoOrBuilder> getAwardsOrBuilderList() {
            return (List) this.awards_;
        }

        public int getAwardsCount() {
            return this.awards_.size();
        }

        public ActivityFavorHandler.DailyDrawAwardInfo getAwards(int index) {
            return this.awards_.get(index);
        }

        public ActivityFavorHandler.DailyDrawAwardInfoOrBuilder getAwardsOrBuilder(int index) {
            return this.awards_.get(index);
        }

        public boolean hasFreeCountLeft() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public int getFreeCountLeft() {
            return this.freeCountLeft_;
        }

        public boolean hasExploredTicketCountLeft() {
            return ((this.bitField0_ & 0x8) == 8);
        }

        public int getExploredTicketCountLeft() {
            return this.exploredTicketCountLeft_;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
            this.awards_ = Collections.emptyList();
            this.freeCountLeft_ = 0;
            this.exploredTicketCountLeft_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getAwardsCount(); i++) {
                if (!getAwards(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(2, getS2CMsgBytes());
            for (int i = 0; i < this.awards_.size(); i++)
                output.writeMessage(3, (MessageLite) this.awards_.get(i));
            if ((this.bitField0_ & 0x4) == 4)
                output.writeInt32(4, this.freeCountLeft_);
            if ((this.bitField0_ & 0x8) == 8)
                output.writeInt32(5, this.exploredTicketCountLeft_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            for (int i = 0; i < this.awards_.size(); i++)
                size += CodedOutputStream.computeMessageSize(3, (MessageLite) this.awards_.get(i));
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeInt32Size(4, this.freeCountLeft_);
            if ((this.bitField0_ & 0x8) == 8)
                size += CodedOutputStream.computeInt32Size(5, this.exploredTicketCountLeft_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static DailyDrawResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (DailyDrawResponse) PARSER.parseFrom(data);
        }

        public static DailyDrawResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (DailyDrawResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static DailyDrawResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (DailyDrawResponse) PARSER.parseFrom(data);
        }

        public static DailyDrawResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (DailyDrawResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static DailyDrawResponse parseFrom(InputStream input) throws IOException {
            return (DailyDrawResponse) PARSER.parseFrom(input);
        }

        public static DailyDrawResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyDrawResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static DailyDrawResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (DailyDrawResponse) PARSER.parseDelimitedFrom(input);
        }

        public static DailyDrawResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyDrawResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static DailyDrawResponse parseFrom(CodedInputStream input) throws IOException {
            return (DailyDrawResponse) PARSER.parseFrom(input);
        }

        public static DailyDrawResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (DailyDrawResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(DailyDrawResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.DailyDrawResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;
            private List<ActivityFavorHandler.DailyDrawAwardInfo> awards_;
            private RepeatedFieldBuilder<ActivityFavorHandler.DailyDrawAwardInfo, ActivityFavorHandler.DailyDrawAwardInfo.Builder, ActivityFavorHandler.DailyDrawAwardInfoOrBuilder> awardsBuilder_;
            private int freeCountLeft_;
            private int exploredTicketCountLeft_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.DailyDrawResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                this.awards_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                this.awards_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.DailyDrawResponse.alwaysUseFieldBuilders)
                    getAwardsFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                if (this.awardsBuilder_ == null) {
                    this.awards_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                } else {
                    this.awardsBuilder_.clear();
                }
                this.freeCountLeft_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                this.exploredTicketCountLeft_ = 0;
                this.bitField0_ &= 0xFFFFFFEF;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_DailyDrawResponse_descriptor;
            }

            public ActivityFavorHandler.DailyDrawResponse getDefaultInstanceForType() {
                return ActivityFavorHandler.DailyDrawResponse.getDefaultInstance();
            }

            public ActivityFavorHandler.DailyDrawResponse build() {
                ActivityFavorHandler.DailyDrawResponse result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.DailyDrawResponse buildPartial() {
                ActivityFavorHandler.DailyDrawResponse result = new ActivityFavorHandler.DailyDrawResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                if (this.awardsBuilder_ == null) {
                    if ((this.bitField0_ & 0x4) == 4) {
                        this.awards_ = Collections.unmodifiableList(this.awards_);
                        this.bitField0_ &= 0xFFFFFFFB;
                    }
                    result.awards_ = this.awards_;
                } else {
                    result.awards_ = this.awardsBuilder_.build();
                }
                if ((from_bitField0_ & 0x8) == 8)
                    to_bitField0_ |= 0x4;
                result.freeCountLeft_ = this.freeCountLeft_;
                if ((from_bitField0_ & 0x10) == 16)
                    to_bitField0_ |= 0x8;
                result.exploredTicketCountLeft_ = this.exploredTicketCountLeft_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.DailyDrawResponse)
                    return mergeFrom((ActivityFavorHandler.DailyDrawResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.DailyDrawResponse other) {
                if (other == ActivityFavorHandler.DailyDrawResponse.getDefaultInstance())
                    return this;
                if (other.hasS2CCode())
                    setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (this.awardsBuilder_ == null) {
                    if (!other.awards_.isEmpty()) {
                        if (this.awards_.isEmpty()) {
                            this.awards_ = other.awards_;
                            this.bitField0_ &= 0xFFFFFFFB;
                        } else {
                            ensureAwardsIsMutable();
                            this.awards_.addAll(other.awards_);
                        }
                        onChanged();
                    }
                } else if (!other.awards_.isEmpty()) {
                    if (this.awardsBuilder_.isEmpty()) {
                        this.awardsBuilder_.dispose();
                        this.awardsBuilder_ = null;
                        this.awards_ = other.awards_;
                        this.bitField0_ &= 0xFFFFFFFB;
                        this.awardsBuilder_ = ActivityFavorHandler.DailyDrawResponse.alwaysUseFieldBuilders ? getAwardsFieldBuilder() : null;
                    } else {
                        this.awardsBuilder_.addAllMessages(other.awards_);
                    }
                }
                if (other.hasFreeCountLeft())
                    setFreeCountLeft(other.getFreeCountLeft());
                if (other.hasExploredTicketCountLeft())
                    setExploredTicketCountLeft(other.getExploredTicketCountLeft());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode())
                    return false;
                for (int i = 0; i < getAwardsCount(); i++) {
                    if (!getAwards(i).isInitialized())
                        return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.DailyDrawResponse parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.DailyDrawResponse) ActivityFavorHandler.DailyDrawResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.DailyDrawResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = ActivityFavorHandler.DailyDrawResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            private void ensureAwardsIsMutable() {
                if ((this.bitField0_ & 0x4) != 4) {
                    this.awards_ = new ArrayList<>(this.awards_);
                    this.bitField0_ |= 0x4;
                }
            }

            public List<ActivityFavorHandler.DailyDrawAwardInfo> getAwardsList() {
                if (this.awardsBuilder_ == null)
                    return Collections.unmodifiableList(this.awards_);
                return this.awardsBuilder_.getMessageList();
            }

            public int getAwardsCount() {
                if (this.awardsBuilder_ == null)
                    return this.awards_.size();
                return this.awardsBuilder_.getCount();
            }

            public ActivityFavorHandler.DailyDrawAwardInfo getAwards(int index) {
                if (this.awardsBuilder_ == null)
                    return this.awards_.get(index);
                return (ActivityFavorHandler.DailyDrawAwardInfo) this.awardsBuilder_.getMessage(index);
            }

            public Builder setAwards(int index, ActivityFavorHandler.DailyDrawAwardInfo value) {
                if (this.awardsBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureAwardsIsMutable();
                    this.awards_.set(index, value);
                    onChanged();
                } else {
                    this.awardsBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setAwards(int index, ActivityFavorHandler.DailyDrawAwardInfo.Builder builderForValue) {
                if (this.awardsBuilder_ == null) {
                    ensureAwardsIsMutable();
                    this.awards_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.awardsBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAwards(ActivityFavorHandler.DailyDrawAwardInfo value) {
                if (this.awardsBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureAwardsIsMutable();
                    this.awards_.add(value);
                    onChanged();
                } else {
                    this.awardsBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addAwards(int index, ActivityFavorHandler.DailyDrawAwardInfo value) {
                if (this.awardsBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureAwardsIsMutable();
                    this.awards_.add(index, value);
                    onChanged();
                } else {
                    this.awardsBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addAwards(ActivityFavorHandler.DailyDrawAwardInfo.Builder builderForValue) {
                if (this.awardsBuilder_ == null) {
                    ensureAwardsIsMutable();
                    this.awards_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.awardsBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addAwards(int index, ActivityFavorHandler.DailyDrawAwardInfo.Builder builderForValue) {
                if (this.awardsBuilder_ == null) {
                    ensureAwardsIsMutable();
                    this.awards_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.awardsBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllAwards(Iterable<? extends ActivityFavorHandler.DailyDrawAwardInfo> values) {
                if (this.awardsBuilder_ == null) {
                    ensureAwardsIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.awards_);
                    onChanged();
                } else {
                    this.awardsBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearAwards() {
                if (this.awardsBuilder_ == null) {
                    this.awards_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                    onChanged();
                } else {
                    this.awardsBuilder_.clear();
                }
                return this;
            }

            public Builder removeAwards(int index) {
                if (this.awardsBuilder_ == null) {
                    ensureAwardsIsMutable();
                    this.awards_.remove(index);
                    onChanged();
                } else {
                    this.awardsBuilder_.remove(index);
                }
                return this;
            }

            public ActivityFavorHandler.DailyDrawAwardInfo.Builder getAwardsBuilder(int index) {
                return (ActivityFavorHandler.DailyDrawAwardInfo.Builder) getAwardsFieldBuilder().getBuilder(index);
            }

            public ActivityFavorHandler.DailyDrawAwardInfoOrBuilder getAwardsOrBuilder(int index) {
                if (this.awardsBuilder_ == null)
                    return this.awards_.get(index);
                return (ActivityFavorHandler.DailyDrawAwardInfoOrBuilder) this.awardsBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends ActivityFavorHandler.DailyDrawAwardInfoOrBuilder> getAwardsOrBuilderList() {
                if (this.awardsBuilder_ != null)
                    return this.awardsBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.awards_);
            }

            public ActivityFavorHandler.DailyDrawAwardInfo.Builder addAwardsBuilder() {
                return (ActivityFavorHandler.DailyDrawAwardInfo.Builder) getAwardsFieldBuilder().addBuilder(ActivityFavorHandler.DailyDrawAwardInfo.getDefaultInstance());
            }

            public ActivityFavorHandler.DailyDrawAwardInfo.Builder addAwardsBuilder(int index) {
                return (ActivityFavorHandler.DailyDrawAwardInfo.Builder) getAwardsFieldBuilder().addBuilder(index, ActivityFavorHandler.DailyDrawAwardInfo.getDefaultInstance());
            }

            public List<ActivityFavorHandler.DailyDrawAwardInfo.Builder> getAwardsBuilderList() {
                return getAwardsFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<ActivityFavorHandler.DailyDrawAwardInfo, ActivityFavorHandler.DailyDrawAwardInfo.Builder, ActivityFavorHandler.DailyDrawAwardInfoOrBuilder> getAwardsFieldBuilder() {
                if (this.awardsBuilder_ == null) {
                    this.awardsBuilder_ = new RepeatedFieldBuilder(this.awards_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean());
                    this.awards_ = null;
                }
                return this.awardsBuilder_;
            }

            public boolean hasFreeCountLeft() {
                return ((this.bitField0_ & 0x8) == 8);
            }

            public int getFreeCountLeft() {
                return this.freeCountLeft_;
            }

            public Builder setFreeCountLeft(int value) {
                this.bitField0_ |= 0x8;
                this.freeCountLeft_ = value;
                onChanged();
                return this;
            }

            public Builder clearFreeCountLeft() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.freeCountLeft_ = 0;
                onChanged();
                return this;
            }

            public boolean hasExploredTicketCountLeft() {
                return ((this.bitField0_ & 0x10) == 16);
            }

            public int getExploredTicketCountLeft() {
                return this.exploredTicketCountLeft_;
            }

            public Builder setExploredTicketCountLeft(int value) {
                this.bitField0_ |= 0x10;
                this.exploredTicketCountLeft_ = value;
                onChanged();
                return this;
            }

            public Builder clearExploredTicketCountLeft() {
                this.bitField0_ &= 0xFFFFFFEF;
                this.exploredTicketCountLeft_ = 0;
                onChanged();
                return this;
            }
        }
    }

    public static final class RecoveredItem extends GeneratedMessage implements RecoveredItemOrBuilder {
        private static final RecoveredItem defaultInstance = new RecoveredItem(true);
        private final UnknownFieldSet unknownFields;

        private RecoveredItem(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private RecoveredItem(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static RecoveredItem getDefaultInstance() {
            return defaultInstance;
        }

        public RecoveredItem getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private RecoveredItem(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.code_ = bs;
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.num_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_RecoveredItem_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_RecoveredItem_fieldAccessorTable.ensureFieldAccessorsInitialized(RecoveredItem.class, Builder.class);
        }

        public static Parser<RecoveredItem> PARSER = (Parser<RecoveredItem>) new AbstractParser<RecoveredItem>() {
            public ActivityFavorHandler.RecoveredItem parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.RecoveredItem(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int CODE_FIELD_NUMBER = 1;
        private Object code_;
        public static final int NUM_FIELD_NUMBER = 2;
        private int num_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<RecoveredItem> getParserForType() {
            return PARSER;
        }

        public boolean hasCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getCode() {
            Object ref = this.code_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.code_ = s;
            return s;
        }

        public ByteString getCodeBytes() {
            Object ref = this.code_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.code_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasNum() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getNum() {
            return this.num_;
        }

        private void initFields() {
            this.code_ = "";
            this.num_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasNum()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getCodeBytes());
            if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.num_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getCodeBytes());
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.num_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static RecoveredItem parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (RecoveredItem) PARSER.parseFrom(data);
        }

        public static RecoveredItem parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (RecoveredItem) PARSER.parseFrom(data, extensionRegistry);
        }

        public static RecoveredItem parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (RecoveredItem) PARSER.parseFrom(data);
        }

        public static RecoveredItem parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (RecoveredItem) PARSER.parseFrom(data, extensionRegistry);
        }

        public static RecoveredItem parseFrom(InputStream input) throws IOException {
            return (RecoveredItem) PARSER.parseFrom(input);
        }

        public static RecoveredItem parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RecoveredItem) PARSER.parseFrom(input, extensionRegistry);
        }

        public static RecoveredItem parseDelimitedFrom(InputStream input) throws IOException {
            return (RecoveredItem) PARSER.parseDelimitedFrom(input);
        }

        public static RecoveredItem parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RecoveredItem) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static RecoveredItem parseFrom(CodedInputStream input) throws IOException {
            return (RecoveredItem) PARSER.parseFrom(input);
        }

        public static RecoveredItem parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RecoveredItem) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(RecoveredItem prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.RecoveredItemOrBuilder {
            private int bitField0_;
            private Object code_;
            private int num_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_RecoveredItem_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_RecoveredItem_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.RecoveredItem.class, Builder.class);
            }

            private Builder() {
                this.code_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.code_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.RecoveredItem.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.code_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                this.num_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_RecoveredItem_descriptor;
            }

            public ActivityFavorHandler.RecoveredItem getDefaultInstanceForType() {
                return ActivityFavorHandler.RecoveredItem.getDefaultInstance();
            }

            public ActivityFavorHandler.RecoveredItem build() {
                ActivityFavorHandler.RecoveredItem result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.RecoveredItem buildPartial() {
                ActivityFavorHandler.RecoveredItem result = new ActivityFavorHandler.RecoveredItem(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.code_ = this.code_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.num_ = this.num_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.RecoveredItem)
                    return mergeFrom((ActivityFavorHandler.RecoveredItem) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.RecoveredItem other) {
                if (other == ActivityFavorHandler.RecoveredItem.getDefaultInstance()) return this;
                if (other.hasCode()) {
                    this.bitField0_ |= 0x1;
                    this.code_ = other.code_;
                    onChanged();
                }
                if (other.hasNum()) setNum(other.getNum());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasCode()) return false;
                if (!hasNum()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.RecoveredItem parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.RecoveredItem) ActivityFavorHandler.RecoveredItem.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.RecoveredItem) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public String getCode() {
                Object ref = this.code_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.code_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getCodeBytes() {
                Object ref = this.code_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.code_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setCode(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.code_ = value;
                onChanged();
                return this;
            }

            public Builder clearCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.code_ = ActivityFavorHandler.RecoveredItem.getDefaultInstance().getCode();
                onChanged();
                return this;
            }

            public Builder setCodeBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.code_ = value;
                onChanged();
                return this;
            }

            public boolean hasNum() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getNum() {
                return this.num_;
            }

            public Builder setNum(int value) {
                this.bitField0_ |= 0x2;
                this.num_ = value;
                onChanged();
                return this;
            }

            public Builder clearNum() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.num_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class RecoveredSourceInfo
            extends GeneratedMessage
            implements RecoveredSourceInfoOrBuilder {
        private static final RecoveredSourceInfo defaultInstance = new RecoveredSourceInfo(true);
        private final UnknownFieldSet unknownFields;

        private RecoveredSourceInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private RecoveredSourceInfo(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static RecoveredSourceInfo getDefaultInstance() {
            return defaultInstance;
        }

        public RecoveredSourceInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private RecoveredSourceInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.id_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.sourceName_ = bs;
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.minDate_ = input.readInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 0x8;
                            this.maxDate_ = input.readInt32();
                            break;
                        case 40:
                            this.bitField0_ |= 0x10;
                            this.state_ = input.readInt32();
                            break;
                        case 50:
                            if ((mutable_bitField0_ & 0x20) != 32) {
                                this.recoveredItems_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x20;
                            }
                            this.recoveredItems_.add(input.readMessage(ActivityFavorHandler.RecoveredItem.PARSER, extensionRegistry));
                            break;
                        case 56:
                            this.bitField0_ |= 0x20;
                            this.needDiamond_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x20) == 32)
                    this.recoveredItems_ = Collections.unmodifiableList(this.recoveredItems_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_RecoveredSourceInfo_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_RecoveredSourceInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(RecoveredSourceInfo.class, Builder.class);
        }

        public static Parser<RecoveredSourceInfo> PARSER = (Parser<RecoveredSourceInfo>) new AbstractParser<RecoveredSourceInfo>() {
            public ActivityFavorHandler.RecoveredSourceInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.RecoveredSourceInfo(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int ID_FIELD_NUMBER = 1;
        private int id_;
        public static final int SOURCENAME_FIELD_NUMBER = 2;
        private Object sourceName_;
        public static final int MINDATE_FIELD_NUMBER = 3;
        private int minDate_;
        public static final int MAXDATE_FIELD_NUMBER = 4;
        private int maxDate_;
        public static final int STATE_FIELD_NUMBER = 5;
        private int state_;
        public static final int RECOVEREDITEMS_FIELD_NUMBER = 6;
        private List<ActivityFavorHandler.RecoveredItem> recoveredItems_;
        public static final int NEEDDIAMOND_FIELD_NUMBER = 7;
        private int needDiamond_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<RecoveredSourceInfo> getParserForType() {
            return PARSER;
        }

        public boolean hasId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getId() {
            return this.id_;
        }

        public boolean hasSourceName() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getSourceName() {
            Object ref = this.sourceName_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.sourceName_ = s;
            return s;
        }

        public ByteString getSourceNameBytes() {
            Object ref = this.sourceName_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.sourceName_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        static {
            defaultInstance.initFields();
        }


        public boolean hasMinDate() {
            return ((this.bitField0_ & 0x4) == 4);
        }


        public int getMinDate() {
            return this.minDate_;
        }


        public boolean hasMaxDate() {
            return ((this.bitField0_ & 0x8) == 8);
        }


        public int getMaxDate() {
            return this.maxDate_;
        }


        public boolean hasState() {
            return ((this.bitField0_ & 0x10) == 16);
        }


        public int getState() {
            return this.state_;
        }


        public List<ActivityFavorHandler.RecoveredItem> getRecoveredItemsList() {
            return this.recoveredItems_;
        }


        public List<? extends ActivityFavorHandler.RecoveredItemOrBuilder> getRecoveredItemsOrBuilderList() {
            return (List) this.recoveredItems_;
        }


        public int getRecoveredItemsCount() {
            return this.recoveredItems_.size();
        }


        public ActivityFavorHandler.RecoveredItem getRecoveredItems(int index) {
            return this.recoveredItems_.get(index);
        }


        public ActivityFavorHandler.RecoveredItemOrBuilder getRecoveredItemsOrBuilder(int index) {
            return this.recoveredItems_.get(index);
        }


        public boolean hasNeedDiamond() {
            return ((this.bitField0_ & 0x20) == 32);
        }


        public int getNeedDiamond() {
            return this.needDiamond_;
        }


        private void initFields() {
            this.id_ = 0;
            this.sourceName_ = "";
            this.minDate_ = 0;
            this.maxDate_ = 0;
            this.state_ = 0;
            this.recoveredItems_ = Collections.emptyList();
            this.needDiamond_ = 0;
        }


        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            if (!hasId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasSourceName()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasMinDate()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasMaxDate()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasState()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasNeedDiamond()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getRecoveredItemsCount(); i++) {
                if (!getRecoveredItems(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }


        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeInt32(1, this.id_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeBytes(2, getSourceNameBytes());
            }
            if ((this.bitField0_ & 0x4) == 4) {
                output.writeInt32(3, this.minDate_);
            }
            if ((this.bitField0_ & 0x8) == 8) {
                output.writeInt32(4, this.maxDate_);
            }
            if ((this.bitField0_ & 0x10) == 16) {
                output.writeInt32(5, this.state_);
            }
            for (int i = 0; i < this.recoveredItems_.size(); i++) {
                output.writeMessage(6, (MessageLite) this.recoveredItems_.get(i));
            }
            if ((this.bitField0_ & 0x20) == 32) {
                output.writeInt32(7, this.needDiamond_);
            }
            getUnknownFields().writeTo(output);
        }


        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeInt32Size(1, this.id_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeBytesSize(2, getSourceNameBytes());
            }
            if ((this.bitField0_ & 0x4) == 4) {
                size += CodedOutputStream.computeInt32Size(3, this.minDate_);
            }
            if ((this.bitField0_ & 0x8) == 8) {
                size += CodedOutputStream.computeInt32Size(4, this.maxDate_);
            }
            if ((this.bitField0_ & 0x10) == 16) {
                size += CodedOutputStream.computeInt32Size(5, this.state_);
            }
            for (int i = 0; i < this.recoveredItems_.size(); i++) {
                size += CodedOutputStream.computeMessageSize(6, (MessageLite) this.recoveredItems_.get(i));
            }
            if ((this.bitField0_ & 0x20) == 32) {
                size += CodedOutputStream.computeInt32Size(7, this.needDiamond_);
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }


        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }


        public static RecoveredSourceInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (RecoveredSourceInfo) PARSER.parseFrom(data);
        }


        public static RecoveredSourceInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (RecoveredSourceInfo) PARSER.parseFrom(data, extensionRegistry);
        }


        public static RecoveredSourceInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (RecoveredSourceInfo) PARSER.parseFrom(data);
        }


        public static RecoveredSourceInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (RecoveredSourceInfo) PARSER.parseFrom(data, extensionRegistry);
        }


        public static RecoveredSourceInfo parseFrom(InputStream input) throws IOException {
            return (RecoveredSourceInfo) PARSER.parseFrom(input);
        }


        public static RecoveredSourceInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RecoveredSourceInfo) PARSER.parseFrom(input, extensionRegistry);
        }


        public static RecoveredSourceInfo parseDelimitedFrom(InputStream input) throws IOException {
            return (RecoveredSourceInfo) PARSER.parseDelimitedFrom(input);
        }


        public static RecoveredSourceInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RecoveredSourceInfo) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }


        public static RecoveredSourceInfo parseFrom(CodedInputStream input) throws IOException {
            return (RecoveredSourceInfo) PARSER.parseFrom(input);
        }


        public static RecoveredSourceInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RecoveredSourceInfo) PARSER.parseFrom(input, extensionRegistry);
        }


        public static Builder newBuilder() {
            return Builder.create();
        }


        public Builder newBuilderForType() {
            return newBuilder();
        }


        public static Builder newBuilder(RecoveredSourceInfo prototype) {
            return newBuilder().mergeFrom(prototype);
        }


        public Builder toBuilder() {
            return newBuilder(this);
        }


        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }


        public static final class Builder
                extends GeneratedMessage.Builder<Builder>
                implements ActivityFavorHandler.RecoveredSourceInfoOrBuilder {
            private int bitField0_;


            private int id_;


            private Object sourceName_;


            private int minDate_;


            private int maxDate_;


            private int state_;


            private List<ActivityFavorHandler.RecoveredItem> recoveredItems_;


            private RepeatedFieldBuilder<ActivityFavorHandler.RecoveredItem, ActivityFavorHandler.RecoveredItem.Builder, ActivityFavorHandler.RecoveredItemOrBuilder> recoveredItemsBuilder_;


            private int needDiamond_;


            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_RecoveredSourceInfo_descriptor;
            }


            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_RecoveredSourceInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.RecoveredSourceInfo.class, Builder.class);
            }


            private Builder() {
                this.sourceName_ = "";
                this.recoveredItems_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }


            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.sourceName_ = "";
                this.recoveredItems_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }


            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.RecoveredSourceInfo.alwaysUseFieldBuilders) {
                    getRecoveredItemsFieldBuilder();
                }
            }


            private static Builder create() {
                return new Builder();
            }


            public Builder clear() {
                super.clear();
                this.id_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.sourceName_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                this.minDate_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                this.maxDate_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                this.state_ = 0;
                this.bitField0_ &= 0xFFFFFFEF;
                if (this.recoveredItemsBuilder_ == null) {
                    this.recoveredItems_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFDF;
                } else {
                    this.recoveredItemsBuilder_.clear();
                }
                this.needDiamond_ = 0;
                this.bitField0_ &= 0xFFFFFFBF;
                return this;
            }


            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }


            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_RecoveredSourceInfo_descriptor;
            }


            public ActivityFavorHandler.RecoveredSourceInfo getDefaultInstanceForType() {
                return ActivityFavorHandler.RecoveredSourceInfo.getDefaultInstance();
            }


            public ActivityFavorHandler.RecoveredSourceInfo build() {
                ActivityFavorHandler.RecoveredSourceInfo result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }


            public ActivityFavorHandler.RecoveredSourceInfo buildPartial() {
                ActivityFavorHandler.RecoveredSourceInfo result = new ActivityFavorHandler.RecoveredSourceInfo(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) {
                    to_bitField0_ |= 0x1;
                }
                result.id_ = this.id_;
                if ((from_bitField0_ & 0x2) == 2) {
                    to_bitField0_ |= 0x2;
                }
                result.sourceName_ = this.sourceName_;
                if ((from_bitField0_ & 0x4) == 4) {
                    to_bitField0_ |= 0x4;
                }
                result.minDate_ = this.minDate_;
                if ((from_bitField0_ & 0x8) == 8) {
                    to_bitField0_ |= 0x8;
                }
                result.maxDate_ = this.maxDate_;
                if ((from_bitField0_ & 0x10) == 16) {
                    to_bitField0_ |= 0x10;
                }
                result.state_ = this.state_;
                if (this.recoveredItemsBuilder_ == null) {
                    if ((this.bitField0_ & 0x20) == 32) {
                        this.recoveredItems_ = Collections.unmodifiableList(this.recoveredItems_);
                        this.bitField0_ &= 0xFFFFFFDF;
                    }
                    result.recoveredItems_ = this.recoveredItems_;
                } else {
                    result.recoveredItems_ = this.recoveredItemsBuilder_.build();
                }
                if ((from_bitField0_ & 0x40) == 64) {
                    to_bitField0_ |= 0x20;
                }
                result.needDiamond_ = this.needDiamond_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }


            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.RecoveredSourceInfo) {
                    return mergeFrom((ActivityFavorHandler.RecoveredSourceInfo) other);
                }
                super.mergeFrom(other);
                return this;
            }


            public Builder mergeFrom(ActivityFavorHandler.RecoveredSourceInfo other) {
                if (other == ActivityFavorHandler.RecoveredSourceInfo.getDefaultInstance()) {
                    return this;
                }
                if (other.hasId()) {
                    setId(other.getId());
                }
                if (other.hasSourceName()) {
                    this.bitField0_ |= 0x2;
                    this.sourceName_ = other.sourceName_;
                    onChanged();
                }
                if (other.hasMinDate()) {
                    setMinDate(other.getMinDate());
                }
                if (other.hasMaxDate()) {
                    setMaxDate(other.getMaxDate());
                }
                if (other.hasState()) {
                    setState(other.getState());
                }
                if (this.recoveredItemsBuilder_ == null) {
                    if (!other.recoveredItems_.isEmpty()) {
                        if (this.recoveredItems_.isEmpty()) {
                            this.recoveredItems_ = other.recoveredItems_;
                            this.bitField0_ &= 0xFFFFFFDF;
                        } else {
                            ensureRecoveredItemsIsMutable();
                            this.recoveredItems_.addAll(other.recoveredItems_);
                        }
                        onChanged();
                    }
                } else if (!other.recoveredItems_.isEmpty()) {
                    if (this.recoveredItemsBuilder_.isEmpty()) {
                        this.recoveredItemsBuilder_.dispose();
                        this.recoveredItemsBuilder_ = null;
                        this.recoveredItems_ = other.recoveredItems_;
                        this.bitField0_ &= 0xFFFFFFDF;
                        this.recoveredItemsBuilder_ = ActivityFavorHandler.RecoveredSourceInfo.alwaysUseFieldBuilders ? getRecoveredItemsFieldBuilder() : null;
                    } else {
                        this.recoveredItemsBuilder_.addAllMessages(other.recoveredItems_);
                    }
                }
                if (other.hasNeedDiamond()) {
                    setNeedDiamond(other.getNeedDiamond());
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }


            public final boolean isInitialized() {
                if (!hasId()) {
                    return false;
                }
                if (!hasSourceName()) {
                    return false;
                }
                if (!hasMinDate()) {
                    return false;
                }
                if (!hasMaxDate()) {
                    return false;
                }
                if (!hasState()) {
                    return false;
                }
                if (!hasNeedDiamond()) {
                    return false;
                }
                for (int i = 0; i < getRecoveredItemsCount(); i++) {
                    if (!getRecoveredItems(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }


            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.RecoveredSourceInfo parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.RecoveredSourceInfo) ActivityFavorHandler.RecoveredSourceInfo.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.RecoveredSourceInfo) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }


            public boolean hasId() {
                return ((this.bitField0_ & 0x1) == 1);
            }


            public int getId() {
                return this.id_;
            }


            public Builder setId(int value) {
                this.bitField0_ |= 0x1;
                this.id_ = value;
                onChanged();
                return this;
            }


            public Builder clearId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.id_ = 0;
                onChanged();
                return this;
            }


            public boolean hasSourceName() {
                return ((this.bitField0_ & 0x2) == 2);
            }


            public String getSourceName() {
                Object ref = this.sourceName_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.sourceName_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getSourceNameBytes() {
                Object ref = this.sourceName_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.sourceName_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setSourceName(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x2;
                this.sourceName_ = value;
                onChanged();
                return this;
            }


            public Builder clearSourceName() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.sourceName_ = ActivityFavorHandler.RecoveredSourceInfo.getDefaultInstance().getSourceName();
                onChanged();
                return this;
            }


            public Builder setSourceNameBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x2;
                this.sourceName_ = value;
                onChanged();
                return this;
            }


            public boolean hasMinDate() {
                return ((this.bitField0_ & 0x4) == 4);
            }


            public int getMinDate() {
                return this.minDate_;
            }


            public Builder setMinDate(int value) {
                this.bitField0_ |= 0x4;
                this.minDate_ = value;
                onChanged();
                return this;
            }


            public Builder clearMinDate() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.minDate_ = 0;
                onChanged();
                return this;
            }


            public boolean hasMaxDate() {
                return ((this.bitField0_ & 0x8) == 8);
            }


            public int getMaxDate() {
                return this.maxDate_;
            }


            public Builder setMaxDate(int value) {
                this.bitField0_ |= 0x8;
                this.maxDate_ = value;
                onChanged();
                return this;
            }


            public Builder clearMaxDate() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.maxDate_ = 0;
                onChanged();
                return this;
            }


            public boolean hasState() {
                return ((this.bitField0_ & 0x10) == 16);
            }


            public int getState() {
                return this.state_;
            }


            public Builder setState(int value) {
                this.bitField0_ |= 0x10;
                this.state_ = value;
                onChanged();
                return this;
            }


            public Builder clearState() {
                this.bitField0_ &= 0xFFFFFFEF;
                this.state_ = 0;
                onChanged();
                return this;
            }


            private void ensureRecoveredItemsIsMutable() {
                if ((this.bitField0_ & 0x20) != 32) {
                    this.recoveredItems_ = new ArrayList<>(this.recoveredItems_);
                    this.bitField0_ |= 0x20;
                }
            }


            public List<ActivityFavorHandler.RecoveredItem> getRecoveredItemsList() {
                if (this.recoveredItemsBuilder_ == null) {
                    return Collections.unmodifiableList(this.recoveredItems_);
                }
                return this.recoveredItemsBuilder_.getMessageList();
            }


            public int getRecoveredItemsCount() {
                if (this.recoveredItemsBuilder_ == null) {
                    return this.recoveredItems_.size();
                }
                return this.recoveredItemsBuilder_.getCount();
            }


            public ActivityFavorHandler.RecoveredItem getRecoveredItems(int index) {
                if (this.recoveredItemsBuilder_ == null) {
                    return this.recoveredItems_.get(index);
                }
                return (ActivityFavorHandler.RecoveredItem) this.recoveredItemsBuilder_.getMessage(index);
            }


            public Builder setRecoveredItems(int index, ActivityFavorHandler.RecoveredItem value) {
                if (this.recoveredItemsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureRecoveredItemsIsMutable();
                    this.recoveredItems_.set(index, value);
                    onChanged();
                } else {
                    this.recoveredItemsBuilder_.setMessage(index, value);
                }
                return this;
            }


            public Builder setRecoveredItems(int index, ActivityFavorHandler.RecoveredItem.Builder builderForValue) {
                if (this.recoveredItemsBuilder_ == null) {
                    ensureRecoveredItemsIsMutable();
                    this.recoveredItems_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.recoveredItemsBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }


            public Builder addRecoveredItems(ActivityFavorHandler.RecoveredItem value) {
                if (this.recoveredItemsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureRecoveredItemsIsMutable();
                    this.recoveredItems_.add(value);
                    onChanged();
                } else {
                    this.recoveredItemsBuilder_.addMessage(value);
                }
                return this;
            }


            public Builder addRecoveredItems(int index, ActivityFavorHandler.RecoveredItem value) {
                if (this.recoveredItemsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureRecoveredItemsIsMutable();
                    this.recoveredItems_.add(index, value);
                    onChanged();
                } else {
                    this.recoveredItemsBuilder_.addMessage(index, value);
                }
                return this;
            }


            public Builder addRecoveredItems(ActivityFavorHandler.RecoveredItem.Builder builderForValue) {
                if (this.recoveredItemsBuilder_ == null) {
                    ensureRecoveredItemsIsMutable();
                    this.recoveredItems_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.recoveredItemsBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }


            public Builder addRecoveredItems(int index, ActivityFavorHandler.RecoveredItem.Builder builderForValue) {
                if (this.recoveredItemsBuilder_ == null) {
                    ensureRecoveredItemsIsMutable();
                    this.recoveredItems_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.recoveredItemsBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }


            public Builder addAllRecoveredItems(Iterable<? extends ActivityFavorHandler.RecoveredItem> values) {
                if (this.recoveredItemsBuilder_ == null) {
                    ensureRecoveredItemsIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.recoveredItems_);
                    onChanged();
                } else {
                    this.recoveredItemsBuilder_.addAllMessages(values);
                }
                return this;
            }


            public Builder clearRecoveredItems() {
                if (this.recoveredItemsBuilder_ == null) {
                    this.recoveredItems_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFDF;
                    onChanged();
                } else {
                    this.recoveredItemsBuilder_.clear();
                }
                return this;
            }


            public Builder removeRecoveredItems(int index) {
                if (this.recoveredItemsBuilder_ == null) {
                    ensureRecoveredItemsIsMutable();
                    this.recoveredItems_.remove(index);
                    onChanged();
                } else {
                    this.recoveredItemsBuilder_.remove(index);
                }
                return this;
            }


            public ActivityFavorHandler.RecoveredItem.Builder getRecoveredItemsBuilder(int index) {
                return (ActivityFavorHandler.RecoveredItem.Builder) getRecoveredItemsFieldBuilder().getBuilder(index);
            }


            public ActivityFavorHandler.RecoveredItemOrBuilder getRecoveredItemsOrBuilder(int index) {
                if (this.recoveredItemsBuilder_ == null) {
                    return this.recoveredItems_.get(index);
                }
                return (ActivityFavorHandler.RecoveredItemOrBuilder) this.recoveredItemsBuilder_.getMessageOrBuilder(index);
            }


            public List<? extends ActivityFavorHandler.RecoveredItemOrBuilder> getRecoveredItemsOrBuilderList() {
                if (this.recoveredItemsBuilder_ != null) {
                    return this.recoveredItemsBuilder_.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList((List) this.recoveredItems_);
            }


            public ActivityFavorHandler.RecoveredItem.Builder addRecoveredItemsBuilder() {
                return (ActivityFavorHandler.RecoveredItem.Builder) getRecoveredItemsFieldBuilder().addBuilder(ActivityFavorHandler.RecoveredItem.getDefaultInstance());
            }


            public ActivityFavorHandler.RecoveredItem.Builder addRecoveredItemsBuilder(int index) {
                return (ActivityFavorHandler.RecoveredItem.Builder) getRecoveredItemsFieldBuilder().addBuilder(index, ActivityFavorHandler.RecoveredItem.getDefaultInstance());
            }


            public List<ActivityFavorHandler.RecoveredItem.Builder> getRecoveredItemsBuilderList() {
                return getRecoveredItemsFieldBuilder().getBuilderList();
            }


            private RepeatedFieldBuilder<ActivityFavorHandler.RecoveredItem, ActivityFavorHandler.RecoveredItem.Builder, ActivityFavorHandler.RecoveredItemOrBuilder> getRecoveredItemsFieldBuilder() {
                if (this.recoveredItemsBuilder_ == null) {
                    this.recoveredItemsBuilder_ = new RepeatedFieldBuilder(this.recoveredItems_, ((this.bitField0_ & 0x20) == 32), getParentForChildren(), isClean());
                    this.recoveredItems_ = null;
                }
                return this.recoveredItemsBuilder_;
            }


            public boolean hasNeedDiamond() {
                return ((this.bitField0_ & 0x40) == 64);
            }


            public int getNeedDiamond() {
                return this.needDiamond_;
            }


            public Builder setNeedDiamond(int value) {
                this.bitField0_ |= 0x40;
                this.needDiamond_ = value;
                onChanged();
                return this;
            }


            public Builder clearNeedDiamond() {
                this.bitField0_ &= 0xFFFFFFBF;
                this.needDiamond_ = 0;
                onChanged();
                return this;
            }
        }
    }


    public static final class RecoveredInfo
            extends GeneratedMessage
            implements RecoveredInfoOrBuilder {
        private static final RecoveredInfo defaultInstance = new RecoveredInfo(true);
        private final UnknownFieldSet unknownFields;

        private RecoveredInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private RecoveredInfo(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static RecoveredInfo getDefaultInstance() {
            return defaultInstance;
        }

        public RecoveredInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private RecoveredInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.beginTime_ = bs;
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.endTime_ = bs;
                            break;
                        case 26:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x4;
                            this.describe_ = bs;
                            break;
                        case 34:
                            if ((mutable_bitField0_ & 0x8) != 8) {
                                this.recoveredSourceInfo_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x8;
                            }
                            this.recoveredSourceInfo_.add(input.readMessage(ActivityFavorHandler.RecoveredSourceInfo.PARSER, extensionRegistry));
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x8) == 8)
                    this.recoveredSourceInfo_ = Collections.unmodifiableList(this.recoveredSourceInfo_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_RecoveredInfo_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_RecoveredInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(RecoveredInfo.class, Builder.class);
        }

        public static Parser<RecoveredInfo> PARSER = (Parser<RecoveredInfo>) new AbstractParser<RecoveredInfo>() {
            public ActivityFavorHandler.RecoveredInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.RecoveredInfo(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int BEGINTIME_FIELD_NUMBER = 1;
        private Object beginTime_;
        public static final int ENDTIME_FIELD_NUMBER = 2;
        private Object endTime_;
        public static final int DESCRIBE_FIELD_NUMBER = 3;
        private Object describe_;
        public static final int RECOVEREDSOURCEINFO_FIELD_NUMBER = 4;
        private List<ActivityFavorHandler.RecoveredSourceInfo> recoveredSourceInfo_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<RecoveredInfo> getParserForType() {
            return PARSER;
        }

        public boolean hasBeginTime() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getBeginTime() {
            Object ref = this.beginTime_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.beginTime_ = s;
            return s;
        }

        public ByteString getBeginTimeBytes() {
            Object ref = this.beginTime_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.beginTime_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasEndTime() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getEndTime() {
            Object ref = this.endTime_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.endTime_ = s;
            return s;
        }

        public ByteString getEndTimeBytes() {
            Object ref = this.endTime_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.endTime_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        static {
            defaultInstance.initFields();
        }

        public boolean hasDescribe() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public String getDescribe() {
            Object ref = this.describe_;
            if (ref instanceof String)
                return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8())
                this.describe_ = s;
            return s;
        }

        public ByteString getDescribeBytes() {
            Object ref = this.describe_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.describe_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public List<ActivityFavorHandler.RecoveredSourceInfo> getRecoveredSourceInfoList() {
            return this.recoveredSourceInfo_;
        }

        public List<? extends ActivityFavorHandler.RecoveredSourceInfoOrBuilder> getRecoveredSourceInfoOrBuilderList() {
            return (List) this.recoveredSourceInfo_;
        }

        public int getRecoveredSourceInfoCount() {
            return this.recoveredSourceInfo_.size();
        }

        public ActivityFavorHandler.RecoveredSourceInfo getRecoveredSourceInfo(int index) {
            return this.recoveredSourceInfo_.get(index);
        }

        public ActivityFavorHandler.RecoveredSourceInfoOrBuilder getRecoveredSourceInfoOrBuilder(int index) {
            return this.recoveredSourceInfo_.get(index);
        }

        private void initFields() {
            this.beginTime_ = "";
            this.endTime_ = "";
            this.describe_ = "";
            this.recoveredSourceInfo_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasBeginTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasEndTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasDescribe()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getRecoveredSourceInfoCount(); i++) {
                if (!getRecoveredSourceInfo(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeBytes(1, getBeginTimeBytes());
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(2, getEndTimeBytes());
            if ((this.bitField0_ & 0x4) == 4)
                output.writeBytes(3, getDescribeBytes());
            for (int i = 0; i < this.recoveredSourceInfo_.size(); i++)
                output.writeMessage(4, (MessageLite) this.recoveredSourceInfo_.get(i));
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeBytesSize(1, getBeginTimeBytes());
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(2, getEndTimeBytes());
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeBytesSize(3, getDescribeBytes());
            for (int i = 0; i < this.recoveredSourceInfo_.size(); i++)
                size += CodedOutputStream.computeMessageSize(4, (MessageLite) this.recoveredSourceInfo_.get(i));
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static RecoveredInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (RecoveredInfo) PARSER.parseFrom(data);
        }

        public static RecoveredInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (RecoveredInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static RecoveredInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (RecoveredInfo) PARSER.parseFrom(data);
        }

        public static RecoveredInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (RecoveredInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static RecoveredInfo parseFrom(InputStream input) throws IOException {
            return (RecoveredInfo) PARSER.parseFrom(input);
        }

        public static RecoveredInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RecoveredInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static RecoveredInfo parseDelimitedFrom(InputStream input) throws IOException {
            return (RecoveredInfo) PARSER.parseDelimitedFrom(input);
        }

        public static RecoveredInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RecoveredInfo) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static RecoveredInfo parseFrom(CodedInputStream input) throws IOException {
            return (RecoveredInfo) PARSER.parseFrom(input);
        }

        public static RecoveredInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RecoveredInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(RecoveredInfo prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.RecoveredInfoOrBuilder {
            private int bitField0_;
            private Object beginTime_;
            private Object endTime_;
            private Object describe_;
            private List<ActivityFavorHandler.RecoveredSourceInfo> recoveredSourceInfo_;
            private RepeatedFieldBuilder<ActivityFavorHandler.RecoveredSourceInfo, ActivityFavorHandler.RecoveredSourceInfo.Builder, ActivityFavorHandler.RecoveredSourceInfoOrBuilder> recoveredSourceInfoBuilder_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_RecoveredInfo_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_RecoveredInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.RecoveredInfo.class, Builder.class);
            }

            private Builder() {
                this.beginTime_ = "";
                this.endTime_ = "";
                this.describe_ = "";
                this.recoveredSourceInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.beginTime_ = "";
                this.endTime_ = "";
                this.describe_ = "";
                this.recoveredSourceInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.RecoveredInfo.alwaysUseFieldBuilders)
                    getRecoveredSourceInfoFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.beginTime_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                this.endTime_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                this.describe_ = "";
                this.bitField0_ &= 0xFFFFFFFB;
                if (this.recoveredSourceInfoBuilder_ == null) {
                    this.recoveredSourceInfo_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFF7;
                } else {
                    this.recoveredSourceInfoBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_RecoveredInfo_descriptor;
            }

            public ActivityFavorHandler.RecoveredInfo getDefaultInstanceForType() {
                return ActivityFavorHandler.RecoveredInfo.getDefaultInstance();
            }

            public ActivityFavorHandler.RecoveredInfo build() {
                ActivityFavorHandler.RecoveredInfo result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.RecoveredInfo buildPartial() {
                ActivityFavorHandler.RecoveredInfo result = new ActivityFavorHandler.RecoveredInfo(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.beginTime_ = this.beginTime_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.endTime_ = this.endTime_;
                if ((from_bitField0_ & 0x4) == 4)
                    to_bitField0_ |= 0x4;
                result.describe_ = this.describe_;
                if (this.recoveredSourceInfoBuilder_ == null) {
                    if ((this.bitField0_ & 0x8) == 8) {
                        this.recoveredSourceInfo_ = Collections.unmodifiableList(this.recoveredSourceInfo_);
                        this.bitField0_ &= 0xFFFFFFF7;
                    }
                    result.recoveredSourceInfo_ = this.recoveredSourceInfo_;
                } else {
                    result.recoveredSourceInfo_ = this.recoveredSourceInfoBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.RecoveredInfo)
                    return mergeFrom((ActivityFavorHandler.RecoveredInfo) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.RecoveredInfo other) {
                if (other == ActivityFavorHandler.RecoveredInfo.getDefaultInstance())
                    return this;
                if (other.hasBeginTime()) {
                    this.bitField0_ |= 0x1;
                    this.beginTime_ = other.beginTime_;
                    onChanged();
                }
                if (other.hasEndTime()) {
                    this.bitField0_ |= 0x2;
                    this.endTime_ = other.endTime_;
                    onChanged();
                }
                if (other.hasDescribe()) {
                    this.bitField0_ |= 0x4;
                    this.describe_ = other.describe_;
                    onChanged();
                }
                if (this.recoveredSourceInfoBuilder_ == null) {
                    if (!other.recoveredSourceInfo_.isEmpty()) {
                        if (this.recoveredSourceInfo_.isEmpty()) {
                            this.recoveredSourceInfo_ = other.recoveredSourceInfo_;
                            this.bitField0_ &= 0xFFFFFFF7;
                        } else {
                            ensureRecoveredSourceInfoIsMutable();
                            this.recoveredSourceInfo_.addAll(other.recoveredSourceInfo_);
                        }
                        onChanged();
                    }
                } else if (!other.recoveredSourceInfo_.isEmpty()) {
                    if (this.recoveredSourceInfoBuilder_.isEmpty()) {
                        this.recoveredSourceInfoBuilder_.dispose();
                        this.recoveredSourceInfoBuilder_ = null;
                        this.recoveredSourceInfo_ = other.recoveredSourceInfo_;
                        this.bitField0_ &= 0xFFFFFFF7;
                        this.recoveredSourceInfoBuilder_ = ActivityFavorHandler.RecoveredInfo.alwaysUseFieldBuilders ? getRecoveredSourceInfoFieldBuilder() : null;
                    } else {
                        this.recoveredSourceInfoBuilder_.addAllMessages(other.recoveredSourceInfo_);
                    }
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasBeginTime())
                    return false;
                if (!hasEndTime())
                    return false;
                if (!hasDescribe())
                    return false;
                for (int i = 0; i < getRecoveredSourceInfoCount(); i++) {
                    if (!getRecoveredSourceInfo(i).isInitialized())
                        return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.RecoveredInfo parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.RecoveredInfo) ActivityFavorHandler.RecoveredInfo.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.RecoveredInfo) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasBeginTime() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public String getBeginTime() {
                Object ref = this.beginTime_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.beginTime_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getBeginTimeBytes() {
                Object ref = this.beginTime_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.beginTime_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setBeginTime(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.beginTime_ = value;
                onChanged();
                return this;
            }

            public Builder clearBeginTime() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.beginTime_ = ActivityFavorHandler.RecoveredInfo.getDefaultInstance().getBeginTime();
                onChanged();
                return this;
            }

            public Builder setBeginTimeBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.beginTime_ = value;
                onChanged();
                return this;
            }

            public boolean hasEndTime() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getEndTime() {
                Object ref = this.endTime_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.endTime_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getEndTimeBytes() {
                Object ref = this.endTime_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.endTime_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setEndTime(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.endTime_ = value;
                onChanged();
                return this;
            }

            public Builder clearEndTime() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.endTime_ = ActivityFavorHandler.RecoveredInfo.getDefaultInstance().getEndTime();
                onChanged();
                return this;
            }

            public Builder setEndTimeBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.endTime_ = value;
                onChanged();
                return this;
            }

            public boolean hasDescribe() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public String getDescribe() {
                Object ref = this.describe_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.describe_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getDescribeBytes() {
                Object ref = this.describe_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.describe_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setDescribe(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x4;
                this.describe_ = value;
                onChanged();
                return this;
            }

            public Builder clearDescribe() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.describe_ = ActivityFavorHandler.RecoveredInfo.getDefaultInstance().getDescribe();
                onChanged();
                return this;
            }

            public Builder setDescribeBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x4;
                this.describe_ = value;
                onChanged();
                return this;
            }

            private void ensureRecoveredSourceInfoIsMutable() {
                if ((this.bitField0_ & 0x8) != 8) {
                    this.recoveredSourceInfo_ = new ArrayList<>(this.recoveredSourceInfo_);
                    this.bitField0_ |= 0x8;
                }
            }

            public List<ActivityFavorHandler.RecoveredSourceInfo> getRecoveredSourceInfoList() {
                if (this.recoveredSourceInfoBuilder_ == null)
                    return Collections.unmodifiableList(this.recoveredSourceInfo_);
                return this.recoveredSourceInfoBuilder_.getMessageList();
            }

            public int getRecoveredSourceInfoCount() {
                if (this.recoveredSourceInfoBuilder_ == null)
                    return this.recoveredSourceInfo_.size();
                return this.recoveredSourceInfoBuilder_.getCount();
            }

            public ActivityFavorHandler.RecoveredSourceInfo getRecoveredSourceInfo(int index) {
                if (this.recoveredSourceInfoBuilder_ == null)
                    return this.recoveredSourceInfo_.get(index);
                return (ActivityFavorHandler.RecoveredSourceInfo) this.recoveredSourceInfoBuilder_.getMessage(index);
            }

            public Builder setRecoveredSourceInfo(int index, ActivityFavorHandler.RecoveredSourceInfo value) {
                if (this.recoveredSourceInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureRecoveredSourceInfoIsMutable();
                    this.recoveredSourceInfo_.set(index, value);
                    onChanged();
                } else {
                    this.recoveredSourceInfoBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setRecoveredSourceInfo(int index, ActivityFavorHandler.RecoveredSourceInfo.Builder builderForValue) {
                if (this.recoveredSourceInfoBuilder_ == null) {
                    ensureRecoveredSourceInfoIsMutable();
                    this.recoveredSourceInfo_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.recoveredSourceInfoBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addRecoveredSourceInfo(ActivityFavorHandler.RecoveredSourceInfo value) {
                if (this.recoveredSourceInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureRecoveredSourceInfoIsMutable();
                    this.recoveredSourceInfo_.add(value);
                    onChanged();
                } else {
                    this.recoveredSourceInfoBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addRecoveredSourceInfo(int index, ActivityFavorHandler.RecoveredSourceInfo value) {
                if (this.recoveredSourceInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureRecoveredSourceInfoIsMutable();
                    this.recoveredSourceInfo_.add(index, value);
                    onChanged();
                } else {
                    this.recoveredSourceInfoBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addRecoveredSourceInfo(ActivityFavorHandler.RecoveredSourceInfo.Builder builderForValue) {
                if (this.recoveredSourceInfoBuilder_ == null) {
                    ensureRecoveredSourceInfoIsMutable();
                    this.recoveredSourceInfo_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.recoveredSourceInfoBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addRecoveredSourceInfo(int index, ActivityFavorHandler.RecoveredSourceInfo.Builder builderForValue) {
                if (this.recoveredSourceInfoBuilder_ == null) {
                    ensureRecoveredSourceInfoIsMutable();
                    this.recoveredSourceInfo_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.recoveredSourceInfoBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllRecoveredSourceInfo(Iterable<? extends ActivityFavorHandler.RecoveredSourceInfo> values) {
                if (this.recoveredSourceInfoBuilder_ == null) {
                    ensureRecoveredSourceInfoIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.recoveredSourceInfo_);
                    onChanged();
                } else {
                    this.recoveredSourceInfoBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearRecoveredSourceInfo() {
                if (this.recoveredSourceInfoBuilder_ == null) {
                    this.recoveredSourceInfo_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFF7;
                    onChanged();
                } else {
                    this.recoveredSourceInfoBuilder_.clear();
                }
                return this;
            }

            public Builder removeRecoveredSourceInfo(int index) {
                if (this.recoveredSourceInfoBuilder_ == null) {
                    ensureRecoveredSourceInfoIsMutable();
                    this.recoveredSourceInfo_.remove(index);
                    onChanged();
                } else {
                    this.recoveredSourceInfoBuilder_.remove(index);
                }
                return this;
            }

            public ActivityFavorHandler.RecoveredSourceInfo.Builder getRecoveredSourceInfoBuilder(int index) {
                return (ActivityFavorHandler.RecoveredSourceInfo.Builder) getRecoveredSourceInfoFieldBuilder().getBuilder(index);
            }

            public ActivityFavorHandler.RecoveredSourceInfoOrBuilder getRecoveredSourceInfoOrBuilder(int index) {
                if (this.recoveredSourceInfoBuilder_ == null)
                    return this.recoveredSourceInfo_.get(index);
                return (ActivityFavorHandler.RecoveredSourceInfoOrBuilder) this.recoveredSourceInfoBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends ActivityFavorHandler.RecoveredSourceInfoOrBuilder> getRecoveredSourceInfoOrBuilderList() {
                if (this.recoveredSourceInfoBuilder_ != null)
                    return this.recoveredSourceInfoBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.recoveredSourceInfo_);
            }

            public ActivityFavorHandler.RecoveredSourceInfo.Builder addRecoveredSourceInfoBuilder() {
                return (ActivityFavorHandler.RecoveredSourceInfo.Builder) getRecoveredSourceInfoFieldBuilder().addBuilder(ActivityFavorHandler.RecoveredSourceInfo.getDefaultInstance());
            }

            public ActivityFavorHandler.RecoveredSourceInfo.Builder addRecoveredSourceInfoBuilder(int index) {
                return (ActivityFavorHandler.RecoveredSourceInfo.Builder) getRecoveredSourceInfoFieldBuilder().addBuilder(index, ActivityFavorHandler.RecoveredSourceInfo.getDefaultInstance());
            }

            public List<ActivityFavorHandler.RecoveredSourceInfo.Builder> getRecoveredSourceInfoBuilderList() {
                return getRecoveredSourceInfoFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<ActivityFavorHandler.RecoveredSourceInfo, ActivityFavorHandler.RecoveredSourceInfo.Builder, ActivityFavorHandler.RecoveredSourceInfoOrBuilder> getRecoveredSourceInfoFieldBuilder() {
                if (this.recoveredSourceInfoBuilder_ == null) {
                    this.recoveredSourceInfoBuilder_ = new RepeatedFieldBuilder(this.recoveredSourceInfo_, ((this.bitField0_ & 0x8) == 8), getParentForChildren(), isClean());
                    this.recoveredSourceInfo_ = null;
                }
                return this.recoveredSourceInfoBuilder_;
            }
        }
    }

    public static final class RecoveredInfoRequest extends GeneratedMessage implements RecoveredInfoRequestOrBuilder {
        private static final RecoveredInfoRequest defaultInstance = new RecoveredInfoRequest(true);
        private final UnknownFieldSet unknownFields;

        private RecoveredInfoRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private RecoveredInfoRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static RecoveredInfoRequest getDefaultInstance() {
            return defaultInstance;
        }

        public RecoveredInfoRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private RecoveredInfoRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_RecoveredInfoRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_RecoveredInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(RecoveredInfoRequest.class, Builder.class);
        }

        public static Parser<RecoveredInfoRequest> PARSER = (Parser<RecoveredInfoRequest>) new AbstractParser<RecoveredInfoRequest>() {
            public ActivityFavorHandler.RecoveredInfoRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.RecoveredInfoRequest(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<RecoveredInfoRequest> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static RecoveredInfoRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (RecoveredInfoRequest) PARSER.parseFrom(data);
        }

        public static RecoveredInfoRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (RecoveredInfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static RecoveredInfoRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (RecoveredInfoRequest) PARSER.parseFrom(data);
        }

        public static RecoveredInfoRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (RecoveredInfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static RecoveredInfoRequest parseFrom(InputStream input) throws IOException {
            return (RecoveredInfoRequest) PARSER.parseFrom(input);
        }

        public static RecoveredInfoRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RecoveredInfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static RecoveredInfoRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (RecoveredInfoRequest) PARSER.parseDelimitedFrom(input);
        }

        public static RecoveredInfoRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RecoveredInfoRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static RecoveredInfoRequest parseFrom(CodedInputStream input) throws IOException {
            return (RecoveredInfoRequest) PARSER.parseFrom(input);
        }

        public static RecoveredInfoRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RecoveredInfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(RecoveredInfoRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.RecoveredInfoRequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_RecoveredInfoRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_RecoveredInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.RecoveredInfoRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.RecoveredInfoRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_RecoveredInfoRequest_descriptor;
            }

            public ActivityFavorHandler.RecoveredInfoRequest getDefaultInstanceForType() {
                return ActivityFavorHandler.RecoveredInfoRequest.getDefaultInstance();
            }

            public ActivityFavorHandler.RecoveredInfoRequest build() {
                ActivityFavorHandler.RecoveredInfoRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.RecoveredInfoRequest buildPartial() {
                ActivityFavorHandler.RecoveredInfoRequest result = new ActivityFavorHandler.RecoveredInfoRequest(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.RecoveredInfoRequest)
                    return mergeFrom((ActivityFavorHandler.RecoveredInfoRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.RecoveredInfoRequest other) {
                if (other == ActivityFavorHandler.RecoveredInfoRequest.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.RecoveredInfoRequest parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.RecoveredInfoRequest) ActivityFavorHandler.RecoveredInfoRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.RecoveredInfoRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class RecoveredInfoResponse
            extends GeneratedMessage
            implements RecoveredInfoResponseOrBuilder {
        private static final RecoveredInfoResponse defaultInstance = new RecoveredInfoResponse(true);
        private final UnknownFieldSet unknownFields;

        private RecoveredInfoResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private RecoveredInfoResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static RecoveredInfoResponse getDefaultInstance() {
            return defaultInstance;
        }

        public RecoveredInfoResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private RecoveredInfoResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    ActivityFavorHandler.RecoveredInfo.Builder subBuilder;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                        case 26:
                            subBuilder = null;
                            if ((this.bitField0_ & 0x4) == 4) subBuilder = this.recoveredInfo_.toBuilder();
                            this.recoveredInfo_ = (ActivityFavorHandler.RecoveredInfo) input.readMessage(ActivityFavorHandler.RecoveredInfo.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(this.recoveredInfo_);
                                this.recoveredInfo_ = subBuilder.buildPartial();
                            }
                            this.bitField0_ |= 0x4;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_RecoveredInfoResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_RecoveredInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(RecoveredInfoResponse.class, Builder.class);
        }

        public static Parser<RecoveredInfoResponse> PARSER = (Parser<RecoveredInfoResponse>) new AbstractParser<RecoveredInfoResponse>() {
            public ActivityFavorHandler.RecoveredInfoResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.RecoveredInfoResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int RECOVEREDINFO_FIELD_NUMBER = 3;
        private ActivityFavorHandler.RecoveredInfo recoveredInfo_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<RecoveredInfoResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8())
                this.s2CMsg_ = s;
            return s;
        }

        static {
            defaultInstance.initFields();
        }


        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }


        public boolean hasRecoveredInfo() {
            return ((this.bitField0_ & 0x4) == 4);
        }


        public ActivityFavorHandler.RecoveredInfo getRecoveredInfo() {
            return this.recoveredInfo_;
        }


        public ActivityFavorHandler.RecoveredInfoOrBuilder getRecoveredInfoOrBuilder() {
            return this.recoveredInfo_;
        }


        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
            this.recoveredInfo_ = ActivityFavorHandler.RecoveredInfo.getDefaultInstance();
        }


        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (hasRecoveredInfo() && !getRecoveredInfo().isInitialized()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }


        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeInt32(1, this.s2CCode_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeBytes(2, getS2CMsgBytes());
            }
            if ((this.bitField0_ & 0x4) == 4) {
                output.writeMessage(3, (MessageLite) this.recoveredInfo_);
            }
            getUnknownFields().writeTo(output);
        }


        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            }
            if ((this.bitField0_ & 0x4) == 4) {
                size += CodedOutputStream.computeMessageSize(3, (MessageLite) this.recoveredInfo_);
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }


        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }


        public static RecoveredInfoResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (RecoveredInfoResponse) PARSER.parseFrom(data);
        }


        public static RecoveredInfoResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (RecoveredInfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }


        public static RecoveredInfoResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (RecoveredInfoResponse) PARSER.parseFrom(data);
        }


        public static RecoveredInfoResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (RecoveredInfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }


        public static RecoveredInfoResponse parseFrom(InputStream input) throws IOException {
            return (RecoveredInfoResponse) PARSER.parseFrom(input);
        }


        public static RecoveredInfoResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RecoveredInfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }


        public static RecoveredInfoResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (RecoveredInfoResponse) PARSER.parseDelimitedFrom(input);
        }


        public static RecoveredInfoResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RecoveredInfoResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }


        public static RecoveredInfoResponse parseFrom(CodedInputStream input) throws IOException {
            return (RecoveredInfoResponse) PARSER.parseFrom(input);
        }


        public static RecoveredInfoResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RecoveredInfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }


        public static Builder newBuilder() {
            return Builder.create();
        }


        public Builder newBuilderForType() {
            return newBuilder();
        }


        public static Builder newBuilder(RecoveredInfoResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }


        public Builder toBuilder() {
            return newBuilder(this);
        }


        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }


        public static final class Builder
                extends GeneratedMessage.Builder<Builder>
                implements ActivityFavorHandler.RecoveredInfoResponseOrBuilder {
            private int bitField0_;


            private int s2CCode_;


            private Object s2CMsg_;


            private ActivityFavorHandler.RecoveredInfo recoveredInfo_;


            private SingleFieldBuilder<ActivityFavorHandler.RecoveredInfo, ActivityFavorHandler.RecoveredInfo.Builder, ActivityFavorHandler.RecoveredInfoOrBuilder> recoveredInfoBuilder_;


            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_RecoveredInfoResponse_descriptor;
            }


            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_RecoveredInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.RecoveredInfoResponse.class, Builder.class);
            }


            private Builder() {
                this.s2CMsg_ = "";
                this.recoveredInfo_ = ActivityFavorHandler.RecoveredInfo.getDefaultInstance();
                maybeForceBuilderInitialization();
            }


            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                this.recoveredInfo_ = ActivityFavorHandler.RecoveredInfo.getDefaultInstance();
                maybeForceBuilderInitialization();
            }


            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.RecoveredInfoResponse.alwaysUseFieldBuilders) {
                    getRecoveredInfoFieldBuilder();
                }
            }


            private static Builder create() {
                return new Builder();
            }


            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                if (this.recoveredInfoBuilder_ == null) {
                    this.recoveredInfo_ = ActivityFavorHandler.RecoveredInfo.getDefaultInstance();
                } else {
                    this.recoveredInfoBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }


            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }


            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_RecoveredInfoResponse_descriptor;
            }


            public ActivityFavorHandler.RecoveredInfoResponse getDefaultInstanceForType() {
                return ActivityFavorHandler.RecoveredInfoResponse.getDefaultInstance();
            }


            public ActivityFavorHandler.RecoveredInfoResponse build() {
                ActivityFavorHandler.RecoveredInfoResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }


            public ActivityFavorHandler.RecoveredInfoResponse buildPartial() {
                ActivityFavorHandler.RecoveredInfoResponse result = new ActivityFavorHandler.RecoveredInfoResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) {
                    to_bitField0_ |= 0x1;
                }
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) {
                    to_bitField0_ |= 0x2;
                }
                result.s2CMsg_ = this.s2CMsg_;
                if ((from_bitField0_ & 0x4) == 4) {
                    to_bitField0_ |= 0x4;
                }
                if (this.recoveredInfoBuilder_ == null) {
                    result.recoveredInfo_ = this.recoveredInfo_;
                } else {
                    result.recoveredInfo_ = (ActivityFavorHandler.RecoveredInfo) this.recoveredInfoBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }


            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.RecoveredInfoResponse) {
                    return mergeFrom((ActivityFavorHandler.RecoveredInfoResponse) other);
                }
                super.mergeFrom(other);
                return this;
            }


            public Builder mergeFrom(ActivityFavorHandler.RecoveredInfoResponse other) {
                if (other == ActivityFavorHandler.RecoveredInfoResponse.getDefaultInstance()) {
                    return this;
                }
                if (other.hasS2CCode()) {
                    setS2CCode(other.getS2CCode());
                }
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (other.hasRecoveredInfo()) {
                    mergeRecoveredInfo(other.getRecoveredInfo());
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }


            public final boolean isInitialized() {
                if (!hasS2CCode()) {
                    return false;
                }
                if (hasRecoveredInfo() && !getRecoveredInfo().isInitialized()) {
                    return false;
                }
                return true;
            }


            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.RecoveredInfoResponse parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.RecoveredInfoResponse) ActivityFavorHandler.RecoveredInfoResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.RecoveredInfoResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }


            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }


            public int getS2CCode() {
                return this.s2CCode_;
            }


            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }


            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }


            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }


            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.s2CMsg_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setS2CMsg(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }


            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = ActivityFavorHandler.RecoveredInfoResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }


            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }


            public boolean hasRecoveredInfo() {
                return ((this.bitField0_ & 0x4) == 4);
            }


            public ActivityFavorHandler.RecoveredInfo getRecoveredInfo() {
                if (this.recoveredInfoBuilder_ == null) {
                    return this.recoveredInfo_;
                }
                return (ActivityFavorHandler.RecoveredInfo) this.recoveredInfoBuilder_.getMessage();
            }


            public Builder setRecoveredInfo(ActivityFavorHandler.RecoveredInfo value) {
                if (this.recoveredInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    this.recoveredInfo_ = value;
                    onChanged();
                } else {
                    this.recoveredInfoBuilder_.setMessage(value);
                }
                this.bitField0_ |= 0x4;
                return this;
            }


            public Builder setRecoveredInfo(ActivityFavorHandler.RecoveredInfo.Builder builderForValue) {
                if (this.recoveredInfoBuilder_ == null) {
                    this.recoveredInfo_ = builderForValue.build();
                    onChanged();
                } else {
                    this.recoveredInfoBuilder_.setMessage(builderForValue.build());
                }
                this.bitField0_ |= 0x4;
                return this;
            }


            public Builder mergeRecoveredInfo(ActivityFavorHandler.RecoveredInfo value) {
                if (this.recoveredInfoBuilder_ == null) {
                    if ((this.bitField0_ & 0x4) == 4 && this.recoveredInfo_ != ActivityFavorHandler.RecoveredInfo.getDefaultInstance()) {
                        this.recoveredInfo_ = ActivityFavorHandler.RecoveredInfo.newBuilder(this.recoveredInfo_).mergeFrom(value).buildPartial();
                    } else {
                        this.recoveredInfo_ = value;
                    }
                    onChanged();
                } else {
                    this.recoveredInfoBuilder_.mergeFrom(value);
                }
                this.bitField0_ |= 0x4;
                return this;
            }


            public Builder clearRecoveredInfo() {
                if (this.recoveredInfoBuilder_ == null) {
                    this.recoveredInfo_ = ActivityFavorHandler.RecoveredInfo.getDefaultInstance();
                    onChanged();
                } else {
                    this.recoveredInfoBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }


            public ActivityFavorHandler.RecoveredInfo.Builder getRecoveredInfoBuilder() {
                this.bitField0_ |= 0x4;
                onChanged();
                return (ActivityFavorHandler.RecoveredInfo.Builder) getRecoveredInfoFieldBuilder().getBuilder();
            }


            public ActivityFavorHandler.RecoveredInfoOrBuilder getRecoveredInfoOrBuilder() {
                if (this.recoveredInfoBuilder_ != null) {
                    return (ActivityFavorHandler.RecoveredInfoOrBuilder) this.recoveredInfoBuilder_.getMessageOrBuilder();
                }
                return this.recoveredInfo_;
            }


            private SingleFieldBuilder<ActivityFavorHandler.RecoveredInfo, ActivityFavorHandler.RecoveredInfo.Builder, ActivityFavorHandler.RecoveredInfoOrBuilder> getRecoveredInfoFieldBuilder() {
                if (this.recoveredInfoBuilder_ == null) {
                    this.recoveredInfoBuilder_ = new SingleFieldBuilder(getRecoveredInfo(), getParentForChildren(), isClean());
                    this.recoveredInfo_ = null;
                }
                return this.recoveredInfoBuilder_;
            }
        }
    }


    public static final class RecoveredRequest
            extends GeneratedMessage
            implements RecoveredRequestOrBuilder {
        private static final RecoveredRequest defaultInstance = new RecoveredRequest(true);
        private final UnknownFieldSet unknownFields;

        private RecoveredRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private RecoveredRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static RecoveredRequest getDefaultInstance() {
            return defaultInstance;
        }

        public RecoveredRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private RecoveredRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.id_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.type_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_RecoveredRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_RecoveredRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(RecoveredRequest.class, Builder.class);
        }

        public static Parser<RecoveredRequest> PARSER = (Parser<RecoveredRequest>) new AbstractParser<RecoveredRequest>() {
            public ActivityFavorHandler.RecoveredRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.RecoveredRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int ID_FIELD_NUMBER = 1;
        private int id_;
        public static final int TYPE_FIELD_NUMBER = 2;
        private int type_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<RecoveredRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getId() {
            return this.id_;
        }

        public boolean hasType() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getType() {
            return this.type_;
        }

        private void initFields() {
            this.id_ = 0;
            this.type_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasType()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.id_);
            if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.type_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.id_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.type_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static RecoveredRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (RecoveredRequest) PARSER.parseFrom(data);
        }

        public static RecoveredRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (RecoveredRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static RecoveredRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (RecoveredRequest) PARSER.parseFrom(data);
        }

        public static RecoveredRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (RecoveredRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static RecoveredRequest parseFrom(InputStream input) throws IOException {
            return (RecoveredRequest) PARSER.parseFrom(input);
        }

        public static RecoveredRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RecoveredRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static RecoveredRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (RecoveredRequest) PARSER.parseDelimitedFrom(input);
        }

        public static RecoveredRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RecoveredRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static RecoveredRequest parseFrom(CodedInputStream input) throws IOException {
            return (RecoveredRequest) PARSER.parseFrom(input);
        }

        public static RecoveredRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RecoveredRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(RecoveredRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.RecoveredRequestOrBuilder {
            private int bitField0_;
            private int id_;
            private int type_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_RecoveredRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_RecoveredRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.RecoveredRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.RecoveredRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.id_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.type_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_RecoveredRequest_descriptor;
            }

            public ActivityFavorHandler.RecoveredRequest getDefaultInstanceForType() {
                return ActivityFavorHandler.RecoveredRequest.getDefaultInstance();
            }

            public ActivityFavorHandler.RecoveredRequest build() {
                ActivityFavorHandler.RecoveredRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.RecoveredRequest buildPartial() {
                ActivityFavorHandler.RecoveredRequest result = new ActivityFavorHandler.RecoveredRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.id_ = this.id_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.type_ = this.type_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.RecoveredRequest)
                    return mergeFrom((ActivityFavorHandler.RecoveredRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.RecoveredRequest other) {
                if (other == ActivityFavorHandler.RecoveredRequest.getDefaultInstance()) return this;
                if (other.hasId()) setId(other.getId());
                if (other.hasType()) setType(other.getType());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasId()) return false;
                if (!hasType()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.RecoveredRequest parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.RecoveredRequest) ActivityFavorHandler.RecoveredRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.RecoveredRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getId() {
                return this.id_;
            }

            public Builder setId(int value) {
                this.bitField0_ |= 0x1;
                this.id_ = value;
                onChanged();
                return this;
            }

            public Builder clearId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.id_ = 0;
                onChanged();
                return this;
            }

            public boolean hasType() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getType() {
                return this.type_;
            }

            public Builder setType(int value) {
                this.bitField0_ |= 0x2;
                this.type_ = value;
                onChanged();
                return this;
            }

            public Builder clearType() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.type_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class RecoveredResponse
            extends GeneratedMessage
            implements RecoveredResponseOrBuilder {
        private static final RecoveredResponse defaultInstance = new RecoveredResponse(true);
        private final UnknownFieldSet unknownFields;

        private RecoveredResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private RecoveredResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static RecoveredResponse getDefaultInstance() {
            return defaultInstance;
        }

        public RecoveredResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private RecoveredResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_RecoveredResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_RecoveredResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(RecoveredResponse.class, Builder.class);
        }

        public static Parser<RecoveredResponse> PARSER = (Parser<RecoveredResponse>) new AbstractParser<RecoveredResponse>() {
            public ActivityFavorHandler.RecoveredResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.RecoveredResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<RecoveredResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static RecoveredResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (RecoveredResponse) PARSER.parseFrom(data);
        }

        public static RecoveredResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (RecoveredResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static RecoveredResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (RecoveredResponse) PARSER.parseFrom(data);
        }

        public static RecoveredResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (RecoveredResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static RecoveredResponse parseFrom(InputStream input) throws IOException {
            return (RecoveredResponse) PARSER.parseFrom(input);
        }

        public static RecoveredResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RecoveredResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static RecoveredResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (RecoveredResponse) PARSER.parseDelimitedFrom(input);
        }

        public static RecoveredResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RecoveredResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static RecoveredResponse parseFrom(CodedInputStream input) throws IOException {
            return (RecoveredResponse) PARSER.parseFrom(input);
        }

        public static RecoveredResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RecoveredResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(RecoveredResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.RecoveredResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_RecoveredResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_RecoveredResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.RecoveredResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.RecoveredResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_RecoveredResponse_descriptor;
            }

            public ActivityFavorHandler.RecoveredResponse getDefaultInstanceForType() {
                return ActivityFavorHandler.RecoveredResponse.getDefaultInstance();
            }

            public ActivityFavorHandler.RecoveredResponse build() {
                ActivityFavorHandler.RecoveredResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.RecoveredResponse buildPartial() {
                ActivityFavorHandler.RecoveredResponse result = new ActivityFavorHandler.RecoveredResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.RecoveredResponse)
                    return mergeFrom((ActivityFavorHandler.RecoveredResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.RecoveredResponse other) {
                if (other == ActivityFavorHandler.RecoveredResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.RecoveredResponse parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.RecoveredResponse) ActivityFavorHandler.RecoveredResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.RecoveredResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = ActivityFavorHandler.RecoveredResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class LimitTimeGiftInfo
            extends GeneratedMessage
            implements LimitTimeGiftInfoOrBuilder {
        private static final LimitTimeGiftInfo defaultInstance = new LimitTimeGiftInfo(true);
        private final UnknownFieldSet unknownFields;

        private LimitTimeGiftInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private LimitTimeGiftInfo(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static LimitTimeGiftInfo getDefaultInstance() {
            return defaultInstance;
        }

        public LimitTimeGiftInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private LimitTimeGiftInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.id_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.secondRemain_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftInfo_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(LimitTimeGiftInfo.class, Builder.class);
        }

        public static Parser<LimitTimeGiftInfo> PARSER = (Parser<LimitTimeGiftInfo>) new AbstractParser<LimitTimeGiftInfo>() {
            public ActivityFavorHandler.LimitTimeGiftInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.LimitTimeGiftInfo(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int ID_FIELD_NUMBER = 1;
        private int id_;
        public static final int SECONDREMAIN_FIELD_NUMBER = 2;
        private int secondRemain_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<LimitTimeGiftInfo> getParserForType() {
            return PARSER;
        }

        public boolean hasId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getId() {
            return this.id_;
        }

        public boolean hasSecondRemain() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getSecondRemain() {
            return this.secondRemain_;
        }

        private void initFields() {
            this.id_ = 0;
            this.secondRemain_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasSecondRemain()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.id_);
            if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.secondRemain_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.id_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.secondRemain_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static LimitTimeGiftInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (LimitTimeGiftInfo) PARSER.parseFrom(data);
        }

        public static LimitTimeGiftInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LimitTimeGiftInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LimitTimeGiftInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (LimitTimeGiftInfo) PARSER.parseFrom(data);
        }

        public static LimitTimeGiftInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LimitTimeGiftInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LimitTimeGiftInfo parseFrom(InputStream input) throws IOException {
            return (LimitTimeGiftInfo) PARSER.parseFrom(input);
        }

        public static LimitTimeGiftInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LimitTimeGiftInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static LimitTimeGiftInfo parseDelimitedFrom(InputStream input) throws IOException {
            return (LimitTimeGiftInfo) PARSER.parseDelimitedFrom(input);
        }

        public static LimitTimeGiftInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LimitTimeGiftInfo) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static LimitTimeGiftInfo parseFrom(CodedInputStream input) throws IOException {
            return (LimitTimeGiftInfo) PARSER.parseFrom(input);
        }

        public static LimitTimeGiftInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LimitTimeGiftInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(LimitTimeGiftInfo prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.LimitTimeGiftInfoOrBuilder {
            private int bitField0_;
            private int id_;
            private int secondRemain_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftInfo_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.LimitTimeGiftInfo.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.LimitTimeGiftInfo.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.id_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.secondRemain_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftInfo_descriptor;
            }

            public ActivityFavorHandler.LimitTimeGiftInfo getDefaultInstanceForType() {
                return ActivityFavorHandler.LimitTimeGiftInfo.getDefaultInstance();
            }

            public ActivityFavorHandler.LimitTimeGiftInfo build() {
                ActivityFavorHandler.LimitTimeGiftInfo result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.LimitTimeGiftInfo buildPartial() {
                ActivityFavorHandler.LimitTimeGiftInfo result = new ActivityFavorHandler.LimitTimeGiftInfo(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.id_ = this.id_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.secondRemain_ = this.secondRemain_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.LimitTimeGiftInfo)
                    return mergeFrom((ActivityFavorHandler.LimitTimeGiftInfo) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.LimitTimeGiftInfo other) {
                if (other == ActivityFavorHandler.LimitTimeGiftInfo.getDefaultInstance()) return this;
                if (other.hasId()) setId(other.getId());
                if (other.hasSecondRemain()) setSecondRemain(other.getSecondRemain());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasId()) return false;
                if (!hasSecondRemain()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.LimitTimeGiftInfo parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.LimitTimeGiftInfo) ActivityFavorHandler.LimitTimeGiftInfo.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.LimitTimeGiftInfo) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getId() {
                return this.id_;
            }

            public Builder setId(int value) {
                this.bitField0_ |= 0x1;
                this.id_ = value;
                onChanged();
                return this;
            }

            public Builder clearId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.id_ = 0;
                onChanged();
                return this;
            }

            public boolean hasSecondRemain() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getSecondRemain() {
                return this.secondRemain_;
            }

            public Builder setSecondRemain(int value) {
                this.bitField0_ |= 0x2;
                this.secondRemain_ = value;
                onChanged();
                return this;
            }

            public Builder clearSecondRemain() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.secondRemain_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class LimitTimeGiftInfoPush
            extends GeneratedMessage
            implements LimitTimeGiftInfoPushOrBuilder {
        private static final LimitTimeGiftInfoPush defaultInstance = new LimitTimeGiftInfoPush(true);
        private final UnknownFieldSet unknownFields;

        private LimitTimeGiftInfoPush(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private LimitTimeGiftInfoPush(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static LimitTimeGiftInfoPush getDefaultInstance() {
            return defaultInstance;
        }

        public LimitTimeGiftInfoPush getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private LimitTimeGiftInfoPush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                        case 26:
                            if ((mutable_bitField0_ & 0x4) != 4) {
                                this.limitTimeGiftInfo_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x4;
                            }
                            this.limitTimeGiftInfo_.add(input.readMessage(ActivityFavorHandler.LimitTimeGiftInfo.PARSER, extensionRegistry));
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x4) == 4)
                    this.limitTimeGiftInfo_ = Collections.unmodifiableList(this.limitTimeGiftInfo_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftInfoPush_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftInfoPush_fieldAccessorTable.ensureFieldAccessorsInitialized(LimitTimeGiftInfoPush.class, Builder.class);
        }

        public static Parser<LimitTimeGiftInfoPush> PARSER = (Parser<LimitTimeGiftInfoPush>) new AbstractParser<LimitTimeGiftInfoPush>() {
            public ActivityFavorHandler.LimitTimeGiftInfoPush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.LimitTimeGiftInfoPush(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int LIMITTIMEGIFTINFO_FIELD_NUMBER = 3;
        private List<ActivityFavorHandler.LimitTimeGiftInfo> limitTimeGiftInfo_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<LimitTimeGiftInfoPush> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        static {
            defaultInstance.initFields();
        }

        public List<ActivityFavorHandler.LimitTimeGiftInfo> getLimitTimeGiftInfoList() {
            return this.limitTimeGiftInfo_;
        }

        public List<? extends ActivityFavorHandler.LimitTimeGiftInfoOrBuilder> getLimitTimeGiftInfoOrBuilderList() {
            return (List) this.limitTimeGiftInfo_;
        }

        public int getLimitTimeGiftInfoCount() {
            return this.limitTimeGiftInfo_.size();
        }

        public ActivityFavorHandler.LimitTimeGiftInfo getLimitTimeGiftInfo(int index) {
            return this.limitTimeGiftInfo_.get(index);
        }

        public ActivityFavorHandler.LimitTimeGiftInfoOrBuilder getLimitTimeGiftInfoOrBuilder(int index) {
            return this.limitTimeGiftInfo_.get(index);
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
            this.limitTimeGiftInfo_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getLimitTimeGiftInfoCount(); i++) {
                if (!getLimitTimeGiftInfo(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(2, getS2CMsgBytes());
            for (int i = 0; i < this.limitTimeGiftInfo_.size(); i++)
                output.writeMessage(3, (MessageLite) this.limitTimeGiftInfo_.get(i));
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            for (int i = 0; i < this.limitTimeGiftInfo_.size(); i++)
                size += CodedOutputStream.computeMessageSize(3, (MessageLite) this.limitTimeGiftInfo_.get(i));
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static LimitTimeGiftInfoPush parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (LimitTimeGiftInfoPush) PARSER.parseFrom(data);
        }

        public static LimitTimeGiftInfoPush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LimitTimeGiftInfoPush) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LimitTimeGiftInfoPush parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (LimitTimeGiftInfoPush) PARSER.parseFrom(data);
        }

        public static LimitTimeGiftInfoPush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LimitTimeGiftInfoPush) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LimitTimeGiftInfoPush parseFrom(InputStream input) throws IOException {
            return (LimitTimeGiftInfoPush) PARSER.parseFrom(input);
        }

        public static LimitTimeGiftInfoPush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LimitTimeGiftInfoPush) PARSER.parseFrom(input, extensionRegistry);
        }

        public static LimitTimeGiftInfoPush parseDelimitedFrom(InputStream input) throws IOException {
            return (LimitTimeGiftInfoPush) PARSER.parseDelimitedFrom(input);
        }

        public static LimitTimeGiftInfoPush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LimitTimeGiftInfoPush) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static LimitTimeGiftInfoPush parseFrom(CodedInputStream input) throws IOException {
            return (LimitTimeGiftInfoPush) PARSER.parseFrom(input);
        }

        public static LimitTimeGiftInfoPush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LimitTimeGiftInfoPush) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(LimitTimeGiftInfoPush prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.LimitTimeGiftInfoPushOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;
            private List<ActivityFavorHandler.LimitTimeGiftInfo> limitTimeGiftInfo_;
            private RepeatedFieldBuilder<ActivityFavorHandler.LimitTimeGiftInfo, ActivityFavorHandler.LimitTimeGiftInfo.Builder, ActivityFavorHandler.LimitTimeGiftInfoOrBuilder> limitTimeGiftInfoBuilder_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftInfoPush_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftInfoPush_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.LimitTimeGiftInfoPush.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                this.limitTimeGiftInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                this.limitTimeGiftInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.LimitTimeGiftInfoPush.alwaysUseFieldBuilders)
                    getLimitTimeGiftInfoFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    this.limitTimeGiftInfo_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                } else {
                    this.limitTimeGiftInfoBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftInfoPush_descriptor;
            }

            public ActivityFavorHandler.LimitTimeGiftInfoPush getDefaultInstanceForType() {
                return ActivityFavorHandler.LimitTimeGiftInfoPush.getDefaultInstance();
            }

            public ActivityFavorHandler.LimitTimeGiftInfoPush build() {
                ActivityFavorHandler.LimitTimeGiftInfoPush result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.LimitTimeGiftInfoPush buildPartial() {
                ActivityFavorHandler.LimitTimeGiftInfoPush result = new ActivityFavorHandler.LimitTimeGiftInfoPush(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    if ((this.bitField0_ & 0x4) == 4) {
                        this.limitTimeGiftInfo_ = Collections.unmodifiableList(this.limitTimeGiftInfo_);
                        this.bitField0_ &= 0xFFFFFFFB;
                    }
                    result.limitTimeGiftInfo_ = this.limitTimeGiftInfo_;
                } else {
                    result.limitTimeGiftInfo_ = this.limitTimeGiftInfoBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.LimitTimeGiftInfoPush)
                    return mergeFrom((ActivityFavorHandler.LimitTimeGiftInfoPush) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.LimitTimeGiftInfoPush other) {
                if (other == ActivityFavorHandler.LimitTimeGiftInfoPush.getDefaultInstance())
                    return this;
                if (other.hasS2CCode())
                    setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    if (!other.limitTimeGiftInfo_.isEmpty()) {
                        if (this.limitTimeGiftInfo_.isEmpty()) {
                            this.limitTimeGiftInfo_ = other.limitTimeGiftInfo_;
                            this.bitField0_ &= 0xFFFFFFFB;
                        } else {
                            ensureLimitTimeGiftInfoIsMutable();
                            this.limitTimeGiftInfo_.addAll(other.limitTimeGiftInfo_);
                        }
                        onChanged();
                    }
                } else if (!other.limitTimeGiftInfo_.isEmpty()) {
                    if (this.limitTimeGiftInfoBuilder_.isEmpty()) {
                        this.limitTimeGiftInfoBuilder_.dispose();
                        this.limitTimeGiftInfoBuilder_ = null;
                        this.limitTimeGiftInfo_ = other.limitTimeGiftInfo_;
                        this.bitField0_ &= 0xFFFFFFFB;
                        this.limitTimeGiftInfoBuilder_ = ActivityFavorHandler.LimitTimeGiftInfoPush.alwaysUseFieldBuilders ? getLimitTimeGiftInfoFieldBuilder() : null;
                    } else {
                        this.limitTimeGiftInfoBuilder_.addAllMessages(other.limitTimeGiftInfo_);
                    }
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode())
                    return false;
                for (int i = 0; i < getLimitTimeGiftInfoCount(); i++) {
                    if (!getLimitTimeGiftInfo(i).isInitialized())
                        return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.LimitTimeGiftInfoPush parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.LimitTimeGiftInfoPush) ActivityFavorHandler.LimitTimeGiftInfoPush.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.LimitTimeGiftInfoPush) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = ActivityFavorHandler.LimitTimeGiftInfoPush.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            private void ensureLimitTimeGiftInfoIsMutable() {
                if ((this.bitField0_ & 0x4) != 4) {
                    this.limitTimeGiftInfo_ = new ArrayList<>(this.limitTimeGiftInfo_);
                    this.bitField0_ |= 0x4;
                }
            }

            public List<ActivityFavorHandler.LimitTimeGiftInfo> getLimitTimeGiftInfoList() {
                if (this.limitTimeGiftInfoBuilder_ == null)
                    return Collections.unmodifiableList(this.limitTimeGiftInfo_);
                return this.limitTimeGiftInfoBuilder_.getMessageList();
            }

            public int getLimitTimeGiftInfoCount() {
                if (this.limitTimeGiftInfoBuilder_ == null)
                    return this.limitTimeGiftInfo_.size();
                return this.limitTimeGiftInfoBuilder_.getCount();
            }

            public ActivityFavorHandler.LimitTimeGiftInfo getLimitTimeGiftInfo(int index) {
                if (this.limitTimeGiftInfoBuilder_ == null)
                    return this.limitTimeGiftInfo_.get(index);
                return (ActivityFavorHandler.LimitTimeGiftInfo) this.limitTimeGiftInfoBuilder_.getMessage(index);
            }

            public Builder setLimitTimeGiftInfo(int index, ActivityFavorHandler.LimitTimeGiftInfo value) {
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureLimitTimeGiftInfoIsMutable();
                    this.limitTimeGiftInfo_.set(index, value);
                    onChanged();
                } else {
                    this.limitTimeGiftInfoBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setLimitTimeGiftInfo(int index, ActivityFavorHandler.LimitTimeGiftInfo.Builder builderForValue) {
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    ensureLimitTimeGiftInfoIsMutable();
                    this.limitTimeGiftInfo_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.limitTimeGiftInfoBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addLimitTimeGiftInfo(ActivityFavorHandler.LimitTimeGiftInfo value) {
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureLimitTimeGiftInfoIsMutable();
                    this.limitTimeGiftInfo_.add(value);
                    onChanged();
                } else {
                    this.limitTimeGiftInfoBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addLimitTimeGiftInfo(int index, ActivityFavorHandler.LimitTimeGiftInfo value) {
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureLimitTimeGiftInfoIsMutable();
                    this.limitTimeGiftInfo_.add(index, value);
                    onChanged();
                } else {
                    this.limitTimeGiftInfoBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addLimitTimeGiftInfo(ActivityFavorHandler.LimitTimeGiftInfo.Builder builderForValue) {
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    ensureLimitTimeGiftInfoIsMutable();
                    this.limitTimeGiftInfo_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.limitTimeGiftInfoBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addLimitTimeGiftInfo(int index, ActivityFavorHandler.LimitTimeGiftInfo.Builder builderForValue) {
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    ensureLimitTimeGiftInfoIsMutable();
                    this.limitTimeGiftInfo_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.limitTimeGiftInfoBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllLimitTimeGiftInfo(Iterable<? extends ActivityFavorHandler.LimitTimeGiftInfo> values) {
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    ensureLimitTimeGiftInfoIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.limitTimeGiftInfo_);
                    onChanged();
                } else {
                    this.limitTimeGiftInfoBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearLimitTimeGiftInfo() {
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    this.limitTimeGiftInfo_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                    onChanged();
                } else {
                    this.limitTimeGiftInfoBuilder_.clear();
                }
                return this;
            }

            public Builder removeLimitTimeGiftInfo(int index) {
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    ensureLimitTimeGiftInfoIsMutable();
                    this.limitTimeGiftInfo_.remove(index);
                    onChanged();
                } else {
                    this.limitTimeGiftInfoBuilder_.remove(index);
                }
                return this;
            }

            public ActivityFavorHandler.LimitTimeGiftInfo.Builder getLimitTimeGiftInfoBuilder(int index) {
                return (ActivityFavorHandler.LimitTimeGiftInfo.Builder) getLimitTimeGiftInfoFieldBuilder().getBuilder(index);
            }

            public ActivityFavorHandler.LimitTimeGiftInfoOrBuilder getLimitTimeGiftInfoOrBuilder(int index) {
                if (this.limitTimeGiftInfoBuilder_ == null)
                    return this.limitTimeGiftInfo_.get(index);
                return (ActivityFavorHandler.LimitTimeGiftInfoOrBuilder) this.limitTimeGiftInfoBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends ActivityFavorHandler.LimitTimeGiftInfoOrBuilder> getLimitTimeGiftInfoOrBuilderList() {
                if (this.limitTimeGiftInfoBuilder_ != null)
                    return this.limitTimeGiftInfoBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.limitTimeGiftInfo_);
            }

            public ActivityFavorHandler.LimitTimeGiftInfo.Builder addLimitTimeGiftInfoBuilder() {
                return (ActivityFavorHandler.LimitTimeGiftInfo.Builder) getLimitTimeGiftInfoFieldBuilder().addBuilder(ActivityFavorHandler.LimitTimeGiftInfo.getDefaultInstance());
            }

            public ActivityFavorHandler.LimitTimeGiftInfo.Builder addLimitTimeGiftInfoBuilder(int index) {
                return (ActivityFavorHandler.LimitTimeGiftInfo.Builder) getLimitTimeGiftInfoFieldBuilder().addBuilder(index, ActivityFavorHandler.LimitTimeGiftInfo.getDefaultInstance());
            }

            public List<ActivityFavorHandler.LimitTimeGiftInfo.Builder> getLimitTimeGiftInfoBuilderList() {
                return getLimitTimeGiftInfoFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<ActivityFavorHandler.LimitTimeGiftInfo, ActivityFavorHandler.LimitTimeGiftInfo.Builder, ActivityFavorHandler.LimitTimeGiftInfoOrBuilder> getLimitTimeGiftInfoFieldBuilder() {
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    this.limitTimeGiftInfoBuilder_ = new RepeatedFieldBuilder(this.limitTimeGiftInfo_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean());
                    this.limitTimeGiftInfo_ = null;
                }
                return this.limitTimeGiftInfoBuilder_;
            }
        }
    }

    public static final class LimitTimeGiftInfoRequest extends GeneratedMessage implements LimitTimeGiftInfoRequestOrBuilder {
        private static final LimitTimeGiftInfoRequest defaultInstance = new LimitTimeGiftInfoRequest(true);
        private final UnknownFieldSet unknownFields;

        private LimitTimeGiftInfoRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private LimitTimeGiftInfoRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static LimitTimeGiftInfoRequest getDefaultInstance() {
            return defaultInstance;
        }

        public LimitTimeGiftInfoRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private LimitTimeGiftInfoRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftInfoRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(LimitTimeGiftInfoRequest.class, Builder.class);
        }

        public static Parser<LimitTimeGiftInfoRequest> PARSER = (Parser<LimitTimeGiftInfoRequest>) new AbstractParser<LimitTimeGiftInfoRequest>() {
            public ActivityFavorHandler.LimitTimeGiftInfoRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.LimitTimeGiftInfoRequest(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<LimitTimeGiftInfoRequest> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static LimitTimeGiftInfoRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (LimitTimeGiftInfoRequest) PARSER.parseFrom(data);
        }

        public static LimitTimeGiftInfoRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LimitTimeGiftInfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LimitTimeGiftInfoRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (LimitTimeGiftInfoRequest) PARSER.parseFrom(data);
        }

        public static LimitTimeGiftInfoRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LimitTimeGiftInfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LimitTimeGiftInfoRequest parseFrom(InputStream input) throws IOException {
            return (LimitTimeGiftInfoRequest) PARSER.parseFrom(input);
        }

        public static LimitTimeGiftInfoRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LimitTimeGiftInfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static LimitTimeGiftInfoRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (LimitTimeGiftInfoRequest) PARSER.parseDelimitedFrom(input);
        }

        public static LimitTimeGiftInfoRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LimitTimeGiftInfoRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static LimitTimeGiftInfoRequest parseFrom(CodedInputStream input) throws IOException {
            return (LimitTimeGiftInfoRequest) PARSER.parseFrom(input);
        }

        public static LimitTimeGiftInfoRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LimitTimeGiftInfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(LimitTimeGiftInfoRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.LimitTimeGiftInfoRequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftInfoRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.LimitTimeGiftInfoRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.LimitTimeGiftInfoRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftInfoRequest_descriptor;
            }

            public ActivityFavorHandler.LimitTimeGiftInfoRequest getDefaultInstanceForType() {
                return ActivityFavorHandler.LimitTimeGiftInfoRequest.getDefaultInstance();
            }

            public ActivityFavorHandler.LimitTimeGiftInfoRequest build() {
                ActivityFavorHandler.LimitTimeGiftInfoRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.LimitTimeGiftInfoRequest buildPartial() {
                ActivityFavorHandler.LimitTimeGiftInfoRequest result = new ActivityFavorHandler.LimitTimeGiftInfoRequest(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.LimitTimeGiftInfoRequest)
                    return mergeFrom((ActivityFavorHandler.LimitTimeGiftInfoRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.LimitTimeGiftInfoRequest other) {
                if (other == ActivityFavorHandler.LimitTimeGiftInfoRequest.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.LimitTimeGiftInfoRequest parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.LimitTimeGiftInfoRequest) ActivityFavorHandler.LimitTimeGiftInfoRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.LimitTimeGiftInfoRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class LimitTimeGiftInfoResponse
            extends GeneratedMessage
            implements LimitTimeGiftInfoResponseOrBuilder {
        private static final LimitTimeGiftInfoResponse defaultInstance = new LimitTimeGiftInfoResponse(true);
        private final UnknownFieldSet unknownFields;

        private LimitTimeGiftInfoResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private LimitTimeGiftInfoResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static LimitTimeGiftInfoResponse getDefaultInstance() {
            return defaultInstance;
        }

        public LimitTimeGiftInfoResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private LimitTimeGiftInfoResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                        case 26:
                            if ((mutable_bitField0_ & 0x4) != 4) {
                                this.limitTimeGiftInfo_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x4;
                            }
                            this.limitTimeGiftInfo_.add(input.readMessage(ActivityFavorHandler.LimitTimeGiftInfo.PARSER, extensionRegistry));
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x4) == 4)
                    this.limitTimeGiftInfo_ = Collections.unmodifiableList(this.limitTimeGiftInfo_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftInfoResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(LimitTimeGiftInfoResponse.class, Builder.class);
        }

        public static Parser<LimitTimeGiftInfoResponse> PARSER = (Parser<LimitTimeGiftInfoResponse>) new AbstractParser<LimitTimeGiftInfoResponse>() {
            public ActivityFavorHandler.LimitTimeGiftInfoResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.LimitTimeGiftInfoResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int LIMITTIMEGIFTINFO_FIELD_NUMBER = 3;
        private List<ActivityFavorHandler.LimitTimeGiftInfo> limitTimeGiftInfo_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<LimitTimeGiftInfoResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        static {
            defaultInstance.initFields();
        }

        public List<ActivityFavorHandler.LimitTimeGiftInfo> getLimitTimeGiftInfoList() {
            return this.limitTimeGiftInfo_;
        }

        public List<? extends ActivityFavorHandler.LimitTimeGiftInfoOrBuilder> getLimitTimeGiftInfoOrBuilderList() {
            return (List) this.limitTimeGiftInfo_;
        }

        public int getLimitTimeGiftInfoCount() {
            return this.limitTimeGiftInfo_.size();
        }

        public ActivityFavorHandler.LimitTimeGiftInfo getLimitTimeGiftInfo(int index) {
            return this.limitTimeGiftInfo_.get(index);
        }

        public ActivityFavorHandler.LimitTimeGiftInfoOrBuilder getLimitTimeGiftInfoOrBuilder(int index) {
            return this.limitTimeGiftInfo_.get(index);
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
            this.limitTimeGiftInfo_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getLimitTimeGiftInfoCount(); i++) {
                if (!getLimitTimeGiftInfo(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(2, getS2CMsgBytes());
            for (int i = 0; i < this.limitTimeGiftInfo_.size(); i++)
                output.writeMessage(3, (MessageLite) this.limitTimeGiftInfo_.get(i));
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            for (int i = 0; i < this.limitTimeGiftInfo_.size(); i++)
                size += CodedOutputStream.computeMessageSize(3, (MessageLite) this.limitTimeGiftInfo_.get(i));
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static LimitTimeGiftInfoResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (LimitTimeGiftInfoResponse) PARSER.parseFrom(data);
        }

        public static LimitTimeGiftInfoResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LimitTimeGiftInfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LimitTimeGiftInfoResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (LimitTimeGiftInfoResponse) PARSER.parseFrom(data);
        }

        public static LimitTimeGiftInfoResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LimitTimeGiftInfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LimitTimeGiftInfoResponse parseFrom(InputStream input) throws IOException {
            return (LimitTimeGiftInfoResponse) PARSER.parseFrom(input);
        }

        public static LimitTimeGiftInfoResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LimitTimeGiftInfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static LimitTimeGiftInfoResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (LimitTimeGiftInfoResponse) PARSER.parseDelimitedFrom(input);
        }

        public static LimitTimeGiftInfoResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LimitTimeGiftInfoResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static LimitTimeGiftInfoResponse parseFrom(CodedInputStream input) throws IOException {
            return (LimitTimeGiftInfoResponse) PARSER.parseFrom(input);
        }

        public static LimitTimeGiftInfoResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LimitTimeGiftInfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(LimitTimeGiftInfoResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.LimitTimeGiftInfoResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;
            private List<ActivityFavorHandler.LimitTimeGiftInfo> limitTimeGiftInfo_;
            private RepeatedFieldBuilder<ActivityFavorHandler.LimitTimeGiftInfo, ActivityFavorHandler.LimitTimeGiftInfo.Builder, ActivityFavorHandler.LimitTimeGiftInfoOrBuilder> limitTimeGiftInfoBuilder_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftInfoResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.LimitTimeGiftInfoResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                this.limitTimeGiftInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                this.limitTimeGiftInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.LimitTimeGiftInfoResponse.alwaysUseFieldBuilders)
                    getLimitTimeGiftInfoFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    this.limitTimeGiftInfo_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                } else {
                    this.limitTimeGiftInfoBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftInfoResponse_descriptor;
            }

            public ActivityFavorHandler.LimitTimeGiftInfoResponse getDefaultInstanceForType() {
                return ActivityFavorHandler.LimitTimeGiftInfoResponse.getDefaultInstance();
            }

            public ActivityFavorHandler.LimitTimeGiftInfoResponse build() {
                ActivityFavorHandler.LimitTimeGiftInfoResponse result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.LimitTimeGiftInfoResponse buildPartial() {
                ActivityFavorHandler.LimitTimeGiftInfoResponse result = new ActivityFavorHandler.LimitTimeGiftInfoResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    if ((this.bitField0_ & 0x4) == 4) {
                        this.limitTimeGiftInfo_ = Collections.unmodifiableList(this.limitTimeGiftInfo_);
                        this.bitField0_ &= 0xFFFFFFFB;
                    }
                    result.limitTimeGiftInfo_ = this.limitTimeGiftInfo_;
                } else {
                    result.limitTimeGiftInfo_ = this.limitTimeGiftInfoBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.LimitTimeGiftInfoResponse)
                    return mergeFrom((ActivityFavorHandler.LimitTimeGiftInfoResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.LimitTimeGiftInfoResponse other) {
                if (other == ActivityFavorHandler.LimitTimeGiftInfoResponse.getDefaultInstance())
                    return this;
                if (other.hasS2CCode())
                    setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    if (!other.limitTimeGiftInfo_.isEmpty()) {
                        if (this.limitTimeGiftInfo_.isEmpty()) {
                            this.limitTimeGiftInfo_ = other.limitTimeGiftInfo_;
                            this.bitField0_ &= 0xFFFFFFFB;
                        } else {
                            ensureLimitTimeGiftInfoIsMutable();
                            this.limitTimeGiftInfo_.addAll(other.limitTimeGiftInfo_);
                        }
                        onChanged();
                    }
                } else if (!other.limitTimeGiftInfo_.isEmpty()) {
                    if (this.limitTimeGiftInfoBuilder_.isEmpty()) {
                        this.limitTimeGiftInfoBuilder_.dispose();
                        this.limitTimeGiftInfoBuilder_ = null;
                        this.limitTimeGiftInfo_ = other.limitTimeGiftInfo_;
                        this.bitField0_ &= 0xFFFFFFFB;
                        this.limitTimeGiftInfoBuilder_ = ActivityFavorHandler.LimitTimeGiftInfoResponse.alwaysUseFieldBuilders ? getLimitTimeGiftInfoFieldBuilder() : null;
                    } else {
                        this.limitTimeGiftInfoBuilder_.addAllMessages(other.limitTimeGiftInfo_);
                    }
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode())
                    return false;
                for (int i = 0; i < getLimitTimeGiftInfoCount(); i++) {
                    if (!getLimitTimeGiftInfo(i).isInitialized())
                        return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.LimitTimeGiftInfoResponse parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.LimitTimeGiftInfoResponse) ActivityFavorHandler.LimitTimeGiftInfoResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.LimitTimeGiftInfoResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = ActivityFavorHandler.LimitTimeGiftInfoResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            private void ensureLimitTimeGiftInfoIsMutable() {
                if ((this.bitField0_ & 0x4) != 4) {
                    this.limitTimeGiftInfo_ = new ArrayList<>(this.limitTimeGiftInfo_);
                    this.bitField0_ |= 0x4;
                }
            }

            public List<ActivityFavorHandler.LimitTimeGiftInfo> getLimitTimeGiftInfoList() {
                if (this.limitTimeGiftInfoBuilder_ == null)
                    return Collections.unmodifiableList(this.limitTimeGiftInfo_);
                return this.limitTimeGiftInfoBuilder_.getMessageList();
            }

            public int getLimitTimeGiftInfoCount() {
                if (this.limitTimeGiftInfoBuilder_ == null)
                    return this.limitTimeGiftInfo_.size();
                return this.limitTimeGiftInfoBuilder_.getCount();
            }

            public ActivityFavorHandler.LimitTimeGiftInfo getLimitTimeGiftInfo(int index) {
                if (this.limitTimeGiftInfoBuilder_ == null)
                    return this.limitTimeGiftInfo_.get(index);
                return (ActivityFavorHandler.LimitTimeGiftInfo) this.limitTimeGiftInfoBuilder_.getMessage(index);
            }

            public Builder setLimitTimeGiftInfo(int index, ActivityFavorHandler.LimitTimeGiftInfo value) {
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureLimitTimeGiftInfoIsMutable();
                    this.limitTimeGiftInfo_.set(index, value);
                    onChanged();
                } else {
                    this.limitTimeGiftInfoBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setLimitTimeGiftInfo(int index, ActivityFavorHandler.LimitTimeGiftInfo.Builder builderForValue) {
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    ensureLimitTimeGiftInfoIsMutable();
                    this.limitTimeGiftInfo_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.limitTimeGiftInfoBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addLimitTimeGiftInfo(ActivityFavorHandler.LimitTimeGiftInfo value) {
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureLimitTimeGiftInfoIsMutable();
                    this.limitTimeGiftInfo_.add(value);
                    onChanged();
                } else {
                    this.limitTimeGiftInfoBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addLimitTimeGiftInfo(int index, ActivityFavorHandler.LimitTimeGiftInfo value) {
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureLimitTimeGiftInfoIsMutable();
                    this.limitTimeGiftInfo_.add(index, value);
                    onChanged();
                } else {
                    this.limitTimeGiftInfoBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addLimitTimeGiftInfo(ActivityFavorHandler.LimitTimeGiftInfo.Builder builderForValue) {
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    ensureLimitTimeGiftInfoIsMutable();
                    this.limitTimeGiftInfo_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.limitTimeGiftInfoBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addLimitTimeGiftInfo(int index, ActivityFavorHandler.LimitTimeGiftInfo.Builder builderForValue) {
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    ensureLimitTimeGiftInfoIsMutable();
                    this.limitTimeGiftInfo_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.limitTimeGiftInfoBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllLimitTimeGiftInfo(Iterable<? extends ActivityFavorHandler.LimitTimeGiftInfo> values) {
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    ensureLimitTimeGiftInfoIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.limitTimeGiftInfo_);
                    onChanged();
                } else {
                    this.limitTimeGiftInfoBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearLimitTimeGiftInfo() {
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    this.limitTimeGiftInfo_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                    onChanged();
                } else {
                    this.limitTimeGiftInfoBuilder_.clear();
                }
                return this;
            }

            public Builder removeLimitTimeGiftInfo(int index) {
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    ensureLimitTimeGiftInfoIsMutable();
                    this.limitTimeGiftInfo_.remove(index);
                    onChanged();
                } else {
                    this.limitTimeGiftInfoBuilder_.remove(index);
                }
                return this;
            }

            public ActivityFavorHandler.LimitTimeGiftInfo.Builder getLimitTimeGiftInfoBuilder(int index) {
                return (ActivityFavorHandler.LimitTimeGiftInfo.Builder) getLimitTimeGiftInfoFieldBuilder().getBuilder(index);
            }

            public ActivityFavorHandler.LimitTimeGiftInfoOrBuilder getLimitTimeGiftInfoOrBuilder(int index) {
                if (this.limitTimeGiftInfoBuilder_ == null)
                    return this.limitTimeGiftInfo_.get(index);
                return (ActivityFavorHandler.LimitTimeGiftInfoOrBuilder) this.limitTimeGiftInfoBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends ActivityFavorHandler.LimitTimeGiftInfoOrBuilder> getLimitTimeGiftInfoOrBuilderList() {
                if (this.limitTimeGiftInfoBuilder_ != null)
                    return this.limitTimeGiftInfoBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.limitTimeGiftInfo_);
            }

            public ActivityFavorHandler.LimitTimeGiftInfo.Builder addLimitTimeGiftInfoBuilder() {
                return (ActivityFavorHandler.LimitTimeGiftInfo.Builder) getLimitTimeGiftInfoFieldBuilder().addBuilder(ActivityFavorHandler.LimitTimeGiftInfo.getDefaultInstance());
            }

            public ActivityFavorHandler.LimitTimeGiftInfo.Builder addLimitTimeGiftInfoBuilder(int index) {
                return (ActivityFavorHandler.LimitTimeGiftInfo.Builder) getLimitTimeGiftInfoFieldBuilder().addBuilder(index, ActivityFavorHandler.LimitTimeGiftInfo.getDefaultInstance());
            }

            public List<ActivityFavorHandler.LimitTimeGiftInfo.Builder> getLimitTimeGiftInfoBuilderList() {
                return getLimitTimeGiftInfoFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<ActivityFavorHandler.LimitTimeGiftInfo, ActivityFavorHandler.LimitTimeGiftInfo.Builder, ActivityFavorHandler.LimitTimeGiftInfoOrBuilder> getLimitTimeGiftInfoFieldBuilder() {
                if (this.limitTimeGiftInfoBuilder_ == null) {
                    this.limitTimeGiftInfoBuilder_ = new RepeatedFieldBuilder(this.limitTimeGiftInfo_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean());
                    this.limitTimeGiftInfo_ = null;
                }
                return this.limitTimeGiftInfoBuilder_;
            }
        }
    }

    public static final class LimitTimeGiftBuyRequest extends GeneratedMessage implements LimitTimeGiftBuyRequestOrBuilder {
        private static final LimitTimeGiftBuyRequest defaultInstance = new LimitTimeGiftBuyRequest(true);
        private final UnknownFieldSet unknownFields;

        private LimitTimeGiftBuyRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private LimitTimeGiftBuyRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static LimitTimeGiftBuyRequest getDefaultInstance() {
            return defaultInstance;
        }

        public LimitTimeGiftBuyRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private LimitTimeGiftBuyRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.id_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftBuyRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftBuyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(LimitTimeGiftBuyRequest.class, Builder.class);
        }

        public static Parser<LimitTimeGiftBuyRequest> PARSER = (Parser<LimitTimeGiftBuyRequest>) new AbstractParser<LimitTimeGiftBuyRequest>() {
            public ActivityFavorHandler.LimitTimeGiftBuyRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.LimitTimeGiftBuyRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int ID_FIELD_NUMBER = 1;
        private int id_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<LimitTimeGiftBuyRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getId() {
            return this.id_;
        }

        private void initFields() {
            this.id_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.id_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.id_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static LimitTimeGiftBuyRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (LimitTimeGiftBuyRequest) PARSER.parseFrom(data);
        }

        public static LimitTimeGiftBuyRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LimitTimeGiftBuyRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LimitTimeGiftBuyRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (LimitTimeGiftBuyRequest) PARSER.parseFrom(data);
        }

        public static LimitTimeGiftBuyRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LimitTimeGiftBuyRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LimitTimeGiftBuyRequest parseFrom(InputStream input) throws IOException {
            return (LimitTimeGiftBuyRequest) PARSER.parseFrom(input);
        }

        public static LimitTimeGiftBuyRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LimitTimeGiftBuyRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static LimitTimeGiftBuyRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (LimitTimeGiftBuyRequest) PARSER.parseDelimitedFrom(input);
        }

        public static LimitTimeGiftBuyRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LimitTimeGiftBuyRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static LimitTimeGiftBuyRequest parseFrom(CodedInputStream input) throws IOException {
            return (LimitTimeGiftBuyRequest) PARSER.parseFrom(input);
        }

        public static LimitTimeGiftBuyRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LimitTimeGiftBuyRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(LimitTimeGiftBuyRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.LimitTimeGiftBuyRequestOrBuilder {
            private int bitField0_;
            private int id_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftBuyRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftBuyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.LimitTimeGiftBuyRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.LimitTimeGiftBuyRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.id_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftBuyRequest_descriptor;
            }

            public ActivityFavorHandler.LimitTimeGiftBuyRequest getDefaultInstanceForType() {
                return ActivityFavorHandler.LimitTimeGiftBuyRequest.getDefaultInstance();
            }

            public ActivityFavorHandler.LimitTimeGiftBuyRequest build() {
                ActivityFavorHandler.LimitTimeGiftBuyRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.LimitTimeGiftBuyRequest buildPartial() {
                ActivityFavorHandler.LimitTimeGiftBuyRequest result = new ActivityFavorHandler.LimitTimeGiftBuyRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.id_ = this.id_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.LimitTimeGiftBuyRequest)
                    return mergeFrom((ActivityFavorHandler.LimitTimeGiftBuyRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.LimitTimeGiftBuyRequest other) {
                if (other == ActivityFavorHandler.LimitTimeGiftBuyRequest.getDefaultInstance()) return this;
                if (other.hasId()) setId(other.getId());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasId()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.LimitTimeGiftBuyRequest parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.LimitTimeGiftBuyRequest) ActivityFavorHandler.LimitTimeGiftBuyRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.LimitTimeGiftBuyRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getId() {
                return this.id_;
            }

            public Builder setId(int value) {
                this.bitField0_ |= 0x1;
                this.id_ = value;
                onChanged();
                return this;
            }

            public Builder clearId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.id_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class LimitTimeGiftBuyResponse
            extends GeneratedMessage
            implements LimitTimeGiftBuyResponseOrBuilder {
        private static final LimitTimeGiftBuyResponse defaultInstance = new LimitTimeGiftBuyResponse(true);
        private final UnknownFieldSet unknownFields;

        private LimitTimeGiftBuyResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private LimitTimeGiftBuyResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static LimitTimeGiftBuyResponse getDefaultInstance() {
            return defaultInstance;
        }

        public LimitTimeGiftBuyResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private LimitTimeGiftBuyResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftBuyResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftBuyResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(LimitTimeGiftBuyResponse.class, Builder.class);
        }

        public static Parser<LimitTimeGiftBuyResponse> PARSER = (Parser<LimitTimeGiftBuyResponse>) new AbstractParser<LimitTimeGiftBuyResponse>() {
            public ActivityFavorHandler.LimitTimeGiftBuyResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.LimitTimeGiftBuyResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<LimitTimeGiftBuyResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static LimitTimeGiftBuyResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (LimitTimeGiftBuyResponse) PARSER.parseFrom(data);
        }

        public static LimitTimeGiftBuyResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LimitTimeGiftBuyResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LimitTimeGiftBuyResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (LimitTimeGiftBuyResponse) PARSER.parseFrom(data);
        }

        public static LimitTimeGiftBuyResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LimitTimeGiftBuyResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LimitTimeGiftBuyResponse parseFrom(InputStream input) throws IOException {
            return (LimitTimeGiftBuyResponse) PARSER.parseFrom(input);
        }

        public static LimitTimeGiftBuyResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LimitTimeGiftBuyResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static LimitTimeGiftBuyResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (LimitTimeGiftBuyResponse) PARSER.parseDelimitedFrom(input);
        }

        public static LimitTimeGiftBuyResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LimitTimeGiftBuyResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static LimitTimeGiftBuyResponse parseFrom(CodedInputStream input) throws IOException {
            return (LimitTimeGiftBuyResponse) PARSER.parseFrom(input);
        }

        public static LimitTimeGiftBuyResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LimitTimeGiftBuyResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(LimitTimeGiftBuyResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.LimitTimeGiftBuyResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftBuyResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftBuyResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.LimitTimeGiftBuyResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.LimitTimeGiftBuyResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_LimitTimeGiftBuyResponse_descriptor;
            }

            public ActivityFavorHandler.LimitTimeGiftBuyResponse getDefaultInstanceForType() {
                return ActivityFavorHandler.LimitTimeGiftBuyResponse.getDefaultInstance();
            }

            public ActivityFavorHandler.LimitTimeGiftBuyResponse build() {
                ActivityFavorHandler.LimitTimeGiftBuyResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.LimitTimeGiftBuyResponse buildPartial() {
                ActivityFavorHandler.LimitTimeGiftBuyResponse result = new ActivityFavorHandler.LimitTimeGiftBuyResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.LimitTimeGiftBuyResponse)
                    return mergeFrom((ActivityFavorHandler.LimitTimeGiftBuyResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.LimitTimeGiftBuyResponse other) {
                if (other == ActivityFavorHandler.LimitTimeGiftBuyResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.LimitTimeGiftBuyResponse parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.LimitTimeGiftBuyResponse) ActivityFavorHandler.LimitTimeGiftBuyResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.LimitTimeGiftBuyResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = ActivityFavorHandler.LimitTimeGiftBuyResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class ContinuousRechargeItem
            extends GeneratedMessage
            implements ContinuousRechargeItemOrBuilder {
        private static final ContinuousRechargeItem defaultInstance = new ContinuousRechargeItem(true);
        private final UnknownFieldSet unknownFields;

        private ContinuousRechargeItem(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private ContinuousRechargeItem(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static ContinuousRechargeItem getDefaultInstance() {
            return defaultInstance;
        }

        public ContinuousRechargeItem getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private ContinuousRechargeItem(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.code_ = bs;
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.groupCount_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeItem_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeItem_fieldAccessorTable.ensureFieldAccessorsInitialized(ContinuousRechargeItem.class, Builder.class);
        }

        public static Parser<ContinuousRechargeItem> PARSER = (Parser<ContinuousRechargeItem>) new AbstractParser<ContinuousRechargeItem>() {
            public ActivityFavorHandler.ContinuousRechargeItem parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.ContinuousRechargeItem(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int CODE_FIELD_NUMBER = 1;
        private Object code_;
        public static final int GROUPCOUNT_FIELD_NUMBER = 2;
        private int groupCount_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<ContinuousRechargeItem> getParserForType() {
            return PARSER;
        }

        public boolean hasCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getCode() {
            Object ref = this.code_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.code_ = s;
            return s;
        }

        public ByteString getCodeBytes() {
            Object ref = this.code_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.code_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasGroupCount() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getGroupCount() {
            return this.groupCount_;
        }

        private void initFields() {
            this.code_ = "";
            this.groupCount_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasGroupCount()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getCodeBytes());
            if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.groupCount_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getCodeBytes());
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.groupCount_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static ContinuousRechargeItem parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (ContinuousRechargeItem) PARSER.parseFrom(data);
        }

        public static ContinuousRechargeItem parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (ContinuousRechargeItem) PARSER.parseFrom(data, extensionRegistry);
        }

        public static ContinuousRechargeItem parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (ContinuousRechargeItem) PARSER.parseFrom(data);
        }

        public static ContinuousRechargeItem parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (ContinuousRechargeItem) PARSER.parseFrom(data, extensionRegistry);
        }

        public static ContinuousRechargeItem parseFrom(InputStream input) throws IOException {
            return (ContinuousRechargeItem) PARSER.parseFrom(input);
        }

        public static ContinuousRechargeItem parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ContinuousRechargeItem) PARSER.parseFrom(input, extensionRegistry);
        }

        public static ContinuousRechargeItem parseDelimitedFrom(InputStream input) throws IOException {
            return (ContinuousRechargeItem) PARSER.parseDelimitedFrom(input);
        }

        public static ContinuousRechargeItem parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ContinuousRechargeItem) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static ContinuousRechargeItem parseFrom(CodedInputStream input) throws IOException {
            return (ContinuousRechargeItem) PARSER.parseFrom(input);
        }

        public static ContinuousRechargeItem parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ContinuousRechargeItem) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ContinuousRechargeItem prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.ContinuousRechargeItemOrBuilder {
            private int bitField0_;
            private Object code_;
            private int groupCount_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeItem_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeItem_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.ContinuousRechargeItem.class, Builder.class);
            }

            private Builder() {
                this.code_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.code_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.ContinuousRechargeItem.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.code_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                this.groupCount_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeItem_descriptor;
            }

            public ActivityFavorHandler.ContinuousRechargeItem getDefaultInstanceForType() {
                return ActivityFavorHandler.ContinuousRechargeItem.getDefaultInstance();
            }

            public ActivityFavorHandler.ContinuousRechargeItem build() {
                ActivityFavorHandler.ContinuousRechargeItem result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.ContinuousRechargeItem buildPartial() {
                ActivityFavorHandler.ContinuousRechargeItem result = new ActivityFavorHandler.ContinuousRechargeItem(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.code_ = this.code_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.groupCount_ = this.groupCount_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.ContinuousRechargeItem)
                    return mergeFrom((ActivityFavorHandler.ContinuousRechargeItem) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.ContinuousRechargeItem other) {
                if (other == ActivityFavorHandler.ContinuousRechargeItem.getDefaultInstance()) return this;
                if (other.hasCode()) {
                    this.bitField0_ |= 0x1;
                    this.code_ = other.code_;
                    onChanged();
                }
                if (other.hasGroupCount()) setGroupCount(other.getGroupCount());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasCode()) return false;
                if (!hasGroupCount()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.ContinuousRechargeItem parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.ContinuousRechargeItem) ActivityFavorHandler.ContinuousRechargeItem.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.ContinuousRechargeItem) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public String getCode() {
                Object ref = this.code_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.code_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getCodeBytes() {
                Object ref = this.code_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.code_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setCode(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.code_ = value;
                onChanged();
                return this;
            }

            public Builder clearCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.code_ = ActivityFavorHandler.ContinuousRechargeItem.getDefaultInstance().getCode();
                onChanged();
                return this;
            }

            public Builder setCodeBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.code_ = value;
                onChanged();
                return this;
            }

            public boolean hasGroupCount() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getGroupCount() {
                return this.groupCount_;
            }

            public Builder setGroupCount(int value) {
                this.bitField0_ |= 0x2;
                this.groupCount_ = value;
                onChanged();
                return this;
            }

            public Builder clearGroupCount() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.groupCount_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class ContinuousRechargeAwardInfo
            extends GeneratedMessage
            implements ContinuousRechargeAwardInfoOrBuilder {
        private final UnknownFieldSet unknownFields;


        private ContinuousRechargeAwardInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }


        private ContinuousRechargeAwardInfo(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }


        public static ContinuousRechargeAwardInfo getDefaultInstance() {
            return defaultInstance;
        }


        public ContinuousRechargeAwardInfo getDefaultInstanceForType() {
            return defaultInstance;
        }


        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }


        private ContinuousRechargeAwardInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.day_ = input.readInt32();
                            break;
                        case 18:
                            if ((mutable_bitField0_ & 0x2) != 2) {
                                this.item_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x2;
                            }
                            this.item_.add(input.readMessage(ActivityFavorHandler.ContinuousRechargeItem.PARSER, extensionRegistry));
                            break;
                        case 24:
                            this.bitField0_ |= 0x2;
                            this.state_ = input.readInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 0x4;
                            this.money_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x2) == 2) {
                    this.item_ = Collections.unmodifiableList(this.item_);
                }
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }


        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeAwardInfo_descriptor;
        }


        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeAwardInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ContinuousRechargeAwardInfo.class, Builder.class);
        }


        public static Parser<ContinuousRechargeAwardInfo> PARSER = (Parser<ContinuousRechargeAwardInfo>) new AbstractParser<ContinuousRechargeAwardInfo>() {
            public ActivityFavorHandler.ContinuousRechargeAwardInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.ContinuousRechargeAwardInfo(input, extensionRegistry);
            }
        };


        private int bitField0_;


        public static final int DAY_FIELD_NUMBER = 1;


        private int day_;


        public static final int ITEM_FIELD_NUMBER = 2;


        private List<ActivityFavorHandler.ContinuousRechargeItem> item_;


        public static final int STATE_FIELD_NUMBER = 3;


        private int state_;


        public static final int MONEY_FIELD_NUMBER = 4;


        private int money_;


        private byte memoizedIsInitialized;


        private int memoizedSerializedSize;


        private static final long serialVersionUID = 0L;


        public Parser<ContinuousRechargeAwardInfo> getParserForType() {
            return PARSER;
        }


        public boolean hasDay() {
            return ((this.bitField0_ & 0x1) == 1);
        }


        public int getDay() {
            return this.day_;
        }


        public List<ActivityFavorHandler.ContinuousRechargeItem> getItemList() {
            return this.item_;
        }


        public List<? extends ActivityFavorHandler.ContinuousRechargeItemOrBuilder> getItemOrBuilderList() {
            return (List) this.item_;
        }


        public int getItemCount() {
            return this.item_.size();
        }


        public ActivityFavorHandler.ContinuousRechargeItem getItem(int index) {
            return this.item_.get(index);
        }


        public ActivityFavorHandler.ContinuousRechargeItemOrBuilder getItemOrBuilder(int index) {
            return this.item_.get(index);
        }


        public boolean hasState() {
            return ((this.bitField0_ & 0x2) == 2);
        }


        public int getState() {
            return this.state_;
        }


        public boolean hasMoney() {
            return ((this.bitField0_ & 0x4) == 4);
        }


        public int getMoney() {
            return this.money_;
        }


        private void initFields() {
            this.day_ = 0;
            this.item_ = Collections.emptyList();
            this.state_ = 0;
            this.money_ = 0;
        }


        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            if (!hasDay()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasState()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasMoney()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getItemCount(); i++) {
                if (!getItem(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }


        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeInt32(1, this.day_);
            }
            for (int i = 0; i < this.item_.size(); i++) {
                output.writeMessage(2, (MessageLite) this.item_.get(i));
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeInt32(3, this.state_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                output.writeInt32(4, this.money_);
            }
            getUnknownFields().writeTo(output);
        }


        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeInt32Size(1, this.day_);
            }
            for (int i = 0; i < this.item_.size(); i++) {
                size += CodedOutputStream.computeMessageSize(2, (MessageLite) this.item_.get(i));
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeInt32Size(3, this.state_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                size += CodedOutputStream.computeInt32Size(4, this.money_);
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }


        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }


        public static ContinuousRechargeAwardInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (ContinuousRechargeAwardInfo) PARSER.parseFrom(data);
        }


        public static ContinuousRechargeAwardInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (ContinuousRechargeAwardInfo) PARSER.parseFrom(data, extensionRegistry);
        }


        public static ContinuousRechargeAwardInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (ContinuousRechargeAwardInfo) PARSER.parseFrom(data);
        }


        private static final ContinuousRechargeAwardInfo defaultInstance = new ContinuousRechargeAwardInfo(true);

        public static ContinuousRechargeAwardInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (ContinuousRechargeAwardInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static ContinuousRechargeAwardInfo parseFrom(InputStream input) throws IOException {
            return (ContinuousRechargeAwardInfo) PARSER.parseFrom(input);
        }

        public static ContinuousRechargeAwardInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ContinuousRechargeAwardInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static ContinuousRechargeAwardInfo parseDelimitedFrom(InputStream input) throws IOException {
            return (ContinuousRechargeAwardInfo) PARSER.parseDelimitedFrom(input);
        }

        public static ContinuousRechargeAwardInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ContinuousRechargeAwardInfo) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static ContinuousRechargeAwardInfo parseFrom(CodedInputStream input) throws IOException {
            return (ContinuousRechargeAwardInfo) PARSER.parseFrom(input);
        }

        public static ContinuousRechargeAwardInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ContinuousRechargeAwardInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ContinuousRechargeAwardInfo prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.ContinuousRechargeAwardInfoOrBuilder {
            private int bitField0_;
            private int day_;
            private List<ActivityFavorHandler.ContinuousRechargeItem> item_;
            private RepeatedFieldBuilder<ActivityFavorHandler.ContinuousRechargeItem, ActivityFavorHandler.ContinuousRechargeItem.Builder, ActivityFavorHandler.ContinuousRechargeItemOrBuilder> itemBuilder_;
            private int state_;
            private int money_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeAwardInfo_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeAwardInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.ContinuousRechargeAwardInfo.class, Builder.class);
            }

            private Builder() {
                this.item_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.item_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.ContinuousRechargeAwardInfo.alwaysUseFieldBuilders) getItemFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.day_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                if (this.itemBuilder_ == null) {
                    this.item_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFD;
                } else {
                    this.itemBuilder_.clear();
                }
                this.state_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                this.money_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeAwardInfo_descriptor;
            }

            public ActivityFavorHandler.ContinuousRechargeAwardInfo getDefaultInstanceForType() {
                return ActivityFavorHandler.ContinuousRechargeAwardInfo.getDefaultInstance();
            }

            public ActivityFavorHandler.ContinuousRechargeAwardInfo build() {
                ActivityFavorHandler.ContinuousRechargeAwardInfo result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.ContinuousRechargeAwardInfo buildPartial() {
                ActivityFavorHandler.ContinuousRechargeAwardInfo result = new ActivityFavorHandler.ContinuousRechargeAwardInfo(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.day_ = this.day_;
                if (this.itemBuilder_ == null) {
                    if ((this.bitField0_ & 0x2) == 2) {
                        this.item_ = Collections.unmodifiableList(this.item_);
                        this.bitField0_ &= 0xFFFFFFFD;
                    }
                    result.item_ = this.item_;
                } else {
                    result.item_ = this.itemBuilder_.build();
                }
                if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x2;
                result.state_ = this.state_;
                if ((from_bitField0_ & 0x8) == 8) to_bitField0_ |= 0x4;
                result.money_ = this.money_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.ContinuousRechargeAwardInfo)
                    return mergeFrom((ActivityFavorHandler.ContinuousRechargeAwardInfo) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.ContinuousRechargeAwardInfo other) {
                if (other == ActivityFavorHandler.ContinuousRechargeAwardInfo.getDefaultInstance()) return this;
                if (other.hasDay()) setDay(other.getDay());
                if (this.itemBuilder_ == null) {
                    if (!other.item_.isEmpty()) {
                        if (this.item_.isEmpty()) {
                            this.item_ = other.item_;
                            this.bitField0_ &= 0xFFFFFFFD;
                        } else {
                            ensureItemIsMutable();
                            this.item_.addAll(other.item_);
                        }
                        onChanged();
                    }
                } else if (!other.item_.isEmpty()) {
                    if (this.itemBuilder_.isEmpty()) {
                        this.itemBuilder_.dispose();
                        this.itemBuilder_ = null;
                        this.item_ = other.item_;
                        this.bitField0_ &= 0xFFFFFFFD;
                        this.itemBuilder_ = ActivityFavorHandler.ContinuousRechargeAwardInfo.alwaysUseFieldBuilders ? getItemFieldBuilder() : null;
                    } else {
                        this.itemBuilder_.addAllMessages(other.item_);
                    }
                }
                if (other.hasState()) setState(other.getState());
                if (other.hasMoney()) setMoney(other.getMoney());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasDay()) return false;
                if (!hasState()) return false;
                if (!hasMoney()) return false;
                for (int i = 0; i < getItemCount(); i++) {
                    if (!getItem(i).isInitialized()) return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.ContinuousRechargeAwardInfo parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.ContinuousRechargeAwardInfo) ActivityFavorHandler.ContinuousRechargeAwardInfo.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.ContinuousRechargeAwardInfo) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasDay() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getDay() {
                return this.day_;
            }

            public Builder setDay(int value) {
                this.bitField0_ |= 0x1;
                this.day_ = value;
                onChanged();
                return this;
            }

            public Builder clearDay() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.day_ = 0;
                onChanged();
                return this;
            }

            private void ensureItemIsMutable() {
                if ((this.bitField0_ & 0x2) != 2) {
                    this.item_ = new ArrayList<>(this.item_);
                    this.bitField0_ |= 0x2;
                }
            }

            public List<ActivityFavorHandler.ContinuousRechargeItem> getItemList() {
                if (this.itemBuilder_ == null) return Collections.unmodifiableList(this.item_);
                return this.itemBuilder_.getMessageList();
            }

            public int getItemCount() {
                if (this.itemBuilder_ == null) return this.item_.size();
                return this.itemBuilder_.getCount();
            }

            public ActivityFavorHandler.ContinuousRechargeItem getItem(int index) {
                if (this.itemBuilder_ == null) return this.item_.get(index);
                return (ActivityFavorHandler.ContinuousRechargeItem) this.itemBuilder_.getMessage(index);
            }

            public Builder setItem(int index, ActivityFavorHandler.ContinuousRechargeItem value) {
                if (this.itemBuilder_ == null) {
                    if (value == null) throw new NullPointerException();
                    ensureItemIsMutable();
                    this.item_.set(index, value);
                    onChanged();
                } else {
                    this.itemBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setItem(int index, ActivityFavorHandler.ContinuousRechargeItem.Builder builderForValue) {
                if (this.itemBuilder_ == null) {
                    ensureItemIsMutable();
                    this.item_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.itemBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addItem(ActivityFavorHandler.ContinuousRechargeItem value) {
                if (this.itemBuilder_ == null) {
                    if (value == null) throw new NullPointerException();
                    ensureItemIsMutable();
                    this.item_.add(value);
                    onChanged();
                } else {
                    this.itemBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addItem(int index, ActivityFavorHandler.ContinuousRechargeItem value) {
                if (this.itemBuilder_ == null) {
                    if (value == null) throw new NullPointerException();
                    ensureItemIsMutable();
                    this.item_.add(index, value);
                    onChanged();
                } else {
                    this.itemBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addItem(ActivityFavorHandler.ContinuousRechargeItem.Builder builderForValue) {
                if (this.itemBuilder_ == null) {
                    ensureItemIsMutable();
                    this.item_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.itemBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addItem(int index, ActivityFavorHandler.ContinuousRechargeItem.Builder builderForValue) {
                if (this.itemBuilder_ == null) {
                    ensureItemIsMutable();
                    this.item_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.itemBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllItem(Iterable<? extends ActivityFavorHandler.ContinuousRechargeItem> values) {
                if (this.itemBuilder_ == null) {
                    ensureItemIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.item_);
                    onChanged();
                } else {
                    this.itemBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearItem() {
                if (this.itemBuilder_ == null) {
                    this.item_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFD;
                    onChanged();
                } else {
                    this.itemBuilder_.clear();
                }
                return this;
            }

            public Builder removeItem(int index) {
                if (this.itemBuilder_ == null) {
                    ensureItemIsMutable();
                    this.item_.remove(index);
                    onChanged();
                } else {
                    this.itemBuilder_.remove(index);
                }
                return this;
            }

            public ActivityFavorHandler.ContinuousRechargeItem.Builder getItemBuilder(int index) {
                return (ActivityFavorHandler.ContinuousRechargeItem.Builder) getItemFieldBuilder().getBuilder(index);
            }

            public ActivityFavorHandler.ContinuousRechargeItemOrBuilder getItemOrBuilder(int index) {
                if (this.itemBuilder_ == null) return this.item_.get(index);
                return (ActivityFavorHandler.ContinuousRechargeItemOrBuilder) this.itemBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends ActivityFavorHandler.ContinuousRechargeItemOrBuilder> getItemOrBuilderList() {
                if (this.itemBuilder_ != null) return this.itemBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.item_);
            }

            public ActivityFavorHandler.ContinuousRechargeItem.Builder addItemBuilder() {
                return (ActivityFavorHandler.ContinuousRechargeItem.Builder) getItemFieldBuilder().addBuilder(ActivityFavorHandler.ContinuousRechargeItem.getDefaultInstance());
            }

            public ActivityFavorHandler.ContinuousRechargeItem.Builder addItemBuilder(int index) {
                return (ActivityFavorHandler.ContinuousRechargeItem.Builder) getItemFieldBuilder().addBuilder(index, ActivityFavorHandler.ContinuousRechargeItem.getDefaultInstance());
            }

            public List<ActivityFavorHandler.ContinuousRechargeItem.Builder> getItemBuilderList() {
                return getItemFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<ActivityFavorHandler.ContinuousRechargeItem, ActivityFavorHandler.ContinuousRechargeItem.Builder, ActivityFavorHandler.ContinuousRechargeItemOrBuilder> getItemFieldBuilder() {
                if (this.itemBuilder_ == null) {
                    this.itemBuilder_ = new RepeatedFieldBuilder(this.item_, ((this.bitField0_ & 0x2) == 2), getParentForChildren(), isClean());
                    this.item_ = null;
                }
                return this.itemBuilder_;
            }

            public boolean hasState() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public int getState() {
                return this.state_;
            }

            public Builder setState(int value) {
                this.bitField0_ |= 0x4;
                this.state_ = value;
                onChanged();
                return this;
            }

            public Builder clearState() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.state_ = 0;
                onChanged();
                return this;
            }

            public boolean hasMoney() {
                return ((this.bitField0_ & 0x8) == 8);
            }

            public int getMoney() {
                return this.money_;
            }

            public Builder setMoney(int value) {
                this.bitField0_ |= 0x8;
                this.money_ = value;
                onChanged();
                return this;
            }

            public Builder clearMoney() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.money_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class ContinuousRechargeInfo
            extends GeneratedMessage
            implements ContinuousRechargeInfoOrBuilder {
        private static final ContinuousRechargeInfo defaultInstance = new ContinuousRechargeInfo(true);
        private final UnknownFieldSet unknownFields;

        private ContinuousRechargeInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private ContinuousRechargeInfo(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static ContinuousRechargeInfo getDefaultInstance() {
            return defaultInstance;
        }

        public ContinuousRechargeInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private ContinuousRechargeInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.beginTime_ = bs;
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.endTime_ = bs;
                            break;
                        case 26:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x4;
                            this.describe_ = bs;
                            break;
                        case 34:
                            if ((mutable_bitField0_ & 0x8) != 8) {
                                this.continuousRechargeAwardInfo_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x8;
                            }
                            this.continuousRechargeAwardInfo_.add(input.readMessage(ActivityFavorHandler.ContinuousRechargeAwardInfo.PARSER, extensionRegistry));
                            break;
                        case 40:
                            this.bitField0_ |= 0x8;
                            this.day_ = input.readInt32();
                            break;
                        case 48:
                            this.bitField0_ |= 0x10;
                            this.currNum_ = input.readInt32();
                            break;
                        case 56:
                            this.bitField0_ |= 0x20;
                            this.needNum_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x8) == 8)
                    this.continuousRechargeAwardInfo_ = Collections.unmodifiableList(this.continuousRechargeAwardInfo_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeInfo_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ContinuousRechargeInfo.class, Builder.class);
        }

        public static Parser<ContinuousRechargeInfo> PARSER = (Parser<ContinuousRechargeInfo>) new AbstractParser<ContinuousRechargeInfo>() {
            public ActivityFavorHandler.ContinuousRechargeInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.ContinuousRechargeInfo(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int BEGINTIME_FIELD_NUMBER = 1;
        private Object beginTime_;
        public static final int ENDTIME_FIELD_NUMBER = 2;
        private Object endTime_;
        public static final int DESCRIBE_FIELD_NUMBER = 3;
        private Object describe_;
        public static final int CONTINUOUSRECHARGEAWARDINFO_FIELD_NUMBER = 4;
        private List<ActivityFavorHandler.ContinuousRechargeAwardInfo> continuousRechargeAwardInfo_;
        public static final int DAY_FIELD_NUMBER = 5;
        private int day_;
        public static final int CURRNUM_FIELD_NUMBER = 6;
        private int currNum_;
        public static final int NEEDNUM_FIELD_NUMBER = 7;
        private int needNum_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<ContinuousRechargeInfo> getParserForType() {
            return PARSER;
        }

        public boolean hasBeginTime() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getBeginTime() {
            Object ref = this.beginTime_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.beginTime_ = s;
            return s;
        }

        public ByteString getBeginTimeBytes() {
            Object ref = this.beginTime_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.beginTime_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasEndTime() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getEndTime() {
            Object ref = this.endTime_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.endTime_ = s;
            return s;
        }

        public ByteString getEndTimeBytes() {
            Object ref = this.endTime_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.endTime_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        static {
            defaultInstance.initFields();
        }

        public boolean hasDescribe() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public String getDescribe() {
            Object ref = this.describe_;
            if (ref instanceof String)
                return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8())
                this.describe_ = s;
            return s;
        }

        public ByteString getDescribeBytes() {
            Object ref = this.describe_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.describe_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public List<ActivityFavorHandler.ContinuousRechargeAwardInfo> getContinuousRechargeAwardInfoList() {
            return this.continuousRechargeAwardInfo_;
        }

        public List<? extends ActivityFavorHandler.ContinuousRechargeAwardInfoOrBuilder> getContinuousRechargeAwardInfoOrBuilderList() {
            return (List) this.continuousRechargeAwardInfo_;
        }

        public int getContinuousRechargeAwardInfoCount() {
            return this.continuousRechargeAwardInfo_.size();
        }

        public ActivityFavorHandler.ContinuousRechargeAwardInfo getContinuousRechargeAwardInfo(int index) {
            return this.continuousRechargeAwardInfo_.get(index);
        }

        public ActivityFavorHandler.ContinuousRechargeAwardInfoOrBuilder getContinuousRechargeAwardInfoOrBuilder(int index) {
            return this.continuousRechargeAwardInfo_.get(index);
        }

        public boolean hasDay() {
            return ((this.bitField0_ & 0x8) == 8);
        }

        public int getDay() {
            return this.day_;
        }

        public boolean hasCurrNum() {
            return ((this.bitField0_ & 0x10) == 16);
        }

        public int getCurrNum() {
            return this.currNum_;
        }

        public boolean hasNeedNum() {
            return ((this.bitField0_ & 0x20) == 32);
        }

        public int getNeedNum() {
            return this.needNum_;
        }

        private void initFields() {
            this.beginTime_ = "";
            this.endTime_ = "";
            this.describe_ = "";
            this.continuousRechargeAwardInfo_ = Collections.emptyList();
            this.day_ = 0;
            this.currNum_ = 0;
            this.needNum_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasBeginTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasEndTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasDay()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getContinuousRechargeAwardInfoCount(); i++) {
                if (!getContinuousRechargeAwardInfo(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeBytes(1, getBeginTimeBytes());
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(2, getEndTimeBytes());
            if ((this.bitField0_ & 0x4) == 4)
                output.writeBytes(3, getDescribeBytes());
            for (int i = 0; i < this.continuousRechargeAwardInfo_.size(); i++)
                output.writeMessage(4, (MessageLite) this.continuousRechargeAwardInfo_.get(i));
            if ((this.bitField0_ & 0x8) == 8)
                output.writeInt32(5, this.day_);
            if ((this.bitField0_ & 0x10) == 16)
                output.writeInt32(6, this.currNum_);
            if ((this.bitField0_ & 0x20) == 32)
                output.writeInt32(7, this.needNum_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeBytesSize(1, getBeginTimeBytes());
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(2, getEndTimeBytes());
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeBytesSize(3, getDescribeBytes());
            for (int i = 0; i < this.continuousRechargeAwardInfo_.size(); i++)
                size += CodedOutputStream.computeMessageSize(4, (MessageLite) this.continuousRechargeAwardInfo_.get(i));
            if ((this.bitField0_ & 0x8) == 8)
                size += CodedOutputStream.computeInt32Size(5, this.day_);
            if ((this.bitField0_ & 0x10) == 16)
                size += CodedOutputStream.computeInt32Size(6, this.currNum_);
            if ((this.bitField0_ & 0x20) == 32)
                size += CodedOutputStream.computeInt32Size(7, this.needNum_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static ContinuousRechargeInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (ContinuousRechargeInfo) PARSER.parseFrom(data);
        }

        public static ContinuousRechargeInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (ContinuousRechargeInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static ContinuousRechargeInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (ContinuousRechargeInfo) PARSER.parseFrom(data);
        }

        public static ContinuousRechargeInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (ContinuousRechargeInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static ContinuousRechargeInfo parseFrom(InputStream input) throws IOException {
            return (ContinuousRechargeInfo) PARSER.parseFrom(input);
        }

        public static ContinuousRechargeInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ContinuousRechargeInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static ContinuousRechargeInfo parseDelimitedFrom(InputStream input) throws IOException {
            return (ContinuousRechargeInfo) PARSER.parseDelimitedFrom(input);
        }

        public static ContinuousRechargeInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ContinuousRechargeInfo) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static ContinuousRechargeInfo parseFrom(CodedInputStream input) throws IOException {
            return (ContinuousRechargeInfo) PARSER.parseFrom(input);
        }

        public static ContinuousRechargeInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ContinuousRechargeInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ContinuousRechargeInfo prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.ContinuousRechargeInfoOrBuilder {
            private int bitField0_;
            private Object beginTime_;
            private Object endTime_;
            private Object describe_;
            private List<ActivityFavorHandler.ContinuousRechargeAwardInfo> continuousRechargeAwardInfo_;
            private RepeatedFieldBuilder<ActivityFavorHandler.ContinuousRechargeAwardInfo, ActivityFavorHandler.ContinuousRechargeAwardInfo.Builder, ActivityFavorHandler.ContinuousRechargeAwardInfoOrBuilder> continuousRechargeAwardInfoBuilder_;
            private int day_;
            private int currNum_;
            private int needNum_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeInfo_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.ContinuousRechargeInfo.class, Builder.class);
            }

            private Builder() {
                this.beginTime_ = "";
                this.endTime_ = "";
                this.describe_ = "";
                this.continuousRechargeAwardInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.beginTime_ = "";
                this.endTime_ = "";
                this.describe_ = "";
                this.continuousRechargeAwardInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.ContinuousRechargeInfo.alwaysUseFieldBuilders)
                    getContinuousRechargeAwardInfoFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.beginTime_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                this.endTime_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                this.describe_ = "";
                this.bitField0_ &= 0xFFFFFFFB;
                if (this.continuousRechargeAwardInfoBuilder_ == null) {
                    this.continuousRechargeAwardInfo_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFF7;
                } else {
                    this.continuousRechargeAwardInfoBuilder_.clear();
                }
                this.day_ = 0;
                this.bitField0_ &= 0xFFFFFFEF;
                this.currNum_ = 0;
                this.bitField0_ &= 0xFFFFFFDF;
                this.needNum_ = 0;
                this.bitField0_ &= 0xFFFFFFBF;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeInfo_descriptor;
            }

            public ActivityFavorHandler.ContinuousRechargeInfo getDefaultInstanceForType() {
                return ActivityFavorHandler.ContinuousRechargeInfo.getDefaultInstance();
            }

            public ActivityFavorHandler.ContinuousRechargeInfo build() {
                ActivityFavorHandler.ContinuousRechargeInfo result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.ContinuousRechargeInfo buildPartial() {
                ActivityFavorHandler.ContinuousRechargeInfo result = new ActivityFavorHandler.ContinuousRechargeInfo(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.beginTime_ = this.beginTime_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.endTime_ = this.endTime_;
                if ((from_bitField0_ & 0x4) == 4)
                    to_bitField0_ |= 0x4;
                result.describe_ = this.describe_;
                if (this.continuousRechargeAwardInfoBuilder_ == null) {
                    if ((this.bitField0_ & 0x8) == 8) {
                        this.continuousRechargeAwardInfo_ = Collections.unmodifiableList(this.continuousRechargeAwardInfo_);
                        this.bitField0_ &= 0xFFFFFFF7;
                    }
                    result.continuousRechargeAwardInfo_ = this.continuousRechargeAwardInfo_;
                } else {
                    result.continuousRechargeAwardInfo_ = this.continuousRechargeAwardInfoBuilder_.build();
                }
                if ((from_bitField0_ & 0x10) == 16)
                    to_bitField0_ |= 0x8;
                result.day_ = this.day_;
                if ((from_bitField0_ & 0x20) == 32)
                    to_bitField0_ |= 0x10;
                result.currNum_ = this.currNum_;
                if ((from_bitField0_ & 0x40) == 64)
                    to_bitField0_ |= 0x20;
                result.needNum_ = this.needNum_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.ContinuousRechargeInfo)
                    return mergeFrom((ActivityFavorHandler.ContinuousRechargeInfo) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.ContinuousRechargeInfo other) {
                if (other == ActivityFavorHandler.ContinuousRechargeInfo.getDefaultInstance())
                    return this;
                if (other.hasBeginTime()) {
                    this.bitField0_ |= 0x1;
                    this.beginTime_ = other.beginTime_;
                    onChanged();
                }
                if (other.hasEndTime()) {
                    this.bitField0_ |= 0x2;
                    this.endTime_ = other.endTime_;
                    onChanged();
                }
                if (other.hasDescribe()) {
                    this.bitField0_ |= 0x4;
                    this.describe_ = other.describe_;
                    onChanged();
                }
                if (this.continuousRechargeAwardInfoBuilder_ == null) {
                    if (!other.continuousRechargeAwardInfo_.isEmpty()) {
                        if (this.continuousRechargeAwardInfo_.isEmpty()) {
                            this.continuousRechargeAwardInfo_ = other.continuousRechargeAwardInfo_;
                            this.bitField0_ &= 0xFFFFFFF7;
                        } else {
                            ensureContinuousRechargeAwardInfoIsMutable();
                            this.continuousRechargeAwardInfo_.addAll(other.continuousRechargeAwardInfo_);
                        }
                        onChanged();
                    }
                } else if (!other.continuousRechargeAwardInfo_.isEmpty()) {
                    if (this.continuousRechargeAwardInfoBuilder_.isEmpty()) {
                        this.continuousRechargeAwardInfoBuilder_.dispose();
                        this.continuousRechargeAwardInfoBuilder_ = null;
                        this.continuousRechargeAwardInfo_ = other.continuousRechargeAwardInfo_;
                        this.bitField0_ &= 0xFFFFFFF7;
                        this.continuousRechargeAwardInfoBuilder_ = ActivityFavorHandler.ContinuousRechargeInfo.alwaysUseFieldBuilders ? getContinuousRechargeAwardInfoFieldBuilder() : null;
                    } else {
                        this.continuousRechargeAwardInfoBuilder_.addAllMessages(other.continuousRechargeAwardInfo_);
                    }
                }
                if (other.hasDay())
                    setDay(other.getDay());
                if (other.hasCurrNum())
                    setCurrNum(other.getCurrNum());
                if (other.hasNeedNum())
                    setNeedNum(other.getNeedNum());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasBeginTime())
                    return false;
                if (!hasEndTime())
                    return false;
                if (!hasDay())
                    return false;
                for (int i = 0; i < getContinuousRechargeAwardInfoCount(); i++) {
                    if (!getContinuousRechargeAwardInfo(i).isInitialized())
                        return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.ContinuousRechargeInfo parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.ContinuousRechargeInfo) ActivityFavorHandler.ContinuousRechargeInfo.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.ContinuousRechargeInfo) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasBeginTime() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public String getBeginTime() {
                Object ref = this.beginTime_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.beginTime_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getBeginTimeBytes() {
                Object ref = this.beginTime_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.beginTime_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setBeginTime(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.beginTime_ = value;
                onChanged();
                return this;
            }

            public Builder clearBeginTime() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.beginTime_ = ActivityFavorHandler.ContinuousRechargeInfo.getDefaultInstance().getBeginTime();
                onChanged();
                return this;
            }

            public Builder setBeginTimeBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.beginTime_ = value;
                onChanged();
                return this;
            }

            public boolean hasEndTime() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getEndTime() {
                Object ref = this.endTime_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.endTime_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getEndTimeBytes() {
                Object ref = this.endTime_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.endTime_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setEndTime(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.endTime_ = value;
                onChanged();
                return this;
            }

            public Builder clearEndTime() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.endTime_ = ActivityFavorHandler.ContinuousRechargeInfo.getDefaultInstance().getEndTime();
                onChanged();
                return this;
            }

            public Builder setEndTimeBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.endTime_ = value;
                onChanged();
                return this;
            }

            public boolean hasDescribe() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public String getDescribe() {
                Object ref = this.describe_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.describe_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getDescribeBytes() {
                Object ref = this.describe_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.describe_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setDescribe(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x4;
                this.describe_ = value;
                onChanged();
                return this;
            }

            public Builder clearDescribe() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.describe_ = ActivityFavorHandler.ContinuousRechargeInfo.getDefaultInstance().getDescribe();
                onChanged();
                return this;
            }

            public Builder setDescribeBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x4;
                this.describe_ = value;
                onChanged();
                return this;
            }

            private void ensureContinuousRechargeAwardInfoIsMutable() {
                if ((this.bitField0_ & 0x8) != 8) {
                    this.continuousRechargeAwardInfo_ = new ArrayList<>(this.continuousRechargeAwardInfo_);
                    this.bitField0_ |= 0x8;
                }
            }

            public List<ActivityFavorHandler.ContinuousRechargeAwardInfo> getContinuousRechargeAwardInfoList() {
                if (this.continuousRechargeAwardInfoBuilder_ == null)
                    return Collections.unmodifiableList(this.continuousRechargeAwardInfo_);
                return this.continuousRechargeAwardInfoBuilder_.getMessageList();
            }

            public int getContinuousRechargeAwardInfoCount() {
                if (this.continuousRechargeAwardInfoBuilder_ == null)
                    return this.continuousRechargeAwardInfo_.size();
                return this.continuousRechargeAwardInfoBuilder_.getCount();
            }

            public ActivityFavorHandler.ContinuousRechargeAwardInfo getContinuousRechargeAwardInfo(int index) {
                if (this.continuousRechargeAwardInfoBuilder_ == null)
                    return this.continuousRechargeAwardInfo_.get(index);
                return (ActivityFavorHandler.ContinuousRechargeAwardInfo) this.continuousRechargeAwardInfoBuilder_.getMessage(index);
            }

            public Builder setContinuousRechargeAwardInfo(int index, ActivityFavorHandler.ContinuousRechargeAwardInfo value) {
                if (this.continuousRechargeAwardInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureContinuousRechargeAwardInfoIsMutable();
                    this.continuousRechargeAwardInfo_.set(index, value);
                    onChanged();
                } else {
                    this.continuousRechargeAwardInfoBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setContinuousRechargeAwardInfo(int index, ActivityFavorHandler.ContinuousRechargeAwardInfo.Builder builderForValue) {
                if (this.continuousRechargeAwardInfoBuilder_ == null) {
                    ensureContinuousRechargeAwardInfoIsMutable();
                    this.continuousRechargeAwardInfo_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.continuousRechargeAwardInfoBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addContinuousRechargeAwardInfo(ActivityFavorHandler.ContinuousRechargeAwardInfo value) {
                if (this.continuousRechargeAwardInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureContinuousRechargeAwardInfoIsMutable();
                    this.continuousRechargeAwardInfo_.add(value);
                    onChanged();
                } else {
                    this.continuousRechargeAwardInfoBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addContinuousRechargeAwardInfo(int index, ActivityFavorHandler.ContinuousRechargeAwardInfo value) {
                if (this.continuousRechargeAwardInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureContinuousRechargeAwardInfoIsMutable();
                    this.continuousRechargeAwardInfo_.add(index, value);
                    onChanged();
                } else {
                    this.continuousRechargeAwardInfoBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addContinuousRechargeAwardInfo(ActivityFavorHandler.ContinuousRechargeAwardInfo.Builder builderForValue) {
                if (this.continuousRechargeAwardInfoBuilder_ == null) {
                    ensureContinuousRechargeAwardInfoIsMutable();
                    this.continuousRechargeAwardInfo_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.continuousRechargeAwardInfoBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addContinuousRechargeAwardInfo(int index, ActivityFavorHandler.ContinuousRechargeAwardInfo.Builder builderForValue) {
                if (this.continuousRechargeAwardInfoBuilder_ == null) {
                    ensureContinuousRechargeAwardInfoIsMutable();
                    this.continuousRechargeAwardInfo_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.continuousRechargeAwardInfoBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllContinuousRechargeAwardInfo(Iterable<? extends ActivityFavorHandler.ContinuousRechargeAwardInfo> values) {
                if (this.continuousRechargeAwardInfoBuilder_ == null) {
                    ensureContinuousRechargeAwardInfoIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.continuousRechargeAwardInfo_);
                    onChanged();
                } else {
                    this.continuousRechargeAwardInfoBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearContinuousRechargeAwardInfo() {
                if (this.continuousRechargeAwardInfoBuilder_ == null) {
                    this.continuousRechargeAwardInfo_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFF7;
                    onChanged();
                } else {
                    this.continuousRechargeAwardInfoBuilder_.clear();
                }
                return this;
            }

            public Builder removeContinuousRechargeAwardInfo(int index) {
                if (this.continuousRechargeAwardInfoBuilder_ == null) {
                    ensureContinuousRechargeAwardInfoIsMutable();
                    this.continuousRechargeAwardInfo_.remove(index);
                    onChanged();
                } else {
                    this.continuousRechargeAwardInfoBuilder_.remove(index);
                }
                return this;
            }

            public ActivityFavorHandler.ContinuousRechargeAwardInfo.Builder getContinuousRechargeAwardInfoBuilder(int index) {
                return (ActivityFavorHandler.ContinuousRechargeAwardInfo.Builder) getContinuousRechargeAwardInfoFieldBuilder().getBuilder(index);
            }

            public ActivityFavorHandler.ContinuousRechargeAwardInfoOrBuilder getContinuousRechargeAwardInfoOrBuilder(int index) {
                if (this.continuousRechargeAwardInfoBuilder_ == null)
                    return this.continuousRechargeAwardInfo_.get(index);
                return (ActivityFavorHandler.ContinuousRechargeAwardInfoOrBuilder) this.continuousRechargeAwardInfoBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends ActivityFavorHandler.ContinuousRechargeAwardInfoOrBuilder> getContinuousRechargeAwardInfoOrBuilderList() {
                if (this.continuousRechargeAwardInfoBuilder_ != null)
                    return this.continuousRechargeAwardInfoBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.continuousRechargeAwardInfo_);
            }

            public ActivityFavorHandler.ContinuousRechargeAwardInfo.Builder addContinuousRechargeAwardInfoBuilder() {
                return (ActivityFavorHandler.ContinuousRechargeAwardInfo.Builder) getContinuousRechargeAwardInfoFieldBuilder().addBuilder(ActivityFavorHandler.ContinuousRechargeAwardInfo.getDefaultInstance());
            }

            public ActivityFavorHandler.ContinuousRechargeAwardInfo.Builder addContinuousRechargeAwardInfoBuilder(int index) {
                return (ActivityFavorHandler.ContinuousRechargeAwardInfo.Builder) getContinuousRechargeAwardInfoFieldBuilder().addBuilder(index, ActivityFavorHandler.ContinuousRechargeAwardInfo.getDefaultInstance());
            }

            public List<ActivityFavorHandler.ContinuousRechargeAwardInfo.Builder> getContinuousRechargeAwardInfoBuilderList() {
                return getContinuousRechargeAwardInfoFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<ActivityFavorHandler.ContinuousRechargeAwardInfo, ActivityFavorHandler.ContinuousRechargeAwardInfo.Builder, ActivityFavorHandler.ContinuousRechargeAwardInfoOrBuilder> getContinuousRechargeAwardInfoFieldBuilder() {
                if (this.continuousRechargeAwardInfoBuilder_ == null) {
                    this.continuousRechargeAwardInfoBuilder_ = new RepeatedFieldBuilder(this.continuousRechargeAwardInfo_, ((this.bitField0_ & 0x8) == 8), getParentForChildren(), isClean());
                    this.continuousRechargeAwardInfo_ = null;
                }
                return this.continuousRechargeAwardInfoBuilder_;
            }

            public boolean hasDay() {
                return ((this.bitField0_ & 0x10) == 16);
            }

            public int getDay() {
                return this.day_;
            }

            public Builder setDay(int value) {
                this.bitField0_ |= 0x10;
                this.day_ = value;
                onChanged();
                return this;
            }

            public Builder clearDay() {
                this.bitField0_ &= 0xFFFFFFEF;
                this.day_ = 0;
                onChanged();
                return this;
            }

            public boolean hasCurrNum() {
                return ((this.bitField0_ & 0x20) == 32);
            }

            public int getCurrNum() {
                return this.currNum_;
            }

            public Builder setCurrNum(int value) {
                this.bitField0_ |= 0x20;
                this.currNum_ = value;
                onChanged();
                return this;
            }

            public Builder clearCurrNum() {
                this.bitField0_ &= 0xFFFFFFDF;
                this.currNum_ = 0;
                onChanged();
                return this;
            }

            public boolean hasNeedNum() {
                return ((this.bitField0_ & 0x40) == 64);
            }

            public int getNeedNum() {
                return this.needNum_;
            }

            public Builder setNeedNum(int value) {
                this.bitField0_ |= 0x40;
                this.needNum_ = value;
                onChanged();
                return this;
            }

            public Builder clearNeedNum() {
                this.bitField0_ &= 0xFFFFFFBF;
                this.needNum_ = 0;
                onChanged();
                return this;
            }
        }
    }

    public static final class ContinuousRechargeGetInfoRequest extends GeneratedMessage implements ContinuousRechargeGetInfoRequestOrBuilder {
        private static final ContinuousRechargeGetInfoRequest defaultInstance = new ContinuousRechargeGetInfoRequest(true);
        private final UnknownFieldSet unknownFields;

        private ContinuousRechargeGetInfoRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private ContinuousRechargeGetInfoRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static ContinuousRechargeGetInfoRequest getDefaultInstance() {
            return defaultInstance;
        }

        public ContinuousRechargeGetInfoRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private ContinuousRechargeGetInfoRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeGetInfoRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeGetInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ContinuousRechargeGetInfoRequest.class, Builder.class);
        }

        public static Parser<ContinuousRechargeGetInfoRequest> PARSER = (Parser<ContinuousRechargeGetInfoRequest>) new AbstractParser<ContinuousRechargeGetInfoRequest>() {
            public ActivityFavorHandler.ContinuousRechargeGetInfoRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.ContinuousRechargeGetInfoRequest(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<ContinuousRechargeGetInfoRequest> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static ContinuousRechargeGetInfoRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (ContinuousRechargeGetInfoRequest) PARSER.parseFrom(data);
        }

        public static ContinuousRechargeGetInfoRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (ContinuousRechargeGetInfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static ContinuousRechargeGetInfoRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (ContinuousRechargeGetInfoRequest) PARSER.parseFrom(data);
        }

        public static ContinuousRechargeGetInfoRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (ContinuousRechargeGetInfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static ContinuousRechargeGetInfoRequest parseFrom(InputStream input) throws IOException {
            return (ContinuousRechargeGetInfoRequest) PARSER.parseFrom(input);
        }

        public static ContinuousRechargeGetInfoRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ContinuousRechargeGetInfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static ContinuousRechargeGetInfoRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (ContinuousRechargeGetInfoRequest) PARSER.parseDelimitedFrom(input);
        }

        public static ContinuousRechargeGetInfoRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ContinuousRechargeGetInfoRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static ContinuousRechargeGetInfoRequest parseFrom(CodedInputStream input) throws IOException {
            return (ContinuousRechargeGetInfoRequest) PARSER.parseFrom(input);
        }

        public static ContinuousRechargeGetInfoRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ContinuousRechargeGetInfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ContinuousRechargeGetInfoRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.ContinuousRechargeGetInfoRequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeGetInfoRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeGetInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.ContinuousRechargeGetInfoRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.ContinuousRechargeGetInfoRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeGetInfoRequest_descriptor;
            }

            public ActivityFavorHandler.ContinuousRechargeGetInfoRequest getDefaultInstanceForType() {
                return ActivityFavorHandler.ContinuousRechargeGetInfoRequest.getDefaultInstance();
            }

            public ActivityFavorHandler.ContinuousRechargeGetInfoRequest build() {
                ActivityFavorHandler.ContinuousRechargeGetInfoRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.ContinuousRechargeGetInfoRequest buildPartial() {
                ActivityFavorHandler.ContinuousRechargeGetInfoRequest result = new ActivityFavorHandler.ContinuousRechargeGetInfoRequest(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.ContinuousRechargeGetInfoRequest)
                    return mergeFrom((ActivityFavorHandler.ContinuousRechargeGetInfoRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.ContinuousRechargeGetInfoRequest other) {
                if (other == ActivityFavorHandler.ContinuousRechargeGetInfoRequest.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.ContinuousRechargeGetInfoRequest parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.ContinuousRechargeGetInfoRequest) ActivityFavorHandler.ContinuousRechargeGetInfoRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.ContinuousRechargeGetInfoRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class ContinuousRechargeGetInfoResponse
            extends GeneratedMessage
            implements ContinuousRechargeGetInfoResponseOrBuilder {
        private static final ContinuousRechargeGetInfoResponse defaultInstance = new ContinuousRechargeGetInfoResponse(true);
        private final UnknownFieldSet unknownFields;

        private ContinuousRechargeGetInfoResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private ContinuousRechargeGetInfoResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static ContinuousRechargeGetInfoResponse getDefaultInstance() {
            return defaultInstance;
        }

        public ContinuousRechargeGetInfoResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private ContinuousRechargeGetInfoResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    ActivityFavorHandler.ContinuousRechargeInfo.Builder subBuilder;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                        case 26:
                            subBuilder = null;
                            if ((this.bitField0_ & 0x4) == 4) subBuilder = this.continuousRechargeInfo_.toBuilder();
                            this.continuousRechargeInfo_ = (ActivityFavorHandler.ContinuousRechargeInfo) input.readMessage(ActivityFavorHandler.ContinuousRechargeInfo.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(this.continuousRechargeInfo_);
                                this.continuousRechargeInfo_ = subBuilder.buildPartial();
                            }
                            this.bitField0_ |= 0x4;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeGetInfoResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeGetInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ContinuousRechargeGetInfoResponse.class, Builder.class);
        }

        public static Parser<ContinuousRechargeGetInfoResponse> PARSER = (Parser<ContinuousRechargeGetInfoResponse>) new AbstractParser<ContinuousRechargeGetInfoResponse>() {
            public ActivityFavorHandler.ContinuousRechargeGetInfoResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.ContinuousRechargeGetInfoResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int CONTINUOUSRECHARGEINFO_FIELD_NUMBER = 3;
        private ActivityFavorHandler.ContinuousRechargeInfo continuousRechargeInfo_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<ContinuousRechargeGetInfoResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasContinuousRechargeInfo() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public ActivityFavorHandler.ContinuousRechargeInfo getContinuousRechargeInfo() {
            return this.continuousRechargeInfo_;
        }

        public ActivityFavorHandler.ContinuousRechargeInfoOrBuilder getContinuousRechargeInfoOrBuilder() {
            return this.continuousRechargeInfo_;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
            this.continuousRechargeInfo_ = ActivityFavorHandler.ContinuousRechargeInfo.getDefaultInstance();
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (hasContinuousRechargeInfo() && !getContinuousRechargeInfo().isInitialized()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            if ((this.bitField0_ & 0x4) == 4) output.writeMessage(3, (MessageLite) this.continuousRechargeInfo_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeMessageSize(3, (MessageLite) this.continuousRechargeInfo_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static ContinuousRechargeGetInfoResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (ContinuousRechargeGetInfoResponse) PARSER.parseFrom(data);
        }

        public static ContinuousRechargeGetInfoResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (ContinuousRechargeGetInfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static ContinuousRechargeGetInfoResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (ContinuousRechargeGetInfoResponse) PARSER.parseFrom(data);
        }

        public static ContinuousRechargeGetInfoResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (ContinuousRechargeGetInfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static ContinuousRechargeGetInfoResponse parseFrom(InputStream input) throws IOException {
            return (ContinuousRechargeGetInfoResponse) PARSER.parseFrom(input);
        }

        public static ContinuousRechargeGetInfoResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ContinuousRechargeGetInfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static ContinuousRechargeGetInfoResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (ContinuousRechargeGetInfoResponse) PARSER.parseDelimitedFrom(input);
        }

        public static ContinuousRechargeGetInfoResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ContinuousRechargeGetInfoResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static ContinuousRechargeGetInfoResponse parseFrom(CodedInputStream input) throws IOException {
            return (ContinuousRechargeGetInfoResponse) PARSER.parseFrom(input);
        }

        public static ContinuousRechargeGetInfoResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ContinuousRechargeGetInfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ContinuousRechargeGetInfoResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.ContinuousRechargeGetInfoResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;
            private ActivityFavorHandler.ContinuousRechargeInfo continuousRechargeInfo_;
            private SingleFieldBuilder<ActivityFavorHandler.ContinuousRechargeInfo, ActivityFavorHandler.ContinuousRechargeInfo.Builder, ActivityFavorHandler.ContinuousRechargeInfoOrBuilder> continuousRechargeInfoBuilder_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeGetInfoResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeGetInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.ContinuousRechargeGetInfoResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                this.continuousRechargeInfo_ = ActivityFavorHandler.ContinuousRechargeInfo.getDefaultInstance();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                this.continuousRechargeInfo_ = ActivityFavorHandler.ContinuousRechargeInfo.getDefaultInstance();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.ContinuousRechargeGetInfoResponse.alwaysUseFieldBuilders)
                    getContinuousRechargeInfoFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                if (this.continuousRechargeInfoBuilder_ == null) {
                    this.continuousRechargeInfo_ = ActivityFavorHandler.ContinuousRechargeInfo.getDefaultInstance();
                } else {
                    this.continuousRechargeInfoBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeGetInfoResponse_descriptor;
            }

            public ActivityFavorHandler.ContinuousRechargeGetInfoResponse getDefaultInstanceForType() {
                return ActivityFavorHandler.ContinuousRechargeGetInfoResponse.getDefaultInstance();
            }

            public ActivityFavorHandler.ContinuousRechargeGetInfoResponse build() {
                ActivityFavorHandler.ContinuousRechargeGetInfoResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.ContinuousRechargeGetInfoResponse buildPartial() {
                ActivityFavorHandler.ContinuousRechargeGetInfoResponse result = new ActivityFavorHandler.ContinuousRechargeGetInfoResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;
                if (this.continuousRechargeInfoBuilder_ == null) {
                    result.continuousRechargeInfo_ = this.continuousRechargeInfo_;
                } else {
                    result.continuousRechargeInfo_ = (ActivityFavorHandler.ContinuousRechargeInfo) this.continuousRechargeInfoBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.ContinuousRechargeGetInfoResponse)
                    return mergeFrom((ActivityFavorHandler.ContinuousRechargeGetInfoResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.ContinuousRechargeGetInfoResponse other) {
                if (other == ActivityFavorHandler.ContinuousRechargeGetInfoResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (other.hasContinuousRechargeInfo()) mergeContinuousRechargeInfo(other.getContinuousRechargeInfo());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                if (hasContinuousRechargeInfo() && !getContinuousRechargeInfo().isInitialized()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.ContinuousRechargeGetInfoResponse parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.ContinuousRechargeGetInfoResponse) ActivityFavorHandler.ContinuousRechargeGetInfoResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.ContinuousRechargeGetInfoResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = ActivityFavorHandler.ContinuousRechargeGetInfoResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public boolean hasContinuousRechargeInfo() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public ActivityFavorHandler.ContinuousRechargeInfo getContinuousRechargeInfo() {
                if (this.continuousRechargeInfoBuilder_ == null) return this.continuousRechargeInfo_;
                return (ActivityFavorHandler.ContinuousRechargeInfo) this.continuousRechargeInfoBuilder_.getMessage();
            }

            public Builder setContinuousRechargeInfo(ActivityFavorHandler.ContinuousRechargeInfo value) {
                if (this.continuousRechargeInfoBuilder_ == null) {
                    if (value == null) throw new NullPointerException();
                    this.continuousRechargeInfo_ = value;
                    onChanged();
                } else {
                    this.continuousRechargeInfoBuilder_.setMessage(value);
                }
                this.bitField0_ |= 0x4;
                return this;
            }

            public Builder setContinuousRechargeInfo(ActivityFavorHandler.ContinuousRechargeInfo.Builder builderForValue) {
                if (this.continuousRechargeInfoBuilder_ == null) {
                    this.continuousRechargeInfo_ = builderForValue.build();
                    onChanged();
                } else {
                    this.continuousRechargeInfoBuilder_.setMessage(builderForValue.build());
                }
                this.bitField0_ |= 0x4;
                return this;
            }

            public Builder mergeContinuousRechargeInfo(ActivityFavorHandler.ContinuousRechargeInfo value) {
                if (this.continuousRechargeInfoBuilder_ == null) {
                    if ((this.bitField0_ & 0x4) == 4 && this.continuousRechargeInfo_ != ActivityFavorHandler.ContinuousRechargeInfo.getDefaultInstance()) {
                        this.continuousRechargeInfo_ = ActivityFavorHandler.ContinuousRechargeInfo.newBuilder(this.continuousRechargeInfo_).mergeFrom(value).buildPartial();
                    } else {
                        this.continuousRechargeInfo_ = value;
                    }
                    onChanged();
                } else {
                    this.continuousRechargeInfoBuilder_.mergeFrom(value);
                }
                this.bitField0_ |= 0x4;
                return this;
            }

            public Builder clearContinuousRechargeInfo() {
                if (this.continuousRechargeInfoBuilder_ == null) {
                    this.continuousRechargeInfo_ = ActivityFavorHandler.ContinuousRechargeInfo.getDefaultInstance();
                    onChanged();
                } else {
                    this.continuousRechargeInfoBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }

            public ActivityFavorHandler.ContinuousRechargeInfo.Builder getContinuousRechargeInfoBuilder() {
                this.bitField0_ |= 0x4;
                onChanged();
                return (ActivityFavorHandler.ContinuousRechargeInfo.Builder) getContinuousRechargeInfoFieldBuilder().getBuilder();
            }

            public ActivityFavorHandler.ContinuousRechargeInfoOrBuilder getContinuousRechargeInfoOrBuilder() {
                if (this.continuousRechargeInfoBuilder_ != null)
                    return (ActivityFavorHandler.ContinuousRechargeInfoOrBuilder) this.continuousRechargeInfoBuilder_.getMessageOrBuilder();
                return this.continuousRechargeInfo_;
            }

            private SingleFieldBuilder<ActivityFavorHandler.ContinuousRechargeInfo, ActivityFavorHandler.ContinuousRechargeInfo.Builder, ActivityFavorHandler.ContinuousRechargeInfoOrBuilder> getContinuousRechargeInfoFieldBuilder() {
                if (this.continuousRechargeInfoBuilder_ == null) {
                    this.continuousRechargeInfoBuilder_ = new SingleFieldBuilder(getContinuousRechargeInfo(), getParentForChildren(), isClean());
                    this.continuousRechargeInfo_ = null;
                }
                return this.continuousRechargeInfoBuilder_;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class ContinuousRechargeAwardRequest
            extends GeneratedMessage
            implements ContinuousRechargeAwardRequestOrBuilder {
        private static final ContinuousRechargeAwardRequest defaultInstance = new ContinuousRechargeAwardRequest(true);
        private final UnknownFieldSet unknownFields;

        private ContinuousRechargeAwardRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private ContinuousRechargeAwardRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static ContinuousRechargeAwardRequest getDefaultInstance() {
            return defaultInstance;
        }

        public ContinuousRechargeAwardRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private ContinuousRechargeAwardRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.day_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeAwardRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeAwardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ContinuousRechargeAwardRequest.class, Builder.class);
        }

        public static Parser<ContinuousRechargeAwardRequest> PARSER = (Parser<ContinuousRechargeAwardRequest>) new AbstractParser<ContinuousRechargeAwardRequest>() {
            public ActivityFavorHandler.ContinuousRechargeAwardRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.ContinuousRechargeAwardRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int DAY_FIELD_NUMBER = 1;
        private int day_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<ContinuousRechargeAwardRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasDay() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getDay() {
            return this.day_;
        }

        private void initFields() {
            this.day_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasDay()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.day_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.day_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static ContinuousRechargeAwardRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (ContinuousRechargeAwardRequest) PARSER.parseFrom(data);
        }

        public static ContinuousRechargeAwardRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (ContinuousRechargeAwardRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static ContinuousRechargeAwardRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (ContinuousRechargeAwardRequest) PARSER.parseFrom(data);
        }

        public static ContinuousRechargeAwardRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (ContinuousRechargeAwardRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static ContinuousRechargeAwardRequest parseFrom(InputStream input) throws IOException {
            return (ContinuousRechargeAwardRequest) PARSER.parseFrom(input);
        }

        public static ContinuousRechargeAwardRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ContinuousRechargeAwardRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static ContinuousRechargeAwardRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (ContinuousRechargeAwardRequest) PARSER.parseDelimitedFrom(input);
        }

        public static ContinuousRechargeAwardRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ContinuousRechargeAwardRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static ContinuousRechargeAwardRequest parseFrom(CodedInputStream input) throws IOException {
            return (ContinuousRechargeAwardRequest) PARSER.parseFrom(input);
        }

        public static ContinuousRechargeAwardRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ContinuousRechargeAwardRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ContinuousRechargeAwardRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.ContinuousRechargeAwardRequestOrBuilder {
            private int bitField0_;
            private int day_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeAwardRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeAwardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.ContinuousRechargeAwardRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.ContinuousRechargeAwardRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.day_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeAwardRequest_descriptor;
            }

            public ActivityFavorHandler.ContinuousRechargeAwardRequest getDefaultInstanceForType() {
                return ActivityFavorHandler.ContinuousRechargeAwardRequest.getDefaultInstance();
            }

            public ActivityFavorHandler.ContinuousRechargeAwardRequest build() {
                ActivityFavorHandler.ContinuousRechargeAwardRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.ContinuousRechargeAwardRequest buildPartial() {
                ActivityFavorHandler.ContinuousRechargeAwardRequest result = new ActivityFavorHandler.ContinuousRechargeAwardRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.day_ = this.day_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.ContinuousRechargeAwardRequest)
                    return mergeFrom((ActivityFavorHandler.ContinuousRechargeAwardRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.ContinuousRechargeAwardRequest other) {
                if (other == ActivityFavorHandler.ContinuousRechargeAwardRequest.getDefaultInstance()) return this;
                if (other.hasDay()) setDay(other.getDay());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasDay()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.ContinuousRechargeAwardRequest parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.ContinuousRechargeAwardRequest) ActivityFavorHandler.ContinuousRechargeAwardRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.ContinuousRechargeAwardRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasDay() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getDay() {
                return this.day_;
            }

            public Builder setDay(int value) {
                this.bitField0_ |= 0x1;
                this.day_ = value;
                onChanged();
                return this;
            }

            public Builder clearDay() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.day_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class ContinuousRechargeAwardResponse
            extends GeneratedMessage
            implements ContinuousRechargeAwardResponseOrBuilder {
        private static final ContinuousRechargeAwardResponse defaultInstance = new ContinuousRechargeAwardResponse(true);
        private final UnknownFieldSet unknownFields;

        private ContinuousRechargeAwardResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private ContinuousRechargeAwardResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static ContinuousRechargeAwardResponse getDefaultInstance() {
            return defaultInstance;
        }

        public ContinuousRechargeAwardResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private ContinuousRechargeAwardResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeAwardResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeAwardResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ContinuousRechargeAwardResponse.class, Builder.class);
        }

        public static Parser<ContinuousRechargeAwardResponse> PARSER = (Parser<ContinuousRechargeAwardResponse>) new AbstractParser<ContinuousRechargeAwardResponse>() {
            public ActivityFavorHandler.ContinuousRechargeAwardResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.ContinuousRechargeAwardResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<ContinuousRechargeAwardResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static ContinuousRechargeAwardResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (ContinuousRechargeAwardResponse) PARSER.parseFrom(data);
        }

        public static ContinuousRechargeAwardResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (ContinuousRechargeAwardResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static ContinuousRechargeAwardResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (ContinuousRechargeAwardResponse) PARSER.parseFrom(data);
        }

        public static ContinuousRechargeAwardResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (ContinuousRechargeAwardResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static ContinuousRechargeAwardResponse parseFrom(InputStream input) throws IOException {
            return (ContinuousRechargeAwardResponse) PARSER.parseFrom(input);
        }

        public static ContinuousRechargeAwardResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ContinuousRechargeAwardResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static ContinuousRechargeAwardResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (ContinuousRechargeAwardResponse) PARSER.parseDelimitedFrom(input);
        }

        public static ContinuousRechargeAwardResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ContinuousRechargeAwardResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static ContinuousRechargeAwardResponse parseFrom(CodedInputStream input) throws IOException {
            return (ContinuousRechargeAwardResponse) PARSER.parseFrom(input);
        }

        public static ContinuousRechargeAwardResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ContinuousRechargeAwardResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ContinuousRechargeAwardResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.ContinuousRechargeAwardResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeAwardResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeAwardResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.ContinuousRechargeAwardResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.ContinuousRechargeAwardResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_ContinuousRechargeAwardResponse_descriptor;
            }

            public ActivityFavorHandler.ContinuousRechargeAwardResponse getDefaultInstanceForType() {
                return ActivityFavorHandler.ContinuousRechargeAwardResponse.getDefaultInstance();
            }

            public ActivityFavorHandler.ContinuousRechargeAwardResponse build() {
                ActivityFavorHandler.ContinuousRechargeAwardResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.ContinuousRechargeAwardResponse buildPartial() {
                ActivityFavorHandler.ContinuousRechargeAwardResponse result = new ActivityFavorHandler.ContinuousRechargeAwardResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.ContinuousRechargeAwardResponse)
                    return mergeFrom((ActivityFavorHandler.ContinuousRechargeAwardResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.ContinuousRechargeAwardResponse other) {
                if (other == ActivityFavorHandler.ContinuousRechargeAwardResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.ContinuousRechargeAwardResponse parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.ContinuousRechargeAwardResponse) ActivityFavorHandler.ContinuousRechargeAwardResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.ContinuousRechargeAwardResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = ActivityFavorHandler.ContinuousRechargeAwardResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class SingleRechargeItem
            extends GeneratedMessage
            implements SingleRechargeItemOrBuilder {
        private static final SingleRechargeItem defaultInstance = new SingleRechargeItem(true);
        private final UnknownFieldSet unknownFields;

        private SingleRechargeItem(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SingleRechargeItem(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SingleRechargeItem getDefaultInstance() {
            return defaultInstance;
        }

        public SingleRechargeItem getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SingleRechargeItem(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.code_ = bs;
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.groupCount_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeItem_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeItem_fieldAccessorTable.ensureFieldAccessorsInitialized(SingleRechargeItem.class, Builder.class);
        }

        public static Parser<SingleRechargeItem> PARSER = (Parser<SingleRechargeItem>) new AbstractParser<SingleRechargeItem>() {
            public ActivityFavorHandler.SingleRechargeItem parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.SingleRechargeItem(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int CODE_FIELD_NUMBER = 1;
        private Object code_;
        public static final int GROUPCOUNT_FIELD_NUMBER = 2;
        private int groupCount_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SingleRechargeItem> getParserForType() {
            return PARSER;
        }

        public boolean hasCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getCode() {
            Object ref = this.code_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.code_ = s;
            return s;
        }

        public ByteString getCodeBytes() {
            Object ref = this.code_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.code_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasGroupCount() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getGroupCount() {
            return this.groupCount_;
        }

        private void initFields() {
            this.code_ = "";
            this.groupCount_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasGroupCount()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getCodeBytes());
            if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.groupCount_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getCodeBytes());
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.groupCount_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SingleRechargeItem parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SingleRechargeItem) PARSER.parseFrom(data);
        }

        public static SingleRechargeItem parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SingleRechargeItem) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SingleRechargeItem parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SingleRechargeItem) PARSER.parseFrom(data);
        }

        public static SingleRechargeItem parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SingleRechargeItem) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SingleRechargeItem parseFrom(InputStream input) throws IOException {
            return (SingleRechargeItem) PARSER.parseFrom(input);
        }

        public static SingleRechargeItem parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SingleRechargeItem) PARSER.parseFrom(input, extensionRegistry);
        }

        public static SingleRechargeItem parseDelimitedFrom(InputStream input) throws IOException {
            return (SingleRechargeItem) PARSER.parseDelimitedFrom(input);
        }

        public static SingleRechargeItem parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SingleRechargeItem) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static SingleRechargeItem parseFrom(CodedInputStream input) throws IOException {
            return (SingleRechargeItem) PARSER.parseFrom(input);
        }

        public static SingleRechargeItem parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SingleRechargeItem) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SingleRechargeItem prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.SingleRechargeItemOrBuilder {
            private int bitField0_;
            private Object code_;
            private int groupCount_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeItem_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeItem_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.SingleRechargeItem.class, Builder.class);
            }

            private Builder() {
                this.code_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.code_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.SingleRechargeItem.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.code_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                this.groupCount_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeItem_descriptor;
            }

            public ActivityFavorHandler.SingleRechargeItem getDefaultInstanceForType() {
                return ActivityFavorHandler.SingleRechargeItem.getDefaultInstance();
            }

            public ActivityFavorHandler.SingleRechargeItem build() {
                ActivityFavorHandler.SingleRechargeItem result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.SingleRechargeItem buildPartial() {
                ActivityFavorHandler.SingleRechargeItem result = new ActivityFavorHandler.SingleRechargeItem(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.code_ = this.code_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.groupCount_ = this.groupCount_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.SingleRechargeItem)
                    return mergeFrom((ActivityFavorHandler.SingleRechargeItem) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.SingleRechargeItem other) {
                if (other == ActivityFavorHandler.SingleRechargeItem.getDefaultInstance()) return this;
                if (other.hasCode()) {
                    this.bitField0_ |= 0x1;
                    this.code_ = other.code_;
                    onChanged();
                }
                if (other.hasGroupCount()) setGroupCount(other.getGroupCount());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasCode()) return false;
                if (!hasGroupCount()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.SingleRechargeItem parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.SingleRechargeItem) ActivityFavorHandler.SingleRechargeItem.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.SingleRechargeItem) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public String getCode() {
                Object ref = this.code_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.code_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getCodeBytes() {
                Object ref = this.code_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.code_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setCode(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.code_ = value;
                onChanged();
                return this;
            }

            public Builder clearCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.code_ = ActivityFavorHandler.SingleRechargeItem.getDefaultInstance().getCode();
                onChanged();
                return this;
            }

            public Builder setCodeBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.code_ = value;
                onChanged();
                return this;
            }

            public boolean hasGroupCount() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getGroupCount() {
                return this.groupCount_;
            }

            public Builder setGroupCount(int value) {
                this.bitField0_ |= 0x2;
                this.groupCount_ = value;
                onChanged();
                return this;
            }

            public Builder clearGroupCount() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.groupCount_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class SingleRechargeAwardInfo
            extends GeneratedMessage
            implements SingleRechargeAwardInfoOrBuilder {
        private static final SingleRechargeAwardInfo defaultInstance = new SingleRechargeAwardInfo(true);
        private final UnknownFieldSet unknownFields;

        private SingleRechargeAwardInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SingleRechargeAwardInfo(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SingleRechargeAwardInfo getDefaultInstance() {
            return defaultInstance;
        }

        public SingleRechargeAwardInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SingleRechargeAwardInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.id_ = input.readInt32();
                            break;
                        case 18:
                            if ((mutable_bitField0_ & 0x2) != 2) {
                                this.item_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x2;
                            }
                            this.item_.add(input.readMessage(ActivityFavorHandler.SingleRechargeItem.PARSER, extensionRegistry));
                            break;
                        case 24:
                            this.bitField0_ |= 0x2;
                            this.state_ = input.readInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 0x4;
                            this.currNum_ = input.readInt32();
                            break;
                        case 40:
                            this.bitField0_ |= 0x8;
                            this.needNum_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x2) == 2) this.item_ = Collections.unmodifiableList(this.item_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeAwardInfo_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeAwardInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(SingleRechargeAwardInfo.class, Builder.class);
        }

        public static Parser<SingleRechargeAwardInfo> PARSER = (Parser<SingleRechargeAwardInfo>) new AbstractParser<SingleRechargeAwardInfo>() {
            public ActivityFavorHandler.SingleRechargeAwardInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.SingleRechargeAwardInfo(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int ID_FIELD_NUMBER = 1;
        private int id_;
        public static final int ITEM_FIELD_NUMBER = 2;
        private List<ActivityFavorHandler.SingleRechargeItem> item_;
        public static final int STATE_FIELD_NUMBER = 3;
        private int state_;
        public static final int CURRNUM_FIELD_NUMBER = 4;
        private int currNum_;
        public static final int NEEDNUM_FIELD_NUMBER = 5;
        private int needNum_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SingleRechargeAwardInfo> getParserForType() {
            return PARSER;
        }

        public boolean hasId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getId() {
            return this.id_;
        }

        public List<ActivityFavorHandler.SingleRechargeItem> getItemList() {
            return this.item_;
        }

        public List<? extends ActivityFavorHandler.SingleRechargeItemOrBuilder> getItemOrBuilderList() {
            return (List) this.item_;
        }

        static {
            defaultInstance.initFields();
        }


        public int getItemCount() {
            return this.item_.size();
        }


        public ActivityFavorHandler.SingleRechargeItem getItem(int index) {
            return this.item_.get(index);
        }


        public ActivityFavorHandler.SingleRechargeItemOrBuilder getItemOrBuilder(int index) {
            return this.item_.get(index);
        }


        public boolean hasState() {
            return ((this.bitField0_ & 0x2) == 2);
        }


        public int getState() {
            return this.state_;
        }


        public boolean hasCurrNum() {
            return ((this.bitField0_ & 0x4) == 4);
        }


        public int getCurrNum() {
            return this.currNum_;
        }


        public boolean hasNeedNum() {
            return ((this.bitField0_ & 0x8) == 8);
        }


        public int getNeedNum() {
            return this.needNum_;
        }


        private void initFields() {
            this.id_ = 0;
            this.item_ = Collections.emptyList();
            this.state_ = 0;
            this.currNum_ = 0;
            this.needNum_ = 0;
        }


        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            if (!hasId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasState()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasCurrNum()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasNeedNum()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getItemCount(); i++) {
                if (!getItem(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }


        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeInt32(1, this.id_);
            }
            for (int i = 0; i < this.item_.size(); i++) {
                output.writeMessage(2, (MessageLite) this.item_.get(i));
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeInt32(3, this.state_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                output.writeInt32(4, this.currNum_);
            }
            if ((this.bitField0_ & 0x8) == 8) {
                output.writeInt32(5, this.needNum_);
            }
            getUnknownFields().writeTo(output);
        }


        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeInt32Size(1, this.id_);
            }
            for (int i = 0; i < this.item_.size(); i++) {
                size += CodedOutputStream.computeMessageSize(2, (MessageLite) this.item_.get(i));
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeInt32Size(3, this.state_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                size += CodedOutputStream.computeInt32Size(4, this.currNum_);
            }
            if ((this.bitField0_ & 0x8) == 8) {
                size += CodedOutputStream.computeInt32Size(5, this.needNum_);
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }


        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }


        public static SingleRechargeAwardInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SingleRechargeAwardInfo) PARSER.parseFrom(data);
        }


        public static SingleRechargeAwardInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SingleRechargeAwardInfo) PARSER.parseFrom(data, extensionRegistry);
        }


        public static SingleRechargeAwardInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SingleRechargeAwardInfo) PARSER.parseFrom(data);
        }


        public static SingleRechargeAwardInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SingleRechargeAwardInfo) PARSER.parseFrom(data, extensionRegistry);
        }


        public static SingleRechargeAwardInfo parseFrom(InputStream input) throws IOException {
            return (SingleRechargeAwardInfo) PARSER.parseFrom(input);
        }


        public static SingleRechargeAwardInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SingleRechargeAwardInfo) PARSER.parseFrom(input, extensionRegistry);
        }


        public static SingleRechargeAwardInfo parseDelimitedFrom(InputStream input) throws IOException {
            return (SingleRechargeAwardInfo) PARSER.parseDelimitedFrom(input);
        }


        public static SingleRechargeAwardInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SingleRechargeAwardInfo) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }


        public static SingleRechargeAwardInfo parseFrom(CodedInputStream input) throws IOException {
            return (SingleRechargeAwardInfo) PARSER.parseFrom(input);
        }


        public static SingleRechargeAwardInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SingleRechargeAwardInfo) PARSER.parseFrom(input, extensionRegistry);
        }


        public static Builder newBuilder() {
            return Builder.create();
        }


        public Builder newBuilderForType() {
            return newBuilder();
        }


        public static Builder newBuilder(SingleRechargeAwardInfo prototype) {
            return newBuilder().mergeFrom(prototype);
        }


        public Builder toBuilder() {
            return newBuilder(this);
        }


        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }


        public static final class Builder
                extends GeneratedMessage.Builder<Builder>
                implements ActivityFavorHandler.SingleRechargeAwardInfoOrBuilder {
            private int bitField0_;


            private int id_;


            private List<ActivityFavorHandler.SingleRechargeItem> item_;


            private RepeatedFieldBuilder<ActivityFavorHandler.SingleRechargeItem, ActivityFavorHandler.SingleRechargeItem.Builder, ActivityFavorHandler.SingleRechargeItemOrBuilder> itemBuilder_;


            private int state_;


            private int currNum_;


            private int needNum_;


            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeAwardInfo_descriptor;
            }


            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeAwardInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.SingleRechargeAwardInfo.class, Builder.class);
            }


            private Builder() {
                this.item_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }


            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.item_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }


            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.SingleRechargeAwardInfo.alwaysUseFieldBuilders) {
                    getItemFieldBuilder();
                }
            }


            private static Builder create() {
                return new Builder();
            }


            public Builder clear() {
                super.clear();
                this.id_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                if (this.itemBuilder_ == null) {
                    this.item_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFD;
                } else {
                    this.itemBuilder_.clear();
                }
                this.state_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                this.currNum_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                this.needNum_ = 0;
                this.bitField0_ &= 0xFFFFFFEF;
                return this;
            }


            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }


            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeAwardInfo_descriptor;
            }


            public ActivityFavorHandler.SingleRechargeAwardInfo getDefaultInstanceForType() {
                return ActivityFavorHandler.SingleRechargeAwardInfo.getDefaultInstance();
            }


            public ActivityFavorHandler.SingleRechargeAwardInfo build() {
                ActivityFavorHandler.SingleRechargeAwardInfo result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }


            public ActivityFavorHandler.SingleRechargeAwardInfo buildPartial() {
                ActivityFavorHandler.SingleRechargeAwardInfo result = new ActivityFavorHandler.SingleRechargeAwardInfo(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) {
                    to_bitField0_ |= 0x1;
                }
                result.id_ = this.id_;
                if (this.itemBuilder_ == null) {
                    if ((this.bitField0_ & 0x2) == 2) {
                        this.item_ = Collections.unmodifiableList(this.item_);
                        this.bitField0_ &= 0xFFFFFFFD;
                    }
                    result.item_ = this.item_;
                } else {
                    result.item_ = this.itemBuilder_.build();
                }
                if ((from_bitField0_ & 0x4) == 4) {
                    to_bitField0_ |= 0x2;
                }
                result.state_ = this.state_;
                if ((from_bitField0_ & 0x8) == 8) {
                    to_bitField0_ |= 0x4;
                }
                result.currNum_ = this.currNum_;
                if ((from_bitField0_ & 0x10) == 16) {
                    to_bitField0_ |= 0x8;
                }
                result.needNum_ = this.needNum_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }


            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.SingleRechargeAwardInfo) {
                    return mergeFrom((ActivityFavorHandler.SingleRechargeAwardInfo) other);
                }
                super.mergeFrom(other);
                return this;
            }


            public Builder mergeFrom(ActivityFavorHandler.SingleRechargeAwardInfo other) {
                if (other == ActivityFavorHandler.SingleRechargeAwardInfo.getDefaultInstance()) {
                    return this;
                }
                if (other.hasId()) {
                    setId(other.getId());
                }
                if (this.itemBuilder_ == null) {
                    if (!other.item_.isEmpty()) {
                        if (this.item_.isEmpty()) {
                            this.item_ = other.item_;
                            this.bitField0_ &= 0xFFFFFFFD;
                        } else {
                            ensureItemIsMutable();
                            this.item_.addAll(other.item_);
                        }
                        onChanged();
                    }
                } else if (!other.item_.isEmpty()) {
                    if (this.itemBuilder_.isEmpty()) {
                        this.itemBuilder_.dispose();
                        this.itemBuilder_ = null;
                        this.item_ = other.item_;
                        this.bitField0_ &= 0xFFFFFFFD;
                        this.itemBuilder_ = ActivityFavorHandler.SingleRechargeAwardInfo.alwaysUseFieldBuilders ? getItemFieldBuilder() : null;
                    } else {
                        this.itemBuilder_.addAllMessages(other.item_);
                    }
                }
                if (other.hasState()) {
                    setState(other.getState());
                }
                if (other.hasCurrNum()) {
                    setCurrNum(other.getCurrNum());
                }
                if (other.hasNeedNum()) {
                    setNeedNum(other.getNeedNum());
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }


            public final boolean isInitialized() {
                if (!hasId()) {
                    return false;
                }
                if (!hasState()) {
                    return false;
                }
                if (!hasCurrNum()) {
                    return false;
                }
                if (!hasNeedNum()) {
                    return false;
                }
                for (int i = 0; i < getItemCount(); i++) {
                    if (!getItem(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }


            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.SingleRechargeAwardInfo parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.SingleRechargeAwardInfo) ActivityFavorHandler.SingleRechargeAwardInfo.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.SingleRechargeAwardInfo) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }


            public boolean hasId() {
                return ((this.bitField0_ & 0x1) == 1);
            }


            public int getId() {
                return this.id_;
            }


            public Builder setId(int value) {
                this.bitField0_ |= 0x1;
                this.id_ = value;
                onChanged();
                return this;
            }


            public Builder clearId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.id_ = 0;
                onChanged();
                return this;
            }


            private void ensureItemIsMutable() {
                if ((this.bitField0_ & 0x2) != 2) {
                    this.item_ = new ArrayList<>(this.item_);
                    this.bitField0_ |= 0x2;
                }
            }


            public List<ActivityFavorHandler.SingleRechargeItem> getItemList() {
                if (this.itemBuilder_ == null) {
                    return Collections.unmodifiableList(this.item_);
                }
                return this.itemBuilder_.getMessageList();
            }


            public int getItemCount() {
                if (this.itemBuilder_ == null) {
                    return this.item_.size();
                }
                return this.itemBuilder_.getCount();
            }


            public ActivityFavorHandler.SingleRechargeItem getItem(int index) {
                if (this.itemBuilder_ == null) {
                    return this.item_.get(index);
                }
                return (ActivityFavorHandler.SingleRechargeItem) this.itemBuilder_.getMessage(index);
            }


            public Builder setItem(int index, ActivityFavorHandler.SingleRechargeItem value) {
                if (this.itemBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureItemIsMutable();
                    this.item_.set(index, value);
                    onChanged();
                } else {
                    this.itemBuilder_.setMessage(index, value);
                }
                return this;
            }


            public Builder setItem(int index, ActivityFavorHandler.SingleRechargeItem.Builder builderForValue) {
                if (this.itemBuilder_ == null) {
                    ensureItemIsMutable();
                    this.item_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.itemBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }


            public Builder addItem(ActivityFavorHandler.SingleRechargeItem value) {
                if (this.itemBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureItemIsMutable();
                    this.item_.add(value);
                    onChanged();
                } else {
                    this.itemBuilder_.addMessage(value);
                }
                return this;
            }


            public Builder addItem(int index, ActivityFavorHandler.SingleRechargeItem value) {
                if (this.itemBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureItemIsMutable();
                    this.item_.add(index, value);
                    onChanged();
                } else {
                    this.itemBuilder_.addMessage(index, value);
                }
                return this;
            }


            public Builder addItem(ActivityFavorHandler.SingleRechargeItem.Builder builderForValue) {
                if (this.itemBuilder_ == null) {
                    ensureItemIsMutable();
                    this.item_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.itemBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }


            public Builder addItem(int index, ActivityFavorHandler.SingleRechargeItem.Builder builderForValue) {
                if (this.itemBuilder_ == null) {
                    ensureItemIsMutable();
                    this.item_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.itemBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }


            public Builder addAllItem(Iterable<? extends ActivityFavorHandler.SingleRechargeItem> values) {
                if (this.itemBuilder_ == null) {
                    ensureItemIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.item_);
                    onChanged();
                } else {
                    this.itemBuilder_.addAllMessages(values);
                }
                return this;
            }


            public Builder clearItem() {
                if (this.itemBuilder_ == null) {
                    this.item_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFD;
                    onChanged();
                } else {
                    this.itemBuilder_.clear();
                }
                return this;
            }


            public Builder removeItem(int index) {
                if (this.itemBuilder_ == null) {
                    ensureItemIsMutable();
                    this.item_.remove(index);
                    onChanged();
                } else {
                    this.itemBuilder_.remove(index);
                }
                return this;
            }


            public ActivityFavorHandler.SingleRechargeItem.Builder getItemBuilder(int index) {
                return (ActivityFavorHandler.SingleRechargeItem.Builder) getItemFieldBuilder().getBuilder(index);
            }


            public ActivityFavorHandler.SingleRechargeItemOrBuilder getItemOrBuilder(int index) {
                if (this.itemBuilder_ == null) {
                    return this.item_.get(index);
                }
                return (ActivityFavorHandler.SingleRechargeItemOrBuilder) this.itemBuilder_.getMessageOrBuilder(index);
            }


            public List<? extends ActivityFavorHandler.SingleRechargeItemOrBuilder> getItemOrBuilderList() {
                if (this.itemBuilder_ != null) {
                    return this.itemBuilder_.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList((List) this.item_);
            }


            public ActivityFavorHandler.SingleRechargeItem.Builder addItemBuilder() {
                return (ActivityFavorHandler.SingleRechargeItem.Builder) getItemFieldBuilder().addBuilder(ActivityFavorHandler.SingleRechargeItem.getDefaultInstance());
            }


            public ActivityFavorHandler.SingleRechargeItem.Builder addItemBuilder(int index) {
                return (ActivityFavorHandler.SingleRechargeItem.Builder) getItemFieldBuilder().addBuilder(index, ActivityFavorHandler.SingleRechargeItem.getDefaultInstance());
            }


            public List<ActivityFavorHandler.SingleRechargeItem.Builder> getItemBuilderList() {
                return getItemFieldBuilder().getBuilderList();
            }


            private RepeatedFieldBuilder<ActivityFavorHandler.SingleRechargeItem, ActivityFavorHandler.SingleRechargeItem.Builder, ActivityFavorHandler.SingleRechargeItemOrBuilder> getItemFieldBuilder() {
                if (this.itemBuilder_ == null) {
                    this.itemBuilder_ = new RepeatedFieldBuilder(this.item_, ((this.bitField0_ & 0x2) == 2), getParentForChildren(), isClean());
                    this.item_ = null;
                }
                return this.itemBuilder_;
            }


            public boolean hasState() {
                return ((this.bitField0_ & 0x4) == 4);
            }


            public int getState() {
                return this.state_;
            }


            public Builder setState(int value) {
                this.bitField0_ |= 0x4;
                this.state_ = value;
                onChanged();
                return this;
            }


            public Builder clearState() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.state_ = 0;
                onChanged();
                return this;
            }


            public boolean hasCurrNum() {
                return ((this.bitField0_ & 0x8) == 8);
            }


            public int getCurrNum() {
                return this.currNum_;
            }


            public Builder setCurrNum(int value) {
                this.bitField0_ |= 0x8;
                this.currNum_ = value;
                onChanged();
                return this;
            }


            public Builder clearCurrNum() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.currNum_ = 0;
                onChanged();
                return this;
            }


            public boolean hasNeedNum() {
                return ((this.bitField0_ & 0x10) == 16);
            }


            public int getNeedNum() {
                return this.needNum_;
            }


            public Builder setNeedNum(int value) {
                this.bitField0_ |= 0x10;
                this.needNum_ = value;
                onChanged();
                return this;
            }


            public Builder clearNeedNum() {
                this.bitField0_ &= 0xFFFFFFEF;
                this.needNum_ = 0;
                onChanged();
                return this;
            }
        }
    }


    public static final class SingleRechargeInfo
            extends GeneratedMessage
            implements SingleRechargeInfoOrBuilder {
        private static final SingleRechargeInfo defaultInstance = new SingleRechargeInfo(true);
        private final UnknownFieldSet unknownFields;

        private SingleRechargeInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SingleRechargeInfo(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SingleRechargeInfo getDefaultInstance() {
            return defaultInstance;
        }

        public SingleRechargeInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SingleRechargeInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.beginTime_ = bs;
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.endTime_ = bs;
                            break;
                        case 26:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x4;
                            this.describe_ = bs;
                            break;
                        case 34:
                            if ((mutable_bitField0_ & 0x8) != 8) {
                                this.singleRechargeAwardInfo_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x8;
                            }
                            this.singleRechargeAwardInfo_.add(input.readMessage(ActivityFavorHandler.SingleRechargeAwardInfo.PARSER, extensionRegistry));
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x8) == 8)
                    this.singleRechargeAwardInfo_ = Collections.unmodifiableList(this.singleRechargeAwardInfo_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeInfo_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(SingleRechargeInfo.class, Builder.class);
        }

        public static Parser<SingleRechargeInfo> PARSER = (Parser<SingleRechargeInfo>) new AbstractParser<SingleRechargeInfo>() {
            public ActivityFavorHandler.SingleRechargeInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.SingleRechargeInfo(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int BEGINTIME_FIELD_NUMBER = 1;
        private Object beginTime_;
        public static final int ENDTIME_FIELD_NUMBER = 2;
        private Object endTime_;
        public static final int DESCRIBE_FIELD_NUMBER = 3;
        private Object describe_;
        public static final int SINGLERECHARGEAWARDINFO_FIELD_NUMBER = 4;
        private List<ActivityFavorHandler.SingleRechargeAwardInfo> singleRechargeAwardInfo_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SingleRechargeInfo> getParserForType() {
            return PARSER;
        }

        public boolean hasBeginTime() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getBeginTime() {
            Object ref = this.beginTime_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.beginTime_ = s;
            return s;
        }

        public ByteString getBeginTimeBytes() {
            Object ref = this.beginTime_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.beginTime_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasEndTime() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getEndTime() {
            Object ref = this.endTime_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.endTime_ = s;
            return s;
        }

        public ByteString getEndTimeBytes() {
            Object ref = this.endTime_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.endTime_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        static {
            defaultInstance.initFields();
        }

        public boolean hasDescribe() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public String getDescribe() {
            Object ref = this.describe_;
            if (ref instanceof String)
                return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8())
                this.describe_ = s;
            return s;
        }

        public ByteString getDescribeBytes() {
            Object ref = this.describe_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.describe_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public List<ActivityFavorHandler.SingleRechargeAwardInfo> getSingleRechargeAwardInfoList() {
            return this.singleRechargeAwardInfo_;
        }

        public List<? extends ActivityFavorHandler.SingleRechargeAwardInfoOrBuilder> getSingleRechargeAwardInfoOrBuilderList() {
            return (List) this.singleRechargeAwardInfo_;
        }

        public int getSingleRechargeAwardInfoCount() {
            return this.singleRechargeAwardInfo_.size();
        }

        public ActivityFavorHandler.SingleRechargeAwardInfo getSingleRechargeAwardInfo(int index) {
            return this.singleRechargeAwardInfo_.get(index);
        }

        public ActivityFavorHandler.SingleRechargeAwardInfoOrBuilder getSingleRechargeAwardInfoOrBuilder(int index) {
            return this.singleRechargeAwardInfo_.get(index);
        }

        private void initFields() {
            this.beginTime_ = "";
            this.endTime_ = "";
            this.describe_ = "";
            this.singleRechargeAwardInfo_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasBeginTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasEndTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getSingleRechargeAwardInfoCount(); i++) {
                if (!getSingleRechargeAwardInfo(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeBytes(1, getBeginTimeBytes());
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(2, getEndTimeBytes());
            if ((this.bitField0_ & 0x4) == 4)
                output.writeBytes(3, getDescribeBytes());
            for (int i = 0; i < this.singleRechargeAwardInfo_.size(); i++)
                output.writeMessage(4, (MessageLite) this.singleRechargeAwardInfo_.get(i));
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeBytesSize(1, getBeginTimeBytes());
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(2, getEndTimeBytes());
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeBytesSize(3, getDescribeBytes());
            for (int i = 0; i < this.singleRechargeAwardInfo_.size(); i++)
                size += CodedOutputStream.computeMessageSize(4, (MessageLite) this.singleRechargeAwardInfo_.get(i));
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SingleRechargeInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SingleRechargeInfo) PARSER.parseFrom(data);
        }

        public static SingleRechargeInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SingleRechargeInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SingleRechargeInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SingleRechargeInfo) PARSER.parseFrom(data);
        }

        public static SingleRechargeInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SingleRechargeInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SingleRechargeInfo parseFrom(InputStream input) throws IOException {
            return (SingleRechargeInfo) PARSER.parseFrom(input);
        }

        public static SingleRechargeInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SingleRechargeInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static SingleRechargeInfo parseDelimitedFrom(InputStream input) throws IOException {
            return (SingleRechargeInfo) PARSER.parseDelimitedFrom(input);
        }

        public static SingleRechargeInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SingleRechargeInfo) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static SingleRechargeInfo parseFrom(CodedInputStream input) throws IOException {
            return (SingleRechargeInfo) PARSER.parseFrom(input);
        }

        public static SingleRechargeInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SingleRechargeInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SingleRechargeInfo prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.SingleRechargeInfoOrBuilder {
            private int bitField0_;
            private Object beginTime_;
            private Object endTime_;
            private Object describe_;
            private List<ActivityFavorHandler.SingleRechargeAwardInfo> singleRechargeAwardInfo_;
            private RepeatedFieldBuilder<ActivityFavorHandler.SingleRechargeAwardInfo, ActivityFavorHandler.SingleRechargeAwardInfo.Builder, ActivityFavorHandler.SingleRechargeAwardInfoOrBuilder> singleRechargeAwardInfoBuilder_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeInfo_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.SingleRechargeInfo.class, Builder.class);
            }

            private Builder() {
                this.beginTime_ = "";
                this.endTime_ = "";
                this.describe_ = "";
                this.singleRechargeAwardInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.beginTime_ = "";
                this.endTime_ = "";
                this.describe_ = "";
                this.singleRechargeAwardInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.SingleRechargeInfo.alwaysUseFieldBuilders)
                    getSingleRechargeAwardInfoFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.beginTime_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                this.endTime_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                this.describe_ = "";
                this.bitField0_ &= 0xFFFFFFFB;
                if (this.singleRechargeAwardInfoBuilder_ == null) {
                    this.singleRechargeAwardInfo_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFF7;
                } else {
                    this.singleRechargeAwardInfoBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeInfo_descriptor;
            }

            public ActivityFavorHandler.SingleRechargeInfo getDefaultInstanceForType() {
                return ActivityFavorHandler.SingleRechargeInfo.getDefaultInstance();
            }

            public ActivityFavorHandler.SingleRechargeInfo build() {
                ActivityFavorHandler.SingleRechargeInfo result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.SingleRechargeInfo buildPartial() {
                ActivityFavorHandler.SingleRechargeInfo result = new ActivityFavorHandler.SingleRechargeInfo(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.beginTime_ = this.beginTime_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.endTime_ = this.endTime_;
                if ((from_bitField0_ & 0x4) == 4)
                    to_bitField0_ |= 0x4;
                result.describe_ = this.describe_;
                if (this.singleRechargeAwardInfoBuilder_ == null) {
                    if ((this.bitField0_ & 0x8) == 8) {
                        this.singleRechargeAwardInfo_ = Collections.unmodifiableList(this.singleRechargeAwardInfo_);
                        this.bitField0_ &= 0xFFFFFFF7;
                    }
                    result.singleRechargeAwardInfo_ = this.singleRechargeAwardInfo_;
                } else {
                    result.singleRechargeAwardInfo_ = this.singleRechargeAwardInfoBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.SingleRechargeInfo)
                    return mergeFrom((ActivityFavorHandler.SingleRechargeInfo) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.SingleRechargeInfo other) {
                if (other == ActivityFavorHandler.SingleRechargeInfo.getDefaultInstance())
                    return this;
                if (other.hasBeginTime()) {
                    this.bitField0_ |= 0x1;
                    this.beginTime_ = other.beginTime_;
                    onChanged();
                }
                if (other.hasEndTime()) {
                    this.bitField0_ |= 0x2;
                    this.endTime_ = other.endTime_;
                    onChanged();
                }
                if (other.hasDescribe()) {
                    this.bitField0_ |= 0x4;
                    this.describe_ = other.describe_;
                    onChanged();
                }
                if (this.singleRechargeAwardInfoBuilder_ == null) {
                    if (!other.singleRechargeAwardInfo_.isEmpty()) {
                        if (this.singleRechargeAwardInfo_.isEmpty()) {
                            this.singleRechargeAwardInfo_ = other.singleRechargeAwardInfo_;
                            this.bitField0_ &= 0xFFFFFFF7;
                        } else {
                            ensureSingleRechargeAwardInfoIsMutable();
                            this.singleRechargeAwardInfo_.addAll(other.singleRechargeAwardInfo_);
                        }
                        onChanged();
                    }
                } else if (!other.singleRechargeAwardInfo_.isEmpty()) {
                    if (this.singleRechargeAwardInfoBuilder_.isEmpty()) {
                        this.singleRechargeAwardInfoBuilder_.dispose();
                        this.singleRechargeAwardInfoBuilder_ = null;
                        this.singleRechargeAwardInfo_ = other.singleRechargeAwardInfo_;
                        this.bitField0_ &= 0xFFFFFFF7;
                        this.singleRechargeAwardInfoBuilder_ = ActivityFavorHandler.SingleRechargeInfo.alwaysUseFieldBuilders ? getSingleRechargeAwardInfoFieldBuilder() : null;
                    } else {
                        this.singleRechargeAwardInfoBuilder_.addAllMessages(other.singleRechargeAwardInfo_);
                    }
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasBeginTime())
                    return false;
                if (!hasEndTime())
                    return false;
                for (int i = 0; i < getSingleRechargeAwardInfoCount(); i++) {
                    if (!getSingleRechargeAwardInfo(i).isInitialized())
                        return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.SingleRechargeInfo parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.SingleRechargeInfo) ActivityFavorHandler.SingleRechargeInfo.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.SingleRechargeInfo) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasBeginTime() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public String getBeginTime() {
                Object ref = this.beginTime_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.beginTime_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getBeginTimeBytes() {
                Object ref = this.beginTime_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.beginTime_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setBeginTime(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.beginTime_ = value;
                onChanged();
                return this;
            }

            public Builder clearBeginTime() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.beginTime_ = ActivityFavorHandler.SingleRechargeInfo.getDefaultInstance().getBeginTime();
                onChanged();
                return this;
            }

            public Builder setBeginTimeBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.beginTime_ = value;
                onChanged();
                return this;
            }

            public boolean hasEndTime() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getEndTime() {
                Object ref = this.endTime_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.endTime_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getEndTimeBytes() {
                Object ref = this.endTime_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.endTime_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setEndTime(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.endTime_ = value;
                onChanged();
                return this;
            }

            public Builder clearEndTime() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.endTime_ = ActivityFavorHandler.SingleRechargeInfo.getDefaultInstance().getEndTime();
                onChanged();
                return this;
            }

            public Builder setEndTimeBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.endTime_ = value;
                onChanged();
                return this;
            }

            public boolean hasDescribe() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public String getDescribe() {
                Object ref = this.describe_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.describe_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getDescribeBytes() {
                Object ref = this.describe_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.describe_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setDescribe(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x4;
                this.describe_ = value;
                onChanged();
                return this;
            }

            public Builder clearDescribe() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.describe_ = ActivityFavorHandler.SingleRechargeInfo.getDefaultInstance().getDescribe();
                onChanged();
                return this;
            }

            public Builder setDescribeBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x4;
                this.describe_ = value;
                onChanged();
                return this;
            }

            private void ensureSingleRechargeAwardInfoIsMutable() {
                if ((this.bitField0_ & 0x8) != 8) {
                    this.singleRechargeAwardInfo_ = new ArrayList<>(this.singleRechargeAwardInfo_);
                    this.bitField0_ |= 0x8;
                }
            }

            public List<ActivityFavorHandler.SingleRechargeAwardInfo> getSingleRechargeAwardInfoList() {
                if (this.singleRechargeAwardInfoBuilder_ == null)
                    return Collections.unmodifiableList(this.singleRechargeAwardInfo_);
                return this.singleRechargeAwardInfoBuilder_.getMessageList();
            }

            public int getSingleRechargeAwardInfoCount() {
                if (this.singleRechargeAwardInfoBuilder_ == null)
                    return this.singleRechargeAwardInfo_.size();
                return this.singleRechargeAwardInfoBuilder_.getCount();
            }

            public ActivityFavorHandler.SingleRechargeAwardInfo getSingleRechargeAwardInfo(int index) {
                if (this.singleRechargeAwardInfoBuilder_ == null)
                    return this.singleRechargeAwardInfo_.get(index);
                return (ActivityFavorHandler.SingleRechargeAwardInfo) this.singleRechargeAwardInfoBuilder_.getMessage(index);
            }

            public Builder setSingleRechargeAwardInfo(int index, ActivityFavorHandler.SingleRechargeAwardInfo value) {
                if (this.singleRechargeAwardInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureSingleRechargeAwardInfoIsMutable();
                    this.singleRechargeAwardInfo_.set(index, value);
                    onChanged();
                } else {
                    this.singleRechargeAwardInfoBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setSingleRechargeAwardInfo(int index, ActivityFavorHandler.SingleRechargeAwardInfo.Builder builderForValue) {
                if (this.singleRechargeAwardInfoBuilder_ == null) {
                    ensureSingleRechargeAwardInfoIsMutable();
                    this.singleRechargeAwardInfo_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.singleRechargeAwardInfoBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addSingleRechargeAwardInfo(ActivityFavorHandler.SingleRechargeAwardInfo value) {
                if (this.singleRechargeAwardInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureSingleRechargeAwardInfoIsMutable();
                    this.singleRechargeAwardInfo_.add(value);
                    onChanged();
                } else {
                    this.singleRechargeAwardInfoBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addSingleRechargeAwardInfo(int index, ActivityFavorHandler.SingleRechargeAwardInfo value) {
                if (this.singleRechargeAwardInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureSingleRechargeAwardInfoIsMutable();
                    this.singleRechargeAwardInfo_.add(index, value);
                    onChanged();
                } else {
                    this.singleRechargeAwardInfoBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addSingleRechargeAwardInfo(ActivityFavorHandler.SingleRechargeAwardInfo.Builder builderForValue) {
                if (this.singleRechargeAwardInfoBuilder_ == null) {
                    ensureSingleRechargeAwardInfoIsMutable();
                    this.singleRechargeAwardInfo_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.singleRechargeAwardInfoBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addSingleRechargeAwardInfo(int index, ActivityFavorHandler.SingleRechargeAwardInfo.Builder builderForValue) {
                if (this.singleRechargeAwardInfoBuilder_ == null) {
                    ensureSingleRechargeAwardInfoIsMutable();
                    this.singleRechargeAwardInfo_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.singleRechargeAwardInfoBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllSingleRechargeAwardInfo(Iterable<? extends ActivityFavorHandler.SingleRechargeAwardInfo> values) {
                if (this.singleRechargeAwardInfoBuilder_ == null) {
                    ensureSingleRechargeAwardInfoIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.singleRechargeAwardInfo_);
                    onChanged();
                } else {
                    this.singleRechargeAwardInfoBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearSingleRechargeAwardInfo() {
                if (this.singleRechargeAwardInfoBuilder_ == null) {
                    this.singleRechargeAwardInfo_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFF7;
                    onChanged();
                } else {
                    this.singleRechargeAwardInfoBuilder_.clear();
                }
                return this;
            }

            public Builder removeSingleRechargeAwardInfo(int index) {
                if (this.singleRechargeAwardInfoBuilder_ == null) {
                    ensureSingleRechargeAwardInfoIsMutable();
                    this.singleRechargeAwardInfo_.remove(index);
                    onChanged();
                } else {
                    this.singleRechargeAwardInfoBuilder_.remove(index);
                }
                return this;
            }

            public ActivityFavorHandler.SingleRechargeAwardInfo.Builder getSingleRechargeAwardInfoBuilder(int index) {
                return (ActivityFavorHandler.SingleRechargeAwardInfo.Builder) getSingleRechargeAwardInfoFieldBuilder().getBuilder(index);
            }

            public ActivityFavorHandler.SingleRechargeAwardInfoOrBuilder getSingleRechargeAwardInfoOrBuilder(int index) {
                if (this.singleRechargeAwardInfoBuilder_ == null)
                    return this.singleRechargeAwardInfo_.get(index);
                return (ActivityFavorHandler.SingleRechargeAwardInfoOrBuilder) this.singleRechargeAwardInfoBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends ActivityFavorHandler.SingleRechargeAwardInfoOrBuilder> getSingleRechargeAwardInfoOrBuilderList() {
                if (this.singleRechargeAwardInfoBuilder_ != null)
                    return this.singleRechargeAwardInfoBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.singleRechargeAwardInfo_);
            }

            public ActivityFavorHandler.SingleRechargeAwardInfo.Builder addSingleRechargeAwardInfoBuilder() {
                return (ActivityFavorHandler.SingleRechargeAwardInfo.Builder) getSingleRechargeAwardInfoFieldBuilder().addBuilder(ActivityFavorHandler.SingleRechargeAwardInfo.getDefaultInstance());
            }

            public ActivityFavorHandler.SingleRechargeAwardInfo.Builder addSingleRechargeAwardInfoBuilder(int index) {
                return (ActivityFavorHandler.SingleRechargeAwardInfo.Builder) getSingleRechargeAwardInfoFieldBuilder().addBuilder(index, ActivityFavorHandler.SingleRechargeAwardInfo.getDefaultInstance());
            }

            public List<ActivityFavorHandler.SingleRechargeAwardInfo.Builder> getSingleRechargeAwardInfoBuilderList() {
                return getSingleRechargeAwardInfoFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<ActivityFavorHandler.SingleRechargeAwardInfo, ActivityFavorHandler.SingleRechargeAwardInfo.Builder, ActivityFavorHandler.SingleRechargeAwardInfoOrBuilder> getSingleRechargeAwardInfoFieldBuilder() {
                if (this.singleRechargeAwardInfoBuilder_ == null) {
                    this.singleRechargeAwardInfoBuilder_ = new RepeatedFieldBuilder(this.singleRechargeAwardInfo_, ((this.bitField0_ & 0x8) == 8), getParentForChildren(), isClean());
                    this.singleRechargeAwardInfo_ = null;
                }
                return this.singleRechargeAwardInfoBuilder_;
            }
        }
    }

    public static final class SingleRechargeGetInfoRequest extends GeneratedMessage implements SingleRechargeGetInfoRequestOrBuilder {
        private static final SingleRechargeGetInfoRequest defaultInstance = new SingleRechargeGetInfoRequest(true);
        private final UnknownFieldSet unknownFields;

        private SingleRechargeGetInfoRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SingleRechargeGetInfoRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SingleRechargeGetInfoRequest getDefaultInstance() {
            return defaultInstance;
        }

        public SingleRechargeGetInfoRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SingleRechargeGetInfoRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeGetInfoRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeGetInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(SingleRechargeGetInfoRequest.class, Builder.class);
        }

        public static Parser<SingleRechargeGetInfoRequest> PARSER = (Parser<SingleRechargeGetInfoRequest>) new AbstractParser<SingleRechargeGetInfoRequest>() {
            public ActivityFavorHandler.SingleRechargeGetInfoRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.SingleRechargeGetInfoRequest(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SingleRechargeGetInfoRequest> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SingleRechargeGetInfoRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SingleRechargeGetInfoRequest) PARSER.parseFrom(data);
        }

        public static SingleRechargeGetInfoRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SingleRechargeGetInfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SingleRechargeGetInfoRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SingleRechargeGetInfoRequest) PARSER.parseFrom(data);
        }

        public static SingleRechargeGetInfoRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SingleRechargeGetInfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SingleRechargeGetInfoRequest parseFrom(InputStream input) throws IOException {
            return (SingleRechargeGetInfoRequest) PARSER.parseFrom(input);
        }

        public static SingleRechargeGetInfoRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SingleRechargeGetInfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static SingleRechargeGetInfoRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (SingleRechargeGetInfoRequest) PARSER.parseDelimitedFrom(input);
        }

        public static SingleRechargeGetInfoRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SingleRechargeGetInfoRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static SingleRechargeGetInfoRequest parseFrom(CodedInputStream input) throws IOException {
            return (SingleRechargeGetInfoRequest) PARSER.parseFrom(input);
        }

        public static SingleRechargeGetInfoRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SingleRechargeGetInfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SingleRechargeGetInfoRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.SingleRechargeGetInfoRequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeGetInfoRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeGetInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.SingleRechargeGetInfoRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.SingleRechargeGetInfoRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeGetInfoRequest_descriptor;
            }

            public ActivityFavorHandler.SingleRechargeGetInfoRequest getDefaultInstanceForType() {
                return ActivityFavorHandler.SingleRechargeGetInfoRequest.getDefaultInstance();
            }

            public ActivityFavorHandler.SingleRechargeGetInfoRequest build() {
                ActivityFavorHandler.SingleRechargeGetInfoRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.SingleRechargeGetInfoRequest buildPartial() {
                ActivityFavorHandler.SingleRechargeGetInfoRequest result = new ActivityFavorHandler.SingleRechargeGetInfoRequest(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.SingleRechargeGetInfoRequest)
                    return mergeFrom((ActivityFavorHandler.SingleRechargeGetInfoRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.SingleRechargeGetInfoRequest other) {
                if (other == ActivityFavorHandler.SingleRechargeGetInfoRequest.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.SingleRechargeGetInfoRequest parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.SingleRechargeGetInfoRequest) ActivityFavorHandler.SingleRechargeGetInfoRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.SingleRechargeGetInfoRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class SingleRechargeGetInfoResponse
            extends GeneratedMessage
            implements SingleRechargeGetInfoResponseOrBuilder {
        private static final SingleRechargeGetInfoResponse defaultInstance = new SingleRechargeGetInfoResponse(true);
        private final UnknownFieldSet unknownFields;

        private SingleRechargeGetInfoResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SingleRechargeGetInfoResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SingleRechargeGetInfoResponse getDefaultInstance() {
            return defaultInstance;
        }

        public SingleRechargeGetInfoResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SingleRechargeGetInfoResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    ActivityFavorHandler.SingleRechargeInfo.Builder subBuilder;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                        case 26:
                            subBuilder = null;
                            if ((this.bitField0_ & 0x4) == 4) subBuilder = this.singleRechargeInfo_.toBuilder();
                            this.singleRechargeInfo_ = (ActivityFavorHandler.SingleRechargeInfo) input.readMessage(ActivityFavorHandler.SingleRechargeInfo.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(this.singleRechargeInfo_);
                                this.singleRechargeInfo_ = subBuilder.buildPartial();
                            }
                            this.bitField0_ |= 0x4;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeGetInfoResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeGetInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(SingleRechargeGetInfoResponse.class, Builder.class);
        }

        public static Parser<SingleRechargeGetInfoResponse> PARSER = (Parser<SingleRechargeGetInfoResponse>) new AbstractParser<SingleRechargeGetInfoResponse>() {
            public ActivityFavorHandler.SingleRechargeGetInfoResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.SingleRechargeGetInfoResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int SINGLERECHARGEINFO_FIELD_NUMBER = 3;
        private ActivityFavorHandler.SingleRechargeInfo singleRechargeInfo_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SingleRechargeGetInfoResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasSingleRechargeInfo() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public ActivityFavorHandler.SingleRechargeInfo getSingleRechargeInfo() {
            return this.singleRechargeInfo_;
        }

        public ActivityFavorHandler.SingleRechargeInfoOrBuilder getSingleRechargeInfoOrBuilder() {
            return this.singleRechargeInfo_;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
            this.singleRechargeInfo_ = ActivityFavorHandler.SingleRechargeInfo.getDefaultInstance();
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (hasSingleRechargeInfo() && !getSingleRechargeInfo().isInitialized()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            if ((this.bitField0_ & 0x4) == 4) output.writeMessage(3, (MessageLite) this.singleRechargeInfo_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeMessageSize(3, (MessageLite) this.singleRechargeInfo_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SingleRechargeGetInfoResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SingleRechargeGetInfoResponse) PARSER.parseFrom(data);
        }

        public static SingleRechargeGetInfoResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SingleRechargeGetInfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SingleRechargeGetInfoResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SingleRechargeGetInfoResponse) PARSER.parseFrom(data);
        }

        public static SingleRechargeGetInfoResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SingleRechargeGetInfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SingleRechargeGetInfoResponse parseFrom(InputStream input) throws IOException {
            return (SingleRechargeGetInfoResponse) PARSER.parseFrom(input);
        }

        public static SingleRechargeGetInfoResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SingleRechargeGetInfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static SingleRechargeGetInfoResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (SingleRechargeGetInfoResponse) PARSER.parseDelimitedFrom(input);
        }

        public static SingleRechargeGetInfoResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SingleRechargeGetInfoResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static SingleRechargeGetInfoResponse parseFrom(CodedInputStream input) throws IOException {
            return (SingleRechargeGetInfoResponse) PARSER.parseFrom(input);
        }

        public static SingleRechargeGetInfoResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SingleRechargeGetInfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SingleRechargeGetInfoResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.SingleRechargeGetInfoResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;
            private ActivityFavorHandler.SingleRechargeInfo singleRechargeInfo_;
            private SingleFieldBuilder<ActivityFavorHandler.SingleRechargeInfo, ActivityFavorHandler.SingleRechargeInfo.Builder, ActivityFavorHandler.SingleRechargeInfoOrBuilder> singleRechargeInfoBuilder_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeGetInfoResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeGetInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.SingleRechargeGetInfoResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                this.singleRechargeInfo_ = ActivityFavorHandler.SingleRechargeInfo.getDefaultInstance();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                this.singleRechargeInfo_ = ActivityFavorHandler.SingleRechargeInfo.getDefaultInstance();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.SingleRechargeGetInfoResponse.alwaysUseFieldBuilders)
                    getSingleRechargeInfoFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                if (this.singleRechargeInfoBuilder_ == null) {
                    this.singleRechargeInfo_ = ActivityFavorHandler.SingleRechargeInfo.getDefaultInstance();
                } else {
                    this.singleRechargeInfoBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeGetInfoResponse_descriptor;
            }

            public ActivityFavorHandler.SingleRechargeGetInfoResponse getDefaultInstanceForType() {
                return ActivityFavorHandler.SingleRechargeGetInfoResponse.getDefaultInstance();
            }

            public ActivityFavorHandler.SingleRechargeGetInfoResponse build() {
                ActivityFavorHandler.SingleRechargeGetInfoResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.SingleRechargeGetInfoResponse buildPartial() {
                ActivityFavorHandler.SingleRechargeGetInfoResponse result = new ActivityFavorHandler.SingleRechargeGetInfoResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;
                if (this.singleRechargeInfoBuilder_ == null) {
                    result.singleRechargeInfo_ = this.singleRechargeInfo_;
                } else {
                    result.singleRechargeInfo_ = (ActivityFavorHandler.SingleRechargeInfo) this.singleRechargeInfoBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.SingleRechargeGetInfoResponse)
                    return mergeFrom((ActivityFavorHandler.SingleRechargeGetInfoResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.SingleRechargeGetInfoResponse other) {
                if (other == ActivityFavorHandler.SingleRechargeGetInfoResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (other.hasSingleRechargeInfo()) mergeSingleRechargeInfo(other.getSingleRechargeInfo());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                if (hasSingleRechargeInfo() && !getSingleRechargeInfo().isInitialized()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.SingleRechargeGetInfoResponse parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.SingleRechargeGetInfoResponse) ActivityFavorHandler.SingleRechargeGetInfoResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.SingleRechargeGetInfoResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = ActivityFavorHandler.SingleRechargeGetInfoResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public boolean hasSingleRechargeInfo() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public ActivityFavorHandler.SingleRechargeInfo getSingleRechargeInfo() {
                if (this.singleRechargeInfoBuilder_ == null) return this.singleRechargeInfo_;
                return (ActivityFavorHandler.SingleRechargeInfo) this.singleRechargeInfoBuilder_.getMessage();
            }

            public Builder setSingleRechargeInfo(ActivityFavorHandler.SingleRechargeInfo value) {
                if (this.singleRechargeInfoBuilder_ == null) {
                    if (value == null) throw new NullPointerException();
                    this.singleRechargeInfo_ = value;
                    onChanged();
                } else {
                    this.singleRechargeInfoBuilder_.setMessage(value);
                }
                this.bitField0_ |= 0x4;
                return this;
            }

            public Builder setSingleRechargeInfo(ActivityFavorHandler.SingleRechargeInfo.Builder builderForValue) {
                if (this.singleRechargeInfoBuilder_ == null) {
                    this.singleRechargeInfo_ = builderForValue.build();
                    onChanged();
                } else {
                    this.singleRechargeInfoBuilder_.setMessage(builderForValue.build());
                }
                this.bitField0_ |= 0x4;
                return this;
            }

            public Builder mergeSingleRechargeInfo(ActivityFavorHandler.SingleRechargeInfo value) {
                if (this.singleRechargeInfoBuilder_ == null) {
                    if ((this.bitField0_ & 0x4) == 4 && this.singleRechargeInfo_ != ActivityFavorHandler.SingleRechargeInfo.getDefaultInstance()) {
                        this.singleRechargeInfo_ = ActivityFavorHandler.SingleRechargeInfo.newBuilder(this.singleRechargeInfo_).mergeFrom(value).buildPartial();
                    } else {
                        this.singleRechargeInfo_ = value;
                    }
                    onChanged();
                } else {
                    this.singleRechargeInfoBuilder_.mergeFrom(value);
                }
                this.bitField0_ |= 0x4;
                return this;
            }

            public Builder clearSingleRechargeInfo() {
                if (this.singleRechargeInfoBuilder_ == null) {
                    this.singleRechargeInfo_ = ActivityFavorHandler.SingleRechargeInfo.getDefaultInstance();
                    onChanged();
                } else {
                    this.singleRechargeInfoBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }

            public ActivityFavorHandler.SingleRechargeInfo.Builder getSingleRechargeInfoBuilder() {
                this.bitField0_ |= 0x4;
                onChanged();
                return (ActivityFavorHandler.SingleRechargeInfo.Builder) getSingleRechargeInfoFieldBuilder().getBuilder();
            }

            public ActivityFavorHandler.SingleRechargeInfoOrBuilder getSingleRechargeInfoOrBuilder() {
                if (this.singleRechargeInfoBuilder_ != null)
                    return (ActivityFavorHandler.SingleRechargeInfoOrBuilder) this.singleRechargeInfoBuilder_.getMessageOrBuilder();
                return this.singleRechargeInfo_;
            }

            private SingleFieldBuilder<ActivityFavorHandler.SingleRechargeInfo, ActivityFavorHandler.SingleRechargeInfo.Builder, ActivityFavorHandler.SingleRechargeInfoOrBuilder> getSingleRechargeInfoFieldBuilder() {
                if (this.singleRechargeInfoBuilder_ == null) {
                    this.singleRechargeInfoBuilder_ = new SingleFieldBuilder(getSingleRechargeInfo(), getParentForChildren(), isClean());
                    this.singleRechargeInfo_ = null;
                }
                return this.singleRechargeInfoBuilder_;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class SingleRechargeAwardRequest
            extends GeneratedMessage
            implements SingleRechargeAwardRequestOrBuilder {
        private static final SingleRechargeAwardRequest defaultInstance = new SingleRechargeAwardRequest(true);
        private final UnknownFieldSet unknownFields;

        private SingleRechargeAwardRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SingleRechargeAwardRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SingleRechargeAwardRequest getDefaultInstance() {
            return defaultInstance;
        }

        public SingleRechargeAwardRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SingleRechargeAwardRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.id_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeAwardRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeAwardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(SingleRechargeAwardRequest.class, Builder.class);
        }

        public static Parser<SingleRechargeAwardRequest> PARSER = (Parser<SingleRechargeAwardRequest>) new AbstractParser<SingleRechargeAwardRequest>() {
            public ActivityFavorHandler.SingleRechargeAwardRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.SingleRechargeAwardRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int ID_FIELD_NUMBER = 1;
        private int id_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SingleRechargeAwardRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getId() {
            return this.id_;
        }

        private void initFields() {
            this.id_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.id_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.id_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SingleRechargeAwardRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SingleRechargeAwardRequest) PARSER.parseFrom(data);
        }

        public static SingleRechargeAwardRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SingleRechargeAwardRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SingleRechargeAwardRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SingleRechargeAwardRequest) PARSER.parseFrom(data);
        }

        public static SingleRechargeAwardRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SingleRechargeAwardRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SingleRechargeAwardRequest parseFrom(InputStream input) throws IOException {
            return (SingleRechargeAwardRequest) PARSER.parseFrom(input);
        }

        public static SingleRechargeAwardRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SingleRechargeAwardRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static SingleRechargeAwardRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (SingleRechargeAwardRequest) PARSER.parseDelimitedFrom(input);
        }

        public static SingleRechargeAwardRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SingleRechargeAwardRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static SingleRechargeAwardRequest parseFrom(CodedInputStream input) throws IOException {
            return (SingleRechargeAwardRequest) PARSER.parseFrom(input);
        }

        public static SingleRechargeAwardRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SingleRechargeAwardRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SingleRechargeAwardRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.SingleRechargeAwardRequestOrBuilder {
            private int bitField0_;
            private int id_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeAwardRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeAwardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.SingleRechargeAwardRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.SingleRechargeAwardRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.id_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeAwardRequest_descriptor;
            }

            public ActivityFavorHandler.SingleRechargeAwardRequest getDefaultInstanceForType() {
                return ActivityFavorHandler.SingleRechargeAwardRequest.getDefaultInstance();
            }

            public ActivityFavorHandler.SingleRechargeAwardRequest build() {
                ActivityFavorHandler.SingleRechargeAwardRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.SingleRechargeAwardRequest buildPartial() {
                ActivityFavorHandler.SingleRechargeAwardRequest result = new ActivityFavorHandler.SingleRechargeAwardRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.id_ = this.id_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.SingleRechargeAwardRequest)
                    return mergeFrom((ActivityFavorHandler.SingleRechargeAwardRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.SingleRechargeAwardRequest other) {
                if (other == ActivityFavorHandler.SingleRechargeAwardRequest.getDefaultInstance()) return this;
                if (other.hasId()) setId(other.getId());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasId()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.SingleRechargeAwardRequest parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.SingleRechargeAwardRequest) ActivityFavorHandler.SingleRechargeAwardRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.SingleRechargeAwardRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getId() {
                return this.id_;
            }

            public Builder setId(int value) {
                this.bitField0_ |= 0x1;
                this.id_ = value;
                onChanged();
                return this;
            }

            public Builder clearId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.id_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class SingleRechargeAwardResponse
            extends GeneratedMessage
            implements SingleRechargeAwardResponseOrBuilder {
        private static final SingleRechargeAwardResponse defaultInstance = new SingleRechargeAwardResponse(true);
        private final UnknownFieldSet unknownFields;

        private SingleRechargeAwardResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SingleRechargeAwardResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SingleRechargeAwardResponse getDefaultInstance() {
            return defaultInstance;
        }

        public SingleRechargeAwardResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SingleRechargeAwardResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeAwardResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeAwardResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(SingleRechargeAwardResponse.class, Builder.class);
        }

        public static Parser<SingleRechargeAwardResponse> PARSER = (Parser<SingleRechargeAwardResponse>) new AbstractParser<SingleRechargeAwardResponse>() {
            public ActivityFavorHandler.SingleRechargeAwardResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new ActivityFavorHandler.SingleRechargeAwardResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SingleRechargeAwardResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SingleRechargeAwardResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SingleRechargeAwardResponse) PARSER.parseFrom(data);
        }

        public static SingleRechargeAwardResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SingleRechargeAwardResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SingleRechargeAwardResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SingleRechargeAwardResponse) PARSER.parseFrom(data);
        }

        public static SingleRechargeAwardResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SingleRechargeAwardResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SingleRechargeAwardResponse parseFrom(InputStream input) throws IOException {
            return (SingleRechargeAwardResponse) PARSER.parseFrom(input);
        }

        public static SingleRechargeAwardResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SingleRechargeAwardResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static SingleRechargeAwardResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (SingleRechargeAwardResponse) PARSER.parseDelimitedFrom(input);
        }

        public static SingleRechargeAwardResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SingleRechargeAwardResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static SingleRechargeAwardResponse parseFrom(CodedInputStream input) throws IOException {
            return (SingleRechargeAwardResponse) PARSER.parseFrom(input);
        }

        public static SingleRechargeAwardResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SingleRechargeAwardResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SingleRechargeAwardResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ActivityFavorHandler.SingleRechargeAwardResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeAwardResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeAwardResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ActivityFavorHandler.SingleRechargeAwardResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ActivityFavorHandler.SingleRechargeAwardResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ActivityFavorHandler.internal_static_pomelo_area_SingleRechargeAwardResponse_descriptor;
            }

            public ActivityFavorHandler.SingleRechargeAwardResponse getDefaultInstanceForType() {
                return ActivityFavorHandler.SingleRechargeAwardResponse.getDefaultInstance();
            }

            public ActivityFavorHandler.SingleRechargeAwardResponse build() {
                ActivityFavorHandler.SingleRechargeAwardResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public ActivityFavorHandler.SingleRechargeAwardResponse buildPartial() {
                ActivityFavorHandler.SingleRechargeAwardResponse result = new ActivityFavorHandler.SingleRechargeAwardResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ActivityFavorHandler.SingleRechargeAwardResponse)
                    return mergeFrom((ActivityFavorHandler.SingleRechargeAwardResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(ActivityFavorHandler.SingleRechargeAwardResponse other) {
                if (other == ActivityFavorHandler.SingleRechargeAwardResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                ActivityFavorHandler.SingleRechargeAwardResponse parsedMessage = null;
                try {
                    parsedMessage = (ActivityFavorHandler.SingleRechargeAwardResponse) ActivityFavorHandler.SingleRechargeAwardResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ActivityFavorHandler.SingleRechargeAwardResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = ActivityFavorHandler.SingleRechargeAwardResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static Descriptors.FileDescriptor getDescriptor() {
        return descriptor;
    }


    static {
        String[] descriptorData = {"\n\032activityFavorHandler.proto\022\013pomelo.area\032\fcommon.proto\032\025activityHandler.proto\"\035\n\033DailyRechargeGetInfoRequest\"\001\n\034DailyRechargeGetInfoResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022)\n\ttotalInfo\030\003 \001(\0132\026.pomelo.area.totalInfo\022\023\n\013rechargeNum\030\004 \001(\005\022\023\n\013rechargeMax\030\005 \001(\005\"/\n\034DailyRechargeGetAwardRequest\022\017\n\007awardId\030\001 \002(\005\"B\n\035DailyRechargeGetAwardResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"À\001\n\025SuperPackageAwar", "dInfo\022\021\n\tpackageId\030\001 \002(\005\022\023\n\013packageName\030\002 \002(\t\022\023\n\013packageCode\030\003 \002(\t\022\022\n\npackageNum\030\004 \002(\005\022\023\n\013packageIcon\030\005 \002(\t\022\025\n\rpackageScript\030\006 \002(\005\022\024\n\fpackagePrice\030\007 \002(\005\022\024\n\fpackageState\030\b \002(\005\"\001\n\020SuperPackageInfo\022\021\n\tbeginTime\030\001 \002(\t\022\017\n\007endTime\030\002 \002(\t\022\020\n\bdescribe\030\003 \002(\t\022A\n\025superPackageAwardInfo\030\004 \003(\0132\".pomelo.area.SuperPackageAwardInfo\"\034\n\032SuperPackageGetInfoRequest\"y\n\033SuperPackageGetInfoResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s", "2c_msg\030\002 \001(\t\0227\n\020superPackageInfo\030\003 \001(\0132\035.pomelo.area.SuperPackageInfo\"`\n\026SuperPackageBuyRequest\022\021\n\tpackageId\030\001 \002(\005\022\021\n\tchannelId\030\002 \002(\005\022\020\n\bc2s_imei\030\003 \001(\t\022\016\n\006c2s_os\030\004 \001(\005\"i\n\027SuperPackageBuyResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022\023\n\013s2c_orderId\030\003 \001(\t\022\026\n\016app_notify_url\030\004 \001(\t\"K\n\023SuperPackageBuyPush\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022\021\n\tpackageId\030\003 \002(\005\"t\n\030SevenDayPackageAwardInfo\022\021\n\tpackageId\030\001 \002(\005\022\020", "\n\bitemcode\030\002 \002(\t\022\021\n\titemcount\030\003 \002(\005\022\021\n\titemmodel\030\004 \001(\t\022\r\n\005state\030\005 \002(\005\"\001\n\023SevenDayPackageInfo\022\021\n\tbeginTime\030\001 \002(\t\022\017\n\007endTime\030\002 \002(\t\022\020\n\bdescribe\030\003 \002(\t\022G\n\030sevenDayPackageAwardInfo\030\004 \003(\0132%.pomelo.area.SevenDayPackageAwardInfo\"\037\n\035SevenDayPackageGetInfoRequest\"\001\n\036SevenDayPackageGetInfoResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022=\n\023sevenDayPackageInfo\030\003 \001(\0132 .pomelo.area.SevenDayPackageInfo\"0\n\033SevenDayPa", "ckageAwardRequest\022\021\n\tpackageId\030\001 \002(\005\"A\n\034SevenDayPackageAwardResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\";\n\022DailyDrawAwardInfo\022\n\n\002id\030\001 \002(\005\022\f\n\004code\030\002 \002(\t\022\013\n\003num\030\003 \002(\005\"\"\n\024DailyDrawInfoRequest\022\n\n\002id\030\001 \002(\005\"\002\n\025DailyDrawInfoResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022\025\n\rfreeCountLeft\030\003 \002(\005\022\037\n\027exploredTicketCountLeft\030\004 \002(\005\022/\n\006awards\030\005 \003(\0132\037.pomelo.area.DailyDrawAwardInfo\022\021\n\tbeginTime\030\006 \002(\t\022\017\n\007endTime\030\007 \002", "(\t\022\020\n\bdescribe\030\b \002(\t\022 \n\030freeCountUpdateTimeStamp\030\t \002(\003\022\022\n\nproportion\030\n \002(\005\"B\n\020DailyDrawRequest\022\020\n\btimeType\030\001 \002(\005\022\020\n\bcostType\030\002 \002(\005\022\n\n\002id\030\003 \002(\005\"\001\n\021DailyDrawResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022/\n\006awards\030\003 \003(\0132\037.pomelo.area.DailyDrawAwardInfo\022\025\n\rfreeCountLeft\030\004 \001(\005\022\037\n\027exploredTicketCountLeft\030\005 \001(\005\"*\n\rRecoveredItem\022\f\n\004code\030\001 \002(\t\022\013\n\003num\030\002 \002(\005\"¯\001\n\023RecoveredSourceInfo\022\n\n\002id\030\001 \002(\005\022\022\n\nsourceName\030\002", " \002(\t\022\017\n\007minDate\030\003 \002(\005\022\017\n\007maxDate\030\004 \002(\005\022\r\n\005state\030\005 \002(\005\0222\n\016recoveredItems\030\006 \003(\0132\032.pomelo.area.RecoveredItem\022\023\n\013needDiamond\030\007 \002(\005\"\001\n\rRecoveredInfo\022\021\n\tbeginTime\030\001 \002(\t\022\017\n\007endTime\030\002 \002(\t\022\020\n\bdescribe\030\003 \002(\t\022=\n\023recoveredSourceInfo\030\004 \003(\0132 .pomelo.area.RecoveredSourceInfo\"\026\n\024RecoveredInfoRequest\"m\n\025RecoveredInfoResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\0221\n\rrecoveredInfo\030\003 \001(\0132\032.pomelo.area.RecoveredInfo\",\n\020", "RecoveredRequest\022\n\n\002id\030\001 \002(\005\022\f\n\004type\030\002 \002(\005\"6\n\021RecoveredResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"5\n\021LimitTimeGiftInfo\022\n\n\002id\030\001 \002(\005\022\024\n\fsecondRemain\030\002 \002(\005\"u\n\025LimitTimeGiftInfoPush\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\0229\n\021limitTimeGiftInfo\030\003 \003(\0132\036.pomelo.area.LimitTimeGiftInfo\"\032\n\030LimitTimeGiftInfoRequest\"y\n\031LimitTimeGiftInfoResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\0229\n\021limitTimeGiftInfo\030\003 \003(\0132\036.pomelo", ".area.LimitTimeGiftInfo\"%\n\027LimitTimeGiftBuyRequest\022\n\n\002id\030\001 \002(\005\"=\n\030LimitTimeGiftBuyResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\":\n\026ContinuousRechargeItem\022\f\n\004code\030\001 \002(\t\022\022\n\ngroupCount\030\002 \002(\005\"{\n\033ContinuousRechargeAwardInfo\022\013\n\003day\030\001 \002(\005\0221\n\004item\030\002 \003(\0132#.pomelo.area.ContinuousRechargeItem\022\r\n\005state\030\003 \002(\005\022\r\n\005money\030\004 \002(\005\"Ì\001\n\026ContinuousRechargeInfo\022\021\n\tbeginTime\030\001 \002(\t\022\017\n\007endTime\030\002 \002(\t\022\020\n\bdescribe\030\003 \001(\t\022M\n\033conti", "nuousRechargeAwardInfo\030\004 \003(\0132(.pomelo.area.ContinuousRechargeAwardInfo\022\013\n\003day\030\005 \002(\005\022\017\n\007currNum\030\006 \001(\005\022\017\n\007needNum\030\007 \001(\005\"\"\n ContinuousRechargeGetInfoRequest\"\001\n!ContinuousRechargeGetInfoResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022C\n\026continuousRechargeInfo\030\003 \001(\0132#.pomelo.area.ContinuousRechargeInfo\"-\n\036ContinuousRechargeAwardRequest\022\013\n\003day\030\001 \002(\005\"D\n\037ContinuousRechargeAwardResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s", "2c_msg\030\002 \001(\t\"6\n\022SingleRechargeItem\022\f\n\004code\030\001 \002(\t\022\022\n\ngroupCount\030\002 \002(\005\"\001\n\027SingleRechargeAwardInfo\022\n\n\002id\030\001 \002(\005\022-\n\004item\030\002 \003(\0132\037.pomelo.area.SingleRechargeItem\022\r\n\005state\030\003 \002(\005\022\017\n\007currNum\030\004 \002(\005\022\017\n\007needNum\030\005 \002(\005\"\001\n\022SingleRechargeInfo\022\021\n\tbeginTime\030\001 \002(\t\022\017\n\007endTime\030\002 \002(\t\022\020\n\bdescribe\030\003 \001(\t\022E\n\027singleRechargeAwardInfo\030\004 \003(\0132$.pomelo.area.SingleRechargeAwardInfo\"\036\n\034SingleRechargeGetInfoRequest\"\n\035SingleRechar", "geGetInfoResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022;\n\022singleRechargeInfo\030\003 \001(\0132\037.pomelo.area.SingleRechargeInfo\"(\n\032SingleRechargeAwardRequest\022\n\n\002id\030\001 \002(\005\"@\n\033SingleRechargeAwardResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t2å\r\n\024activityFavorHandler\022r\n\033dailyRechargeGetInfoRequest\022(.pomelo.area.DailyRechargeGetInfoRequest\032).pomelo.area.DailyRechargeGetInfoResponse\022u\n\034dailyRechargeGetAwardRequest\022).pom", "elo.area.DailyRechargeGetAwardRequest\032*.pomelo.area.DailyRechargeGetAwardResponse\022o\n\032superPackageGetInfoRequest\022'.pomelo.area.SuperPackageGetInfoRequest\032(.pomelo.area.SuperPackageGetInfoResponse\022c\n\026superPackageBuyRequest\022#.pomelo.area.SuperPackageBuyRequest\032$.pomelo.area.SuperPackageBuyResponse\022x\n\035sevenDayPackageGetInfoRequest\022*.pomelo.area.SevenDayPackageGetInfoRequest\032+.pomelo.area.SevenDayPacka", "geGetInfoResponse\022r\n\033sevenDayPackageAwardRequest\022(.pomelo.area.SevenDayPackageAwardRequest\032).pomelo.area.SevenDayPackageAwardResponse\022]\n\024dailyDrawInfoRequest\022!.pomelo.area.DailyDrawInfoRequest\032\".pomelo.area.DailyDrawInfoResponse\022Q\n\020dailyDrawRequest\022\035.pomelo.area.DailyDrawRequest\032\036.pomelo.area.DailyDrawResponse\022]\n\024recoveredInfoRequest\022!.pomelo.area.RecoveredInfoRequest\032\".pomelo.area.RecoveredInfoRe", "sponse\022Q\n\020recoveredRequest\022\035.pomelo.area.RecoveredRequest\032\036.pomelo.area.RecoveredResponse\022i\n\030limitTimeGiftInfoRequest\022%.pomelo.area.LimitTimeGiftInfoRequest\032&.pomelo.area.LimitTimeGiftInfoResponse\022f\n\027limitTimeGiftBuyRequest\022$.pomelo.area.LimitTimeGiftBuyRequest\032%.pomelo.area.LimitTimeGiftBuyResponse\022\001\n continuousRechargeGetInfoRequest\022-.pomelo.area.ContinuousRechargeGetInfoRequest\032..pomelo.area.C", "ontinuousRechargeGetInfoResponse\022{\n\036continuousRechargeAwardRequest\022+.pomelo.area.ContinuousRechargeAwardRequest\032,.pomelo.area.ContinuousRechargeAwardResponse\022u\n\034singleRechargeGetInfoRequest\022).pomelo.area.SingleRechargeGetInfoRequest\032*.pomelo.area.SingleRechargeGetInfoResponse\022o\n\032singleRechargeAwardRequest\022'.pomelo.area.SingleRechargeAwardRequest\032(.pomelo.area.SingleRechargeAwardResponse2¥\001\n\021activi", "tyFavorPush\022E\n\023superPackageBuyPush\022 .pomelo.area.SuperPackageBuyPush\032\f.pomelo.Void\022I\n\025limitTimeGiftInfoPush\022\".pomelo.area.LimitTimeGiftInfoPush\032\f.pomelo.Void"};


        Descriptors.FileDescriptor.InternalDescriptorAssigner assigner = new Descriptors.FileDescriptor.InternalDescriptorAssigner() {
            public ExtensionRegistry assignDescriptors(Descriptors.FileDescriptor root) {
                ActivityFavorHandler.descriptor = root;
                return null;
            }
        };

        Descriptors.FileDescriptor.internalBuildGeneratedFileFrom(descriptorData, new Descriptors.FileDescriptor[]{

                Common.getDescriptor(),
                ActivityHandler.getDescriptor()}, assigner);
    }

    private static final Descriptors.Descriptor internal_static_pomelo_area_DailyRechargeGetInfoRequest_descriptor = getDescriptor().getMessageTypes().get(0);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DailyRechargeGetInfoRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DailyRechargeGetInfoRequest_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_DailyRechargeGetInfoResponse_descriptor = getDescriptor().getMessageTypes().get(1);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DailyRechargeGetInfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DailyRechargeGetInfoResponse_descriptor, new String[]{"S2CCode", "S2CMsg", "TotalInfo", "RechargeNum", "RechargeMax"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_DailyRechargeGetAwardRequest_descriptor = getDescriptor().getMessageTypes().get(2);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DailyRechargeGetAwardRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DailyRechargeGetAwardRequest_descriptor, new String[]{"AwardId"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_DailyRechargeGetAwardResponse_descriptor = getDescriptor().getMessageTypes().get(3);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DailyRechargeGetAwardResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DailyRechargeGetAwardResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SuperPackageAwardInfo_descriptor = getDescriptor().getMessageTypes().get(4);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SuperPackageAwardInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SuperPackageAwardInfo_descriptor, new String[]{"PackageId", "PackageName", "PackageCode", "PackageNum", "PackageIcon", "PackageScript", "PackagePrice", "PackageState"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SuperPackageInfo_descriptor = getDescriptor().getMessageTypes().get(5);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SuperPackageInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SuperPackageInfo_descriptor, new String[]{"BeginTime", "EndTime", "Describe", "SuperPackageAwardInfo"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SuperPackageGetInfoRequest_descriptor = getDescriptor().getMessageTypes().get(6);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SuperPackageGetInfoRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SuperPackageGetInfoRequest_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_SuperPackageGetInfoResponse_descriptor = getDescriptor().getMessageTypes().get(7);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SuperPackageGetInfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SuperPackageGetInfoResponse_descriptor, new String[]{"S2CCode", "S2CMsg", "SuperPackageInfo"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SuperPackageBuyRequest_descriptor = getDescriptor().getMessageTypes().get(8);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SuperPackageBuyRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SuperPackageBuyRequest_descriptor, new String[]{"PackageId", "ChannelId", "C2SImei", "C2SOs"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SuperPackageBuyResponse_descriptor = getDescriptor().getMessageTypes().get(9);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SuperPackageBuyResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SuperPackageBuyResponse_descriptor, new String[]{"S2CCode", "S2CMsg", "S2COrderId", "AppNotifyUrl"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SuperPackageBuyPush_descriptor = getDescriptor().getMessageTypes().get(10);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SuperPackageBuyPush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SuperPackageBuyPush_descriptor, new String[]{"S2CCode", "S2CMsg", "PackageId"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SevenDayPackageAwardInfo_descriptor = getDescriptor().getMessageTypes().get(11);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SevenDayPackageAwardInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SevenDayPackageAwardInfo_descriptor, new String[]{"PackageId", "Itemcode", "Itemcount", "Itemmodel", "State"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SevenDayPackageInfo_descriptor = getDescriptor().getMessageTypes().get(12);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SevenDayPackageInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SevenDayPackageInfo_descriptor, new String[]{"BeginTime", "EndTime", "Describe", "SevenDayPackageAwardInfo"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SevenDayPackageGetInfoRequest_descriptor = getDescriptor().getMessageTypes().get(13);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SevenDayPackageGetInfoRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SevenDayPackageGetInfoRequest_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_SevenDayPackageGetInfoResponse_descriptor = getDescriptor().getMessageTypes().get(14);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SevenDayPackageGetInfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SevenDayPackageGetInfoResponse_descriptor, new String[]{"S2CCode", "S2CMsg", "SevenDayPackageInfo"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SevenDayPackageAwardRequest_descriptor = getDescriptor().getMessageTypes().get(15);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SevenDayPackageAwardRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SevenDayPackageAwardRequest_descriptor, new String[]{"PackageId"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SevenDayPackageAwardResponse_descriptor = getDescriptor().getMessageTypes().get(16);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SevenDayPackageAwardResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SevenDayPackageAwardResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_DailyDrawAwardInfo_descriptor = getDescriptor().getMessageTypes().get(17);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DailyDrawAwardInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DailyDrawAwardInfo_descriptor, new String[]{"Id", "Code", "Num"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_DailyDrawInfoRequest_descriptor = getDescriptor().getMessageTypes().get(18);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DailyDrawInfoRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DailyDrawInfoRequest_descriptor, new String[]{"Id"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_DailyDrawInfoResponse_descriptor = getDescriptor().getMessageTypes().get(19);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DailyDrawInfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DailyDrawInfoResponse_descriptor, new String[]{"S2CCode", "S2CMsg", "FreeCountLeft", "ExploredTicketCountLeft", "Awards", "BeginTime", "EndTime", "Describe", "FreeCountUpdateTimeStamp", "Proportion"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_DailyDrawRequest_descriptor = getDescriptor().getMessageTypes().get(20);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DailyDrawRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DailyDrawRequest_descriptor, new String[]{"TimeType", "CostType", "Id"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_DailyDrawResponse_descriptor = getDescriptor().getMessageTypes().get(21);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_DailyDrawResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_DailyDrawResponse_descriptor, new String[]{"S2CCode", "S2CMsg", "Awards", "FreeCountLeft", "ExploredTicketCountLeft"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_RecoveredItem_descriptor = getDescriptor().getMessageTypes().get(22);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_RecoveredItem_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_RecoveredItem_descriptor, new String[]{"Code", "Num"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_RecoveredSourceInfo_descriptor = getDescriptor().getMessageTypes().get(23);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_RecoveredSourceInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_RecoveredSourceInfo_descriptor, new String[]{"Id", "SourceName", "MinDate", "MaxDate", "State", "RecoveredItems", "NeedDiamond"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_RecoveredInfo_descriptor = getDescriptor().getMessageTypes().get(24);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_RecoveredInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_RecoveredInfo_descriptor, new String[]{"BeginTime", "EndTime", "Describe", "RecoveredSourceInfo"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_RecoveredInfoRequest_descriptor = getDescriptor().getMessageTypes().get(25);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_RecoveredInfoRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_RecoveredInfoRequest_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_RecoveredInfoResponse_descriptor = getDescriptor().getMessageTypes().get(26);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_RecoveredInfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_RecoveredInfoResponse_descriptor, new String[]{"S2CCode", "S2CMsg", "RecoveredInfo"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_RecoveredRequest_descriptor = getDescriptor().getMessageTypes().get(27);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_RecoveredRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_RecoveredRequest_descriptor, new String[]{"Id", "Type"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_RecoveredResponse_descriptor = getDescriptor().getMessageTypes().get(28);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_RecoveredResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_RecoveredResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_LimitTimeGiftInfo_descriptor = getDescriptor().getMessageTypes().get(29);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_LimitTimeGiftInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_LimitTimeGiftInfo_descriptor, new String[]{"Id", "SecondRemain"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_LimitTimeGiftInfoPush_descriptor = getDescriptor().getMessageTypes().get(30);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_LimitTimeGiftInfoPush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_LimitTimeGiftInfoPush_descriptor, new String[]{"S2CCode", "S2CMsg", "LimitTimeGiftInfo"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_LimitTimeGiftInfoRequest_descriptor = getDescriptor().getMessageTypes().get(31);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_LimitTimeGiftInfoRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_LimitTimeGiftInfoRequest_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_LimitTimeGiftInfoResponse_descriptor = getDescriptor().getMessageTypes().get(32);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_LimitTimeGiftInfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_LimitTimeGiftInfoResponse_descriptor, new String[]{"S2CCode", "S2CMsg", "LimitTimeGiftInfo"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_LimitTimeGiftBuyRequest_descriptor = getDescriptor().getMessageTypes().get(33);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_LimitTimeGiftBuyRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_LimitTimeGiftBuyRequest_descriptor, new String[]{"Id"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_LimitTimeGiftBuyResponse_descriptor = getDescriptor().getMessageTypes().get(34);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_LimitTimeGiftBuyResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_LimitTimeGiftBuyResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_ContinuousRechargeItem_descriptor = getDescriptor().getMessageTypes().get(35);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ContinuousRechargeItem_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ContinuousRechargeItem_descriptor, new String[]{"Code", "GroupCount"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_ContinuousRechargeAwardInfo_descriptor = getDescriptor().getMessageTypes().get(36);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ContinuousRechargeAwardInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ContinuousRechargeAwardInfo_descriptor, new String[]{"Day", "Item", "State", "Money"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_ContinuousRechargeInfo_descriptor = getDescriptor().getMessageTypes().get(37);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ContinuousRechargeInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ContinuousRechargeInfo_descriptor, new String[]{"BeginTime", "EndTime", "Describe", "ContinuousRechargeAwardInfo", "Day", "CurrNum", "NeedNum"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_ContinuousRechargeGetInfoRequest_descriptor = getDescriptor().getMessageTypes().get(38);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ContinuousRechargeGetInfoRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ContinuousRechargeGetInfoRequest_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_ContinuousRechargeGetInfoResponse_descriptor = getDescriptor().getMessageTypes().get(39);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ContinuousRechargeGetInfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ContinuousRechargeGetInfoResponse_descriptor, new String[]{"S2CCode", "S2CMsg", "ContinuousRechargeInfo"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_ContinuousRechargeAwardRequest_descriptor = getDescriptor().getMessageTypes().get(40);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ContinuousRechargeAwardRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ContinuousRechargeAwardRequest_descriptor, new String[]{"Day"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_ContinuousRechargeAwardResponse_descriptor = getDescriptor().getMessageTypes().get(41);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ContinuousRechargeAwardResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ContinuousRechargeAwardResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SingleRechargeItem_descriptor = getDescriptor().getMessageTypes().get(42);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SingleRechargeItem_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SingleRechargeItem_descriptor, new String[]{"Code", "GroupCount"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SingleRechargeAwardInfo_descriptor = getDescriptor().getMessageTypes().get(43);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SingleRechargeAwardInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SingleRechargeAwardInfo_descriptor, new String[]{"Id", "Item", "State", "CurrNum", "NeedNum"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SingleRechargeInfo_descriptor = getDescriptor().getMessageTypes().get(44);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SingleRechargeInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SingleRechargeInfo_descriptor, new String[]{"BeginTime", "EndTime", "Describe", "SingleRechargeAwardInfo"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SingleRechargeGetInfoRequest_descriptor = getDescriptor().getMessageTypes().get(45);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SingleRechargeGetInfoRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SingleRechargeGetInfoRequest_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_SingleRechargeGetInfoResponse_descriptor = getDescriptor().getMessageTypes().get(46);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SingleRechargeGetInfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SingleRechargeGetInfoResponse_descriptor, new String[]{"S2CCode", "S2CMsg", "SingleRechargeInfo"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SingleRechargeAwardRequest_descriptor = getDescriptor().getMessageTypes().get(47);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SingleRechargeAwardRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SingleRechargeAwardRequest_descriptor, new String[]{"Id"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SingleRechargeAwardResponse_descriptor = getDescriptor().getMessageTypes().get(48);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SingleRechargeAwardResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SingleRechargeAwardResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});
    private static Descriptors.FileDescriptor descriptor;

    static {
        Common.getDescriptor();
        ActivityHandler.getDescriptor();
    }

    public static interface SingleRechargeAwardResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface SingleRechargeAwardRequestOrBuilder extends MessageOrBuilder {
        boolean hasId();

        int getId();
    }

    public static interface SingleRechargeGetInfoResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        boolean hasSingleRechargeInfo();

        ActivityFavorHandler.SingleRechargeInfo getSingleRechargeInfo();

        ActivityFavorHandler.SingleRechargeInfoOrBuilder getSingleRechargeInfoOrBuilder();
    }

    public static interface SingleRechargeGetInfoRequestOrBuilder extends MessageOrBuilder {
    }

    public static interface SingleRechargeInfoOrBuilder extends MessageOrBuilder {
        boolean hasBeginTime();

        String getBeginTime();

        ByteString getBeginTimeBytes();

        boolean hasEndTime();

        String getEndTime();

        ByteString getEndTimeBytes();

        boolean hasDescribe();

        String getDescribe();

        ByteString getDescribeBytes();

        List<ActivityFavorHandler.SingleRechargeAwardInfo> getSingleRechargeAwardInfoList();

        ActivityFavorHandler.SingleRechargeAwardInfo getSingleRechargeAwardInfo(int param1Int);

        int getSingleRechargeAwardInfoCount();

        List<? extends ActivityFavorHandler.SingleRechargeAwardInfoOrBuilder> getSingleRechargeAwardInfoOrBuilderList();

        ActivityFavorHandler.SingleRechargeAwardInfoOrBuilder getSingleRechargeAwardInfoOrBuilder(int param1Int);
    }

    public static interface SingleRechargeAwardInfoOrBuilder extends MessageOrBuilder {
        boolean hasId();

        int getId();

        List<ActivityFavorHandler.SingleRechargeItem> getItemList();

        ActivityFavorHandler.SingleRechargeItem getItem(int param1Int);

        int getItemCount();

        List<? extends ActivityFavorHandler.SingleRechargeItemOrBuilder> getItemOrBuilderList();

        ActivityFavorHandler.SingleRechargeItemOrBuilder getItemOrBuilder(int param1Int);

        boolean hasState();

        int getState();

        boolean hasCurrNum();

        int getCurrNum();

        boolean hasNeedNum();

        int getNeedNum();
    }

    public static interface SingleRechargeItemOrBuilder extends MessageOrBuilder {
        boolean hasCode();

        String getCode();

        ByteString getCodeBytes();

        boolean hasGroupCount();

        int getGroupCount();
    }

    public static interface ContinuousRechargeAwardResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface ContinuousRechargeAwardRequestOrBuilder extends MessageOrBuilder {
        boolean hasDay();

        int getDay();
    }

    public static interface ContinuousRechargeGetInfoResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        boolean hasContinuousRechargeInfo();

        ActivityFavorHandler.ContinuousRechargeInfo getContinuousRechargeInfo();

        ActivityFavorHandler.ContinuousRechargeInfoOrBuilder getContinuousRechargeInfoOrBuilder();
    }

    public static interface ContinuousRechargeGetInfoRequestOrBuilder extends MessageOrBuilder {
    }

    public static interface ContinuousRechargeInfoOrBuilder extends MessageOrBuilder {
        boolean hasBeginTime();

        String getBeginTime();

        ByteString getBeginTimeBytes();

        boolean hasEndTime();

        String getEndTime();

        ByteString getEndTimeBytes();

        boolean hasDescribe();

        String getDescribe();

        ByteString getDescribeBytes();

        List<ActivityFavorHandler.ContinuousRechargeAwardInfo> getContinuousRechargeAwardInfoList();

        ActivityFavorHandler.ContinuousRechargeAwardInfo getContinuousRechargeAwardInfo(int param1Int);

        int getContinuousRechargeAwardInfoCount();

        List<? extends ActivityFavorHandler.ContinuousRechargeAwardInfoOrBuilder> getContinuousRechargeAwardInfoOrBuilderList();

        ActivityFavorHandler.ContinuousRechargeAwardInfoOrBuilder getContinuousRechargeAwardInfoOrBuilder(int param1Int);

        boolean hasDay();

        int getDay();

        boolean hasCurrNum();

        int getCurrNum();

        boolean hasNeedNum();

        int getNeedNum();
    }

    public static interface ContinuousRechargeAwardInfoOrBuilder extends MessageOrBuilder {
        boolean hasDay();

        int getDay();

        List<ActivityFavorHandler.ContinuousRechargeItem> getItemList();

        ActivityFavorHandler.ContinuousRechargeItem getItem(int param1Int);

        int getItemCount();

        List<? extends ActivityFavorHandler.ContinuousRechargeItemOrBuilder> getItemOrBuilderList();

        ActivityFavorHandler.ContinuousRechargeItemOrBuilder getItemOrBuilder(int param1Int);

        boolean hasState();

        int getState();

        boolean hasMoney();

        int getMoney();
    }

    public static interface ContinuousRechargeItemOrBuilder extends MessageOrBuilder {
        boolean hasCode();

        String getCode();

        ByteString getCodeBytes();

        boolean hasGroupCount();

        int getGroupCount();
    }

    public static interface LimitTimeGiftBuyResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface LimitTimeGiftBuyRequestOrBuilder extends MessageOrBuilder {
        boolean hasId();

        int getId();
    }

    public static interface LimitTimeGiftInfoResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        List<ActivityFavorHandler.LimitTimeGiftInfo> getLimitTimeGiftInfoList();

        ActivityFavorHandler.LimitTimeGiftInfo getLimitTimeGiftInfo(int param1Int);

        int getLimitTimeGiftInfoCount();

        List<? extends ActivityFavorHandler.LimitTimeGiftInfoOrBuilder> getLimitTimeGiftInfoOrBuilderList();

        ActivityFavorHandler.LimitTimeGiftInfoOrBuilder getLimitTimeGiftInfoOrBuilder(int param1Int);
    }

    public static interface LimitTimeGiftInfoRequestOrBuilder extends MessageOrBuilder {
    }

    public static interface LimitTimeGiftInfoPushOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        List<ActivityFavorHandler.LimitTimeGiftInfo> getLimitTimeGiftInfoList();

        ActivityFavorHandler.LimitTimeGiftInfo getLimitTimeGiftInfo(int param1Int);

        int getLimitTimeGiftInfoCount();

        List<? extends ActivityFavorHandler.LimitTimeGiftInfoOrBuilder> getLimitTimeGiftInfoOrBuilderList();

        ActivityFavorHandler.LimitTimeGiftInfoOrBuilder getLimitTimeGiftInfoOrBuilder(int param1Int);
    }

    public static interface LimitTimeGiftInfoOrBuilder extends MessageOrBuilder {
        boolean hasId();

        int getId();

        boolean hasSecondRemain();

        int getSecondRemain();
    }

    public static interface RecoveredResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface RecoveredRequestOrBuilder extends MessageOrBuilder {
        boolean hasId();

        int getId();

        boolean hasType();

        int getType();
    }

    public static interface RecoveredInfoResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        boolean hasRecoveredInfo();

        ActivityFavorHandler.RecoveredInfo getRecoveredInfo();

        ActivityFavorHandler.RecoveredInfoOrBuilder getRecoveredInfoOrBuilder();
    }

    public static interface RecoveredInfoRequestOrBuilder extends MessageOrBuilder {
    }

    public static interface RecoveredInfoOrBuilder extends MessageOrBuilder {
        boolean hasBeginTime();

        String getBeginTime();

        ByteString getBeginTimeBytes();

        boolean hasEndTime();

        String getEndTime();

        ByteString getEndTimeBytes();

        boolean hasDescribe();

        String getDescribe();

        ByteString getDescribeBytes();

        List<ActivityFavorHandler.RecoveredSourceInfo> getRecoveredSourceInfoList();

        ActivityFavorHandler.RecoveredSourceInfo getRecoveredSourceInfo(int param1Int);

        int getRecoveredSourceInfoCount();

        List<? extends ActivityFavorHandler.RecoveredSourceInfoOrBuilder> getRecoveredSourceInfoOrBuilderList();

        ActivityFavorHandler.RecoveredSourceInfoOrBuilder getRecoveredSourceInfoOrBuilder(int param1Int);
    }

    public static interface RecoveredSourceInfoOrBuilder extends MessageOrBuilder {
        boolean hasId();

        int getId();

        boolean hasSourceName();

        String getSourceName();

        ByteString getSourceNameBytes();

        boolean hasMinDate();

        int getMinDate();

        boolean hasMaxDate();

        int getMaxDate();

        boolean hasState();

        int getState();

        List<ActivityFavorHandler.RecoveredItem> getRecoveredItemsList();

        ActivityFavorHandler.RecoveredItem getRecoveredItems(int param1Int);

        int getRecoveredItemsCount();

        List<? extends ActivityFavorHandler.RecoveredItemOrBuilder> getRecoveredItemsOrBuilderList();

        ActivityFavorHandler.RecoveredItemOrBuilder getRecoveredItemsOrBuilder(int param1Int);

        boolean hasNeedDiamond();

        int getNeedDiamond();
    }

    public static interface RecoveredItemOrBuilder extends MessageOrBuilder {
        boolean hasCode();

        String getCode();

        ByteString getCodeBytes();

        boolean hasNum();

        int getNum();
    }

    public static interface DailyDrawResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        List<ActivityFavorHandler.DailyDrawAwardInfo> getAwardsList();

        ActivityFavorHandler.DailyDrawAwardInfo getAwards(int param1Int);

        int getAwardsCount();

        List<? extends ActivityFavorHandler.DailyDrawAwardInfoOrBuilder> getAwardsOrBuilderList();

        ActivityFavorHandler.DailyDrawAwardInfoOrBuilder getAwardsOrBuilder(int param1Int);

        boolean hasFreeCountLeft();

        int getFreeCountLeft();

        boolean hasExploredTicketCountLeft();

        int getExploredTicketCountLeft();
    }

    public static interface DailyDrawRequestOrBuilder extends MessageOrBuilder {
        boolean hasTimeType();

        int getTimeType();

        boolean hasCostType();

        int getCostType();

        boolean hasId();

        int getId();
    }

    public static interface DailyDrawInfoResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        boolean hasFreeCountLeft();

        int getFreeCountLeft();

        boolean hasExploredTicketCountLeft();

        int getExploredTicketCountLeft();

        List<ActivityFavorHandler.DailyDrawAwardInfo> getAwardsList();

        ActivityFavorHandler.DailyDrawAwardInfo getAwards(int param1Int);

        int getAwardsCount();

        List<? extends ActivityFavorHandler.DailyDrawAwardInfoOrBuilder> getAwardsOrBuilderList();

        ActivityFavorHandler.DailyDrawAwardInfoOrBuilder getAwardsOrBuilder(int param1Int);

        boolean hasBeginTime();

        String getBeginTime();

        ByteString getBeginTimeBytes();

        boolean hasEndTime();

        String getEndTime();

        ByteString getEndTimeBytes();

        boolean hasDescribe();

        String getDescribe();

        ByteString getDescribeBytes();

        boolean hasFreeCountUpdateTimeStamp();

        long getFreeCountUpdateTimeStamp();

        boolean hasProportion();

        int getProportion();
    }

    public static interface DailyDrawInfoRequestOrBuilder extends MessageOrBuilder {
        boolean hasId();

        int getId();
    }

    public static interface DailyDrawAwardInfoOrBuilder extends MessageOrBuilder {
        boolean hasId();

        int getId();

        boolean hasCode();

        String getCode();

        ByteString getCodeBytes();

        boolean hasNum();

        int getNum();
    }

    public static interface SevenDayPackageAwardResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface SevenDayPackageAwardRequestOrBuilder extends MessageOrBuilder {
        boolean hasPackageId();

        int getPackageId();
    }

    public static interface SevenDayPackageGetInfoResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        boolean hasSevenDayPackageInfo();

        ActivityFavorHandler.SevenDayPackageInfo getSevenDayPackageInfo();

        ActivityFavorHandler.SevenDayPackageInfoOrBuilder getSevenDayPackageInfoOrBuilder();
    }

    public static interface SevenDayPackageGetInfoRequestOrBuilder extends MessageOrBuilder {
    }

    public static interface SevenDayPackageInfoOrBuilder extends MessageOrBuilder {
        boolean hasBeginTime();

        String getBeginTime();

        ByteString getBeginTimeBytes();

        boolean hasEndTime();

        String getEndTime();

        ByteString getEndTimeBytes();

        boolean hasDescribe();

        String getDescribe();

        ByteString getDescribeBytes();

        List<ActivityFavorHandler.SevenDayPackageAwardInfo> getSevenDayPackageAwardInfoList();

        ActivityFavorHandler.SevenDayPackageAwardInfo getSevenDayPackageAwardInfo(int param1Int);

        int getSevenDayPackageAwardInfoCount();

        List<? extends ActivityFavorHandler.SevenDayPackageAwardInfoOrBuilder> getSevenDayPackageAwardInfoOrBuilderList();

        ActivityFavorHandler.SevenDayPackageAwardInfoOrBuilder getSevenDayPackageAwardInfoOrBuilder(int param1Int);
    }

    public static interface SevenDayPackageAwardInfoOrBuilder extends MessageOrBuilder {
        boolean hasPackageId();

        int getPackageId();

        boolean hasItemcode();

        String getItemcode();

        ByteString getItemcodeBytes();

        boolean hasItemcount();

        int getItemcount();

        boolean hasItemmodel();

        String getItemmodel();

        ByteString getItemmodelBytes();

        boolean hasState();

        int getState();
    }

    public static interface SuperPackageBuyPushOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        boolean hasPackageId();

        int getPackageId();
    }

    public static interface SuperPackageBuyResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        boolean hasS2COrderId();

        String getS2COrderId();

        ByteString getS2COrderIdBytes();

        boolean hasAppNotifyUrl();

        String getAppNotifyUrl();

        ByteString getAppNotifyUrlBytes();
    }

    public static interface SuperPackageBuyRequestOrBuilder extends MessageOrBuilder {
        boolean hasPackageId();

        int getPackageId();

        boolean hasChannelId();

        int getChannelId();

        boolean hasC2SImei();

        String getC2SImei();

        ByteString getC2SImeiBytes();

        boolean hasC2SOs();

        int getC2SOs();
    }

    public static interface SuperPackageGetInfoResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        boolean hasSuperPackageInfo();

        ActivityFavorHandler.SuperPackageInfo getSuperPackageInfo();

        ActivityFavorHandler.SuperPackageInfoOrBuilder getSuperPackageInfoOrBuilder();
    }

    public static interface SuperPackageGetInfoRequestOrBuilder extends MessageOrBuilder {
    }

    public static interface SuperPackageInfoOrBuilder extends MessageOrBuilder {
        boolean hasBeginTime();

        String getBeginTime();

        ByteString getBeginTimeBytes();

        boolean hasEndTime();

        String getEndTime();

        ByteString getEndTimeBytes();

        boolean hasDescribe();

        String getDescribe();

        ByteString getDescribeBytes();

        List<ActivityFavorHandler.SuperPackageAwardInfo> getSuperPackageAwardInfoList();

        ActivityFavorHandler.SuperPackageAwardInfo getSuperPackageAwardInfo(int param1Int);

        int getSuperPackageAwardInfoCount();

        List<? extends ActivityFavorHandler.SuperPackageAwardInfoOrBuilder> getSuperPackageAwardInfoOrBuilderList();

        ActivityFavorHandler.SuperPackageAwardInfoOrBuilder getSuperPackageAwardInfoOrBuilder(int param1Int);
    }

    public static interface SuperPackageAwardInfoOrBuilder extends MessageOrBuilder {
        boolean hasPackageId();

        int getPackageId();

        boolean hasPackageName();

        String getPackageName();

        ByteString getPackageNameBytes();

        boolean hasPackageCode();

        String getPackageCode();

        ByteString getPackageCodeBytes();

        boolean hasPackageNum();

        int getPackageNum();

        boolean hasPackageIcon();

        String getPackageIcon();

        ByteString getPackageIconBytes();

        boolean hasPackageScript();

        int getPackageScript();

        boolean hasPackagePrice();

        int getPackagePrice();

        boolean hasPackageState();

        int getPackageState();
    }

    public static interface DailyRechargeGetAwardResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface DailyRechargeGetAwardRequestOrBuilder extends MessageOrBuilder {
        boolean hasAwardId();

        int getAwardId();
    }

    public static interface DailyRechargeGetInfoResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        boolean hasTotalInfo();

        ActivityHandler.totalInfo getTotalInfo();

        ActivityHandler.totalInfoOrBuilder getTotalInfoOrBuilder();

        boolean hasRechargeNum();

        int getRechargeNum();

        boolean hasRechargeMax();

        int getRechargeMax();
    }

    public static interface DailyRechargeGetInfoRequestOrBuilder extends MessageOrBuilder {
    }
}


