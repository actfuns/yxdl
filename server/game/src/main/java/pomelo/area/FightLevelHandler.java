package pomelo.area;

import com.google.protobuf.AbstractMessage;
import com.google.protobuf.AbstractMessageLite;
import com.google.protobuf.AbstractParser;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors;
import com.google.protobuf.ExtensionRegistry;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessage;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.Message;
import com.google.protobuf.MessageLite;
import com.google.protobuf.MessageOrBuilder;
import com.google.protobuf.Parser;
import com.google.protobuf.RepeatedFieldBuilder;
import com.google.protobuf.SingleFieldBuilder;
import com.google.protobuf.UnknownFieldSet;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import pomelo.Common;
import pomelo.item.ItemOuterClass;
import pomelo.player.PlayerOuterClass;


public final class FightLevelHandler {
    public static void registerAllExtensions(ExtensionRegistry registry) {
    }

    public static final class FubenAwardRecord
            extends GeneratedMessage
            implements FubenAwardRecordOrBuilder {
        private static final FubenAwardRecord defaultInstance = new FubenAwardRecord(true);
        private final UnknownFieldSet unknownFields;

        private FubenAwardRecord(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private FubenAwardRecord(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static FubenAwardRecord getDefaultInstance() {
            return defaultInstance;
        }

        public FubenAwardRecord getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private FubenAwardRecord(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    PlayerOuterClass.PlayerBasic.Builder builder;
                    ItemOuterClass.MiniItem.Builder subBuilder;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            builder = null;
                            if ((this.bitField0_ & 0x1) == 1) builder = this.player_.toBuilder();
                            this.player_ = (PlayerOuterClass.PlayerBasic) input.readMessage(PlayerOuterClass.PlayerBasic.PARSER, extensionRegistry);
                            if (builder != null) {
                                builder.mergeFrom(this.player_);
                                this.player_ = builder.buildPartial();
                            }
                            this.bitField0_ |= 0x1;
                            break;
                        case 18:
                            subBuilder = null;
                            if ((this.bitField0_ & 0x2) == 2) subBuilder = this.item_.toBuilder();
                            this.item_ = (ItemOuterClass.MiniItem) input.readMessage(ItemOuterClass.MiniItem.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(this.item_);
                                this.item_ = subBuilder.buildPartial();
                            }
                            this.bitField0_ |= 0x2;
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.time_ = input.readInt64();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_FubenAwardRecord_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_FubenAwardRecord_fieldAccessorTable.ensureFieldAccessorsInitialized(FubenAwardRecord.class, Builder.class);
        }

        public static Parser<FubenAwardRecord> PARSER = (Parser<FubenAwardRecord>) new AbstractParser<FubenAwardRecord>() {
            public FightLevelHandler.FubenAwardRecord parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.FubenAwardRecord(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int PLAYER_FIELD_NUMBER = 1;
        private PlayerOuterClass.PlayerBasic player_;
        public static final int ITEM_FIELD_NUMBER = 2;
        private ItemOuterClass.MiniItem item_;
        public static final int TIME_FIELD_NUMBER = 3;
        private long time_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<FubenAwardRecord> getParserForType() {
            return PARSER;
        }

        public boolean hasPlayer() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public PlayerOuterClass.PlayerBasic getPlayer() {
            return this.player_;
        }

        public PlayerOuterClass.PlayerBasicOrBuilder getPlayerOrBuilder() {
            return (PlayerOuterClass.PlayerBasicOrBuilder) this.player_;
        }

        public boolean hasItem() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        static {
            defaultInstance.initFields();
        }


        public ItemOuterClass.MiniItem getItem() {
            return this.item_;
        }

        public ItemOuterClass.MiniItemOrBuilder getItemOrBuilder() {
            return (ItemOuterClass.MiniItemOrBuilder) this.item_;
        }

        public boolean hasTime() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public long getTime() {
            return this.time_;
        }

        private void initFields() {
            this.player_ = PlayerOuterClass.PlayerBasic.getDefaultInstance();
            this.item_ = ItemOuterClass.MiniItem.getDefaultInstance();
            this.time_ = 0L;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasPlayer()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasItem()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!getPlayer().isInitialized()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!getItem().isInitialized()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeMessage(1, (MessageLite) this.player_);
            if ((this.bitField0_ & 0x2) == 2)
                output.writeMessage(2, (MessageLite) this.item_);
            if ((this.bitField0_ & 0x4) == 4)
                output.writeInt64(3, this.time_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeMessageSize(1, (MessageLite) this.player_);
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeMessageSize(2, (MessageLite) this.item_);
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeInt64Size(3, this.time_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static FubenAwardRecord parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (FubenAwardRecord) PARSER.parseFrom(data);
        }

        public static FubenAwardRecord parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (FubenAwardRecord) PARSER.parseFrom(data, extensionRegistry);
        }

        public static FubenAwardRecord parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (FubenAwardRecord) PARSER.parseFrom(data);
        }

        public static FubenAwardRecord parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (FubenAwardRecord) PARSER.parseFrom(data, extensionRegistry);
        }

        public static FubenAwardRecord parseFrom(InputStream input) throws IOException {
            return (FubenAwardRecord) PARSER.parseFrom(input);
        }

        public static FubenAwardRecord parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FubenAwardRecord) PARSER.parseFrom(input, extensionRegistry);
        }

        public static FubenAwardRecord parseDelimitedFrom(InputStream input) throws IOException {
            return (FubenAwardRecord) PARSER.parseDelimitedFrom(input);
        }

        public static FubenAwardRecord parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FubenAwardRecord) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static FubenAwardRecord parseFrom(CodedInputStream input) throws IOException {
            return (FubenAwardRecord) PARSER.parseFrom(input);
        }

        public static FubenAwardRecord parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FubenAwardRecord) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(FubenAwardRecord prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder
                extends GeneratedMessage.Builder<Builder>
                implements FightLevelHandler.FubenAwardRecordOrBuilder {
            private int bitField0_;
            private PlayerOuterClass.PlayerBasic player_;
            private SingleFieldBuilder<PlayerOuterClass.PlayerBasic, PlayerOuterClass.PlayerBasic.Builder, PlayerOuterClass.PlayerBasicOrBuilder> playerBuilder_;
            private ItemOuterClass.MiniItem item_;
            private SingleFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> itemBuilder_;
            private long time_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_FubenAwardRecord_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_FubenAwardRecord_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.FubenAwardRecord.class, Builder.class);
            }

            private Builder() {
                this.player_ = PlayerOuterClass.PlayerBasic.getDefaultInstance();
                this.item_ = ItemOuterClass.MiniItem.getDefaultInstance();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.player_ = PlayerOuterClass.PlayerBasic.getDefaultInstance();
                this.item_ = ItemOuterClass.MiniItem.getDefaultInstance();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.FubenAwardRecord.alwaysUseFieldBuilders) {
                    getPlayerFieldBuilder();
                    getItemFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                if (this.playerBuilder_ == null) {
                    this.player_ = PlayerOuterClass.PlayerBasic.getDefaultInstance();
                } else {
                    this.playerBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFE;
                if (this.itemBuilder_ == null) {
                    this.item_ = ItemOuterClass.MiniItem.getDefaultInstance();
                } else {
                    this.itemBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFD;
                this.time_ = 0L;
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_FubenAwardRecord_descriptor;
            }

            public FightLevelHandler.FubenAwardRecord getDefaultInstanceForType() {
                return FightLevelHandler.FubenAwardRecord.getDefaultInstance();
            }

            public FightLevelHandler.FubenAwardRecord build() {
                FightLevelHandler.FubenAwardRecord result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.FubenAwardRecord buildPartial() {
                FightLevelHandler.FubenAwardRecord result = new FightLevelHandler.FubenAwardRecord(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                if (this.playerBuilder_ == null) {
                    result.player_ = this.player_;
                } else {
                    result.player_ = (PlayerOuterClass.PlayerBasic) this.playerBuilder_.build();
                }
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                if (this.itemBuilder_ == null) {
                    result.item_ = this.item_;
                } else {
                    result.item_ = (ItemOuterClass.MiniItem) this.itemBuilder_.build();
                }
                if ((from_bitField0_ & 0x4) == 4)
                    to_bitField0_ |= 0x4;
                result.time_ = this.time_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.FubenAwardRecord)
                    return mergeFrom((FightLevelHandler.FubenAwardRecord) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.FubenAwardRecord other) {
                if (other == FightLevelHandler.FubenAwardRecord.getDefaultInstance())
                    return this;
                if (other.hasPlayer())
                    mergePlayer(other.getPlayer());
                if (other.hasItem())
                    mergeItem(other.getItem());
                if (other.hasTime())
                    setTime(other.getTime());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasPlayer())
                    return false;
                if (!hasItem())
                    return false;
                if (!hasTime())
                    return false;
                if (!getPlayer().isInitialized())
                    return false;
                if (!getItem().isInitialized())
                    return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.FubenAwardRecord parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.FubenAwardRecord) FightLevelHandler.FubenAwardRecord.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.FubenAwardRecord) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasPlayer() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public PlayerOuterClass.PlayerBasic getPlayer() {
                if (this.playerBuilder_ == null)
                    return this.player_;
                return (PlayerOuterClass.PlayerBasic) this.playerBuilder_.getMessage();
            }

            public Builder setPlayer(PlayerOuterClass.PlayerBasic value) {
                if (this.playerBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    this.player_ = value;
                    onChanged();
                } else {
                    this.playerBuilder_.setMessage((GeneratedMessage) value);
                }
                this.bitField0_ |= 0x1;
                return this;
            }

            public Builder setPlayer(PlayerOuterClass.PlayerBasic.Builder builderForValue) {
                if (this.playerBuilder_ == null) {
                    this.player_ = builderForValue.build();
                    onChanged();
                } else {
                    this.playerBuilder_.setMessage((GeneratedMessage) builderForValue.build());
                }
                this.bitField0_ |= 0x1;
                return this;
            }

            public Builder mergePlayer(PlayerOuterClass.PlayerBasic value) {
                if (this.playerBuilder_ == null) {
                    if ((this.bitField0_ & 0x1) == 1 && this.player_ != PlayerOuterClass.PlayerBasic.getDefaultInstance()) {
                        this.player_ = PlayerOuterClass.PlayerBasic.newBuilder(this.player_).mergeFrom(value).buildPartial();
                    } else {
                        this.player_ = value;
                    }
                    onChanged();
                } else {
                    this.playerBuilder_.mergeFrom((GeneratedMessage) value);
                }
                this.bitField0_ |= 0x1;
                return this;
            }

            public Builder clearPlayer() {
                if (this.playerBuilder_ == null) {
                    this.player_ = PlayerOuterClass.PlayerBasic.getDefaultInstance();
                    onChanged();
                } else {
                    this.playerBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public PlayerOuterClass.PlayerBasic.Builder getPlayerBuilder() {
                this.bitField0_ |= 0x1;
                onChanged();
                return (PlayerOuterClass.PlayerBasic.Builder) getPlayerFieldBuilder().getBuilder();
            }

            public PlayerOuterClass.PlayerBasicOrBuilder getPlayerOrBuilder() {
                if (this.playerBuilder_ != null)
                    return (PlayerOuterClass.PlayerBasicOrBuilder) this.playerBuilder_.getMessageOrBuilder();
                return (PlayerOuterClass.PlayerBasicOrBuilder) this.player_;
            }

            private SingleFieldBuilder<PlayerOuterClass.PlayerBasic, PlayerOuterClass.PlayerBasic.Builder, PlayerOuterClass.PlayerBasicOrBuilder> getPlayerFieldBuilder() {
                if (this.playerBuilder_ == null) {
                    this.playerBuilder_ = new SingleFieldBuilder((GeneratedMessage) getPlayer(), getParentForChildren(), isClean());
                    this.player_ = null;
                }
                return this.playerBuilder_;
            }

            public boolean hasItem() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public ItemOuterClass.MiniItem getItem() {
                if (this.itemBuilder_ == null)
                    return this.item_;
                return (ItemOuterClass.MiniItem) this.itemBuilder_.getMessage();
            }

            public Builder setItem(ItemOuterClass.MiniItem value) {
                if (this.itemBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    this.item_ = value;
                    onChanged();
                } else {
                    this.itemBuilder_.setMessage((GeneratedMessage) value);
                }
                this.bitField0_ |= 0x2;
                return this;
            }

            public Builder setItem(ItemOuterClass.MiniItem.Builder builderForValue) {
                if (this.itemBuilder_ == null) {
                    this.item_ = builderForValue.build();
                    onChanged();
                } else {
                    this.itemBuilder_.setMessage((GeneratedMessage) builderForValue.build());
                }
                this.bitField0_ |= 0x2;
                return this;
            }

            public Builder mergeItem(ItemOuterClass.MiniItem value) {
                if (this.itemBuilder_ == null) {
                    if ((this.bitField0_ & 0x2) == 2 && this.item_ != ItemOuterClass.MiniItem.getDefaultInstance()) {
                        this.item_ = ItemOuterClass.MiniItem.newBuilder(this.item_).mergeFrom(value).buildPartial();
                    } else {
                        this.item_ = value;
                    }
                    onChanged();
                } else {
                    this.itemBuilder_.mergeFrom((GeneratedMessage) value);
                }
                this.bitField0_ |= 0x2;
                return this;
            }

            public Builder clearItem() {
                if (this.itemBuilder_ == null) {
                    this.item_ = ItemOuterClass.MiniItem.getDefaultInstance();
                    onChanged();
                } else {
                    this.itemBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public ItemOuterClass.MiniItem.Builder getItemBuilder() {
                this.bitField0_ |= 0x2;
                onChanged();
                return (ItemOuterClass.MiniItem.Builder) getItemFieldBuilder().getBuilder();
            }

            public ItemOuterClass.MiniItemOrBuilder getItemOrBuilder() {
                if (this.itemBuilder_ != null)
                    return (ItemOuterClass.MiniItemOrBuilder) this.itemBuilder_.getMessageOrBuilder();
                return (ItemOuterClass.MiniItemOrBuilder) this.item_;
            }

            private SingleFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> getItemFieldBuilder() {
                if (this.itemBuilder_ == null) {
                    this.itemBuilder_ = new SingleFieldBuilder((GeneratedMessage) getItem(), getParentForChildren(), isClean());
                    this.item_ = null;
                }
                return this.itemBuilder_;
            }

            public boolean hasTime() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public long getTime() {
                return this.time_;
            }

            public Builder setTime(long value) {
                this.bitField0_ |= 0x4;
                this.time_ = value;
                onChanged();
                return this;
            }

            public Builder clearTime() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.time_ = 0L;
                onChanged();
                return this;
            }
        }
    }

    public static final class MonsterInfo
            extends GeneratedMessage
            implements MonsterInfoOrBuilder {
        private static final MonsterInfo defaultInstance = new MonsterInfo(true);
        private final UnknownFieldSet unknownFields;

        private MonsterInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private MonsterInfo(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static MonsterInfo getDefaultInstance() {
            return defaultInstance;
        }

        public MonsterInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private MonsterInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.monsterId_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.time_ = input.readInt64();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_MonsterInfo_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_MonsterInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(MonsterInfo.class, Builder.class);
        }

        public static Parser<MonsterInfo> PARSER = (Parser<MonsterInfo>) new AbstractParser<MonsterInfo>() {
            public FightLevelHandler.MonsterInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.MonsterInfo(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int MONSTERID_FIELD_NUMBER = 1;
        private int monsterId_;
        public static final int TIME_FIELD_NUMBER = 2;
        private long time_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<MonsterInfo> getParserForType() {
            return PARSER;
        }

        public boolean hasMonsterId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getMonsterId() {
            return this.monsterId_;
        }

        public boolean hasTime() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public long getTime() {
            return this.time_;
        }

        private void initFields() {
            this.monsterId_ = 0;
            this.time_ = 0L;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasMonsterId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.monsterId_);
            if ((this.bitField0_ & 0x2) == 2) output.writeInt64(2, this.time_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.monsterId_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt64Size(2, this.time_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static MonsterInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (MonsterInfo) PARSER.parseFrom(data);
        }

        public static MonsterInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (MonsterInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static MonsterInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (MonsterInfo) PARSER.parseFrom(data);
        }

        public static MonsterInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (MonsterInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static MonsterInfo parseFrom(InputStream input) throws IOException {
            return (MonsterInfo) PARSER.parseFrom(input);
        }

        public static MonsterInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (MonsterInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static MonsterInfo parseDelimitedFrom(InputStream input) throws IOException {
            return (MonsterInfo) PARSER.parseDelimitedFrom(input);
        }

        public static MonsterInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (MonsterInfo) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static MonsterInfo parseFrom(CodedInputStream input) throws IOException {
            return (MonsterInfo) PARSER.parseFrom(input);
        }

        public static MonsterInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (MonsterInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(MonsterInfo prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.MonsterInfoOrBuilder {
            private int bitField0_;
            private int monsterId_;
            private long time_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_MonsterInfo_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_MonsterInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.MonsterInfo.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.MonsterInfo.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.monsterId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.time_ = 0L;
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_MonsterInfo_descriptor;
            }

            public FightLevelHandler.MonsterInfo getDefaultInstanceForType() {
                return FightLevelHandler.MonsterInfo.getDefaultInstance();
            }

            public FightLevelHandler.MonsterInfo build() {
                FightLevelHandler.MonsterInfo result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.MonsterInfo buildPartial() {
                FightLevelHandler.MonsterInfo result = new FightLevelHandler.MonsterInfo(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.monsterId_ = this.monsterId_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.time_ = this.time_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.MonsterInfo)
                    return mergeFrom((FightLevelHandler.MonsterInfo) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.MonsterInfo other) {
                if (other == FightLevelHandler.MonsterInfo.getDefaultInstance()) return this;
                if (other.hasMonsterId()) setMonsterId(other.getMonsterId());
                if (other.hasTime()) setTime(other.getTime());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasMonsterId()) return false;
                if (!hasTime()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.MonsterInfo parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.MonsterInfo) FightLevelHandler.MonsterInfo.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.MonsterInfo) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasMonsterId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getMonsterId() {
                return this.monsterId_;
            }

            public Builder setMonsterId(int value) {
                this.bitField0_ |= 0x1;
                this.monsterId_ = value;
                onChanged();
                return this;
            }

            public Builder clearMonsterId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.monsterId_ = 0;
                onChanged();
                return this;
            }

            public boolean hasTime() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public long getTime() {
                return this.time_;
            }

            public Builder setTime(long value) {
                this.bitField0_ |= 0x2;
                this.time_ = value;
                onChanged();
                return this;
            }

            public Builder clearTime() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.time_ = 0L;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class FubenInfo
            extends GeneratedMessage
            implements FubenInfoOrBuilder {
        private final UnknownFieldSet unknownFields;


        private FubenInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }


        private FubenInfo(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }


        public static FubenInfo getDefaultInstance() {
            return defaultInstance;
        }


        public FubenInfo getDefaultInstanceForType() {
            return defaultInstance;
        }


        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }


        private FubenInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.mapId_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.remainTimes_ = input.readInt32();
                            break;
                        case 26:
                            if ((mutable_bitField0_ & 0x4) != 4) {
                                this.awardItems_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x4;
                            }
                            this.awardItems_.add(input.readMessage(ItemOuterClass.MiniItem.PARSER, extensionRegistry));
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x4) == 4) {
                    this.awardItems_ = Collections.unmodifiableList(this.awardItems_);
                }
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }


        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_FubenInfo_descriptor;
        }


        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_FubenInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(FubenInfo.class, Builder.class);
        }


        public static Parser<FubenInfo> PARSER = (Parser<FubenInfo>) new AbstractParser<FubenInfo>() {
            public FightLevelHandler.FubenInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.FubenInfo(input, extensionRegistry);
            }
        };


        private int bitField0_;


        public static final int MAPID_FIELD_NUMBER = 1;


        private int mapId_;


        public static final int REMAINTIMES_FIELD_NUMBER = 2;


        private int remainTimes_;


        public static final int AWARDITEMS_FIELD_NUMBER = 3;


        private List<ItemOuterClass.MiniItem> awardItems_;


        private byte memoizedIsInitialized;


        private int memoizedSerializedSize;


        private static final long serialVersionUID = 0L;


        public Parser<FubenInfo> getParserForType() {
            return PARSER;
        }


        public boolean hasMapId() {
            return ((this.bitField0_ & 0x1) == 1);
        }


        public int getMapId() {
            return this.mapId_;
        }


        public boolean hasRemainTimes() {
            return ((this.bitField0_ & 0x2) == 2);
        }


        public int getRemainTimes() {
            return this.remainTimes_;
        }


        public List<ItemOuterClass.MiniItem> getAwardItemsList() {
            return this.awardItems_;
        }


        public List<? extends ItemOuterClass.MiniItemOrBuilder> getAwardItemsOrBuilderList() {
            return (List) this.awardItems_;
        }


        public int getAwardItemsCount() {
            return this.awardItems_.size();
        }


        public ItemOuterClass.MiniItem getAwardItems(int index) {
            return this.awardItems_.get(index);
        }


        public ItemOuterClass.MiniItemOrBuilder getAwardItemsOrBuilder(int index) {
            return (ItemOuterClass.MiniItemOrBuilder) this.awardItems_.get(index);
        }


        private void initFields() {
            this.mapId_ = 0;
            this.remainTimes_ = 0;
            this.awardItems_ = Collections.emptyList();
        }


        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            if (!hasMapId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasRemainTimes()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getAwardItemsCount(); i++) {
                if (!getAwardItems(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }


        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeInt32(1, this.mapId_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeInt32(2, this.remainTimes_);
            }
            for (int i = 0; i < this.awardItems_.size(); i++) {
                output.writeMessage(3, (MessageLite) this.awardItems_.get(i));
            }
            getUnknownFields().writeTo(output);
        }


        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeInt32Size(1, this.mapId_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeInt32Size(2, this.remainTimes_);
            }
            for (int i = 0; i < this.awardItems_.size(); i++) {
                size += CodedOutputStream.computeMessageSize(3, (MessageLite) this.awardItems_.get(i));
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }


        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }


        public static FubenInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (FubenInfo) PARSER.parseFrom(data);
        }


        public static FubenInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (FubenInfo) PARSER.parseFrom(data, extensionRegistry);
        }


        public static FubenInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (FubenInfo) PARSER.parseFrom(data);
        }


        public static FubenInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (FubenInfo) PARSER.parseFrom(data, extensionRegistry);
        }


        private static final FubenInfo defaultInstance = new FubenInfo(true);

        public static FubenInfo parseFrom(InputStream input) throws IOException {
            return (FubenInfo) PARSER.parseFrom(input);
        }

        public static FubenInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FubenInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static FubenInfo parseDelimitedFrom(InputStream input) throws IOException {
            return (FubenInfo) PARSER.parseDelimitedFrom(input);
        }

        public static FubenInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FubenInfo) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static FubenInfo parseFrom(CodedInputStream input) throws IOException {
            return (FubenInfo) PARSER.parseFrom(input);
        }

        public static FubenInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FubenInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(FubenInfo prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.FubenInfoOrBuilder {
            private int bitField0_;
            private int mapId_;
            private int remainTimes_;
            private List<ItemOuterClass.MiniItem> awardItems_;
            private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> awardItemsBuilder_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_FubenInfo_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_FubenInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.FubenInfo.class, Builder.class);
            }

            private Builder() {
                this.awardItems_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.awardItems_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.FubenInfo.alwaysUseFieldBuilders) getAwardItemsFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.mapId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.remainTimes_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                if (this.awardItemsBuilder_ == null) {
                    this.awardItems_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                } else {
                    this.awardItemsBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_FubenInfo_descriptor;
            }

            public FightLevelHandler.FubenInfo getDefaultInstanceForType() {
                return FightLevelHandler.FubenInfo.getDefaultInstance();
            }

            public FightLevelHandler.FubenInfo build() {
                FightLevelHandler.FubenInfo result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.FubenInfo buildPartial() {
                FightLevelHandler.FubenInfo result = new FightLevelHandler.FubenInfo(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.mapId_ = this.mapId_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.remainTimes_ = this.remainTimes_;
                if (this.awardItemsBuilder_ == null) {
                    if ((this.bitField0_ & 0x4) == 4) {
                        this.awardItems_ = Collections.unmodifiableList(this.awardItems_);
                        this.bitField0_ &= 0xFFFFFFFB;
                    }
                    result.awardItems_ = this.awardItems_;
                } else {
                    result.awardItems_ = this.awardItemsBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.FubenInfo) return mergeFrom((FightLevelHandler.FubenInfo) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.FubenInfo other) {
                if (other == FightLevelHandler.FubenInfo.getDefaultInstance()) return this;
                if (other.hasMapId()) setMapId(other.getMapId());
                if (other.hasRemainTimes()) setRemainTimes(other.getRemainTimes());
                if (this.awardItemsBuilder_ == null) {
                    if (!other.awardItems_.isEmpty()) {
                        if (this.awardItems_.isEmpty()) {
                            this.awardItems_ = other.awardItems_;
                            this.bitField0_ &= 0xFFFFFFFB;
                        } else {
                            ensureAwardItemsIsMutable();
                            this.awardItems_.addAll(other.awardItems_);
                        }
                        onChanged();
                    }
                } else if (!other.awardItems_.isEmpty()) {
                    if (this.awardItemsBuilder_.isEmpty()) {
                        this.awardItemsBuilder_.dispose();
                        this.awardItemsBuilder_ = null;
                        this.awardItems_ = other.awardItems_;
                        this.bitField0_ &= 0xFFFFFFFB;
                        this.awardItemsBuilder_ = FightLevelHandler.FubenInfo.alwaysUseFieldBuilders ? getAwardItemsFieldBuilder() : null;
                    } else {
                        this.awardItemsBuilder_.addAllMessages(other.awardItems_);
                    }
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasMapId()) return false;
                if (!hasRemainTimes()) return false;
                for (int i = 0; i < getAwardItemsCount(); i++) {
                    if (!getAwardItems(i).isInitialized()) return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.FubenInfo parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.FubenInfo) FightLevelHandler.FubenInfo.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.FubenInfo) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasMapId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getMapId() {
                return this.mapId_;
            }

            public Builder setMapId(int value) {
                this.bitField0_ |= 0x1;
                this.mapId_ = value;
                onChanged();
                return this;
            }

            public Builder clearMapId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.mapId_ = 0;
                onChanged();
                return this;
            }

            public boolean hasRemainTimes() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getRemainTimes() {
                return this.remainTimes_;
            }

            public Builder setRemainTimes(int value) {
                this.bitField0_ |= 0x2;
                this.remainTimes_ = value;
                onChanged();
                return this;
            }

            public Builder clearRemainTimes() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.remainTimes_ = 0;
                onChanged();
                return this;
            }

            private void ensureAwardItemsIsMutable() {
                if ((this.bitField0_ & 0x4) != 4) {
                    this.awardItems_ = new ArrayList<>(this.awardItems_);
                    this.bitField0_ |= 0x4;
                }
            }

            public List<ItemOuterClass.MiniItem> getAwardItemsList() {
                if (this.awardItemsBuilder_ == null) return Collections.unmodifiableList(this.awardItems_);
                return this.awardItemsBuilder_.getMessageList();
            }

            public int getAwardItemsCount() {
                if (this.awardItemsBuilder_ == null) return this.awardItems_.size();
                return this.awardItemsBuilder_.getCount();
            }

            public ItemOuterClass.MiniItem getAwardItems(int index) {
                if (this.awardItemsBuilder_ == null) return this.awardItems_.get(index);
                return (ItemOuterClass.MiniItem) this.awardItemsBuilder_.getMessage(index);
            }

            public Builder setAwardItems(int index, ItemOuterClass.MiniItem value) {
                if (this.awardItemsBuilder_ == null) {
                    if (value == null) throw new NullPointerException();
                    ensureAwardItemsIsMutable();
                    this.awardItems_.set(index, value);
                    onChanged();
                } else {
                    this.awardItemsBuilder_.setMessage(index, (GeneratedMessage) value);
                }
                return this;
            }

            public Builder setAwardItems(int index, ItemOuterClass.MiniItem.Builder builderForValue) {
                if (this.awardItemsBuilder_ == null) {
                    ensureAwardItemsIsMutable();
                    this.awardItems_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.awardItemsBuilder_.setMessage(index, (GeneratedMessage) builderForValue.build());
                }
                return this;
            }

            public Builder addAwardItems(ItemOuterClass.MiniItem value) {
                if (this.awardItemsBuilder_ == null) {
                    if (value == null) throw new NullPointerException();
                    ensureAwardItemsIsMutable();
                    this.awardItems_.add(value);
                    onChanged();
                } else {
                    this.awardItemsBuilder_.addMessage((GeneratedMessage) value);
                }
                return this;
            }

            public Builder addAwardItems(int index, ItemOuterClass.MiniItem value) {
                if (this.awardItemsBuilder_ == null) {
                    if (value == null) throw new NullPointerException();
                    ensureAwardItemsIsMutable();
                    this.awardItems_.add(index, value);
                    onChanged();
                } else {
                    this.awardItemsBuilder_.addMessage(index, (GeneratedMessage) value);
                }
                return this;
            }

            public Builder addAwardItems(ItemOuterClass.MiniItem.Builder builderForValue) {
                if (this.awardItemsBuilder_ == null) {
                    ensureAwardItemsIsMutable();
                    this.awardItems_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.awardItemsBuilder_.addMessage((GeneratedMessage) builderForValue.build());
                }
                return this;
            }

            public Builder addAwardItems(int index, ItemOuterClass.MiniItem.Builder builderForValue) {
                if (this.awardItemsBuilder_ == null) {
                    ensureAwardItemsIsMutable();
                    this.awardItems_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.awardItemsBuilder_.addMessage(index, (GeneratedMessage) builderForValue.build());
                }
                return this;
            }

            public Builder addAllAwardItems(Iterable<? extends ItemOuterClass.MiniItem> values) {
                if (this.awardItemsBuilder_ == null) {
                    ensureAwardItemsIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.awardItems_);
                    onChanged();
                } else {
                    this.awardItemsBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearAwardItems() {
                if (this.awardItemsBuilder_ == null) {
                    this.awardItems_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                    onChanged();
                } else {
                    this.awardItemsBuilder_.clear();
                }
                return this;
            }

            public Builder removeAwardItems(int index) {
                if (this.awardItemsBuilder_ == null) {
                    ensureAwardItemsIsMutable();
                    this.awardItems_.remove(index);
                    onChanged();
                } else {
                    this.awardItemsBuilder_.remove(index);
                }
                return this;
            }

            public ItemOuterClass.MiniItem.Builder getAwardItemsBuilder(int index) {
                return (ItemOuterClass.MiniItem.Builder) getAwardItemsFieldBuilder().getBuilder(index);
            }

            public ItemOuterClass.MiniItemOrBuilder getAwardItemsOrBuilder(int index) {
                if (this.awardItemsBuilder_ == null)
                    return (ItemOuterClass.MiniItemOrBuilder) this.awardItems_.get(index);
                return (ItemOuterClass.MiniItemOrBuilder) this.awardItemsBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends ItemOuterClass.MiniItemOrBuilder> getAwardItemsOrBuilderList() {
                if (this.awardItemsBuilder_ != null)
                    return this.awardItemsBuilder_.getMessageOrBuilderList();
                return (List) Collections.unmodifiableList(this.awardItems_);
            }

            public ItemOuterClass.MiniItem.Builder addAwardItemsBuilder() {
                return (ItemOuterClass.MiniItem.Builder) getAwardItemsFieldBuilder().addBuilder((GeneratedMessage) ItemOuterClass.MiniItem.getDefaultInstance());
            }

            public ItemOuterClass.MiniItem.Builder addAwardItemsBuilder(int index) {
                return (ItemOuterClass.MiniItem.Builder) getAwardItemsFieldBuilder().addBuilder(index, (GeneratedMessage) ItemOuterClass.MiniItem.getDefaultInstance());
            }

            public List<ItemOuterClass.MiniItem.Builder> getAwardItemsBuilderList() {
                return getAwardItemsFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> getAwardItemsFieldBuilder() {
                if (this.awardItemsBuilder_ == null) {
                    this.awardItemsBuilder_ = new RepeatedFieldBuilder(this.awardItems_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean());
                    this.awardItems_ = null;
                }
                return this.awardItemsBuilder_;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class InviteFriendInfo
            extends GeneratedMessage
            implements InviteFriendInfoOrBuilder {
        private static final InviteFriendInfo defaultInstance = new InviteFriendInfo(true);
        private final UnknownFieldSet unknownFields;

        private InviteFriendInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private InviteFriendInfo(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static InviteFriendInfo getDefaultInstance() {
            return defaultInstance;
        }

        public InviteFriendInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private InviteFriendInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.id_ = bs;
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.name_ = bs;
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.level_ = input.readInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 0x8;
                            this.pro_ = input.readInt32();
                            break;
                        case 42:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x10;
                            this.areaName_ = bs;
                            break;
                        case 48:
                            this.bitField0_ |= 0x20;
                            this.state_ = input.readInt32();
                            break;
                        case 56:
                            this.bitField0_ |= 0x40;
                            this.invalidTime_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_InviteFriendInfo_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_InviteFriendInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(InviteFriendInfo.class, Builder.class);
        }

        public static Parser<InviteFriendInfo> PARSER = (Parser<InviteFriendInfo>) new AbstractParser<InviteFriendInfo>() {
            public FightLevelHandler.InviteFriendInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.InviteFriendInfo(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int ID_FIELD_NUMBER = 1;
        private Object id_;
        public static final int NAME_FIELD_NUMBER = 2;
        private Object name_;
        public static final int LEVEL_FIELD_NUMBER = 3;
        private int level_;
        public static final int PRO_FIELD_NUMBER = 4;
        private int pro_;
        public static final int AREANAME_FIELD_NUMBER = 5;
        private Object areaName_;
        public static final int STATE_FIELD_NUMBER = 6;
        private int state_;
        public static final int INVALIDTIME_FIELD_NUMBER = 7;
        private int invalidTime_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<InviteFriendInfo> getParserForType() {
            return PARSER;
        }

        public boolean hasId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getId() {
            Object ref = this.id_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.id_ = s;
            return s;
        }

        public ByteString getIdBytes() {
            Object ref = this.id_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.id_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasName() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        static {
            defaultInstance.initFields();
        }

        public String getName() {
            Object ref = this.name_;
            if (ref instanceof String)
                return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8())
                this.name_ = s;
            return s;
        }

        public ByteString getNameBytes() {
            Object ref = this.name_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.name_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasLevel() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public int getLevel() {
            return this.level_;
        }

        public boolean hasPro() {
            return ((this.bitField0_ & 0x8) == 8);
        }

        public int getPro() {
            return this.pro_;
        }

        public boolean hasAreaName() {
            return ((this.bitField0_ & 0x10) == 16);
        }

        public String getAreaName() {
            Object ref = this.areaName_;
            if (ref instanceof String)
                return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8())
                this.areaName_ = s;
            return s;
        }

        public ByteString getAreaNameBytes() {
            Object ref = this.areaName_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.areaName_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasState() {
            return ((this.bitField0_ & 0x20) == 32);
        }

        public int getState() {
            return this.state_;
        }

        public boolean hasInvalidTime() {
            return ((this.bitField0_ & 0x40) == 64);
        }

        public int getInvalidTime() {
            return this.invalidTime_;
        }

        private void initFields() {
            this.id_ = "";
            this.name_ = "";
            this.level_ = 0;
            this.pro_ = 0;
            this.areaName_ = "";
            this.state_ = 0;
            this.invalidTime_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasName()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasLevel()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasPro()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAreaName()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasState()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasInvalidTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeBytes(1, getIdBytes());
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(2, getNameBytes());
            if ((this.bitField0_ & 0x4) == 4)
                output.writeInt32(3, this.level_);
            if ((this.bitField0_ & 0x8) == 8)
                output.writeInt32(4, this.pro_);
            if ((this.bitField0_ & 0x10) == 16)
                output.writeBytes(5, getAreaNameBytes());
            if ((this.bitField0_ & 0x20) == 32)
                output.writeInt32(6, this.state_);
            if ((this.bitField0_ & 0x40) == 64)
                output.writeInt32(7, this.invalidTime_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeBytesSize(1, getIdBytes());
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(2, getNameBytes());
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeInt32Size(3, this.level_);
            if ((this.bitField0_ & 0x8) == 8)
                size += CodedOutputStream.computeInt32Size(4, this.pro_);
            if ((this.bitField0_ & 0x10) == 16)
                size += CodedOutputStream.computeBytesSize(5, getAreaNameBytes());
            if ((this.bitField0_ & 0x20) == 32)
                size += CodedOutputStream.computeInt32Size(6, this.state_);
            if ((this.bitField0_ & 0x40) == 64)
                size += CodedOutputStream.computeInt32Size(7, this.invalidTime_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static InviteFriendInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (InviteFriendInfo) PARSER.parseFrom(data);
        }

        public static InviteFriendInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (InviteFriendInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static InviteFriendInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (InviteFriendInfo) PARSER.parseFrom(data);
        }

        public static InviteFriendInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (InviteFriendInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static InviteFriendInfo parseFrom(InputStream input) throws IOException {
            return (InviteFriendInfo) PARSER.parseFrom(input);
        }

        public static InviteFriendInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (InviteFriendInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static InviteFriendInfo parseDelimitedFrom(InputStream input) throws IOException {
            return (InviteFriendInfo) PARSER.parseDelimitedFrom(input);
        }

        public static InviteFriendInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (InviteFriendInfo) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static InviteFriendInfo parseFrom(CodedInputStream input) throws IOException {
            return (InviteFriendInfo) PARSER.parseFrom(input);
        }

        public static InviteFriendInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (InviteFriendInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(InviteFriendInfo prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.InviteFriendInfoOrBuilder {
            private int bitField0_;
            private Object id_;
            private Object name_;
            private int level_;
            private int pro_;
            private Object areaName_;
            private int state_;
            private int invalidTime_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_InviteFriendInfo_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_InviteFriendInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.InviteFriendInfo.class, Builder.class);
            }

            private Builder() {
                this.id_ = "";
                this.name_ = "";
                this.areaName_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.id_ = "";
                this.name_ = "";
                this.areaName_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.InviteFriendInfo.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.id_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                this.name_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                this.level_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                this.pro_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                this.areaName_ = "";
                this.bitField0_ &= 0xFFFFFFEF;
                this.state_ = 0;
                this.bitField0_ &= 0xFFFFFFDF;
                this.invalidTime_ = 0;
                this.bitField0_ &= 0xFFFFFFBF;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_InviteFriendInfo_descriptor;
            }

            public FightLevelHandler.InviteFriendInfo getDefaultInstanceForType() {
                return FightLevelHandler.InviteFriendInfo.getDefaultInstance();
            }

            public FightLevelHandler.InviteFriendInfo build() {
                FightLevelHandler.InviteFriendInfo result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.InviteFriendInfo buildPartial() {
                FightLevelHandler.InviteFriendInfo result = new FightLevelHandler.InviteFriendInfo(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.id_ = this.id_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.name_ = this.name_;
                if ((from_bitField0_ & 0x4) == 4)
                    to_bitField0_ |= 0x4;
                result.level_ = this.level_;
                if ((from_bitField0_ & 0x8) == 8)
                    to_bitField0_ |= 0x8;
                result.pro_ = this.pro_;
                if ((from_bitField0_ & 0x10) == 16)
                    to_bitField0_ |= 0x10;
                result.areaName_ = this.areaName_;
                if ((from_bitField0_ & 0x20) == 32)
                    to_bitField0_ |= 0x20;
                result.state_ = this.state_;
                if ((from_bitField0_ & 0x40) == 64)
                    to_bitField0_ |= 0x40;
                result.invalidTime_ = this.invalidTime_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.InviteFriendInfo)
                    return mergeFrom((FightLevelHandler.InviteFriendInfo) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.InviteFriendInfo other) {
                if (other == FightLevelHandler.InviteFriendInfo.getDefaultInstance())
                    return this;
                if (other.hasId()) {
                    this.bitField0_ |= 0x1;
                    this.id_ = other.id_;
                    onChanged();
                }
                if (other.hasName()) {
                    this.bitField0_ |= 0x2;
                    this.name_ = other.name_;
                    onChanged();
                }
                if (other.hasLevel())
                    setLevel(other.getLevel());
                if (other.hasPro())
                    setPro(other.getPro());
                if (other.hasAreaName()) {
                    this.bitField0_ |= 0x10;
                    this.areaName_ = other.areaName_;
                    onChanged();
                }
                if (other.hasState())
                    setState(other.getState());
                if (other.hasInvalidTime())
                    setInvalidTime(other.getInvalidTime());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasId())
                    return false;
                if (!hasName())
                    return false;
                if (!hasLevel())
                    return false;
                if (!hasPro())
                    return false;
                if (!hasAreaName())
                    return false;
                if (!hasState())
                    return false;
                if (!hasInvalidTime())
                    return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.InviteFriendInfo parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.InviteFriendInfo) FightLevelHandler.InviteFriendInfo.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.InviteFriendInfo) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public String getId() {
                Object ref = this.id_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.id_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getIdBytes() {
                Object ref = this.id_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.id_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setId(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.id_ = value;
                onChanged();
                return this;
            }

            public Builder clearId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.id_ = FightLevelHandler.InviteFriendInfo.getDefaultInstance().getId();
                onChanged();
                return this;
            }

            public Builder setIdBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.id_ = value;
                onChanged();
                return this;
            }

            public boolean hasName() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getName() {
                Object ref = this.name_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.name_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getNameBytes() {
                Object ref = this.name_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.name_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setName(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.name_ = value;
                onChanged();
                return this;
            }

            public Builder clearName() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.name_ = FightLevelHandler.InviteFriendInfo.getDefaultInstance().getName();
                onChanged();
                return this;
            }

            public Builder setNameBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.name_ = value;
                onChanged();
                return this;
            }

            public boolean hasLevel() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public int getLevel() {
                return this.level_;
            }

            public Builder setLevel(int value) {
                this.bitField0_ |= 0x4;
                this.level_ = value;
                onChanged();
                return this;
            }

            public Builder clearLevel() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.level_ = 0;
                onChanged();
                return this;
            }

            public boolean hasPro() {
                return ((this.bitField0_ & 0x8) == 8);
            }

            public int getPro() {
                return this.pro_;
            }

            public Builder setPro(int value) {
                this.bitField0_ |= 0x8;
                this.pro_ = value;
                onChanged();
                return this;
            }

            public Builder clearPro() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.pro_ = 0;
                onChanged();
                return this;
            }

            public boolean hasAreaName() {
                return ((this.bitField0_ & 0x10) == 16);
            }

            public String getAreaName() {
                Object ref = this.areaName_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.areaName_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getAreaNameBytes() {
                Object ref = this.areaName_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.areaName_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setAreaName(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x10;
                this.areaName_ = value;
                onChanged();
                return this;
            }

            public Builder clearAreaName() {
                this.bitField0_ &= 0xFFFFFFEF;
                this.areaName_ = FightLevelHandler.InviteFriendInfo.getDefaultInstance().getAreaName();
                onChanged();
                return this;
            }

            public Builder setAreaNameBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x10;
                this.areaName_ = value;
                onChanged();
                return this;
            }

            public boolean hasState() {
                return ((this.bitField0_ & 0x20) == 32);
            }

            public int getState() {
                return this.state_;
            }

            public Builder setState(int value) {
                this.bitField0_ |= 0x20;
                this.state_ = value;
                onChanged();
                return this;
            }

            public Builder clearState() {
                this.bitField0_ &= 0xFFFFFFDF;
                this.state_ = 0;
                onChanged();
                return this;
            }

            public boolean hasInvalidTime() {
                return ((this.bitField0_ & 0x40) == 64);
            }

            public int getInvalidTime() {
                return this.invalidTime_;
            }

            public Builder setInvalidTime(int value) {
                this.bitField0_ |= 0x40;
                this.invalidTime_ = value;
                onChanged();
                return this;
            }

            public Builder clearInvalidTime() {
                this.bitField0_ &= 0xFFFFFFBF;
                this.invalidTime_ = 0;
                onChanged();
                return this;
            }
        }
    }

    public static final class FubenListRequest extends GeneratedMessage implements FubenListRequestOrBuilder {
        private static final FubenListRequest defaultInstance = new FubenListRequest(true);
        private final UnknownFieldSet unknownFields;

        private FubenListRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private FubenListRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static FubenListRequest getDefaultInstance() {
            return defaultInstance;
        }

        public FubenListRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private FubenListRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.mapId_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.type_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_FubenListRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_FubenListRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FubenListRequest.class, Builder.class);
        }

        public static Parser<FubenListRequest> PARSER = (Parser<FubenListRequest>) new AbstractParser<FubenListRequest>() {
            public FightLevelHandler.FubenListRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.FubenListRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int MAPID_FIELD_NUMBER = 1;
        private int mapId_;
        public static final int TYPE_FIELD_NUMBER = 2;
        private int type_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<FubenListRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasMapId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getMapId() {
            return this.mapId_;
        }

        public boolean hasType() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getType() {
            return this.type_;
        }

        private void initFields() {
            this.mapId_ = 0;
            this.type_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasMapId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasType()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.mapId_);
            if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.type_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.mapId_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.type_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static FubenListRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (FubenListRequest) PARSER.parseFrom(data);
        }

        public static FubenListRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (FubenListRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static FubenListRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (FubenListRequest) PARSER.parseFrom(data);
        }

        public static FubenListRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (FubenListRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static FubenListRequest parseFrom(InputStream input) throws IOException {
            return (FubenListRequest) PARSER.parseFrom(input);
        }

        public static FubenListRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FubenListRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static FubenListRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (FubenListRequest) PARSER.parseDelimitedFrom(input);
        }

        public static FubenListRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FubenListRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static FubenListRequest parseFrom(CodedInputStream input) throws IOException {
            return (FubenListRequest) PARSER.parseFrom(input);
        }

        public static FubenListRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FubenListRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(FubenListRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.FubenListRequestOrBuilder {
            private int bitField0_;
            private int mapId_;
            private int type_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_FubenListRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_FubenListRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.FubenListRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.FubenListRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.mapId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.type_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_FubenListRequest_descriptor;
            }

            public FightLevelHandler.FubenListRequest getDefaultInstanceForType() {
                return FightLevelHandler.FubenListRequest.getDefaultInstance();
            }

            public FightLevelHandler.FubenListRequest build() {
                FightLevelHandler.FubenListRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.FubenListRequest buildPartial() {
                FightLevelHandler.FubenListRequest result = new FightLevelHandler.FubenListRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.mapId_ = this.mapId_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.type_ = this.type_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.FubenListRequest)
                    return mergeFrom((FightLevelHandler.FubenListRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.FubenListRequest other) {
                if (other == FightLevelHandler.FubenListRequest.getDefaultInstance()) return this;
                if (other.hasMapId()) setMapId(other.getMapId());
                if (other.hasType()) setType(other.getType());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasMapId()) return false;
                if (!hasType()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.FubenListRequest parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.FubenListRequest) FightLevelHandler.FubenListRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.FubenListRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasMapId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getMapId() {
                return this.mapId_;
            }

            public Builder setMapId(int value) {
                this.bitField0_ |= 0x1;
                this.mapId_ = value;
                onChanged();
                return this;
            }

            public Builder clearMapId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.mapId_ = 0;
                onChanged();
                return this;
            }

            public boolean hasType() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getType() {
                return this.type_;
            }

            public Builder setType(int value) {
                this.bitField0_ |= 0x2;
                this.type_ = value;
                onChanged();
                return this;
            }

            public Builder clearType() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.type_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class FubenListResponse
            extends GeneratedMessage
            implements FubenListResponseOrBuilder {
        private static final FubenListResponse defaultInstance = new FubenListResponse(true);
        private final UnknownFieldSet unknownFields;

        private FubenListResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private FubenListResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static FubenListResponse getDefaultInstance() {
            return defaultInstance;
        }

        public FubenListResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private FubenListResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                        case 26:
                            if ((mutable_bitField0_ & 0x4) != 4) {
                                this.s2CList_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x4;
                            }
                            this.s2CList_.add(input.readMessage(FightLevelHandler.FubenInfo.PARSER, extensionRegistry));
                            break;
                        case 32:
                            this.bitField0_ |= 0x4;
                            this.s2CHard_ = input.readInt32();
                            break;
                        case 40:
                            this.bitField0_ |= 0x8;
                            this.s2CAcross_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x4) == 4) this.s2CList_ = Collections.unmodifiableList(this.s2CList_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_FubenListResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_FubenListResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FubenListResponse.class, Builder.class);
        }

        public static Parser<FubenListResponse> PARSER = (Parser<FubenListResponse>) new AbstractParser<FubenListResponse>() {
            public FightLevelHandler.FubenListResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.FubenListResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int S2C_LIST_FIELD_NUMBER = 3;
        private List<FightLevelHandler.FubenInfo> s2CList_;
        public static final int S2C_HARD_FIELD_NUMBER = 4;
        private int s2CHard_;
        public static final int S2C_ACROSS_FIELD_NUMBER = 5;
        private int s2CAcross_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<FubenListResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        static {
            defaultInstance.initFields();
        }

        public List<FightLevelHandler.FubenInfo> getS2CListList() {
            return this.s2CList_;
        }

        public List<? extends FightLevelHandler.FubenInfoOrBuilder> getS2CListOrBuilderList() {
            return (List) this.s2CList_;
        }

        public int getS2CListCount() {
            return this.s2CList_.size();
        }

        public FightLevelHandler.FubenInfo getS2CList(int index) {
            return this.s2CList_.get(index);
        }

        public FightLevelHandler.FubenInfoOrBuilder getS2CListOrBuilder(int index) {
            return this.s2CList_.get(index);
        }

        public boolean hasS2CHard() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public int getS2CHard() {
            return this.s2CHard_;
        }

        public boolean hasS2CAcross() {
            return ((this.bitField0_ & 0x8) == 8);
        }

        public int getS2CAcross() {
            return this.s2CAcross_;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
            this.s2CList_ = Collections.emptyList();
            this.s2CHard_ = 0;
            this.s2CAcross_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getS2CListCount(); i++) {
                if (!getS2CList(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(2, getS2CMsgBytes());
            for (int i = 0; i < this.s2CList_.size(); i++)
                output.writeMessage(3, (MessageLite) this.s2CList_.get(i));
            if ((this.bitField0_ & 0x4) == 4)
                output.writeInt32(4, this.s2CHard_);
            if ((this.bitField0_ & 0x8) == 8)
                output.writeInt32(5, this.s2CAcross_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            for (int i = 0; i < this.s2CList_.size(); i++)
                size += CodedOutputStream.computeMessageSize(3, (MessageLite) this.s2CList_.get(i));
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeInt32Size(4, this.s2CHard_);
            if ((this.bitField0_ & 0x8) == 8)
                size += CodedOutputStream.computeInt32Size(5, this.s2CAcross_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static FubenListResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (FubenListResponse) PARSER.parseFrom(data);
        }

        public static FubenListResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (FubenListResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static FubenListResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (FubenListResponse) PARSER.parseFrom(data);
        }

        public static FubenListResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (FubenListResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static FubenListResponse parseFrom(InputStream input) throws IOException {
            return (FubenListResponse) PARSER.parseFrom(input);
        }

        public static FubenListResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FubenListResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static FubenListResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (FubenListResponse) PARSER.parseDelimitedFrom(input);
        }

        public static FubenListResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FubenListResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static FubenListResponse parseFrom(CodedInputStream input) throws IOException {
            return (FubenListResponse) PARSER.parseFrom(input);
        }

        public static FubenListResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FubenListResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(FubenListResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.FubenListResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;
            private List<FightLevelHandler.FubenInfo> s2CList_;
            private RepeatedFieldBuilder<FightLevelHandler.FubenInfo, FightLevelHandler.FubenInfo.Builder, FightLevelHandler.FubenInfoOrBuilder> s2CListBuilder_;
            private int s2CHard_;
            private int s2CAcross_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_FubenListResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_FubenListResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.FubenListResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                this.s2CList_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                this.s2CList_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.FubenListResponse.alwaysUseFieldBuilders)
                    getS2CListFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                if (this.s2CListBuilder_ == null) {
                    this.s2CList_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                } else {
                    this.s2CListBuilder_.clear();
                }
                this.s2CHard_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                this.s2CAcross_ = 0;
                this.bitField0_ &= 0xFFFFFFEF;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_FubenListResponse_descriptor;
            }

            public FightLevelHandler.FubenListResponse getDefaultInstanceForType() {
                return FightLevelHandler.FubenListResponse.getDefaultInstance();
            }

            public FightLevelHandler.FubenListResponse build() {
                FightLevelHandler.FubenListResponse result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.FubenListResponse buildPartial() {
                FightLevelHandler.FubenListResponse result = new FightLevelHandler.FubenListResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                if (this.s2CListBuilder_ == null) {
                    if ((this.bitField0_ & 0x4) == 4) {
                        this.s2CList_ = Collections.unmodifiableList(this.s2CList_);
                        this.bitField0_ &= 0xFFFFFFFB;
                    }
                    result.s2CList_ = this.s2CList_;
                } else {
                    result.s2CList_ = this.s2CListBuilder_.build();
                }
                if ((from_bitField0_ & 0x8) == 8)
                    to_bitField0_ |= 0x4;
                result.s2CHard_ = this.s2CHard_;
                if ((from_bitField0_ & 0x10) == 16)
                    to_bitField0_ |= 0x8;
                result.s2CAcross_ = this.s2CAcross_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.FubenListResponse)
                    return mergeFrom((FightLevelHandler.FubenListResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.FubenListResponse other) {
                if (other == FightLevelHandler.FubenListResponse.getDefaultInstance())
                    return this;
                if (other.hasS2CCode())
                    setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (this.s2CListBuilder_ == null) {
                    if (!other.s2CList_.isEmpty()) {
                        if (this.s2CList_.isEmpty()) {
                            this.s2CList_ = other.s2CList_;
                            this.bitField0_ &= 0xFFFFFFFB;
                        } else {
                            ensureS2CListIsMutable();
                            this.s2CList_.addAll(other.s2CList_);
                        }
                        onChanged();
                    }
                } else if (!other.s2CList_.isEmpty()) {
                    if (this.s2CListBuilder_.isEmpty()) {
                        this.s2CListBuilder_.dispose();
                        this.s2CListBuilder_ = null;
                        this.s2CList_ = other.s2CList_;
                        this.bitField0_ &= 0xFFFFFFFB;
                        this.s2CListBuilder_ = FightLevelHandler.FubenListResponse.alwaysUseFieldBuilders ? getS2CListFieldBuilder() : null;
                    } else {
                        this.s2CListBuilder_.addAllMessages(other.s2CList_);
                    }
                }
                if (other.hasS2CHard())
                    setS2CHard(other.getS2CHard());
                if (other.hasS2CAcross())
                    setS2CAcross(other.getS2CAcross());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode())
                    return false;
                for (int i = 0; i < getS2CListCount(); i++) {
                    if (!getS2CList(i).isInitialized())
                        return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.FubenListResponse parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.FubenListResponse) FightLevelHandler.FubenListResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.FubenListResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = FightLevelHandler.FubenListResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            private void ensureS2CListIsMutable() {
                if ((this.bitField0_ & 0x4) != 4) {
                    this.s2CList_ = new ArrayList<>(this.s2CList_);
                    this.bitField0_ |= 0x4;
                }
            }

            public List<FightLevelHandler.FubenInfo> getS2CListList() {
                if (this.s2CListBuilder_ == null)
                    return Collections.unmodifiableList(this.s2CList_);
                return this.s2CListBuilder_.getMessageList();
            }

            public int getS2CListCount() {
                if (this.s2CListBuilder_ == null)
                    return this.s2CList_.size();
                return this.s2CListBuilder_.getCount();
            }

            public FightLevelHandler.FubenInfo getS2CList(int index) {
                if (this.s2CListBuilder_ == null)
                    return this.s2CList_.get(index);
                return (FightLevelHandler.FubenInfo) this.s2CListBuilder_.getMessage(index);
            }

            public Builder setS2CList(int index, FightLevelHandler.FubenInfo value) {
                if (this.s2CListBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CListIsMutable();
                    this.s2CList_.set(index, value);
                    onChanged();
                } else {
                    this.s2CListBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setS2CList(int index, FightLevelHandler.FubenInfo.Builder builderForValue) {
                if (this.s2CListBuilder_ == null) {
                    ensureS2CListIsMutable();
                    this.s2CList_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CListBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addS2CList(FightLevelHandler.FubenInfo value) {
                if (this.s2CListBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CListIsMutable();
                    this.s2CList_.add(value);
                    onChanged();
                } else {
                    this.s2CListBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addS2CList(int index, FightLevelHandler.FubenInfo value) {
                if (this.s2CListBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CListIsMutable();
                    this.s2CList_.add(index, value);
                    onChanged();
                } else {
                    this.s2CListBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addS2CList(FightLevelHandler.FubenInfo.Builder builderForValue) {
                if (this.s2CListBuilder_ == null) {
                    ensureS2CListIsMutable();
                    this.s2CList_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.s2CListBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addS2CList(int index, FightLevelHandler.FubenInfo.Builder builderForValue) {
                if (this.s2CListBuilder_ == null) {
                    ensureS2CListIsMutable();
                    this.s2CList_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CListBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllS2CList(Iterable<? extends FightLevelHandler.FubenInfo> values) {
                if (this.s2CListBuilder_ == null) {
                    ensureS2CListIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.s2CList_);
                    onChanged();
                } else {
                    this.s2CListBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearS2CList() {
                if (this.s2CListBuilder_ == null) {
                    this.s2CList_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                    onChanged();
                } else {
                    this.s2CListBuilder_.clear();
                }
                return this;
            }

            public Builder removeS2CList(int index) {
                if (this.s2CListBuilder_ == null) {
                    ensureS2CListIsMutable();
                    this.s2CList_.remove(index);
                    onChanged();
                } else {
                    this.s2CListBuilder_.remove(index);
                }
                return this;
            }

            public FightLevelHandler.FubenInfo.Builder getS2CListBuilder(int index) {
                return (FightLevelHandler.FubenInfo.Builder) getS2CListFieldBuilder().getBuilder(index);
            }

            public FightLevelHandler.FubenInfoOrBuilder getS2CListOrBuilder(int index) {
                if (this.s2CListBuilder_ == null)
                    return this.s2CList_.get(index);
                return (FightLevelHandler.FubenInfoOrBuilder) this.s2CListBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends FightLevelHandler.FubenInfoOrBuilder> getS2CListOrBuilderList() {
                if (this.s2CListBuilder_ != null)
                    return this.s2CListBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.s2CList_);
            }

            public FightLevelHandler.FubenInfo.Builder addS2CListBuilder() {
                return (FightLevelHandler.FubenInfo.Builder) getS2CListFieldBuilder().addBuilder(FightLevelHandler.FubenInfo.getDefaultInstance());
            }

            public FightLevelHandler.FubenInfo.Builder addS2CListBuilder(int index) {
                return (FightLevelHandler.FubenInfo.Builder) getS2CListFieldBuilder().addBuilder(index, FightLevelHandler.FubenInfo.getDefaultInstance());
            }

            public List<FightLevelHandler.FubenInfo.Builder> getS2CListBuilderList() {
                return getS2CListFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<FightLevelHandler.FubenInfo, FightLevelHandler.FubenInfo.Builder, FightLevelHandler.FubenInfoOrBuilder> getS2CListFieldBuilder() {
                if (this.s2CListBuilder_ == null) {
                    this.s2CListBuilder_ = new RepeatedFieldBuilder(this.s2CList_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean());
                    this.s2CList_ = null;
                }
                return this.s2CListBuilder_;
            }

            public boolean hasS2CHard() {
                return ((this.bitField0_ & 0x8) == 8);
            }

            public int getS2CHard() {
                return this.s2CHard_;
            }

            public Builder setS2CHard(int value) {
                this.bitField0_ |= 0x8;
                this.s2CHard_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CHard() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.s2CHard_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CAcross() {
                return ((this.bitField0_ & 0x10) == 16);
            }

            public int getS2CAcross() {
                return this.s2CAcross_;
            }

            public Builder setS2CAcross(int value) {
                this.bitField0_ |= 0x10;
                this.s2CAcross_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CAcross() {
                this.bitField0_ &= 0xFFFFFFEF;
                this.s2CAcross_ = 0;
                onChanged();
                return this;
            }
        }
    }

    public static final class EnterDungeonRequest extends GeneratedMessage implements EnterDungeonRequestOrBuilder {
        private static final EnterDungeonRequest defaultInstance = new EnterDungeonRequest(true);
        private final UnknownFieldSet unknownFields;

        private EnterDungeonRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private EnterDungeonRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static EnterDungeonRequest getDefaultInstance() {
            return defaultInstance;
        }

        public EnterDungeonRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private EnterDungeonRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.c2SDungeonId_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_EnterDungeonRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_EnterDungeonRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(EnterDungeonRequest.class, Builder.class);
        }

        public static Parser<EnterDungeonRequest> PARSER = (Parser<EnterDungeonRequest>) new AbstractParser<EnterDungeonRequest>() {
            public FightLevelHandler.EnterDungeonRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.EnterDungeonRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int C2S_DUNGEONID_FIELD_NUMBER = 1;
        private int c2SDungeonId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<EnterDungeonRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasC2SDungeonId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getC2SDungeonId() {
            return this.c2SDungeonId_;
        }

        private void initFields() {
            this.c2SDungeonId_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasC2SDungeonId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.c2SDungeonId_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.c2SDungeonId_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static EnterDungeonRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (EnterDungeonRequest) PARSER.parseFrom(data);
        }

        public static EnterDungeonRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (EnterDungeonRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static EnterDungeonRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (EnterDungeonRequest) PARSER.parseFrom(data);
        }

        public static EnterDungeonRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (EnterDungeonRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static EnterDungeonRequest parseFrom(InputStream input) throws IOException {
            return (EnterDungeonRequest) PARSER.parseFrom(input);
        }

        public static EnterDungeonRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterDungeonRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static EnterDungeonRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (EnterDungeonRequest) PARSER.parseDelimitedFrom(input);
        }

        public static EnterDungeonRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterDungeonRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static EnterDungeonRequest parseFrom(CodedInputStream input) throws IOException {
            return (EnterDungeonRequest) PARSER.parseFrom(input);
        }

        public static EnterDungeonRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterDungeonRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(EnterDungeonRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.EnterDungeonRequestOrBuilder {
            private int bitField0_;
            private int c2SDungeonId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_EnterDungeonRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_EnterDungeonRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.EnterDungeonRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.EnterDungeonRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.c2SDungeonId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_EnterDungeonRequest_descriptor;
            }

            public FightLevelHandler.EnterDungeonRequest getDefaultInstanceForType() {
                return FightLevelHandler.EnterDungeonRequest.getDefaultInstance();
            }

            public FightLevelHandler.EnterDungeonRequest build() {
                FightLevelHandler.EnterDungeonRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.EnterDungeonRequest buildPartial() {
                FightLevelHandler.EnterDungeonRequest result = new FightLevelHandler.EnterDungeonRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.c2SDungeonId_ = this.c2SDungeonId_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.EnterDungeonRequest)
                    return mergeFrom((FightLevelHandler.EnterDungeonRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.EnterDungeonRequest other) {
                if (other == FightLevelHandler.EnterDungeonRequest.getDefaultInstance()) return this;
                if (other.hasC2SDungeonId()) setC2SDungeonId(other.getC2SDungeonId());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasC2SDungeonId()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.EnterDungeonRequest parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.EnterDungeonRequest) FightLevelHandler.EnterDungeonRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.EnterDungeonRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasC2SDungeonId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getC2SDungeonId() {
                return this.c2SDungeonId_;
            }

            public Builder setC2SDungeonId(int value) {
                this.bitField0_ |= 0x1;
                this.c2SDungeonId_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2SDungeonId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.c2SDungeonId_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class EnterDungeonResponse
            extends GeneratedMessage
            implements EnterDungeonResponseOrBuilder {
        private static final EnterDungeonResponse defaultInstance = new EnterDungeonResponse(true);
        private final UnknownFieldSet unknownFields;

        private EnterDungeonResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private EnterDungeonResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static EnterDungeonResponse getDefaultInstance() {
            return defaultInstance;
        }

        public EnterDungeonResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private EnterDungeonResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_EnterDungeonResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_EnterDungeonResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(EnterDungeonResponse.class, Builder.class);
        }

        public static Parser<EnterDungeonResponse> PARSER = (Parser<EnterDungeonResponse>) new AbstractParser<EnterDungeonResponse>() {
            public FightLevelHandler.EnterDungeonResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.EnterDungeonResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<EnterDungeonResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static EnterDungeonResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (EnterDungeonResponse) PARSER.parseFrom(data);
        }

        public static EnterDungeonResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (EnterDungeonResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static EnterDungeonResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (EnterDungeonResponse) PARSER.parseFrom(data);
        }

        public static EnterDungeonResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (EnterDungeonResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static EnterDungeonResponse parseFrom(InputStream input) throws IOException {
            return (EnterDungeonResponse) PARSER.parseFrom(input);
        }

        public static EnterDungeonResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterDungeonResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static EnterDungeonResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (EnterDungeonResponse) PARSER.parseDelimitedFrom(input);
        }

        public static EnterDungeonResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterDungeonResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static EnterDungeonResponse parseFrom(CodedInputStream input) throws IOException {
            return (EnterDungeonResponse) PARSER.parseFrom(input);
        }

        public static EnterDungeonResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterDungeonResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(EnterDungeonResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.EnterDungeonResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_EnterDungeonResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_EnterDungeonResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.EnterDungeonResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.EnterDungeonResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_EnterDungeonResponse_descriptor;
            }

            public FightLevelHandler.EnterDungeonResponse getDefaultInstanceForType() {
                return FightLevelHandler.EnterDungeonResponse.getDefaultInstance();
            }

            public FightLevelHandler.EnterDungeonResponse build() {
                FightLevelHandler.EnterDungeonResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.EnterDungeonResponse buildPartial() {
                FightLevelHandler.EnterDungeonResponse result = new FightLevelHandler.EnterDungeonResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.EnterDungeonResponse)
                    return mergeFrom((FightLevelHandler.EnterDungeonResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.EnterDungeonResponse other) {
                if (other == FightLevelHandler.EnterDungeonResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.EnterDungeonResponse parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.EnterDungeonResponse) FightLevelHandler.EnterDungeonResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.EnterDungeonResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = FightLevelHandler.EnterDungeonResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class ReplyEnterDungeonRequest
            extends GeneratedMessage
            implements ReplyEnterDungeonRequestOrBuilder {
        private static final ReplyEnterDungeonRequest defaultInstance = new ReplyEnterDungeonRequest(true);
        private final UnknownFieldSet unknownFields;

        private ReplyEnterDungeonRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private ReplyEnterDungeonRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static ReplyEnterDungeonRequest getDefaultInstance() {
            return defaultInstance;
        }

        public ReplyEnterDungeonRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private ReplyEnterDungeonRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.c2SType_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.c2SDungeonId_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_ReplyEnterDungeonRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_ReplyEnterDungeonRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ReplyEnterDungeonRequest.class, Builder.class);
        }

        public static Parser<ReplyEnterDungeonRequest> PARSER = (Parser<ReplyEnterDungeonRequest>) new AbstractParser<ReplyEnterDungeonRequest>() {
            public FightLevelHandler.ReplyEnterDungeonRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.ReplyEnterDungeonRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int C2S_TYPE_FIELD_NUMBER = 1;
        private int c2SType_;
        public static final int C2S_DUNGEONID_FIELD_NUMBER = 2;
        private int c2SDungeonId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<ReplyEnterDungeonRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasC2SType() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getC2SType() {
            return this.c2SType_;
        }

        public boolean hasC2SDungeonId() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getC2SDungeonId() {
            return this.c2SDungeonId_;
        }

        private void initFields() {
            this.c2SType_ = 0;
            this.c2SDungeonId_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasC2SType()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasC2SDungeonId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.c2SType_);
            if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.c2SDungeonId_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.c2SType_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.c2SDungeonId_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static ReplyEnterDungeonRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (ReplyEnterDungeonRequest) PARSER.parseFrom(data);
        }

        public static ReplyEnterDungeonRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (ReplyEnterDungeonRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static ReplyEnterDungeonRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (ReplyEnterDungeonRequest) PARSER.parseFrom(data);
        }

        public static ReplyEnterDungeonRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (ReplyEnterDungeonRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static ReplyEnterDungeonRequest parseFrom(InputStream input) throws IOException {
            return (ReplyEnterDungeonRequest) PARSER.parseFrom(input);
        }

        public static ReplyEnterDungeonRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ReplyEnterDungeonRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static ReplyEnterDungeonRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (ReplyEnterDungeonRequest) PARSER.parseDelimitedFrom(input);
        }

        public static ReplyEnterDungeonRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ReplyEnterDungeonRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static ReplyEnterDungeonRequest parseFrom(CodedInputStream input) throws IOException {
            return (ReplyEnterDungeonRequest) PARSER.parseFrom(input);
        }

        public static ReplyEnterDungeonRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ReplyEnterDungeonRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ReplyEnterDungeonRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.ReplyEnterDungeonRequestOrBuilder {
            private int bitField0_;
            private int c2SType_;
            private int c2SDungeonId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_ReplyEnterDungeonRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_ReplyEnterDungeonRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.ReplyEnterDungeonRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.ReplyEnterDungeonRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.c2SType_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.c2SDungeonId_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_ReplyEnterDungeonRequest_descriptor;
            }

            public FightLevelHandler.ReplyEnterDungeonRequest getDefaultInstanceForType() {
                return FightLevelHandler.ReplyEnterDungeonRequest.getDefaultInstance();
            }

            public FightLevelHandler.ReplyEnterDungeonRequest build() {
                FightLevelHandler.ReplyEnterDungeonRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.ReplyEnterDungeonRequest buildPartial() {
                FightLevelHandler.ReplyEnterDungeonRequest result = new FightLevelHandler.ReplyEnterDungeonRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.c2SType_ = this.c2SType_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.c2SDungeonId_ = this.c2SDungeonId_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.ReplyEnterDungeonRequest)
                    return mergeFrom((FightLevelHandler.ReplyEnterDungeonRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.ReplyEnterDungeonRequest other) {
                if (other == FightLevelHandler.ReplyEnterDungeonRequest.getDefaultInstance()) return this;
                if (other.hasC2SType()) setC2SType(other.getC2SType());
                if (other.hasC2SDungeonId()) setC2SDungeonId(other.getC2SDungeonId());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasC2SType()) return false;
                if (!hasC2SDungeonId()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.ReplyEnterDungeonRequest parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.ReplyEnterDungeonRequest) FightLevelHandler.ReplyEnterDungeonRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.ReplyEnterDungeonRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasC2SType() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getC2SType() {
                return this.c2SType_;
            }

            public Builder setC2SType(int value) {
                this.bitField0_ |= 0x1;
                this.c2SType_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2SType() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.c2SType_ = 0;
                onChanged();
                return this;
            }

            public boolean hasC2SDungeonId() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getC2SDungeonId() {
                return this.c2SDungeonId_;
            }

            public Builder setC2SDungeonId(int value) {
                this.bitField0_ |= 0x2;
                this.c2SDungeonId_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2SDungeonId() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.c2SDungeonId_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class ReplyEnterDungeonResponse
            extends GeneratedMessage
            implements ReplyEnterDungeonResponseOrBuilder {
        private static final ReplyEnterDungeonResponse defaultInstance = new ReplyEnterDungeonResponse(true);
        private final UnknownFieldSet unknownFields;

        private ReplyEnterDungeonResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private ReplyEnterDungeonResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static ReplyEnterDungeonResponse getDefaultInstance() {
            return defaultInstance;
        }

        public ReplyEnterDungeonResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private ReplyEnterDungeonResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_ReplyEnterDungeonResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_ReplyEnterDungeonResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ReplyEnterDungeonResponse.class, Builder.class);
        }

        public static Parser<ReplyEnterDungeonResponse> PARSER = (Parser<ReplyEnterDungeonResponse>) new AbstractParser<ReplyEnterDungeonResponse>() {
            public FightLevelHandler.ReplyEnterDungeonResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.ReplyEnterDungeonResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<ReplyEnterDungeonResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static ReplyEnterDungeonResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (ReplyEnterDungeonResponse) PARSER.parseFrom(data);
        }

        public static ReplyEnterDungeonResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (ReplyEnterDungeonResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static ReplyEnterDungeonResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (ReplyEnterDungeonResponse) PARSER.parseFrom(data);
        }

        public static ReplyEnterDungeonResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (ReplyEnterDungeonResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static ReplyEnterDungeonResponse parseFrom(InputStream input) throws IOException {
            return (ReplyEnterDungeonResponse) PARSER.parseFrom(input);
        }

        public static ReplyEnterDungeonResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ReplyEnterDungeonResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static ReplyEnterDungeonResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (ReplyEnterDungeonResponse) PARSER.parseDelimitedFrom(input);
        }

        public static ReplyEnterDungeonResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ReplyEnterDungeonResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static ReplyEnterDungeonResponse parseFrom(CodedInputStream input) throws IOException {
            return (ReplyEnterDungeonResponse) PARSER.parseFrom(input);
        }

        public static ReplyEnterDungeonResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ReplyEnterDungeonResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ReplyEnterDungeonResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.ReplyEnterDungeonResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_ReplyEnterDungeonResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_ReplyEnterDungeonResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.ReplyEnterDungeonResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.ReplyEnterDungeonResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_ReplyEnterDungeonResponse_descriptor;
            }

            public FightLevelHandler.ReplyEnterDungeonResponse getDefaultInstanceForType() {
                return FightLevelHandler.ReplyEnterDungeonResponse.getDefaultInstance();
            }

            public FightLevelHandler.ReplyEnterDungeonResponse build() {
                FightLevelHandler.ReplyEnterDungeonResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.ReplyEnterDungeonResponse buildPartial() {
                FightLevelHandler.ReplyEnterDungeonResponse result = new FightLevelHandler.ReplyEnterDungeonResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.ReplyEnterDungeonResponse)
                    return mergeFrom((FightLevelHandler.ReplyEnterDungeonResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.ReplyEnterDungeonResponse other) {
                if (other == FightLevelHandler.ReplyEnterDungeonResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.ReplyEnterDungeonResponse parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.ReplyEnterDungeonResponse) FightLevelHandler.ReplyEnterDungeonResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.ReplyEnterDungeonResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = FightLevelHandler.ReplyEnterDungeonResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class LeaveDungeonRequest
            extends GeneratedMessage
            implements LeaveDungeonRequestOrBuilder {
        private static final LeaveDungeonRequest defaultInstance = new LeaveDungeonRequest(true);
        private final UnknownFieldSet unknownFields;

        private LeaveDungeonRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private LeaveDungeonRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static LeaveDungeonRequest getDefaultInstance() {
            return defaultInstance;
        }

        public LeaveDungeonRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private LeaveDungeonRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_LeaveDungeonRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_LeaveDungeonRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(LeaveDungeonRequest.class, Builder.class);
        }

        public static Parser<LeaveDungeonRequest> PARSER = (Parser<LeaveDungeonRequest>) new AbstractParser<LeaveDungeonRequest>() {
            public FightLevelHandler.LeaveDungeonRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.LeaveDungeonRequest(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<LeaveDungeonRequest> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static LeaveDungeonRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (LeaveDungeonRequest) PARSER.parseFrom(data);
        }

        public static LeaveDungeonRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LeaveDungeonRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LeaveDungeonRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (LeaveDungeonRequest) PARSER.parseFrom(data);
        }

        public static LeaveDungeonRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LeaveDungeonRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LeaveDungeonRequest parseFrom(InputStream input) throws IOException {
            return (LeaveDungeonRequest) PARSER.parseFrom(input);
        }

        public static LeaveDungeonRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LeaveDungeonRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static LeaveDungeonRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (LeaveDungeonRequest) PARSER.parseDelimitedFrom(input);
        }

        public static LeaveDungeonRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LeaveDungeonRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static LeaveDungeonRequest parseFrom(CodedInputStream input) throws IOException {
            return (LeaveDungeonRequest) PARSER.parseFrom(input);
        }

        public static LeaveDungeonRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LeaveDungeonRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(LeaveDungeonRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.LeaveDungeonRequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_LeaveDungeonRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_LeaveDungeonRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.LeaveDungeonRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.LeaveDungeonRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_LeaveDungeonRequest_descriptor;
            }

            public FightLevelHandler.LeaveDungeonRequest getDefaultInstanceForType() {
                return FightLevelHandler.LeaveDungeonRequest.getDefaultInstance();
            }

            public FightLevelHandler.LeaveDungeonRequest build() {
                FightLevelHandler.LeaveDungeonRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.LeaveDungeonRequest buildPartial() {
                FightLevelHandler.LeaveDungeonRequest result = new FightLevelHandler.LeaveDungeonRequest(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.LeaveDungeonRequest)
                    return mergeFrom((FightLevelHandler.LeaveDungeonRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.LeaveDungeonRequest other) {
                if (other == FightLevelHandler.LeaveDungeonRequest.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.LeaveDungeonRequest parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.LeaveDungeonRequest) FightLevelHandler.LeaveDungeonRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.LeaveDungeonRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class LeaveDungeonResponse
            extends GeneratedMessage
            implements LeaveDungeonResponseOrBuilder {
        private static final LeaveDungeonResponse defaultInstance = new LeaveDungeonResponse(true);
        private final UnknownFieldSet unknownFields;

        private LeaveDungeonResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private LeaveDungeonResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static LeaveDungeonResponse getDefaultInstance() {
            return defaultInstance;
        }

        public LeaveDungeonResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private LeaveDungeonResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_LeaveDungeonResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_LeaveDungeonResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(LeaveDungeonResponse.class, Builder.class);
        }

        public static Parser<LeaveDungeonResponse> PARSER = (Parser<LeaveDungeonResponse>) new AbstractParser<LeaveDungeonResponse>() {
            public FightLevelHandler.LeaveDungeonResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.LeaveDungeonResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<LeaveDungeonResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static LeaveDungeonResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (LeaveDungeonResponse) PARSER.parseFrom(data);
        }

        public static LeaveDungeonResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LeaveDungeonResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LeaveDungeonResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (LeaveDungeonResponse) PARSER.parseFrom(data);
        }

        public static LeaveDungeonResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LeaveDungeonResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LeaveDungeonResponse parseFrom(InputStream input) throws IOException {
            return (LeaveDungeonResponse) PARSER.parseFrom(input);
        }

        public static LeaveDungeonResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LeaveDungeonResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static LeaveDungeonResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (LeaveDungeonResponse) PARSER.parseDelimitedFrom(input);
        }

        public static LeaveDungeonResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LeaveDungeonResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static LeaveDungeonResponse parseFrom(CodedInputStream input) throws IOException {
            return (LeaveDungeonResponse) PARSER.parseFrom(input);
        }

        public static LeaveDungeonResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LeaveDungeonResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(LeaveDungeonResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.LeaveDungeonResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_LeaveDungeonResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_LeaveDungeonResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.LeaveDungeonResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.LeaveDungeonResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_LeaveDungeonResponse_descriptor;
            }

            public FightLevelHandler.LeaveDungeonResponse getDefaultInstanceForType() {
                return FightLevelHandler.LeaveDungeonResponse.getDefaultInstance();
            }

            public FightLevelHandler.LeaveDungeonResponse build() {
                FightLevelHandler.LeaveDungeonResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.LeaveDungeonResponse buildPartial() {
                FightLevelHandler.LeaveDungeonResponse result = new FightLevelHandler.LeaveDungeonResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.LeaveDungeonResponse)
                    return mergeFrom((FightLevelHandler.LeaveDungeonResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.LeaveDungeonResponse other) {
                if (other == FightLevelHandler.LeaveDungeonResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.LeaveDungeonResponse parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.LeaveDungeonResponse) FightLevelHandler.LeaveDungeonResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.LeaveDungeonResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = FightLevelHandler.LeaveDungeonResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class MJItemMax
            extends GeneratedMessage
            implements MJItemMaxOrBuilder {
        private static final MJItemMax defaultInstance = new MJItemMax(true);
        private final UnknownFieldSet unknownFields;

        private MJItemMax(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private MJItemMax(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static MJItemMax getDefaultInstance() {
            return defaultInstance;
        }

        public MJItemMax getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private MJItemMax(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CTodayMl_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.s2CMaxMl_ = input.readInt32();
                            break;
                        case 26:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x4;
                            this.itemCode_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_MJItemMax_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_MJItemMax_fieldAccessorTable.ensureFieldAccessorsInitialized(MJItemMax.class, Builder.class);
        }

        public static Parser<MJItemMax> PARSER = (Parser<MJItemMax>) new AbstractParser<MJItemMax>() {
            public FightLevelHandler.MJItemMax parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.MJItemMax(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_TODAY_ML_FIELD_NUMBER = 1;
        private int s2CTodayMl_;
        public static final int S2C_MAX_ML_FIELD_NUMBER = 2;
        private int s2CMaxMl_;
        public static final int ITEMCODE_FIELD_NUMBER = 3;
        private Object itemCode_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<MJItemMax> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CTodayMl() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CTodayMl() {
            return this.s2CTodayMl_;
        }

        public boolean hasS2CMaxMl() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getS2CMaxMl() {
            return this.s2CMaxMl_;
        }

        public boolean hasItemCode() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public String getItemCode() {
            Object ref = this.itemCode_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.itemCode_ = s;
            return s;
        }

        public ByteString getItemCodeBytes() {
            Object ref = this.itemCode_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.itemCode_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CTodayMl_ = 0;
            this.s2CMaxMl_ = 0;
            this.itemCode_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CTodayMl()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2CMaxMl()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasItemCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CTodayMl_);
            if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.s2CMaxMl_);
            if ((this.bitField0_ & 0x4) == 4) output.writeBytes(3, getItemCodeBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CTodayMl_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.s2CMaxMl_);
            if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeBytesSize(3, getItemCodeBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static MJItemMax parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (MJItemMax) PARSER.parseFrom(data);
        }

        public static MJItemMax parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (MJItemMax) PARSER.parseFrom(data, extensionRegistry);
        }

        public static MJItemMax parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (MJItemMax) PARSER.parseFrom(data);
        }

        public static MJItemMax parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (MJItemMax) PARSER.parseFrom(data, extensionRegistry);
        }

        public static MJItemMax parseFrom(InputStream input) throws IOException {
            return (MJItemMax) PARSER.parseFrom(input);
        }

        public static MJItemMax parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (MJItemMax) PARSER.parseFrom(input, extensionRegistry);
        }

        public static MJItemMax parseDelimitedFrom(InputStream input) throws IOException {
            return (MJItemMax) PARSER.parseDelimitedFrom(input);
        }

        public static MJItemMax parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (MJItemMax) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static MJItemMax parseFrom(CodedInputStream input) throws IOException {
            return (MJItemMax) PARSER.parseFrom(input);
        }

        public static MJItemMax parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (MJItemMax) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(MJItemMax prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.MJItemMaxOrBuilder {
            private int bitField0_;
            private int s2CTodayMl_;
            private int s2CMaxMl_;
            private Object itemCode_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_MJItemMax_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_MJItemMax_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.MJItemMax.class, Builder.class);
            }

            private Builder() {
                this.itemCode_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.itemCode_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.MJItemMax.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CTodayMl_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMaxMl_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                this.itemCode_ = "";
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_MJItemMax_descriptor;
            }

            public FightLevelHandler.MJItemMax getDefaultInstanceForType() {
                return FightLevelHandler.MJItemMax.getDefaultInstance();
            }

            public FightLevelHandler.MJItemMax build() {
                FightLevelHandler.MJItemMax result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.MJItemMax buildPartial() {
                FightLevelHandler.MJItemMax result = new FightLevelHandler.MJItemMax(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CTodayMl_ = this.s2CTodayMl_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMaxMl_ = this.s2CMaxMl_;
                if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;
                result.itemCode_ = this.itemCode_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.MJItemMax) return mergeFrom((FightLevelHandler.MJItemMax) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.MJItemMax other) {
                if (other == FightLevelHandler.MJItemMax.getDefaultInstance()) return this;
                if (other.hasS2CTodayMl()) setS2CTodayMl(other.getS2CTodayMl());
                if (other.hasS2CMaxMl()) setS2CMaxMl(other.getS2CMaxMl());
                if (other.hasItemCode()) {
                    this.bitField0_ |= 0x4;
                    this.itemCode_ = other.itemCode_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CTodayMl()) return false;
                if (!hasS2CMaxMl()) return false;
                if (!hasItemCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.MJItemMax parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.MJItemMax) FightLevelHandler.MJItemMax.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.MJItemMax) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CTodayMl() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CTodayMl() {
                return this.s2CTodayMl_;
            }

            public Builder setS2CTodayMl(int value) {
                this.bitField0_ |= 0x1;
                this.s2CTodayMl_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CTodayMl() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CTodayMl_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMaxMl() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getS2CMaxMl() {
                return this.s2CMaxMl_;
            }

            public Builder setS2CMaxMl(int value) {
                this.bitField0_ |= 0x2;
                this.s2CMaxMl_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMaxMl() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMaxMl_ = 0;
                onChanged();
                return this;
            }

            public boolean hasItemCode() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public String getItemCode() {
                Object ref = this.itemCode_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.itemCode_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getItemCodeBytes() {
                Object ref = this.itemCode_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.itemCode_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setItemCode(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x4;
                this.itemCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearItemCode() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.itemCode_ = FightLevelHandler.MJItemMax.getDefaultInstance().getItemCode();
                onChanged();
                return this;
            }

            public Builder setItemCodeBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x4;
                this.itemCode_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class MapInfo
            extends GeneratedMessage
            implements MapInfoOrBuilder {
        private static final MapInfo defaultInstance = new MapInfo(true);
        private final UnknownFieldSet unknownFields;

        private MapInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private MapInfo(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static MapInfo getDefaultInstance() {
            return defaultInstance;
        }

        public MapInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private MapInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.mapId_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.bornBeginTime_ = input.readInt64();
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.bornEndTime_ = input.readInt64();
                            break;
                        case 34:
                            if ((mutable_bitField0_ & 0x8) != 8) {
                                this.monsterInfo_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x8;
                            }
                            this.monsterInfo_.add(input.readMessage(FightLevelHandler.MonsterInfo.PARSER, extensionRegistry));
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x8) == 8)
                    this.monsterInfo_ = Collections.unmodifiableList(this.monsterInfo_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_MapInfo_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_MapInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(MapInfo.class, Builder.class);
        }

        public static Parser<MapInfo> PARSER = (Parser<MapInfo>) new AbstractParser<MapInfo>() {
            public FightLevelHandler.MapInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.MapInfo(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int MAPID_FIELD_NUMBER = 1;
        private int mapId_;
        public static final int BORNBEGINTIME_FIELD_NUMBER = 2;
        private long bornBeginTime_;
        public static final int BORNENDTIME_FIELD_NUMBER = 3;
        private long bornEndTime_;
        public static final int MONSTERINFO_FIELD_NUMBER = 4;
        private List<FightLevelHandler.MonsterInfo> monsterInfo_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<MapInfo> getParserForType() {
            return PARSER;
        }

        public boolean hasMapId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getMapId() {
            return this.mapId_;
        }

        public boolean hasBornBeginTime() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public long getBornBeginTime() {
            return this.bornBeginTime_;
        }

        static {
            defaultInstance.initFields();
        }


        public boolean hasBornEndTime() {
            return ((this.bitField0_ & 0x4) == 4);
        }


        public long getBornEndTime() {
            return this.bornEndTime_;
        }


        public List<FightLevelHandler.MonsterInfo> getMonsterInfoList() {
            return this.monsterInfo_;
        }


        public List<? extends FightLevelHandler.MonsterInfoOrBuilder> getMonsterInfoOrBuilderList() {
            return (List) this.monsterInfo_;
        }


        public int getMonsterInfoCount() {
            return this.monsterInfo_.size();
        }


        public FightLevelHandler.MonsterInfo getMonsterInfo(int index) {
            return this.monsterInfo_.get(index);
        }


        public FightLevelHandler.MonsterInfoOrBuilder getMonsterInfoOrBuilder(int index) {
            return this.monsterInfo_.get(index);
        }


        private void initFields() {
            this.mapId_ = 0;
            this.bornBeginTime_ = 0L;
            this.bornEndTime_ = 0L;
            this.monsterInfo_ = Collections.emptyList();
        }


        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            if (!hasMapId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasBornBeginTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasBornEndTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getMonsterInfoCount(); i++) {
                if (!getMonsterInfo(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }


        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeInt32(1, this.mapId_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeInt64(2, this.bornBeginTime_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                output.writeInt64(3, this.bornEndTime_);
            }
            for (int i = 0; i < this.monsterInfo_.size(); i++) {
                output.writeMessage(4, (MessageLite) this.monsterInfo_.get(i));
            }
            getUnknownFields().writeTo(output);
        }


        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeInt32Size(1, this.mapId_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeInt64Size(2, this.bornBeginTime_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                size += CodedOutputStream.computeInt64Size(3, this.bornEndTime_);
            }
            for (int i = 0; i < this.monsterInfo_.size(); i++) {
                size += CodedOutputStream.computeMessageSize(4, (MessageLite) this.monsterInfo_.get(i));
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }


        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }


        public static MapInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (MapInfo) PARSER.parseFrom(data);
        }


        public static MapInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (MapInfo) PARSER.parseFrom(data, extensionRegistry);
        }


        public static MapInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (MapInfo) PARSER.parseFrom(data);
        }


        public static MapInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (MapInfo) PARSER.parseFrom(data, extensionRegistry);
        }


        public static MapInfo parseFrom(InputStream input) throws IOException {
            return (MapInfo) PARSER.parseFrom(input);
        }


        public static MapInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (MapInfo) PARSER.parseFrom(input, extensionRegistry);
        }


        public static MapInfo parseDelimitedFrom(InputStream input) throws IOException {
            return (MapInfo) PARSER.parseDelimitedFrom(input);
        }


        public static MapInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (MapInfo) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }


        public static MapInfo parseFrom(CodedInputStream input) throws IOException {
            return (MapInfo) PARSER.parseFrom(input);
        }


        public static MapInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (MapInfo) PARSER.parseFrom(input, extensionRegistry);
        }


        public static Builder newBuilder() {
            return Builder.create();
        }


        public Builder newBuilderForType() {
            return newBuilder();
        }


        public static Builder newBuilder(MapInfo prototype) {
            return newBuilder().mergeFrom(prototype);
        }


        public Builder toBuilder() {
            return newBuilder(this);
        }


        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }


        public static final class Builder
                extends GeneratedMessage.Builder<Builder>
                implements FightLevelHandler.MapInfoOrBuilder {
            private int bitField0_;


            private int mapId_;


            private long bornBeginTime_;


            private long bornEndTime_;


            private List<FightLevelHandler.MonsterInfo> monsterInfo_;


            private RepeatedFieldBuilder<FightLevelHandler.MonsterInfo, FightLevelHandler.MonsterInfo.Builder, FightLevelHandler.MonsterInfoOrBuilder> monsterInfoBuilder_;


            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_MapInfo_descriptor;
            }


            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_MapInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.MapInfo.class, Builder.class);
            }


            private Builder() {
                this.monsterInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }


            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.monsterInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }


            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.MapInfo.alwaysUseFieldBuilders) {
                    getMonsterInfoFieldBuilder();
                }
            }


            private static Builder create() {
                return new Builder();
            }


            public Builder clear() {
                super.clear();
                this.mapId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.bornBeginTime_ = 0L;
                this.bitField0_ &= 0xFFFFFFFD;
                this.bornEndTime_ = 0L;
                this.bitField0_ &= 0xFFFFFFFB;
                if (this.monsterInfoBuilder_ == null) {
                    this.monsterInfo_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFF7;
                } else {
                    this.monsterInfoBuilder_.clear();
                }
                return this;
            }


            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }


            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_MapInfo_descriptor;
            }


            public FightLevelHandler.MapInfo getDefaultInstanceForType() {
                return FightLevelHandler.MapInfo.getDefaultInstance();
            }


            public FightLevelHandler.MapInfo build() {
                FightLevelHandler.MapInfo result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }


            public FightLevelHandler.MapInfo buildPartial() {
                FightLevelHandler.MapInfo result = new FightLevelHandler.MapInfo(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) {
                    to_bitField0_ |= 0x1;
                }
                result.mapId_ = this.mapId_;
                if ((from_bitField0_ & 0x2) == 2) {
                    to_bitField0_ |= 0x2;
                }
                result.bornBeginTime_ = this.bornBeginTime_;
                if ((from_bitField0_ & 0x4) == 4) {
                    to_bitField0_ |= 0x4;
                }
                result.bornEndTime_ = this.bornEndTime_;
                if (this.monsterInfoBuilder_ == null) {
                    if ((this.bitField0_ & 0x8) == 8) {
                        this.monsterInfo_ = Collections.unmodifiableList(this.monsterInfo_);
                        this.bitField0_ &= 0xFFFFFFF7;
                    }
                    result.monsterInfo_ = this.monsterInfo_;
                } else {
                    result.monsterInfo_ = this.monsterInfoBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }


            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.MapInfo) {
                    return mergeFrom((FightLevelHandler.MapInfo) other);
                }
                super.mergeFrom(other);
                return this;
            }


            public Builder mergeFrom(FightLevelHandler.MapInfo other) {
                if (other == FightLevelHandler.MapInfo.getDefaultInstance()) {
                    return this;
                }
                if (other.hasMapId()) {
                    setMapId(other.getMapId());
                }
                if (other.hasBornBeginTime()) {
                    setBornBeginTime(other.getBornBeginTime());
                }
                if (other.hasBornEndTime()) {
                    setBornEndTime(other.getBornEndTime());
                }
                if (this.monsterInfoBuilder_ == null) {
                    if (!other.monsterInfo_.isEmpty()) {
                        if (this.monsterInfo_.isEmpty()) {
                            this.monsterInfo_ = other.monsterInfo_;
                            this.bitField0_ &= 0xFFFFFFF7;
                        } else {
                            ensureMonsterInfoIsMutable();
                            this.monsterInfo_.addAll(other.monsterInfo_);
                        }
                        onChanged();
                    }
                } else if (!other.monsterInfo_.isEmpty()) {
                    if (this.monsterInfoBuilder_.isEmpty()) {
                        this.monsterInfoBuilder_.dispose();
                        this.monsterInfoBuilder_ = null;
                        this.monsterInfo_ = other.monsterInfo_;
                        this.bitField0_ &= 0xFFFFFFF7;
                        this.monsterInfoBuilder_ = FightLevelHandler.MapInfo.alwaysUseFieldBuilders ? getMonsterInfoFieldBuilder() : null;
                    } else {
                        this.monsterInfoBuilder_.addAllMessages(other.monsterInfo_);
                    }
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }


            public final boolean isInitialized() {
                if (!hasMapId()) {
                    return false;
                }
                if (!hasBornBeginTime()) {
                    return false;
                }
                if (!hasBornEndTime()) {
                    return false;
                }
                for (int i = 0; i < getMonsterInfoCount(); i++) {
                    if (!getMonsterInfo(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }


            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.MapInfo parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.MapInfo) FightLevelHandler.MapInfo.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.MapInfo) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }


            public boolean hasMapId() {
                return ((this.bitField0_ & 0x1) == 1);
            }


            public int getMapId() {
                return this.mapId_;
            }


            public Builder setMapId(int value) {
                this.bitField0_ |= 0x1;
                this.mapId_ = value;
                onChanged();
                return this;
            }


            public Builder clearMapId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.mapId_ = 0;
                onChanged();
                return this;
            }


            public boolean hasBornBeginTime() {
                return ((this.bitField0_ & 0x2) == 2);
            }


            public long getBornBeginTime() {
                return this.bornBeginTime_;
            }


            public Builder setBornBeginTime(long value) {
                this.bitField0_ |= 0x2;
                this.bornBeginTime_ = value;
                onChanged();
                return this;
            }


            public Builder clearBornBeginTime() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.bornBeginTime_ = 0L;
                onChanged();
                return this;
            }


            public boolean hasBornEndTime() {
                return ((this.bitField0_ & 0x4) == 4);
            }


            public long getBornEndTime() {
                return this.bornEndTime_;
            }


            public Builder setBornEndTime(long value) {
                this.bitField0_ |= 0x4;
                this.bornEndTime_ = value;
                onChanged();
                return this;
            }


            public Builder clearBornEndTime() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.bornEndTime_ = 0L;
                onChanged();
                return this;
            }


            private void ensureMonsterInfoIsMutable() {
                if ((this.bitField0_ & 0x8) != 8) {
                    this.monsterInfo_ = new ArrayList<>(this.monsterInfo_);
                    this.bitField0_ |= 0x8;
                }
            }


            public List<FightLevelHandler.MonsterInfo> getMonsterInfoList() {
                if (this.monsterInfoBuilder_ == null) {
                    return Collections.unmodifiableList(this.monsterInfo_);
                }
                return this.monsterInfoBuilder_.getMessageList();
            }


            public int getMonsterInfoCount() {
                if (this.monsterInfoBuilder_ == null) {
                    return this.monsterInfo_.size();
                }
                return this.monsterInfoBuilder_.getCount();
            }


            public FightLevelHandler.MonsterInfo getMonsterInfo(int index) {
                if (this.monsterInfoBuilder_ == null) {
                    return this.monsterInfo_.get(index);
                }
                return (FightLevelHandler.MonsterInfo) this.monsterInfoBuilder_.getMessage(index);
            }


            public Builder setMonsterInfo(int index, FightLevelHandler.MonsterInfo value) {
                if (this.monsterInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureMonsterInfoIsMutable();
                    this.monsterInfo_.set(index, value);
                    onChanged();
                } else {
                    this.monsterInfoBuilder_.setMessage(index, value);
                }
                return this;
            }


            public Builder setMonsterInfo(int index, FightLevelHandler.MonsterInfo.Builder builderForValue) {
                if (this.monsterInfoBuilder_ == null) {
                    ensureMonsterInfoIsMutable();
                    this.monsterInfo_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.monsterInfoBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }


            public Builder addMonsterInfo(FightLevelHandler.MonsterInfo value) {
                if (this.monsterInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureMonsterInfoIsMutable();
                    this.monsterInfo_.add(value);
                    onChanged();
                } else {
                    this.monsterInfoBuilder_.addMessage(value);
                }
                return this;
            }


            public Builder addMonsterInfo(int index, FightLevelHandler.MonsterInfo value) {
                if (this.monsterInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureMonsterInfoIsMutable();
                    this.monsterInfo_.add(index, value);
                    onChanged();
                } else {
                    this.monsterInfoBuilder_.addMessage(index, value);
                }
                return this;
            }


            public Builder addMonsterInfo(FightLevelHandler.MonsterInfo.Builder builderForValue) {
                if (this.monsterInfoBuilder_ == null) {
                    ensureMonsterInfoIsMutable();
                    this.monsterInfo_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.monsterInfoBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }


            public Builder addMonsterInfo(int index, FightLevelHandler.MonsterInfo.Builder builderForValue) {
                if (this.monsterInfoBuilder_ == null) {
                    ensureMonsterInfoIsMutable();
                    this.monsterInfo_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.monsterInfoBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }


            public Builder addAllMonsterInfo(Iterable<? extends FightLevelHandler.MonsterInfo> values) {
                if (this.monsterInfoBuilder_ == null) {
                    ensureMonsterInfoIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.monsterInfo_);
                    onChanged();
                } else {
                    this.monsterInfoBuilder_.addAllMessages(values);
                }
                return this;
            }


            public Builder clearMonsterInfo() {
                if (this.monsterInfoBuilder_ == null) {
                    this.monsterInfo_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFF7;
                    onChanged();
                } else {
                    this.monsterInfoBuilder_.clear();
                }
                return this;
            }


            public Builder removeMonsterInfo(int index) {
                if (this.monsterInfoBuilder_ == null) {
                    ensureMonsterInfoIsMutable();
                    this.monsterInfo_.remove(index);
                    onChanged();
                } else {
                    this.monsterInfoBuilder_.remove(index);
                }
                return this;
            }


            public FightLevelHandler.MonsterInfo.Builder getMonsterInfoBuilder(int index) {
                return (FightLevelHandler.MonsterInfo.Builder) getMonsterInfoFieldBuilder().getBuilder(index);
            }


            public FightLevelHandler.MonsterInfoOrBuilder getMonsterInfoOrBuilder(int index) {
                if (this.monsterInfoBuilder_ == null) {
                    return this.monsterInfo_.get(index);
                }
                return (FightLevelHandler.MonsterInfoOrBuilder) this.monsterInfoBuilder_.getMessageOrBuilder(index);
            }


            public List<? extends FightLevelHandler.MonsterInfoOrBuilder> getMonsterInfoOrBuilderList() {
                if (this.monsterInfoBuilder_ != null) {
                    return this.monsterInfoBuilder_.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList((List) this.monsterInfo_);
            }


            public FightLevelHandler.MonsterInfo.Builder addMonsterInfoBuilder() {
                return (FightLevelHandler.MonsterInfo.Builder) getMonsterInfoFieldBuilder().addBuilder(FightLevelHandler.MonsterInfo.getDefaultInstance());
            }


            public FightLevelHandler.MonsterInfo.Builder addMonsterInfoBuilder(int index) {
                return (FightLevelHandler.MonsterInfo.Builder) getMonsterInfoFieldBuilder().addBuilder(index, FightLevelHandler.MonsterInfo.getDefaultInstance());
            }


            public List<FightLevelHandler.MonsterInfo.Builder> getMonsterInfoBuilderList() {
                return getMonsterInfoFieldBuilder().getBuilderList();
            }


            private RepeatedFieldBuilder<FightLevelHandler.MonsterInfo, FightLevelHandler.MonsterInfo.Builder, FightLevelHandler.MonsterInfoOrBuilder> getMonsterInfoFieldBuilder() {
                if (this.monsterInfoBuilder_ == null) {
                    this.monsterInfoBuilder_ = new RepeatedFieldBuilder(this.monsterInfo_, ((this.bitField0_ & 0x8) == 8), getParentForChildren(), isClean());
                    this.monsterInfo_ = null;
                }
                return this.monsterInfoBuilder_;
            }
        }
    }


    public static final class MemberData
            extends GeneratedMessage
            implements MemberDataOrBuilder {
        private static final MemberData defaultInstance = new MemberData(true);
        private final UnknownFieldSet unknownFields;

        private MemberData(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private MemberData(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static MemberData getDefaultInstance() {
            return defaultInstance;
        }

        public MemberData getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private MemberData(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.id_ = bs;
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.name_ = bs;
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.pro_ = input.readInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 0x8;
                            this.level_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_MemberData_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_MemberData_fieldAccessorTable.ensureFieldAccessorsInitialized(MemberData.class, Builder.class);
        }

        public static Parser<MemberData> PARSER = (Parser<MemberData>) new AbstractParser<MemberData>() {
            public FightLevelHandler.MemberData parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.MemberData(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int ID_FIELD_NUMBER = 1;
        private Object id_;
        public static final int NAME_FIELD_NUMBER = 2;
        private Object name_;
        public static final int PRO_FIELD_NUMBER = 3;
        private int pro_;
        public static final int LEVEL_FIELD_NUMBER = 4;
        private int level_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<MemberData> getParserForType() {
            return PARSER;
        }

        public boolean hasId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getId() {
            Object ref = this.id_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.id_ = s;
            return s;
        }

        public ByteString getIdBytes() {
            Object ref = this.id_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.id_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasName() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        static {
            defaultInstance.initFields();
        }

        public String getName() {
            Object ref = this.name_;
            if (ref instanceof String)
                return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8())
                this.name_ = s;
            return s;
        }

        public ByteString getNameBytes() {
            Object ref = this.name_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.name_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasPro() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public int getPro() {
            return this.pro_;
        }

        public boolean hasLevel() {
            return ((this.bitField0_ & 0x8) == 8);
        }

        public int getLevel() {
            return this.level_;
        }

        private void initFields() {
            this.id_ = "";
            this.name_ = "";
            this.pro_ = 0;
            this.level_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasName()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasPro()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasLevel()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeBytes(1, getIdBytes());
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(2, getNameBytes());
            if ((this.bitField0_ & 0x4) == 4)
                output.writeInt32(3, this.pro_);
            if ((this.bitField0_ & 0x8) == 8)
                output.writeInt32(4, this.level_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeBytesSize(1, getIdBytes());
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(2, getNameBytes());
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeInt32Size(3, this.pro_);
            if ((this.bitField0_ & 0x8) == 8)
                size += CodedOutputStream.computeInt32Size(4, this.level_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static MemberData parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (MemberData) PARSER.parseFrom(data);
        }

        public static MemberData parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (MemberData) PARSER.parseFrom(data, extensionRegistry);
        }

        public static MemberData parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (MemberData) PARSER.parseFrom(data);
        }

        public static MemberData parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (MemberData) PARSER.parseFrom(data, extensionRegistry);
        }

        public static MemberData parseFrom(InputStream input) throws IOException {
            return (MemberData) PARSER.parseFrom(input);
        }

        public static MemberData parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (MemberData) PARSER.parseFrom(input, extensionRegistry);
        }

        public static MemberData parseDelimitedFrom(InputStream input) throws IOException {
            return (MemberData) PARSER.parseDelimitedFrom(input);
        }

        public static MemberData parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (MemberData) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static MemberData parseFrom(CodedInputStream input) throws IOException {
            return (MemberData) PARSER.parseFrom(input);
        }

        public static MemberData parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (MemberData) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(MemberData prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.MemberDataOrBuilder {
            private int bitField0_;
            private Object id_;
            private Object name_;
            private int pro_;
            private int level_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_MemberData_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_MemberData_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.MemberData.class, Builder.class);
            }

            private Builder() {
                this.id_ = "";
                this.name_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.id_ = "";
                this.name_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.MemberData.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.id_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                this.name_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                this.pro_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                this.level_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_MemberData_descriptor;
            }

            public FightLevelHandler.MemberData getDefaultInstanceForType() {
                return FightLevelHandler.MemberData.getDefaultInstance();
            }

            public FightLevelHandler.MemberData build() {
                FightLevelHandler.MemberData result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.MemberData buildPartial() {
                FightLevelHandler.MemberData result = new FightLevelHandler.MemberData(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.id_ = this.id_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.name_ = this.name_;
                if ((from_bitField0_ & 0x4) == 4)
                    to_bitField0_ |= 0x4;
                result.pro_ = this.pro_;
                if ((from_bitField0_ & 0x8) == 8)
                    to_bitField0_ |= 0x8;
                result.level_ = this.level_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.MemberData)
                    return mergeFrom((FightLevelHandler.MemberData) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.MemberData other) {
                if (other == FightLevelHandler.MemberData.getDefaultInstance())
                    return this;
                if (other.hasId()) {
                    this.bitField0_ |= 0x1;
                    this.id_ = other.id_;
                    onChanged();
                }
                if (other.hasName()) {
                    this.bitField0_ |= 0x2;
                    this.name_ = other.name_;
                    onChanged();
                }
                if (other.hasPro())
                    setPro(other.getPro());
                if (other.hasLevel())
                    setLevel(other.getLevel());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasId())
                    return false;
                if (!hasName())
                    return false;
                if (!hasPro())
                    return false;
                if (!hasLevel())
                    return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.MemberData parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.MemberData) FightLevelHandler.MemberData.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.MemberData) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public String getId() {
                Object ref = this.id_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.id_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getIdBytes() {
                Object ref = this.id_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.id_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setId(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.id_ = value;
                onChanged();
                return this;
            }

            public Builder clearId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.id_ = FightLevelHandler.MemberData.getDefaultInstance().getId();
                onChanged();
                return this;
            }

            public Builder setIdBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.id_ = value;
                onChanged();
                return this;
            }

            public boolean hasName() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getName() {
                Object ref = this.name_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.name_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getNameBytes() {
                Object ref = this.name_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.name_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setName(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.name_ = value;
                onChanged();
                return this;
            }

            public Builder clearName() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.name_ = FightLevelHandler.MemberData.getDefaultInstance().getName();
                onChanged();
                return this;
            }

            public Builder setNameBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.name_ = value;
                onChanged();
                return this;
            }

            public boolean hasPro() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public int getPro() {
                return this.pro_;
            }

            public Builder setPro(int value) {
                this.bitField0_ |= 0x4;
                this.pro_ = value;
                onChanged();
                return this;
            }

            public Builder clearPro() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.pro_ = 0;
                onChanged();
                return this;
            }

            public boolean hasLevel() {
                return ((this.bitField0_ & 0x8) == 8);
            }

            public int getLevel() {
                return this.level_;
            }

            public Builder setLevel(int value) {
                this.bitField0_ |= 0x8;
                this.level_ = value;
                onChanged();
                return this;
            }

            public Builder clearLevel() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.level_ = 0;
                onChanged();
                return this;
            }
        }
    }

    public static final class WorldBossListRequest extends GeneratedMessage implements WorldBossListRequestOrBuilder {
        private static final WorldBossListRequest defaultInstance = new WorldBossListRequest(true);
        private final UnknownFieldSet unknownFields;

        private WorldBossListRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private WorldBossListRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static WorldBossListRequest getDefaultInstance() {
            return defaultInstance;
        }

        public WorldBossListRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private WorldBossListRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_WorldBossListRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_WorldBossListRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldBossListRequest.class, Builder.class);
        }

        public static Parser<WorldBossListRequest> PARSER = (Parser<WorldBossListRequest>) new AbstractParser<WorldBossListRequest>() {
            public FightLevelHandler.WorldBossListRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.WorldBossListRequest(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<WorldBossListRequest> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static WorldBossListRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (WorldBossListRequest) PARSER.parseFrom(data);
        }

        public static WorldBossListRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (WorldBossListRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static WorldBossListRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (WorldBossListRequest) PARSER.parseFrom(data);
        }

        public static WorldBossListRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (WorldBossListRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static WorldBossListRequest parseFrom(InputStream input) throws IOException {
            return (WorldBossListRequest) PARSER.parseFrom(input);
        }

        public static WorldBossListRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (WorldBossListRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static WorldBossListRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (WorldBossListRequest) PARSER.parseDelimitedFrom(input);
        }

        public static WorldBossListRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (WorldBossListRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static WorldBossListRequest parseFrom(CodedInputStream input) throws IOException {
            return (WorldBossListRequest) PARSER.parseFrom(input);
        }

        public static WorldBossListRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (WorldBossListRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(WorldBossListRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.WorldBossListRequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_WorldBossListRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_WorldBossListRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.WorldBossListRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.WorldBossListRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_WorldBossListRequest_descriptor;
            }

            public FightLevelHandler.WorldBossListRequest getDefaultInstanceForType() {
                return FightLevelHandler.WorldBossListRequest.getDefaultInstance();
            }

            public FightLevelHandler.WorldBossListRequest build() {
                FightLevelHandler.WorldBossListRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.WorldBossListRequest buildPartial() {
                FightLevelHandler.WorldBossListRequest result = new FightLevelHandler.WorldBossListRequest(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.WorldBossListRequest)
                    return mergeFrom((FightLevelHandler.WorldBossListRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.WorldBossListRequest other) {
                if (other == FightLevelHandler.WorldBossListRequest.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.WorldBossListRequest parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.WorldBossListRequest) FightLevelHandler.WorldBossListRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.WorldBossListRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class WorldBossListResponse
            extends GeneratedMessage
            implements WorldBossListResponseOrBuilder {
        private static final WorldBossListResponse defaultInstance = new WorldBossListResponse(true);
        private final UnknownFieldSet unknownFields;

        private WorldBossListResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private WorldBossListResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static WorldBossListResponse getDefaultInstance() {
            return defaultInstance;
        }

        public WorldBossListResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private WorldBossListResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                        case 26:
                            if ((mutable_bitField0_ & 0x4) != 4) {
                                this.mapInfos_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x4;
                            }
                            this.mapInfos_.add(input.readMessage(FightLevelHandler.MapInfo.PARSER, extensionRegistry));
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x4) == 4) this.mapInfos_ = Collections.unmodifiableList(this.mapInfos_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_WorldBossListResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_WorldBossListResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldBossListResponse.class, Builder.class);
        }

        public static Parser<WorldBossListResponse> PARSER = (Parser<WorldBossListResponse>) new AbstractParser<WorldBossListResponse>() {
            public FightLevelHandler.WorldBossListResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.WorldBossListResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int MAPINFOS_FIELD_NUMBER = 3;
        private List<FightLevelHandler.MapInfo> mapInfos_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<WorldBossListResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        static {
            defaultInstance.initFields();
        }

        public List<FightLevelHandler.MapInfo> getMapInfosList() {
            return this.mapInfos_;
        }

        public List<? extends FightLevelHandler.MapInfoOrBuilder> getMapInfosOrBuilderList() {
            return (List) this.mapInfos_;
        }

        public int getMapInfosCount() {
            return this.mapInfos_.size();
        }

        public FightLevelHandler.MapInfo getMapInfos(int index) {
            return this.mapInfos_.get(index);
        }

        public FightLevelHandler.MapInfoOrBuilder getMapInfosOrBuilder(int index) {
            return this.mapInfos_.get(index);
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
            this.mapInfos_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getMapInfosCount(); i++) {
                if (!getMapInfos(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(2, getS2CMsgBytes());
            for (int i = 0; i < this.mapInfos_.size(); i++)
                output.writeMessage(3, (MessageLite) this.mapInfos_.get(i));
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            for (int i = 0; i < this.mapInfos_.size(); i++)
                size += CodedOutputStream.computeMessageSize(3, (MessageLite) this.mapInfos_.get(i));
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static WorldBossListResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (WorldBossListResponse) PARSER.parseFrom(data);
        }

        public static WorldBossListResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (WorldBossListResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static WorldBossListResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (WorldBossListResponse) PARSER.parseFrom(data);
        }

        public static WorldBossListResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (WorldBossListResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static WorldBossListResponse parseFrom(InputStream input) throws IOException {
            return (WorldBossListResponse) PARSER.parseFrom(input);
        }

        public static WorldBossListResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (WorldBossListResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static WorldBossListResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (WorldBossListResponse) PARSER.parseDelimitedFrom(input);
        }

        public static WorldBossListResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (WorldBossListResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static WorldBossListResponse parseFrom(CodedInputStream input) throws IOException {
            return (WorldBossListResponse) PARSER.parseFrom(input);
        }

        public static WorldBossListResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (WorldBossListResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(WorldBossListResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.WorldBossListResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;
            private List<FightLevelHandler.MapInfo> mapInfos_;
            private RepeatedFieldBuilder<FightLevelHandler.MapInfo, FightLevelHandler.MapInfo.Builder, FightLevelHandler.MapInfoOrBuilder> mapInfosBuilder_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_WorldBossListResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_WorldBossListResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.WorldBossListResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                this.mapInfos_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                this.mapInfos_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.WorldBossListResponse.alwaysUseFieldBuilders)
                    getMapInfosFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                if (this.mapInfosBuilder_ == null) {
                    this.mapInfos_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                } else {
                    this.mapInfosBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_WorldBossListResponse_descriptor;
            }

            public FightLevelHandler.WorldBossListResponse getDefaultInstanceForType() {
                return FightLevelHandler.WorldBossListResponse.getDefaultInstance();
            }

            public FightLevelHandler.WorldBossListResponse build() {
                FightLevelHandler.WorldBossListResponse result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.WorldBossListResponse buildPartial() {
                FightLevelHandler.WorldBossListResponse result = new FightLevelHandler.WorldBossListResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                if (this.mapInfosBuilder_ == null) {
                    if ((this.bitField0_ & 0x4) == 4) {
                        this.mapInfos_ = Collections.unmodifiableList(this.mapInfos_);
                        this.bitField0_ &= 0xFFFFFFFB;
                    }
                    result.mapInfos_ = this.mapInfos_;
                } else {
                    result.mapInfos_ = this.mapInfosBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.WorldBossListResponse)
                    return mergeFrom((FightLevelHandler.WorldBossListResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.WorldBossListResponse other) {
                if (other == FightLevelHandler.WorldBossListResponse.getDefaultInstance())
                    return this;
                if (other.hasS2CCode())
                    setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (this.mapInfosBuilder_ == null) {
                    if (!other.mapInfos_.isEmpty()) {
                        if (this.mapInfos_.isEmpty()) {
                            this.mapInfos_ = other.mapInfos_;
                            this.bitField0_ &= 0xFFFFFFFB;
                        } else {
                            ensureMapInfosIsMutable();
                            this.mapInfos_.addAll(other.mapInfos_);
                        }
                        onChanged();
                    }
                } else if (!other.mapInfos_.isEmpty()) {
                    if (this.mapInfosBuilder_.isEmpty()) {
                        this.mapInfosBuilder_.dispose();
                        this.mapInfosBuilder_ = null;
                        this.mapInfos_ = other.mapInfos_;
                        this.bitField0_ &= 0xFFFFFFFB;
                        this.mapInfosBuilder_ = FightLevelHandler.WorldBossListResponse.alwaysUseFieldBuilders ? getMapInfosFieldBuilder() : null;
                    } else {
                        this.mapInfosBuilder_.addAllMessages(other.mapInfos_);
                    }
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode())
                    return false;
                for (int i = 0; i < getMapInfosCount(); i++) {
                    if (!getMapInfos(i).isInitialized())
                        return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.WorldBossListResponse parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.WorldBossListResponse) FightLevelHandler.WorldBossListResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.WorldBossListResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = FightLevelHandler.WorldBossListResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            private void ensureMapInfosIsMutable() {
                if ((this.bitField0_ & 0x4) != 4) {
                    this.mapInfos_ = new ArrayList<>(this.mapInfos_);
                    this.bitField0_ |= 0x4;
                }
            }

            public List<FightLevelHandler.MapInfo> getMapInfosList() {
                if (this.mapInfosBuilder_ == null)
                    return Collections.unmodifiableList(this.mapInfos_);
                return this.mapInfosBuilder_.getMessageList();
            }

            public int getMapInfosCount() {
                if (this.mapInfosBuilder_ == null)
                    return this.mapInfos_.size();
                return this.mapInfosBuilder_.getCount();
            }

            public FightLevelHandler.MapInfo getMapInfos(int index) {
                if (this.mapInfosBuilder_ == null)
                    return this.mapInfos_.get(index);
                return (FightLevelHandler.MapInfo) this.mapInfosBuilder_.getMessage(index);
            }

            public Builder setMapInfos(int index, FightLevelHandler.MapInfo value) {
                if (this.mapInfosBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureMapInfosIsMutable();
                    this.mapInfos_.set(index, value);
                    onChanged();
                } else {
                    this.mapInfosBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setMapInfos(int index, FightLevelHandler.MapInfo.Builder builderForValue) {
                if (this.mapInfosBuilder_ == null) {
                    ensureMapInfosIsMutable();
                    this.mapInfos_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.mapInfosBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addMapInfos(FightLevelHandler.MapInfo value) {
                if (this.mapInfosBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureMapInfosIsMutable();
                    this.mapInfos_.add(value);
                    onChanged();
                } else {
                    this.mapInfosBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addMapInfos(int index, FightLevelHandler.MapInfo value) {
                if (this.mapInfosBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureMapInfosIsMutable();
                    this.mapInfos_.add(index, value);
                    onChanged();
                } else {
                    this.mapInfosBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addMapInfos(FightLevelHandler.MapInfo.Builder builderForValue) {
                if (this.mapInfosBuilder_ == null) {
                    ensureMapInfosIsMutable();
                    this.mapInfos_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.mapInfosBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addMapInfos(int index, FightLevelHandler.MapInfo.Builder builderForValue) {
                if (this.mapInfosBuilder_ == null) {
                    ensureMapInfosIsMutable();
                    this.mapInfos_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.mapInfosBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllMapInfos(Iterable<? extends FightLevelHandler.MapInfo> values) {
                if (this.mapInfosBuilder_ == null) {
                    ensureMapInfosIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.mapInfos_);
                    onChanged();
                } else {
                    this.mapInfosBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearMapInfos() {
                if (this.mapInfosBuilder_ == null) {
                    this.mapInfos_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                    onChanged();
                } else {
                    this.mapInfosBuilder_.clear();
                }
                return this;
            }

            public Builder removeMapInfos(int index) {
                if (this.mapInfosBuilder_ == null) {
                    ensureMapInfosIsMutable();
                    this.mapInfos_.remove(index);
                    onChanged();
                } else {
                    this.mapInfosBuilder_.remove(index);
                }
                return this;
            }

            public FightLevelHandler.MapInfo.Builder getMapInfosBuilder(int index) {
                return (FightLevelHandler.MapInfo.Builder) getMapInfosFieldBuilder().getBuilder(index);
            }

            public FightLevelHandler.MapInfoOrBuilder getMapInfosOrBuilder(int index) {
                if (this.mapInfosBuilder_ == null)
                    return this.mapInfos_.get(index);
                return (FightLevelHandler.MapInfoOrBuilder) this.mapInfosBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends FightLevelHandler.MapInfoOrBuilder> getMapInfosOrBuilderList() {
                if (this.mapInfosBuilder_ != null)
                    return this.mapInfosBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.mapInfos_);
            }

            public FightLevelHandler.MapInfo.Builder addMapInfosBuilder() {
                return (FightLevelHandler.MapInfo.Builder) getMapInfosFieldBuilder().addBuilder(FightLevelHandler.MapInfo.getDefaultInstance());
            }

            public FightLevelHandler.MapInfo.Builder addMapInfosBuilder(int index) {
                return (FightLevelHandler.MapInfo.Builder) getMapInfosFieldBuilder().addBuilder(index, FightLevelHandler.MapInfo.getDefaultInstance());
            }

            public List<FightLevelHandler.MapInfo.Builder> getMapInfosBuilderList() {
                return getMapInfosFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<FightLevelHandler.MapInfo, FightLevelHandler.MapInfo.Builder, FightLevelHandler.MapInfoOrBuilder> getMapInfosFieldBuilder() {
                if (this.mapInfosBuilder_ == null) {
                    this.mapInfosBuilder_ = new RepeatedFieldBuilder(this.mapInfos_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean());
                    this.mapInfos_ = null;
                }
                return this.mapInfosBuilder_;
            }
        }
    }

    public static final class PalaceListRequest extends GeneratedMessage implements PalaceListRequestOrBuilder {
        private static final PalaceListRequest defaultInstance = new PalaceListRequest(true);
        private final UnknownFieldSet unknownFields;

        private PalaceListRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private PalaceListRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static PalaceListRequest getDefaultInstance() {
            return defaultInstance;
        }

        public PalaceListRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private PalaceListRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CType_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_PalaceListRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_PalaceListRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PalaceListRequest.class, Builder.class);
        }

        public static Parser<PalaceListRequest> PARSER = (Parser<PalaceListRequest>) new AbstractParser<PalaceListRequest>() {
            public FightLevelHandler.PalaceListRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.PalaceListRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_TYPE_FIELD_NUMBER = 1;
        private int s2CType_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<PalaceListRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CType() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CType() {
            return this.s2CType_;
        }

        private void initFields() {
            this.s2CType_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CType()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CType_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CType_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static PalaceListRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (PalaceListRequest) PARSER.parseFrom(data);
        }

        public static PalaceListRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (PalaceListRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static PalaceListRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (PalaceListRequest) PARSER.parseFrom(data);
        }

        public static PalaceListRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (PalaceListRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static PalaceListRequest parseFrom(InputStream input) throws IOException {
            return (PalaceListRequest) PARSER.parseFrom(input);
        }

        public static PalaceListRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (PalaceListRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static PalaceListRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (PalaceListRequest) PARSER.parseDelimitedFrom(input);
        }

        public static PalaceListRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (PalaceListRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static PalaceListRequest parseFrom(CodedInputStream input) throws IOException {
            return (PalaceListRequest) PARSER.parseFrom(input);
        }

        public static PalaceListRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (PalaceListRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(PalaceListRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.PalaceListRequestOrBuilder {
            private int bitField0_;
            private int s2CType_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_PalaceListRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_PalaceListRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.PalaceListRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.PalaceListRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CType_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_PalaceListRequest_descriptor;
            }

            public FightLevelHandler.PalaceListRequest getDefaultInstanceForType() {
                return FightLevelHandler.PalaceListRequest.getDefaultInstance();
            }

            public FightLevelHandler.PalaceListRequest build() {
                FightLevelHandler.PalaceListRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.PalaceListRequest buildPartial() {
                FightLevelHandler.PalaceListRequest result = new FightLevelHandler.PalaceListRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CType_ = this.s2CType_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.PalaceListRequest)
                    return mergeFrom((FightLevelHandler.PalaceListRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.PalaceListRequest other) {
                if (other == FightLevelHandler.PalaceListRequest.getDefaultInstance()) return this;
                if (other.hasS2CType()) setS2CType(other.getS2CType());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CType()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.PalaceListRequest parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.PalaceListRequest) FightLevelHandler.PalaceListRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.PalaceListRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CType() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CType() {
                return this.s2CType_;
            }

            public Builder setS2CType(int value) {
                this.bitField0_ |= 0x1;
                this.s2CType_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CType() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CType_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class PalaceInfo
            extends GeneratedMessage
            implements PalaceInfoOrBuilder {
        private static final PalaceInfo defaultInstance = new PalaceInfo(true);
        private final UnknownFieldSet unknownFields;

        private PalaceInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private PalaceInfo(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static PalaceInfo getDefaultInstance() {
            return defaultInstance;
        }

        public PalaceInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private PalaceInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.mapId_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.monsterId_ = input.readInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.time_ = input.readInt64();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_PalaceInfo_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_PalaceInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(PalaceInfo.class, Builder.class);
        }

        public static Parser<PalaceInfo> PARSER = (Parser<PalaceInfo>) new AbstractParser<PalaceInfo>() {
            public FightLevelHandler.PalaceInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.PalaceInfo(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int MAPID_FIELD_NUMBER = 1;
        private int mapId_;
        public static final int MONSTERID_FIELD_NUMBER = 2;
        private int monsterId_;
        public static final int TIME_FIELD_NUMBER = 3;
        private long time_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<PalaceInfo> getParserForType() {
            return PARSER;
        }

        public boolean hasMapId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getMapId() {
            return this.mapId_;
        }

        public boolean hasMonsterId() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getMonsterId() {
            return this.monsterId_;
        }

        public boolean hasTime() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public long getTime() {
            return this.time_;
        }

        private void initFields() {
            this.mapId_ = 0;
            this.monsterId_ = 0;
            this.time_ = 0L;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasMapId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasMonsterId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.mapId_);
            if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.monsterId_);
            if ((this.bitField0_ & 0x4) == 4) output.writeInt64(3, this.time_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.mapId_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.monsterId_);
            if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt64Size(3, this.time_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static PalaceInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (PalaceInfo) PARSER.parseFrom(data);
        }

        public static PalaceInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (PalaceInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static PalaceInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (PalaceInfo) PARSER.parseFrom(data);
        }

        public static PalaceInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (PalaceInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static PalaceInfo parseFrom(InputStream input) throws IOException {
            return (PalaceInfo) PARSER.parseFrom(input);
        }

        public static PalaceInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (PalaceInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static PalaceInfo parseDelimitedFrom(InputStream input) throws IOException {
            return (PalaceInfo) PARSER.parseDelimitedFrom(input);
        }

        public static PalaceInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (PalaceInfo) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static PalaceInfo parseFrom(CodedInputStream input) throws IOException {
            return (PalaceInfo) PARSER.parseFrom(input);
        }

        public static PalaceInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (PalaceInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(PalaceInfo prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.PalaceInfoOrBuilder {
            private int bitField0_;
            private int mapId_;
            private int monsterId_;
            private long time_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_PalaceInfo_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_PalaceInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.PalaceInfo.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.PalaceInfo.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.mapId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.monsterId_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                this.time_ = 0L;
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_PalaceInfo_descriptor;
            }

            public FightLevelHandler.PalaceInfo getDefaultInstanceForType() {
                return FightLevelHandler.PalaceInfo.getDefaultInstance();
            }

            public FightLevelHandler.PalaceInfo build() {
                FightLevelHandler.PalaceInfo result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.PalaceInfo buildPartial() {
                FightLevelHandler.PalaceInfo result = new FightLevelHandler.PalaceInfo(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.mapId_ = this.mapId_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.monsterId_ = this.monsterId_;
                if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;
                result.time_ = this.time_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.PalaceInfo)
                    return mergeFrom((FightLevelHandler.PalaceInfo) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.PalaceInfo other) {
                if (other == FightLevelHandler.PalaceInfo.getDefaultInstance()) return this;
                if (other.hasMapId()) setMapId(other.getMapId());
                if (other.hasMonsterId()) setMonsterId(other.getMonsterId());
                if (other.hasTime()) setTime(other.getTime());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasMapId()) return false;
                if (!hasMonsterId()) return false;
                if (!hasTime()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.PalaceInfo parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.PalaceInfo) FightLevelHandler.PalaceInfo.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.PalaceInfo) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasMapId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getMapId() {
                return this.mapId_;
            }

            public Builder setMapId(int value) {
                this.bitField0_ |= 0x1;
                this.mapId_ = value;
                onChanged();
                return this;
            }

            public Builder clearMapId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.mapId_ = 0;
                onChanged();
                return this;
            }

            public boolean hasMonsterId() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getMonsterId() {
                return this.monsterId_;
            }

            public Builder setMonsterId(int value) {
                this.bitField0_ |= 0x2;
                this.monsterId_ = value;
                onChanged();
                return this;
            }

            public Builder clearMonsterId() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.monsterId_ = 0;
                onChanged();
                return this;
            }

            public boolean hasTime() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public long getTime() {
                return this.time_;
            }

            public Builder setTime(long value) {
                this.bitField0_ |= 0x4;
                this.time_ = value;
                onChanged();
                return this;
            }

            public Builder clearTime() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.time_ = 0L;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class PalaceListResponse
            extends GeneratedMessage
            implements PalaceListResponseOrBuilder {
        private static final PalaceListResponse defaultInstance = new PalaceListResponse(true);
        private final UnknownFieldSet unknownFields;

        private PalaceListResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private PalaceListResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static PalaceListResponse getDefaultInstance() {
            return defaultInstance;
        }

        public PalaceListResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private PalaceListResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                        case 26:
                            if ((mutable_bitField0_ & 0x4) != 4) {
                                this.s2CPalaceInfos_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x4;
                            }
                            this.s2CPalaceInfos_.add(input.readMessage(FightLevelHandler.PalaceInfo.PARSER, extensionRegistry));
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x4) == 4)
                    this.s2CPalaceInfos_ = Collections.unmodifiableList(this.s2CPalaceInfos_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_PalaceListResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_PalaceListResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PalaceListResponse.class, Builder.class);
        }

        public static Parser<PalaceListResponse> PARSER = (Parser<PalaceListResponse>) new AbstractParser<PalaceListResponse>() {
            public FightLevelHandler.PalaceListResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.PalaceListResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int S2C_PALACEINFOS_FIELD_NUMBER = 3;
        private List<FightLevelHandler.PalaceInfo> s2CPalaceInfos_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<PalaceListResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        static {
            defaultInstance.initFields();
        }

        public List<FightLevelHandler.PalaceInfo> getS2CPalaceInfosList() {
            return this.s2CPalaceInfos_;
        }

        public List<? extends FightLevelHandler.PalaceInfoOrBuilder> getS2CPalaceInfosOrBuilderList() {
            return (List) this.s2CPalaceInfos_;
        }

        public int getS2CPalaceInfosCount() {
            return this.s2CPalaceInfos_.size();
        }

        public FightLevelHandler.PalaceInfo getS2CPalaceInfos(int index) {
            return this.s2CPalaceInfos_.get(index);
        }

        public FightLevelHandler.PalaceInfoOrBuilder getS2CPalaceInfosOrBuilder(int index) {
            return this.s2CPalaceInfos_.get(index);
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
            this.s2CPalaceInfos_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getS2CPalaceInfosCount(); i++) {
                if (!getS2CPalaceInfos(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(2, getS2CMsgBytes());
            for (int i = 0; i < this.s2CPalaceInfos_.size(); i++)
                output.writeMessage(3, (MessageLite) this.s2CPalaceInfos_.get(i));
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            for (int i = 0; i < this.s2CPalaceInfos_.size(); i++)
                size += CodedOutputStream.computeMessageSize(3, (MessageLite) this.s2CPalaceInfos_.get(i));
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static PalaceListResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (PalaceListResponse) PARSER.parseFrom(data);
        }

        public static PalaceListResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (PalaceListResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static PalaceListResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (PalaceListResponse) PARSER.parseFrom(data);
        }

        public static PalaceListResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (PalaceListResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static PalaceListResponse parseFrom(InputStream input) throws IOException {
            return (PalaceListResponse) PARSER.parseFrom(input);
        }

        public static PalaceListResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (PalaceListResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static PalaceListResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (PalaceListResponse) PARSER.parseDelimitedFrom(input);
        }

        public static PalaceListResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (PalaceListResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static PalaceListResponse parseFrom(CodedInputStream input) throws IOException {
            return (PalaceListResponse) PARSER.parseFrom(input);
        }

        public static PalaceListResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (PalaceListResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(PalaceListResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.PalaceListResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;
            private List<FightLevelHandler.PalaceInfo> s2CPalaceInfos_;
            private RepeatedFieldBuilder<FightLevelHandler.PalaceInfo, FightLevelHandler.PalaceInfo.Builder, FightLevelHandler.PalaceInfoOrBuilder> s2CPalaceInfosBuilder_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_PalaceListResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_PalaceListResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.PalaceListResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                this.s2CPalaceInfos_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                this.s2CPalaceInfos_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.PalaceListResponse.alwaysUseFieldBuilders)
                    getS2CPalaceInfosFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                if (this.s2CPalaceInfosBuilder_ == null) {
                    this.s2CPalaceInfos_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                } else {
                    this.s2CPalaceInfosBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_PalaceListResponse_descriptor;
            }

            public FightLevelHandler.PalaceListResponse getDefaultInstanceForType() {
                return FightLevelHandler.PalaceListResponse.getDefaultInstance();
            }

            public FightLevelHandler.PalaceListResponse build() {
                FightLevelHandler.PalaceListResponse result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.PalaceListResponse buildPartial() {
                FightLevelHandler.PalaceListResponse result = new FightLevelHandler.PalaceListResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                if (this.s2CPalaceInfosBuilder_ == null) {
                    if ((this.bitField0_ & 0x4) == 4) {
                        this.s2CPalaceInfos_ = Collections.unmodifiableList(this.s2CPalaceInfos_);
                        this.bitField0_ &= 0xFFFFFFFB;
                    }
                    result.s2CPalaceInfos_ = this.s2CPalaceInfos_;
                } else {
                    result.s2CPalaceInfos_ = this.s2CPalaceInfosBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.PalaceListResponse)
                    return mergeFrom((FightLevelHandler.PalaceListResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.PalaceListResponse other) {
                if (other == FightLevelHandler.PalaceListResponse.getDefaultInstance())
                    return this;
                if (other.hasS2CCode())
                    setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (this.s2CPalaceInfosBuilder_ == null) {
                    if (!other.s2CPalaceInfos_.isEmpty()) {
                        if (this.s2CPalaceInfos_.isEmpty()) {
                            this.s2CPalaceInfos_ = other.s2CPalaceInfos_;
                            this.bitField0_ &= 0xFFFFFFFB;
                        } else {
                            ensureS2CPalaceInfosIsMutable();
                            this.s2CPalaceInfos_.addAll(other.s2CPalaceInfos_);
                        }
                        onChanged();
                    }
                } else if (!other.s2CPalaceInfos_.isEmpty()) {
                    if (this.s2CPalaceInfosBuilder_.isEmpty()) {
                        this.s2CPalaceInfosBuilder_.dispose();
                        this.s2CPalaceInfosBuilder_ = null;
                        this.s2CPalaceInfos_ = other.s2CPalaceInfos_;
                        this.bitField0_ &= 0xFFFFFFFB;
                        this.s2CPalaceInfosBuilder_ = FightLevelHandler.PalaceListResponse.alwaysUseFieldBuilders ? getS2CPalaceInfosFieldBuilder() : null;
                    } else {
                        this.s2CPalaceInfosBuilder_.addAllMessages(other.s2CPalaceInfos_);
                    }
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode())
                    return false;
                for (int i = 0; i < getS2CPalaceInfosCount(); i++) {
                    if (!getS2CPalaceInfos(i).isInitialized())
                        return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.PalaceListResponse parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.PalaceListResponse) FightLevelHandler.PalaceListResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.PalaceListResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = FightLevelHandler.PalaceListResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            private void ensureS2CPalaceInfosIsMutable() {
                if ((this.bitField0_ & 0x4) != 4) {
                    this.s2CPalaceInfos_ = new ArrayList<>(this.s2CPalaceInfos_);
                    this.bitField0_ |= 0x4;
                }
            }

            public List<FightLevelHandler.PalaceInfo> getS2CPalaceInfosList() {
                if (this.s2CPalaceInfosBuilder_ == null)
                    return Collections.unmodifiableList(this.s2CPalaceInfos_);
                return this.s2CPalaceInfosBuilder_.getMessageList();
            }

            public int getS2CPalaceInfosCount() {
                if (this.s2CPalaceInfosBuilder_ == null)
                    return this.s2CPalaceInfos_.size();
                return this.s2CPalaceInfosBuilder_.getCount();
            }

            public FightLevelHandler.PalaceInfo getS2CPalaceInfos(int index) {
                if (this.s2CPalaceInfosBuilder_ == null)
                    return this.s2CPalaceInfos_.get(index);
                return (FightLevelHandler.PalaceInfo) this.s2CPalaceInfosBuilder_.getMessage(index);
            }

            public Builder setS2CPalaceInfos(int index, FightLevelHandler.PalaceInfo value) {
                if (this.s2CPalaceInfosBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CPalaceInfosIsMutable();
                    this.s2CPalaceInfos_.set(index, value);
                    onChanged();
                } else {
                    this.s2CPalaceInfosBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setS2CPalaceInfos(int index, FightLevelHandler.PalaceInfo.Builder builderForValue) {
                if (this.s2CPalaceInfosBuilder_ == null) {
                    ensureS2CPalaceInfosIsMutable();
                    this.s2CPalaceInfos_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CPalaceInfosBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addS2CPalaceInfos(FightLevelHandler.PalaceInfo value) {
                if (this.s2CPalaceInfosBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CPalaceInfosIsMutable();
                    this.s2CPalaceInfos_.add(value);
                    onChanged();
                } else {
                    this.s2CPalaceInfosBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addS2CPalaceInfos(int index, FightLevelHandler.PalaceInfo value) {
                if (this.s2CPalaceInfosBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CPalaceInfosIsMutable();
                    this.s2CPalaceInfos_.add(index, value);
                    onChanged();
                } else {
                    this.s2CPalaceInfosBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addS2CPalaceInfos(FightLevelHandler.PalaceInfo.Builder builderForValue) {
                if (this.s2CPalaceInfosBuilder_ == null) {
                    ensureS2CPalaceInfosIsMutable();
                    this.s2CPalaceInfos_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.s2CPalaceInfosBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addS2CPalaceInfos(int index, FightLevelHandler.PalaceInfo.Builder builderForValue) {
                if (this.s2CPalaceInfosBuilder_ == null) {
                    ensureS2CPalaceInfosIsMutable();
                    this.s2CPalaceInfos_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CPalaceInfosBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllS2CPalaceInfos(Iterable<? extends FightLevelHandler.PalaceInfo> values) {
                if (this.s2CPalaceInfosBuilder_ == null) {
                    ensureS2CPalaceInfosIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.s2CPalaceInfos_);
                    onChanged();
                } else {
                    this.s2CPalaceInfosBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearS2CPalaceInfos() {
                if (this.s2CPalaceInfosBuilder_ == null) {
                    this.s2CPalaceInfos_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                    onChanged();
                } else {
                    this.s2CPalaceInfosBuilder_.clear();
                }
                return this;
            }

            public Builder removeS2CPalaceInfos(int index) {
                if (this.s2CPalaceInfosBuilder_ == null) {
                    ensureS2CPalaceInfosIsMutable();
                    this.s2CPalaceInfos_.remove(index);
                    onChanged();
                } else {
                    this.s2CPalaceInfosBuilder_.remove(index);
                }
                return this;
            }

            public FightLevelHandler.PalaceInfo.Builder getS2CPalaceInfosBuilder(int index) {
                return (FightLevelHandler.PalaceInfo.Builder) getS2CPalaceInfosFieldBuilder().getBuilder(index);
            }

            public FightLevelHandler.PalaceInfoOrBuilder getS2CPalaceInfosOrBuilder(int index) {
                if (this.s2CPalaceInfosBuilder_ == null)
                    return this.s2CPalaceInfos_.get(index);
                return (FightLevelHandler.PalaceInfoOrBuilder) this.s2CPalaceInfosBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends FightLevelHandler.PalaceInfoOrBuilder> getS2CPalaceInfosOrBuilderList() {
                if (this.s2CPalaceInfosBuilder_ != null)
                    return this.s2CPalaceInfosBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.s2CPalaceInfos_);
            }

            public FightLevelHandler.PalaceInfo.Builder addS2CPalaceInfosBuilder() {
                return (FightLevelHandler.PalaceInfo.Builder) getS2CPalaceInfosFieldBuilder().addBuilder(FightLevelHandler.PalaceInfo.getDefaultInstance());
            }

            public FightLevelHandler.PalaceInfo.Builder addS2CPalaceInfosBuilder(int index) {
                return (FightLevelHandler.PalaceInfo.Builder) getS2CPalaceInfosFieldBuilder().addBuilder(index, FightLevelHandler.PalaceInfo.getDefaultInstance());
            }

            public List<FightLevelHandler.PalaceInfo.Builder> getS2CPalaceInfosBuilderList() {
                return getS2CPalaceInfosFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<FightLevelHandler.PalaceInfo, FightLevelHandler.PalaceInfo.Builder, FightLevelHandler.PalaceInfoOrBuilder> getS2CPalaceInfosFieldBuilder() {
                if (this.s2CPalaceInfosBuilder_ == null) {
                    this.s2CPalaceInfosBuilder_ = new RepeatedFieldBuilder(this.s2CPalaceInfos_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean());
                    this.s2CPalaceInfos_ = null;
                }
                return this.s2CPalaceInfosBuilder_;
            }
        }
    }

    public static final class EnterWorldBossRequest extends GeneratedMessage implements EnterWorldBossRequestOrBuilder {
        private static final EnterWorldBossRequest defaultInstance = new EnterWorldBossRequest(true);
        private final UnknownFieldSet unknownFields;

        private EnterWorldBossRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private EnterWorldBossRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static EnterWorldBossRequest getDefaultInstance() {
            return defaultInstance;
        }

        public EnterWorldBossRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private EnterWorldBossRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CAreaId_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_EnterWorldBossRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_EnterWorldBossRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(EnterWorldBossRequest.class, Builder.class);
        }

        public static Parser<EnterWorldBossRequest> PARSER = (Parser<EnterWorldBossRequest>) new AbstractParser<EnterWorldBossRequest>() {
            public FightLevelHandler.EnterWorldBossRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.EnterWorldBossRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_AREAID_FIELD_NUMBER = 1;
        private int s2CAreaId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<EnterWorldBossRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CAreaId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CAreaId() {
            return this.s2CAreaId_;
        }

        private void initFields() {
            this.s2CAreaId_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CAreaId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CAreaId_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CAreaId_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static EnterWorldBossRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (EnterWorldBossRequest) PARSER.parseFrom(data);
        }

        public static EnterWorldBossRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (EnterWorldBossRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static EnterWorldBossRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (EnterWorldBossRequest) PARSER.parseFrom(data);
        }

        public static EnterWorldBossRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (EnterWorldBossRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static EnterWorldBossRequest parseFrom(InputStream input) throws IOException {
            return (EnterWorldBossRequest) PARSER.parseFrom(input);
        }

        public static EnterWorldBossRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterWorldBossRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static EnterWorldBossRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (EnterWorldBossRequest) PARSER.parseDelimitedFrom(input);
        }

        public static EnterWorldBossRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterWorldBossRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static EnterWorldBossRequest parseFrom(CodedInputStream input) throws IOException {
            return (EnterWorldBossRequest) PARSER.parseFrom(input);
        }

        public static EnterWorldBossRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterWorldBossRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(EnterWorldBossRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.EnterWorldBossRequestOrBuilder {
            private int bitField0_;
            private int s2CAreaId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_EnterWorldBossRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_EnterWorldBossRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.EnterWorldBossRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.EnterWorldBossRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CAreaId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_EnterWorldBossRequest_descriptor;
            }

            public FightLevelHandler.EnterWorldBossRequest getDefaultInstanceForType() {
                return FightLevelHandler.EnterWorldBossRequest.getDefaultInstance();
            }

            public FightLevelHandler.EnterWorldBossRequest build() {
                FightLevelHandler.EnterWorldBossRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.EnterWorldBossRequest buildPartial() {
                FightLevelHandler.EnterWorldBossRequest result = new FightLevelHandler.EnterWorldBossRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CAreaId_ = this.s2CAreaId_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.EnterWorldBossRequest)
                    return mergeFrom((FightLevelHandler.EnterWorldBossRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.EnterWorldBossRequest other) {
                if (other == FightLevelHandler.EnterWorldBossRequest.getDefaultInstance()) return this;
                if (other.hasS2CAreaId()) setS2CAreaId(other.getS2CAreaId());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CAreaId()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.EnterWorldBossRequest parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.EnterWorldBossRequest) FightLevelHandler.EnterWorldBossRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.EnterWorldBossRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CAreaId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CAreaId() {
                return this.s2CAreaId_;
            }

            public Builder setS2CAreaId(int value) {
                this.bitField0_ |= 0x1;
                this.s2CAreaId_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CAreaId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CAreaId_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class EnterWorldBossResponse
            extends GeneratedMessage
            implements EnterWorldBossResponseOrBuilder {
        private static final EnterWorldBossResponse defaultInstance = new EnterWorldBossResponse(true);
        private final UnknownFieldSet unknownFields;

        private EnterWorldBossResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private EnterWorldBossResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static EnterWorldBossResponse getDefaultInstance() {
            return defaultInstance;
        }

        public EnterWorldBossResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private EnterWorldBossResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_EnterWorldBossResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_EnterWorldBossResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(EnterWorldBossResponse.class, Builder.class);
        }

        public static Parser<EnterWorldBossResponse> PARSER = (Parser<EnterWorldBossResponse>) new AbstractParser<EnterWorldBossResponse>() {
            public FightLevelHandler.EnterWorldBossResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.EnterWorldBossResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<EnterWorldBossResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static EnterWorldBossResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (EnterWorldBossResponse) PARSER.parseFrom(data);
        }

        public static EnterWorldBossResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (EnterWorldBossResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static EnterWorldBossResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (EnterWorldBossResponse) PARSER.parseFrom(data);
        }

        public static EnterWorldBossResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (EnterWorldBossResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static EnterWorldBossResponse parseFrom(InputStream input) throws IOException {
            return (EnterWorldBossResponse) PARSER.parseFrom(input);
        }

        public static EnterWorldBossResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterWorldBossResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static EnterWorldBossResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (EnterWorldBossResponse) PARSER.parseDelimitedFrom(input);
        }

        public static EnterWorldBossResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterWorldBossResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static EnterWorldBossResponse parseFrom(CodedInputStream input) throws IOException {
            return (EnterWorldBossResponse) PARSER.parseFrom(input);
        }

        public static EnterWorldBossResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterWorldBossResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(EnterWorldBossResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.EnterWorldBossResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_EnterWorldBossResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_EnterWorldBossResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.EnterWorldBossResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.EnterWorldBossResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_EnterWorldBossResponse_descriptor;
            }

            public FightLevelHandler.EnterWorldBossResponse getDefaultInstanceForType() {
                return FightLevelHandler.EnterWorldBossResponse.getDefaultInstance();
            }

            public FightLevelHandler.EnterWorldBossResponse build() {
                FightLevelHandler.EnterWorldBossResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.EnterWorldBossResponse buildPartial() {
                FightLevelHandler.EnterWorldBossResponse result = new FightLevelHandler.EnterWorldBossResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.EnterWorldBossResponse)
                    return mergeFrom((FightLevelHandler.EnterWorldBossResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.EnterWorldBossResponse other) {
                if (other == FightLevelHandler.EnterWorldBossResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.EnterWorldBossResponse parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.EnterWorldBossResponse) FightLevelHandler.EnterWorldBossResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.EnterWorldBossResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = FightLevelHandler.EnterWorldBossResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class GetMonsterLeaderRequest
            extends GeneratedMessage
            implements GetMonsterLeaderRequestOrBuilder {
        private static final GetMonsterLeaderRequest defaultInstance = new GetMonsterLeaderRequest(true);
        private final UnknownFieldSet unknownFields;

        private GetMonsterLeaderRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetMonsterLeaderRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetMonsterLeaderRequest getDefaultInstance() {
            return defaultInstance;
        }

        public GetMonsterLeaderRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetMonsterLeaderRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CMonsterId_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.s2CAreaId_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_GetMonsterLeaderRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_GetMonsterLeaderRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(GetMonsterLeaderRequest.class, Builder.class);
        }

        public static Parser<GetMonsterLeaderRequest> PARSER = (Parser<GetMonsterLeaderRequest>) new AbstractParser<GetMonsterLeaderRequest>() {
            public FightLevelHandler.GetMonsterLeaderRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.GetMonsterLeaderRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_MONSTERID_FIELD_NUMBER = 1;
        private int s2CMonsterId_;
        public static final int S2C_AREAID_FIELD_NUMBER = 2;
        private int s2CAreaId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetMonsterLeaderRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CMonsterId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CMonsterId() {
            return this.s2CMonsterId_;
        }

        public boolean hasS2CAreaId() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getS2CAreaId() {
            return this.s2CAreaId_;
        }

        private void initFields() {
            this.s2CMonsterId_ = 0;
            this.s2CAreaId_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CMonsterId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2CAreaId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CMonsterId_);
            if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.s2CAreaId_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CMonsterId_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.s2CAreaId_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GetMonsterLeaderRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetMonsterLeaderRequest) PARSER.parseFrom(data);
        }

        public static GetMonsterLeaderRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetMonsterLeaderRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetMonsterLeaderRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetMonsterLeaderRequest) PARSER.parseFrom(data);
        }

        public static GetMonsterLeaderRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetMonsterLeaderRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetMonsterLeaderRequest parseFrom(InputStream input) throws IOException {
            return (GetMonsterLeaderRequest) PARSER.parseFrom(input);
        }

        public static GetMonsterLeaderRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetMonsterLeaderRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GetMonsterLeaderRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (GetMonsterLeaderRequest) PARSER.parseDelimitedFrom(input);
        }

        public static GetMonsterLeaderRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetMonsterLeaderRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GetMonsterLeaderRequest parseFrom(CodedInputStream input) throws IOException {
            return (GetMonsterLeaderRequest) PARSER.parseFrom(input);
        }

        public static GetMonsterLeaderRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetMonsterLeaderRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GetMonsterLeaderRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.GetMonsterLeaderRequestOrBuilder {
            private int bitField0_;
            private int s2CMonsterId_;
            private int s2CAreaId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_GetMonsterLeaderRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_GetMonsterLeaderRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.GetMonsterLeaderRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.GetMonsterLeaderRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CMonsterId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CAreaId_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_GetMonsterLeaderRequest_descriptor;
            }

            public FightLevelHandler.GetMonsterLeaderRequest getDefaultInstanceForType() {
                return FightLevelHandler.GetMonsterLeaderRequest.getDefaultInstance();
            }

            public FightLevelHandler.GetMonsterLeaderRequest build() {
                FightLevelHandler.GetMonsterLeaderRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.GetMonsterLeaderRequest buildPartial() {
                FightLevelHandler.GetMonsterLeaderRequest result = new FightLevelHandler.GetMonsterLeaderRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CMonsterId_ = this.s2CMonsterId_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CAreaId_ = this.s2CAreaId_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.GetMonsterLeaderRequest)
                    return mergeFrom((FightLevelHandler.GetMonsterLeaderRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.GetMonsterLeaderRequest other) {
                if (other == FightLevelHandler.GetMonsterLeaderRequest.getDefaultInstance()) return this;
                if (other.hasS2CMonsterId()) setS2CMonsterId(other.getS2CMonsterId());
                if (other.hasS2CAreaId()) setS2CAreaId(other.getS2CAreaId());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CMonsterId()) return false;
                if (!hasS2CAreaId()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.GetMonsterLeaderRequest parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.GetMonsterLeaderRequest) FightLevelHandler.GetMonsterLeaderRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.GetMonsterLeaderRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CMonsterId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CMonsterId() {
                return this.s2CMonsterId_;
            }

            public Builder setS2CMonsterId(int value) {
                this.bitField0_ |= 0x1;
                this.s2CMonsterId_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMonsterId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMonsterId_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CAreaId() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getS2CAreaId() {
                return this.s2CAreaId_;
            }

            public Builder setS2CAreaId(int value) {
                this.bitField0_ |= 0x2;
                this.s2CAreaId_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CAreaId() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CAreaId_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class GetMonsterLeaderResponse
            extends GeneratedMessage
            implements GetMonsterLeaderResponseOrBuilder {
        private static final GetMonsterLeaderResponse defaultInstance = new GetMonsterLeaderResponse(true);
        private final UnknownFieldSet unknownFields;

        private GetMonsterLeaderResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetMonsterLeaderResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetMonsterLeaderResponse getDefaultInstance() {
            return defaultInstance;
        }

        public GetMonsterLeaderResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetMonsterLeaderResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                        case 26:
                            if ((mutable_bitField0_ & 0x4) != 4) {
                                this.s2CDropItems_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x4;
                            }
                            this.s2CDropItems_.add(input.readMessage(ItemOuterClass.MiniItem.PARSER, extensionRegistry));
                            break;
                        case 32:
                            this.bitField0_ |= 0x4;
                            this.s2CReqLevel_ = input.readInt32();
                            break;
                        case 40:
                            this.bitField0_ |= 0x8;
                            this.s2CReqUpLevel_ = input.readInt32();
                            break;
                        case 50:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x10;
                            this.s2CRefreshPoint_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x4) == 4)
                    this.s2CDropItems_ = Collections.unmodifiableList(this.s2CDropItems_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_GetMonsterLeaderResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_GetMonsterLeaderResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(GetMonsterLeaderResponse.class, Builder.class);
        }

        public static Parser<GetMonsterLeaderResponse> PARSER = (Parser<GetMonsterLeaderResponse>) new AbstractParser<GetMonsterLeaderResponse>() {
            public FightLevelHandler.GetMonsterLeaderResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.GetMonsterLeaderResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int S2C_DROPITEMS_FIELD_NUMBER = 3;
        private List<ItemOuterClass.MiniItem> s2CDropItems_;
        public static final int S2C_REQLEVEL_FIELD_NUMBER = 4;
        private int s2CReqLevel_;
        public static final int S2C_REQUPLEVEL_FIELD_NUMBER = 5;
        private int s2CReqUpLevel_;
        public static final int S2C_REFRESHPOINT_FIELD_NUMBER = 6;
        private Object s2CRefreshPoint_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetMonsterLeaderResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        static {
            defaultInstance.initFields();
        }


        public List<ItemOuterClass.MiniItem> getS2CDropItemsList() {
            return this.s2CDropItems_;
        }

        public List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CDropItemsOrBuilderList() {
            return (List) this.s2CDropItems_;
        }

        public int getS2CDropItemsCount() {
            return this.s2CDropItems_.size();
        }

        public ItemOuterClass.MiniItem getS2CDropItems(int index) {
            return this.s2CDropItems_.get(index);
        }

        public ItemOuterClass.MiniItemOrBuilder getS2CDropItemsOrBuilder(int index) {
            return (ItemOuterClass.MiniItemOrBuilder) this.s2CDropItems_.get(index);
        }

        public boolean hasS2CReqLevel() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public int getS2CReqLevel() {
            return this.s2CReqLevel_;
        }

        public boolean hasS2CReqUpLevel() {
            return ((this.bitField0_ & 0x8) == 8);
        }

        public int getS2CReqUpLevel() {
            return this.s2CReqUpLevel_;
        }

        public boolean hasS2CRefreshPoint() {
            return ((this.bitField0_ & 0x10) == 16);
        }

        public String getS2CRefreshPoint() {
            Object ref = this.s2CRefreshPoint_;
            if (ref instanceof String)
                return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8())
                this.s2CRefreshPoint_ = s;
            return s;
        }

        public ByteString getS2CRefreshPointBytes() {
            Object ref = this.s2CRefreshPoint_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CRefreshPoint_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
            this.s2CDropItems_ = Collections.emptyList();
            this.s2CReqLevel_ = 0;
            this.s2CReqUpLevel_ = 0;
            this.s2CRefreshPoint_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2CReqLevel()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2CReqUpLevel()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2CRefreshPoint()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getS2CDropItemsCount(); i++) {
                if (!getS2CDropItems(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(2, getS2CMsgBytes());
            for (int i = 0; i < this.s2CDropItems_.size(); i++)
                output.writeMessage(3, (MessageLite) this.s2CDropItems_.get(i));
            if ((this.bitField0_ & 0x4) == 4)
                output.writeInt32(4, this.s2CReqLevel_);
            if ((this.bitField0_ & 0x8) == 8)
                output.writeInt32(5, this.s2CReqUpLevel_);
            if ((this.bitField0_ & 0x10) == 16)
                output.writeBytes(6, getS2CRefreshPointBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            for (int i = 0; i < this.s2CDropItems_.size(); i++)
                size += CodedOutputStream.computeMessageSize(3, (MessageLite) this.s2CDropItems_.get(i));
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeInt32Size(4, this.s2CReqLevel_);
            if ((this.bitField0_ & 0x8) == 8)
                size += CodedOutputStream.computeInt32Size(5, this.s2CReqUpLevel_);
            if ((this.bitField0_ & 0x10) == 16)
                size += CodedOutputStream.computeBytesSize(6, getS2CRefreshPointBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GetMonsterLeaderResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetMonsterLeaderResponse) PARSER.parseFrom(data);
        }

        public static GetMonsterLeaderResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetMonsterLeaderResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetMonsterLeaderResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetMonsterLeaderResponse) PARSER.parseFrom(data);
        }

        public static GetMonsterLeaderResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetMonsterLeaderResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetMonsterLeaderResponse parseFrom(InputStream input) throws IOException {
            return (GetMonsterLeaderResponse) PARSER.parseFrom(input);
        }

        public static GetMonsterLeaderResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetMonsterLeaderResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GetMonsterLeaderResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (GetMonsterLeaderResponse) PARSER.parseDelimitedFrom(input);
        }

        public static GetMonsterLeaderResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetMonsterLeaderResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GetMonsterLeaderResponse parseFrom(CodedInputStream input) throws IOException {
            return (GetMonsterLeaderResponse) PARSER.parseFrom(input);
        }

        public static GetMonsterLeaderResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetMonsterLeaderResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GetMonsterLeaderResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.GetMonsterLeaderResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;
            private List<ItemOuterClass.MiniItem> s2CDropItems_;
            private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> s2CDropItemsBuilder_;
            private int s2CReqLevel_;
            private int s2CReqUpLevel_;
            private Object s2CRefreshPoint_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_GetMonsterLeaderResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_GetMonsterLeaderResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.GetMonsterLeaderResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                this.s2CDropItems_ = Collections.emptyList();
                this.s2CRefreshPoint_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                this.s2CDropItems_ = Collections.emptyList();
                this.s2CRefreshPoint_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.GetMonsterLeaderResponse.alwaysUseFieldBuilders)
                    getS2CDropItemsFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                if (this.s2CDropItemsBuilder_ == null) {
                    this.s2CDropItems_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                } else {
                    this.s2CDropItemsBuilder_.clear();
                }
                this.s2CReqLevel_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                this.s2CReqUpLevel_ = 0;
                this.bitField0_ &= 0xFFFFFFEF;
                this.s2CRefreshPoint_ = "";
                this.bitField0_ &= 0xFFFFFFDF;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_GetMonsterLeaderResponse_descriptor;
            }

            public FightLevelHandler.GetMonsterLeaderResponse getDefaultInstanceForType() {
                return FightLevelHandler.GetMonsterLeaderResponse.getDefaultInstance();
            }

            public FightLevelHandler.GetMonsterLeaderResponse build() {
                FightLevelHandler.GetMonsterLeaderResponse result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.GetMonsterLeaderResponse buildPartial() {
                FightLevelHandler.GetMonsterLeaderResponse result = new FightLevelHandler.GetMonsterLeaderResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                if (this.s2CDropItemsBuilder_ == null) {
                    if ((this.bitField0_ & 0x4) == 4) {
                        this.s2CDropItems_ = Collections.unmodifiableList(this.s2CDropItems_);
                        this.bitField0_ &= 0xFFFFFFFB;
                    }
                    result.s2CDropItems_ = this.s2CDropItems_;
                } else {
                    result.s2CDropItems_ = this.s2CDropItemsBuilder_.build();
                }
                if ((from_bitField0_ & 0x8) == 8)
                    to_bitField0_ |= 0x4;
                result.s2CReqLevel_ = this.s2CReqLevel_;
                if ((from_bitField0_ & 0x10) == 16)
                    to_bitField0_ |= 0x8;
                result.s2CReqUpLevel_ = this.s2CReqUpLevel_;
                if ((from_bitField0_ & 0x20) == 32)
                    to_bitField0_ |= 0x10;
                result.s2CRefreshPoint_ = this.s2CRefreshPoint_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.GetMonsterLeaderResponse)
                    return mergeFrom((FightLevelHandler.GetMonsterLeaderResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.GetMonsterLeaderResponse other) {
                if (other == FightLevelHandler.GetMonsterLeaderResponse.getDefaultInstance())
                    return this;
                if (other.hasS2CCode())
                    setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (this.s2CDropItemsBuilder_ == null) {
                    if (!other.s2CDropItems_.isEmpty()) {
                        if (this.s2CDropItems_.isEmpty()) {
                            this.s2CDropItems_ = other.s2CDropItems_;
                            this.bitField0_ &= 0xFFFFFFFB;
                        } else {
                            ensureS2CDropItemsIsMutable();
                            this.s2CDropItems_.addAll(other.s2CDropItems_);
                        }
                        onChanged();
                    }
                } else if (!other.s2CDropItems_.isEmpty()) {
                    if (this.s2CDropItemsBuilder_.isEmpty()) {
                        this.s2CDropItemsBuilder_.dispose();
                        this.s2CDropItemsBuilder_ = null;
                        this.s2CDropItems_ = other.s2CDropItems_;
                        this.bitField0_ &= 0xFFFFFFFB;
                        this.s2CDropItemsBuilder_ = FightLevelHandler.GetMonsterLeaderResponse.alwaysUseFieldBuilders ? getS2CDropItemsFieldBuilder() : null;
                    } else {
                        this.s2CDropItemsBuilder_.addAllMessages(other.s2CDropItems_);
                    }
                }
                if (other.hasS2CReqLevel())
                    setS2CReqLevel(other.getS2CReqLevel());
                if (other.hasS2CReqUpLevel())
                    setS2CReqUpLevel(other.getS2CReqUpLevel());
                if (other.hasS2CRefreshPoint()) {
                    this.bitField0_ |= 0x20;
                    this.s2CRefreshPoint_ = other.s2CRefreshPoint_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode())
                    return false;
                if (!hasS2CReqLevel())
                    return false;
                if (!hasS2CReqUpLevel())
                    return false;
                if (!hasS2CRefreshPoint())
                    return false;
                for (int i = 0; i < getS2CDropItemsCount(); i++) {
                    if (!getS2CDropItems(i).isInitialized())
                        return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.GetMonsterLeaderResponse parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.GetMonsterLeaderResponse) FightLevelHandler.GetMonsterLeaderResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.GetMonsterLeaderResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = FightLevelHandler.GetMonsterLeaderResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            private void ensureS2CDropItemsIsMutable() {
                if ((this.bitField0_ & 0x4) != 4) {
                    this.s2CDropItems_ = new ArrayList<>(this.s2CDropItems_);
                    this.bitField0_ |= 0x4;
                }
            }

            public List<ItemOuterClass.MiniItem> getS2CDropItemsList() {
                if (this.s2CDropItemsBuilder_ == null)
                    return Collections.unmodifiableList(this.s2CDropItems_);
                return this.s2CDropItemsBuilder_.getMessageList();
            }

            public int getS2CDropItemsCount() {
                if (this.s2CDropItemsBuilder_ == null)
                    return this.s2CDropItems_.size();
                return this.s2CDropItemsBuilder_.getCount();
            }

            public ItemOuterClass.MiniItem getS2CDropItems(int index) {
                if (this.s2CDropItemsBuilder_ == null)
                    return this.s2CDropItems_.get(index);
                return (ItemOuterClass.MiniItem) this.s2CDropItemsBuilder_.getMessage(index);
            }

            public Builder setS2CDropItems(int index, ItemOuterClass.MiniItem value) {
                if (this.s2CDropItemsBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CDropItemsIsMutable();
                    this.s2CDropItems_.set(index, value);
                    onChanged();
                } else {
                    this.s2CDropItemsBuilder_.setMessage(index, (GeneratedMessage) value);
                }
                return this;
            }

            public Builder setS2CDropItems(int index, ItemOuterClass.MiniItem.Builder builderForValue) {
                if (this.s2CDropItemsBuilder_ == null) {
                    ensureS2CDropItemsIsMutable();
                    this.s2CDropItems_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CDropItemsBuilder_.setMessage(index, (GeneratedMessage) builderForValue.build());
                }
                return this;
            }

            public Builder addS2CDropItems(ItemOuterClass.MiniItem value) {
                if (this.s2CDropItemsBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CDropItemsIsMutable();
                    this.s2CDropItems_.add(value);
                    onChanged();
                } else {
                    this.s2CDropItemsBuilder_.addMessage((GeneratedMessage) value);
                }
                return this;
            }

            public Builder addS2CDropItems(int index, ItemOuterClass.MiniItem value) {
                if (this.s2CDropItemsBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CDropItemsIsMutable();
                    this.s2CDropItems_.add(index, value);
                    onChanged();
                } else {
                    this.s2CDropItemsBuilder_.addMessage(index, (GeneratedMessage) value);
                }
                return this;
            }

            public Builder addS2CDropItems(ItemOuterClass.MiniItem.Builder builderForValue) {
                if (this.s2CDropItemsBuilder_ == null) {
                    ensureS2CDropItemsIsMutable();
                    this.s2CDropItems_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.s2CDropItemsBuilder_.addMessage((GeneratedMessage) builderForValue.build());
                }
                return this;
            }

            public Builder addS2CDropItems(int index, ItemOuterClass.MiniItem.Builder builderForValue) {
                if (this.s2CDropItemsBuilder_ == null) {
                    ensureS2CDropItemsIsMutable();
                    this.s2CDropItems_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CDropItemsBuilder_.addMessage(index, (GeneratedMessage) builderForValue.build());
                }
                return this;
            }

            public Builder addAllS2CDropItems(Iterable<? extends ItemOuterClass.MiniItem> values) {
                if (this.s2CDropItemsBuilder_ == null) {
                    ensureS2CDropItemsIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.s2CDropItems_);
                    onChanged();
                } else {
                    this.s2CDropItemsBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearS2CDropItems() {
                if (this.s2CDropItemsBuilder_ == null) {
                    this.s2CDropItems_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                    onChanged();
                } else {
                    this.s2CDropItemsBuilder_.clear();
                }
                return this;
            }

            public Builder removeS2CDropItems(int index) {
                if (this.s2CDropItemsBuilder_ == null) {
                    ensureS2CDropItemsIsMutable();
                    this.s2CDropItems_.remove(index);
                    onChanged();
                } else {
                    this.s2CDropItemsBuilder_.remove(index);
                }
                return this;
            }

            public ItemOuterClass.MiniItem.Builder getS2CDropItemsBuilder(int index) {
                return (ItemOuterClass.MiniItem.Builder) getS2CDropItemsFieldBuilder().getBuilder(index);
            }

            public ItemOuterClass.MiniItemOrBuilder getS2CDropItemsOrBuilder(int index) {
                if (this.s2CDropItemsBuilder_ == null)
                    return (ItemOuterClass.MiniItemOrBuilder) this.s2CDropItems_.get(index);
                return (ItemOuterClass.MiniItemOrBuilder) this.s2CDropItemsBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CDropItemsOrBuilderList() {
                if (this.s2CDropItemsBuilder_ != null)
                    return this.s2CDropItemsBuilder_.getMessageOrBuilderList();
                return (List) Collections.unmodifiableList(this.s2CDropItems_);
            }

            public ItemOuterClass.MiniItem.Builder addS2CDropItemsBuilder() {
                return (ItemOuterClass.MiniItem.Builder) getS2CDropItemsFieldBuilder().addBuilder((GeneratedMessage) ItemOuterClass.MiniItem.getDefaultInstance());
            }

            public ItemOuterClass.MiniItem.Builder addS2CDropItemsBuilder(int index) {
                return (ItemOuterClass.MiniItem.Builder) getS2CDropItemsFieldBuilder().addBuilder(index, (GeneratedMessage) ItemOuterClass.MiniItem.getDefaultInstance());
            }

            public List<ItemOuterClass.MiniItem.Builder> getS2CDropItemsBuilderList() {
                return getS2CDropItemsFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<ItemOuterClass.MiniItem, ItemOuterClass.MiniItem.Builder, ItemOuterClass.MiniItemOrBuilder> getS2CDropItemsFieldBuilder() {
                if (this.s2CDropItemsBuilder_ == null) {
                    this.s2CDropItemsBuilder_ = new RepeatedFieldBuilder(this.s2CDropItems_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean());
                    this.s2CDropItems_ = null;
                }
                return this.s2CDropItemsBuilder_;
            }

            public boolean hasS2CReqLevel() {
                return ((this.bitField0_ & 0x8) == 8);
            }

            public int getS2CReqLevel() {
                return this.s2CReqLevel_;
            }

            public Builder setS2CReqLevel(int value) {
                this.bitField0_ |= 0x8;
                this.s2CReqLevel_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CReqLevel() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.s2CReqLevel_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CReqUpLevel() {
                return ((this.bitField0_ & 0x10) == 16);
            }

            public int getS2CReqUpLevel() {
                return this.s2CReqUpLevel_;
            }

            public Builder setS2CReqUpLevel(int value) {
                this.bitField0_ |= 0x10;
                this.s2CReqUpLevel_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CReqUpLevel() {
                this.bitField0_ &= 0xFFFFFFEF;
                this.s2CReqUpLevel_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CRefreshPoint() {
                return ((this.bitField0_ & 0x20) == 32);
            }

            public String getS2CRefreshPoint() {
                Object ref = this.s2CRefreshPoint_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.s2CRefreshPoint_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CRefreshPointBytes() {
                Object ref = this.s2CRefreshPoint_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CRefreshPoint_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CRefreshPoint(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x20;
                this.s2CRefreshPoint_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CRefreshPoint() {
                this.bitField0_ &= 0xFFFFFFDF;
                this.s2CRefreshPoint_ = FightLevelHandler.GetMonsterLeaderResponse.getDefaultInstance().getS2CRefreshPoint();
                onChanged();
                return this;
            }

            public Builder setS2CRefreshPointBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x20;
                this.s2CRefreshPoint_ = value;
                onChanged();
                return this;
            }
        }
    }

    public static final class BossInfo extends GeneratedMessage implements BossInfoOrBuilder {
        private static final BossInfo defaultInstance = new BossInfo(true);
        private final UnknownFieldSet unknownFields;

        private BossInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private BossInfo(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static BossInfo getDefaultInstance() {
            return defaultInstance;
        }

        public BossInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private BossInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.mapId_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.monsterId_ = input.readInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.time_ = input.readInt64();
                            break;
                        case 34:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x8;
                            this.refreshPoint_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_BossInfo_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_BossInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(BossInfo.class, Builder.class);
        }

        public static Parser<BossInfo> PARSER = (Parser<BossInfo>) new AbstractParser<BossInfo>() {
            public FightLevelHandler.BossInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.BossInfo(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int MAPID_FIELD_NUMBER = 1;
        private int mapId_;
        public static final int MONSTERID_FIELD_NUMBER = 2;
        private int monsterId_;
        public static final int TIME_FIELD_NUMBER = 3;
        private long time_;
        public static final int REFRESHPOINT_FIELD_NUMBER = 4;
        private Object refreshPoint_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<BossInfo> getParserForType() {
            return PARSER;
        }

        public boolean hasMapId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getMapId() {
            return this.mapId_;
        }

        public boolean hasMonsterId() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        static {
            defaultInstance.initFields();
        }

        public int getMonsterId() {
            return this.monsterId_;
        }

        public boolean hasTime() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public long getTime() {
            return this.time_;
        }

        public boolean hasRefreshPoint() {
            return ((this.bitField0_ & 0x8) == 8);
        }

        public String getRefreshPoint() {
            Object ref = this.refreshPoint_;
            if (ref instanceof String)
                return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8())
                this.refreshPoint_ = s;
            return s;
        }

        public ByteString getRefreshPointBytes() {
            Object ref = this.refreshPoint_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.refreshPoint_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.mapId_ = 0;
            this.monsterId_ = 0;
            this.time_ = 0L;
            this.refreshPoint_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasMapId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasMonsterId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasRefreshPoint()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeInt32(1, this.mapId_);
            if ((this.bitField0_ & 0x2) == 2)
                output.writeInt32(2, this.monsterId_);
            if ((this.bitField0_ & 0x4) == 4)
                output.writeInt64(3, this.time_);
            if ((this.bitField0_ & 0x8) == 8)
                output.writeBytes(4, getRefreshPointBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeInt32Size(1, this.mapId_);
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeInt32Size(2, this.monsterId_);
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeInt64Size(3, this.time_);
            if ((this.bitField0_ & 0x8) == 8)
                size += CodedOutputStream.computeBytesSize(4, getRefreshPointBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static BossInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (BossInfo) PARSER.parseFrom(data);
        }

        public static BossInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (BossInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static BossInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (BossInfo) PARSER.parseFrom(data);
        }

        public static BossInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (BossInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static BossInfo parseFrom(InputStream input) throws IOException {
            return (BossInfo) PARSER.parseFrom(input);
        }

        public static BossInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (BossInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static BossInfo parseDelimitedFrom(InputStream input) throws IOException {
            return (BossInfo) PARSER.parseDelimitedFrom(input);
        }

        public static BossInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (BossInfo) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static BossInfo parseFrom(CodedInputStream input) throws IOException {
            return (BossInfo) PARSER.parseFrom(input);
        }

        public static BossInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (BossInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(BossInfo prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.BossInfoOrBuilder {
            private int bitField0_;
            private int mapId_;
            private int monsterId_;
            private long time_;
            private Object refreshPoint_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_BossInfo_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_BossInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.BossInfo.class, Builder.class);
            }

            private Builder() {
                this.refreshPoint_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.refreshPoint_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.BossInfo.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.mapId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.monsterId_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                this.time_ = 0L;
                this.bitField0_ &= 0xFFFFFFFB;
                this.refreshPoint_ = "";
                this.bitField0_ &= 0xFFFFFFF7;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_BossInfo_descriptor;
            }

            public FightLevelHandler.BossInfo getDefaultInstanceForType() {
                return FightLevelHandler.BossInfo.getDefaultInstance();
            }

            public FightLevelHandler.BossInfo build() {
                FightLevelHandler.BossInfo result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.BossInfo buildPartial() {
                FightLevelHandler.BossInfo result = new FightLevelHandler.BossInfo(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.mapId_ = this.mapId_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.monsterId_ = this.monsterId_;
                if ((from_bitField0_ & 0x4) == 4)
                    to_bitField0_ |= 0x4;
                result.time_ = this.time_;
                if ((from_bitField0_ & 0x8) == 8)
                    to_bitField0_ |= 0x8;
                result.refreshPoint_ = this.refreshPoint_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.BossInfo)
                    return mergeFrom((FightLevelHandler.BossInfo) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.BossInfo other) {
                if (other == FightLevelHandler.BossInfo.getDefaultInstance())
                    return this;
                if (other.hasMapId())
                    setMapId(other.getMapId());
                if (other.hasMonsterId())
                    setMonsterId(other.getMonsterId());
                if (other.hasTime())
                    setTime(other.getTime());
                if (other.hasRefreshPoint()) {
                    this.bitField0_ |= 0x8;
                    this.refreshPoint_ = other.refreshPoint_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasMapId())
                    return false;
                if (!hasMonsterId())
                    return false;
                if (!hasTime())
                    return false;
                if (!hasRefreshPoint())
                    return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.BossInfo parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.BossInfo) FightLevelHandler.BossInfo.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.BossInfo) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasMapId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getMapId() {
                return this.mapId_;
            }

            public Builder setMapId(int value) {
                this.bitField0_ |= 0x1;
                this.mapId_ = value;
                onChanged();
                return this;
            }

            public Builder clearMapId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.mapId_ = 0;
                onChanged();
                return this;
            }

            public boolean hasMonsterId() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getMonsterId() {
                return this.monsterId_;
            }

            public Builder setMonsterId(int value) {
                this.bitField0_ |= 0x2;
                this.monsterId_ = value;
                onChanged();
                return this;
            }

            public Builder clearMonsterId() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.monsterId_ = 0;
                onChanged();
                return this;
            }

            public boolean hasTime() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public long getTime() {
                return this.time_;
            }

            public Builder setTime(long value) {
                this.bitField0_ |= 0x4;
                this.time_ = value;
                onChanged();
                return this;
            }

            public Builder clearTime() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.time_ = 0L;
                onChanged();
                return this;
            }

            public boolean hasRefreshPoint() {
                return ((this.bitField0_ & 0x8) == 8);
            }

            public String getRefreshPoint() {
                Object ref = this.refreshPoint_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.refreshPoint_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getRefreshPointBytes() {
                Object ref = this.refreshPoint_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.refreshPoint_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setRefreshPoint(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x8;
                this.refreshPoint_ = value;
                onChanged();
                return this;
            }

            public Builder clearRefreshPoint() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.refreshPoint_ = FightLevelHandler.BossInfo.getDefaultInstance().getRefreshPoint();
                onChanged();
                return this;
            }

            public Builder setRefreshPointBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x8;
                this.refreshPoint_ = value;
                onChanged();
                return this;
            }
        }
    }

    public static final class GetBossInfoRequest extends GeneratedMessage implements GetBossInfoRequestOrBuilder {
        private static final GetBossInfoRequest defaultInstance = new GetBossInfoRequest(true);
        private final UnknownFieldSet unknownFields;

        private GetBossInfoRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetBossInfoRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetBossInfoRequest getDefaultInstance() {
            return defaultInstance;
        }

        public GetBossInfoRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetBossInfoRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_GetBossInfoRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_GetBossInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(GetBossInfoRequest.class, Builder.class);
        }

        public static Parser<GetBossInfoRequest> PARSER = (Parser<GetBossInfoRequest>) new AbstractParser<GetBossInfoRequest>() {
            public FightLevelHandler.GetBossInfoRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.GetBossInfoRequest(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetBossInfoRequest> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GetBossInfoRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetBossInfoRequest) PARSER.parseFrom(data);
        }

        public static GetBossInfoRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetBossInfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetBossInfoRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetBossInfoRequest) PARSER.parseFrom(data);
        }

        public static GetBossInfoRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetBossInfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetBossInfoRequest parseFrom(InputStream input) throws IOException {
            return (GetBossInfoRequest) PARSER.parseFrom(input);
        }

        public static GetBossInfoRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetBossInfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GetBossInfoRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (GetBossInfoRequest) PARSER.parseDelimitedFrom(input);
        }

        public static GetBossInfoRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetBossInfoRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GetBossInfoRequest parseFrom(CodedInputStream input) throws IOException {
            return (GetBossInfoRequest) PARSER.parseFrom(input);
        }

        public static GetBossInfoRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetBossInfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GetBossInfoRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.GetBossInfoRequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_GetBossInfoRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_GetBossInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.GetBossInfoRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.GetBossInfoRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_GetBossInfoRequest_descriptor;
            }

            public FightLevelHandler.GetBossInfoRequest getDefaultInstanceForType() {
                return FightLevelHandler.GetBossInfoRequest.getDefaultInstance();
            }

            public FightLevelHandler.GetBossInfoRequest build() {
                FightLevelHandler.GetBossInfoRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.GetBossInfoRequest buildPartial() {
                FightLevelHandler.GetBossInfoRequest result = new FightLevelHandler.GetBossInfoRequest(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.GetBossInfoRequest)
                    return mergeFrom((FightLevelHandler.GetBossInfoRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.GetBossInfoRequest other) {
                if (other == FightLevelHandler.GetBossInfoRequest.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.GetBossInfoRequest parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.GetBossInfoRequest) FightLevelHandler.GetBossInfoRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.GetBossInfoRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class GetBossInfoResponse
            extends GeneratedMessage
            implements GetBossInfoResponseOrBuilder {
        private static final GetBossInfoResponse defaultInstance = new GetBossInfoResponse(true);
        private final UnknownFieldSet unknownFields;

        private GetBossInfoResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetBossInfoResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetBossInfoResponse getDefaultInstance() {
            return defaultInstance;
        }

        public GetBossInfoResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetBossInfoResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                        case 26:
                            if ((mutable_bitField0_ & 0x4) != 4) {
                                this.s2CBossInfos_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x4;
                            }
                            this.s2CBossInfos_.add(input.readMessage(FightLevelHandler.BossInfo.PARSER, extensionRegistry));
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x4) == 4)
                    this.s2CBossInfos_ = Collections.unmodifiableList(this.s2CBossInfos_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_GetBossInfoResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_GetBossInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(GetBossInfoResponse.class, Builder.class);
        }

        public static Parser<GetBossInfoResponse> PARSER = (Parser<GetBossInfoResponse>) new AbstractParser<GetBossInfoResponse>() {
            public FightLevelHandler.GetBossInfoResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.GetBossInfoResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int S2C_BOSSINFOS_FIELD_NUMBER = 3;
        private List<FightLevelHandler.BossInfo> s2CBossInfos_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetBossInfoResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        static {
            defaultInstance.initFields();
        }


        public List<FightLevelHandler.BossInfo> getS2CBossInfosList() {
            return this.s2CBossInfos_;
        }


        public List<? extends FightLevelHandler.BossInfoOrBuilder> getS2CBossInfosOrBuilderList() {
            return (List) this.s2CBossInfos_;
        }


        public int getS2CBossInfosCount() {
            return this.s2CBossInfos_.size();
        }


        public FightLevelHandler.BossInfo getS2CBossInfos(int index) {
            return this.s2CBossInfos_.get(index);
        }


        public FightLevelHandler.BossInfoOrBuilder getS2CBossInfosOrBuilder(int index) {
            return this.s2CBossInfos_.get(index);
        }


        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
            this.s2CBossInfos_ = Collections.emptyList();
        }


        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getS2CBossInfosCount(); i++) {
                if (!getS2CBossInfos(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }


        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeInt32(1, this.s2CCode_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeBytes(2, getS2CMsgBytes());
            }
            for (int i = 0; i < this.s2CBossInfos_.size(); i++) {
                output.writeMessage(3, (MessageLite) this.s2CBossInfos_.get(i));
            }
            getUnknownFields().writeTo(output);
        }


        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            }
            for (int i = 0; i < this.s2CBossInfos_.size(); i++) {
                size += CodedOutputStream.computeMessageSize(3, (MessageLite) this.s2CBossInfos_.get(i));
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }


        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }


        public static GetBossInfoResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetBossInfoResponse) PARSER.parseFrom(data);
        }


        public static GetBossInfoResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetBossInfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }


        public static GetBossInfoResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetBossInfoResponse) PARSER.parseFrom(data);
        }


        public static GetBossInfoResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetBossInfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }


        public static GetBossInfoResponse parseFrom(InputStream input) throws IOException {
            return (GetBossInfoResponse) PARSER.parseFrom(input);
        }


        public static GetBossInfoResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetBossInfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }


        public static GetBossInfoResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (GetBossInfoResponse) PARSER.parseDelimitedFrom(input);
        }


        public static GetBossInfoResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetBossInfoResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }


        public static GetBossInfoResponse parseFrom(CodedInputStream input) throws IOException {
            return (GetBossInfoResponse) PARSER.parseFrom(input);
        }


        public static GetBossInfoResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetBossInfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }


        public static Builder newBuilder() {
            return Builder.create();
        }


        public Builder newBuilderForType() {
            return newBuilder();
        }


        public static Builder newBuilder(GetBossInfoResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }


        public Builder toBuilder() {
            return newBuilder(this);
        }


        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }


        public static final class Builder
                extends GeneratedMessage.Builder<Builder>
                implements FightLevelHandler.GetBossInfoResponseOrBuilder {
            private int bitField0_;

            private int s2CCode_;

            private Object s2CMsg_;
            private List<FightLevelHandler.BossInfo> s2CBossInfos_;
            private RepeatedFieldBuilder<FightLevelHandler.BossInfo, FightLevelHandler.BossInfo.Builder, FightLevelHandler.BossInfoOrBuilder> s2CBossInfosBuilder_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_GetBossInfoResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_GetBossInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.GetBossInfoResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                this.s2CBossInfos_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                this.s2CBossInfos_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.GetBossInfoResponse.alwaysUseFieldBuilders) {
                    getS2CBossInfosFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                if (this.s2CBossInfosBuilder_ == null) {
                    this.s2CBossInfos_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                } else {
                    this.s2CBossInfosBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_GetBossInfoResponse_descriptor;
            }

            public FightLevelHandler.GetBossInfoResponse getDefaultInstanceForType() {
                return FightLevelHandler.GetBossInfoResponse.getDefaultInstance();
            }

            public FightLevelHandler.GetBossInfoResponse build() {
                FightLevelHandler.GetBossInfoResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public FightLevelHandler.GetBossInfoResponse buildPartial() {
                FightLevelHandler.GetBossInfoResponse result = new FightLevelHandler.GetBossInfoResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) {
                    to_bitField0_ |= 0x1;
                }
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) {
                    to_bitField0_ |= 0x2;
                }
                result.s2CMsg_ = this.s2CMsg_;
                if (this.s2CBossInfosBuilder_ == null) {
                    if ((this.bitField0_ & 0x4) == 4) {
                        this.s2CBossInfos_ = Collections.unmodifiableList(this.s2CBossInfos_);
                        this.bitField0_ &= 0xFFFFFFFB;
                    }
                    result.s2CBossInfos_ = this.s2CBossInfos_;
                } else {
                    result.s2CBossInfos_ = this.s2CBossInfosBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.GetBossInfoResponse) {
                    return mergeFrom((FightLevelHandler.GetBossInfoResponse) other);
                }
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.GetBossInfoResponse other) {
                if (other == FightLevelHandler.GetBossInfoResponse.getDefaultInstance()) {
                    return this;
                }
                if (other.hasS2CCode()) {
                    setS2CCode(other.getS2CCode());
                }
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (this.s2CBossInfosBuilder_ == null) {
                    if (!other.s2CBossInfos_.isEmpty()) {
                        if (this.s2CBossInfos_.isEmpty()) {
                            this.s2CBossInfos_ = other.s2CBossInfos_;
                            this.bitField0_ &= 0xFFFFFFFB;
                        } else {
                            ensureS2CBossInfosIsMutable();
                            this.s2CBossInfos_.addAll(other.s2CBossInfos_);
                        }
                        onChanged();
                    }
                } else if (!other.s2CBossInfos_.isEmpty()) {
                    if (this.s2CBossInfosBuilder_.isEmpty()) {
                        this.s2CBossInfosBuilder_.dispose();
                        this.s2CBossInfosBuilder_ = null;
                        this.s2CBossInfos_ = other.s2CBossInfos_;
                        this.bitField0_ &= 0xFFFFFFFB;
                        this.s2CBossInfosBuilder_ = FightLevelHandler.GetBossInfoResponse.alwaysUseFieldBuilders ? getS2CBossInfosFieldBuilder() : null;
                    } else {
                        this.s2CBossInfosBuilder_.addAllMessages(other.s2CBossInfos_);
                    }
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) {
                    return false;
                }
                for (int i = 0; i < getS2CBossInfosCount(); i++) {
                    if (!getS2CBossInfos(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.GetBossInfoResponse parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.GetBossInfoResponse) FightLevelHandler.GetBossInfoResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.GetBossInfoResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.s2CMsg_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = FightLevelHandler.GetBossInfoResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            private void ensureS2CBossInfosIsMutable() {
                if ((this.bitField0_ & 0x4) != 4) {
                    this.s2CBossInfos_ = new ArrayList<>(this.s2CBossInfos_);
                    this.bitField0_ |= 0x4;
                }
            }

            public List<FightLevelHandler.BossInfo> getS2CBossInfosList() {
                if (this.s2CBossInfosBuilder_ == null) {
                    return Collections.unmodifiableList(this.s2CBossInfos_);
                }
                return this.s2CBossInfosBuilder_.getMessageList();
            }

            public int getS2CBossInfosCount() {
                if (this.s2CBossInfosBuilder_ == null) {
                    return this.s2CBossInfos_.size();
                }
                return this.s2CBossInfosBuilder_.getCount();
            }

            public FightLevelHandler.BossInfo getS2CBossInfos(int index) {
                if (this.s2CBossInfosBuilder_ == null) {
                    return this.s2CBossInfos_.get(index);
                }
                return (FightLevelHandler.BossInfo) this.s2CBossInfosBuilder_.getMessage(index);
            }

            public Builder setS2CBossInfos(int index, FightLevelHandler.BossInfo value) {
                if (this.s2CBossInfosBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureS2CBossInfosIsMutable();
                    this.s2CBossInfos_.set(index, value);
                    onChanged();
                } else {
                    this.s2CBossInfosBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setS2CBossInfos(int index, FightLevelHandler.BossInfo.Builder builderForValue) {
                if (this.s2CBossInfosBuilder_ == null) {
                    ensureS2CBossInfosIsMutable();
                    this.s2CBossInfos_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CBossInfosBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addS2CBossInfos(FightLevelHandler.BossInfo value) {
                if (this.s2CBossInfosBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureS2CBossInfosIsMutable();
                    this.s2CBossInfos_.add(value);
                    onChanged();
                } else {
                    this.s2CBossInfosBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addS2CBossInfos(int index, FightLevelHandler.BossInfo value) {
                if (this.s2CBossInfosBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureS2CBossInfosIsMutable();
                    this.s2CBossInfos_.add(index, value);
                    onChanged();
                } else {
                    this.s2CBossInfosBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addS2CBossInfos(FightLevelHandler.BossInfo.Builder builderForValue) {
                if (this.s2CBossInfosBuilder_ == null) {
                    ensureS2CBossInfosIsMutable();
                    this.s2CBossInfos_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.s2CBossInfosBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addS2CBossInfos(int index, FightLevelHandler.BossInfo.Builder builderForValue) {
                if (this.s2CBossInfosBuilder_ == null) {
                    ensureS2CBossInfosIsMutable();
                    this.s2CBossInfos_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CBossInfosBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllS2CBossInfos(Iterable<? extends FightLevelHandler.BossInfo> values) {
                if (this.s2CBossInfosBuilder_ == null) {
                    ensureS2CBossInfosIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.s2CBossInfos_);
                    onChanged();
                } else {
                    this.s2CBossInfosBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearS2CBossInfos() {
                if (this.s2CBossInfosBuilder_ == null) {
                    this.s2CBossInfos_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                    onChanged();
                } else {
                    this.s2CBossInfosBuilder_.clear();
                }
                return this;
            }

            public Builder removeS2CBossInfos(int index) {
                if (this.s2CBossInfosBuilder_ == null) {
                    ensureS2CBossInfosIsMutable();
                    this.s2CBossInfos_.remove(index);
                    onChanged();
                } else {
                    this.s2CBossInfosBuilder_.remove(index);
                }
                return this;
            }

            public FightLevelHandler.BossInfo.Builder getS2CBossInfosBuilder(int index) {
                return (FightLevelHandler.BossInfo.Builder) getS2CBossInfosFieldBuilder().getBuilder(index);
            }

            public FightLevelHandler.BossInfoOrBuilder getS2CBossInfosOrBuilder(int index) {
                if (this.s2CBossInfosBuilder_ == null) {
                    return this.s2CBossInfos_.get(index);
                }
                return (FightLevelHandler.BossInfoOrBuilder) this.s2CBossInfosBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends FightLevelHandler.BossInfoOrBuilder> getS2CBossInfosOrBuilderList() {
                if (this.s2CBossInfosBuilder_ != null) {
                    return this.s2CBossInfosBuilder_.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList((List) this.s2CBossInfos_);
            }

            public FightLevelHandler.BossInfo.Builder addS2CBossInfosBuilder() {
                return (FightLevelHandler.BossInfo.Builder) getS2CBossInfosFieldBuilder().addBuilder(FightLevelHandler.BossInfo.getDefaultInstance());
            }

            public FightLevelHandler.BossInfo.Builder addS2CBossInfosBuilder(int index) {
                return (FightLevelHandler.BossInfo.Builder) getS2CBossInfosFieldBuilder().addBuilder(index, FightLevelHandler.BossInfo.getDefaultInstance());
            }

            public List<FightLevelHandler.BossInfo.Builder> getS2CBossInfosBuilderList() {
                return getS2CBossInfosFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<FightLevelHandler.BossInfo, FightLevelHandler.BossInfo.Builder, FightLevelHandler.BossInfoOrBuilder> getS2CBossInfosFieldBuilder() {
                if (this.s2CBossInfosBuilder_ == null) {
                    this.s2CBossInfosBuilder_ = new RepeatedFieldBuilder(this.s2CBossInfos_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean());
                    this.s2CBossInfos_ = null;
                }
                return this.s2CBossInfosBuilder_;
            }
        }
    }

    public static final class RankInfo
            extends GeneratedMessage
            implements RankInfoOrBuilder {
        private static final RankInfo defaultInstance = new RankInfo(true);
        private final UnknownFieldSet unknownFields;

        private RankInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private RankInfo(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static RankInfo getDefaultInstance() {
            return defaultInstance;
        }

        public RankInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private RankInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    PlayerOuterClass.PlayerBasic.Builder subBuilder;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            subBuilder = null;
                            if ((this.bitField0_ & 0x1) == 1) subBuilder = this.player_.toBuilder();
                            this.player_ = (PlayerOuterClass.PlayerBasic) input.readMessage(PlayerOuterClass.PlayerBasic.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(this.player_);
                                this.player_ = subBuilder.buildPartial();
                            }
                            this.bitField0_ |= 0x1;
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.damage_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_RankInfo_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_RankInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(RankInfo.class, Builder.class);
        }

        public static Parser<RankInfo> PARSER = (Parser<RankInfo>) new AbstractParser<RankInfo>() {
            public FightLevelHandler.RankInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.RankInfo(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int PLAYER_FIELD_NUMBER = 1;
        private PlayerOuterClass.PlayerBasic player_;
        public static final int DAMAGE_FIELD_NUMBER = 2;
        private int damage_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<RankInfo> getParserForType() {
            return PARSER;
        }

        public boolean hasPlayer() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public PlayerOuterClass.PlayerBasic getPlayer() {
            return this.player_;
        }

        public PlayerOuterClass.PlayerBasicOrBuilder getPlayerOrBuilder() {
            return (PlayerOuterClass.PlayerBasicOrBuilder) this.player_;
        }

        public boolean hasDamage() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getDamage() {
            return this.damage_;
        }

        private void initFields() {
            this.player_ = PlayerOuterClass.PlayerBasic.getDefaultInstance();
            this.damage_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasPlayer()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasDamage()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!getPlayer().isInitialized()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeMessage(1, (MessageLite) this.player_);
            if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.damage_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeMessageSize(1, (MessageLite) this.player_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.damage_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static RankInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (RankInfo) PARSER.parseFrom(data);
        }

        public static RankInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (RankInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static RankInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (RankInfo) PARSER.parseFrom(data);
        }

        public static RankInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (RankInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static RankInfo parseFrom(InputStream input) throws IOException {
            return (RankInfo) PARSER.parseFrom(input);
        }

        public static RankInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RankInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static RankInfo parseDelimitedFrom(InputStream input) throws IOException {
            return (RankInfo) PARSER.parseDelimitedFrom(input);
        }

        public static RankInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RankInfo) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static RankInfo parseFrom(CodedInputStream input) throws IOException {
            return (RankInfo) PARSER.parseFrom(input);
        }

        public static RankInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (RankInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(RankInfo prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.RankInfoOrBuilder {
            private int bitField0_;
            private PlayerOuterClass.PlayerBasic player_;
            private SingleFieldBuilder<PlayerOuterClass.PlayerBasic, PlayerOuterClass.PlayerBasic.Builder, PlayerOuterClass.PlayerBasicOrBuilder> playerBuilder_;
            private int damage_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_RankInfo_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_RankInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.RankInfo.class, Builder.class);
            }

            private Builder() {
                this.player_ = PlayerOuterClass.PlayerBasic.getDefaultInstance();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.player_ = PlayerOuterClass.PlayerBasic.getDefaultInstance();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.RankInfo.alwaysUseFieldBuilders) getPlayerFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                if (this.playerBuilder_ == null) {
                    this.player_ = PlayerOuterClass.PlayerBasic.getDefaultInstance();
                } else {
                    this.playerBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFE;
                this.damage_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_RankInfo_descriptor;
            }

            public FightLevelHandler.RankInfo getDefaultInstanceForType() {
                return FightLevelHandler.RankInfo.getDefaultInstance();
            }

            public FightLevelHandler.RankInfo build() {
                FightLevelHandler.RankInfo result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.RankInfo buildPartial() {
                FightLevelHandler.RankInfo result = new FightLevelHandler.RankInfo(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                if (this.playerBuilder_ == null) {
                    result.player_ = this.player_;
                } else {
                    result.player_ = (PlayerOuterClass.PlayerBasic) this.playerBuilder_.build();
                }
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.damage_ = this.damage_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.RankInfo) return mergeFrom((FightLevelHandler.RankInfo) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.RankInfo other) {
                if (other == FightLevelHandler.RankInfo.getDefaultInstance()) return this;
                if (other.hasPlayer()) mergePlayer(other.getPlayer());
                if (other.hasDamage()) setDamage(other.getDamage());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasPlayer()) return false;
                if (!hasDamage()) return false;
                if (!getPlayer().isInitialized()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.RankInfo parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.RankInfo) FightLevelHandler.RankInfo.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.RankInfo) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasPlayer() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public PlayerOuterClass.PlayerBasic getPlayer() {
                if (this.playerBuilder_ == null) return this.player_;
                return (PlayerOuterClass.PlayerBasic) this.playerBuilder_.getMessage();
            }

            public Builder setPlayer(PlayerOuterClass.PlayerBasic value) {
                if (this.playerBuilder_ == null) {
                    if (value == null) throw new NullPointerException();
                    this.player_ = value;
                    onChanged();
                } else {
                    this.playerBuilder_.setMessage((GeneratedMessage) value);
                }
                this.bitField0_ |= 0x1;
                return this;
            }

            public Builder setPlayer(PlayerOuterClass.PlayerBasic.Builder builderForValue) {
                if (this.playerBuilder_ == null) {
                    this.player_ = builderForValue.build();
                    onChanged();
                } else {
                    this.playerBuilder_.setMessage((GeneratedMessage) builderForValue.build());
                }
                this.bitField0_ |= 0x1;
                return this;
            }

            public Builder mergePlayer(PlayerOuterClass.PlayerBasic value) {
                if (this.playerBuilder_ == null) {
                    if ((this.bitField0_ & 0x1) == 1 && this.player_ != PlayerOuterClass.PlayerBasic.getDefaultInstance()) {
                        this.player_ = PlayerOuterClass.PlayerBasic.newBuilder(this.player_).mergeFrom(value).buildPartial();
                    } else {
                        this.player_ = value;
                    }
                    onChanged();
                } else {
                    this.playerBuilder_.mergeFrom((GeneratedMessage) value);
                }
                this.bitField0_ |= 0x1;
                return this;
            }

            public Builder clearPlayer() {
                if (this.playerBuilder_ == null) {
                    this.player_ = PlayerOuterClass.PlayerBasic.getDefaultInstance();
                    onChanged();
                } else {
                    this.playerBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public PlayerOuterClass.PlayerBasic.Builder getPlayerBuilder() {
                this.bitField0_ |= 0x1;
                onChanged();
                return (PlayerOuterClass.PlayerBasic.Builder) getPlayerFieldBuilder().getBuilder();
            }

            public PlayerOuterClass.PlayerBasicOrBuilder getPlayerOrBuilder() {
                if (this.playerBuilder_ != null)
                    return (PlayerOuterClass.PlayerBasicOrBuilder) this.playerBuilder_.getMessageOrBuilder();
                return (PlayerOuterClass.PlayerBasicOrBuilder) this.player_;
            }

            private SingleFieldBuilder<PlayerOuterClass.PlayerBasic, PlayerOuterClass.PlayerBasic.Builder, PlayerOuterClass.PlayerBasicOrBuilder> getPlayerFieldBuilder() {
                if (this.playerBuilder_ == null) {
                    this.playerBuilder_ = new SingleFieldBuilder((GeneratedMessage) getPlayer(), getParentForChildren(), isClean());
                    this.player_ = null;
                }
                return this.playerBuilder_;
            }

            public boolean hasDamage() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getDamage() {
                return this.damage_;
            }

            public Builder setDamage(int value) {
                this.bitField0_ |= 0x2;
                this.damage_ = value;
                onChanged();
                return this;
            }

            public Builder clearDamage() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.damage_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class GetBossDamageRankRequest
            extends GeneratedMessage
            implements GetBossDamageRankRequestOrBuilder {
        private static final GetBossDamageRankRequest defaultInstance = new GetBossDamageRankRequest(true);
        private final UnknownFieldSet unknownFields;

        private GetBossDamageRankRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetBossDamageRankRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetBossDamageRankRequest getDefaultInstance() {
            return defaultInstance;
        }

        public GetBossDamageRankRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetBossDamageRankRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_GetBossDamageRankRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_GetBossDamageRankRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(GetBossDamageRankRequest.class, Builder.class);
        }

        public static Parser<GetBossDamageRankRequest> PARSER = (Parser<GetBossDamageRankRequest>) new AbstractParser<GetBossDamageRankRequest>() {
            public FightLevelHandler.GetBossDamageRankRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.GetBossDamageRankRequest(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetBossDamageRankRequest> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GetBossDamageRankRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetBossDamageRankRequest) PARSER.parseFrom(data);
        }

        public static GetBossDamageRankRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetBossDamageRankRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetBossDamageRankRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetBossDamageRankRequest) PARSER.parseFrom(data);
        }

        public static GetBossDamageRankRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetBossDamageRankRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetBossDamageRankRequest parseFrom(InputStream input) throws IOException {
            return (GetBossDamageRankRequest) PARSER.parseFrom(input);
        }

        public static GetBossDamageRankRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetBossDamageRankRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GetBossDamageRankRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (GetBossDamageRankRequest) PARSER.parseDelimitedFrom(input);
        }

        public static GetBossDamageRankRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetBossDamageRankRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GetBossDamageRankRequest parseFrom(CodedInputStream input) throws IOException {
            return (GetBossDamageRankRequest) PARSER.parseFrom(input);
        }

        public static GetBossDamageRankRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetBossDamageRankRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GetBossDamageRankRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.GetBossDamageRankRequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_GetBossDamageRankRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_GetBossDamageRankRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.GetBossDamageRankRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.GetBossDamageRankRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_GetBossDamageRankRequest_descriptor;
            }

            public FightLevelHandler.GetBossDamageRankRequest getDefaultInstanceForType() {
                return FightLevelHandler.GetBossDamageRankRequest.getDefaultInstance();
            }

            public FightLevelHandler.GetBossDamageRankRequest build() {
                FightLevelHandler.GetBossDamageRankRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.GetBossDamageRankRequest buildPartial() {
                FightLevelHandler.GetBossDamageRankRequest result = new FightLevelHandler.GetBossDamageRankRequest(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.GetBossDamageRankRequest)
                    return mergeFrom((FightLevelHandler.GetBossDamageRankRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.GetBossDamageRankRequest other) {
                if (other == FightLevelHandler.GetBossDamageRankRequest.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.GetBossDamageRankRequest parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.GetBossDamageRankRequest) FightLevelHandler.GetBossDamageRankRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.GetBossDamageRankRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class GetBossDamageRankResponse
            extends GeneratedMessage
            implements GetBossDamageRankResponseOrBuilder {
        private static final GetBossDamageRankResponse defaultInstance = new GetBossDamageRankResponse(true);
        private final UnknownFieldSet unknownFields;

        private GetBossDamageRankResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetBossDamageRankResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetBossDamageRankResponse getDefaultInstance() {
            return defaultInstance;
        }

        public GetBossDamageRankResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetBossDamageRankResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                        case 26:
                            if ((mutable_bitField0_ & 0x4) != 4) {
                                this.s2CRankInfos_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x4;
                            }
                            this.s2CRankInfos_.add(input.readMessage(FightLevelHandler.RankInfo.PARSER, extensionRegistry));
                            break;
                        case 32:
                            this.bitField0_ |= 0x4;
                            this.s2COwnDamage_ = input.readInt32();
                            break;
                        case 40:
                            this.bitField0_ |= 0x8;
                            this.s2COwnRank_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x4) == 4)
                    this.s2CRankInfos_ = Collections.unmodifiableList(this.s2CRankInfos_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_GetBossDamageRankResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_GetBossDamageRankResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(GetBossDamageRankResponse.class, Builder.class);
        }

        public static Parser<GetBossDamageRankResponse> PARSER = (Parser<GetBossDamageRankResponse>) new AbstractParser<GetBossDamageRankResponse>() {
            public FightLevelHandler.GetBossDamageRankResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.GetBossDamageRankResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int S2C_RANKINFOS_FIELD_NUMBER = 3;
        private List<FightLevelHandler.RankInfo> s2CRankInfos_;
        public static final int S2C_OWNDAMAGE_FIELD_NUMBER = 4;
        private int s2COwnDamage_;
        public static final int S2C_OWNRANK_FIELD_NUMBER = 5;
        private int s2COwnRank_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetBossDamageRankResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        static {
            defaultInstance.initFields();
        }

        public List<FightLevelHandler.RankInfo> getS2CRankInfosList() {
            return this.s2CRankInfos_;
        }

        public List<? extends FightLevelHandler.RankInfoOrBuilder> getS2CRankInfosOrBuilderList() {
            return (List) this.s2CRankInfos_;
        }

        public int getS2CRankInfosCount() {
            return this.s2CRankInfos_.size();
        }

        public FightLevelHandler.RankInfo getS2CRankInfos(int index) {
            return this.s2CRankInfos_.get(index);
        }

        public FightLevelHandler.RankInfoOrBuilder getS2CRankInfosOrBuilder(int index) {
            return this.s2CRankInfos_.get(index);
        }

        public boolean hasS2COwnDamage() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public int getS2COwnDamage() {
            return this.s2COwnDamage_;
        }

        public boolean hasS2COwnRank() {
            return ((this.bitField0_ & 0x8) == 8);
        }

        public int getS2COwnRank() {
            return this.s2COwnRank_;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
            this.s2CRankInfos_ = Collections.emptyList();
            this.s2COwnDamage_ = 0;
            this.s2COwnRank_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2COwnDamage()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2COwnRank()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getS2CRankInfosCount(); i++) {
                if (!getS2CRankInfos(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(2, getS2CMsgBytes());
            for (int i = 0; i < this.s2CRankInfos_.size(); i++)
                output.writeMessage(3, (MessageLite) this.s2CRankInfos_.get(i));
            if ((this.bitField0_ & 0x4) == 4)
                output.writeInt32(4, this.s2COwnDamage_);
            if ((this.bitField0_ & 0x8) == 8)
                output.writeInt32(5, this.s2COwnRank_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            for (int i = 0; i < this.s2CRankInfos_.size(); i++)
                size += CodedOutputStream.computeMessageSize(3, (MessageLite) this.s2CRankInfos_.get(i));
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeInt32Size(4, this.s2COwnDamage_);
            if ((this.bitField0_ & 0x8) == 8)
                size += CodedOutputStream.computeInt32Size(5, this.s2COwnRank_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GetBossDamageRankResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetBossDamageRankResponse) PARSER.parseFrom(data);
        }

        public static GetBossDamageRankResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetBossDamageRankResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetBossDamageRankResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetBossDamageRankResponse) PARSER.parseFrom(data);
        }

        public static GetBossDamageRankResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetBossDamageRankResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetBossDamageRankResponse parseFrom(InputStream input) throws IOException {
            return (GetBossDamageRankResponse) PARSER.parseFrom(input);
        }

        public static GetBossDamageRankResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetBossDamageRankResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GetBossDamageRankResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (GetBossDamageRankResponse) PARSER.parseDelimitedFrom(input);
        }

        public static GetBossDamageRankResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetBossDamageRankResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GetBossDamageRankResponse parseFrom(CodedInputStream input) throws IOException {
            return (GetBossDamageRankResponse) PARSER.parseFrom(input);
        }

        public static GetBossDamageRankResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetBossDamageRankResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GetBossDamageRankResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.GetBossDamageRankResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;
            private List<FightLevelHandler.RankInfo> s2CRankInfos_;
            private RepeatedFieldBuilder<FightLevelHandler.RankInfo, FightLevelHandler.RankInfo.Builder, FightLevelHandler.RankInfoOrBuilder> s2CRankInfosBuilder_;
            private int s2COwnDamage_;
            private int s2COwnRank_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_GetBossDamageRankResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_GetBossDamageRankResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.GetBossDamageRankResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                this.s2CRankInfos_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                this.s2CRankInfos_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.GetBossDamageRankResponse.alwaysUseFieldBuilders)
                    getS2CRankInfosFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                if (this.s2CRankInfosBuilder_ == null) {
                    this.s2CRankInfos_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                } else {
                    this.s2CRankInfosBuilder_.clear();
                }
                this.s2COwnDamage_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                this.s2COwnRank_ = 0;
                this.bitField0_ &= 0xFFFFFFEF;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_GetBossDamageRankResponse_descriptor;
            }

            public FightLevelHandler.GetBossDamageRankResponse getDefaultInstanceForType() {
                return FightLevelHandler.GetBossDamageRankResponse.getDefaultInstance();
            }

            public FightLevelHandler.GetBossDamageRankResponse build() {
                FightLevelHandler.GetBossDamageRankResponse result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.GetBossDamageRankResponse buildPartial() {
                FightLevelHandler.GetBossDamageRankResponse result = new FightLevelHandler.GetBossDamageRankResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                if (this.s2CRankInfosBuilder_ == null) {
                    if ((this.bitField0_ & 0x4) == 4) {
                        this.s2CRankInfos_ = Collections.unmodifiableList(this.s2CRankInfos_);
                        this.bitField0_ &= 0xFFFFFFFB;
                    }
                    result.s2CRankInfos_ = this.s2CRankInfos_;
                } else {
                    result.s2CRankInfos_ = this.s2CRankInfosBuilder_.build();
                }
                if ((from_bitField0_ & 0x8) == 8)
                    to_bitField0_ |= 0x4;
                result.s2COwnDamage_ = this.s2COwnDamage_;
                if ((from_bitField0_ & 0x10) == 16)
                    to_bitField0_ |= 0x8;
                result.s2COwnRank_ = this.s2COwnRank_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.GetBossDamageRankResponse)
                    return mergeFrom((FightLevelHandler.GetBossDamageRankResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.GetBossDamageRankResponse other) {
                if (other == FightLevelHandler.GetBossDamageRankResponse.getDefaultInstance())
                    return this;
                if (other.hasS2CCode())
                    setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (this.s2CRankInfosBuilder_ == null) {
                    if (!other.s2CRankInfos_.isEmpty()) {
                        if (this.s2CRankInfos_.isEmpty()) {
                            this.s2CRankInfos_ = other.s2CRankInfos_;
                            this.bitField0_ &= 0xFFFFFFFB;
                        } else {
                            ensureS2CRankInfosIsMutable();
                            this.s2CRankInfos_.addAll(other.s2CRankInfos_);
                        }
                        onChanged();
                    }
                } else if (!other.s2CRankInfos_.isEmpty()) {
                    if (this.s2CRankInfosBuilder_.isEmpty()) {
                        this.s2CRankInfosBuilder_.dispose();
                        this.s2CRankInfosBuilder_ = null;
                        this.s2CRankInfos_ = other.s2CRankInfos_;
                        this.bitField0_ &= 0xFFFFFFFB;
                        this.s2CRankInfosBuilder_ = FightLevelHandler.GetBossDamageRankResponse.alwaysUseFieldBuilders ? getS2CRankInfosFieldBuilder() : null;
                    } else {
                        this.s2CRankInfosBuilder_.addAllMessages(other.s2CRankInfos_);
                    }
                }
                if (other.hasS2COwnDamage())
                    setS2COwnDamage(other.getS2COwnDamage());
                if (other.hasS2COwnRank())
                    setS2COwnRank(other.getS2COwnRank());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode())
                    return false;
                if (!hasS2COwnDamage())
                    return false;
                if (!hasS2COwnRank())
                    return false;
                for (int i = 0; i < getS2CRankInfosCount(); i++) {
                    if (!getS2CRankInfos(i).isInitialized())
                        return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.GetBossDamageRankResponse parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.GetBossDamageRankResponse) FightLevelHandler.GetBossDamageRankResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.GetBossDamageRankResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = FightLevelHandler.GetBossDamageRankResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            private void ensureS2CRankInfosIsMutable() {
                if ((this.bitField0_ & 0x4) != 4) {
                    this.s2CRankInfos_ = new ArrayList<>(this.s2CRankInfos_);
                    this.bitField0_ |= 0x4;
                }
            }

            public List<FightLevelHandler.RankInfo> getS2CRankInfosList() {
                if (this.s2CRankInfosBuilder_ == null)
                    return Collections.unmodifiableList(this.s2CRankInfos_);
                return this.s2CRankInfosBuilder_.getMessageList();
            }

            public int getS2CRankInfosCount() {
                if (this.s2CRankInfosBuilder_ == null)
                    return this.s2CRankInfos_.size();
                return this.s2CRankInfosBuilder_.getCount();
            }

            public FightLevelHandler.RankInfo getS2CRankInfos(int index) {
                if (this.s2CRankInfosBuilder_ == null)
                    return this.s2CRankInfos_.get(index);
                return (FightLevelHandler.RankInfo) this.s2CRankInfosBuilder_.getMessage(index);
            }

            public Builder setS2CRankInfos(int index, FightLevelHandler.RankInfo value) {
                if (this.s2CRankInfosBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CRankInfosIsMutable();
                    this.s2CRankInfos_.set(index, value);
                    onChanged();
                } else {
                    this.s2CRankInfosBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setS2CRankInfos(int index, FightLevelHandler.RankInfo.Builder builderForValue) {
                if (this.s2CRankInfosBuilder_ == null) {
                    ensureS2CRankInfosIsMutable();
                    this.s2CRankInfos_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CRankInfosBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addS2CRankInfos(FightLevelHandler.RankInfo value) {
                if (this.s2CRankInfosBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CRankInfosIsMutable();
                    this.s2CRankInfos_.add(value);
                    onChanged();
                } else {
                    this.s2CRankInfosBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addS2CRankInfos(int index, FightLevelHandler.RankInfo value) {
                if (this.s2CRankInfosBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CRankInfosIsMutable();
                    this.s2CRankInfos_.add(index, value);
                    onChanged();
                } else {
                    this.s2CRankInfosBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addS2CRankInfos(FightLevelHandler.RankInfo.Builder builderForValue) {
                if (this.s2CRankInfosBuilder_ == null) {
                    ensureS2CRankInfosIsMutable();
                    this.s2CRankInfos_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.s2CRankInfosBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addS2CRankInfos(int index, FightLevelHandler.RankInfo.Builder builderForValue) {
                if (this.s2CRankInfosBuilder_ == null) {
                    ensureS2CRankInfosIsMutable();
                    this.s2CRankInfos_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CRankInfosBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllS2CRankInfos(Iterable<? extends FightLevelHandler.RankInfo> values) {
                if (this.s2CRankInfosBuilder_ == null) {
                    ensureS2CRankInfosIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.s2CRankInfos_);
                    onChanged();
                } else {
                    this.s2CRankInfosBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearS2CRankInfos() {
                if (this.s2CRankInfosBuilder_ == null) {
                    this.s2CRankInfos_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                    onChanged();
                } else {
                    this.s2CRankInfosBuilder_.clear();
                }
                return this;
            }

            public Builder removeS2CRankInfos(int index) {
                if (this.s2CRankInfosBuilder_ == null) {
                    ensureS2CRankInfosIsMutable();
                    this.s2CRankInfos_.remove(index);
                    onChanged();
                } else {
                    this.s2CRankInfosBuilder_.remove(index);
                }
                return this;
            }

            public FightLevelHandler.RankInfo.Builder getS2CRankInfosBuilder(int index) {
                return (FightLevelHandler.RankInfo.Builder) getS2CRankInfosFieldBuilder().getBuilder(index);
            }

            public FightLevelHandler.RankInfoOrBuilder getS2CRankInfosOrBuilder(int index) {
                if (this.s2CRankInfosBuilder_ == null)
                    return this.s2CRankInfos_.get(index);
                return (FightLevelHandler.RankInfoOrBuilder) this.s2CRankInfosBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends FightLevelHandler.RankInfoOrBuilder> getS2CRankInfosOrBuilderList() {
                if (this.s2CRankInfosBuilder_ != null)
                    return this.s2CRankInfosBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.s2CRankInfos_);
            }

            public FightLevelHandler.RankInfo.Builder addS2CRankInfosBuilder() {
                return (FightLevelHandler.RankInfo.Builder) getS2CRankInfosFieldBuilder().addBuilder(FightLevelHandler.RankInfo.getDefaultInstance());
            }

            public FightLevelHandler.RankInfo.Builder addS2CRankInfosBuilder(int index) {
                return (FightLevelHandler.RankInfo.Builder) getS2CRankInfosFieldBuilder().addBuilder(index, FightLevelHandler.RankInfo.getDefaultInstance());
            }

            public List<FightLevelHandler.RankInfo.Builder> getS2CRankInfosBuilderList() {
                return getS2CRankInfosFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<FightLevelHandler.RankInfo, FightLevelHandler.RankInfo.Builder, FightLevelHandler.RankInfoOrBuilder> getS2CRankInfosFieldBuilder() {
                if (this.s2CRankInfosBuilder_ == null) {
                    this.s2CRankInfosBuilder_ = new RepeatedFieldBuilder(this.s2CRankInfos_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean());
                    this.s2CRankInfos_ = null;
                }
                return this.s2CRankInfosBuilder_;
            }

            public boolean hasS2COwnDamage() {
                return ((this.bitField0_ & 0x8) == 8);
            }

            public int getS2COwnDamage() {
                return this.s2COwnDamage_;
            }

            public Builder setS2COwnDamage(int value) {
                this.bitField0_ |= 0x8;
                this.s2COwnDamage_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2COwnDamage() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.s2COwnDamage_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2COwnRank() {
                return ((this.bitField0_ & 0x10) == 16);
            }

            public int getS2COwnRank() {
                return this.s2COwnRank_;
            }

            public Builder setS2COwnRank(int value) {
                this.bitField0_ |= 0x10;
                this.s2COwnRank_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2COwnRank() {
                this.bitField0_ &= 0xFFFFFFEF;
                this.s2COwnRank_ = 0;
                onChanged();
                return this;
            }
        }
    }

    public static final class GetLllsionInfoRequest extends GeneratedMessage implements GetLllsionInfoRequestOrBuilder {
        private static final GetLllsionInfoRequest defaultInstance = new GetLllsionInfoRequest(true);
        private final UnknownFieldSet unknownFields;

        private GetLllsionInfoRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetLllsionInfoRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetLllsionInfoRequest getDefaultInstance() {
            return defaultInstance;
        }

        public GetLllsionInfoRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetLllsionInfoRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_GetLllsionInfoRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_GetLllsionInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(GetLllsionInfoRequest.class, Builder.class);
        }

        public static Parser<GetLllsionInfoRequest> PARSER = (Parser<GetLllsionInfoRequest>) new AbstractParser<GetLllsionInfoRequest>() {
            public FightLevelHandler.GetLllsionInfoRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.GetLllsionInfoRequest(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetLllsionInfoRequest> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GetLllsionInfoRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetLllsionInfoRequest) PARSER.parseFrom(data);
        }

        public static GetLllsionInfoRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetLllsionInfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetLllsionInfoRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetLllsionInfoRequest) PARSER.parseFrom(data);
        }

        public static GetLllsionInfoRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetLllsionInfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetLllsionInfoRequest parseFrom(InputStream input) throws IOException {
            return (GetLllsionInfoRequest) PARSER.parseFrom(input);
        }

        public static GetLllsionInfoRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetLllsionInfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GetLllsionInfoRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (GetLllsionInfoRequest) PARSER.parseDelimitedFrom(input);
        }

        public static GetLllsionInfoRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetLllsionInfoRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GetLllsionInfoRequest parseFrom(CodedInputStream input) throws IOException {
            return (GetLllsionInfoRequest) PARSER.parseFrom(input);
        }

        public static GetLllsionInfoRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetLllsionInfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GetLllsionInfoRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.GetLllsionInfoRequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_GetLllsionInfoRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_GetLllsionInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.GetLllsionInfoRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.GetLllsionInfoRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_GetLllsionInfoRequest_descriptor;
            }

            public FightLevelHandler.GetLllsionInfoRequest getDefaultInstanceForType() {
                return FightLevelHandler.GetLllsionInfoRequest.getDefaultInstance();
            }

            public FightLevelHandler.GetLllsionInfoRequest build() {
                FightLevelHandler.GetLllsionInfoRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.GetLllsionInfoRequest buildPartial() {
                FightLevelHandler.GetLllsionInfoRequest result = new FightLevelHandler.GetLllsionInfoRequest(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.GetLllsionInfoRequest)
                    return mergeFrom((FightLevelHandler.GetLllsionInfoRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.GetLllsionInfoRequest other) {
                if (other == FightLevelHandler.GetLllsionInfoRequest.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.GetLllsionInfoRequest parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.GetLllsionInfoRequest) FightLevelHandler.GetLllsionInfoRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.GetLllsionInfoRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class GetLllsionInfoResponse
            extends GeneratedMessage
            implements GetLllsionInfoResponseOrBuilder {
        private static final GetLllsionInfoResponse defaultInstance = new GetLllsionInfoResponse(true);
        private final UnknownFieldSet unknownFields;

        private GetLllsionInfoResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetLllsionInfoResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetLllsionInfoResponse getDefaultInstance() {
            return defaultInstance;
        }

        public GetLllsionInfoResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetLllsionInfoResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.s2CTodayExp_ = input.readInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 0x8;
                            this.s2CTodayClassexp_ = input.readInt32();
                            break;
                        case 40:
                            this.bitField0_ |= 0x10;
                            this.s2CTodayGold_ = input.readInt32();
                            break;
                        case 48:
                            this.bitField0_ |= 0x20;
                            this.s2CMaxExp_ = input.readInt32();
                            break;
                        case 56:
                            this.bitField0_ |= 0x40;
                            this.s2CMaxClassexp_ = input.readInt32();
                            break;
                        case 64:
                            this.bitField0_ |= 0x80;
                            this.s2CMaxGold_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_GetLllsionInfoResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_GetLllsionInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(GetLllsionInfoResponse.class, Builder.class);
        }

        public static Parser<GetLllsionInfoResponse> PARSER = (Parser<GetLllsionInfoResponse>) new AbstractParser<GetLllsionInfoResponse>() {
            public FightLevelHandler.GetLllsionInfoResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.GetLllsionInfoResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int S2C_TODAY_EXP_FIELD_NUMBER = 3;
        private int s2CTodayExp_;
        public static final int S2C_TODAY_CLASSEXP_FIELD_NUMBER = 4;
        private int s2CTodayClassexp_;
        public static final int S2C_TODAY_GOLD_FIELD_NUMBER = 5;
        private int s2CTodayGold_;
        public static final int S2C_MAX_EXP_FIELD_NUMBER = 6;
        private int s2CMaxExp_;
        public static final int S2C_MAX_CLASSEXP_FIELD_NUMBER = 7;
        private int s2CMaxClassexp_;
        public static final int S2C_MAX_GOLD_FIELD_NUMBER = 8;
        private int s2CMaxGold_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetLllsionInfoResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        static {
            defaultInstance.initFields();
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String)
                return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8())
                this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasS2CTodayExp() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public int getS2CTodayExp() {
            return this.s2CTodayExp_;
        }

        public boolean hasS2CTodayClassexp() {
            return ((this.bitField0_ & 0x8) == 8);
        }

        public int getS2CTodayClassexp() {
            return this.s2CTodayClassexp_;
        }

        public boolean hasS2CTodayGold() {
            return ((this.bitField0_ & 0x10) == 16);
        }

        public int getS2CTodayGold() {
            return this.s2CTodayGold_;
        }

        public boolean hasS2CMaxExp() {
            return ((this.bitField0_ & 0x20) == 32);
        }

        public int getS2CMaxExp() {
            return this.s2CMaxExp_;
        }

        public boolean hasS2CMaxClassexp() {
            return ((this.bitField0_ & 0x40) == 64);
        }

        public int getS2CMaxClassexp() {
            return this.s2CMaxClassexp_;
        }

        public boolean hasS2CMaxGold() {
            return ((this.bitField0_ & 0x80) == 128);
        }

        public int getS2CMaxGold() {
            return this.s2CMaxGold_;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
            this.s2CTodayExp_ = 0;
            this.s2CTodayClassexp_ = 0;
            this.s2CTodayGold_ = 0;
            this.s2CMaxExp_ = 0;
            this.s2CMaxClassexp_ = 0;
            this.s2CMaxGold_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2CTodayExp()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2CTodayClassexp()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2CTodayGold()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(2, getS2CMsgBytes());
            if ((this.bitField0_ & 0x4) == 4)
                output.writeInt32(3, this.s2CTodayExp_);
            if ((this.bitField0_ & 0x8) == 8)
                output.writeInt32(4, this.s2CTodayClassexp_);
            if ((this.bitField0_ & 0x10) == 16)
                output.writeInt32(5, this.s2CTodayGold_);
            if ((this.bitField0_ & 0x20) == 32)
                output.writeInt32(6, this.s2CMaxExp_);
            if ((this.bitField0_ & 0x40) == 64)
                output.writeInt32(7, this.s2CMaxClassexp_);
            if ((this.bitField0_ & 0x80) == 128)
                output.writeInt32(8, this.s2CMaxGold_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeInt32Size(3, this.s2CTodayExp_);
            if ((this.bitField0_ & 0x8) == 8)
                size += CodedOutputStream.computeInt32Size(4, this.s2CTodayClassexp_);
            if ((this.bitField0_ & 0x10) == 16)
                size += CodedOutputStream.computeInt32Size(5, this.s2CTodayGold_);
            if ((this.bitField0_ & 0x20) == 32)
                size += CodedOutputStream.computeInt32Size(6, this.s2CMaxExp_);
            if ((this.bitField0_ & 0x40) == 64)
                size += CodedOutputStream.computeInt32Size(7, this.s2CMaxClassexp_);
            if ((this.bitField0_ & 0x80) == 128)
                size += CodedOutputStream.computeInt32Size(8, this.s2CMaxGold_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GetLllsionInfoResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetLllsionInfoResponse) PARSER.parseFrom(data);
        }

        public static GetLllsionInfoResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetLllsionInfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetLllsionInfoResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetLllsionInfoResponse) PARSER.parseFrom(data);
        }

        public static GetLllsionInfoResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetLllsionInfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetLllsionInfoResponse parseFrom(InputStream input) throws IOException {
            return (GetLllsionInfoResponse) PARSER.parseFrom(input);
        }

        public static GetLllsionInfoResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetLllsionInfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GetLllsionInfoResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (GetLllsionInfoResponse) PARSER.parseDelimitedFrom(input);
        }

        public static GetLllsionInfoResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetLllsionInfoResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GetLllsionInfoResponse parseFrom(CodedInputStream input) throws IOException {
            return (GetLllsionInfoResponse) PARSER.parseFrom(input);
        }

        public static GetLllsionInfoResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetLllsionInfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GetLllsionInfoResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.GetLllsionInfoResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;
            private int s2CTodayExp_;
            private int s2CTodayClassexp_;
            private int s2CTodayGold_;
            private int s2CMaxExp_;
            private int s2CMaxClassexp_;
            private int s2CMaxGold_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_GetLllsionInfoResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_GetLllsionInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.GetLllsionInfoResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.GetLllsionInfoResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CTodayExp_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                this.s2CTodayClassexp_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                this.s2CTodayGold_ = 0;
                this.bitField0_ &= 0xFFFFFFEF;
                this.s2CMaxExp_ = 0;
                this.bitField0_ &= 0xFFFFFFDF;
                this.s2CMaxClassexp_ = 0;
                this.bitField0_ &= 0xFFFFFFBF;
                this.s2CMaxGold_ = 0;
                this.bitField0_ &= 0xFFFFFF7F;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_GetLllsionInfoResponse_descriptor;
            }

            public FightLevelHandler.GetLllsionInfoResponse getDefaultInstanceForType() {
                return FightLevelHandler.GetLllsionInfoResponse.getDefaultInstance();
            }

            public FightLevelHandler.GetLllsionInfoResponse build() {
                FightLevelHandler.GetLllsionInfoResponse result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.GetLllsionInfoResponse buildPartial() {
                FightLevelHandler.GetLllsionInfoResponse result = new FightLevelHandler.GetLllsionInfoResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                if ((from_bitField0_ & 0x4) == 4)
                    to_bitField0_ |= 0x4;
                result.s2CTodayExp_ = this.s2CTodayExp_;
                if ((from_bitField0_ & 0x8) == 8)
                    to_bitField0_ |= 0x8;
                result.s2CTodayClassexp_ = this.s2CTodayClassexp_;
                if ((from_bitField0_ & 0x10) == 16)
                    to_bitField0_ |= 0x10;
                result.s2CTodayGold_ = this.s2CTodayGold_;
                if ((from_bitField0_ & 0x20) == 32)
                    to_bitField0_ |= 0x20;
                result.s2CMaxExp_ = this.s2CMaxExp_;
                if ((from_bitField0_ & 0x40) == 64)
                    to_bitField0_ |= 0x40;
                result.s2CMaxClassexp_ = this.s2CMaxClassexp_;
                if ((from_bitField0_ & 0x80) == 128)
                    to_bitField0_ |= 0x80;
                result.s2CMaxGold_ = this.s2CMaxGold_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.GetLllsionInfoResponse)
                    return mergeFrom((FightLevelHandler.GetLllsionInfoResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.GetLllsionInfoResponse other) {
                if (other == FightLevelHandler.GetLllsionInfoResponse.getDefaultInstance())
                    return this;
                if (other.hasS2CCode())
                    setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (other.hasS2CTodayExp())
                    setS2CTodayExp(other.getS2CTodayExp());
                if (other.hasS2CTodayClassexp())
                    setS2CTodayClassexp(other.getS2CTodayClassexp());
                if (other.hasS2CTodayGold())
                    setS2CTodayGold(other.getS2CTodayGold());
                if (other.hasS2CMaxExp())
                    setS2CMaxExp(other.getS2CMaxExp());
                if (other.hasS2CMaxClassexp())
                    setS2CMaxClassexp(other.getS2CMaxClassexp());
                if (other.hasS2CMaxGold())
                    setS2CMaxGold(other.getS2CMaxGold());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode())
                    return false;
                if (!hasS2CTodayExp())
                    return false;
                if (!hasS2CTodayClassexp())
                    return false;
                if (!hasS2CTodayGold())
                    return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.GetLllsionInfoResponse parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.GetLllsionInfoResponse) FightLevelHandler.GetLllsionInfoResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.GetLllsionInfoResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = FightLevelHandler.GetLllsionInfoResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public boolean hasS2CTodayExp() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public int getS2CTodayExp() {
                return this.s2CTodayExp_;
            }

            public Builder setS2CTodayExp(int value) {
                this.bitField0_ |= 0x4;
                this.s2CTodayExp_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CTodayExp() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.s2CTodayExp_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CTodayClassexp() {
                return ((this.bitField0_ & 0x8) == 8);
            }

            public int getS2CTodayClassexp() {
                return this.s2CTodayClassexp_;
            }

            public Builder setS2CTodayClassexp(int value) {
                this.bitField0_ |= 0x8;
                this.s2CTodayClassexp_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CTodayClassexp() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.s2CTodayClassexp_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CTodayGold() {
                return ((this.bitField0_ & 0x10) == 16);
            }

            public int getS2CTodayGold() {
                return this.s2CTodayGold_;
            }

            public Builder setS2CTodayGold(int value) {
                this.bitField0_ |= 0x10;
                this.s2CTodayGold_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CTodayGold() {
                this.bitField0_ &= 0xFFFFFFEF;
                this.s2CTodayGold_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMaxExp() {
                return ((this.bitField0_ & 0x20) == 32);
            }

            public int getS2CMaxExp() {
                return this.s2CMaxExp_;
            }

            public Builder setS2CMaxExp(int value) {
                this.bitField0_ |= 0x20;
                this.s2CMaxExp_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMaxExp() {
                this.bitField0_ &= 0xFFFFFFDF;
                this.s2CMaxExp_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMaxClassexp() {
                return ((this.bitField0_ & 0x40) == 64);
            }

            public int getS2CMaxClassexp() {
                return this.s2CMaxClassexp_;
            }

            public Builder setS2CMaxClassexp(int value) {
                this.bitField0_ |= 0x40;
                this.s2CMaxClassexp_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMaxClassexp() {
                this.bitField0_ &= 0xFFFFFFBF;
                this.s2CMaxClassexp_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMaxGold() {
                return ((this.bitField0_ & 0x80) == 128);
            }

            public int getS2CMaxGold() {
                return this.s2CMaxGold_;
            }

            public Builder setS2CMaxGold(int value) {
                this.bitField0_ |= 0x80;
                this.s2CMaxGold_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMaxGold() {
                this.bitField0_ &= 0xFFFFFF7F;
                this.s2CMaxGold_ = 0;
                onChanged();
                return this;
            }
        }
    }

    public static final class EnterLllsionRequest extends GeneratedMessage implements EnterLllsionRequestOrBuilder {
        private static final EnterLllsionRequest defaultInstance = new EnterLllsionRequest(true);
        private final UnknownFieldSet unknownFields;

        private EnterLllsionRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private EnterLllsionRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static EnterLllsionRequest getDefaultInstance() {
            return defaultInstance;
        }

        public EnterLllsionRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private EnterLllsionRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.c2SId_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_EnterLllsionRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_EnterLllsionRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(EnterLllsionRequest.class, Builder.class);
        }

        public static Parser<EnterLllsionRequest> PARSER = (Parser<EnterLllsionRequest>) new AbstractParser<EnterLllsionRequest>() {
            public FightLevelHandler.EnterLllsionRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.EnterLllsionRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int C2S_ID_FIELD_NUMBER = 1;
        private int c2SId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<EnterLllsionRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasC2SId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getC2SId() {
            return this.c2SId_;
        }

        private void initFields() {
            this.c2SId_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasC2SId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.c2SId_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.c2SId_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static EnterLllsionRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (EnterLllsionRequest) PARSER.parseFrom(data);
        }

        public static EnterLllsionRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (EnterLllsionRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static EnterLllsionRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (EnterLllsionRequest) PARSER.parseFrom(data);
        }

        public static EnterLllsionRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (EnterLllsionRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static EnterLllsionRequest parseFrom(InputStream input) throws IOException {
            return (EnterLllsionRequest) PARSER.parseFrom(input);
        }

        public static EnterLllsionRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterLllsionRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static EnterLllsionRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (EnterLllsionRequest) PARSER.parseDelimitedFrom(input);
        }

        public static EnterLllsionRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterLllsionRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static EnterLllsionRequest parseFrom(CodedInputStream input) throws IOException {
            return (EnterLllsionRequest) PARSER.parseFrom(input);
        }

        public static EnterLllsionRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterLllsionRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(EnterLllsionRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.EnterLllsionRequestOrBuilder {
            private int bitField0_;
            private int c2SId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_EnterLllsionRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_EnterLllsionRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.EnterLllsionRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.EnterLllsionRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.c2SId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_EnterLllsionRequest_descriptor;
            }

            public FightLevelHandler.EnterLllsionRequest getDefaultInstanceForType() {
                return FightLevelHandler.EnterLllsionRequest.getDefaultInstance();
            }

            public FightLevelHandler.EnterLllsionRequest build() {
                FightLevelHandler.EnterLllsionRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.EnterLllsionRequest buildPartial() {
                FightLevelHandler.EnterLllsionRequest result = new FightLevelHandler.EnterLllsionRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.c2SId_ = this.c2SId_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.EnterLllsionRequest)
                    return mergeFrom((FightLevelHandler.EnterLllsionRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.EnterLllsionRequest other) {
                if (other == FightLevelHandler.EnterLllsionRequest.getDefaultInstance()) return this;
                if (other.hasC2SId()) setC2SId(other.getC2SId());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasC2SId()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.EnterLllsionRequest parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.EnterLllsionRequest) FightLevelHandler.EnterLllsionRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.EnterLllsionRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasC2SId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getC2SId() {
                return this.c2SId_;
            }

            public Builder setC2SId(int value) {
                this.bitField0_ |= 0x1;
                this.c2SId_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2SId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.c2SId_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class EnterLllsionResponse
            extends GeneratedMessage
            implements EnterLllsionResponseOrBuilder {
        private static final EnterLllsionResponse defaultInstance = new EnterLllsionResponse(true);
        private final UnknownFieldSet unknownFields;

        private EnterLllsionResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private EnterLllsionResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static EnterLllsionResponse getDefaultInstance() {
            return defaultInstance;
        }

        public EnterLllsionResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private EnterLllsionResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_EnterLllsionResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_EnterLllsionResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(EnterLllsionResponse.class, Builder.class);
        }

        public static Parser<EnterLllsionResponse> PARSER = (Parser<EnterLllsionResponse>) new AbstractParser<EnterLllsionResponse>() {
            public FightLevelHandler.EnterLllsionResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.EnterLllsionResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<EnterLllsionResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static EnterLllsionResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (EnterLllsionResponse) PARSER.parseFrom(data);
        }

        public static EnterLllsionResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (EnterLllsionResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static EnterLllsionResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (EnterLllsionResponse) PARSER.parseFrom(data);
        }

        public static EnterLllsionResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (EnterLllsionResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static EnterLllsionResponse parseFrom(InputStream input) throws IOException {
            return (EnterLllsionResponse) PARSER.parseFrom(input);
        }

        public static EnterLllsionResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterLllsionResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static EnterLllsionResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (EnterLllsionResponse) PARSER.parseDelimitedFrom(input);
        }

        public static EnterLllsionResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterLllsionResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static EnterLllsionResponse parseFrom(CodedInputStream input) throws IOException {
            return (EnterLllsionResponse) PARSER.parseFrom(input);
        }

        public static EnterLllsionResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterLllsionResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(EnterLllsionResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.EnterLllsionResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_EnterLllsionResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_EnterLllsionResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.EnterLllsionResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.EnterLllsionResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_EnterLllsionResponse_descriptor;
            }

            public FightLevelHandler.EnterLllsionResponse getDefaultInstanceForType() {
                return FightLevelHandler.EnterLllsionResponse.getDefaultInstance();
            }

            public FightLevelHandler.EnterLllsionResponse build() {
                FightLevelHandler.EnterLllsionResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.EnterLllsionResponse buildPartial() {
                FightLevelHandler.EnterLllsionResponse result = new FightLevelHandler.EnterLllsionResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.EnterLllsionResponse)
                    return mergeFrom((FightLevelHandler.EnterLllsionResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.EnterLllsionResponse other) {
                if (other == FightLevelHandler.EnterLllsionResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.EnterLllsionResponse parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.EnterLllsionResponse) FightLevelHandler.EnterLllsionResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.EnterLllsionResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = FightLevelHandler.EnterLllsionResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class GetLllsionBossInfoRequest
            extends GeneratedMessage
            implements GetLllsionBossInfoRequestOrBuilder {
        private static final GetLllsionBossInfoRequest defaultInstance = new GetLllsionBossInfoRequest(true);
        private final UnknownFieldSet unknownFields;

        private GetLllsionBossInfoRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetLllsionBossInfoRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetLllsionBossInfoRequest getDefaultInstance() {
            return defaultInstance;
        }

        public GetLllsionBossInfoRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetLllsionBossInfoRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_GetLllsionBossInfoRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_GetLllsionBossInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(GetLllsionBossInfoRequest.class, Builder.class);
        }

        public static Parser<GetLllsionBossInfoRequest> PARSER = (Parser<GetLllsionBossInfoRequest>) new AbstractParser<GetLllsionBossInfoRequest>() {
            public FightLevelHandler.GetLllsionBossInfoRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.GetLllsionBossInfoRequest(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetLllsionBossInfoRequest> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GetLllsionBossInfoRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetLllsionBossInfoRequest) PARSER.parseFrom(data);
        }

        public static GetLllsionBossInfoRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetLllsionBossInfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetLllsionBossInfoRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetLllsionBossInfoRequest) PARSER.parseFrom(data);
        }

        public static GetLllsionBossInfoRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetLllsionBossInfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetLllsionBossInfoRequest parseFrom(InputStream input) throws IOException {
            return (GetLllsionBossInfoRequest) PARSER.parseFrom(input);
        }

        public static GetLllsionBossInfoRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetLllsionBossInfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GetLllsionBossInfoRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (GetLllsionBossInfoRequest) PARSER.parseDelimitedFrom(input);
        }

        public static GetLllsionBossInfoRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetLllsionBossInfoRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GetLllsionBossInfoRequest parseFrom(CodedInputStream input) throws IOException {
            return (GetLllsionBossInfoRequest) PARSER.parseFrom(input);
        }

        public static GetLllsionBossInfoRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetLllsionBossInfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GetLllsionBossInfoRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.GetLllsionBossInfoRequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_GetLllsionBossInfoRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_GetLllsionBossInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.GetLllsionBossInfoRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.GetLllsionBossInfoRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_GetLllsionBossInfoRequest_descriptor;
            }

            public FightLevelHandler.GetLllsionBossInfoRequest getDefaultInstanceForType() {
                return FightLevelHandler.GetLllsionBossInfoRequest.getDefaultInstance();
            }

            public FightLevelHandler.GetLllsionBossInfoRequest build() {
                FightLevelHandler.GetLllsionBossInfoRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.GetLllsionBossInfoRequest buildPartial() {
                FightLevelHandler.GetLllsionBossInfoRequest result = new FightLevelHandler.GetLllsionBossInfoRequest(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.GetLllsionBossInfoRequest)
                    return mergeFrom((FightLevelHandler.GetLllsionBossInfoRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.GetLllsionBossInfoRequest other) {
                if (other == FightLevelHandler.GetLllsionBossInfoRequest.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.GetLllsionBossInfoRequest parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.GetLllsionBossInfoRequest) FightLevelHandler.GetLllsionBossInfoRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.GetLllsionBossInfoRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class IllsionBossInfo
            extends GeneratedMessage
            implements IllsionBossInfoOrBuilder {
        private static final IllsionBossInfo defaultInstance = new IllsionBossInfo(true);
        private final UnknownFieldSet unknownFields;

        private IllsionBossInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IllsionBossInfo(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static IllsionBossInfo getDefaultInstance() {
            return defaultInstance;
        }

        public IllsionBossInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private IllsionBossInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.id_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.nextRefreshTime_ = input.readInt64();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_IllsionBossInfo_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_IllsionBossInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(IllsionBossInfo.class, Builder.class);
        }

        public static Parser<IllsionBossInfo> PARSER = (Parser<IllsionBossInfo>) new AbstractParser<IllsionBossInfo>() {
            public FightLevelHandler.IllsionBossInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.IllsionBossInfo(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int ID_FIELD_NUMBER = 1;
        private int id_;
        public static final int NEXTREFRESHTIME_FIELD_NUMBER = 2;
        private long nextRefreshTime_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<IllsionBossInfo> getParserForType() {
            return PARSER;
        }

        public boolean hasId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getId() {
            return this.id_;
        }

        public boolean hasNextRefreshTime() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public long getNextRefreshTime() {
            return this.nextRefreshTime_;
        }

        private void initFields() {
            this.id_ = 0;
            this.nextRefreshTime_ = 0L;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.id_);
            if ((this.bitField0_ & 0x2) == 2) output.writeInt64(2, this.nextRefreshTime_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.id_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt64Size(2, this.nextRefreshTime_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IllsionBossInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (IllsionBossInfo) PARSER.parseFrom(data);
        }

        public static IllsionBossInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (IllsionBossInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static IllsionBossInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (IllsionBossInfo) PARSER.parseFrom(data);
        }

        public static IllsionBossInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (IllsionBossInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static IllsionBossInfo parseFrom(InputStream input) throws IOException {
            return (IllsionBossInfo) PARSER.parseFrom(input);
        }

        public static IllsionBossInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (IllsionBossInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static IllsionBossInfo parseDelimitedFrom(InputStream input) throws IOException {
            return (IllsionBossInfo) PARSER.parseDelimitedFrom(input);
        }

        public static IllsionBossInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (IllsionBossInfo) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static IllsionBossInfo parseFrom(CodedInputStream input) throws IOException {
            return (IllsionBossInfo) PARSER.parseFrom(input);
        }

        public static IllsionBossInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (IllsionBossInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IllsionBossInfo prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.IllsionBossInfoOrBuilder {
            private int bitField0_;
            private int id_;
            private long nextRefreshTime_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_IllsionBossInfo_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_IllsionBossInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.IllsionBossInfo.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.IllsionBossInfo.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.id_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.nextRefreshTime_ = 0L;
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_IllsionBossInfo_descriptor;
            }

            public FightLevelHandler.IllsionBossInfo getDefaultInstanceForType() {
                return FightLevelHandler.IllsionBossInfo.getDefaultInstance();
            }

            public FightLevelHandler.IllsionBossInfo build() {
                FightLevelHandler.IllsionBossInfo result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.IllsionBossInfo buildPartial() {
                FightLevelHandler.IllsionBossInfo result = new FightLevelHandler.IllsionBossInfo(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.id_ = this.id_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.nextRefreshTime_ = this.nextRefreshTime_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.IllsionBossInfo)
                    return mergeFrom((FightLevelHandler.IllsionBossInfo) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.IllsionBossInfo other) {
                if (other == FightLevelHandler.IllsionBossInfo.getDefaultInstance()) return this;
                if (other.hasId()) setId(other.getId());
                if (other.hasNextRefreshTime()) setNextRefreshTime(other.getNextRefreshTime());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasId()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.IllsionBossInfo parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.IllsionBossInfo) FightLevelHandler.IllsionBossInfo.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.IllsionBossInfo) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getId() {
                return this.id_;
            }

            public Builder setId(int value) {
                this.bitField0_ |= 0x1;
                this.id_ = value;
                onChanged();
                return this;
            }

            public Builder clearId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.id_ = 0;
                onChanged();
                return this;
            }

            public boolean hasNextRefreshTime() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public long getNextRefreshTime() {
                return this.nextRefreshTime_;
            }

            public Builder setNextRefreshTime(long value) {
                this.bitField0_ |= 0x2;
                this.nextRefreshTime_ = value;
                onChanged();
                return this;
            }

            public Builder clearNextRefreshTime() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.nextRefreshTime_ = 0L;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class GetLllsionBossInfoResponse
            extends GeneratedMessage
            implements GetLllsionBossInfoResponseOrBuilder {
        private static final GetLllsionBossInfoResponse defaultInstance = new GetLllsionBossInfoResponse(true);
        private final UnknownFieldSet unknownFields;

        private GetLllsionBossInfoResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetLllsionBossInfoResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetLllsionBossInfoResponse getDefaultInstance() {
            return defaultInstance;
        }

        public GetLllsionBossInfoResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetLllsionBossInfoResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                        case 26:
                            if ((mutable_bitField0_ & 0x4) != 4) {
                                this.bossInfos_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x4;
                            }
                            this.bossInfos_.add(input.readMessage(FightLevelHandler.IllsionBossInfo.PARSER, extensionRegistry));
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x4) == 4) this.bossInfos_ = Collections.unmodifiableList(this.bossInfos_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_GetLllsionBossInfoResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_GetLllsionBossInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(GetLllsionBossInfoResponse.class, Builder.class);
        }

        public static Parser<GetLllsionBossInfoResponse> PARSER = (Parser<GetLllsionBossInfoResponse>) new AbstractParser<GetLllsionBossInfoResponse>() {
            public FightLevelHandler.GetLllsionBossInfoResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.GetLllsionBossInfoResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int BOSSINFOS_FIELD_NUMBER = 3;
        private List<FightLevelHandler.IllsionBossInfo> bossInfos_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetLllsionBossInfoResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        static {
            defaultInstance.initFields();
        }

        public List<FightLevelHandler.IllsionBossInfo> getBossInfosList() {
            return this.bossInfos_;
        }

        public List<? extends FightLevelHandler.IllsionBossInfoOrBuilder> getBossInfosOrBuilderList() {
            return (List) this.bossInfos_;
        }

        public int getBossInfosCount() {
            return this.bossInfos_.size();
        }

        public FightLevelHandler.IllsionBossInfo getBossInfos(int index) {
            return this.bossInfos_.get(index);
        }

        public FightLevelHandler.IllsionBossInfoOrBuilder getBossInfosOrBuilder(int index) {
            return this.bossInfos_.get(index);
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
            this.bossInfos_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getBossInfosCount(); i++) {
                if (!getBossInfos(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(2, getS2CMsgBytes());
            for (int i = 0; i < this.bossInfos_.size(); i++)
                output.writeMessage(3, (MessageLite) this.bossInfos_.get(i));
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            for (int i = 0; i < this.bossInfos_.size(); i++)
                size += CodedOutputStream.computeMessageSize(3, (MessageLite) this.bossInfos_.get(i));
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GetLllsionBossInfoResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetLllsionBossInfoResponse) PARSER.parseFrom(data);
        }

        public static GetLllsionBossInfoResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetLllsionBossInfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetLllsionBossInfoResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetLllsionBossInfoResponse) PARSER.parseFrom(data);
        }

        public static GetLllsionBossInfoResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetLllsionBossInfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetLllsionBossInfoResponse parseFrom(InputStream input) throws IOException {
            return (GetLllsionBossInfoResponse) PARSER.parseFrom(input);
        }

        public static GetLllsionBossInfoResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetLllsionBossInfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GetLllsionBossInfoResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (GetLllsionBossInfoResponse) PARSER.parseDelimitedFrom(input);
        }

        public static GetLllsionBossInfoResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetLllsionBossInfoResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GetLllsionBossInfoResponse parseFrom(CodedInputStream input) throws IOException {
            return (GetLllsionBossInfoResponse) PARSER.parseFrom(input);
        }

        public static GetLllsionBossInfoResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetLllsionBossInfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GetLllsionBossInfoResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.GetLllsionBossInfoResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;
            private List<FightLevelHandler.IllsionBossInfo> bossInfos_;
            private RepeatedFieldBuilder<FightLevelHandler.IllsionBossInfo, FightLevelHandler.IllsionBossInfo.Builder, FightLevelHandler.IllsionBossInfoOrBuilder> bossInfosBuilder_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_GetLllsionBossInfoResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_GetLllsionBossInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.GetLllsionBossInfoResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                this.bossInfos_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                this.bossInfos_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.GetLllsionBossInfoResponse.alwaysUseFieldBuilders)
                    getBossInfosFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                if (this.bossInfosBuilder_ == null) {
                    this.bossInfos_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                } else {
                    this.bossInfosBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_GetLllsionBossInfoResponse_descriptor;
            }

            public FightLevelHandler.GetLllsionBossInfoResponse getDefaultInstanceForType() {
                return FightLevelHandler.GetLllsionBossInfoResponse.getDefaultInstance();
            }

            public FightLevelHandler.GetLllsionBossInfoResponse build() {
                FightLevelHandler.GetLllsionBossInfoResponse result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.GetLllsionBossInfoResponse buildPartial() {
                FightLevelHandler.GetLllsionBossInfoResponse result = new FightLevelHandler.GetLllsionBossInfoResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                if (this.bossInfosBuilder_ == null) {
                    if ((this.bitField0_ & 0x4) == 4) {
                        this.bossInfos_ = Collections.unmodifiableList(this.bossInfos_);
                        this.bitField0_ &= 0xFFFFFFFB;
                    }
                    result.bossInfos_ = this.bossInfos_;
                } else {
                    result.bossInfos_ = this.bossInfosBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.GetLllsionBossInfoResponse)
                    return mergeFrom((FightLevelHandler.GetLllsionBossInfoResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.GetLllsionBossInfoResponse other) {
                if (other == FightLevelHandler.GetLllsionBossInfoResponse.getDefaultInstance())
                    return this;
                if (other.hasS2CCode())
                    setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (this.bossInfosBuilder_ == null) {
                    if (!other.bossInfos_.isEmpty()) {
                        if (this.bossInfos_.isEmpty()) {
                            this.bossInfos_ = other.bossInfos_;
                            this.bitField0_ &= 0xFFFFFFFB;
                        } else {
                            ensureBossInfosIsMutable();
                            this.bossInfos_.addAll(other.bossInfos_);
                        }
                        onChanged();
                    }
                } else if (!other.bossInfos_.isEmpty()) {
                    if (this.bossInfosBuilder_.isEmpty()) {
                        this.bossInfosBuilder_.dispose();
                        this.bossInfosBuilder_ = null;
                        this.bossInfos_ = other.bossInfos_;
                        this.bitField0_ &= 0xFFFFFFFB;
                        this.bossInfosBuilder_ = FightLevelHandler.GetLllsionBossInfoResponse.alwaysUseFieldBuilders ? getBossInfosFieldBuilder() : null;
                    } else {
                        this.bossInfosBuilder_.addAllMessages(other.bossInfos_);
                    }
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode())
                    return false;
                for (int i = 0; i < getBossInfosCount(); i++) {
                    if (!getBossInfos(i).isInitialized())
                        return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.GetLllsionBossInfoResponse parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.GetLllsionBossInfoResponse) FightLevelHandler.GetLllsionBossInfoResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.GetLllsionBossInfoResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = FightLevelHandler.GetLllsionBossInfoResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            private void ensureBossInfosIsMutable() {
                if ((this.bitField0_ & 0x4) != 4) {
                    this.bossInfos_ = new ArrayList<>(this.bossInfos_);
                    this.bitField0_ |= 0x4;
                }
            }

            public List<FightLevelHandler.IllsionBossInfo> getBossInfosList() {
                if (this.bossInfosBuilder_ == null)
                    return Collections.unmodifiableList(this.bossInfos_);
                return this.bossInfosBuilder_.getMessageList();
            }

            public int getBossInfosCount() {
                if (this.bossInfosBuilder_ == null)
                    return this.bossInfos_.size();
                return this.bossInfosBuilder_.getCount();
            }

            public FightLevelHandler.IllsionBossInfo getBossInfos(int index) {
                if (this.bossInfosBuilder_ == null)
                    return this.bossInfos_.get(index);
                return (FightLevelHandler.IllsionBossInfo) this.bossInfosBuilder_.getMessage(index);
            }

            public Builder setBossInfos(int index, FightLevelHandler.IllsionBossInfo value) {
                if (this.bossInfosBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureBossInfosIsMutable();
                    this.bossInfos_.set(index, value);
                    onChanged();
                } else {
                    this.bossInfosBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setBossInfos(int index, FightLevelHandler.IllsionBossInfo.Builder builderForValue) {
                if (this.bossInfosBuilder_ == null) {
                    ensureBossInfosIsMutable();
                    this.bossInfos_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.bossInfosBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addBossInfos(FightLevelHandler.IllsionBossInfo value) {
                if (this.bossInfosBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureBossInfosIsMutable();
                    this.bossInfos_.add(value);
                    onChanged();
                } else {
                    this.bossInfosBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addBossInfos(int index, FightLevelHandler.IllsionBossInfo value) {
                if (this.bossInfosBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureBossInfosIsMutable();
                    this.bossInfos_.add(index, value);
                    onChanged();
                } else {
                    this.bossInfosBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addBossInfos(FightLevelHandler.IllsionBossInfo.Builder builderForValue) {
                if (this.bossInfosBuilder_ == null) {
                    ensureBossInfosIsMutable();
                    this.bossInfos_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.bossInfosBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addBossInfos(int index, FightLevelHandler.IllsionBossInfo.Builder builderForValue) {
                if (this.bossInfosBuilder_ == null) {
                    ensureBossInfosIsMutable();
                    this.bossInfos_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.bossInfosBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllBossInfos(Iterable<? extends FightLevelHandler.IllsionBossInfo> values) {
                if (this.bossInfosBuilder_ == null) {
                    ensureBossInfosIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.bossInfos_);
                    onChanged();
                } else {
                    this.bossInfosBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearBossInfos() {
                if (this.bossInfosBuilder_ == null) {
                    this.bossInfos_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                    onChanged();
                } else {
                    this.bossInfosBuilder_.clear();
                }
                return this;
            }

            public Builder removeBossInfos(int index) {
                if (this.bossInfosBuilder_ == null) {
                    ensureBossInfosIsMutable();
                    this.bossInfos_.remove(index);
                    onChanged();
                } else {
                    this.bossInfosBuilder_.remove(index);
                }
                return this;
            }

            public FightLevelHandler.IllsionBossInfo.Builder getBossInfosBuilder(int index) {
                return (FightLevelHandler.IllsionBossInfo.Builder) getBossInfosFieldBuilder().getBuilder(index);
            }

            public FightLevelHandler.IllsionBossInfoOrBuilder getBossInfosOrBuilder(int index) {
                if (this.bossInfosBuilder_ == null)
                    return this.bossInfos_.get(index);
                return (FightLevelHandler.IllsionBossInfoOrBuilder) this.bossInfosBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends FightLevelHandler.IllsionBossInfoOrBuilder> getBossInfosOrBuilderList() {
                if (this.bossInfosBuilder_ != null)
                    return this.bossInfosBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.bossInfos_);
            }

            public FightLevelHandler.IllsionBossInfo.Builder addBossInfosBuilder() {
                return (FightLevelHandler.IllsionBossInfo.Builder) getBossInfosFieldBuilder().addBuilder(FightLevelHandler.IllsionBossInfo.getDefaultInstance());
            }

            public FightLevelHandler.IllsionBossInfo.Builder addBossInfosBuilder(int index) {
                return (FightLevelHandler.IllsionBossInfo.Builder) getBossInfosFieldBuilder().addBuilder(index, FightLevelHandler.IllsionBossInfo.getDefaultInstance());
            }

            public List<FightLevelHandler.IllsionBossInfo.Builder> getBossInfosBuilderList() {
                return getBossInfosFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<FightLevelHandler.IllsionBossInfo, FightLevelHandler.IllsionBossInfo.Builder, FightLevelHandler.IllsionBossInfoOrBuilder> getBossInfosFieldBuilder() {
                if (this.bossInfosBuilder_ == null) {
                    this.bossInfosBuilder_ = new RepeatedFieldBuilder(this.bossInfos_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean());
                    this.bossInfos_ = null;
                }
                return this.bossInfosBuilder_;
            }
        }
    }

    public static final class EnterLllsionBossRequest extends GeneratedMessage implements EnterLllsionBossRequestOrBuilder {
        private static final EnterLllsionBossRequest defaultInstance = new EnterLllsionBossRequest(true);
        private final UnknownFieldSet unknownFields;

        private EnterLllsionBossRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private EnterLllsionBossRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static EnterLllsionBossRequest getDefaultInstance() {
            return defaultInstance;
        }

        public EnterLllsionBossRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private EnterLllsionBossRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.c2SId_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_EnterLllsionBossRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_EnterLllsionBossRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(EnterLllsionBossRequest.class, Builder.class);
        }

        public static Parser<EnterLllsionBossRequest> PARSER = (Parser<EnterLllsionBossRequest>) new AbstractParser<EnterLllsionBossRequest>() {
            public FightLevelHandler.EnterLllsionBossRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.EnterLllsionBossRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int C2S_ID_FIELD_NUMBER = 1;
        private int c2SId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<EnterLllsionBossRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasC2SId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getC2SId() {
            return this.c2SId_;
        }

        private void initFields() {
            this.c2SId_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasC2SId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.c2SId_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.c2SId_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static EnterLllsionBossRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (EnterLllsionBossRequest) PARSER.parseFrom(data);
        }

        public static EnterLllsionBossRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (EnterLllsionBossRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static EnterLllsionBossRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (EnterLllsionBossRequest) PARSER.parseFrom(data);
        }

        public static EnterLllsionBossRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (EnterLllsionBossRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static EnterLllsionBossRequest parseFrom(InputStream input) throws IOException {
            return (EnterLllsionBossRequest) PARSER.parseFrom(input);
        }

        public static EnterLllsionBossRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterLllsionBossRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static EnterLllsionBossRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (EnterLllsionBossRequest) PARSER.parseDelimitedFrom(input);
        }

        public static EnterLllsionBossRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterLllsionBossRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static EnterLllsionBossRequest parseFrom(CodedInputStream input) throws IOException {
            return (EnterLllsionBossRequest) PARSER.parseFrom(input);
        }

        public static EnterLllsionBossRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterLllsionBossRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(EnterLllsionBossRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.EnterLllsionBossRequestOrBuilder {
            private int bitField0_;
            private int c2SId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_EnterLllsionBossRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_EnterLllsionBossRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.EnterLllsionBossRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.EnterLllsionBossRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.c2SId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_EnterLllsionBossRequest_descriptor;
            }

            public FightLevelHandler.EnterLllsionBossRequest getDefaultInstanceForType() {
                return FightLevelHandler.EnterLllsionBossRequest.getDefaultInstance();
            }

            public FightLevelHandler.EnterLllsionBossRequest build() {
                FightLevelHandler.EnterLllsionBossRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.EnterLllsionBossRequest buildPartial() {
                FightLevelHandler.EnterLllsionBossRequest result = new FightLevelHandler.EnterLllsionBossRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.c2SId_ = this.c2SId_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.EnterLllsionBossRequest)
                    return mergeFrom((FightLevelHandler.EnterLllsionBossRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.EnterLllsionBossRequest other) {
                if (other == FightLevelHandler.EnterLllsionBossRequest.getDefaultInstance()) return this;
                if (other.hasC2SId()) setC2SId(other.getC2SId());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasC2SId()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.EnterLllsionBossRequest parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.EnterLllsionBossRequest) FightLevelHandler.EnterLllsionBossRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.EnterLllsionBossRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasC2SId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getC2SId() {
                return this.c2SId_;
            }

            public Builder setC2SId(int value) {
                this.bitField0_ |= 0x1;
                this.c2SId_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2SId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.c2SId_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class EnterLllsionBossResponse
            extends GeneratedMessage
            implements EnterLllsionBossResponseOrBuilder {
        private static final EnterLllsionBossResponse defaultInstance = new EnterLllsionBossResponse(true);
        private final UnknownFieldSet unknownFields;

        private EnterLllsionBossResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private EnterLllsionBossResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static EnterLllsionBossResponse getDefaultInstance() {
            return defaultInstance;
        }

        public EnterLllsionBossResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private EnterLllsionBossResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_EnterLllsionBossResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_EnterLllsionBossResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(EnterLllsionBossResponse.class, Builder.class);
        }

        public static Parser<EnterLllsionBossResponse> PARSER = (Parser<EnterLllsionBossResponse>) new AbstractParser<EnterLllsionBossResponse>() {
            public FightLevelHandler.EnterLllsionBossResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.EnterLllsionBossResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<EnterLllsionBossResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static EnterLllsionBossResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (EnterLllsionBossResponse) PARSER.parseFrom(data);
        }

        public static EnterLllsionBossResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (EnterLllsionBossResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static EnterLllsionBossResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (EnterLllsionBossResponse) PARSER.parseFrom(data);
        }

        public static EnterLllsionBossResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (EnterLllsionBossResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static EnterLllsionBossResponse parseFrom(InputStream input) throws IOException {
            return (EnterLllsionBossResponse) PARSER.parseFrom(input);
        }

        public static EnterLllsionBossResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterLllsionBossResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static EnterLllsionBossResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (EnterLllsionBossResponse) PARSER.parseDelimitedFrom(input);
        }

        public static EnterLllsionBossResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterLllsionBossResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static EnterLllsionBossResponse parseFrom(CodedInputStream input) throws IOException {
            return (EnterLllsionBossResponse) PARSER.parseFrom(input);
        }

        public static EnterLllsionBossResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterLllsionBossResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(EnterLllsionBossResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.EnterLllsionBossResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_EnterLllsionBossResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_EnterLllsionBossResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.EnterLllsionBossResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.EnterLllsionBossResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_EnterLllsionBossResponse_descriptor;
            }

            public FightLevelHandler.EnterLllsionBossResponse getDefaultInstanceForType() {
                return FightLevelHandler.EnterLllsionBossResponse.getDefaultInstance();
            }

            public FightLevelHandler.EnterLllsionBossResponse build() {
                FightLevelHandler.EnterLllsionBossResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.EnterLllsionBossResponse buildPartial() {
                FightLevelHandler.EnterLllsionBossResponse result = new FightLevelHandler.EnterLllsionBossResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.EnterLllsionBossResponse)
                    return mergeFrom((FightLevelHandler.EnterLllsionBossResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.EnterLllsionBossResponse other) {
                if (other == FightLevelHandler.EnterLllsionBossResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.EnterLllsionBossResponse parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.EnterLllsionBossResponse) FightLevelHandler.EnterLllsionBossResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.EnterLllsionBossResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = FightLevelHandler.EnterLllsionBossResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class GetBenifitableRequest
            extends GeneratedMessage
            implements GetBenifitableRequestOrBuilder {
        private static final GetBenifitableRequest defaultInstance = new GetBenifitableRequest(true);
        private final UnknownFieldSet unknownFields;

        private GetBenifitableRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetBenifitableRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetBenifitableRequest getDefaultInstance() {
            return defaultInstance;
        }

        public GetBenifitableRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetBenifitableRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_GetBenifitableRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_GetBenifitableRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(GetBenifitableRequest.class, Builder.class);
        }

        public static Parser<GetBenifitableRequest> PARSER = (Parser<GetBenifitableRequest>) new AbstractParser<GetBenifitableRequest>() {
            public FightLevelHandler.GetBenifitableRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.GetBenifitableRequest(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetBenifitableRequest> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GetBenifitableRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetBenifitableRequest) PARSER.parseFrom(data);
        }

        public static GetBenifitableRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetBenifitableRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetBenifitableRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetBenifitableRequest) PARSER.parseFrom(data);
        }

        public static GetBenifitableRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetBenifitableRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetBenifitableRequest parseFrom(InputStream input) throws IOException {
            return (GetBenifitableRequest) PARSER.parseFrom(input);
        }

        public static GetBenifitableRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetBenifitableRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GetBenifitableRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (GetBenifitableRequest) PARSER.parseDelimitedFrom(input);
        }

        public static GetBenifitableRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetBenifitableRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GetBenifitableRequest parseFrom(CodedInputStream input) throws IOException {
            return (GetBenifitableRequest) PARSER.parseFrom(input);
        }

        public static GetBenifitableRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetBenifitableRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GetBenifitableRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.GetBenifitableRequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_GetBenifitableRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_GetBenifitableRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.GetBenifitableRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.GetBenifitableRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_GetBenifitableRequest_descriptor;
            }

            public FightLevelHandler.GetBenifitableRequest getDefaultInstanceForType() {
                return FightLevelHandler.GetBenifitableRequest.getDefaultInstance();
            }

            public FightLevelHandler.GetBenifitableRequest build() {
                FightLevelHandler.GetBenifitableRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.GetBenifitableRequest buildPartial() {
                FightLevelHandler.GetBenifitableRequest result = new FightLevelHandler.GetBenifitableRequest(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.GetBenifitableRequest)
                    return mergeFrom((FightLevelHandler.GetBenifitableRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.GetBenifitableRequest other) {
                if (other == FightLevelHandler.GetBenifitableRequest.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.GetBenifitableRequest parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.GetBenifitableRequest) FightLevelHandler.GetBenifitableRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.GetBenifitableRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class GetBenifitableResponse
            extends GeneratedMessage
            implements GetBenifitableResponseOrBuilder {
        private static final GetBenifitableResponse defaultInstance = new GetBenifitableResponse(true);
        private final UnknownFieldSet unknownFields;

        private GetBenifitableResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetBenifitableResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetBenifitableResponse getDefaultInstance() {
            return defaultInstance;
        }

        public GetBenifitableResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetBenifitableResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.benifitable_ = input.readBool();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_GetBenifitableResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_GetBenifitableResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(GetBenifitableResponse.class, Builder.class);
        }

        public static Parser<GetBenifitableResponse> PARSER = (Parser<GetBenifitableResponse>) new AbstractParser<GetBenifitableResponse>() {
            public FightLevelHandler.GetBenifitableResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.GetBenifitableResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int BENIFITABLE_FIELD_NUMBER = 3;
        private boolean benifitable_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetBenifitableResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasBenifitable() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public boolean getBenifitable() {
            return this.benifitable_;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
            this.benifitable_ = false;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            if ((this.bitField0_ & 0x4) == 4) output.writeBool(3, this.benifitable_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeBoolSize(3, this.benifitable_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GetBenifitableResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetBenifitableResponse) PARSER.parseFrom(data);
        }

        public static GetBenifitableResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetBenifitableResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetBenifitableResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetBenifitableResponse) PARSER.parseFrom(data);
        }

        public static GetBenifitableResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetBenifitableResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetBenifitableResponse parseFrom(InputStream input) throws IOException {
            return (GetBenifitableResponse) PARSER.parseFrom(input);
        }

        public static GetBenifitableResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetBenifitableResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GetBenifitableResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (GetBenifitableResponse) PARSER.parseDelimitedFrom(input);
        }

        public static GetBenifitableResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetBenifitableResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GetBenifitableResponse parseFrom(CodedInputStream input) throws IOException {
            return (GetBenifitableResponse) PARSER.parseFrom(input);
        }

        public static GetBenifitableResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetBenifitableResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GetBenifitableResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.GetBenifitableResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;
            private boolean benifitable_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_GetBenifitableResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_GetBenifitableResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.GetBenifitableResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.GetBenifitableResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                this.benifitable_ = false;
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_GetBenifitableResponse_descriptor;
            }

            public FightLevelHandler.GetBenifitableResponse getDefaultInstanceForType() {
                return FightLevelHandler.GetBenifitableResponse.getDefaultInstance();
            }

            public FightLevelHandler.GetBenifitableResponse build() {
                FightLevelHandler.GetBenifitableResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.GetBenifitableResponse buildPartial() {
                FightLevelHandler.GetBenifitableResponse result = new FightLevelHandler.GetBenifitableResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;
                result.benifitable_ = this.benifitable_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.GetBenifitableResponse)
                    return mergeFrom((FightLevelHandler.GetBenifitableResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.GetBenifitableResponse other) {
                if (other == FightLevelHandler.GetBenifitableResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (other.hasBenifitable()) setBenifitable(other.getBenifitable());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.GetBenifitableResponse parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.GetBenifitableResponse) FightLevelHandler.GetBenifitableResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.GetBenifitableResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = FightLevelHandler.GetBenifitableResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public boolean hasBenifitable() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public boolean getBenifitable() {
                return this.benifitable_;
            }

            public Builder setBenifitable(boolean value) {
                this.bitField0_ |= 0x4;
                this.benifitable_ = value;
                onChanged();
                return this;
            }

            public Builder clearBenifitable() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.benifitable_ = false;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class GetLllsion2InfoRequest
            extends GeneratedMessage
            implements GetLllsion2InfoRequestOrBuilder {
        private static final GetLllsion2InfoRequest defaultInstance = new GetLllsion2InfoRequest(true);
        private final UnknownFieldSet unknownFields;

        private GetLllsion2InfoRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetLllsion2InfoRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetLllsion2InfoRequest getDefaultInstance() {
            return defaultInstance;
        }

        public GetLllsion2InfoRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetLllsion2InfoRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_GetLllsion2InfoRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_GetLllsion2InfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(GetLllsion2InfoRequest.class, Builder.class);
        }

        public static Parser<GetLllsion2InfoRequest> PARSER = (Parser<GetLllsion2InfoRequest>) new AbstractParser<GetLllsion2InfoRequest>() {
            public FightLevelHandler.GetLllsion2InfoRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.GetLllsion2InfoRequest(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetLllsion2InfoRequest> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GetLllsion2InfoRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetLllsion2InfoRequest) PARSER.parseFrom(data);
        }

        public static GetLllsion2InfoRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetLllsion2InfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetLllsion2InfoRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetLllsion2InfoRequest) PARSER.parseFrom(data);
        }

        public static GetLllsion2InfoRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetLllsion2InfoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetLllsion2InfoRequest parseFrom(InputStream input) throws IOException {
            return (GetLllsion2InfoRequest) PARSER.parseFrom(input);
        }

        public static GetLllsion2InfoRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetLllsion2InfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GetLllsion2InfoRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (GetLllsion2InfoRequest) PARSER.parseDelimitedFrom(input);
        }

        public static GetLllsion2InfoRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetLllsion2InfoRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GetLllsion2InfoRequest parseFrom(CodedInputStream input) throws IOException {
            return (GetLllsion2InfoRequest) PARSER.parseFrom(input);
        }

        public static GetLllsion2InfoRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetLllsion2InfoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GetLllsion2InfoRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.GetLllsion2InfoRequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_GetLllsion2InfoRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_GetLllsion2InfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.GetLllsion2InfoRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.GetLllsion2InfoRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_GetLllsion2InfoRequest_descriptor;
            }

            public FightLevelHandler.GetLllsion2InfoRequest getDefaultInstanceForType() {
                return FightLevelHandler.GetLllsion2InfoRequest.getDefaultInstance();
            }

            public FightLevelHandler.GetLllsion2InfoRequest build() {
                FightLevelHandler.GetLllsion2InfoRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.GetLllsion2InfoRequest buildPartial() {
                FightLevelHandler.GetLllsion2InfoRequest result = new FightLevelHandler.GetLllsion2InfoRequest(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.GetLllsion2InfoRequest)
                    return mergeFrom((FightLevelHandler.GetLllsion2InfoRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.GetLllsion2InfoRequest other) {
                if (other == FightLevelHandler.GetLllsion2InfoRequest.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.GetLllsion2InfoRequest parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.GetLllsion2InfoRequest) FightLevelHandler.GetLllsion2InfoRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.GetLllsion2InfoRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class GetLllsion2InfoResponse
            extends GeneratedMessage
            implements GetLllsion2InfoResponseOrBuilder {
        private static final GetLllsion2InfoResponse defaultInstance = new GetLllsion2InfoResponse(true);
        private final UnknownFieldSet unknownFields;

        private GetLllsion2InfoResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetLllsion2InfoResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetLllsion2InfoResponse getDefaultInstance() {
            return defaultInstance;
        }

        public GetLllsion2InfoResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetLllsion2InfoResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.s2CMaxNum_ = input.readInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 0x8;
                            this.s2CTodayLv1_ = input.readInt32();
                            break;
                        case 40:
                            this.bitField0_ |= 0x10;
                            this.s2CTodayLv2_ = input.readInt32();
                            break;
                        case 48:
                            this.bitField0_ |= 0x20;
                            this.s2CTodayLv3_ = input.readInt32();
                            break;
                        case 58:
                            if ((mutable_bitField0_ & 0x40) != 64) {
                                this.itemInfo_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x40;
                            }
                            this.itemInfo_.add(input.readMessage(FightLevelHandler.MJItemMax.PARSER, extensionRegistry));
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x40) == 64) this.itemInfo_ = Collections.unmodifiableList(this.itemInfo_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_GetLllsion2InfoResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_GetLllsion2InfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(GetLllsion2InfoResponse.class, Builder.class);
        }

        public static Parser<GetLllsion2InfoResponse> PARSER = (Parser<GetLllsion2InfoResponse>) new AbstractParser<GetLllsion2InfoResponse>() {
            public FightLevelHandler.GetLllsion2InfoResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.GetLllsion2InfoResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int S2C_MAX_NUM_FIELD_NUMBER = 3;
        private int s2CMaxNum_;
        public static final int S2C_TODAY_LV1_FIELD_NUMBER = 4;
        private int s2CTodayLv1_;
        public static final int S2C_TODAY_LV2_FIELD_NUMBER = 5;
        private int s2CTodayLv2_;
        public static final int S2C_TODAY_LV3_FIELD_NUMBER = 6;
        private int s2CTodayLv3_;
        public static final int ITEM_INFO_FIELD_NUMBER = 7;
        private List<FightLevelHandler.MJItemMax> itemInfo_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetLllsion2InfoResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        static {
            defaultInstance.initFields();
        }

        public boolean hasS2CMaxNum() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public int getS2CMaxNum() {
            return this.s2CMaxNum_;
        }

        public boolean hasS2CTodayLv1() {
            return ((this.bitField0_ & 0x8) == 8);
        }

        public int getS2CTodayLv1() {
            return this.s2CTodayLv1_;
        }

        public boolean hasS2CTodayLv2() {
            return ((this.bitField0_ & 0x10) == 16);
        }

        public int getS2CTodayLv2() {
            return this.s2CTodayLv2_;
        }

        public boolean hasS2CTodayLv3() {
            return ((this.bitField0_ & 0x20) == 32);
        }

        public int getS2CTodayLv3() {
            return this.s2CTodayLv3_;
        }

        public List<FightLevelHandler.MJItemMax> getItemInfoList() {
            return this.itemInfo_;
        }

        public List<? extends FightLevelHandler.MJItemMaxOrBuilder> getItemInfoOrBuilderList() {
            return (List) this.itemInfo_;
        }

        public int getItemInfoCount() {
            return this.itemInfo_.size();
        }

        public FightLevelHandler.MJItemMax getItemInfo(int index) {
            return this.itemInfo_.get(index);
        }

        public FightLevelHandler.MJItemMaxOrBuilder getItemInfoOrBuilder(int index) {
            return this.itemInfo_.get(index);
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
            this.s2CMaxNum_ = 0;
            this.s2CTodayLv1_ = 0;
            this.s2CTodayLv2_ = 0;
            this.s2CTodayLv3_ = 0;
            this.itemInfo_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2CMaxNum()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2CTodayLv1()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2CTodayLv2()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2CTodayLv3()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getItemInfoCount(); i++) {
                if (!getItemInfo(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(2, getS2CMsgBytes());
            if ((this.bitField0_ & 0x4) == 4)
                output.writeInt32(3, this.s2CMaxNum_);
            if ((this.bitField0_ & 0x8) == 8)
                output.writeInt32(4, this.s2CTodayLv1_);
            if ((this.bitField0_ & 0x10) == 16)
                output.writeInt32(5, this.s2CTodayLv2_);
            if ((this.bitField0_ & 0x20) == 32)
                output.writeInt32(6, this.s2CTodayLv3_);
            for (int i = 0; i < this.itemInfo_.size(); i++)
                output.writeMessage(7, (MessageLite) this.itemInfo_.get(i));
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeInt32Size(3, this.s2CMaxNum_);
            if ((this.bitField0_ & 0x8) == 8)
                size += CodedOutputStream.computeInt32Size(4, this.s2CTodayLv1_);
            if ((this.bitField0_ & 0x10) == 16)
                size += CodedOutputStream.computeInt32Size(5, this.s2CTodayLv2_);
            if ((this.bitField0_ & 0x20) == 32)
                size += CodedOutputStream.computeInt32Size(6, this.s2CTodayLv3_);
            for (int i = 0; i < this.itemInfo_.size(); i++)
                size += CodedOutputStream.computeMessageSize(7, (MessageLite) this.itemInfo_.get(i));
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GetLllsion2InfoResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetLllsion2InfoResponse) PARSER.parseFrom(data);
        }

        public static GetLllsion2InfoResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetLllsion2InfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetLllsion2InfoResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetLllsion2InfoResponse) PARSER.parseFrom(data);
        }

        public static GetLllsion2InfoResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetLllsion2InfoResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetLllsion2InfoResponse parseFrom(InputStream input) throws IOException {
            return (GetLllsion2InfoResponse) PARSER.parseFrom(input);
        }

        public static GetLllsion2InfoResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetLllsion2InfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GetLllsion2InfoResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (GetLllsion2InfoResponse) PARSER.parseDelimitedFrom(input);
        }

        public static GetLllsion2InfoResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetLllsion2InfoResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GetLllsion2InfoResponse parseFrom(CodedInputStream input) throws IOException {
            return (GetLllsion2InfoResponse) PARSER.parseFrom(input);
        }

        public static GetLllsion2InfoResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetLllsion2InfoResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GetLllsion2InfoResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.GetLllsion2InfoResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;
            private int s2CMaxNum_;
            private int s2CTodayLv1_;
            private int s2CTodayLv2_;
            private int s2CTodayLv3_;
            private List<FightLevelHandler.MJItemMax> itemInfo_;
            private RepeatedFieldBuilder<FightLevelHandler.MJItemMax, FightLevelHandler.MJItemMax.Builder, FightLevelHandler.MJItemMaxOrBuilder> itemInfoBuilder_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_GetLllsion2InfoResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_GetLllsion2InfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.GetLllsion2InfoResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                this.itemInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                this.itemInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.GetLllsion2InfoResponse.alwaysUseFieldBuilders)
                    getItemInfoFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMaxNum_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                this.s2CTodayLv1_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                this.s2CTodayLv2_ = 0;
                this.bitField0_ &= 0xFFFFFFEF;
                this.s2CTodayLv3_ = 0;
                this.bitField0_ &= 0xFFFFFFDF;
                if (this.itemInfoBuilder_ == null) {
                    this.itemInfo_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFBF;
                } else {
                    this.itemInfoBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_GetLllsion2InfoResponse_descriptor;
            }

            public FightLevelHandler.GetLllsion2InfoResponse getDefaultInstanceForType() {
                return FightLevelHandler.GetLllsion2InfoResponse.getDefaultInstance();
            }

            public FightLevelHandler.GetLllsion2InfoResponse build() {
                FightLevelHandler.GetLllsion2InfoResponse result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.GetLllsion2InfoResponse buildPartial() {
                FightLevelHandler.GetLllsion2InfoResponse result = new FightLevelHandler.GetLllsion2InfoResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                if ((from_bitField0_ & 0x4) == 4)
                    to_bitField0_ |= 0x4;
                result.s2CMaxNum_ = this.s2CMaxNum_;
                if ((from_bitField0_ & 0x8) == 8)
                    to_bitField0_ |= 0x8;
                result.s2CTodayLv1_ = this.s2CTodayLv1_;
                if ((from_bitField0_ & 0x10) == 16)
                    to_bitField0_ |= 0x10;
                result.s2CTodayLv2_ = this.s2CTodayLv2_;
                if ((from_bitField0_ & 0x20) == 32)
                    to_bitField0_ |= 0x20;
                result.s2CTodayLv3_ = this.s2CTodayLv3_;
                if (this.itemInfoBuilder_ == null) {
                    if ((this.bitField0_ & 0x40) == 64) {
                        this.itemInfo_ = Collections.unmodifiableList(this.itemInfo_);
                        this.bitField0_ &= 0xFFFFFFBF;
                    }
                    result.itemInfo_ = this.itemInfo_;
                } else {
                    result.itemInfo_ = this.itemInfoBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.GetLllsion2InfoResponse)
                    return mergeFrom((FightLevelHandler.GetLllsion2InfoResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.GetLllsion2InfoResponse other) {
                if (other == FightLevelHandler.GetLllsion2InfoResponse.getDefaultInstance())
                    return this;
                if (other.hasS2CCode())
                    setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (other.hasS2CMaxNum())
                    setS2CMaxNum(other.getS2CMaxNum());
                if (other.hasS2CTodayLv1())
                    setS2CTodayLv1(other.getS2CTodayLv1());
                if (other.hasS2CTodayLv2())
                    setS2CTodayLv2(other.getS2CTodayLv2());
                if (other.hasS2CTodayLv3())
                    setS2CTodayLv3(other.getS2CTodayLv3());
                if (this.itemInfoBuilder_ == null) {
                    if (!other.itemInfo_.isEmpty()) {
                        if (this.itemInfo_.isEmpty()) {
                            this.itemInfo_ = other.itemInfo_;
                            this.bitField0_ &= 0xFFFFFFBF;
                        } else {
                            ensureItemInfoIsMutable();
                            this.itemInfo_.addAll(other.itemInfo_);
                        }
                        onChanged();
                    }
                } else if (!other.itemInfo_.isEmpty()) {
                    if (this.itemInfoBuilder_.isEmpty()) {
                        this.itemInfoBuilder_.dispose();
                        this.itemInfoBuilder_ = null;
                        this.itemInfo_ = other.itemInfo_;
                        this.bitField0_ &= 0xFFFFFFBF;
                        this.itemInfoBuilder_ = FightLevelHandler.GetLllsion2InfoResponse.alwaysUseFieldBuilders ? getItemInfoFieldBuilder() : null;
                    } else {
                        this.itemInfoBuilder_.addAllMessages(other.itemInfo_);
                    }
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode())
                    return false;
                if (!hasS2CMaxNum())
                    return false;
                if (!hasS2CTodayLv1())
                    return false;
                if (!hasS2CTodayLv2())
                    return false;
                if (!hasS2CTodayLv3())
                    return false;
                for (int i = 0; i < getItemInfoCount(); i++) {
                    if (!getItemInfo(i).isInitialized())
                        return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.GetLllsion2InfoResponse parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.GetLllsion2InfoResponse) FightLevelHandler.GetLllsion2InfoResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.GetLllsion2InfoResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = FightLevelHandler.GetLllsion2InfoResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public boolean hasS2CMaxNum() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public int getS2CMaxNum() {
                return this.s2CMaxNum_;
            }

            public Builder setS2CMaxNum(int value) {
                this.bitField0_ |= 0x4;
                this.s2CMaxNum_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMaxNum() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.s2CMaxNum_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CTodayLv1() {
                return ((this.bitField0_ & 0x8) == 8);
            }

            public int getS2CTodayLv1() {
                return this.s2CTodayLv1_;
            }

            public Builder setS2CTodayLv1(int value) {
                this.bitField0_ |= 0x8;
                this.s2CTodayLv1_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CTodayLv1() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.s2CTodayLv1_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CTodayLv2() {
                return ((this.bitField0_ & 0x10) == 16);
            }

            public int getS2CTodayLv2() {
                return this.s2CTodayLv2_;
            }

            public Builder setS2CTodayLv2(int value) {
                this.bitField0_ |= 0x10;
                this.s2CTodayLv2_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CTodayLv2() {
                this.bitField0_ &= 0xFFFFFFEF;
                this.s2CTodayLv2_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CTodayLv3() {
                return ((this.bitField0_ & 0x20) == 32);
            }

            public int getS2CTodayLv3() {
                return this.s2CTodayLv3_;
            }

            public Builder setS2CTodayLv3(int value) {
                this.bitField0_ |= 0x20;
                this.s2CTodayLv3_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CTodayLv3() {
                this.bitField0_ &= 0xFFFFFFDF;
                this.s2CTodayLv3_ = 0;
                onChanged();
                return this;
            }

            private void ensureItemInfoIsMutable() {
                if ((this.bitField0_ & 0x40) != 64) {
                    this.itemInfo_ = new ArrayList<>(this.itemInfo_);
                    this.bitField0_ |= 0x40;
                }
            }

            public List<FightLevelHandler.MJItemMax> getItemInfoList() {
                if (this.itemInfoBuilder_ == null)
                    return Collections.unmodifiableList(this.itemInfo_);
                return this.itemInfoBuilder_.getMessageList();
            }

            public int getItemInfoCount() {
                if (this.itemInfoBuilder_ == null)
                    return this.itemInfo_.size();
                return this.itemInfoBuilder_.getCount();
            }

            public FightLevelHandler.MJItemMax getItemInfo(int index) {
                if (this.itemInfoBuilder_ == null)
                    return this.itemInfo_.get(index);
                return (FightLevelHandler.MJItemMax) this.itemInfoBuilder_.getMessage(index);
            }

            public Builder setItemInfo(int index, FightLevelHandler.MJItemMax value) {
                if (this.itemInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureItemInfoIsMutable();
                    this.itemInfo_.set(index, value);
                    onChanged();
                } else {
                    this.itemInfoBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setItemInfo(int index, FightLevelHandler.MJItemMax.Builder builderForValue) {
                if (this.itemInfoBuilder_ == null) {
                    ensureItemInfoIsMutable();
                    this.itemInfo_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.itemInfoBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addItemInfo(FightLevelHandler.MJItemMax value) {
                if (this.itemInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureItemInfoIsMutable();
                    this.itemInfo_.add(value);
                    onChanged();
                } else {
                    this.itemInfoBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addItemInfo(int index, FightLevelHandler.MJItemMax value) {
                if (this.itemInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureItemInfoIsMutable();
                    this.itemInfo_.add(index, value);
                    onChanged();
                } else {
                    this.itemInfoBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addItemInfo(FightLevelHandler.MJItemMax.Builder builderForValue) {
                if (this.itemInfoBuilder_ == null) {
                    ensureItemInfoIsMutable();
                    this.itemInfo_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.itemInfoBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addItemInfo(int index, FightLevelHandler.MJItemMax.Builder builderForValue) {
                if (this.itemInfoBuilder_ == null) {
                    ensureItemInfoIsMutable();
                    this.itemInfo_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.itemInfoBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllItemInfo(Iterable<? extends FightLevelHandler.MJItemMax> values) {
                if (this.itemInfoBuilder_ == null) {
                    ensureItemInfoIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.itemInfo_);
                    onChanged();
                } else {
                    this.itemInfoBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearItemInfo() {
                if (this.itemInfoBuilder_ == null) {
                    this.itemInfo_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFBF;
                    onChanged();
                } else {
                    this.itemInfoBuilder_.clear();
                }
                return this;
            }

            public Builder removeItemInfo(int index) {
                if (this.itemInfoBuilder_ == null) {
                    ensureItemInfoIsMutable();
                    this.itemInfo_.remove(index);
                    onChanged();
                } else {
                    this.itemInfoBuilder_.remove(index);
                }
                return this;
            }

            public FightLevelHandler.MJItemMax.Builder getItemInfoBuilder(int index) {
                return (FightLevelHandler.MJItemMax.Builder) getItemInfoFieldBuilder().getBuilder(index);
            }

            public FightLevelHandler.MJItemMaxOrBuilder getItemInfoOrBuilder(int index) {
                if (this.itemInfoBuilder_ == null)
                    return this.itemInfo_.get(index);
                return (FightLevelHandler.MJItemMaxOrBuilder) this.itemInfoBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends FightLevelHandler.MJItemMaxOrBuilder> getItemInfoOrBuilderList() {
                if (this.itemInfoBuilder_ != null)
                    return this.itemInfoBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.itemInfo_);
            }

            public FightLevelHandler.MJItemMax.Builder addItemInfoBuilder() {
                return (FightLevelHandler.MJItemMax.Builder) getItemInfoFieldBuilder().addBuilder(FightLevelHandler.MJItemMax.getDefaultInstance());
            }

            public FightLevelHandler.MJItemMax.Builder addItemInfoBuilder(int index) {
                return (FightLevelHandler.MJItemMax.Builder) getItemInfoFieldBuilder().addBuilder(index, FightLevelHandler.MJItemMax.getDefaultInstance());
            }

            public List<FightLevelHandler.MJItemMax.Builder> getItemInfoBuilderList() {
                return getItemInfoFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<FightLevelHandler.MJItemMax, FightLevelHandler.MJItemMax.Builder, FightLevelHandler.MJItemMaxOrBuilder> getItemInfoFieldBuilder() {
                if (this.itemInfoBuilder_ == null) {
                    this.itemInfoBuilder_ = new RepeatedFieldBuilder(this.itemInfo_, ((this.bitField0_ & 0x40) == 64), getParentForChildren(), isClean());
                    this.itemInfo_ = null;
                }
                return this.itemInfoBuilder_;
            }
        }
    }

    public static final class EnterLllsion2Request extends GeneratedMessage implements EnterLllsion2RequestOrBuilder {
        private static final EnterLllsion2Request defaultInstance = new EnterLllsion2Request(true);
        private final UnknownFieldSet unknownFields;

        private EnterLllsion2Request(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private EnterLllsion2Request(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static EnterLllsion2Request getDefaultInstance() {
            return defaultInstance;
        }

        public EnterLllsion2Request getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private EnterLllsion2Request(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_EnterLllsion2Request_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_EnterLllsion2Request_fieldAccessorTable.ensureFieldAccessorsInitialized(EnterLllsion2Request.class, Builder.class);
        }

        public static Parser<EnterLllsion2Request> PARSER = (Parser<EnterLllsion2Request>) new AbstractParser<EnterLllsion2Request>() {
            public FightLevelHandler.EnterLllsion2Request parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.EnterLllsion2Request(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<EnterLllsion2Request> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static EnterLllsion2Request parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (EnterLllsion2Request) PARSER.parseFrom(data);
        }

        public static EnterLllsion2Request parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (EnterLllsion2Request) PARSER.parseFrom(data, extensionRegistry);
        }

        public static EnterLllsion2Request parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (EnterLllsion2Request) PARSER.parseFrom(data);
        }

        public static EnterLllsion2Request parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (EnterLllsion2Request) PARSER.parseFrom(data, extensionRegistry);
        }

        public static EnterLllsion2Request parseFrom(InputStream input) throws IOException {
            return (EnterLllsion2Request) PARSER.parseFrom(input);
        }

        public static EnterLllsion2Request parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterLllsion2Request) PARSER.parseFrom(input, extensionRegistry);
        }

        public static EnterLllsion2Request parseDelimitedFrom(InputStream input) throws IOException {
            return (EnterLllsion2Request) PARSER.parseDelimitedFrom(input);
        }

        public static EnterLllsion2Request parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterLllsion2Request) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static EnterLllsion2Request parseFrom(CodedInputStream input) throws IOException {
            return (EnterLllsion2Request) PARSER.parseFrom(input);
        }

        public static EnterLllsion2Request parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterLllsion2Request) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(EnterLllsion2Request prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.EnterLllsion2RequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_EnterLllsion2Request_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_EnterLllsion2Request_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.EnterLllsion2Request.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.EnterLllsion2Request.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_EnterLllsion2Request_descriptor;
            }

            public FightLevelHandler.EnterLllsion2Request getDefaultInstanceForType() {
                return FightLevelHandler.EnterLllsion2Request.getDefaultInstance();
            }

            public FightLevelHandler.EnterLllsion2Request build() {
                FightLevelHandler.EnterLllsion2Request result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.EnterLllsion2Request buildPartial() {
                FightLevelHandler.EnterLllsion2Request result = new FightLevelHandler.EnterLllsion2Request(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.EnterLllsion2Request)
                    return mergeFrom((FightLevelHandler.EnterLllsion2Request) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.EnterLllsion2Request other) {
                if (other == FightLevelHandler.EnterLllsion2Request.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.EnterLllsion2Request parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.EnterLllsion2Request) FightLevelHandler.EnterLllsion2Request.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.EnterLllsion2Request) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class EnterLllsion2Response
            extends GeneratedMessage
            implements EnterLllsion2ResponseOrBuilder {
        private static final EnterLllsion2Response defaultInstance = new EnterLllsion2Response(true);
        private final UnknownFieldSet unknownFields;

        private EnterLllsion2Response(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private EnterLllsion2Response(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static EnterLllsion2Response getDefaultInstance() {
            return defaultInstance;
        }

        public EnterLllsion2Response getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private EnterLllsion2Response(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_EnterLllsion2Response_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_EnterLllsion2Response_fieldAccessorTable.ensureFieldAccessorsInitialized(EnterLllsion2Response.class, Builder.class);
        }

        public static Parser<EnterLllsion2Response> PARSER = (Parser<EnterLllsion2Response>) new AbstractParser<EnterLllsion2Response>() {
            public FightLevelHandler.EnterLllsion2Response parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.EnterLllsion2Response(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<EnterLllsion2Response> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static EnterLllsion2Response parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (EnterLllsion2Response) PARSER.parseFrom(data);
        }

        public static EnterLllsion2Response parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (EnterLllsion2Response) PARSER.parseFrom(data, extensionRegistry);
        }

        public static EnterLllsion2Response parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (EnterLllsion2Response) PARSER.parseFrom(data);
        }

        public static EnterLllsion2Response parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (EnterLllsion2Response) PARSER.parseFrom(data, extensionRegistry);
        }

        public static EnterLllsion2Response parseFrom(InputStream input) throws IOException {
            return (EnterLllsion2Response) PARSER.parseFrom(input);
        }

        public static EnterLllsion2Response parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterLllsion2Response) PARSER.parseFrom(input, extensionRegistry);
        }

        public static EnterLllsion2Response parseDelimitedFrom(InputStream input) throws IOException {
            return (EnterLllsion2Response) PARSER.parseDelimitedFrom(input);
        }

        public static EnterLllsion2Response parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterLllsion2Response) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static EnterLllsion2Response parseFrom(CodedInputStream input) throws IOException {
            return (EnterLllsion2Response) PARSER.parseFrom(input);
        }

        public static EnterLllsion2Response parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (EnterLllsion2Response) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(EnterLllsion2Response prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.EnterLllsion2ResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_EnterLllsion2Response_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_EnterLllsion2Response_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.EnterLllsion2Response.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.EnterLllsion2Response.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_EnterLllsion2Response_descriptor;
            }

            public FightLevelHandler.EnterLllsion2Response getDefaultInstanceForType() {
                return FightLevelHandler.EnterLllsion2Response.getDefaultInstance();
            }

            public FightLevelHandler.EnterLllsion2Response build() {
                FightLevelHandler.EnterLllsion2Response result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.EnterLllsion2Response buildPartial() {
                FightLevelHandler.EnterLllsion2Response result = new FightLevelHandler.EnterLllsion2Response(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.EnterLllsion2Response)
                    return mergeFrom((FightLevelHandler.EnterLllsion2Response) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.EnterLllsion2Response other) {
                if (other == FightLevelHandler.EnterLllsion2Response.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.EnterLllsion2Response parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.EnterLllsion2Response) FightLevelHandler.EnterLllsion2Response.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.EnterLllsion2Response) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = FightLevelHandler.EnterLllsion2Response.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class AddProfitRequest
            extends GeneratedMessage
            implements AddProfitRequestOrBuilder {
        private static final AddProfitRequest defaultInstance = new AddProfitRequest(true);
        private final UnknownFieldSet unknownFields;

        private AddProfitRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private AddProfitRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static AddProfitRequest getDefaultInstance() {
            return defaultInstance;
        }

        public AddProfitRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private AddProfitRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.mapId_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_AddProfitRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_AddProfitRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(AddProfitRequest.class, Builder.class);
        }

        public static Parser<AddProfitRequest> PARSER = (Parser<AddProfitRequest>) new AbstractParser<AddProfitRequest>() {
            public FightLevelHandler.AddProfitRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.AddProfitRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int MAPID_FIELD_NUMBER = 1;
        private int mapId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<AddProfitRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasMapId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getMapId() {
            return this.mapId_;
        }

        private void initFields() {
            this.mapId_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasMapId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.mapId_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.mapId_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static AddProfitRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (AddProfitRequest) PARSER.parseFrom(data);
        }

        public static AddProfitRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (AddProfitRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static AddProfitRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (AddProfitRequest) PARSER.parseFrom(data);
        }

        public static AddProfitRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (AddProfitRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static AddProfitRequest parseFrom(InputStream input) throws IOException {
            return (AddProfitRequest) PARSER.parseFrom(input);
        }

        public static AddProfitRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (AddProfitRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static AddProfitRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (AddProfitRequest) PARSER.parseDelimitedFrom(input);
        }

        public static AddProfitRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (AddProfitRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static AddProfitRequest parseFrom(CodedInputStream input) throws IOException {
            return (AddProfitRequest) PARSER.parseFrom(input);
        }

        public static AddProfitRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (AddProfitRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(AddProfitRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.AddProfitRequestOrBuilder {
            private int bitField0_;
            private int mapId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_AddProfitRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_AddProfitRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.AddProfitRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.AddProfitRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.mapId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_AddProfitRequest_descriptor;
            }

            public FightLevelHandler.AddProfitRequest getDefaultInstanceForType() {
                return FightLevelHandler.AddProfitRequest.getDefaultInstance();
            }

            public FightLevelHandler.AddProfitRequest build() {
                FightLevelHandler.AddProfitRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.AddProfitRequest buildPartial() {
                FightLevelHandler.AddProfitRequest result = new FightLevelHandler.AddProfitRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.mapId_ = this.mapId_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.AddProfitRequest)
                    return mergeFrom((FightLevelHandler.AddProfitRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.AddProfitRequest other) {
                if (other == FightLevelHandler.AddProfitRequest.getDefaultInstance()) return this;
                if (other.hasMapId()) setMapId(other.getMapId());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasMapId()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.AddProfitRequest parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.AddProfitRequest) FightLevelHandler.AddProfitRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.AddProfitRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasMapId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getMapId() {
                return this.mapId_;
            }

            public Builder setMapId(int value) {
                this.bitField0_ |= 0x1;
                this.mapId_ = value;
                onChanged();
                return this;
            }

            public Builder clearMapId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.mapId_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class AddProfitResponse
            extends GeneratedMessage
            implements AddProfitResponseOrBuilder {
        private static final AddProfitResponse defaultInstance = new AddProfitResponse(true);
        private final UnknownFieldSet unknownFields;

        private AddProfitResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private AddProfitResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static AddProfitResponse getDefaultInstance() {
            return defaultInstance;
        }

        public AddProfitResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private AddProfitResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_AddProfitResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_AddProfitResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(AddProfitResponse.class, Builder.class);
        }

        public static Parser<AddProfitResponse> PARSER = (Parser<AddProfitResponse>) new AbstractParser<AddProfitResponse>() {
            public FightLevelHandler.AddProfitResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.AddProfitResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<AddProfitResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static AddProfitResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (AddProfitResponse) PARSER.parseFrom(data);
        }

        public static AddProfitResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (AddProfitResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static AddProfitResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (AddProfitResponse) PARSER.parseFrom(data);
        }

        public static AddProfitResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (AddProfitResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static AddProfitResponse parseFrom(InputStream input) throws IOException {
            return (AddProfitResponse) PARSER.parseFrom(input);
        }

        public static AddProfitResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (AddProfitResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static AddProfitResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (AddProfitResponse) PARSER.parseDelimitedFrom(input);
        }

        public static AddProfitResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (AddProfitResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static AddProfitResponse parseFrom(CodedInputStream input) throws IOException {
            return (AddProfitResponse) PARSER.parseFrom(input);
        }

        public static AddProfitResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (AddProfitResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(AddProfitResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.AddProfitResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_AddProfitResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_AddProfitResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.AddProfitResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.AddProfitResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_AddProfitResponse_descriptor;
            }

            public FightLevelHandler.AddProfitResponse getDefaultInstanceForType() {
                return FightLevelHandler.AddProfitResponse.getDefaultInstance();
            }

            public FightLevelHandler.AddProfitResponse build() {
                FightLevelHandler.AddProfitResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.AddProfitResponse buildPartial() {
                FightLevelHandler.AddProfitResponse result = new FightLevelHandler.AddProfitResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.AddProfitResponse)
                    return mergeFrom((FightLevelHandler.AddProfitResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.AddProfitResponse other) {
                if (other == FightLevelHandler.AddProfitResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.AddProfitResponse parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.AddProfitResponse) FightLevelHandler.AddProfitResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.AddProfitResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = FightLevelHandler.AddProfitResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class OnConfirmEnterFubenPush
            extends GeneratedMessage
            implements OnConfirmEnterFubenPushOrBuilder {
        private static final OnConfirmEnterFubenPush defaultInstance = new OnConfirmEnterFubenPush(true);
        private final UnknownFieldSet unknownFields;

        private OnConfirmEnterFubenPush(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private OnConfirmEnterFubenPush(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static OnConfirmEnterFubenPush getDefaultInstance() {
            return defaultInstance;
        }

        public OnConfirmEnterFubenPush getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private OnConfirmEnterFubenPush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.s2CMsg_ = bs;
                            break;
                        case 24:
                            this.bitField0_ |= 0x2;
                            this.s2CFubenId_ = input.readInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 0x4;
                            this.s2COverTime_ = input.readInt32();
                            break;
                        case 42:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x8;
                            this.s2CLeaderId_ = bs;
                            break;
                        case 50:
                            if ((mutable_bitField0_ & 0x10) != 16) {
                                this.s2CMemberData_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x10;
                            }
                            this.s2CMemberData_.add(input.readMessage(FightLevelHandler.MemberData.PARSER, extensionRegistry));
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x10) == 16)
                    this.s2CMemberData_ = Collections.unmodifiableList(this.s2CMemberData_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_OnConfirmEnterFubenPush_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_OnConfirmEnterFubenPush_fieldAccessorTable.ensureFieldAccessorsInitialized(OnConfirmEnterFubenPush.class, Builder.class);
        }

        public static Parser<OnConfirmEnterFubenPush> PARSER = (Parser<OnConfirmEnterFubenPush>) new AbstractParser<OnConfirmEnterFubenPush>() {
            public FightLevelHandler.OnConfirmEnterFubenPush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.OnConfirmEnterFubenPush(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int S2C_FUBENID_FIELD_NUMBER = 3;
        private int s2CFubenId_;
        public static final int S2C_OVER_TIME_FIELD_NUMBER = 4;
        private int s2COverTime_;
        public static final int S2C_LEADERID_FIELD_NUMBER = 5;
        private Object s2CLeaderId_;
        public static final int S2C_MEMBERDATA_FIELD_NUMBER = 6;
        private List<FightLevelHandler.MemberData> s2CMemberData_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<OnConfirmEnterFubenPush> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasS2CFubenId() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getS2CFubenId() {
            return this.s2CFubenId_;
        }

        static {
            defaultInstance.initFields();
        }


        public boolean hasS2COverTime() {
            return ((this.bitField0_ & 0x4) == 4);
        }


        public int getS2COverTime() {
            return this.s2COverTime_;
        }


        public boolean hasS2CLeaderId() {
            return ((this.bitField0_ & 0x8) == 8);
        }


        public String getS2CLeaderId() {
            Object ref = this.s2CLeaderId_;
            if (ref instanceof String) {
                return (String) ref;
            }
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                this.s2CLeaderId_ = s;
            }
            return s;
        }


        public ByteString getS2CLeaderIdBytes() {
            Object ref = this.s2CLeaderId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CLeaderId_ = b;
                return b;
            }
            return (ByteString) ref;
        }


        public List<FightLevelHandler.MemberData> getS2CMemberDataList() {
            return this.s2CMemberData_;
        }


        public List<? extends FightLevelHandler.MemberDataOrBuilder> getS2CMemberDataOrBuilderList() {
            return (List) this.s2CMemberData_;
        }


        public int getS2CMemberDataCount() {
            return this.s2CMemberData_.size();
        }


        public FightLevelHandler.MemberData getS2CMemberData(int index) {
            return this.s2CMemberData_.get(index);
        }


        public FightLevelHandler.MemberDataOrBuilder getS2CMemberDataOrBuilder(int index) {
            return this.s2CMemberData_.get(index);
        }


        private void initFields() {
            this.s2CMsg_ = "";
            this.s2CFubenId_ = 0;
            this.s2COverTime_ = 0;
            this.s2CLeaderId_ = "";
            this.s2CMemberData_ = Collections.emptyList();
        }


        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            if (!hasS2CFubenId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2COverTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2CLeaderId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getS2CMemberDataCount(); i++) {
                if (!getS2CMemberData(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }


        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeBytes(2, getS2CMsgBytes());
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeInt32(3, this.s2CFubenId_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                output.writeInt32(4, this.s2COverTime_);
            }
            if ((this.bitField0_ & 0x8) == 8) {
                output.writeBytes(5, getS2CLeaderIdBytes());
            }
            for (int i = 0; i < this.s2CMemberData_.size(); i++) {
                output.writeMessage(6, (MessageLite) this.s2CMemberData_.get(i));
            }
            getUnknownFields().writeTo(output);
        }


        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeInt32Size(3, this.s2CFubenId_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                size += CodedOutputStream.computeInt32Size(4, this.s2COverTime_);
            }
            if ((this.bitField0_ & 0x8) == 8) {
                size += CodedOutputStream.computeBytesSize(5, getS2CLeaderIdBytes());
            }
            for (int i = 0; i < this.s2CMemberData_.size(); i++) {
                size += CodedOutputStream.computeMessageSize(6, (MessageLite) this.s2CMemberData_.get(i));
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static OnConfirmEnterFubenPush parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (OnConfirmEnterFubenPush) PARSER.parseFrom(data);
        }

        public static OnConfirmEnterFubenPush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OnConfirmEnterFubenPush) PARSER.parseFrom(data, extensionRegistry);
        }

        public static OnConfirmEnterFubenPush parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (OnConfirmEnterFubenPush) PARSER.parseFrom(data);
        }

        public static OnConfirmEnterFubenPush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OnConfirmEnterFubenPush) PARSER.parseFrom(data, extensionRegistry);
        }

        public static OnConfirmEnterFubenPush parseFrom(InputStream input) throws IOException {
            return (OnConfirmEnterFubenPush) PARSER.parseFrom(input);
        }

        public static OnConfirmEnterFubenPush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnConfirmEnterFubenPush) PARSER.parseFrom(input, extensionRegistry);
        }

        public static OnConfirmEnterFubenPush parseDelimitedFrom(InputStream input) throws IOException {
            return (OnConfirmEnterFubenPush) PARSER.parseDelimitedFrom(input);
        }

        public static OnConfirmEnterFubenPush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnConfirmEnterFubenPush) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static OnConfirmEnterFubenPush parseFrom(CodedInputStream input) throws IOException {
            return (OnConfirmEnterFubenPush) PARSER.parseFrom(input);
        }

        public static OnConfirmEnterFubenPush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnConfirmEnterFubenPush) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(OnConfirmEnterFubenPush prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder
                extends GeneratedMessage.Builder<Builder>
                implements FightLevelHandler.OnConfirmEnterFubenPushOrBuilder {
            private int bitField0_;
            private Object s2CMsg_;
            private int s2CFubenId_;
            private int s2COverTime_;
            private Object s2CLeaderId_;
            private List<FightLevelHandler.MemberData> s2CMemberData_;
            private RepeatedFieldBuilder<FightLevelHandler.MemberData, FightLevelHandler.MemberData.Builder, FightLevelHandler.MemberDataOrBuilder> s2CMemberDataBuilder_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_OnConfirmEnterFubenPush_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_OnConfirmEnterFubenPush_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.OnConfirmEnterFubenPush.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                this.s2CLeaderId_ = "";
                this.s2CMemberData_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                this.s2CLeaderId_ = "";
                this.s2CMemberData_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.OnConfirmEnterFubenPush.alwaysUseFieldBuilders) {
                    getS2CMemberDataFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CFubenId_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2COverTime_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                this.s2CLeaderId_ = "";
                this.bitField0_ &= 0xFFFFFFF7;
                if (this.s2CMemberDataBuilder_ == null) {
                    this.s2CMemberData_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFEF;
                } else {
                    this.s2CMemberDataBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_OnConfirmEnterFubenPush_descriptor;
            }

            public FightLevelHandler.OnConfirmEnterFubenPush getDefaultInstanceForType() {
                return FightLevelHandler.OnConfirmEnterFubenPush.getDefaultInstance();
            }

            public FightLevelHandler.OnConfirmEnterFubenPush build() {
                FightLevelHandler.OnConfirmEnterFubenPush result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public FightLevelHandler.OnConfirmEnterFubenPush buildPartial() {
                FightLevelHandler.OnConfirmEnterFubenPush result = new FightLevelHandler.OnConfirmEnterFubenPush(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) {
                    to_bitField0_ |= 0x1;
                }
                result.s2CMsg_ = this.s2CMsg_;
                if ((from_bitField0_ & 0x2) == 2) {
                    to_bitField0_ |= 0x2;
                }
                result.s2CFubenId_ = this.s2CFubenId_;
                if ((from_bitField0_ & 0x4) == 4) {
                    to_bitField0_ |= 0x4;
                }
                result.s2COverTime_ = this.s2COverTime_;
                if ((from_bitField0_ & 0x8) == 8) {
                    to_bitField0_ |= 0x8;
                }
                result.s2CLeaderId_ = this.s2CLeaderId_;
                if (this.s2CMemberDataBuilder_ == null) {
                    if ((this.bitField0_ & 0x10) == 16) {
                        this.s2CMemberData_ = Collections.unmodifiableList(this.s2CMemberData_);
                        this.bitField0_ &= 0xFFFFFFEF;
                    }
                    result.s2CMemberData_ = this.s2CMemberData_;
                } else {
                    result.s2CMemberData_ = this.s2CMemberDataBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.OnConfirmEnterFubenPush) {
                    return mergeFrom((FightLevelHandler.OnConfirmEnterFubenPush) other);
                }
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.OnConfirmEnterFubenPush other) {
                if (other == FightLevelHandler.OnConfirmEnterFubenPush.getDefaultInstance()) {
                    return this;
                }
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x1;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (other.hasS2CFubenId()) {
                    setS2CFubenId(other.getS2CFubenId());
                }
                if (other.hasS2COverTime()) {
                    setS2COverTime(other.getS2COverTime());
                }
                if (other.hasS2CLeaderId()) {
                    this.bitField0_ |= 0x8;
                    this.s2CLeaderId_ = other.s2CLeaderId_;
                    onChanged();
                }
                if (this.s2CMemberDataBuilder_ == null) {
                    if (!other.s2CMemberData_.isEmpty()) {
                        if (this.s2CMemberData_.isEmpty()) {
                            this.s2CMemberData_ = other.s2CMemberData_;
                            this.bitField0_ &= 0xFFFFFFEF;
                        } else {
                            ensureS2CMemberDataIsMutable();
                            this.s2CMemberData_.addAll(other.s2CMemberData_);
                        }
                        onChanged();
                    }
                } else if (!other.s2CMemberData_.isEmpty()) {
                    if (this.s2CMemberDataBuilder_.isEmpty()) {
                        this.s2CMemberDataBuilder_.dispose();
                        this.s2CMemberDataBuilder_ = null;
                        this.s2CMemberData_ = other.s2CMemberData_;
                        this.bitField0_ &= 0xFFFFFFEF;
                        this.s2CMemberDataBuilder_ = FightLevelHandler.OnConfirmEnterFubenPush.alwaysUseFieldBuilders ? getS2CMemberDataFieldBuilder() : null;
                    } else {
                        this.s2CMemberDataBuilder_.addAllMessages(other.s2CMemberData_);
                    }
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CFubenId()) {
                    return false;
                }
                if (!hasS2COverTime()) {
                    return false;
                }
                if (!hasS2CLeaderId()) {
                    return false;
                }
                for (int i = 0; i < getS2CMemberDataCount(); i++) {
                    if (!getS2CMemberData(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.OnConfirmEnterFubenPush parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.OnConfirmEnterFubenPush) FightLevelHandler.OnConfirmEnterFubenPush.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.OnConfirmEnterFubenPush) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.s2CMsg_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x1;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = FightLevelHandler.OnConfirmEnterFubenPush.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x1;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public boolean hasS2CFubenId() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getS2CFubenId() {
                return this.s2CFubenId_;
            }

            public Builder setS2CFubenId(int value) {
                this.bitField0_ |= 0x2;
                this.s2CFubenId_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CFubenId() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CFubenId_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2COverTime() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public int getS2COverTime() {
                return this.s2COverTime_;
            }

            public Builder setS2COverTime(int value) {
                this.bitField0_ |= 0x4;
                this.s2COverTime_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2COverTime() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.s2COverTime_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CLeaderId() {
                return ((this.bitField0_ & 0x8) == 8);
            }

            public String getS2CLeaderId() {
                Object ref = this.s2CLeaderId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.s2CLeaderId_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CLeaderIdBytes() {
                Object ref = this.s2CLeaderId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CLeaderId_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CLeaderId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x8;
                this.s2CLeaderId_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CLeaderId() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.s2CLeaderId_ = FightLevelHandler.OnConfirmEnterFubenPush.getDefaultInstance().getS2CLeaderId();
                onChanged();
                return this;
            }

            public Builder setS2CLeaderIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x8;
                this.s2CLeaderId_ = value;
                onChanged();
                return this;
            }

            private void ensureS2CMemberDataIsMutable() {
                if ((this.bitField0_ & 0x10) != 16) {
                    this.s2CMemberData_ = new ArrayList<>(this.s2CMemberData_);
                    this.bitField0_ |= 0x10;
                }
            }

            public List<FightLevelHandler.MemberData> getS2CMemberDataList() {
                if (this.s2CMemberDataBuilder_ == null) {
                    return Collections.unmodifiableList(this.s2CMemberData_);
                }
                return this.s2CMemberDataBuilder_.getMessageList();
            }

            public int getS2CMemberDataCount() {
                if (this.s2CMemberDataBuilder_ == null) {
                    return this.s2CMemberData_.size();
                }
                return this.s2CMemberDataBuilder_.getCount();
            }

            public FightLevelHandler.MemberData getS2CMemberData(int index) {
                if (this.s2CMemberDataBuilder_ == null) {
                    return this.s2CMemberData_.get(index);
                }
                return (FightLevelHandler.MemberData) this.s2CMemberDataBuilder_.getMessage(index);
            }

            public Builder setS2CMemberData(int index, FightLevelHandler.MemberData value) {
                if (this.s2CMemberDataBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureS2CMemberDataIsMutable();
                    this.s2CMemberData_.set(index, value);
                    onChanged();
                } else {
                    this.s2CMemberDataBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setS2CMemberData(int index, FightLevelHandler.MemberData.Builder builderForValue) {
                if (this.s2CMemberDataBuilder_ == null) {
                    ensureS2CMemberDataIsMutable();
                    this.s2CMemberData_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CMemberDataBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addS2CMemberData(FightLevelHandler.MemberData value) {
                if (this.s2CMemberDataBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureS2CMemberDataIsMutable();
                    this.s2CMemberData_.add(value);
                    onChanged();
                } else {
                    this.s2CMemberDataBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addS2CMemberData(int index, FightLevelHandler.MemberData value) {
                if (this.s2CMemberDataBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureS2CMemberDataIsMutable();
                    this.s2CMemberData_.add(index, value);
                    onChanged();
                } else {
                    this.s2CMemberDataBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addS2CMemberData(FightLevelHandler.MemberData.Builder builderForValue) {
                if (this.s2CMemberDataBuilder_ == null) {
                    ensureS2CMemberDataIsMutable();
                    this.s2CMemberData_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.s2CMemberDataBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addS2CMemberData(int index, FightLevelHandler.MemberData.Builder builderForValue) {
                if (this.s2CMemberDataBuilder_ == null) {
                    ensureS2CMemberDataIsMutable();
                    this.s2CMemberData_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CMemberDataBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllS2CMemberData(Iterable<? extends FightLevelHandler.MemberData> values) {
                if (this.s2CMemberDataBuilder_ == null) {
                    ensureS2CMemberDataIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.s2CMemberData_);
                    onChanged();
                } else {
                    this.s2CMemberDataBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearS2CMemberData() {
                if (this.s2CMemberDataBuilder_ == null) {
                    this.s2CMemberData_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFEF;
                    onChanged();
                } else {
                    this.s2CMemberDataBuilder_.clear();
                }
                return this;
            }

            public Builder removeS2CMemberData(int index) {
                if (this.s2CMemberDataBuilder_ == null) {
                    ensureS2CMemberDataIsMutable();
                    this.s2CMemberData_.remove(index);
                    onChanged();
                } else {
                    this.s2CMemberDataBuilder_.remove(index);
                }
                return this;
            }

            public FightLevelHandler.MemberData.Builder getS2CMemberDataBuilder(int index) {
                return (FightLevelHandler.MemberData.Builder) getS2CMemberDataFieldBuilder().getBuilder(index);
            }

            public FightLevelHandler.MemberDataOrBuilder getS2CMemberDataOrBuilder(int index) {
                if (this.s2CMemberDataBuilder_ == null) {
                    return this.s2CMemberData_.get(index);
                }
                return (FightLevelHandler.MemberDataOrBuilder) this.s2CMemberDataBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends FightLevelHandler.MemberDataOrBuilder> getS2CMemberDataOrBuilderList() {
                if (this.s2CMemberDataBuilder_ != null) {
                    return this.s2CMemberDataBuilder_.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList((List) this.s2CMemberData_);
            }

            public FightLevelHandler.MemberData.Builder addS2CMemberDataBuilder() {
                return (FightLevelHandler.MemberData.Builder) getS2CMemberDataFieldBuilder().addBuilder(FightLevelHandler.MemberData.getDefaultInstance());
            }

            public FightLevelHandler.MemberData.Builder addS2CMemberDataBuilder(int index) {
                return (FightLevelHandler.MemberData.Builder) getS2CMemberDataFieldBuilder().addBuilder(index, FightLevelHandler.MemberData.getDefaultInstance());
            }

            public List<FightLevelHandler.MemberData.Builder> getS2CMemberDataBuilderList() {
                return getS2CMemberDataFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<FightLevelHandler.MemberData, FightLevelHandler.MemberData.Builder, FightLevelHandler.MemberDataOrBuilder> getS2CMemberDataFieldBuilder() {
                if (this.s2CMemberDataBuilder_ == null) {
                    this.s2CMemberDataBuilder_ = new RepeatedFieldBuilder(this.s2CMemberData_, ((this.bitField0_ & 0x10) == 16), getParentForChildren(), isClean());
                    this.s2CMemberData_ = null;
                }
                return this.s2CMemberDataBuilder_;
            }
        }
    }

    public static final class OnMemberEnterFubenStateChangePush
            extends GeneratedMessage
            implements OnMemberEnterFubenStateChangePushOrBuilder {
        private static final OnMemberEnterFubenStateChangePush defaultInstance = new OnMemberEnterFubenStateChangePush(true);
        private final UnknownFieldSet unknownFields;

        private OnMemberEnterFubenStateChangePush(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private OnMemberEnterFubenStateChangePush(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static OnMemberEnterFubenStateChangePush getDefaultInstance() {
            return defaultInstance;
        }

        public OnMemberEnterFubenStateChangePush getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private OnMemberEnterFubenStateChangePush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.s2CMsg_ = bs;
                            break;
                        case 26:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CPlayerId_ = bs;
                            break;
                        case 32:
                            this.bitField0_ |= 0x4;
                            this.s2CIsReady_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_OnMemberEnterFubenStateChangePush_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_OnMemberEnterFubenStateChangePush_fieldAccessorTable.ensureFieldAccessorsInitialized(OnMemberEnterFubenStateChangePush.class, Builder.class);
        }

        public static Parser<OnMemberEnterFubenStateChangePush> PARSER = (Parser<OnMemberEnterFubenStateChangePush>) new AbstractParser<OnMemberEnterFubenStateChangePush>() {
            public FightLevelHandler.OnMemberEnterFubenStateChangePush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.OnMemberEnterFubenStateChangePush(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int S2C_PLAYERID_FIELD_NUMBER = 3;
        private Object s2CPlayerId_;
        public static final int S2C_ISREADY_FIELD_NUMBER = 4;
        private int s2CIsReady_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<OnMemberEnterFubenStateChangePush> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasS2CPlayerId() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        static {
            defaultInstance.initFields();
        }


        public String getS2CPlayerId() {
            Object ref = this.s2CPlayerId_;
            if (ref instanceof String) {
                return (String) ref;
            }
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                this.s2CPlayerId_ = s;
            }
            return s;
        }


        public ByteString getS2CPlayerIdBytes() {
            Object ref = this.s2CPlayerId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CPlayerId_ = b;
                return b;
            }
            return (ByteString) ref;
        }


        public boolean hasS2CIsReady() {
            return ((this.bitField0_ & 0x4) == 4);
        }


        public int getS2CIsReady() {
            return this.s2CIsReady_;
        }


        private void initFields() {
            this.s2CMsg_ = "";
            this.s2CPlayerId_ = "";
            this.s2CIsReady_ = 0;
        }


        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            if (!hasS2CPlayerId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2CIsReady()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }


        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeBytes(2, getS2CMsgBytes());
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeBytes(3, getS2CPlayerIdBytes());
            }
            if ((this.bitField0_ & 0x4) == 4) {
                output.writeInt32(4, this.s2CIsReady_);
            }
            getUnknownFields().writeTo(output);
        }


        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeBytesSize(3, getS2CPlayerIdBytes());
            }
            if ((this.bitField0_ & 0x4) == 4) {
                size += CodedOutputStream.computeInt32Size(4, this.s2CIsReady_);
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }


        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }


        public static OnMemberEnterFubenStateChangePush parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (OnMemberEnterFubenStateChangePush) PARSER.parseFrom(data);
        }


        public static OnMemberEnterFubenStateChangePush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OnMemberEnterFubenStateChangePush) PARSER.parseFrom(data, extensionRegistry);
        }


        public static OnMemberEnterFubenStateChangePush parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (OnMemberEnterFubenStateChangePush) PARSER.parseFrom(data);
        }


        public static OnMemberEnterFubenStateChangePush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OnMemberEnterFubenStateChangePush) PARSER.parseFrom(data, extensionRegistry);
        }


        public static OnMemberEnterFubenStateChangePush parseFrom(InputStream input) throws IOException {
            return (OnMemberEnterFubenStateChangePush) PARSER.parseFrom(input);
        }


        public static OnMemberEnterFubenStateChangePush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnMemberEnterFubenStateChangePush) PARSER.parseFrom(input, extensionRegistry);
        }


        public static OnMemberEnterFubenStateChangePush parseDelimitedFrom(InputStream input) throws IOException {
            return (OnMemberEnterFubenStateChangePush) PARSER.parseDelimitedFrom(input);
        }


        public static OnMemberEnterFubenStateChangePush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnMemberEnterFubenStateChangePush) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }


        public static OnMemberEnterFubenStateChangePush parseFrom(CodedInputStream input) throws IOException {
            return (OnMemberEnterFubenStateChangePush) PARSER.parseFrom(input);
        }


        public static OnMemberEnterFubenStateChangePush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnMemberEnterFubenStateChangePush) PARSER.parseFrom(input, extensionRegistry);
        }


        public static Builder newBuilder() {
            return Builder.create();
        }


        public Builder newBuilderForType() {
            return newBuilder();
        }


        public static Builder newBuilder(OnMemberEnterFubenStateChangePush prototype) {
            return newBuilder().mergeFrom(prototype);
        }


        public Builder toBuilder() {
            return newBuilder(this);
        }


        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }


        public static final class Builder
                extends GeneratedMessage.Builder<Builder>
                implements FightLevelHandler.OnMemberEnterFubenStateChangePushOrBuilder {
            private int bitField0_;


            private Object s2CMsg_;


            private Object s2CPlayerId_;


            private int s2CIsReady_;


            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_OnMemberEnterFubenStateChangePush_descriptor;
            }


            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_OnMemberEnterFubenStateChangePush_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.OnMemberEnterFubenStateChangePush.class, Builder.class);
            }


            private Builder() {
                this.s2CMsg_ = "";
                this.s2CPlayerId_ = "";
                maybeForceBuilderInitialization();
            }


            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                this.s2CPlayerId_ = "";
                maybeForceBuilderInitialization();
            }


            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.OnMemberEnterFubenStateChangePush.alwaysUseFieldBuilders) ;
            }


            private static Builder create() {
                return new Builder();
            }


            public Builder clear() {
                super.clear();
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CPlayerId_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CIsReady_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }


            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }


            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_OnMemberEnterFubenStateChangePush_descriptor;
            }


            public FightLevelHandler.OnMemberEnterFubenStateChangePush getDefaultInstanceForType() {
                return FightLevelHandler.OnMemberEnterFubenStateChangePush.getDefaultInstance();
            }


            public FightLevelHandler.OnMemberEnterFubenStateChangePush build() {
                FightLevelHandler.OnMemberEnterFubenStateChangePush result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }


            public FightLevelHandler.OnMemberEnterFubenStateChangePush buildPartial() {
                FightLevelHandler.OnMemberEnterFubenStateChangePush result = new FightLevelHandler.OnMemberEnterFubenStateChangePush(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) {
                    to_bitField0_ |= 0x1;
                }
                result.s2CMsg_ = this.s2CMsg_;
                if ((from_bitField0_ & 0x2) == 2) {
                    to_bitField0_ |= 0x2;
                }
                result.s2CPlayerId_ = this.s2CPlayerId_;
                if ((from_bitField0_ & 0x4) == 4) {
                    to_bitField0_ |= 0x4;
                }
                result.s2CIsReady_ = this.s2CIsReady_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }


            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.OnMemberEnterFubenStateChangePush) {
                    return mergeFrom((FightLevelHandler.OnMemberEnterFubenStateChangePush) other);
                }
                super.mergeFrom(other);
                return this;
            }


            public Builder mergeFrom(FightLevelHandler.OnMemberEnterFubenStateChangePush other) {
                if (other == FightLevelHandler.OnMemberEnterFubenStateChangePush.getDefaultInstance()) {
                    return this;
                }
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x1;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (other.hasS2CPlayerId()) {
                    this.bitField0_ |= 0x2;
                    this.s2CPlayerId_ = other.s2CPlayerId_;
                    onChanged();
                }
                if (other.hasS2CIsReady()) {
                    setS2CIsReady(other.getS2CIsReady());
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }


            public final boolean isInitialized() {
                if (!hasS2CPlayerId()) {
                    return false;
                }
                if (!hasS2CIsReady()) {
                    return false;
                }
                return true;
            }


            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.OnMemberEnterFubenStateChangePush parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.OnMemberEnterFubenStateChangePush) FightLevelHandler.OnMemberEnterFubenStateChangePush.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.OnMemberEnterFubenStateChangePush) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }


            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x1) == 1);
            }


            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.s2CMsg_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setS2CMsg(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x1;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }


            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = FightLevelHandler.OnMemberEnterFubenStateChangePush.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }


            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x1;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }


            public boolean hasS2CPlayerId() {
                return ((this.bitField0_ & 0x2) == 2);
            }


            public String getS2CPlayerId() {
                Object ref = this.s2CPlayerId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.s2CPlayerId_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getS2CPlayerIdBytes() {
                Object ref = this.s2CPlayerId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CPlayerId_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setS2CPlayerId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x2;
                this.s2CPlayerId_ = value;
                onChanged();
                return this;
            }


            public Builder clearS2CPlayerId() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CPlayerId_ = FightLevelHandler.OnMemberEnterFubenStateChangePush.getDefaultInstance().getS2CPlayerId();
                onChanged();
                return this;
            }


            public Builder setS2CPlayerIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x2;
                this.s2CPlayerId_ = value;
                onChanged();
                return this;
            }


            public boolean hasS2CIsReady() {
                return ((this.bitField0_ & 0x4) == 4);
            }


            public int getS2CIsReady() {
                return this.s2CIsReady_;
            }


            public Builder setS2CIsReady(int value) {
                this.bitField0_ |= 0x4;
                this.s2CIsReady_ = value;
                onChanged();
                return this;
            }


            public Builder clearS2CIsReady() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.s2CIsReady_ = 0;
                onChanged();
                return this;
            }
        }
    }


    public static final class OnFubenClosePush
            extends GeneratedMessage
            implements OnFubenClosePushOrBuilder {
        private static final OnFubenClosePush defaultInstance = new OnFubenClosePush(true);
        private final UnknownFieldSet unknownFields;

        private OnFubenClosePush(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private OnFubenClosePush(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static OnFubenClosePush getDefaultInstance() {
            return defaultInstance;
        }

        public OnFubenClosePush getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private OnFubenClosePush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.s2CMsg_ = bs;
                            break;
                        case 24:
                            this.bitField0_ |= 0x2;
                            this.s2COverTime_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_OnFubenClosePush_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_OnFubenClosePush_fieldAccessorTable.ensureFieldAccessorsInitialized(OnFubenClosePush.class, Builder.class);
        }

        public static Parser<OnFubenClosePush> PARSER = (Parser<OnFubenClosePush>) new AbstractParser<OnFubenClosePush>() {
            public FightLevelHandler.OnFubenClosePush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.OnFubenClosePush(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int S2C_OVER_TIME_FIELD_NUMBER = 3;
        private int s2COverTime_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<OnFubenClosePush> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasS2COverTime() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getS2COverTime() {
            return this.s2COverTime_;
        }

        private void initFields() {
            this.s2CMsg_ = "";
            this.s2COverTime_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2COverTime()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeBytes(2, getS2CMsgBytes());
            if ((this.bitField0_ & 0x2) == 2) output.writeInt32(3, this.s2COverTime_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(3, this.s2COverTime_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static OnFubenClosePush parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (OnFubenClosePush) PARSER.parseFrom(data);
        }

        public static OnFubenClosePush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OnFubenClosePush) PARSER.parseFrom(data, extensionRegistry);
        }

        public static OnFubenClosePush parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (OnFubenClosePush) PARSER.parseFrom(data);
        }

        public static OnFubenClosePush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OnFubenClosePush) PARSER.parseFrom(data, extensionRegistry);
        }

        public static OnFubenClosePush parseFrom(InputStream input) throws IOException {
            return (OnFubenClosePush) PARSER.parseFrom(input);
        }

        public static OnFubenClosePush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnFubenClosePush) PARSER.parseFrom(input, extensionRegistry);
        }

        public static OnFubenClosePush parseDelimitedFrom(InputStream input) throws IOException {
            return (OnFubenClosePush) PARSER.parseDelimitedFrom(input);
        }

        public static OnFubenClosePush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnFubenClosePush) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static OnFubenClosePush parseFrom(CodedInputStream input) throws IOException {
            return (OnFubenClosePush) PARSER.parseFrom(input);
        }

        public static OnFubenClosePush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnFubenClosePush) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(OnFubenClosePush prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.OnFubenClosePushOrBuilder {
            private int bitField0_;
            private Object s2CMsg_;
            private int s2COverTime_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_OnFubenClosePush_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_OnFubenClosePush_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.OnFubenClosePush.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.OnFubenClosePush.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2COverTime_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_OnFubenClosePush_descriptor;
            }

            public FightLevelHandler.OnFubenClosePush getDefaultInstanceForType() {
                return FightLevelHandler.OnFubenClosePush.getDefaultInstance();
            }

            public FightLevelHandler.OnFubenClosePush build() {
                FightLevelHandler.OnFubenClosePush result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.OnFubenClosePush buildPartial() {
                FightLevelHandler.OnFubenClosePush result = new FightLevelHandler.OnFubenClosePush(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CMsg_ = this.s2CMsg_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2COverTime_ = this.s2COverTime_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.OnFubenClosePush)
                    return mergeFrom((FightLevelHandler.OnFubenClosePush) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.OnFubenClosePush other) {
                if (other == FightLevelHandler.OnFubenClosePush.getDefaultInstance()) return this;
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x1;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (other.hasS2COverTime()) setS2COverTime(other.getS2COverTime());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2COverTime()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.OnFubenClosePush parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.OnFubenClosePush) FightLevelHandler.OnFubenClosePush.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.OnFubenClosePush) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = FightLevelHandler.OnFubenClosePush.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public boolean hasS2COverTime() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getS2COverTime() {
                return this.s2COverTime_;
            }

            public Builder setS2COverTime(int value) {
                this.bitField0_ |= 0x2;
                this.s2COverTime_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2COverTime() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2COverTime_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class CloseHandUpPush
            extends GeneratedMessage
            implements CloseHandUpPushOrBuilder {
        private static final CloseHandUpPush defaultInstance = new CloseHandUpPush(true);
        private final UnknownFieldSet unknownFields;

        private CloseHandUpPush(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private CloseHandUpPush(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static CloseHandUpPush getDefaultInstance() {
            return defaultInstance;
        }

        public CloseHandUpPush getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private CloseHandUpPush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.msg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_CloseHandUpPush_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_CloseHandUpPush_fieldAccessorTable.ensureFieldAccessorsInitialized(CloseHandUpPush.class, Builder.class);
        }

        public static Parser<CloseHandUpPush> PARSER = (Parser<CloseHandUpPush>) new AbstractParser<CloseHandUpPush>() {
            public FightLevelHandler.CloseHandUpPush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.CloseHandUpPush(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int MSG_FIELD_NUMBER = 2;
        private Object msg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<CloseHandUpPush> getParserForType() {
            return PARSER;
        }

        public boolean hasMsg() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getMsg() {
            Object ref = this.msg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.msg_ = s;
            return s;
        }

        public ByteString getMsgBytes() {
            Object ref = this.msg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.msg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.msg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeBytes(2, getMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(2, getMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static CloseHandUpPush parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (CloseHandUpPush) PARSER.parseFrom(data);
        }

        public static CloseHandUpPush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (CloseHandUpPush) PARSER.parseFrom(data, extensionRegistry);
        }

        public static CloseHandUpPush parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (CloseHandUpPush) PARSER.parseFrom(data);
        }

        public static CloseHandUpPush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (CloseHandUpPush) PARSER.parseFrom(data, extensionRegistry);
        }

        public static CloseHandUpPush parseFrom(InputStream input) throws IOException {
            return (CloseHandUpPush) PARSER.parseFrom(input);
        }

        public static CloseHandUpPush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (CloseHandUpPush) PARSER.parseFrom(input, extensionRegistry);
        }

        public static CloseHandUpPush parseDelimitedFrom(InputStream input) throws IOException {
            return (CloseHandUpPush) PARSER.parseDelimitedFrom(input);
        }

        public static CloseHandUpPush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (CloseHandUpPush) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static CloseHandUpPush parseFrom(CodedInputStream input) throws IOException {
            return (CloseHandUpPush) PARSER.parseFrom(input);
        }

        public static CloseHandUpPush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (CloseHandUpPush) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(CloseHandUpPush prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.CloseHandUpPushOrBuilder {
            private int bitField0_;
            private Object msg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_CloseHandUpPush_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_CloseHandUpPush_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.CloseHandUpPush.class, Builder.class);
            }

            private Builder() {
                this.msg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.msg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.CloseHandUpPush.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.msg_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_CloseHandUpPush_descriptor;
            }

            public FightLevelHandler.CloseHandUpPush getDefaultInstanceForType() {
                return FightLevelHandler.CloseHandUpPush.getDefaultInstance();
            }

            public FightLevelHandler.CloseHandUpPush build() {
                FightLevelHandler.CloseHandUpPush result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.CloseHandUpPush buildPartial() {
                FightLevelHandler.CloseHandUpPush result = new FightLevelHandler.CloseHandUpPush(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.msg_ = this.msg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.CloseHandUpPush)
                    return mergeFrom((FightLevelHandler.CloseHandUpPush) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.CloseHandUpPush other) {
                if (other == FightLevelHandler.CloseHandUpPush.getDefaultInstance()) return this;
                if (other.hasMsg()) {
                    this.bitField0_ |= 0x1;
                    this.msg_ = other.msg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.CloseHandUpPush parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.CloseHandUpPush) FightLevelHandler.CloseHandUpPush.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.CloseHandUpPush) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasMsg() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public String getMsg() {
                Object ref = this.msg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.msg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getMsgBytes() {
                Object ref = this.msg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.msg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.msg_ = value;
                onChanged();
                return this;
            }

            public Builder clearMsg() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.msg_ = FightLevelHandler.CloseHandUpPush.getDefaultInstance().getMsg();
                onChanged();
                return this;
            }

            public Builder setMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.msg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class IllusionPush
            extends GeneratedMessage
            implements IllusionPushOrBuilder {
        private final UnknownFieldSet unknownFields;


        private IllusionPush(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }


        private IllusionPush(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }


        public static IllusionPush getDefaultInstance() {
            return defaultInstance;
        }


        public IllusionPush getDefaultInstanceForType() {
            return defaultInstance;
        }


        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }


        private IllusionPush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 24:
                            this.bitField0_ |= 0x1;
                            this.s2CTodayExp_ = input.readInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 0x2;
                            this.s2CTodayClassexp_ = input.readInt32();
                            break;
                        case 40:
                            this.bitField0_ |= 0x4;
                            this.s2CTodayGold_ = input.readInt32();
                            break;
                        case 48:
                            this.bitField0_ |= 0x8;
                            this.s2CMaxExp_ = input.readInt32();
                            break;
                        case 56:
                            this.bitField0_ |= 0x10;
                            this.s2CMaxClassexp_ = input.readInt32();
                            break;
                        case 64:
                            this.bitField0_ |= 0x20;
                            this.s2CMaxGold_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }


        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_IllusionPush_descriptor;
        }


        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_IllusionPush_fieldAccessorTable.ensureFieldAccessorsInitialized(IllusionPush.class, Builder.class);
        }


        public static Parser<IllusionPush> PARSER = (Parser<IllusionPush>) new AbstractParser<IllusionPush>() {
            public FightLevelHandler.IllusionPush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.IllusionPush(input, extensionRegistry);
            }
        };


        private int bitField0_;


        public static final int S2C_TODAY_EXP_FIELD_NUMBER = 3;


        private int s2CTodayExp_;


        public static final int S2C_TODAY_CLASSEXP_FIELD_NUMBER = 4;


        private int s2CTodayClassexp_;


        public static final int S2C_TODAY_GOLD_FIELD_NUMBER = 5;


        private int s2CTodayGold_;


        public static final int S2C_MAX_EXP_FIELD_NUMBER = 6;


        private int s2CMaxExp_;


        public static final int S2C_MAX_CLASSEXP_FIELD_NUMBER = 7;


        private int s2CMaxClassexp_;


        public static final int S2C_MAX_GOLD_FIELD_NUMBER = 8;


        private int s2CMaxGold_;


        private byte memoizedIsInitialized;


        private int memoizedSerializedSize;


        private static final long serialVersionUID = 0L;


        public Parser<IllusionPush> getParserForType() {
            return PARSER;
        }


        public boolean hasS2CTodayExp() {
            return ((this.bitField0_ & 0x1) == 1);
        }


        public int getS2CTodayExp() {
            return this.s2CTodayExp_;
        }


        public boolean hasS2CTodayClassexp() {
            return ((this.bitField0_ & 0x2) == 2);
        }


        private static final IllusionPush defaultInstance = new IllusionPush(true);

        public int getS2CTodayClassexp() {
            return this.s2CTodayClassexp_;
        }

        public boolean hasS2CTodayGold() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public int getS2CTodayGold() {
            return this.s2CTodayGold_;
        }

        public boolean hasS2CMaxExp() {
            return ((this.bitField0_ & 0x8) == 8);
        }

        public int getS2CMaxExp() {
            return this.s2CMaxExp_;
        }

        public boolean hasS2CMaxClassexp() {
            return ((this.bitField0_ & 0x10) == 16);
        }

        public int getS2CMaxClassexp() {
            return this.s2CMaxClassexp_;
        }

        public boolean hasS2CMaxGold() {
            return ((this.bitField0_ & 0x20) == 32);
        }

        public int getS2CMaxGold() {
            return this.s2CMaxGold_;
        }

        private void initFields() {
            this.s2CTodayExp_ = 0;
            this.s2CTodayClassexp_ = 0;
            this.s2CTodayGold_ = 0;
            this.s2CMaxExp_ = 0;
            this.s2CMaxClassexp_ = 0;
            this.s2CMaxGold_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CTodayExp()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2CTodayClassexp()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2CTodayGold()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(3, this.s2CTodayExp_);
            if ((this.bitField0_ & 0x2) == 2) output.writeInt32(4, this.s2CTodayClassexp_);
            if ((this.bitField0_ & 0x4) == 4) output.writeInt32(5, this.s2CTodayGold_);
            if ((this.bitField0_ & 0x8) == 8) output.writeInt32(6, this.s2CMaxExp_);
            if ((this.bitField0_ & 0x10) == 16) output.writeInt32(7, this.s2CMaxClassexp_);
            if ((this.bitField0_ & 0x20) == 32) output.writeInt32(8, this.s2CMaxGold_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(3, this.s2CTodayExp_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(4, this.s2CTodayClassexp_);
            if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt32Size(5, this.s2CTodayGold_);
            if ((this.bitField0_ & 0x8) == 8) size += CodedOutputStream.computeInt32Size(6, this.s2CMaxExp_);
            if ((this.bitField0_ & 0x10) == 16) size += CodedOutputStream.computeInt32Size(7, this.s2CMaxClassexp_);
            if ((this.bitField0_ & 0x20) == 32) size += CodedOutputStream.computeInt32Size(8, this.s2CMaxGold_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IllusionPush parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (IllusionPush) PARSER.parseFrom(data);
        }

        public static IllusionPush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (IllusionPush) PARSER.parseFrom(data, extensionRegistry);
        }

        public static IllusionPush parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (IllusionPush) PARSER.parseFrom(data);
        }

        public static IllusionPush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (IllusionPush) PARSER.parseFrom(data, extensionRegistry);
        }

        public static IllusionPush parseFrom(InputStream input) throws IOException {
            return (IllusionPush) PARSER.parseFrom(input);
        }

        public static IllusionPush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (IllusionPush) PARSER.parseFrom(input, extensionRegistry);
        }

        public static IllusionPush parseDelimitedFrom(InputStream input) throws IOException {
            return (IllusionPush) PARSER.parseDelimitedFrom(input);
        }

        public static IllusionPush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (IllusionPush) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static IllusionPush parseFrom(CodedInputStream input) throws IOException {
            return (IllusionPush) PARSER.parseFrom(input);
        }

        public static IllusionPush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (IllusionPush) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IllusionPush prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.IllusionPushOrBuilder {
            private int bitField0_;
            private int s2CTodayExp_;
            private int s2CTodayClassexp_;
            private int s2CTodayGold_;
            private int s2CMaxExp_;
            private int s2CMaxClassexp_;
            private int s2CMaxGold_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_IllusionPush_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_IllusionPush_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.IllusionPush.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.IllusionPush.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CTodayExp_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CTodayClassexp_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CTodayGold_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                this.s2CMaxExp_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                this.s2CMaxClassexp_ = 0;
                this.bitField0_ &= 0xFFFFFFEF;
                this.s2CMaxGold_ = 0;
                this.bitField0_ &= 0xFFFFFFDF;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_IllusionPush_descriptor;
            }

            public FightLevelHandler.IllusionPush getDefaultInstanceForType() {
                return FightLevelHandler.IllusionPush.getDefaultInstance();
            }

            public FightLevelHandler.IllusionPush build() {
                FightLevelHandler.IllusionPush result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.IllusionPush buildPartial() {
                FightLevelHandler.IllusionPush result = new FightLevelHandler.IllusionPush(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CTodayExp_ = this.s2CTodayExp_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CTodayClassexp_ = this.s2CTodayClassexp_;
                if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;
                result.s2CTodayGold_ = this.s2CTodayGold_;
                if ((from_bitField0_ & 0x8) == 8) to_bitField0_ |= 0x8;
                result.s2CMaxExp_ = this.s2CMaxExp_;
                if ((from_bitField0_ & 0x10) == 16) to_bitField0_ |= 0x10;
                result.s2CMaxClassexp_ = this.s2CMaxClassexp_;
                if ((from_bitField0_ & 0x20) == 32) to_bitField0_ |= 0x20;
                result.s2CMaxGold_ = this.s2CMaxGold_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.IllusionPush)
                    return mergeFrom((FightLevelHandler.IllusionPush) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.IllusionPush other) {
                if (other == FightLevelHandler.IllusionPush.getDefaultInstance()) return this;
                if (other.hasS2CTodayExp()) setS2CTodayExp(other.getS2CTodayExp());
                if (other.hasS2CTodayClassexp()) setS2CTodayClassexp(other.getS2CTodayClassexp());
                if (other.hasS2CTodayGold()) setS2CTodayGold(other.getS2CTodayGold());
                if (other.hasS2CMaxExp()) setS2CMaxExp(other.getS2CMaxExp());
                if (other.hasS2CMaxClassexp()) setS2CMaxClassexp(other.getS2CMaxClassexp());
                if (other.hasS2CMaxGold()) setS2CMaxGold(other.getS2CMaxGold());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CTodayExp()) return false;
                if (!hasS2CTodayClassexp()) return false;
                if (!hasS2CTodayGold()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.IllusionPush parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.IllusionPush) FightLevelHandler.IllusionPush.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.IllusionPush) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CTodayExp() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CTodayExp() {
                return this.s2CTodayExp_;
            }

            public Builder setS2CTodayExp(int value) {
                this.bitField0_ |= 0x1;
                this.s2CTodayExp_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CTodayExp() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CTodayExp_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CTodayClassexp() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getS2CTodayClassexp() {
                return this.s2CTodayClassexp_;
            }

            public Builder setS2CTodayClassexp(int value) {
                this.bitField0_ |= 0x2;
                this.s2CTodayClassexp_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CTodayClassexp() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CTodayClassexp_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CTodayGold() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public int getS2CTodayGold() {
                return this.s2CTodayGold_;
            }

            public Builder setS2CTodayGold(int value) {
                this.bitField0_ |= 0x4;
                this.s2CTodayGold_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CTodayGold() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.s2CTodayGold_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMaxExp() {
                return ((this.bitField0_ & 0x8) == 8);
            }

            public int getS2CMaxExp() {
                return this.s2CMaxExp_;
            }

            public Builder setS2CMaxExp(int value) {
                this.bitField0_ |= 0x8;
                this.s2CMaxExp_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMaxExp() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.s2CMaxExp_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMaxClassexp() {
                return ((this.bitField0_ & 0x10) == 16);
            }

            public int getS2CMaxClassexp() {
                return this.s2CMaxClassexp_;
            }

            public Builder setS2CMaxClassexp(int value) {
                this.bitField0_ |= 0x10;
                this.s2CMaxClassexp_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMaxClassexp() {
                this.bitField0_ &= 0xFFFFFFEF;
                this.s2CMaxClassexp_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMaxGold() {
                return ((this.bitField0_ & 0x20) == 32);
            }

            public int getS2CMaxGold() {
                return this.s2CMaxGold_;
            }

            public Builder setS2CMaxGold(int value) {
                this.bitField0_ |= 0x20;
                this.s2CMaxGold_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMaxGold() {
                this.bitField0_ &= 0xFFFFFFDF;
                this.s2CMaxGold_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class Illusion2Push
            extends GeneratedMessage
            implements Illusion2PushOrBuilder {
        private static final Illusion2Push defaultInstance = new Illusion2Push(true);
        private final UnknownFieldSet unknownFields;

        private Illusion2Push(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private Illusion2Push(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static Illusion2Push getDefaultInstance() {
            return defaultInstance;
        }

        public Illusion2Push getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Illusion2Push(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CTodayLv1_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.s2CTodayLv2_ = input.readInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.s2CTodayLv3_ = input.readInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 0x8;
                            this.s2CMaxNum_ = input.readInt32();
                            break;
                        case 42:
                            if ((mutable_bitField0_ & 0x10) != 16) {
                                this.itemInfo_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x10;
                            }
                            this.itemInfo_.add(input.readMessage(FightLevelHandler.MJItemMax.PARSER, extensionRegistry));
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x10) == 16) this.itemInfo_ = Collections.unmodifiableList(this.itemInfo_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return FightLevelHandler.internal_static_pomelo_area_Illusion2Push_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return FightLevelHandler.internal_static_pomelo_area_Illusion2Push_fieldAccessorTable.ensureFieldAccessorsInitialized(Illusion2Push.class, Builder.class);
        }

        public static Parser<Illusion2Push> PARSER = (Parser<Illusion2Push>) new AbstractParser<Illusion2Push>() {
            public FightLevelHandler.Illusion2Push parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new FightLevelHandler.Illusion2Push(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_TODAY_LV1_FIELD_NUMBER = 1;
        private int s2CTodayLv1_;
        public static final int S2C_TODAY_LV2_FIELD_NUMBER = 2;
        private int s2CTodayLv2_;
        public static final int S2C_TODAY_LV3_FIELD_NUMBER = 3;
        private int s2CTodayLv3_;
        public static final int S2C_MAX_NUM_FIELD_NUMBER = 4;
        private int s2CMaxNum_;
        public static final int ITEM_INFO_FIELD_NUMBER = 5;
        private List<FightLevelHandler.MJItemMax> itemInfo_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<Illusion2Push> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CTodayLv1() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CTodayLv1() {
            return this.s2CTodayLv1_;
        }

        public boolean hasS2CTodayLv2() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getS2CTodayLv2() {
            return this.s2CTodayLv2_;
        }

        static {
            defaultInstance.initFields();
        }

        public boolean hasS2CTodayLv3() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public int getS2CTodayLv3() {
            return this.s2CTodayLv3_;
        }

        public boolean hasS2CMaxNum() {
            return ((this.bitField0_ & 0x8) == 8);
        }

        public int getS2CMaxNum() {
            return this.s2CMaxNum_;
        }

        public List<FightLevelHandler.MJItemMax> getItemInfoList() {
            return this.itemInfo_;
        }

        public List<? extends FightLevelHandler.MJItemMaxOrBuilder> getItemInfoOrBuilderList() {
            return (List) this.itemInfo_;
        }

        public int getItemInfoCount() {
            return this.itemInfo_.size();
        }

        public FightLevelHandler.MJItemMax getItemInfo(int index) {
            return this.itemInfo_.get(index);
        }

        public FightLevelHandler.MJItemMaxOrBuilder getItemInfoOrBuilder(int index) {
            return this.itemInfo_.get(index);
        }

        private void initFields() {
            this.s2CTodayLv1_ = 0;
            this.s2CTodayLv2_ = 0;
            this.s2CTodayLv3_ = 0;
            this.s2CMaxNum_ = 0;
            this.itemInfo_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasS2CTodayLv1()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2CTodayLv2()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2CTodayLv3()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2CMaxNum()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getItemInfoCount(); i++) {
                if (!getItemInfo(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeInt32(1, this.s2CTodayLv1_);
            if ((this.bitField0_ & 0x2) == 2)
                output.writeInt32(2, this.s2CTodayLv2_);
            if ((this.bitField0_ & 0x4) == 4)
                output.writeInt32(3, this.s2CTodayLv3_);
            if ((this.bitField0_ & 0x8) == 8)
                output.writeInt32(4, this.s2CMaxNum_);
            for (int i = 0; i < this.itemInfo_.size(); i++)
                output.writeMessage(5, (MessageLite) this.itemInfo_.get(i));
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeInt32Size(1, this.s2CTodayLv1_);
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeInt32Size(2, this.s2CTodayLv2_);
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeInt32Size(3, this.s2CTodayLv3_);
            if ((this.bitField0_ & 0x8) == 8)
                size += CodedOutputStream.computeInt32Size(4, this.s2CMaxNum_);
            for (int i = 0; i < this.itemInfo_.size(); i++)
                size += CodedOutputStream.computeMessageSize(5, (MessageLite) this.itemInfo_.get(i));
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static Illusion2Push parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (Illusion2Push) PARSER.parseFrom(data);
        }

        public static Illusion2Push parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (Illusion2Push) PARSER.parseFrom(data, extensionRegistry);
        }

        public static Illusion2Push parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (Illusion2Push) PARSER.parseFrom(data);
        }

        public static Illusion2Push parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (Illusion2Push) PARSER.parseFrom(data, extensionRegistry);
        }

        public static Illusion2Push parseFrom(InputStream input) throws IOException {
            return (Illusion2Push) PARSER.parseFrom(input);
        }

        public static Illusion2Push parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (Illusion2Push) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Illusion2Push parseDelimitedFrom(InputStream input) throws IOException {
            return (Illusion2Push) PARSER.parseDelimitedFrom(input);
        }

        public static Illusion2Push parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (Illusion2Push) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static Illusion2Push parseFrom(CodedInputStream input) throws IOException {
            return (Illusion2Push) PARSER.parseFrom(input);
        }

        public static Illusion2Push parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (Illusion2Push) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(Illusion2Push prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements FightLevelHandler.Illusion2PushOrBuilder {
            private int bitField0_;
            private int s2CTodayLv1_;
            private int s2CTodayLv2_;
            private int s2CTodayLv3_;
            private int s2CMaxNum_;
            private List<FightLevelHandler.MJItemMax> itemInfo_;
            private RepeatedFieldBuilder<FightLevelHandler.MJItemMax, FightLevelHandler.MJItemMax.Builder, FightLevelHandler.MJItemMaxOrBuilder> itemInfoBuilder_;

            public static final Descriptors.Descriptor getDescriptor() {
                return FightLevelHandler.internal_static_pomelo_area_Illusion2Push_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return FightLevelHandler.internal_static_pomelo_area_Illusion2Push_fieldAccessorTable.ensureFieldAccessorsInitialized(FightLevelHandler.Illusion2Push.class, Builder.class);
            }

            private Builder() {
                this.itemInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.itemInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (FightLevelHandler.Illusion2Push.alwaysUseFieldBuilders)
                    getItemInfoFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CTodayLv1_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CTodayLv2_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CTodayLv3_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                this.s2CMaxNum_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                if (this.itemInfoBuilder_ == null) {
                    this.itemInfo_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFEF;
                } else {
                    this.itemInfoBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return FightLevelHandler.internal_static_pomelo_area_Illusion2Push_descriptor;
            }

            public FightLevelHandler.Illusion2Push getDefaultInstanceForType() {
                return FightLevelHandler.Illusion2Push.getDefaultInstance();
            }

            public FightLevelHandler.Illusion2Push build() {
                FightLevelHandler.Illusion2Push result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public FightLevelHandler.Illusion2Push buildPartial() {
                FightLevelHandler.Illusion2Push result = new FightLevelHandler.Illusion2Push(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.s2CTodayLv1_ = this.s2CTodayLv1_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.s2CTodayLv2_ = this.s2CTodayLv2_;
                if ((from_bitField0_ & 0x4) == 4)
                    to_bitField0_ |= 0x4;
                result.s2CTodayLv3_ = this.s2CTodayLv3_;
                if ((from_bitField0_ & 0x8) == 8)
                    to_bitField0_ |= 0x8;
                result.s2CMaxNum_ = this.s2CMaxNum_;
                if (this.itemInfoBuilder_ == null) {
                    if ((this.bitField0_ & 0x10) == 16) {
                        this.itemInfo_ = Collections.unmodifiableList(this.itemInfo_);
                        this.bitField0_ &= 0xFFFFFFEF;
                    }
                    result.itemInfo_ = this.itemInfo_;
                } else {
                    result.itemInfo_ = this.itemInfoBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof FightLevelHandler.Illusion2Push)
                    return mergeFrom((FightLevelHandler.Illusion2Push) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(FightLevelHandler.Illusion2Push other) {
                if (other == FightLevelHandler.Illusion2Push.getDefaultInstance())
                    return this;
                if (other.hasS2CTodayLv1())
                    setS2CTodayLv1(other.getS2CTodayLv1());
                if (other.hasS2CTodayLv2())
                    setS2CTodayLv2(other.getS2CTodayLv2());
                if (other.hasS2CTodayLv3())
                    setS2CTodayLv3(other.getS2CTodayLv3());
                if (other.hasS2CMaxNum())
                    setS2CMaxNum(other.getS2CMaxNum());
                if (this.itemInfoBuilder_ == null) {
                    if (!other.itemInfo_.isEmpty()) {
                        if (this.itemInfo_.isEmpty()) {
                            this.itemInfo_ = other.itemInfo_;
                            this.bitField0_ &= 0xFFFFFFEF;
                        } else {
                            ensureItemInfoIsMutable();
                            this.itemInfo_.addAll(other.itemInfo_);
                        }
                        onChanged();
                    }
                } else if (!other.itemInfo_.isEmpty()) {
                    if (this.itemInfoBuilder_.isEmpty()) {
                        this.itemInfoBuilder_.dispose();
                        this.itemInfoBuilder_ = null;
                        this.itemInfo_ = other.itemInfo_;
                        this.bitField0_ &= 0xFFFFFFEF;
                        this.itemInfoBuilder_ = FightLevelHandler.Illusion2Push.alwaysUseFieldBuilders ? getItemInfoFieldBuilder() : null;
                    } else {
                        this.itemInfoBuilder_.addAllMessages(other.itemInfo_);
                    }
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CTodayLv1())
                    return false;
                if (!hasS2CTodayLv2())
                    return false;
                if (!hasS2CTodayLv3())
                    return false;
                if (!hasS2CMaxNum())
                    return false;
                for (int i = 0; i < getItemInfoCount(); i++) {
                    if (!getItemInfo(i).isInitialized())
                        return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                FightLevelHandler.Illusion2Push parsedMessage = null;
                try {
                    parsedMessage = (FightLevelHandler.Illusion2Push) FightLevelHandler.Illusion2Push.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (FightLevelHandler.Illusion2Push) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CTodayLv1() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CTodayLv1() {
                return this.s2CTodayLv1_;
            }

            public Builder setS2CTodayLv1(int value) {
                this.bitField0_ |= 0x1;
                this.s2CTodayLv1_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CTodayLv1() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CTodayLv1_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CTodayLv2() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getS2CTodayLv2() {
                return this.s2CTodayLv2_;
            }

            public Builder setS2CTodayLv2(int value) {
                this.bitField0_ |= 0x2;
                this.s2CTodayLv2_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CTodayLv2() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CTodayLv2_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CTodayLv3() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public int getS2CTodayLv3() {
                return this.s2CTodayLv3_;
            }

            public Builder setS2CTodayLv3(int value) {
                this.bitField0_ |= 0x4;
                this.s2CTodayLv3_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CTodayLv3() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.s2CTodayLv3_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMaxNum() {
                return ((this.bitField0_ & 0x8) == 8);
            }

            public int getS2CMaxNum() {
                return this.s2CMaxNum_;
            }

            public Builder setS2CMaxNum(int value) {
                this.bitField0_ |= 0x8;
                this.s2CMaxNum_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMaxNum() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.s2CMaxNum_ = 0;
                onChanged();
                return this;
            }

            private void ensureItemInfoIsMutable() {
                if ((this.bitField0_ & 0x10) != 16) {
                    this.itemInfo_ = new ArrayList<>(this.itemInfo_);
                    this.bitField0_ |= 0x10;
                }
            }

            public List<FightLevelHandler.MJItemMax> getItemInfoList() {
                if (this.itemInfoBuilder_ == null)
                    return Collections.unmodifiableList(this.itemInfo_);
                return this.itemInfoBuilder_.getMessageList();
            }

            public int getItemInfoCount() {
                if (this.itemInfoBuilder_ == null)
                    return this.itemInfo_.size();
                return this.itemInfoBuilder_.getCount();
            }

            public FightLevelHandler.MJItemMax getItemInfo(int index) {
                if (this.itemInfoBuilder_ == null)
                    return this.itemInfo_.get(index);
                return (FightLevelHandler.MJItemMax) this.itemInfoBuilder_.getMessage(index);
            }

            public Builder setItemInfo(int index, FightLevelHandler.MJItemMax value) {
                if (this.itemInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureItemInfoIsMutable();
                    this.itemInfo_.set(index, value);
                    onChanged();
                } else {
                    this.itemInfoBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setItemInfo(int index, FightLevelHandler.MJItemMax.Builder builderForValue) {
                if (this.itemInfoBuilder_ == null) {
                    ensureItemInfoIsMutable();
                    this.itemInfo_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.itemInfoBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addItemInfo(FightLevelHandler.MJItemMax value) {
                if (this.itemInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureItemInfoIsMutable();
                    this.itemInfo_.add(value);
                    onChanged();
                } else {
                    this.itemInfoBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addItemInfo(int index, FightLevelHandler.MJItemMax value) {
                if (this.itemInfoBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureItemInfoIsMutable();
                    this.itemInfo_.add(index, value);
                    onChanged();
                } else {
                    this.itemInfoBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addItemInfo(FightLevelHandler.MJItemMax.Builder builderForValue) {
                if (this.itemInfoBuilder_ == null) {
                    ensureItemInfoIsMutable();
                    this.itemInfo_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.itemInfoBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addItemInfo(int index, FightLevelHandler.MJItemMax.Builder builderForValue) {
                if (this.itemInfoBuilder_ == null) {
                    ensureItemInfoIsMutable();
                    this.itemInfo_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.itemInfoBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllItemInfo(Iterable<? extends FightLevelHandler.MJItemMax> values) {
                if (this.itemInfoBuilder_ == null) {
                    ensureItemInfoIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.itemInfo_);
                    onChanged();
                } else {
                    this.itemInfoBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearItemInfo() {
                if (this.itemInfoBuilder_ == null) {
                    this.itemInfo_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFEF;
                    onChanged();
                } else {
                    this.itemInfoBuilder_.clear();
                }
                return this;
            }

            public Builder removeItemInfo(int index) {
                if (this.itemInfoBuilder_ == null) {
                    ensureItemInfoIsMutable();
                    this.itemInfo_.remove(index);
                    onChanged();
                } else {
                    this.itemInfoBuilder_.remove(index);
                }
                return this;
            }

            public FightLevelHandler.MJItemMax.Builder getItemInfoBuilder(int index) {
                return (FightLevelHandler.MJItemMax.Builder) getItemInfoFieldBuilder().getBuilder(index);
            }

            public FightLevelHandler.MJItemMaxOrBuilder getItemInfoOrBuilder(int index) {
                if (this.itemInfoBuilder_ == null)
                    return this.itemInfo_.get(index);
                return (FightLevelHandler.MJItemMaxOrBuilder) this.itemInfoBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends FightLevelHandler.MJItemMaxOrBuilder> getItemInfoOrBuilderList() {
                if (this.itemInfoBuilder_ != null)
                    return this.itemInfoBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.itemInfo_);
            }

            public FightLevelHandler.MJItemMax.Builder addItemInfoBuilder() {
                return (FightLevelHandler.MJItemMax.Builder) getItemInfoFieldBuilder().addBuilder(FightLevelHandler.MJItemMax.getDefaultInstance());
            }

            public FightLevelHandler.MJItemMax.Builder addItemInfoBuilder(int index) {
                return (FightLevelHandler.MJItemMax.Builder) getItemInfoFieldBuilder().addBuilder(index, FightLevelHandler.MJItemMax.getDefaultInstance());
            }

            public List<FightLevelHandler.MJItemMax.Builder> getItemInfoBuilderList() {
                return getItemInfoFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<FightLevelHandler.MJItemMax, FightLevelHandler.MJItemMax.Builder, FightLevelHandler.MJItemMaxOrBuilder> getItemInfoFieldBuilder() {
                if (this.itemInfoBuilder_ == null) {
                    this.itemInfoBuilder_ = new RepeatedFieldBuilder(this.itemInfo_, ((this.bitField0_ & 0x10) == 16), getParentForChildren(), isClean());
                    this.itemInfo_ = null;
                }
                return this.itemInfoBuilder_;
            }
        }
    }

    public static Descriptors.FileDescriptor getDescriptor() {
        return descriptor;
    }


    static {
        String[] descriptorData = {"\n\027fightLevelHandler.proto\022\013pomelo.area\032\fcommon.proto\032\nitem.proto\032\fplayer.proto\"q\n\020FubenAwardRecord\022*\n\006player\030\001 \002(\0132\032.pomelo.player.PlayerBasic\022#\n\004item\030\002 \002(\0132\025.pomelo.item.MiniItem\022\f\n\004time\030\003 \002(\003\".\n\013MonsterInfo\022\021\n\tmonsterId\030\001 \002(\005\022\f\n\004time\030\002 \002(\003\"Z\n\tFubenInfo\022\r\n\005mapId\030\001 \002(\005\022\023\n\013remainTimes\030\002 \002(\005\022)\n\nawardItems\030\003 \003(\0132\025.pomelo.item.MiniItem\"~\n\020InviteFriendInfo\022\n\n\002id\030\001 \002(\t\022\f\n\004name\030\002 \002(\t\022\r\n\005level\030\003 \002(\005\022\013\n\003pr", "o\030\004 \002(\005\022\020\n\bareaName\030\005 \002(\t\022\r\n\005state\030\006 \002(\005\022\023\n\013invalidTime\030\007 \002(\005\"/\n\020FubenListRequest\022\r\n\005mapId\030\001 \002(\005\022\f\n\004type\030\002 \002(\005\"\001\n\021FubenListResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022(\n\bs2c_list\030\003 \003(\0132\026.pomelo.area.FubenInfo\022\020\n\bs2c_hard\030\004 \001(\005\022\022\n\ns2c_across\030\005 \001(\005\",\n\023EnterDungeonRequest\022\025\n\rc2s_dungeonId\030\001 \002(\005\"9\n\024EnterDungeonResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"C\n\030ReplyEnterDungeonRequest\022\020\n\bc2s_type\030\001 \002(\005\022\025", "\n\rc2s_dungeonId\030\002 \002(\005\">\n\031ReplyEnterDungeonResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"\025\n\023LeaveDungeonRequest\"9\n\024LeaveDungeonResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"G\n\tMJItemMax\022\024\n\fs2c_today_ml\030\001 \002(\005\022\022\n\ns2c_max_ml\030\002 \002(\005\022\020\n\bitemCode\030\003 \002(\t\"s\n\007MapInfo\022\r\n\005mapId\030\001 \002(\005\022\025\n\rbornBeginTime\030\002 \002(\003\022\023\n\013bornEndTime\030\003 \002(\003\022-\n\013monsterInfo\030\004 \003(\0132\030.pomelo.area.MonsterInfo\"B\n\nMemberData\022\n\n\002id\030\001 \002(\t\022\f\n\004name\030\002 \002(\t\022\013\n", "\003pro\030\003 \002(\005\022\r\n\005level\030\004 \002(\005\"\026\n\024WorldBossListRequest\"b\n\025WorldBossListResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022&\n\bmapInfos\030\003 \003(\0132\024.pomelo.area.MapInfo\"%\n\021PalaceListRequest\022\020\n\bs2c_type\030\001 \002(\005\"<\n\nPalaceInfo\022\r\n\005mapId\030\001 \002(\005\022\021\n\tmonsterId\030\002 \002(\005\022\f\n\004time\030\003 \002(\003\"i\n\022PalaceListResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\0220\n\017s2c_palaceInfos\030\003 \003(\0132\027.pomelo.area.PalaceInfo\"+\n\025EnterWorldBossRequest\022\022\n\ns2c_areaId\030\001 \002", "(\005\";\n\026EnterWorldBossResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"D\n\027GetMonsterLeaderRequest\022\025\n\rs2c_monsterId\030\001 \002(\005\022\022\n\ns2c_areaId\030\002 \002(\005\"³\001\n\030GetMonsterLeaderResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022,\n\rs2c_dropItems\030\003 \003(\0132\025.pomelo.item.MiniItem\022\024\n\fs2c_reqLevel\030\004 \002(\005\022\026\n\016s2c_reqUpLevel\030\005 \002(\005\022\030\n\020s2c_refreshPoint\030\006 \002(\t\"P\n\bBossInfo\022\r\n\005mapId\030\001 \002(\005\022\021\n\tmonsterId\030\002 \002(\005\022\f\n\004time\030\003 \002(\003\022\024\n\frefreshPoint\030\004 \002(\t\"\024\n", "\022GetBossInfoRequest\"f\n\023GetBossInfoResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022,\n\rs2c_bossInfos\030\003 \003(\0132\025.pomelo.area.BossInfo\"F\n\bRankInfo\022*\n\006player\030\001 \002(\0132\032.pomelo.player.PlayerBasic\022\016\n\006damage\030\002 \002(\005\"\032\n\030GetBossDamageRankRequest\"\001\n\031GetBossDamageRankResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022,\n\rs2c_rankInfos\030\003 \003(\0132\025.pomelo.area.RankInfo\022\025\n\rs2c_ownDamage\030\004 \002(\005\022\023\n\013s2c_ownRank\030\005 \002(\005\"\027\n\025GetLllsionInfoRequ", "est\"Ë\001\n\026GetLllsionInfoResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022\025\n\rs2c_today_exp\030\003 \002(\005\022\032\n\022s2c_today_classexp\030\004 \002(\005\022\026\n\016s2c_today_gold\030\005 \002(\005\022\023\n\013s2c_max_exp\030\006 \001(\005\022\030\n\020s2c_max_classexp\030\007 \001(\005\022\024\n\fs2c_max_gold\030\b \001(\005\"%\n\023EnterLllsionRequest\022\016\n\006c2s_id\030\001 \002(\005\"9\n\024EnterLllsionResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"\033\n\031GetLllsionBossInfoRequest\"6\n\017IllsionBossInfo\022\n\n\002id\030\001 \002(\005\022\027\n\017nextRefreshTime\030\002 \001(\003\"p\n\032GetL", "llsionBossInfoResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022/\n\tbossInfos\030\003 \003(\0132\034.pomelo.area.IllsionBossInfo\")\n\027EnterLllsionBossRequest\022\016\n\006c2s_id\030\001 \002(\005\"=\n\030EnterLllsionBossResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"\027\n\025GetBenifitableRequest\"P\n\026GetBenifitableResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022\023\n\013benifitable\030\003 \001(\b\"\030\n\026GetLllsion2InfoRequest\"Á\001\n\027GetLllsion2InfoResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_m", "sg\030\002 \001(\t\022\023\n\013s2c_max_num\030\003 \002(\005\022\025\n\rs2c_today_lv1\030\004 \002(\005\022\025\n\rs2c_today_lv2\030\005 \002(\005\022\025\n\rs2c_today_lv3\030\006 \002(\005\022)\n\titem_info\030\007 \003(\0132\026.pomelo.area.MJItemMax\"\026\n\024EnterLllsion2Request\":\n\025EnterLllsion2Response\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"!\n\020AddProfitRequest\022\r\n\005mapId\030\001 \002(\005\"6\n\021AddProfitResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"\001\n\027OnConfirmEnterFubenPush\022\017\n\007s2c_msg\030\002 \001(\t\022\023\n\013s2c_fubenId\030\003 \002(\005\022\025\n\rs2c_over_time\030", "\004 \002(\005\022\024\n\fs2c_leaderId\030\005 \002(\t\022/\n\016s2c_memberData\030\006 \003(\0132\027.pomelo.area.MemberData\"_\n!OnMemberEnterFubenStateChangePush\022\017\n\007s2c_msg\030\002 \001(\t\022\024\n\fs2c_playerId\030\003 \002(\t\022\023\n\013s2c_isReady\030\004 \002(\005\":\n\020OnFubenClosePush\022\017\n\007s2c_msg\030\002 \001(\t\022\025\n\rs2c_over_time\030\003 \002(\005\"\036\n\017CloseHandUpPush\022\013\n\003msg\030\002 \001(\t\"\001\n\fIllusionPush\022\025\n\rs2c_today_exp\030\003 \002(\005\022\032\n\022s2c_today_classexp\030\004 \002(\005\022\026\n\016s2c_today_gold\030\005 \002(\005\022\023\n\013s2c_max_exp\030\006 \001(\005\022\030\n\020s2c_max_classexp\030\007", " \001(\005\022\024\n\fs2c_max_gold\030\b \001(\005\"\001\n\rIllusion2Push\022\025\n\rs2c_today_lv1\030\001 \002(\005\022\025\n\rs2c_today_lv2\030\002 \002(\005\022\025\n\rs2c_today_lv3\030\003 \002(\005\022\023\n\013s2c_max_num\030\004 \002(\005\022)\n\titem_info\030\005 \003(\0132\026.pomelo.area.MJItemMax2Ù\r\n\021fightLevelHandler\022Q\n\020fubenListRequest\022\035.pomelo.area.FubenListRequest\032\036.pomelo.area.FubenListResponse\022Z\n\023enterDungeonRequest\022 .pomelo.area.EnterDungeonRequest\032!.pomelo.area.EnterDungeonResponse\022i\n\030replyEnterDungeonReque", "st\022%.pomelo.area.ReplyEnterDungeonRequest\032&.pomelo.area.ReplyEnterDungeonResponse\022Z\n\023leaveDungeonRequest\022 .pomelo.area.LeaveDungeonRequest\032!.pomelo.area.LeaveDungeonResponse\022]\n\024worldBossListRequest\022!.pomelo.area.WorldBossListRequest\032\".pomelo.area.WorldBossListResponse\022`\n\025enterWorldBossRequest\022\".pomelo.area.EnterWorldBossRequest\032#.pomelo.area.EnterWorldBossResponse\022f\n\027getMonsterLeaderRequest\022$.pome", "lo.area.GetMonsterLeaderRequest\032%.pomelo.area.GetMonsterLeaderResponse\022T\n\021palaceListRequest\022\036.pomelo.area.PalaceListRequest\032\037.pomelo.area.PalaceListResponse\022W\n\022getBossInfoRequest\022\037.pomelo.area.GetBossInfoRequest\032 .pomelo.area.GetBossInfoResponse\022i\n\030getBossDamageRankRequest\022%.pomelo.area.GetBossDamageRankRequest\032&.pomelo.area.GetBossDamageRankResponse\022`\n\025getLllsionInfoRequest\022\".pomelo.area.GetLllsi", "onInfoRequest\032#.pomelo.area.GetLllsionInfoResponse\022Z\n\023enterLllsionRequest\022 .pomelo.area.EnterLllsionRequest\032!.pomelo.area.EnterLllsionResponse\022l\n\031getLllsionBossInfoRequest\022&.pomelo.area.GetLllsionBossInfoRequest\032'.pomelo.area.GetLllsionBossInfoResponse\022f\n\027enterLllsionBossRequest\022$.pomelo.area.EnterLllsionBossRequest\032%.pomelo.area.EnterLllsionBossResponse\022`\n\025getBenifitableRequest\022\".pomelo.area.GetB", "enifitableRequest\032#.pomelo.area.GetBenifitableResponse\022c\n\026getLllsion2InfoRequest\022#.pomelo.area.GetLllsion2InfoRequest\032$.pomelo.area.GetLllsion2InfoResponse\022]\n\024enterLllsion2Request\022!.pomelo.area.EnterLllsion2Request\032\".pomelo.area.EnterLllsion2Response\022Q\n\020addProfitRequest\022\035.pomelo.area.AddProfitRequest\032\036.pomelo.area.AddProfitResponse2¶\003\n\016fightLevelPush\022M\n\027onConfirmEnterFubenPush\022$.pomelo.area.OnConf", "irmEnterFubenPush\032\f.pomelo.Void\022a\n!onMemberEnterFubenStateChangePush\022..pomelo.area.OnMemberEnterFubenStateChangePush\032\f.pomelo.Void\022?\n\020onFubenClosePush\022\035.pomelo.area.OnFubenClosePush\032\f.pomelo.Void\022=\n\017closeHandUpPush\022\034.pomelo.area.CloseHandUpPush\032\f.pomelo.Void\0227\n\fillusionPush\022\031.pomelo.area.IllusionPush\032\f.pomelo.Void\0229\n\rillusion2Push\022\032.pomelo.area.Illusion2Push\032\f.pomelo.Void"};


        Descriptors.FileDescriptor.InternalDescriptorAssigner assigner = new Descriptors.FileDescriptor.InternalDescriptorAssigner() {
            public ExtensionRegistry assignDescriptors(Descriptors.FileDescriptor root) {
                FightLevelHandler.descriptor = root;
                return null;
            }
        };

        Descriptors.FileDescriptor.internalBuildGeneratedFileFrom(descriptorData, new Descriptors.FileDescriptor[]{

                Common.getDescriptor(),
                ItemOuterClass.getDescriptor(),
                PlayerOuterClass.getDescriptor()}, assigner);
    }

    private static final Descriptors.Descriptor internal_static_pomelo_area_FubenAwardRecord_descriptor = getDescriptor().getMessageTypes().get(0);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FubenAwardRecord_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FubenAwardRecord_descriptor, new String[]{"Player", "Item", "Time"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_MonsterInfo_descriptor = getDescriptor().getMessageTypes().get(1);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_MonsterInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_MonsterInfo_descriptor, new String[]{"MonsterId", "Time"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_FubenInfo_descriptor = getDescriptor().getMessageTypes().get(2);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FubenInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FubenInfo_descriptor, new String[]{"MapId", "RemainTimes", "AwardItems"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_InviteFriendInfo_descriptor = getDescriptor().getMessageTypes().get(3);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_InviteFriendInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_InviteFriendInfo_descriptor, new String[]{"Id", "Name", "Level", "Pro", "AreaName", "State", "InvalidTime"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_FubenListRequest_descriptor = getDescriptor().getMessageTypes().get(4);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FubenListRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FubenListRequest_descriptor, new String[]{"MapId", "Type"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_FubenListResponse_descriptor = getDescriptor().getMessageTypes().get(5);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FubenListResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FubenListResponse_descriptor, new String[]{"S2CCode", "S2CMsg", "S2CList", "S2CHard", "S2CAcross"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_EnterDungeonRequest_descriptor = getDescriptor().getMessageTypes().get(6);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_EnterDungeonRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_EnterDungeonRequest_descriptor, new String[]{"C2SDungeonId"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_EnterDungeonResponse_descriptor = getDescriptor().getMessageTypes().get(7);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_EnterDungeonResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_EnterDungeonResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_ReplyEnterDungeonRequest_descriptor = getDescriptor().getMessageTypes().get(8);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ReplyEnterDungeonRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ReplyEnterDungeonRequest_descriptor, new String[]{"C2SType", "C2SDungeonId"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_ReplyEnterDungeonResponse_descriptor = getDescriptor().getMessageTypes().get(9);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ReplyEnterDungeonResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ReplyEnterDungeonResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_LeaveDungeonRequest_descriptor = getDescriptor().getMessageTypes().get(10);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_LeaveDungeonRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_LeaveDungeonRequest_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_LeaveDungeonResponse_descriptor = getDescriptor().getMessageTypes().get(11);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_LeaveDungeonResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_LeaveDungeonResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_MJItemMax_descriptor = getDescriptor().getMessageTypes().get(12);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_MJItemMax_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_MJItemMax_descriptor, new String[]{"S2CTodayMl", "S2CMaxMl", "ItemCode"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_MapInfo_descriptor = getDescriptor().getMessageTypes().get(13);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_MapInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_MapInfo_descriptor, new String[]{"MapId", "BornBeginTime", "BornEndTime", "MonsterInfo"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_MemberData_descriptor = getDescriptor().getMessageTypes().get(14);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_MemberData_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_MemberData_descriptor, new String[]{"Id", "Name", "Pro", "Level"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_WorldBossListRequest_descriptor = getDescriptor().getMessageTypes().get(15);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_WorldBossListRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_WorldBossListRequest_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_WorldBossListResponse_descriptor = getDescriptor().getMessageTypes().get(16);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_WorldBossListResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_WorldBossListResponse_descriptor, new String[]{"S2CCode", "S2CMsg", "MapInfos"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_PalaceListRequest_descriptor = getDescriptor().getMessageTypes().get(17);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_PalaceListRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_PalaceListRequest_descriptor, new String[]{"S2CType"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_PalaceInfo_descriptor = getDescriptor().getMessageTypes().get(18);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_PalaceInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_PalaceInfo_descriptor, new String[]{"MapId", "MonsterId", "Time"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_PalaceListResponse_descriptor = getDescriptor().getMessageTypes().get(19);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_PalaceListResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_PalaceListResponse_descriptor, new String[]{"S2CCode", "S2CMsg", "S2CPalaceInfos"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_EnterWorldBossRequest_descriptor = getDescriptor().getMessageTypes().get(20);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_EnterWorldBossRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_EnterWorldBossRequest_descriptor, new String[]{"S2CAreaId"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_EnterWorldBossResponse_descriptor = getDescriptor().getMessageTypes().get(21);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_EnterWorldBossResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_EnterWorldBossResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetMonsterLeaderRequest_descriptor = getDescriptor().getMessageTypes().get(22);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetMonsterLeaderRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetMonsterLeaderRequest_descriptor, new String[]{"S2CMonsterId", "S2CAreaId"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetMonsterLeaderResponse_descriptor = getDescriptor().getMessageTypes().get(23);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetMonsterLeaderResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetMonsterLeaderResponse_descriptor, new String[]{"S2CCode", "S2CMsg", "S2CDropItems", "S2CReqLevel", "S2CReqUpLevel", "S2CRefreshPoint"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_BossInfo_descriptor = getDescriptor().getMessageTypes().get(24);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_BossInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_BossInfo_descriptor, new String[]{"MapId", "MonsterId", "Time", "RefreshPoint"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetBossInfoRequest_descriptor = getDescriptor().getMessageTypes().get(25);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetBossInfoRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetBossInfoRequest_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetBossInfoResponse_descriptor = getDescriptor().getMessageTypes().get(26);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetBossInfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetBossInfoResponse_descriptor, new String[]{"S2CCode", "S2CMsg", "S2CBossInfos"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_RankInfo_descriptor = getDescriptor().getMessageTypes().get(27);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_RankInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_RankInfo_descriptor, new String[]{"Player", "Damage"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetBossDamageRankRequest_descriptor = getDescriptor().getMessageTypes().get(28);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetBossDamageRankRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetBossDamageRankRequest_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetBossDamageRankResponse_descriptor = getDescriptor().getMessageTypes().get(29);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetBossDamageRankResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetBossDamageRankResponse_descriptor, new String[]{"S2CCode", "S2CMsg", "S2CRankInfos", "S2COwnDamage", "S2COwnRank"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetLllsionInfoRequest_descriptor = getDescriptor().getMessageTypes().get(30);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetLllsionInfoRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetLllsionInfoRequest_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetLllsionInfoResponse_descriptor = getDescriptor().getMessageTypes().get(31);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetLllsionInfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetLllsionInfoResponse_descriptor, new String[]{"S2CCode", "S2CMsg", "S2CTodayExp", "S2CTodayClassexp", "S2CTodayGold", "S2CMaxExp", "S2CMaxClassexp", "S2CMaxGold"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_EnterLllsionRequest_descriptor = getDescriptor().getMessageTypes().get(32);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_EnterLllsionRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_EnterLllsionRequest_descriptor, new String[]{"C2SId"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_EnterLllsionResponse_descriptor = getDescriptor().getMessageTypes().get(33);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_EnterLllsionResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_EnterLllsionResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetLllsionBossInfoRequest_descriptor = getDescriptor().getMessageTypes().get(34);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetLllsionBossInfoRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetLllsionBossInfoRequest_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_IllsionBossInfo_descriptor = getDescriptor().getMessageTypes().get(35);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_IllsionBossInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_IllsionBossInfo_descriptor, new String[]{"Id", "NextRefreshTime"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetLllsionBossInfoResponse_descriptor = getDescriptor().getMessageTypes().get(36);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetLllsionBossInfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetLllsionBossInfoResponse_descriptor, new String[]{"S2CCode", "S2CMsg", "BossInfos"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_EnterLllsionBossRequest_descriptor = getDescriptor().getMessageTypes().get(37);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_EnterLllsionBossRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_EnterLllsionBossRequest_descriptor, new String[]{"C2SId"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_EnterLllsionBossResponse_descriptor = getDescriptor().getMessageTypes().get(38);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_EnterLllsionBossResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_EnterLllsionBossResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetBenifitableRequest_descriptor = getDescriptor().getMessageTypes().get(39);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetBenifitableRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetBenifitableRequest_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetBenifitableResponse_descriptor = getDescriptor().getMessageTypes().get(40);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetBenifitableResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetBenifitableResponse_descriptor, new String[]{"S2CCode", "S2CMsg", "Benifitable"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetLllsion2InfoRequest_descriptor = getDescriptor().getMessageTypes().get(41);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetLllsion2InfoRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetLllsion2InfoRequest_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetLllsion2InfoResponse_descriptor = getDescriptor().getMessageTypes().get(42);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetLllsion2InfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetLllsion2InfoResponse_descriptor, new String[]{"S2CCode", "S2CMsg", "S2CMaxNum", "S2CTodayLv1", "S2CTodayLv2", "S2CTodayLv3", "ItemInfo"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_EnterLllsion2Request_descriptor = getDescriptor().getMessageTypes().get(43);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_EnterLllsion2Request_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_EnterLllsion2Request_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_EnterLllsion2Response_descriptor = getDescriptor().getMessageTypes().get(44);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_EnterLllsion2Response_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_EnterLllsion2Response_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_AddProfitRequest_descriptor = getDescriptor().getMessageTypes().get(45);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_AddProfitRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_AddProfitRequest_descriptor, new String[]{"MapId"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_AddProfitResponse_descriptor = getDescriptor().getMessageTypes().get(46);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_AddProfitResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_AddProfitResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_OnConfirmEnterFubenPush_descriptor = getDescriptor().getMessageTypes().get(47);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_OnConfirmEnterFubenPush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_OnConfirmEnterFubenPush_descriptor, new String[]{"S2CMsg", "S2CFubenId", "S2COverTime", "S2CLeaderId", "S2CMemberData"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_OnMemberEnterFubenStateChangePush_descriptor = getDescriptor().getMessageTypes().get(48);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_OnMemberEnterFubenStateChangePush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_OnMemberEnterFubenStateChangePush_descriptor, new String[]{"S2CMsg", "S2CPlayerId", "S2CIsReady"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_OnFubenClosePush_descriptor = getDescriptor().getMessageTypes().get(49);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_OnFubenClosePush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_OnFubenClosePush_descriptor, new String[]{"S2CMsg", "S2COverTime"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_CloseHandUpPush_descriptor = getDescriptor().getMessageTypes().get(50);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_CloseHandUpPush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_CloseHandUpPush_descriptor, new String[]{"Msg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_IllusionPush_descriptor = getDescriptor().getMessageTypes().get(51);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_IllusionPush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_IllusionPush_descriptor, new String[]{"S2CTodayExp", "S2CTodayClassexp", "S2CTodayGold", "S2CMaxExp", "S2CMaxClassexp", "S2CMaxGold"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_Illusion2Push_descriptor = getDescriptor().getMessageTypes().get(52);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_Illusion2Push_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_Illusion2Push_descriptor, new String[]{"S2CTodayLv1", "S2CTodayLv2", "S2CTodayLv3", "S2CMaxNum", "ItemInfo"});
    private static Descriptors.FileDescriptor descriptor;

    static {
        Common.getDescriptor();
        ItemOuterClass.getDescriptor();
        PlayerOuterClass.getDescriptor();
    }

    public static interface Illusion2PushOrBuilder extends MessageOrBuilder {
        boolean hasS2CTodayLv1();

        int getS2CTodayLv1();

        boolean hasS2CTodayLv2();

        int getS2CTodayLv2();

        boolean hasS2CTodayLv3();

        int getS2CTodayLv3();

        boolean hasS2CMaxNum();

        int getS2CMaxNum();

        List<FightLevelHandler.MJItemMax> getItemInfoList();

        FightLevelHandler.MJItemMax getItemInfo(int param1Int);

        int getItemInfoCount();

        List<? extends FightLevelHandler.MJItemMaxOrBuilder> getItemInfoOrBuilderList();

        FightLevelHandler.MJItemMaxOrBuilder getItemInfoOrBuilder(int param1Int);
    }

    public static interface IllusionPushOrBuilder extends MessageOrBuilder {
        boolean hasS2CTodayExp();

        int getS2CTodayExp();

        boolean hasS2CTodayClassexp();

        int getS2CTodayClassexp();

        boolean hasS2CTodayGold();

        int getS2CTodayGold();

        boolean hasS2CMaxExp();

        int getS2CMaxExp();

        boolean hasS2CMaxClassexp();

        int getS2CMaxClassexp();

        boolean hasS2CMaxGold();

        int getS2CMaxGold();
    }

    public static interface CloseHandUpPushOrBuilder extends MessageOrBuilder {
        boolean hasMsg();

        String getMsg();

        ByteString getMsgBytes();
    }

    public static interface OnFubenClosePushOrBuilder extends MessageOrBuilder {
        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        boolean hasS2COverTime();

        int getS2COverTime();
    }

    public static interface OnMemberEnterFubenStateChangePushOrBuilder extends MessageOrBuilder {
        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        boolean hasS2CPlayerId();

        String getS2CPlayerId();

        ByteString getS2CPlayerIdBytes();

        boolean hasS2CIsReady();

        int getS2CIsReady();
    }

    public static interface OnConfirmEnterFubenPushOrBuilder extends MessageOrBuilder {
        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        boolean hasS2CFubenId();

        int getS2CFubenId();

        boolean hasS2COverTime();

        int getS2COverTime();

        boolean hasS2CLeaderId();

        String getS2CLeaderId();

        ByteString getS2CLeaderIdBytes();

        List<FightLevelHandler.MemberData> getS2CMemberDataList();

        FightLevelHandler.MemberData getS2CMemberData(int param1Int);

        int getS2CMemberDataCount();

        List<? extends FightLevelHandler.MemberDataOrBuilder> getS2CMemberDataOrBuilderList();

        FightLevelHandler.MemberDataOrBuilder getS2CMemberDataOrBuilder(int param1Int);
    }

    public static interface AddProfitResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface AddProfitRequestOrBuilder extends MessageOrBuilder {
        boolean hasMapId();

        int getMapId();
    }

    public static interface EnterLllsion2ResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface EnterLllsion2RequestOrBuilder extends MessageOrBuilder {
    }

    public static interface GetLllsion2InfoResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        boolean hasS2CMaxNum();

        int getS2CMaxNum();

        boolean hasS2CTodayLv1();

        int getS2CTodayLv1();

        boolean hasS2CTodayLv2();

        int getS2CTodayLv2();

        boolean hasS2CTodayLv3();

        int getS2CTodayLv3();

        List<FightLevelHandler.MJItemMax> getItemInfoList();

        FightLevelHandler.MJItemMax getItemInfo(int param1Int);

        int getItemInfoCount();

        List<? extends FightLevelHandler.MJItemMaxOrBuilder> getItemInfoOrBuilderList();

        FightLevelHandler.MJItemMaxOrBuilder getItemInfoOrBuilder(int param1Int);
    }

    public static interface GetLllsion2InfoRequestOrBuilder extends MessageOrBuilder {
    }

    public static interface GetBenifitableResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        boolean hasBenifitable();

        boolean getBenifitable();
    }

    public static interface GetBenifitableRequestOrBuilder extends MessageOrBuilder {
    }

    public static interface EnterLllsionBossResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface EnterLllsionBossRequestOrBuilder extends MessageOrBuilder {
        boolean hasC2SId();

        int getC2SId();
    }

    public static interface GetLllsionBossInfoResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        List<FightLevelHandler.IllsionBossInfo> getBossInfosList();

        FightLevelHandler.IllsionBossInfo getBossInfos(int param1Int);

        int getBossInfosCount();

        List<? extends FightLevelHandler.IllsionBossInfoOrBuilder> getBossInfosOrBuilderList();

        FightLevelHandler.IllsionBossInfoOrBuilder getBossInfosOrBuilder(int param1Int);
    }

    public static interface IllsionBossInfoOrBuilder extends MessageOrBuilder {
        boolean hasId();

        int getId();

        boolean hasNextRefreshTime();

        long getNextRefreshTime();
    }

    public static interface GetLllsionBossInfoRequestOrBuilder extends MessageOrBuilder {
    }

    public static interface EnterLllsionResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface EnterLllsionRequestOrBuilder extends MessageOrBuilder {
        boolean hasC2SId();

        int getC2SId();
    }

    public static interface GetLllsionInfoResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        boolean hasS2CTodayExp();

        int getS2CTodayExp();

        boolean hasS2CTodayClassexp();

        int getS2CTodayClassexp();

        boolean hasS2CTodayGold();

        int getS2CTodayGold();

        boolean hasS2CMaxExp();

        int getS2CMaxExp();

        boolean hasS2CMaxClassexp();

        int getS2CMaxClassexp();

        boolean hasS2CMaxGold();

        int getS2CMaxGold();
    }

    public static interface GetLllsionInfoRequestOrBuilder extends MessageOrBuilder {
    }

    public static interface GetBossDamageRankResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        List<FightLevelHandler.RankInfo> getS2CRankInfosList();

        FightLevelHandler.RankInfo getS2CRankInfos(int param1Int);

        int getS2CRankInfosCount();

        List<? extends FightLevelHandler.RankInfoOrBuilder> getS2CRankInfosOrBuilderList();

        FightLevelHandler.RankInfoOrBuilder getS2CRankInfosOrBuilder(int param1Int);

        boolean hasS2COwnDamage();

        int getS2COwnDamage();

        boolean hasS2COwnRank();

        int getS2COwnRank();
    }

    public static interface GetBossDamageRankRequestOrBuilder extends MessageOrBuilder {
    }

    public static interface RankInfoOrBuilder extends MessageOrBuilder {
        boolean hasPlayer();

        PlayerOuterClass.PlayerBasic getPlayer();

        PlayerOuterClass.PlayerBasicOrBuilder getPlayerOrBuilder();

        boolean hasDamage();

        int getDamage();
    }

    public static interface GetBossInfoResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        List<FightLevelHandler.BossInfo> getS2CBossInfosList();

        FightLevelHandler.BossInfo getS2CBossInfos(int param1Int);

        int getS2CBossInfosCount();

        List<? extends FightLevelHandler.BossInfoOrBuilder> getS2CBossInfosOrBuilderList();

        FightLevelHandler.BossInfoOrBuilder getS2CBossInfosOrBuilder(int param1Int);
    }

    public static interface GetBossInfoRequestOrBuilder extends MessageOrBuilder {
    }

    public static interface BossInfoOrBuilder extends MessageOrBuilder {
        boolean hasMapId();

        int getMapId();

        boolean hasMonsterId();

        int getMonsterId();

        boolean hasTime();

        long getTime();

        boolean hasRefreshPoint();

        String getRefreshPoint();

        ByteString getRefreshPointBytes();
    }

    public static interface GetMonsterLeaderResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        List<ItemOuterClass.MiniItem> getS2CDropItemsList();

        ItemOuterClass.MiniItem getS2CDropItems(int param1Int);

        int getS2CDropItemsCount();

        List<? extends ItemOuterClass.MiniItemOrBuilder> getS2CDropItemsOrBuilderList();

        ItemOuterClass.MiniItemOrBuilder getS2CDropItemsOrBuilder(int param1Int);

        boolean hasS2CReqLevel();

        int getS2CReqLevel();

        boolean hasS2CReqUpLevel();

        int getS2CReqUpLevel();

        boolean hasS2CRefreshPoint();

        String getS2CRefreshPoint();

        ByteString getS2CRefreshPointBytes();
    }

    public static interface GetMonsterLeaderRequestOrBuilder extends MessageOrBuilder {
        boolean hasS2CMonsterId();

        int getS2CMonsterId();

        boolean hasS2CAreaId();

        int getS2CAreaId();
    }

    public static interface EnterWorldBossResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface EnterWorldBossRequestOrBuilder extends MessageOrBuilder {
        boolean hasS2CAreaId();

        int getS2CAreaId();
    }

    public static interface PalaceListResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        List<FightLevelHandler.PalaceInfo> getS2CPalaceInfosList();

        FightLevelHandler.PalaceInfo getS2CPalaceInfos(int param1Int);

        int getS2CPalaceInfosCount();

        List<? extends FightLevelHandler.PalaceInfoOrBuilder> getS2CPalaceInfosOrBuilderList();

        FightLevelHandler.PalaceInfoOrBuilder getS2CPalaceInfosOrBuilder(int param1Int);
    }

    public static interface PalaceInfoOrBuilder extends MessageOrBuilder {
        boolean hasMapId();

        int getMapId();

        boolean hasMonsterId();

        int getMonsterId();

        boolean hasTime();

        long getTime();
    }

    public static interface PalaceListRequestOrBuilder extends MessageOrBuilder {
        boolean hasS2CType();

        int getS2CType();
    }

    public static interface WorldBossListResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        List<FightLevelHandler.MapInfo> getMapInfosList();

        FightLevelHandler.MapInfo getMapInfos(int param1Int);

        int getMapInfosCount();

        List<? extends FightLevelHandler.MapInfoOrBuilder> getMapInfosOrBuilderList();

        FightLevelHandler.MapInfoOrBuilder getMapInfosOrBuilder(int param1Int);
    }

    public static interface WorldBossListRequestOrBuilder extends MessageOrBuilder {
    }

    public static interface MemberDataOrBuilder extends MessageOrBuilder {
        boolean hasId();

        String getId();

        ByteString getIdBytes();

        boolean hasName();

        String getName();

        ByteString getNameBytes();

        boolean hasPro();

        int getPro();

        boolean hasLevel();

        int getLevel();
    }

    public static interface MapInfoOrBuilder extends MessageOrBuilder {
        boolean hasMapId();

        int getMapId();

        boolean hasBornBeginTime();

        long getBornBeginTime();

        boolean hasBornEndTime();

        long getBornEndTime();

        List<FightLevelHandler.MonsterInfo> getMonsterInfoList();

        FightLevelHandler.MonsterInfo getMonsterInfo(int param1Int);

        int getMonsterInfoCount();

        List<? extends FightLevelHandler.MonsterInfoOrBuilder> getMonsterInfoOrBuilderList();

        FightLevelHandler.MonsterInfoOrBuilder getMonsterInfoOrBuilder(int param1Int);
    }

    public static interface MJItemMaxOrBuilder extends MessageOrBuilder {
        boolean hasS2CTodayMl();

        int getS2CTodayMl();

        boolean hasS2CMaxMl();

        int getS2CMaxMl();

        boolean hasItemCode();

        String getItemCode();

        ByteString getItemCodeBytes();
    }

    public static interface LeaveDungeonResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface LeaveDungeonRequestOrBuilder extends MessageOrBuilder {
    }

    public static interface ReplyEnterDungeonResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface ReplyEnterDungeonRequestOrBuilder extends MessageOrBuilder {
        boolean hasC2SType();

        int getC2SType();

        boolean hasC2SDungeonId();

        int getC2SDungeonId();
    }

    public static interface EnterDungeonResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface EnterDungeonRequestOrBuilder extends MessageOrBuilder {
        boolean hasC2SDungeonId();

        int getC2SDungeonId();
    }

    public static interface FubenListResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        List<FightLevelHandler.FubenInfo> getS2CListList();

        FightLevelHandler.FubenInfo getS2CList(int param1Int);

        int getS2CListCount();

        List<? extends FightLevelHandler.FubenInfoOrBuilder> getS2CListOrBuilderList();

        FightLevelHandler.FubenInfoOrBuilder getS2CListOrBuilder(int param1Int);

        boolean hasS2CHard();

        int getS2CHard();

        boolean hasS2CAcross();

        int getS2CAcross();
    }

    public static interface FubenListRequestOrBuilder extends MessageOrBuilder {
        boolean hasMapId();

        int getMapId();

        boolean hasType();

        int getType();
    }

    public static interface InviteFriendInfoOrBuilder extends MessageOrBuilder {
        boolean hasId();

        String getId();

        ByteString getIdBytes();

        boolean hasName();

        String getName();

        ByteString getNameBytes();

        boolean hasLevel();

        int getLevel();

        boolean hasPro();

        int getPro();

        boolean hasAreaName();

        String getAreaName();

        ByteString getAreaNameBytes();

        boolean hasState();

        int getState();

        boolean hasInvalidTime();

        int getInvalidTime();
    }

    public static interface FubenInfoOrBuilder extends MessageOrBuilder {
        boolean hasMapId();

        int getMapId();

        boolean hasRemainTimes();

        int getRemainTimes();

        List<ItemOuterClass.MiniItem> getAwardItemsList();

        ItemOuterClass.MiniItem getAwardItems(int param1Int);

        int getAwardItemsCount();

        List<? extends ItemOuterClass.MiniItemOrBuilder> getAwardItemsOrBuilderList();

        ItemOuterClass.MiniItemOrBuilder getAwardItemsOrBuilder(int param1Int);
    }

    public static interface MonsterInfoOrBuilder extends MessageOrBuilder {
        boolean hasMonsterId();

        int getMonsterId();

        boolean hasTime();

        long getTime();
    }

    public static interface FubenAwardRecordOrBuilder extends MessageOrBuilder {
        boolean hasPlayer();

        PlayerOuterClass.PlayerBasic getPlayer();

        PlayerOuterClass.PlayerBasicOrBuilder getPlayerOrBuilder();

        boolean hasItem();

        ItemOuterClass.MiniItem getItem();

        ItemOuterClass.MiniItemOrBuilder getItemOrBuilder();

        boolean hasTime();

        long getTime();
    }
}


