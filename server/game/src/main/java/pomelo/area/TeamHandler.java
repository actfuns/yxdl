package pomelo.area;

import com.google.protobuf.AbstractMessage;
import com.google.protobuf.AbstractMessageLite;
import com.google.protobuf.AbstractParser;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors;
import com.google.protobuf.ExtensionRegistry;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessage;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.Message;
import com.google.protobuf.MessageLite;
import com.google.protobuf.MessageOrBuilder;
import com.google.protobuf.Parser;
import com.google.protobuf.RepeatedFieldBuilder;
import com.google.protobuf.SingleFieldBuilder;
import com.google.protobuf.UnknownFieldSet;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import pomelo.Common;


public final class TeamHandler {
    public static void registerAllExtensions(ExtensionRegistry registry) {
    }

    public static final class TeamTarget
            extends GeneratedMessage
            implements TeamTargetOrBuilder {
        private static final TeamTarget defaultInstance = new TeamTarget(true);
        private final UnknownFieldSet unknownFields;

        private TeamTarget(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private TeamTarget(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static TeamTarget getDefaultInstance() {
            return defaultInstance;
        }

        public TeamTarget getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private TeamTarget(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.targetId_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.difficulty_ = input.readInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.minLevel_ = input.readInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 0x8;
                            this.maxLevel_ = input.readInt32();
                            break;
                        case 48:
                            this.bitField0_ |= 0x10;
                            this.isAutoTeam_ = input.readInt32();
                            break;
                        case 56:
                            this.bitField0_ |= 0x20;
                            this.isAutoStart_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_TeamTarget_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_TeamTarget_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamTarget.class, Builder.class);
        }

        public static Parser<TeamTarget> PARSER = (Parser<TeamTarget>) new AbstractParser<TeamTarget>() {
            public TeamHandler.TeamTarget parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.TeamTarget(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int TARGETID_FIELD_NUMBER = 1;
        private int targetId_;
        public static final int DIFFICULTY_FIELD_NUMBER = 2;
        private int difficulty_;
        public static final int MINLEVEL_FIELD_NUMBER = 3;
        private int minLevel_;
        public static final int MAXLEVEL_FIELD_NUMBER = 4;
        private int maxLevel_;
        public static final int ISAUTOTEAM_FIELD_NUMBER = 6;
        private int isAutoTeam_;
        public static final int ISAUTOSTART_FIELD_NUMBER = 7;
        private int isAutoStart_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<TeamTarget> getParserForType() {
            return PARSER;
        }

        public boolean hasTargetId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getTargetId() {
            return this.targetId_;
        }

        public boolean hasDifficulty() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        static {
            defaultInstance.initFields();
        }


        public int getDifficulty() {
            return this.difficulty_;
        }


        public boolean hasMinLevel() {
            return ((this.bitField0_ & 0x4) == 4);
        }


        public int getMinLevel() {
            return this.minLevel_;
        }


        public boolean hasMaxLevel() {
            return ((this.bitField0_ & 0x8) == 8);
        }


        public int getMaxLevel() {
            return this.maxLevel_;
        }


        public boolean hasIsAutoTeam() {
            return ((this.bitField0_ & 0x10) == 16);
        }


        public int getIsAutoTeam() {
            return this.isAutoTeam_;
        }


        public boolean hasIsAutoStart() {
            return ((this.bitField0_ & 0x20) == 32);
        }


        public int getIsAutoStart() {
            return this.isAutoStart_;
        }


        private void initFields() {
            this.targetId_ = 0;
            this.difficulty_ = 0;
            this.minLevel_ = 0;
            this.maxLevel_ = 0;
            this.isAutoTeam_ = 0;
            this.isAutoStart_ = 0;
        }


        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            if (!hasTargetId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasDifficulty()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasMinLevel()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasMaxLevel()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasIsAutoTeam()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasIsAutoStart()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }


        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeInt32(1, this.targetId_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeInt32(2, this.difficulty_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                output.writeInt32(3, this.minLevel_);
            }
            if ((this.bitField0_ & 0x8) == 8) {
                output.writeInt32(4, this.maxLevel_);
            }
            if ((this.bitField0_ & 0x10) == 16) {
                output.writeInt32(6, this.isAutoTeam_);
            }
            if ((this.bitField0_ & 0x20) == 32) {
                output.writeInt32(7, this.isAutoStart_);
            }
            getUnknownFields().writeTo(output);
        }


        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeInt32Size(1, this.targetId_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeInt32Size(2, this.difficulty_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                size += CodedOutputStream.computeInt32Size(3, this.minLevel_);
            }
            if ((this.bitField0_ & 0x8) == 8) {
                size += CodedOutputStream.computeInt32Size(4, this.maxLevel_);
            }
            if ((this.bitField0_ & 0x10) == 16) {
                size += CodedOutputStream.computeInt32Size(6, this.isAutoTeam_);
            }
            if ((this.bitField0_ & 0x20) == 32) {
                size += CodedOutputStream.computeInt32Size(7, this.isAutoStart_);
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }


        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }


        public static TeamTarget parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (TeamTarget) PARSER.parseFrom(data);
        }


        public static TeamTarget parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (TeamTarget) PARSER.parseFrom(data, extensionRegistry);
        }


        public static TeamTarget parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (TeamTarget) PARSER.parseFrom(data);
        }


        public static TeamTarget parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (TeamTarget) PARSER.parseFrom(data, extensionRegistry);
        }


        public static TeamTarget parseFrom(InputStream input) throws IOException {
            return (TeamTarget) PARSER.parseFrom(input);
        }


        public static TeamTarget parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (TeamTarget) PARSER.parseFrom(input, extensionRegistry);
        }


        public static TeamTarget parseDelimitedFrom(InputStream input) throws IOException {
            return (TeamTarget) PARSER.parseDelimitedFrom(input);
        }


        public static TeamTarget parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (TeamTarget) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }


        public static TeamTarget parseFrom(CodedInputStream input) throws IOException {
            return (TeamTarget) PARSER.parseFrom(input);
        }


        public static TeamTarget parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (TeamTarget) PARSER.parseFrom(input, extensionRegistry);
        }


        public static Builder newBuilder() {
            return Builder.create();
        }


        public Builder newBuilderForType() {
            return newBuilder();
        }


        public static Builder newBuilder(TeamTarget prototype) {
            return newBuilder().mergeFrom(prototype);
        }


        public Builder toBuilder() {
            return newBuilder(this);
        }


        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }


        public static final class Builder
                extends GeneratedMessage.Builder<Builder>
                implements TeamHandler.TeamTargetOrBuilder {
            private int bitField0_;


            private int targetId_;


            private int difficulty_;


            private int minLevel_;


            private int maxLevel_;


            private int isAutoTeam_;


            private int isAutoStart_;


            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_TeamTarget_descriptor;
            }


            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_TeamTarget_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.TeamTarget.class, Builder.class);
            }


            private Builder() {
                maybeForceBuilderInitialization();
            }


            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }


            private void maybeForceBuilderInitialization() {
                if (TeamHandler.TeamTarget.alwaysUseFieldBuilders) ;
            }


            private static Builder create() {
                return new Builder();
            }


            public Builder clear() {
                super.clear();
                this.targetId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.difficulty_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                this.minLevel_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                this.maxLevel_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                this.isAutoTeam_ = 0;
                this.bitField0_ &= 0xFFFFFFEF;
                this.isAutoStart_ = 0;
                this.bitField0_ &= 0xFFFFFFDF;
                return this;
            }


            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }


            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_TeamTarget_descriptor;
            }


            public TeamHandler.TeamTarget getDefaultInstanceForType() {
                return TeamHandler.TeamTarget.getDefaultInstance();
            }


            public TeamHandler.TeamTarget build() {
                TeamHandler.TeamTarget result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }


            public TeamHandler.TeamTarget buildPartial() {
                TeamHandler.TeamTarget result = new TeamHandler.TeamTarget(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) {
                    to_bitField0_ |= 0x1;
                }
                result.targetId_ = this.targetId_;
                if ((from_bitField0_ & 0x2) == 2) {
                    to_bitField0_ |= 0x2;
                }
                result.difficulty_ = this.difficulty_;
                if ((from_bitField0_ & 0x4) == 4) {
                    to_bitField0_ |= 0x4;
                }
                result.minLevel_ = this.minLevel_;
                if ((from_bitField0_ & 0x8) == 8) {
                    to_bitField0_ |= 0x8;
                }
                result.maxLevel_ = this.maxLevel_;
                if ((from_bitField0_ & 0x10) == 16) {
                    to_bitField0_ |= 0x10;
                }
                result.isAutoTeam_ = this.isAutoTeam_;
                if ((from_bitField0_ & 0x20) == 32) {
                    to_bitField0_ |= 0x20;
                }
                result.isAutoStart_ = this.isAutoStart_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }


            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.TeamTarget) {
                    return mergeFrom((TeamHandler.TeamTarget) other);
                }
                super.mergeFrom(other);
                return this;
            }


            public Builder mergeFrom(TeamHandler.TeamTarget other) {
                if (other == TeamHandler.TeamTarget.getDefaultInstance()) {
                    return this;
                }
                if (other.hasTargetId()) {
                    setTargetId(other.getTargetId());
                }
                if (other.hasDifficulty()) {
                    setDifficulty(other.getDifficulty());
                }
                if (other.hasMinLevel()) {
                    setMinLevel(other.getMinLevel());
                }
                if (other.hasMaxLevel()) {
                    setMaxLevel(other.getMaxLevel());
                }
                if (other.hasIsAutoTeam()) {
                    setIsAutoTeam(other.getIsAutoTeam());
                }
                if (other.hasIsAutoStart()) {
                    setIsAutoStart(other.getIsAutoStart());
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }


            public final boolean isInitialized() {
                if (!hasTargetId()) {
                    return false;
                }
                if (!hasDifficulty()) {
                    return false;
                }
                if (!hasMinLevel()) {
                    return false;
                }
                if (!hasMaxLevel()) {
                    return false;
                }
                if (!hasIsAutoTeam()) {
                    return false;
                }
                if (!hasIsAutoStart()) {
                    return false;
                }
                return true;
            }


            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.TeamTarget parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.TeamTarget) TeamHandler.TeamTarget.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.TeamTarget) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }


            public boolean hasTargetId() {
                return ((this.bitField0_ & 0x1) == 1);
            }


            public int getTargetId() {
                return this.targetId_;
            }


            public Builder setTargetId(int value) {
                this.bitField0_ |= 0x1;
                this.targetId_ = value;
                onChanged();
                return this;
            }


            public Builder clearTargetId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.targetId_ = 0;
                onChanged();
                return this;
            }


            public boolean hasDifficulty() {
                return ((this.bitField0_ & 0x2) == 2);
            }


            public int getDifficulty() {
                return this.difficulty_;
            }


            public Builder setDifficulty(int value) {
                this.bitField0_ |= 0x2;
                this.difficulty_ = value;
                onChanged();
                return this;
            }


            public Builder clearDifficulty() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.difficulty_ = 0;
                onChanged();
                return this;
            }


            public boolean hasMinLevel() {
                return ((this.bitField0_ & 0x4) == 4);
            }


            public int getMinLevel() {
                return this.minLevel_;
            }


            public Builder setMinLevel(int value) {
                this.bitField0_ |= 0x4;
                this.minLevel_ = value;
                onChanged();
                return this;
            }


            public Builder clearMinLevel() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.minLevel_ = 0;
                onChanged();
                return this;
            }


            public boolean hasMaxLevel() {
                return ((this.bitField0_ & 0x8) == 8);
            }


            public int getMaxLevel() {
                return this.maxLevel_;
            }


            public Builder setMaxLevel(int value) {
                this.bitField0_ |= 0x8;
                this.maxLevel_ = value;
                onChanged();
                return this;
            }


            public Builder clearMaxLevel() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.maxLevel_ = 0;
                onChanged();
                return this;
            }


            public boolean hasIsAutoTeam() {
                return ((this.bitField0_ & 0x10) == 16);
            }


            public int getIsAutoTeam() {
                return this.isAutoTeam_;
            }


            public Builder setIsAutoTeam(int value) {
                this.bitField0_ |= 0x10;
                this.isAutoTeam_ = value;
                onChanged();
                return this;
            }


            public Builder clearIsAutoTeam() {
                this.bitField0_ &= 0xFFFFFFEF;
                this.isAutoTeam_ = 0;
                onChanged();
                return this;
            }


            public boolean hasIsAutoStart() {
                return ((this.bitField0_ & 0x20) == 32);
            }


            public int getIsAutoStart() {
                return this.isAutoStart_;
            }


            public Builder setIsAutoStart(int value) {
                this.bitField0_ |= 0x20;
                this.isAutoStart_ = value;
                onChanged();
                return this;
            }


            public Builder clearIsAutoStart() {
                this.bitField0_ &= 0xFFFFFFDF;
                this.isAutoStart_ = 0;
                onChanged();
                return this;
            }
        }
    }


    public static final class TeamMemberBasic
            extends GeneratedMessage
            implements TeamMemberBasicOrBuilder {
        private static final TeamMemberBasic defaultInstance = new TeamMemberBasic(true);
        private final UnknownFieldSet unknownFields;

        private TeamMemberBasic(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private TeamMemberBasic(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static TeamMemberBasic getDefaultInstance() {
            return defaultInstance;
        }

        public TeamMemberBasic getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private TeamMemberBasic(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.id_ = bs;
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.pro_ = input.readInt32();
                            break;
                        case 26:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x4;
                            this.name_ = bs;
                            break;
                        case 32:
                            this.bitField0_ |= 0x8;
                            this.level_ = input.readInt32();
                            break;
                        case 40:
                            this.bitField0_ |= 0x10;
                            this.upLevel_ = input.readInt32();
                            break;
                        case 50:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x20;
                            this.guildName_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_TeamMemberBasic_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_TeamMemberBasic_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamMemberBasic.class, Builder.class);
        }

        public static Parser<TeamMemberBasic> PARSER = (Parser<TeamMemberBasic>) new AbstractParser<TeamMemberBasic>() {
            public TeamHandler.TeamMemberBasic parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.TeamMemberBasic(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int ID_FIELD_NUMBER = 1;
        private Object id_;
        public static final int PRO_FIELD_NUMBER = 2;
        private int pro_;
        public static final int NAME_FIELD_NUMBER = 3;
        private Object name_;
        public static final int LEVEL_FIELD_NUMBER = 4;
        private int level_;
        public static final int UPLEVEL_FIELD_NUMBER = 5;
        private int upLevel_;
        public static final int GUILDNAME_FIELD_NUMBER = 6;
        private Object guildName_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<TeamMemberBasic> getParserForType() {
            return PARSER;
        }

        public boolean hasId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getId() {
            Object ref = this.id_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.id_ = s;
            return s;
        }

        public ByteString getIdBytes() {
            Object ref = this.id_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.id_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasPro() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        static {
            defaultInstance.initFields();
        }


        public int getPro() {
            return this.pro_;
        }


        public boolean hasName() {
            return ((this.bitField0_ & 0x4) == 4);
        }


        public String getName() {
            Object ref = this.name_;
            if (ref instanceof String) {
                return (String) ref;
            }
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                this.name_ = s;
            }
            return s;
        }


        public ByteString getNameBytes() {
            Object ref = this.name_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.name_ = b;
                return b;
            }
            return (ByteString) ref;
        }


        public boolean hasLevel() {
            return ((this.bitField0_ & 0x8) == 8);
        }


        public int getLevel() {
            return this.level_;
        }


        public boolean hasUpLevel() {
            return ((this.bitField0_ & 0x10) == 16);
        }


        public int getUpLevel() {
            return this.upLevel_;
        }


        public boolean hasGuildName() {
            return ((this.bitField0_ & 0x20) == 32);
        }


        public String getGuildName() {
            Object ref = this.guildName_;
            if (ref instanceof String) {
                return (String) ref;
            }
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                this.guildName_ = s;
            }
            return s;
        }


        public ByteString getGuildNameBytes() {
            Object ref = this.guildName_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.guildName_ = b;
                return b;
            }
            return (ByteString) ref;
        }


        private void initFields() {
            this.id_ = "";
            this.pro_ = 0;
            this.name_ = "";
            this.level_ = 0;
            this.upLevel_ = 0;
            this.guildName_ = "";
        }


        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            if (!hasId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasPro()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasName()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasLevel()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasUpLevel()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasGuildName()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }


        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeBytes(1, getIdBytes());
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeInt32(2, this.pro_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                output.writeBytes(3, getNameBytes());
            }
            if ((this.bitField0_ & 0x8) == 8) {
                output.writeInt32(4, this.level_);
            }
            if ((this.bitField0_ & 0x10) == 16) {
                output.writeInt32(5, this.upLevel_);
            }
            if ((this.bitField0_ & 0x20) == 32) {
                output.writeBytes(6, getGuildNameBytes());
            }
            getUnknownFields().writeTo(output);
        }


        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeBytesSize(1, getIdBytes());
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeInt32Size(2, this.pro_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                size += CodedOutputStream.computeBytesSize(3, getNameBytes());
            }
            if ((this.bitField0_ & 0x8) == 8) {
                size += CodedOutputStream.computeInt32Size(4, this.level_);
            }
            if ((this.bitField0_ & 0x10) == 16) {
                size += CodedOutputStream.computeInt32Size(5, this.upLevel_);
            }
            if ((this.bitField0_ & 0x20) == 32) {
                size += CodedOutputStream.computeBytesSize(6, getGuildNameBytes());
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }


        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }


        public static TeamMemberBasic parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (TeamMemberBasic) PARSER.parseFrom(data);
        }


        public static TeamMemberBasic parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (TeamMemberBasic) PARSER.parseFrom(data, extensionRegistry);
        }


        public static TeamMemberBasic parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (TeamMemberBasic) PARSER.parseFrom(data);
        }


        public static TeamMemberBasic parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (TeamMemberBasic) PARSER.parseFrom(data, extensionRegistry);
        }


        public static TeamMemberBasic parseFrom(InputStream input) throws IOException {
            return (TeamMemberBasic) PARSER.parseFrom(input);
        }


        public static TeamMemberBasic parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (TeamMemberBasic) PARSER.parseFrom(input, extensionRegistry);
        }


        public static TeamMemberBasic parseDelimitedFrom(InputStream input) throws IOException {
            return (TeamMemberBasic) PARSER.parseDelimitedFrom(input);
        }


        public static TeamMemberBasic parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (TeamMemberBasic) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }


        public static TeamMemberBasic parseFrom(CodedInputStream input) throws IOException {
            return (TeamMemberBasic) PARSER.parseFrom(input);
        }


        public static TeamMemberBasic parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (TeamMemberBasic) PARSER.parseFrom(input, extensionRegistry);
        }


        public static Builder newBuilder() {
            return Builder.create();
        }


        public Builder newBuilderForType() {
            return newBuilder();
        }


        public static Builder newBuilder(TeamMemberBasic prototype) {
            return newBuilder().mergeFrom(prototype);
        }


        public Builder toBuilder() {
            return newBuilder(this);
        }


        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }


        public static final class Builder
                extends GeneratedMessage.Builder<Builder>
                implements TeamHandler.TeamMemberBasicOrBuilder {
            private int bitField0_;


            private Object id_;


            private int pro_;


            private Object name_;


            private int level_;


            private int upLevel_;


            private Object guildName_;


            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_TeamMemberBasic_descriptor;
            }


            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_TeamMemberBasic_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.TeamMemberBasic.class, Builder.class);
            }


            private Builder() {
                this.id_ = "";
                this.name_ = "";
                this.guildName_ = "";
                maybeForceBuilderInitialization();
            }


            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.id_ = "";
                this.name_ = "";
                this.guildName_ = "";
                maybeForceBuilderInitialization();
            }


            private void maybeForceBuilderInitialization() {
                if (TeamHandler.TeamMemberBasic.alwaysUseFieldBuilders) ;
            }


            private static Builder create() {
                return new Builder();
            }


            public Builder clear() {
                super.clear();
                this.id_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                this.pro_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                this.name_ = "";
                this.bitField0_ &= 0xFFFFFFFB;
                this.level_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                this.upLevel_ = 0;
                this.bitField0_ &= 0xFFFFFFEF;
                this.guildName_ = "";
                this.bitField0_ &= 0xFFFFFFDF;
                return this;
            }


            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }


            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_TeamMemberBasic_descriptor;
            }


            public TeamHandler.TeamMemberBasic getDefaultInstanceForType() {
                return TeamHandler.TeamMemberBasic.getDefaultInstance();
            }


            public TeamHandler.TeamMemberBasic build() {
                TeamHandler.TeamMemberBasic result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }


            public TeamHandler.TeamMemberBasic buildPartial() {
                TeamHandler.TeamMemberBasic result = new TeamHandler.TeamMemberBasic(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) {
                    to_bitField0_ |= 0x1;
                }
                result.id_ = this.id_;
                if ((from_bitField0_ & 0x2) == 2) {
                    to_bitField0_ |= 0x2;
                }
                result.pro_ = this.pro_;
                if ((from_bitField0_ & 0x4) == 4) {
                    to_bitField0_ |= 0x4;
                }
                result.name_ = this.name_;
                if ((from_bitField0_ & 0x8) == 8) {
                    to_bitField0_ |= 0x8;
                }
                result.level_ = this.level_;
                if ((from_bitField0_ & 0x10) == 16) {
                    to_bitField0_ |= 0x10;
                }
                result.upLevel_ = this.upLevel_;
                if ((from_bitField0_ & 0x20) == 32) {
                    to_bitField0_ |= 0x20;
                }
                result.guildName_ = this.guildName_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }


            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.TeamMemberBasic) {
                    return mergeFrom((TeamHandler.TeamMemberBasic) other);
                }
                super.mergeFrom(other);
                return this;
            }


            public Builder mergeFrom(TeamHandler.TeamMemberBasic other) {
                if (other == TeamHandler.TeamMemberBasic.getDefaultInstance()) {
                    return this;
                }
                if (other.hasId()) {
                    this.bitField0_ |= 0x1;
                    this.id_ = other.id_;
                    onChanged();
                }
                if (other.hasPro()) {
                    setPro(other.getPro());
                }
                if (other.hasName()) {
                    this.bitField0_ |= 0x4;
                    this.name_ = other.name_;
                    onChanged();
                }
                if (other.hasLevel()) {
                    setLevel(other.getLevel());
                }
                if (other.hasUpLevel()) {
                    setUpLevel(other.getUpLevel());
                }
                if (other.hasGuildName()) {
                    this.bitField0_ |= 0x20;
                    this.guildName_ = other.guildName_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }


            public final boolean isInitialized() {
                if (!hasId()) {
                    return false;
                }
                if (!hasPro()) {
                    return false;
                }
                if (!hasName()) {
                    return false;
                }
                if (!hasLevel()) {
                    return false;
                }
                if (!hasUpLevel()) {
                    return false;
                }
                if (!hasGuildName()) {
                    return false;
                }
                return true;
            }


            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.TeamMemberBasic parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.TeamMemberBasic) TeamHandler.TeamMemberBasic.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.TeamMemberBasic) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }


            public boolean hasId() {
                return ((this.bitField0_ & 0x1) == 1);
            }


            public String getId() {
                Object ref = this.id_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.id_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getIdBytes() {
                Object ref = this.id_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.id_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x1;
                this.id_ = value;
                onChanged();
                return this;
            }


            public Builder clearId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.id_ = TeamHandler.TeamMemberBasic.getDefaultInstance().getId();
                onChanged();
                return this;
            }


            public Builder setIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x1;
                this.id_ = value;
                onChanged();
                return this;
            }


            public boolean hasPro() {
                return ((this.bitField0_ & 0x2) == 2);
            }


            public int getPro() {
                return this.pro_;
            }


            public Builder setPro(int value) {
                this.bitField0_ |= 0x2;
                this.pro_ = value;
                onChanged();
                return this;
            }


            public Builder clearPro() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.pro_ = 0;
                onChanged();
                return this;
            }


            public boolean hasName() {
                return ((this.bitField0_ & 0x4) == 4);
            }


            public String getName() {
                Object ref = this.name_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.name_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getNameBytes() {
                Object ref = this.name_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.name_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setName(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x4;
                this.name_ = value;
                onChanged();
                return this;
            }


            public Builder clearName() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.name_ = TeamHandler.TeamMemberBasic.getDefaultInstance().getName();
                onChanged();
                return this;
            }


            public Builder setNameBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x4;
                this.name_ = value;
                onChanged();
                return this;
            }


            public boolean hasLevel() {
                return ((this.bitField0_ & 0x8) == 8);
            }


            public int getLevel() {
                return this.level_;
            }


            public Builder setLevel(int value) {
                this.bitField0_ |= 0x8;
                this.level_ = value;
                onChanged();
                return this;
            }


            public Builder clearLevel() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.level_ = 0;
                onChanged();
                return this;
            }


            public boolean hasUpLevel() {
                return ((this.bitField0_ & 0x10) == 16);
            }


            public int getUpLevel() {
                return this.upLevel_;
            }


            public Builder setUpLevel(int value) {
                this.bitField0_ |= 0x10;
                this.upLevel_ = value;
                onChanged();
                return this;
            }


            public Builder clearUpLevel() {
                this.bitField0_ &= 0xFFFFFFEF;
                this.upLevel_ = 0;
                onChanged();
                return this;
            }


            public boolean hasGuildName() {
                return ((this.bitField0_ & 0x20) == 32);
            }


            public String getGuildName() {
                Object ref = this.guildName_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.guildName_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getGuildNameBytes() {
                Object ref = this.guildName_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.guildName_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setGuildName(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x20;
                this.guildName_ = value;
                onChanged();
                return this;
            }


            public Builder clearGuildName() {
                this.bitField0_ &= 0xFFFFFFDF;
                this.guildName_ = TeamHandler.TeamMemberBasic.getDefaultInstance().getGuildName();
                onChanged();
                return this;
            }


            public Builder setGuildNameBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x20;
                this.guildName_ = value;
                onChanged();
                return this;
            }
        }
    }


    public static final class TeamMember
            extends GeneratedMessage
            implements TeamMemberOrBuilder {
        private static final TeamMember defaultInstance = new TeamMember(true);
        private final UnknownFieldSet unknownFields;

        private TeamMember(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private TeamMember(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static TeamMember getDefaultInstance() {
            return defaultInstance;
        }

        public TeamMember getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private TeamMember(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.id_ = bs;
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.pro_ = input.readInt32();
                            break;
                        case 26:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x4;
                            this.name_ = bs;
                            break;
                        case 32:
                            this.bitField0_ |= 0x8;
                            this.level_ = input.readInt32();
                            break;
                        case 40:
                            this.bitField0_ |= 0x10;
                            this.isLeader_ = input.readInt32();
                            break;
                        case 48:
                            this.bitField0_ |= 0x20;
                            this.status_ = input.readInt32();
                            break;
                        case 56:
                            this.bitField0_ |= 0x40;
                            this.areaId_ = input.readInt32();
                            break;
                        case 64:
                            this.bitField0_ |= 0x80;
                            this.follow_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_TeamMember_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_TeamMember_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamMember.class, Builder.class);
        }

        public static Parser<TeamMember> PARSER = (Parser<TeamMember>) new AbstractParser<TeamMember>() {
            public TeamHandler.TeamMember parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.TeamMember(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int ID_FIELD_NUMBER = 1;
        private Object id_;
        public static final int PRO_FIELD_NUMBER = 2;
        private int pro_;
        public static final int NAME_FIELD_NUMBER = 3;
        private Object name_;
        public static final int LEVEL_FIELD_NUMBER = 4;
        private int level_;
        public static final int ISLEADER_FIELD_NUMBER = 5;
        private int isLeader_;
        public static final int STATUS_FIELD_NUMBER = 6;
        private int status_;
        public static final int AREAID_FIELD_NUMBER = 7;
        private int areaId_;
        public static final int FOLLOW_FIELD_NUMBER = 8;
        private int follow_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<TeamMember> getParserForType() {
            return PARSER;
        }

        public boolean hasId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getId() {
            Object ref = this.id_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.id_ = s;
            return s;
        }

        public ByteString getIdBytes() {
            Object ref = this.id_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.id_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasPro() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        static {
            defaultInstance.initFields();
        }


        public int getPro() {
            return this.pro_;
        }


        public boolean hasName() {
            return ((this.bitField0_ & 0x4) == 4);
        }


        public String getName() {
            Object ref = this.name_;
            if (ref instanceof String) {
                return (String) ref;
            }
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                this.name_ = s;
            }
            return s;
        }


        public ByteString getNameBytes() {
            Object ref = this.name_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.name_ = b;
                return b;
            }
            return (ByteString) ref;
        }


        public boolean hasLevel() {
            return ((this.bitField0_ & 0x8) == 8);
        }


        public int getLevel() {
            return this.level_;
        }


        public boolean hasIsLeader() {
            return ((this.bitField0_ & 0x10) == 16);
        }


        public int getIsLeader() {
            return this.isLeader_;
        }


        public boolean hasStatus() {
            return ((this.bitField0_ & 0x20) == 32);
        }


        public int getStatus() {
            return this.status_;
        }


        public boolean hasAreaId() {
            return ((this.bitField0_ & 0x40) == 64);
        }


        public int getAreaId() {
            return this.areaId_;
        }


        public boolean hasFollow() {
            return ((this.bitField0_ & 0x80) == 128);
        }


        public int getFollow() {
            return this.follow_;
        }


        private void initFields() {
            this.id_ = "";
            this.pro_ = 0;
            this.name_ = "";
            this.level_ = 0;
            this.isLeader_ = 0;
            this.status_ = 0;
            this.areaId_ = 0;
            this.follow_ = 0;
        }


        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            if (!hasId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }


        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeBytes(1, getIdBytes());
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeInt32(2, this.pro_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                output.writeBytes(3, getNameBytes());
            }
            if ((this.bitField0_ & 0x8) == 8) {
                output.writeInt32(4, this.level_);
            }
            if ((this.bitField0_ & 0x10) == 16) {
                output.writeInt32(5, this.isLeader_);
            }
            if ((this.bitField0_ & 0x20) == 32) {
                output.writeInt32(6, this.status_);
            }
            if ((this.bitField0_ & 0x40) == 64) {
                output.writeInt32(7, this.areaId_);
            }
            if ((this.bitField0_ & 0x80) == 128) {
                output.writeInt32(8, this.follow_);
            }
            getUnknownFields().writeTo(output);
        }


        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeBytesSize(1, getIdBytes());
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeInt32Size(2, this.pro_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                size += CodedOutputStream.computeBytesSize(3, getNameBytes());
            }
            if ((this.bitField0_ & 0x8) == 8) {
                size += CodedOutputStream.computeInt32Size(4, this.level_);
            }
            if ((this.bitField0_ & 0x10) == 16) {
                size += CodedOutputStream.computeInt32Size(5, this.isLeader_);
            }
            if ((this.bitField0_ & 0x20) == 32) {
                size += CodedOutputStream.computeInt32Size(6, this.status_);
            }
            if ((this.bitField0_ & 0x40) == 64) {
                size += CodedOutputStream.computeInt32Size(7, this.areaId_);
            }
            if ((this.bitField0_ & 0x80) == 128) {
                size += CodedOutputStream.computeInt32Size(8, this.follow_);
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }


        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }


        public static TeamMember parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (TeamMember) PARSER.parseFrom(data);
        }


        public static TeamMember parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (TeamMember) PARSER.parseFrom(data, extensionRegistry);
        }


        public static TeamMember parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (TeamMember) PARSER.parseFrom(data);
        }


        public static TeamMember parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (TeamMember) PARSER.parseFrom(data, extensionRegistry);
        }


        public static TeamMember parseFrom(InputStream input) throws IOException {
            return (TeamMember) PARSER.parseFrom(input);
        }


        public static TeamMember parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (TeamMember) PARSER.parseFrom(input, extensionRegistry);
        }


        public static TeamMember parseDelimitedFrom(InputStream input) throws IOException {
            return (TeamMember) PARSER.parseDelimitedFrom(input);
        }


        public static TeamMember parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (TeamMember) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }


        public static TeamMember parseFrom(CodedInputStream input) throws IOException {
            return (TeamMember) PARSER.parseFrom(input);
        }


        public static TeamMember parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (TeamMember) PARSER.parseFrom(input, extensionRegistry);
        }


        public static Builder newBuilder() {
            return Builder.create();
        }


        public Builder newBuilderForType() {
            return newBuilder();
        }


        public static Builder newBuilder(TeamMember prototype) {
            return newBuilder().mergeFrom(prototype);
        }


        public Builder toBuilder() {
            return newBuilder(this);
        }


        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }


        public static final class Builder
                extends GeneratedMessage.Builder<Builder>
                implements TeamHandler.TeamMemberOrBuilder {
            private int bitField0_;


            private Object id_;


            private int pro_;


            private Object name_;


            private int level_;


            private int isLeader_;


            private int status_;


            private int areaId_;


            private int follow_;


            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_TeamMember_descriptor;
            }


            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_TeamMember_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.TeamMember.class, Builder.class);
            }


            private Builder() {
                this.id_ = "";
                this.name_ = "";
                maybeForceBuilderInitialization();
            }


            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.id_ = "";
                this.name_ = "";
                maybeForceBuilderInitialization();
            }


            private void maybeForceBuilderInitialization() {
                if (TeamHandler.TeamMember.alwaysUseFieldBuilders) ;
            }


            private static Builder create() {
                return new Builder();
            }


            public Builder clear() {
                super.clear();
                this.id_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                this.pro_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                this.name_ = "";
                this.bitField0_ &= 0xFFFFFFFB;
                this.level_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                this.isLeader_ = 0;
                this.bitField0_ &= 0xFFFFFFEF;
                this.status_ = 0;
                this.bitField0_ &= 0xFFFFFFDF;
                this.areaId_ = 0;
                this.bitField0_ &= 0xFFFFFFBF;
                this.follow_ = 0;
                this.bitField0_ &= 0xFFFFFF7F;
                return this;
            }


            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }


            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_TeamMember_descriptor;
            }


            public TeamHandler.TeamMember getDefaultInstanceForType() {
                return TeamHandler.TeamMember.getDefaultInstance();
            }


            public TeamHandler.TeamMember build() {
                TeamHandler.TeamMember result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }


            public TeamHandler.TeamMember buildPartial() {
                TeamHandler.TeamMember result = new TeamHandler.TeamMember(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) {
                    to_bitField0_ |= 0x1;
                }
                result.id_ = this.id_;
                if ((from_bitField0_ & 0x2) == 2) {
                    to_bitField0_ |= 0x2;
                }
                result.pro_ = this.pro_;
                if ((from_bitField0_ & 0x4) == 4) {
                    to_bitField0_ |= 0x4;
                }
                result.name_ = this.name_;
                if ((from_bitField0_ & 0x8) == 8) {
                    to_bitField0_ |= 0x8;
                }
                result.level_ = this.level_;
                if ((from_bitField0_ & 0x10) == 16) {
                    to_bitField0_ |= 0x10;
                }
                result.isLeader_ = this.isLeader_;
                if ((from_bitField0_ & 0x20) == 32) {
                    to_bitField0_ |= 0x20;
                }
                result.status_ = this.status_;
                if ((from_bitField0_ & 0x40) == 64) {
                    to_bitField0_ |= 0x40;
                }
                result.areaId_ = this.areaId_;
                if ((from_bitField0_ & 0x80) == 128) {
                    to_bitField0_ |= 0x80;
                }
                result.follow_ = this.follow_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }


            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.TeamMember) {
                    return mergeFrom((TeamHandler.TeamMember) other);
                }
                super.mergeFrom(other);
                return this;
            }


            public Builder mergeFrom(TeamHandler.TeamMember other) {
                if (other == TeamHandler.TeamMember.getDefaultInstance()) {
                    return this;
                }
                if (other.hasId()) {
                    this.bitField0_ |= 0x1;
                    this.id_ = other.id_;
                    onChanged();
                }
                if (other.hasPro()) {
                    setPro(other.getPro());
                }
                if (other.hasName()) {
                    this.bitField0_ |= 0x4;
                    this.name_ = other.name_;
                    onChanged();
                }
                if (other.hasLevel()) {
                    setLevel(other.getLevel());
                }
                if (other.hasIsLeader()) {
                    setIsLeader(other.getIsLeader());
                }
                if (other.hasStatus()) {
                    setStatus(other.getStatus());
                }
                if (other.hasAreaId()) {
                    setAreaId(other.getAreaId());
                }
                if (other.hasFollow()) {
                    setFollow(other.getFollow());
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }


            public final boolean isInitialized() {
                if (!hasId()) {
                    return false;
                }
                return true;
            }


            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.TeamMember parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.TeamMember) TeamHandler.TeamMember.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.TeamMember) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }


            public boolean hasId() {
                return ((this.bitField0_ & 0x1) == 1);
            }


            public String getId() {
                Object ref = this.id_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.id_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getIdBytes() {
                Object ref = this.id_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.id_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x1;
                this.id_ = value;
                onChanged();
                return this;
            }


            public Builder clearId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.id_ = TeamHandler.TeamMember.getDefaultInstance().getId();
                onChanged();
                return this;
            }


            public Builder setIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x1;
                this.id_ = value;
                onChanged();
                return this;
            }


            public boolean hasPro() {
                return ((this.bitField0_ & 0x2) == 2);
            }


            public int getPro() {
                return this.pro_;
            }


            public Builder setPro(int value) {
                this.bitField0_ |= 0x2;
                this.pro_ = value;
                onChanged();
                return this;
            }


            public Builder clearPro() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.pro_ = 0;
                onChanged();
                return this;
            }


            public boolean hasName() {
                return ((this.bitField0_ & 0x4) == 4);
            }


            public String getName() {
                Object ref = this.name_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.name_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getNameBytes() {
                Object ref = this.name_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.name_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setName(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x4;
                this.name_ = value;
                onChanged();
                return this;
            }


            public Builder clearName() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.name_ = TeamHandler.TeamMember.getDefaultInstance().getName();
                onChanged();
                return this;
            }


            public Builder setNameBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x4;
                this.name_ = value;
                onChanged();
                return this;
            }


            public boolean hasLevel() {
                return ((this.bitField0_ & 0x8) == 8);
            }


            public int getLevel() {
                return this.level_;
            }


            public Builder setLevel(int value) {
                this.bitField0_ |= 0x8;
                this.level_ = value;
                onChanged();
                return this;
            }


            public Builder clearLevel() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.level_ = 0;
                onChanged();
                return this;
            }


            public boolean hasIsLeader() {
                return ((this.bitField0_ & 0x10) == 16);
            }


            public int getIsLeader() {
                return this.isLeader_;
            }


            public Builder setIsLeader(int value) {
                this.bitField0_ |= 0x10;
                this.isLeader_ = value;
                onChanged();
                return this;
            }


            public Builder clearIsLeader() {
                this.bitField0_ &= 0xFFFFFFEF;
                this.isLeader_ = 0;
                onChanged();
                return this;
            }


            public boolean hasStatus() {
                return ((this.bitField0_ & 0x20) == 32);
            }


            public int getStatus() {
                return this.status_;
            }


            public Builder setStatus(int value) {
                this.bitField0_ |= 0x20;
                this.status_ = value;
                onChanged();
                return this;
            }


            public Builder clearStatus() {
                this.bitField0_ &= 0xFFFFFFDF;
                this.status_ = 0;
                onChanged();
                return this;
            }


            public boolean hasAreaId() {
                return ((this.bitField0_ & 0x40) == 64);
            }


            public int getAreaId() {
                return this.areaId_;
            }


            public Builder setAreaId(int value) {
                this.bitField0_ |= 0x40;
                this.areaId_ = value;
                onChanged();
                return this;
            }


            public Builder clearAreaId() {
                this.bitField0_ &= 0xFFFFFFBF;
                this.areaId_ = 0;
                onChanged();
                return this;
            }


            public boolean hasFollow() {
                return ((this.bitField0_ & 0x80) == 128);
            }


            public int getFollow() {
                return this.follow_;
            }


            public Builder setFollow(int value) {
                this.bitField0_ |= 0x80;
                this.follow_ = value;
                onChanged();
                return this;
            }


            public Builder clearFollow() {
                this.bitField0_ &= 0xFFFFFF7F;
                this.follow_ = 0;
                onChanged();
                return this;
            }
        }
    }


    public static final class TeamMemberDetail
            extends GeneratedMessage
            implements TeamMemberDetailOrBuilder {
        private static final TeamMemberDetail defaultInstance = new TeamMemberDetail(true);
        private final UnknownFieldSet unknownFields;

        private TeamMemberDetail(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private TeamMemberDetail(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static TeamMemberDetail getDefaultInstance() {
            return defaultInstance;
        }

        public TeamMemberDetail getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private TeamMemberDetail(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.id_ = bs;
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.pro_ = input.readInt32();
                            break;
                        case 26:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x4;
                            this.name_ = bs;
                            break;
                        case 32:
                            this.bitField0_ |= 0x8;
                            this.level_ = input.readInt32();
                            break;
                        case 40:
                            this.bitField0_ |= 0x10;
                            this.isLeader_ = input.readInt32();
                            break;
                        case 50:
                            if ((mutable_bitField0_ & 0x20) != 32) {
                                this.avatars_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x20;
                            }
                            this.avatars_.add(input.readMessage(Common.Avatar.PARSER, extensionRegistry));
                            break;
                        case 56:
                            this.bitField0_ |= 0x20;
                            this.fightPower_ = input.readInt32();
                            break;
                        case 64:
                            this.bitField0_ |= 0x40;
                            this.status_ = input.readInt32();
                            break;
                        case 74:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x80;
                            this.areaDes_ = bs;
                            break;
                        case 80:
                            this.bitField0_ |= 0x100;
                            this.upLevel_ = input.readInt32();
                            break;
                        case 88:
                            this.bitField0_ |= 0x200;
                            this.follow_ = input.readInt32();
                            break;
                        case 98:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x400;
                            this.guildName_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x20) == 32) this.avatars_ = Collections.unmodifiableList(this.avatars_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_TeamMemberDetail_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_TeamMemberDetail_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamMemberDetail.class, Builder.class);
        }

        public static Parser<TeamMemberDetail> PARSER = (Parser<TeamMemberDetail>) new AbstractParser<TeamMemberDetail>() {
            public TeamHandler.TeamMemberDetail parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.TeamMemberDetail(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int ID_FIELD_NUMBER = 1;
        private Object id_;
        public static final int PRO_FIELD_NUMBER = 2;
        private int pro_;
        public static final int NAME_FIELD_NUMBER = 3;
        private Object name_;
        public static final int LEVEL_FIELD_NUMBER = 4;
        private int level_;
        public static final int ISLEADER_FIELD_NUMBER = 5;
        private int isLeader_;
        public static final int AVATARS_FIELD_NUMBER = 6;
        private List<Common.Avatar> avatars_;
        public static final int FIGHTPOWER_FIELD_NUMBER = 7;
        private int fightPower_;
        public static final int STATUS_FIELD_NUMBER = 8;
        private int status_;
        public static final int AREADES_FIELD_NUMBER = 9;
        private Object areaDes_;
        public static final int UPLEVEL_FIELD_NUMBER = 10;
        private int upLevel_;
        public static final int FOLLOW_FIELD_NUMBER = 11;
        private int follow_;
        public static final int GUILDNAME_FIELD_NUMBER = 12;
        private Object guildName_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<TeamMemberDetail> getParserForType() {
            return PARSER;
        }

        public boolean hasId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getId() {
            Object ref = this.id_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.id_ = s;
            return s;
        }

        public ByteString getIdBytes() {
            Object ref = this.id_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.id_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasPro() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getPro() {
            return this.pro_;
        }

        public boolean hasName() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        static {
            defaultInstance.initFields();
        }


        public String getName() {
            Object ref = this.name_;
            if (ref instanceof String) {
                return (String) ref;
            }
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                this.name_ = s;
            }
            return s;
        }


        public ByteString getNameBytes() {
            Object ref = this.name_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.name_ = b;
                return b;
            }
            return (ByteString) ref;
        }


        public boolean hasLevel() {
            return ((this.bitField0_ & 0x8) == 8);
        }


        public int getLevel() {
            return this.level_;
        }


        public boolean hasIsLeader() {
            return ((this.bitField0_ & 0x10) == 16);
        }


        public int getIsLeader() {
            return this.isLeader_;
        }


        public List<Common.Avatar> getAvatarsList() {
            return this.avatars_;
        }


        public List<? extends Common.AvatarOrBuilder> getAvatarsOrBuilderList() {
            return (List) this.avatars_;
        }


        public int getAvatarsCount() {
            return this.avatars_.size();
        }


        public Common.Avatar getAvatars(int index) {
            return this.avatars_.get(index);
        }


        public Common.AvatarOrBuilder getAvatarsOrBuilder(int index) {
            return (Common.AvatarOrBuilder) this.avatars_.get(index);
        }


        public boolean hasFightPower() {
            return ((this.bitField0_ & 0x20) == 32);
        }


        public int getFightPower() {
            return this.fightPower_;
        }


        public boolean hasStatus() {
            return ((this.bitField0_ & 0x40) == 64);
        }


        public int getStatus() {
            return this.status_;
        }


        public boolean hasAreaDes() {
            return ((this.bitField0_ & 0x80) == 128);
        }


        public String getAreaDes() {
            Object ref = this.areaDes_;
            if (ref instanceof String) {
                return (String) ref;
            }
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                this.areaDes_ = s;
            }
            return s;
        }


        public ByteString getAreaDesBytes() {
            Object ref = this.areaDes_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.areaDes_ = b;
                return b;
            }
            return (ByteString) ref;
        }


        public boolean hasUpLevel() {
            return ((this.bitField0_ & 0x100) == 256);
        }


        public int getUpLevel() {
            return this.upLevel_;
        }


        public boolean hasFollow() {
            return ((this.bitField0_ & 0x200) == 512);
        }


        public int getFollow() {
            return this.follow_;
        }


        public boolean hasGuildName() {
            return ((this.bitField0_ & 0x400) == 1024);
        }


        public String getGuildName() {
            Object ref = this.guildName_;
            if (ref instanceof String) {
                return (String) ref;
            }
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                this.guildName_ = s;
            }
            return s;
        }


        public ByteString getGuildNameBytes() {
            Object ref = this.guildName_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.guildName_ = b;
                return b;
            }
            return (ByteString) ref;
        }


        private void initFields() {
            this.id_ = "";
            this.pro_ = 0;
            this.name_ = "";
            this.level_ = 0;
            this.isLeader_ = 0;
            this.avatars_ = Collections.emptyList();
            this.fightPower_ = 0;
            this.status_ = 0;
            this.areaDes_ = "";
            this.upLevel_ = 0;
            this.follow_ = 0;
            this.guildName_ = "";
        }


        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            if (!hasId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasFightPower()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getAvatarsCount(); i++) {
                if (!getAvatars(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }


        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeBytes(1, getIdBytes());
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeInt32(2, this.pro_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                output.writeBytes(3, getNameBytes());
            }
            if ((this.bitField0_ & 0x8) == 8) {
                output.writeInt32(4, this.level_);
            }
            if ((this.bitField0_ & 0x10) == 16) {
                output.writeInt32(5, this.isLeader_);
            }
            for (int i = 0; i < this.avatars_.size(); i++) {
                output.writeMessage(6, (MessageLite) this.avatars_.get(i));
            }
            if ((this.bitField0_ & 0x20) == 32) {
                output.writeInt32(7, this.fightPower_);
            }
            if ((this.bitField0_ & 0x40) == 64) {
                output.writeInt32(8, this.status_);
            }
            if ((this.bitField0_ & 0x80) == 128) {
                output.writeBytes(9, getAreaDesBytes());
            }
            if ((this.bitField0_ & 0x100) == 256) {
                output.writeInt32(10, this.upLevel_);
            }
            if ((this.bitField0_ & 0x200) == 512) {
                output.writeInt32(11, this.follow_);
            }
            if ((this.bitField0_ & 0x400) == 1024) {
                output.writeBytes(12, getGuildNameBytes());
            }
            getUnknownFields().writeTo(output);
        }


        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeBytesSize(1, getIdBytes());
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeInt32Size(2, this.pro_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                size += CodedOutputStream.computeBytesSize(3, getNameBytes());
            }
            if ((this.bitField0_ & 0x8) == 8) {
                size += CodedOutputStream.computeInt32Size(4, this.level_);
            }
            if ((this.bitField0_ & 0x10) == 16) {
                size += CodedOutputStream.computeInt32Size(5, this.isLeader_);
            }
            for (int i = 0; i < this.avatars_.size(); i++) {
                size += CodedOutputStream.computeMessageSize(6, (MessageLite) this.avatars_.get(i));
            }
            if ((this.bitField0_ & 0x20) == 32) {
                size += CodedOutputStream.computeInt32Size(7, this.fightPower_);
            }
            if ((this.bitField0_ & 0x40) == 64) {
                size += CodedOutputStream.computeInt32Size(8, this.status_);
            }
            if ((this.bitField0_ & 0x80) == 128) {
                size += CodedOutputStream.computeBytesSize(9, getAreaDesBytes());
            }
            if ((this.bitField0_ & 0x100) == 256) {
                size += CodedOutputStream.computeInt32Size(10, this.upLevel_);
            }
            if ((this.bitField0_ & 0x200) == 512) {
                size += CodedOutputStream.computeInt32Size(11, this.follow_);
            }
            if ((this.bitField0_ & 0x400) == 1024) {
                size += CodedOutputStream.computeBytesSize(12, getGuildNameBytes());
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }


        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }


        public static TeamMemberDetail parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (TeamMemberDetail) PARSER.parseFrom(data);
        }


        public static TeamMemberDetail parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (TeamMemberDetail) PARSER.parseFrom(data, extensionRegistry);
        }


        public static TeamMemberDetail parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (TeamMemberDetail) PARSER.parseFrom(data);
        }


        public static TeamMemberDetail parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (TeamMemberDetail) PARSER.parseFrom(data, extensionRegistry);
        }


        public static TeamMemberDetail parseFrom(InputStream input) throws IOException {
            return (TeamMemberDetail) PARSER.parseFrom(input);
        }


        public static TeamMemberDetail parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (TeamMemberDetail) PARSER.parseFrom(input, extensionRegistry);
        }


        public static TeamMemberDetail parseDelimitedFrom(InputStream input) throws IOException {
            return (TeamMemberDetail) PARSER.parseDelimitedFrom(input);
        }


        public static TeamMemberDetail parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (TeamMemberDetail) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }


        public static TeamMemberDetail parseFrom(CodedInputStream input) throws IOException {
            return (TeamMemberDetail) PARSER.parseFrom(input);
        }


        public static TeamMemberDetail parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (TeamMemberDetail) PARSER.parseFrom(input, extensionRegistry);
        }


        public static Builder newBuilder() {
            return Builder.create();
        }


        public Builder newBuilderForType() {
            return newBuilder();
        }


        public static Builder newBuilder(TeamMemberDetail prototype) {
            return newBuilder().mergeFrom(prototype);
        }


        public Builder toBuilder() {
            return newBuilder(this);
        }


        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }


        public static final class Builder
                extends GeneratedMessage.Builder<Builder>
                implements TeamHandler.TeamMemberDetailOrBuilder {
            private int bitField0_;


            private Object id_;


            private int pro_;


            private Object name_;


            private int level_;


            private int isLeader_;


            private List<Common.Avatar> avatars_;


            private RepeatedFieldBuilder<Common.Avatar, Common.Avatar.Builder, Common.AvatarOrBuilder> avatarsBuilder_;


            private int fightPower_;


            private int status_;


            private Object areaDes_;


            private int upLevel_;


            private int follow_;


            private Object guildName_;


            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_TeamMemberDetail_descriptor;
            }


            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_TeamMemberDetail_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.TeamMemberDetail.class, Builder.class);
            }


            private Builder() {
                this.id_ = "";
                this.name_ = "";
                this.avatars_ = Collections.emptyList();
                this.areaDes_ = "";
                this.guildName_ = "";
                maybeForceBuilderInitialization();
            }


            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.id_ = "";
                this.name_ = "";
                this.avatars_ = Collections.emptyList();
                this.areaDes_ = "";
                this.guildName_ = "";
                maybeForceBuilderInitialization();
            }


            private void maybeForceBuilderInitialization() {
                if (TeamHandler.TeamMemberDetail.alwaysUseFieldBuilders) {
                    getAvatarsFieldBuilder();
                }
            }


            private static Builder create() {
                return new Builder();
            }


            public Builder clear() {
                super.clear();
                this.id_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                this.pro_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                this.name_ = "";
                this.bitField0_ &= 0xFFFFFFFB;
                this.level_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                this.isLeader_ = 0;
                this.bitField0_ &= 0xFFFFFFEF;
                if (this.avatarsBuilder_ == null) {
                    this.avatars_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFDF;
                } else {
                    this.avatarsBuilder_.clear();
                }
                this.fightPower_ = 0;
                this.bitField0_ &= 0xFFFFFFBF;
                this.status_ = 0;
                this.bitField0_ &= 0xFFFFFF7F;
                this.areaDes_ = "";
                this.bitField0_ &= 0xFFFFFEFF;
                this.upLevel_ = 0;
                this.bitField0_ &= 0xFFFFFDFF;
                this.follow_ = 0;
                this.bitField0_ &= 0xFFFFFBFF;
                this.guildName_ = "";
                this.bitField0_ &= 0xFFFFF7FF;
                return this;
            }


            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }


            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_TeamMemberDetail_descriptor;
            }


            public TeamHandler.TeamMemberDetail getDefaultInstanceForType() {
                return TeamHandler.TeamMemberDetail.getDefaultInstance();
            }


            public TeamHandler.TeamMemberDetail build() {
                TeamHandler.TeamMemberDetail result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }


            public TeamHandler.TeamMemberDetail buildPartial() {
                TeamHandler.TeamMemberDetail result = new TeamHandler.TeamMemberDetail(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) {
                    to_bitField0_ |= 0x1;
                }
                result.id_ = this.id_;
                if ((from_bitField0_ & 0x2) == 2) {
                    to_bitField0_ |= 0x2;
                }
                result.pro_ = this.pro_;
                if ((from_bitField0_ & 0x4) == 4) {
                    to_bitField0_ |= 0x4;
                }
                result.name_ = this.name_;
                if ((from_bitField0_ & 0x8) == 8) {
                    to_bitField0_ |= 0x8;
                }
                result.level_ = this.level_;
                if ((from_bitField0_ & 0x10) == 16) {
                    to_bitField0_ |= 0x10;
                }
                result.isLeader_ = this.isLeader_;
                if (this.avatarsBuilder_ == null) {
                    if ((this.bitField0_ & 0x20) == 32) {
                        this.avatars_ = Collections.unmodifiableList(this.avatars_);
                        this.bitField0_ &= 0xFFFFFFDF;
                    }
                    result.avatars_ = this.avatars_;
                } else {
                    result.avatars_ = this.avatarsBuilder_.build();
                }
                if ((from_bitField0_ & 0x40) == 64) {
                    to_bitField0_ |= 0x20;
                }
                result.fightPower_ = this.fightPower_;
                if ((from_bitField0_ & 0x80) == 128) {
                    to_bitField0_ |= 0x40;
                }
                result.status_ = this.status_;
                if ((from_bitField0_ & 0x100) == 256) {
                    to_bitField0_ |= 0x80;
                }
                result.areaDes_ = this.areaDes_;
                if ((from_bitField0_ & 0x200) == 512) {
                    to_bitField0_ |= 0x100;
                }
                result.upLevel_ = this.upLevel_;
                if ((from_bitField0_ & 0x400) == 1024) {
                    to_bitField0_ |= 0x200;
                }
                result.follow_ = this.follow_;
                if ((from_bitField0_ & 0x800) == 2048) {
                    to_bitField0_ |= 0x400;
                }
                result.guildName_ = this.guildName_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }


            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.TeamMemberDetail) {
                    return mergeFrom((TeamHandler.TeamMemberDetail) other);
                }
                super.mergeFrom(other);
                return this;
            }


            public Builder mergeFrom(TeamHandler.TeamMemberDetail other) {
                if (other == TeamHandler.TeamMemberDetail.getDefaultInstance()) {
                    return this;
                }
                if (other.hasId()) {
                    this.bitField0_ |= 0x1;
                    this.id_ = other.id_;
                    onChanged();
                }
                if (other.hasPro()) {
                    setPro(other.getPro());
                }
                if (other.hasName()) {
                    this.bitField0_ |= 0x4;
                    this.name_ = other.name_;
                    onChanged();
                }
                if (other.hasLevel()) {
                    setLevel(other.getLevel());
                }
                if (other.hasIsLeader()) {
                    setIsLeader(other.getIsLeader());
                }
                if (this.avatarsBuilder_ == null) {
                    if (!other.avatars_.isEmpty()) {
                        if (this.avatars_.isEmpty()) {
                            this.avatars_ = other.avatars_;
                            this.bitField0_ &= 0xFFFFFFDF;
                        } else {
                            ensureAvatarsIsMutable();
                            this.avatars_.addAll(other.avatars_);
                        }
                        onChanged();
                    }
                } else if (!other.avatars_.isEmpty()) {
                    if (this.avatarsBuilder_.isEmpty()) {
                        this.avatarsBuilder_.dispose();
                        this.avatarsBuilder_ = null;
                        this.avatars_ = other.avatars_;
                        this.bitField0_ &= 0xFFFFFFDF;
                        this.avatarsBuilder_ = TeamHandler.TeamMemberDetail.alwaysUseFieldBuilders ? getAvatarsFieldBuilder() : null;
                    } else {
                        this.avatarsBuilder_.addAllMessages(other.avatars_);
                    }
                }
                if (other.hasFightPower()) {
                    setFightPower(other.getFightPower());
                }
                if (other.hasStatus()) {
                    setStatus(other.getStatus());
                }
                if (other.hasAreaDes()) {
                    this.bitField0_ |= 0x100;
                    this.areaDes_ = other.areaDes_;
                    onChanged();
                }
                if (other.hasUpLevel()) {
                    setUpLevel(other.getUpLevel());
                }
                if (other.hasFollow()) {
                    setFollow(other.getFollow());
                }
                if (other.hasGuildName()) {
                    this.bitField0_ |= 0x800;
                    this.guildName_ = other.guildName_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }


            public final boolean isInitialized() {
                if (!hasId()) {
                    return false;
                }
                if (!hasFightPower()) {
                    return false;
                }
                for (int i = 0; i < getAvatarsCount(); i++) {
                    if (!getAvatars(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }


            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.TeamMemberDetail parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.TeamMemberDetail) TeamHandler.TeamMemberDetail.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.TeamMemberDetail) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }


            public boolean hasId() {
                return ((this.bitField0_ & 0x1) == 1);
            }


            public String getId() {
                Object ref = this.id_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.id_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getIdBytes() {
                Object ref = this.id_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.id_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x1;
                this.id_ = value;
                onChanged();
                return this;
            }


            public Builder clearId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.id_ = TeamHandler.TeamMemberDetail.getDefaultInstance().getId();
                onChanged();
                return this;
            }


            public Builder setIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x1;
                this.id_ = value;
                onChanged();
                return this;
            }


            public boolean hasPro() {
                return ((this.bitField0_ & 0x2) == 2);
            }


            public int getPro() {
                return this.pro_;
            }


            public Builder setPro(int value) {
                this.bitField0_ |= 0x2;
                this.pro_ = value;
                onChanged();
                return this;
            }


            public Builder clearPro() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.pro_ = 0;
                onChanged();
                return this;
            }


            public boolean hasName() {
                return ((this.bitField0_ & 0x4) == 4);
            }


            public String getName() {
                Object ref = this.name_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.name_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getNameBytes() {
                Object ref = this.name_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.name_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setName(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x4;
                this.name_ = value;
                onChanged();
                return this;
            }


            public Builder clearName() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.name_ = TeamHandler.TeamMemberDetail.getDefaultInstance().getName();
                onChanged();
                return this;
            }


            public Builder setNameBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x4;
                this.name_ = value;
                onChanged();
                return this;
            }


            public boolean hasLevel() {
                return ((this.bitField0_ & 0x8) == 8);
            }


            public int getLevel() {
                return this.level_;
            }


            public Builder setLevel(int value) {
                this.bitField0_ |= 0x8;
                this.level_ = value;
                onChanged();
                return this;
            }


            public Builder clearLevel() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.level_ = 0;
                onChanged();
                return this;
            }


            public boolean hasIsLeader() {
                return ((this.bitField0_ & 0x10) == 16);
            }


            public int getIsLeader() {
                return this.isLeader_;
            }


            public Builder setIsLeader(int value) {
                this.bitField0_ |= 0x10;
                this.isLeader_ = value;
                onChanged();
                return this;
            }


            public Builder clearIsLeader() {
                this.bitField0_ &= 0xFFFFFFEF;
                this.isLeader_ = 0;
                onChanged();
                return this;
            }


            private void ensureAvatarsIsMutable() {
                if ((this.bitField0_ & 0x20) != 32) {
                    this.avatars_ = new ArrayList<>(this.avatars_);
                    this.bitField0_ |= 0x20;
                }
            }


            public List<Common.Avatar> getAvatarsList() {
                if (this.avatarsBuilder_ == null) {
                    return Collections.unmodifiableList(this.avatars_);
                }
                return this.avatarsBuilder_.getMessageList();
            }


            public int getAvatarsCount() {
                if (this.avatarsBuilder_ == null) {
                    return this.avatars_.size();
                }
                return this.avatarsBuilder_.getCount();
            }


            public Common.Avatar getAvatars(int index) {
                if (this.avatarsBuilder_ == null) {
                    return this.avatars_.get(index);
                }
                return (Common.Avatar) this.avatarsBuilder_.getMessage(index);
            }


            public Builder setAvatars(int index, Common.Avatar value) {
                if (this.avatarsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureAvatarsIsMutable();
                    this.avatars_.set(index, value);
                    onChanged();
                } else {
                    this.avatarsBuilder_.setMessage(index, (GeneratedMessage) value);
                }
                return this;
            }


            public Builder setAvatars(int index, Common.Avatar.Builder builderForValue) {
                if (this.avatarsBuilder_ == null) {
                    ensureAvatarsIsMutable();
                    this.avatars_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.avatarsBuilder_.setMessage(index, (GeneratedMessage) builderForValue.build());
                }
                return this;
            }


            public Builder addAvatars(Common.Avatar value) {
                if (this.avatarsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureAvatarsIsMutable();
                    this.avatars_.add(value);
                    onChanged();
                } else {
                    this.avatarsBuilder_.addMessage((GeneratedMessage) value);
                }
                return this;
            }


            public Builder addAvatars(int index, Common.Avatar value) {
                if (this.avatarsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureAvatarsIsMutable();
                    this.avatars_.add(index, value);
                    onChanged();
                } else {
                    this.avatarsBuilder_.addMessage(index, (GeneratedMessage) value);
                }
                return this;
            }


            public Builder addAvatars(Common.Avatar.Builder builderForValue) {
                if (this.avatarsBuilder_ == null) {
                    ensureAvatarsIsMutable();
                    this.avatars_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.avatarsBuilder_.addMessage((GeneratedMessage) builderForValue.build());
                }
                return this;
            }


            public Builder addAvatars(int index, Common.Avatar.Builder builderForValue) {
                if (this.avatarsBuilder_ == null) {
                    ensureAvatarsIsMutable();
                    this.avatars_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.avatarsBuilder_.addMessage(index, (GeneratedMessage) builderForValue.build());
                }
                return this;
            }


            public Builder addAllAvatars(Iterable<? extends Common.Avatar> values) {
                if (this.avatarsBuilder_ == null) {
                    ensureAvatarsIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.avatars_);
                    onChanged();
                } else {
                    this.avatarsBuilder_.addAllMessages(values);
                }
                return this;
            }


            public Builder clearAvatars() {
                if (this.avatarsBuilder_ == null) {
                    this.avatars_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFDF;
                    onChanged();
                } else {
                    this.avatarsBuilder_.clear();
                }
                return this;
            }


            public Builder removeAvatars(int index) {
                if (this.avatarsBuilder_ == null) {
                    ensureAvatarsIsMutable();
                    this.avatars_.remove(index);
                    onChanged();
                } else {
                    this.avatarsBuilder_.remove(index);
                }
                return this;
            }


            public Common.Avatar.Builder getAvatarsBuilder(int index) {
                return (Common.Avatar.Builder) getAvatarsFieldBuilder().getBuilder(index);
            }


            public Common.AvatarOrBuilder getAvatarsOrBuilder(int index) {
                if (this.avatarsBuilder_ == null) {
                    return (Common.AvatarOrBuilder) this.avatars_.get(index);
                }
                return (Common.AvatarOrBuilder) this.avatarsBuilder_.getMessageOrBuilder(index);
            }


            public List<? extends Common.AvatarOrBuilder> getAvatarsOrBuilderList() {
                if (this.avatarsBuilder_ != null) {
                    return this.avatarsBuilder_.getMessageOrBuilderList();
                }
                return (List) Collections.unmodifiableList(this.avatars_);
            }


            public Common.Avatar.Builder addAvatarsBuilder() {
                return (Common.Avatar.Builder) getAvatarsFieldBuilder().addBuilder((GeneratedMessage) Common.Avatar.getDefaultInstance());
            }


            public Common.Avatar.Builder addAvatarsBuilder(int index) {
                return (Common.Avatar.Builder) getAvatarsFieldBuilder().addBuilder(index, (GeneratedMessage) Common.Avatar.getDefaultInstance());
            }


            public List<Common.Avatar.Builder> getAvatarsBuilderList() {
                return getAvatarsFieldBuilder().getBuilderList();
            }


            private RepeatedFieldBuilder<Common.Avatar, Common.Avatar.Builder, Common.AvatarOrBuilder> getAvatarsFieldBuilder() {
                if (this.avatarsBuilder_ == null) {
                    this.avatarsBuilder_ = new RepeatedFieldBuilder(this.avatars_, ((this.bitField0_ & 0x20) == 32), getParentForChildren(), isClean());
                    this.avatars_ = null;
                }
                return this.avatarsBuilder_;
            }


            public boolean hasFightPower() {
                return ((this.bitField0_ & 0x40) == 64);
            }


            public int getFightPower() {
                return this.fightPower_;
            }


            public Builder setFightPower(int value) {
                this.bitField0_ |= 0x40;
                this.fightPower_ = value;
                onChanged();
                return this;
            }


            public Builder clearFightPower() {
                this.bitField0_ &= 0xFFFFFFBF;
                this.fightPower_ = 0;
                onChanged();
                return this;
            }


            public boolean hasStatus() {
                return ((this.bitField0_ & 0x80) == 128);
            }


            public int getStatus() {
                return this.status_;
            }


            public Builder setStatus(int value) {
                this.bitField0_ |= 0x80;
                this.status_ = value;
                onChanged();
                return this;
            }


            public Builder clearStatus() {
                this.bitField0_ &= 0xFFFFFF7F;
                this.status_ = 0;
                onChanged();
                return this;
            }


            public boolean hasAreaDes() {
                return ((this.bitField0_ & 0x100) == 256);
            }


            public String getAreaDes() {
                Object ref = this.areaDes_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.areaDes_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getAreaDesBytes() {
                Object ref = this.areaDes_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.areaDes_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setAreaDes(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x100;
                this.areaDes_ = value;
                onChanged();
                return this;
            }


            public Builder clearAreaDes() {
                this.bitField0_ &= 0xFFFFFEFF;
                this.areaDes_ = TeamHandler.TeamMemberDetail.getDefaultInstance().getAreaDes();
                onChanged();
                return this;
            }


            public Builder setAreaDesBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x100;
                this.areaDes_ = value;
                onChanged();
                return this;
            }


            public boolean hasUpLevel() {
                return ((this.bitField0_ & 0x200) == 512);
            }


            public int getUpLevel() {
                return this.upLevel_;
            }


            public Builder setUpLevel(int value) {
                this.bitField0_ |= 0x200;
                this.upLevel_ = value;
                onChanged();
                return this;
            }


            public Builder clearUpLevel() {
                this.bitField0_ &= 0xFFFFFDFF;
                this.upLevel_ = 0;
                onChanged();
                return this;
            }


            public boolean hasFollow() {
                return ((this.bitField0_ & 0x400) == 1024);
            }


            public int getFollow() {
                return this.follow_;
            }


            public Builder setFollow(int value) {
                this.bitField0_ |= 0x400;
                this.follow_ = value;
                onChanged();
                return this;
            }


            public Builder clearFollow() {
                this.bitField0_ &= 0xFFFFFBFF;
                this.follow_ = 0;
                onChanged();
                return this;
            }


            public boolean hasGuildName() {
                return ((this.bitField0_ & 0x800) == 2048);
            }


            public String getGuildName() {
                Object ref = this.guildName_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.guildName_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getGuildNameBytes() {
                Object ref = this.guildName_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.guildName_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setGuildName(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x800;
                this.guildName_ = value;
                onChanged();
                return this;
            }


            public Builder clearGuildName() {
                this.bitField0_ &= 0xFFFFF7FF;
                this.guildName_ = TeamHandler.TeamMemberDetail.getDefaultInstance().getGuildName();
                onChanged();
                return this;
            }


            public Builder setGuildNameBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x800;
                this.guildName_ = value;
                onChanged();
                return this;
            }
        }
    }


    public static final class Team
            extends GeneratedMessage
            implements TeamOrBuilder {
        private static final Team defaultInstance = new Team(true);
        private final UnknownFieldSet unknownFields;

        private Team(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private Team(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static Team getDefaultInstance() {
            return defaultInstance;
        }

        public Team getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Team(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.id_ = bs;
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.leaderId_ = bs;
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.isApplied_ = input.readInt32();
                            break;
                        case 34:
                            if ((mutable_bitField0_ & 0x8) != 8) {
                                this.teamMembers_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x8;
                            }
                            this.teamMembers_.add(input.readMessage(TeamHandler.TeamMemberBasic.PARSER, extensionRegistry));
                            break;
                        case 40:
                            this.bitField0_ |= 0x8;
                            this.minLevel_ = input.readInt32();
                            break;
                        case 48:
                            this.bitField0_ |= 0x10;
                            this.maxLevel_ = input.readInt32();
                            break;
                        case 56:
                            this.bitField0_ |= 0x20;
                            this.targetId_ = input.readInt32();
                            break;
                        case 64:
                            this.bitField0_ |= 0x40;
                            this.isFighting_ = input.readBool();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x8) == 8)
                    this.teamMembers_ = Collections.unmodifiableList(this.teamMembers_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_Team_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_Team_fieldAccessorTable.ensureFieldAccessorsInitialized(Team.class, Builder.class);
        }

        public static Parser<Team> PARSER = (Parser<Team>) new AbstractParser<Team>() {
            public TeamHandler.Team parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.Team(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int ID_FIELD_NUMBER = 1;
        private Object id_;
        public static final int LEADERID_FIELD_NUMBER = 2;
        private Object leaderId_;
        public static final int ISAPPLIED_FIELD_NUMBER = 3;
        private int isApplied_;
        public static final int TEAMMEMBERS_FIELD_NUMBER = 4;
        private List<TeamHandler.TeamMemberBasic> teamMembers_;
        public static final int MINLEVEL_FIELD_NUMBER = 5;
        private int minLevel_;
        public static final int MAXLEVEL_FIELD_NUMBER = 6;
        private int maxLevel_;
        public static final int TARGETID_FIELD_NUMBER = 7;
        private int targetId_;
        public static final int ISFIGHTING_FIELD_NUMBER = 8;
        private boolean isFighting_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<Team> getParserForType() {
            return PARSER;
        }

        public boolean hasId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getId() {
            Object ref = this.id_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.id_ = s;
            return s;
        }

        public ByteString getIdBytes() {
            Object ref = this.id_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.id_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasLeaderId() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getLeaderId() {
            Object ref = this.leaderId_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.leaderId_ = s;
            return s;
        }

        static {
            defaultInstance.initFields();
        }


        public ByteString getLeaderIdBytes() {
            Object ref = this.leaderId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.leaderId_ = b;
                return b;
            }
            return (ByteString) ref;
        }


        public boolean hasIsApplied() {
            return ((this.bitField0_ & 0x4) == 4);
        }


        public int getIsApplied() {
            return this.isApplied_;
        }


        public List<TeamHandler.TeamMemberBasic> getTeamMembersList() {
            return this.teamMembers_;
        }


        public List<? extends TeamHandler.TeamMemberBasicOrBuilder> getTeamMembersOrBuilderList() {
            return (List) this.teamMembers_;
        }


        public int getTeamMembersCount() {
            return this.teamMembers_.size();
        }


        public TeamHandler.TeamMemberBasic getTeamMembers(int index) {
            return this.teamMembers_.get(index);
        }


        public TeamHandler.TeamMemberBasicOrBuilder getTeamMembersOrBuilder(int index) {
            return this.teamMembers_.get(index);
        }


        public boolean hasMinLevel() {
            return ((this.bitField0_ & 0x8) == 8);
        }


        public int getMinLevel() {
            return this.minLevel_;
        }


        public boolean hasMaxLevel() {
            return ((this.bitField0_ & 0x10) == 16);
        }


        public int getMaxLevel() {
            return this.maxLevel_;
        }


        public boolean hasTargetId() {
            return ((this.bitField0_ & 0x20) == 32);
        }


        public int getTargetId() {
            return this.targetId_;
        }


        public boolean hasIsFighting() {
            return ((this.bitField0_ & 0x40) == 64);
        }


        public boolean getIsFighting() {
            return this.isFighting_;
        }


        private void initFields() {
            this.id_ = "";
            this.leaderId_ = "";
            this.isApplied_ = 0;
            this.teamMembers_ = Collections.emptyList();
            this.minLevel_ = 0;
            this.maxLevel_ = 0;
            this.targetId_ = 0;
            this.isFighting_ = false;
        }


        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            if (!hasId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasMinLevel()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasMaxLevel()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getTeamMembersCount(); i++) {
                if (!getTeamMembers(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }


        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeBytes(1, getIdBytes());
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeBytes(2, getLeaderIdBytes());
            }
            if ((this.bitField0_ & 0x4) == 4) {
                output.writeInt32(3, this.isApplied_);
            }
            for (int i = 0; i < this.teamMembers_.size(); i++) {
                output.writeMessage(4, (MessageLite) this.teamMembers_.get(i));
            }
            if ((this.bitField0_ & 0x8) == 8) {
                output.writeInt32(5, this.minLevel_);
            }
            if ((this.bitField0_ & 0x10) == 16) {
                output.writeInt32(6, this.maxLevel_);
            }
            if ((this.bitField0_ & 0x20) == 32) {
                output.writeInt32(7, this.targetId_);
            }
            if ((this.bitField0_ & 0x40) == 64) {
                output.writeBool(8, this.isFighting_);
            }
            getUnknownFields().writeTo(output);
        }


        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeBytesSize(1, getIdBytes());
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeBytesSize(2, getLeaderIdBytes());
            }
            if ((this.bitField0_ & 0x4) == 4) {
                size += CodedOutputStream.computeInt32Size(3, this.isApplied_);
            }
            for (int i = 0; i < this.teamMembers_.size(); i++) {
                size += CodedOutputStream.computeMessageSize(4, (MessageLite) this.teamMembers_.get(i));
            }
            if ((this.bitField0_ & 0x8) == 8) {
                size += CodedOutputStream.computeInt32Size(5, this.minLevel_);
            }
            if ((this.bitField0_ & 0x10) == 16) {
                size += CodedOutputStream.computeInt32Size(6, this.maxLevel_);
            }
            if ((this.bitField0_ & 0x20) == 32) {
                size += CodedOutputStream.computeInt32Size(7, this.targetId_);
            }
            if ((this.bitField0_ & 0x40) == 64) {
                size += CodedOutputStream.computeBoolSize(8, this.isFighting_);
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }


        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }


        public static Team parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (Team) PARSER.parseFrom(data);
        }


        public static Team parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (Team) PARSER.parseFrom(data, extensionRegistry);
        }


        public static Team parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (Team) PARSER.parseFrom(data);
        }


        public static Team parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (Team) PARSER.parseFrom(data, extensionRegistry);
        }


        public static Team parseFrom(InputStream input) throws IOException {
            return (Team) PARSER.parseFrom(input);
        }


        public static Team parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (Team) PARSER.parseFrom(input, extensionRegistry);
        }


        public static Team parseDelimitedFrom(InputStream input) throws IOException {
            return (Team) PARSER.parseDelimitedFrom(input);
        }


        public static Team parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (Team) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }


        public static Team parseFrom(CodedInputStream input) throws IOException {
            return (Team) PARSER.parseFrom(input);
        }


        public static Team parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (Team) PARSER.parseFrom(input, extensionRegistry);
        }


        public static Builder newBuilder() {
            return Builder.create();
        }


        public Builder newBuilderForType() {
            return newBuilder();
        }


        public static Builder newBuilder(Team prototype) {
            return newBuilder().mergeFrom(prototype);
        }


        public Builder toBuilder() {
            return newBuilder(this);
        }


        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }


        public static final class Builder
                extends GeneratedMessage.Builder<Builder>
                implements TeamHandler.TeamOrBuilder {
            private int bitField0_;


            private Object id_;


            private Object leaderId_;


            private int isApplied_;


            private List<TeamHandler.TeamMemberBasic> teamMembers_;


            private RepeatedFieldBuilder<TeamHandler.TeamMemberBasic, TeamHandler.TeamMemberBasic.Builder, TeamHandler.TeamMemberBasicOrBuilder> teamMembersBuilder_;


            private int minLevel_;


            private int maxLevel_;


            private int targetId_;


            private boolean isFighting_;


            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_Team_descriptor;
            }


            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_Team_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.Team.class, Builder.class);
            }


            private Builder() {
                this.id_ = "";
                this.leaderId_ = "";
                this.teamMembers_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }


            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.id_ = "";
                this.leaderId_ = "";
                this.teamMembers_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }


            private void maybeForceBuilderInitialization() {
                if (TeamHandler.Team.alwaysUseFieldBuilders) {
                    getTeamMembersFieldBuilder();
                }
            }


            private static Builder create() {
                return new Builder();
            }


            public Builder clear() {
                super.clear();
                this.id_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                this.leaderId_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                this.isApplied_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                if (this.teamMembersBuilder_ == null) {
                    this.teamMembers_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFF7;
                } else {
                    this.teamMembersBuilder_.clear();
                }
                this.minLevel_ = 0;
                this.bitField0_ &= 0xFFFFFFEF;
                this.maxLevel_ = 0;
                this.bitField0_ &= 0xFFFFFFDF;
                this.targetId_ = 0;
                this.bitField0_ &= 0xFFFFFFBF;
                this.isFighting_ = false;
                this.bitField0_ &= 0xFFFFFF7F;
                return this;
            }


            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }


            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_Team_descriptor;
            }


            public TeamHandler.Team getDefaultInstanceForType() {
                return TeamHandler.Team.getDefaultInstance();
            }


            public TeamHandler.Team build() {
                TeamHandler.Team result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }


            public TeamHandler.Team buildPartial() {
                TeamHandler.Team result = new TeamHandler.Team(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) {
                    to_bitField0_ |= 0x1;
                }
                result.id_ = this.id_;
                if ((from_bitField0_ & 0x2) == 2) {
                    to_bitField0_ |= 0x2;
                }
                result.leaderId_ = this.leaderId_;
                if ((from_bitField0_ & 0x4) == 4) {
                    to_bitField0_ |= 0x4;
                }
                result.isApplied_ = this.isApplied_;
                if (this.teamMembersBuilder_ == null) {
                    if ((this.bitField0_ & 0x8) == 8) {
                        this.teamMembers_ = Collections.unmodifiableList(this.teamMembers_);
                        this.bitField0_ &= 0xFFFFFFF7;
                    }
                    result.teamMembers_ = this.teamMembers_;
                } else {
                    result.teamMembers_ = this.teamMembersBuilder_.build();
                }
                if ((from_bitField0_ & 0x10) == 16) {
                    to_bitField0_ |= 0x8;
                }
                result.minLevel_ = this.minLevel_;
                if ((from_bitField0_ & 0x20) == 32) {
                    to_bitField0_ |= 0x10;
                }
                result.maxLevel_ = this.maxLevel_;
                if ((from_bitField0_ & 0x40) == 64) {
                    to_bitField0_ |= 0x20;
                }
                result.targetId_ = this.targetId_;
                if ((from_bitField0_ & 0x80) == 128) {
                    to_bitField0_ |= 0x40;
                }
                result.isFighting_ = this.isFighting_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }


            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.Team) {
                    return mergeFrom((TeamHandler.Team) other);
                }
                super.mergeFrom(other);
                return this;
            }


            public Builder mergeFrom(TeamHandler.Team other) {
                if (other == TeamHandler.Team.getDefaultInstance()) {
                    return this;
                }
                if (other.hasId()) {
                    this.bitField0_ |= 0x1;
                    this.id_ = other.id_;
                    onChanged();
                }
                if (other.hasLeaderId()) {
                    this.bitField0_ |= 0x2;
                    this.leaderId_ = other.leaderId_;
                    onChanged();
                }
                if (other.hasIsApplied()) {
                    setIsApplied(other.getIsApplied());
                }
                if (this.teamMembersBuilder_ == null) {
                    if (!other.teamMembers_.isEmpty()) {
                        if (this.teamMembers_.isEmpty()) {
                            this.teamMembers_ = other.teamMembers_;
                            this.bitField0_ &= 0xFFFFFFF7;
                        } else {
                            ensureTeamMembersIsMutable();
                            this.teamMembers_.addAll(other.teamMembers_);
                        }
                        onChanged();
                    }
                } else if (!other.teamMembers_.isEmpty()) {
                    if (this.teamMembersBuilder_.isEmpty()) {
                        this.teamMembersBuilder_.dispose();
                        this.teamMembersBuilder_ = null;
                        this.teamMembers_ = other.teamMembers_;
                        this.bitField0_ &= 0xFFFFFFF7;
                        this.teamMembersBuilder_ = TeamHandler.Team.alwaysUseFieldBuilders ? getTeamMembersFieldBuilder() : null;
                    } else {
                        this.teamMembersBuilder_.addAllMessages(other.teamMembers_);
                    }
                }
                if (other.hasMinLevel()) {
                    setMinLevel(other.getMinLevel());
                }
                if (other.hasMaxLevel()) {
                    setMaxLevel(other.getMaxLevel());
                }
                if (other.hasTargetId()) {
                    setTargetId(other.getTargetId());
                }
                if (other.hasIsFighting()) {
                    setIsFighting(other.getIsFighting());
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }


            public final boolean isInitialized() {
                if (!hasId()) {
                    return false;
                }
                if (!hasMinLevel()) {
                    return false;
                }
                if (!hasMaxLevel()) {
                    return false;
                }
                for (int i = 0; i < getTeamMembersCount(); i++) {
                    if (!getTeamMembers(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }


            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.Team parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.Team) TeamHandler.Team.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.Team) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }


            public boolean hasId() {
                return ((this.bitField0_ & 0x1) == 1);
            }


            public String getId() {
                Object ref = this.id_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.id_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getIdBytes() {
                Object ref = this.id_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.id_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x1;
                this.id_ = value;
                onChanged();
                return this;
            }


            public Builder clearId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.id_ = TeamHandler.Team.getDefaultInstance().getId();
                onChanged();
                return this;
            }


            public Builder setIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x1;
                this.id_ = value;
                onChanged();
                return this;
            }


            public boolean hasLeaderId() {
                return ((this.bitField0_ & 0x2) == 2);
            }


            public String getLeaderId() {
                Object ref = this.leaderId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.leaderId_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getLeaderIdBytes() {
                Object ref = this.leaderId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.leaderId_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setLeaderId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x2;
                this.leaderId_ = value;
                onChanged();
                return this;
            }


            public Builder clearLeaderId() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.leaderId_ = TeamHandler.Team.getDefaultInstance().getLeaderId();
                onChanged();
                return this;
            }


            public Builder setLeaderIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x2;
                this.leaderId_ = value;
                onChanged();
                return this;
            }


            public boolean hasIsApplied() {
                return ((this.bitField0_ & 0x4) == 4);
            }


            public int getIsApplied() {
                return this.isApplied_;
            }


            public Builder setIsApplied(int value) {
                this.bitField0_ |= 0x4;
                this.isApplied_ = value;
                onChanged();
                return this;
            }


            public Builder clearIsApplied() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.isApplied_ = 0;
                onChanged();
                return this;
            }


            private void ensureTeamMembersIsMutable() {
                if ((this.bitField0_ & 0x8) != 8) {
                    this.teamMembers_ = new ArrayList<>(this.teamMembers_);
                    this.bitField0_ |= 0x8;
                }
            }


            public List<TeamHandler.TeamMemberBasic> getTeamMembersList() {
                if (this.teamMembersBuilder_ == null) {
                    return Collections.unmodifiableList(this.teamMembers_);
                }
                return this.teamMembersBuilder_.getMessageList();
            }


            public int getTeamMembersCount() {
                if (this.teamMembersBuilder_ == null) {
                    return this.teamMembers_.size();
                }
                return this.teamMembersBuilder_.getCount();
            }


            public TeamHandler.TeamMemberBasic getTeamMembers(int index) {
                if (this.teamMembersBuilder_ == null) {
                    return this.teamMembers_.get(index);
                }
                return (TeamHandler.TeamMemberBasic) this.teamMembersBuilder_.getMessage(index);
            }


            public Builder setTeamMembers(int index, TeamHandler.TeamMemberBasic value) {
                if (this.teamMembersBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureTeamMembersIsMutable();
                    this.teamMembers_.set(index, value);
                    onChanged();
                } else {
                    this.teamMembersBuilder_.setMessage(index, value);
                }
                return this;
            }


            public Builder setTeamMembers(int index, TeamHandler.TeamMemberBasic.Builder builderForValue) {
                if (this.teamMembersBuilder_ == null) {
                    ensureTeamMembersIsMutable();
                    this.teamMembers_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.teamMembersBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }


            public Builder addTeamMembers(TeamHandler.TeamMemberBasic value) {
                if (this.teamMembersBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureTeamMembersIsMutable();
                    this.teamMembers_.add(value);
                    onChanged();
                } else {
                    this.teamMembersBuilder_.addMessage(value);
                }
                return this;
            }


            public Builder addTeamMembers(int index, TeamHandler.TeamMemberBasic value) {
                if (this.teamMembersBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureTeamMembersIsMutable();
                    this.teamMembers_.add(index, value);
                    onChanged();
                } else {
                    this.teamMembersBuilder_.addMessage(index, value);
                }
                return this;
            }


            public Builder addTeamMembers(TeamHandler.TeamMemberBasic.Builder builderForValue) {
                if (this.teamMembersBuilder_ == null) {
                    ensureTeamMembersIsMutable();
                    this.teamMembers_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.teamMembersBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }


            public Builder addTeamMembers(int index, TeamHandler.TeamMemberBasic.Builder builderForValue) {
                if (this.teamMembersBuilder_ == null) {
                    ensureTeamMembersIsMutable();
                    this.teamMembers_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.teamMembersBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }


            public Builder addAllTeamMembers(Iterable<? extends TeamHandler.TeamMemberBasic> values) {
                if (this.teamMembersBuilder_ == null) {
                    ensureTeamMembersIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.teamMembers_);
                    onChanged();
                } else {
                    this.teamMembersBuilder_.addAllMessages(values);
                }
                return this;
            }


            public Builder clearTeamMembers() {
                if (this.teamMembersBuilder_ == null) {
                    this.teamMembers_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFF7;
                    onChanged();
                } else {
                    this.teamMembersBuilder_.clear();
                }
                return this;
            }


            public Builder removeTeamMembers(int index) {
                if (this.teamMembersBuilder_ == null) {
                    ensureTeamMembersIsMutable();
                    this.teamMembers_.remove(index);
                    onChanged();
                } else {
                    this.teamMembersBuilder_.remove(index);
                }
                return this;
            }


            public TeamHandler.TeamMemberBasic.Builder getTeamMembersBuilder(int index) {
                return (TeamHandler.TeamMemberBasic.Builder) getTeamMembersFieldBuilder().getBuilder(index);
            }


            public TeamHandler.TeamMemberBasicOrBuilder getTeamMembersOrBuilder(int index) {
                if (this.teamMembersBuilder_ == null) {
                    return this.teamMembers_.get(index);
                }
                return (TeamHandler.TeamMemberBasicOrBuilder) this.teamMembersBuilder_.getMessageOrBuilder(index);
            }


            public List<? extends TeamHandler.TeamMemberBasicOrBuilder> getTeamMembersOrBuilderList() {
                if (this.teamMembersBuilder_ != null) {
                    return this.teamMembersBuilder_.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList((List) this.teamMembers_);
            }


            public TeamHandler.TeamMemberBasic.Builder addTeamMembersBuilder() {
                return (TeamHandler.TeamMemberBasic.Builder) getTeamMembersFieldBuilder().addBuilder(TeamHandler.TeamMemberBasic.getDefaultInstance());
            }


            public TeamHandler.TeamMemberBasic.Builder addTeamMembersBuilder(int index) {
                return (TeamHandler.TeamMemberBasic.Builder) getTeamMembersFieldBuilder().addBuilder(index, TeamHandler.TeamMemberBasic.getDefaultInstance());
            }


            public List<TeamHandler.TeamMemberBasic.Builder> getTeamMembersBuilderList() {
                return getTeamMembersFieldBuilder().getBuilderList();
            }


            private RepeatedFieldBuilder<TeamHandler.TeamMemberBasic, TeamHandler.TeamMemberBasic.Builder, TeamHandler.TeamMemberBasicOrBuilder> getTeamMembersFieldBuilder() {
                if (this.teamMembersBuilder_ == null) {
                    this.teamMembersBuilder_ = new RepeatedFieldBuilder(this.teamMembers_, ((this.bitField0_ & 0x8) == 8), getParentForChildren(), isClean());
                    this.teamMembers_ = null;
                }
                return this.teamMembersBuilder_;
            }


            public boolean hasMinLevel() {
                return ((this.bitField0_ & 0x10) == 16);
            }


            public int getMinLevel() {
                return this.minLevel_;
            }


            public Builder setMinLevel(int value) {
                this.bitField0_ |= 0x10;
                this.minLevel_ = value;
                onChanged();
                return this;
            }


            public Builder clearMinLevel() {
                this.bitField0_ &= 0xFFFFFFEF;
                this.minLevel_ = 0;
                onChanged();
                return this;
            }


            public boolean hasMaxLevel() {
                return ((this.bitField0_ & 0x20) == 32);
            }


            public int getMaxLevel() {
                return this.maxLevel_;
            }


            public Builder setMaxLevel(int value) {
                this.bitField0_ |= 0x20;
                this.maxLevel_ = value;
                onChanged();
                return this;
            }


            public Builder clearMaxLevel() {
                this.bitField0_ &= 0xFFFFFFDF;
                this.maxLevel_ = 0;
                onChanged();
                return this;
            }


            public boolean hasTargetId() {
                return ((this.bitField0_ & 0x40) == 64);
            }


            public int getTargetId() {
                return this.targetId_;
            }


            public Builder setTargetId(int value) {
                this.bitField0_ |= 0x40;
                this.targetId_ = value;
                onChanged();
                return this;
            }


            public Builder clearTargetId() {
                this.bitField0_ &= 0xFFFFFFBF;
                this.targetId_ = 0;
                onChanged();
                return this;
            }


            public boolean hasIsFighting() {
                return ((this.bitField0_ & 0x80) == 128);
            }


            public boolean getIsFighting() {
                return this.isFighting_;
            }


            public Builder setIsFighting(boolean value) {
                this.bitField0_ |= 0x80;
                this.isFighting_ = value;
                onChanged();
                return this;
            }


            public Builder clearIsFighting() {
                this.bitField0_ &= 0xFFFFFF7F;
                this.isFighting_ = false;
                onChanged();
                return this;
            }
        }
    }


    public static final class Player
            extends GeneratedMessage
            implements PlayerOrBuilder {
        private static final Player defaultInstance = new Player(true);
        private final UnknownFieldSet unknownFields;

        private Player(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private Player(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static Player getDefaultInstance() {
            return defaultInstance;
        }

        public Player getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Player(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.id_ = bs;
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.pro_ = input.readInt32();
                            break;
                        case 26:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x4;
                            this.name_ = bs;
                            break;
                        case 32:
                            this.bitField0_ |= 0x8;
                            this.level_ = input.readInt32();
                            break;
                        case 40:
                            this.bitField0_ |= 0x10;
                            this.upLevel_ = input.readInt32();
                            break;
                        case 50:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x20;
                            this.guildName_ = bs;
                            break;
                        case 56:
                            this.bitField0_ |= 0x40;
                            this.isInvited_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_Player_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_Player_fieldAccessorTable.ensureFieldAccessorsInitialized(Player.class, Builder.class);
        }

        public static Parser<Player> PARSER = (Parser<Player>) new AbstractParser<Player>() {
            public TeamHandler.Player parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.Player(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int ID_FIELD_NUMBER = 1;
        private Object id_;
        public static final int PRO_FIELD_NUMBER = 2;
        private int pro_;
        public static final int NAME_FIELD_NUMBER = 3;
        private Object name_;
        public static final int LEVEL_FIELD_NUMBER = 4;
        private int level_;
        public static final int UPLEVEL_FIELD_NUMBER = 5;
        private int upLevel_;
        public static final int GUILDNAME_FIELD_NUMBER = 6;
        private Object guildName_;
        public static final int ISINVITED_FIELD_NUMBER = 7;
        private int isInvited_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<Player> getParserForType() {
            return PARSER;
        }

        public boolean hasId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getId() {
            Object ref = this.id_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.id_ = s;
            return s;
        }

        public ByteString getIdBytes() {
            Object ref = this.id_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.id_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasPro() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        static {
            defaultInstance.initFields();
        }


        public int getPro() {
            return this.pro_;
        }


        public boolean hasName() {
            return ((this.bitField0_ & 0x4) == 4);
        }


        public String getName() {
            Object ref = this.name_;
            if (ref instanceof String) {
                return (String) ref;
            }
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                this.name_ = s;
            }
            return s;
        }


        public ByteString getNameBytes() {
            Object ref = this.name_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.name_ = b;
                return b;
            }
            return (ByteString) ref;
        }


        public boolean hasLevel() {
            return ((this.bitField0_ & 0x8) == 8);
        }


        public int getLevel() {
            return this.level_;
        }


        public boolean hasUpLevel() {
            return ((this.bitField0_ & 0x10) == 16);
        }


        public int getUpLevel() {
            return this.upLevel_;
        }


        public boolean hasGuildName() {
            return ((this.bitField0_ & 0x20) == 32);
        }


        public String getGuildName() {
            Object ref = this.guildName_;
            if (ref instanceof String) {
                return (String) ref;
            }
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                this.guildName_ = s;
            }
            return s;
        }


        public ByteString getGuildNameBytes() {
            Object ref = this.guildName_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.guildName_ = b;
                return b;
            }
            return (ByteString) ref;
        }


        public boolean hasIsInvited() {
            return ((this.bitField0_ & 0x40) == 64);
        }


        public int getIsInvited() {
            return this.isInvited_;
        }


        private void initFields() {
            this.id_ = "";
            this.pro_ = 0;
            this.name_ = "";
            this.level_ = 0;
            this.upLevel_ = 0;
            this.guildName_ = "";
            this.isInvited_ = 0;
        }


        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            if (!hasId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasGuildName()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }


        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeBytes(1, getIdBytes());
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeInt32(2, this.pro_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                output.writeBytes(3, getNameBytes());
            }
            if ((this.bitField0_ & 0x8) == 8) {
                output.writeInt32(4, this.level_);
            }
            if ((this.bitField0_ & 0x10) == 16) {
                output.writeInt32(5, this.upLevel_);
            }
            if ((this.bitField0_ & 0x20) == 32) {
                output.writeBytes(6, getGuildNameBytes());
            }
            if ((this.bitField0_ & 0x40) == 64) {
                output.writeInt32(7, this.isInvited_);
            }
            getUnknownFields().writeTo(output);
        }


        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeBytesSize(1, getIdBytes());
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeInt32Size(2, this.pro_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                size += CodedOutputStream.computeBytesSize(3, getNameBytes());
            }
            if ((this.bitField0_ & 0x8) == 8) {
                size += CodedOutputStream.computeInt32Size(4, this.level_);
            }
            if ((this.bitField0_ & 0x10) == 16) {
                size += CodedOutputStream.computeInt32Size(5, this.upLevel_);
            }
            if ((this.bitField0_ & 0x20) == 32) {
                size += CodedOutputStream.computeBytesSize(6, getGuildNameBytes());
            }
            if ((this.bitField0_ & 0x40) == 64) {
                size += CodedOutputStream.computeInt32Size(7, this.isInvited_);
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }


        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }


        public static Player parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (Player) PARSER.parseFrom(data);
        }


        public static Player parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (Player) PARSER.parseFrom(data, extensionRegistry);
        }


        public static Player parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (Player) PARSER.parseFrom(data);
        }


        public static Player parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (Player) PARSER.parseFrom(data, extensionRegistry);
        }


        public static Player parseFrom(InputStream input) throws IOException {
            return (Player) PARSER.parseFrom(input);
        }


        public static Player parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (Player) PARSER.parseFrom(input, extensionRegistry);
        }


        public static Player parseDelimitedFrom(InputStream input) throws IOException {
            return (Player) PARSER.parseDelimitedFrom(input);
        }


        public static Player parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (Player) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }


        public static Player parseFrom(CodedInputStream input) throws IOException {
            return (Player) PARSER.parseFrom(input);
        }


        public static Player parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (Player) PARSER.parseFrom(input, extensionRegistry);
        }


        public static Builder newBuilder() {
            return Builder.create();
        }


        public Builder newBuilderForType() {
            return newBuilder();
        }


        public static Builder newBuilder(Player prototype) {
            return newBuilder().mergeFrom(prototype);
        }


        public Builder toBuilder() {
            return newBuilder(this);
        }


        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }


        public static final class Builder
                extends GeneratedMessage.Builder<Builder>
                implements TeamHandler.PlayerOrBuilder {
            private int bitField0_;


            private Object id_;


            private int pro_;


            private Object name_;


            private int level_;


            private int upLevel_;


            private Object guildName_;


            private int isInvited_;


            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_Player_descriptor;
            }


            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_Player_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.Player.class, Builder.class);
            }


            private Builder() {
                this.id_ = "";
                this.name_ = "";
                this.guildName_ = "";
                maybeForceBuilderInitialization();
            }


            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.id_ = "";
                this.name_ = "";
                this.guildName_ = "";
                maybeForceBuilderInitialization();
            }


            private void maybeForceBuilderInitialization() {
                if (TeamHandler.Player.alwaysUseFieldBuilders) ;
            }


            private static Builder create() {
                return new Builder();
            }


            public Builder clear() {
                super.clear();
                this.id_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                this.pro_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                this.name_ = "";
                this.bitField0_ &= 0xFFFFFFFB;
                this.level_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                this.upLevel_ = 0;
                this.bitField0_ &= 0xFFFFFFEF;
                this.guildName_ = "";
                this.bitField0_ &= 0xFFFFFFDF;
                this.isInvited_ = 0;
                this.bitField0_ &= 0xFFFFFFBF;
                return this;
            }


            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }


            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_Player_descriptor;
            }


            public TeamHandler.Player getDefaultInstanceForType() {
                return TeamHandler.Player.getDefaultInstance();
            }


            public TeamHandler.Player build() {
                TeamHandler.Player result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }


            public TeamHandler.Player buildPartial() {
                TeamHandler.Player result = new TeamHandler.Player(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) {
                    to_bitField0_ |= 0x1;
                }
                result.id_ = this.id_;
                if ((from_bitField0_ & 0x2) == 2) {
                    to_bitField0_ |= 0x2;
                }
                result.pro_ = this.pro_;
                if ((from_bitField0_ & 0x4) == 4) {
                    to_bitField0_ |= 0x4;
                }
                result.name_ = this.name_;
                if ((from_bitField0_ & 0x8) == 8) {
                    to_bitField0_ |= 0x8;
                }
                result.level_ = this.level_;
                if ((from_bitField0_ & 0x10) == 16) {
                    to_bitField0_ |= 0x10;
                }
                result.upLevel_ = this.upLevel_;
                if ((from_bitField0_ & 0x20) == 32) {
                    to_bitField0_ |= 0x20;
                }
                result.guildName_ = this.guildName_;
                if ((from_bitField0_ & 0x40) == 64) {
                    to_bitField0_ |= 0x40;
                }
                result.isInvited_ = this.isInvited_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }


            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.Player) {
                    return mergeFrom((TeamHandler.Player) other);
                }
                super.mergeFrom(other);
                return this;
            }


            public Builder mergeFrom(TeamHandler.Player other) {
                if (other == TeamHandler.Player.getDefaultInstance()) {
                    return this;
                }
                if (other.hasId()) {
                    this.bitField0_ |= 0x1;
                    this.id_ = other.id_;
                    onChanged();
                }
                if (other.hasPro()) {
                    setPro(other.getPro());
                }
                if (other.hasName()) {
                    this.bitField0_ |= 0x4;
                    this.name_ = other.name_;
                    onChanged();
                }
                if (other.hasLevel()) {
                    setLevel(other.getLevel());
                }
                if (other.hasUpLevel()) {
                    setUpLevel(other.getUpLevel());
                }
                if (other.hasGuildName()) {
                    this.bitField0_ |= 0x20;
                    this.guildName_ = other.guildName_;
                    onChanged();
                }
                if (other.hasIsInvited()) {
                    setIsInvited(other.getIsInvited());
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }


            public final boolean isInitialized() {
                if (!hasId()) {
                    return false;
                }
                if (!hasGuildName()) {
                    return false;
                }
                return true;
            }


            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.Player parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.Player) TeamHandler.Player.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.Player) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }


            public boolean hasId() {
                return ((this.bitField0_ & 0x1) == 1);
            }


            public String getId() {
                Object ref = this.id_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.id_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getIdBytes() {
                Object ref = this.id_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.id_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x1;
                this.id_ = value;
                onChanged();
                return this;
            }


            public Builder clearId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.id_ = TeamHandler.Player.getDefaultInstance().getId();
                onChanged();
                return this;
            }


            public Builder setIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x1;
                this.id_ = value;
                onChanged();
                return this;
            }


            public boolean hasPro() {
                return ((this.bitField0_ & 0x2) == 2);
            }


            public int getPro() {
                return this.pro_;
            }


            public Builder setPro(int value) {
                this.bitField0_ |= 0x2;
                this.pro_ = value;
                onChanged();
                return this;
            }


            public Builder clearPro() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.pro_ = 0;
                onChanged();
                return this;
            }


            public boolean hasName() {
                return ((this.bitField0_ & 0x4) == 4);
            }


            public String getName() {
                Object ref = this.name_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.name_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getNameBytes() {
                Object ref = this.name_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.name_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setName(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x4;
                this.name_ = value;
                onChanged();
                return this;
            }


            public Builder clearName() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.name_ = TeamHandler.Player.getDefaultInstance().getName();
                onChanged();
                return this;
            }


            public Builder setNameBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x4;
                this.name_ = value;
                onChanged();
                return this;
            }


            public boolean hasLevel() {
                return ((this.bitField0_ & 0x8) == 8);
            }


            public int getLevel() {
                return this.level_;
            }


            public Builder setLevel(int value) {
                this.bitField0_ |= 0x8;
                this.level_ = value;
                onChanged();
                return this;
            }


            public Builder clearLevel() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.level_ = 0;
                onChanged();
                return this;
            }


            public boolean hasUpLevel() {
                return ((this.bitField0_ & 0x10) == 16);
            }


            public int getUpLevel() {
                return this.upLevel_;
            }


            public Builder setUpLevel(int value) {
                this.bitField0_ |= 0x10;
                this.upLevel_ = value;
                onChanged();
                return this;
            }


            public Builder clearUpLevel() {
                this.bitField0_ &= 0xFFFFFFEF;
                this.upLevel_ = 0;
                onChanged();
                return this;
            }


            public boolean hasGuildName() {
                return ((this.bitField0_ & 0x20) == 32);
            }


            public String getGuildName() {
                Object ref = this.guildName_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.guildName_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getGuildNameBytes() {
                Object ref = this.guildName_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.guildName_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setGuildName(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x20;
                this.guildName_ = value;
                onChanged();
                return this;
            }


            public Builder clearGuildName() {
                this.bitField0_ &= 0xFFFFFFDF;
                this.guildName_ = TeamHandler.Player.getDefaultInstance().getGuildName();
                onChanged();
                return this;
            }


            public Builder setGuildNameBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x20;
                this.guildName_ = value;
                onChanged();
                return this;
            }


            public boolean hasIsInvited() {
                return ((this.bitField0_ & 0x40) == 64);
            }


            public int getIsInvited() {
                return this.isInvited_;
            }


            public Builder setIsInvited(int value) {
                this.bitField0_ |= 0x40;
                this.isInvited_ = value;
                onChanged();
                return this;
            }


            public Builder clearIsInvited() {
                this.bitField0_ &= 0xFFFFFFBF;
                this.isInvited_ = 0;
                onChanged();
                return this;
            }
        }
    }


    public static final class OnTeamUpdatePush
            extends GeneratedMessage
            implements OnTeamUpdatePushOrBuilder {
        private static final OnTeamUpdatePush defaultInstance = new OnTeamUpdatePush(true);
        private final UnknownFieldSet unknownFields;

        private OnTeamUpdatePush(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private OnTeamUpdatePush(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static OnTeamUpdatePush getDefaultInstance() {
            return defaultInstance;
        }

        public OnTeamUpdatePush getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private OnTeamUpdatePush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CIsAcceptAutoTeam_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CTeamId_ = bs;
                            break;
                        case 26:
                            if ((mutable_bitField0_ & 0x4) != 4) {
                                this.s2CData_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x4;
                            }
                            this.s2CData_.add(input.readMessage(TeamHandler.TeamMember.PARSER, extensionRegistry));
                            break;
                        case 32:
                            this.bitField0_ |= 0x4;
                            this.follow_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x4) == 4) this.s2CData_ = Collections.unmodifiableList(this.s2CData_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_OnTeamUpdatePush_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_OnTeamUpdatePush_fieldAccessorTable.ensureFieldAccessorsInitialized(OnTeamUpdatePush.class, Builder.class);
        }

        public static Parser<OnTeamUpdatePush> PARSER = (Parser<OnTeamUpdatePush>) new AbstractParser<OnTeamUpdatePush>() {
            public TeamHandler.OnTeamUpdatePush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.OnTeamUpdatePush(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_ISACCEPTAUTOTEAM_FIELD_NUMBER = 1;
        private int s2CIsAcceptAutoTeam_;
        public static final int S2C_TEAMID_FIELD_NUMBER = 2;
        private Object s2CTeamId_;
        public static final int S2C_DATA_FIELD_NUMBER = 3;
        private List<TeamHandler.TeamMember> s2CData_;
        public static final int FOLLOW_FIELD_NUMBER = 4;
        private int follow_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<OnTeamUpdatePush> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CIsAcceptAutoTeam() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CIsAcceptAutoTeam() {
            return this.s2CIsAcceptAutoTeam_;
        }

        public boolean hasS2CTeamId() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CTeamId() {
            Object ref = this.s2CTeamId_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CTeamId_ = s;
            return s;
        }

        public ByteString getS2CTeamIdBytes() {
            Object ref = this.s2CTeamId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CTeamId_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        static {
            defaultInstance.initFields();
        }

        public List<TeamHandler.TeamMember> getS2CDataList() {
            return this.s2CData_;
        }

        public List<? extends TeamHandler.TeamMemberOrBuilder> getS2CDataOrBuilderList() {
            return (List) this.s2CData_;
        }

        public int getS2CDataCount() {
            return this.s2CData_.size();
        }

        public TeamHandler.TeamMember getS2CData(int index) {
            return this.s2CData_.get(index);
        }

        public TeamHandler.TeamMemberOrBuilder getS2CDataOrBuilder(int index) {
            return this.s2CData_.get(index);
        }

        public boolean hasFollow() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public int getFollow() {
            return this.follow_;
        }

        private void initFields() {
            this.s2CIsAcceptAutoTeam_ = 0;
            this.s2CTeamId_ = "";
            this.s2CData_ = Collections.emptyList();
            this.follow_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasS2CTeamId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getS2CDataCount(); i++) {
                if (!getS2CData(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeInt32(1, this.s2CIsAcceptAutoTeam_);
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(2, getS2CTeamIdBytes());
            for (int i = 0; i < this.s2CData_.size(); i++)
                output.writeMessage(3, (MessageLite) this.s2CData_.get(i));
            if ((this.bitField0_ & 0x4) == 4)
                output.writeInt32(4, this.follow_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeInt32Size(1, this.s2CIsAcceptAutoTeam_);
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(2, getS2CTeamIdBytes());
            for (int i = 0; i < this.s2CData_.size(); i++)
                size += CodedOutputStream.computeMessageSize(3, (MessageLite) this.s2CData_.get(i));
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeInt32Size(4, this.follow_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static OnTeamUpdatePush parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (OnTeamUpdatePush) PARSER.parseFrom(data);
        }

        public static OnTeamUpdatePush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OnTeamUpdatePush) PARSER.parseFrom(data, extensionRegistry);
        }

        public static OnTeamUpdatePush parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (OnTeamUpdatePush) PARSER.parseFrom(data);
        }

        public static OnTeamUpdatePush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OnTeamUpdatePush) PARSER.parseFrom(data, extensionRegistry);
        }

        public static OnTeamUpdatePush parseFrom(InputStream input) throws IOException {
            return (OnTeamUpdatePush) PARSER.parseFrom(input);
        }

        public static OnTeamUpdatePush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnTeamUpdatePush) PARSER.parseFrom(input, extensionRegistry);
        }

        public static OnTeamUpdatePush parseDelimitedFrom(InputStream input) throws IOException {
            return (OnTeamUpdatePush) PARSER.parseDelimitedFrom(input);
        }

        public static OnTeamUpdatePush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnTeamUpdatePush) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static OnTeamUpdatePush parseFrom(CodedInputStream input) throws IOException {
            return (OnTeamUpdatePush) PARSER.parseFrom(input);
        }

        public static OnTeamUpdatePush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnTeamUpdatePush) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(OnTeamUpdatePush prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.OnTeamUpdatePushOrBuilder {
            private int bitField0_;
            private int s2CIsAcceptAutoTeam_;
            private Object s2CTeamId_;
            private List<TeamHandler.TeamMember> s2CData_;
            private RepeatedFieldBuilder<TeamHandler.TeamMember, TeamHandler.TeamMember.Builder, TeamHandler.TeamMemberOrBuilder> s2CDataBuilder_;
            private int follow_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_OnTeamUpdatePush_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_OnTeamUpdatePush_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.OnTeamUpdatePush.class, Builder.class);
            }

            private Builder() {
                this.s2CTeamId_ = "";
                this.s2CData_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CTeamId_ = "";
                this.s2CData_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.OnTeamUpdatePush.alwaysUseFieldBuilders)
                    getS2CDataFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CIsAcceptAutoTeam_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CTeamId_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                if (this.s2CDataBuilder_ == null) {
                    this.s2CData_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                } else {
                    this.s2CDataBuilder_.clear();
                }
                this.follow_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_OnTeamUpdatePush_descriptor;
            }

            public TeamHandler.OnTeamUpdatePush getDefaultInstanceForType() {
                return TeamHandler.OnTeamUpdatePush.getDefaultInstance();
            }

            public TeamHandler.OnTeamUpdatePush build() {
                TeamHandler.OnTeamUpdatePush result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.OnTeamUpdatePush buildPartial() {
                TeamHandler.OnTeamUpdatePush result = new TeamHandler.OnTeamUpdatePush(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.s2CIsAcceptAutoTeam_ = this.s2CIsAcceptAutoTeam_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.s2CTeamId_ = this.s2CTeamId_;
                if (this.s2CDataBuilder_ == null) {
                    if ((this.bitField0_ & 0x4) == 4) {
                        this.s2CData_ = Collections.unmodifiableList(this.s2CData_);
                        this.bitField0_ &= 0xFFFFFFFB;
                    }
                    result.s2CData_ = this.s2CData_;
                } else {
                    result.s2CData_ = this.s2CDataBuilder_.build();
                }
                if ((from_bitField0_ & 0x8) == 8)
                    to_bitField0_ |= 0x4;
                result.follow_ = this.follow_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.OnTeamUpdatePush)
                    return mergeFrom((TeamHandler.OnTeamUpdatePush) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.OnTeamUpdatePush other) {
                if (other == TeamHandler.OnTeamUpdatePush.getDefaultInstance())
                    return this;
                if (other.hasS2CIsAcceptAutoTeam())
                    setS2CIsAcceptAutoTeam(other.getS2CIsAcceptAutoTeam());
                if (other.hasS2CTeamId()) {
                    this.bitField0_ |= 0x2;
                    this.s2CTeamId_ = other.s2CTeamId_;
                    onChanged();
                }
                if (this.s2CDataBuilder_ == null) {
                    if (!other.s2CData_.isEmpty()) {
                        if (this.s2CData_.isEmpty()) {
                            this.s2CData_ = other.s2CData_;
                            this.bitField0_ &= 0xFFFFFFFB;
                        } else {
                            ensureS2CDataIsMutable();
                            this.s2CData_.addAll(other.s2CData_);
                        }
                        onChanged();
                    }
                } else if (!other.s2CData_.isEmpty()) {
                    if (this.s2CDataBuilder_.isEmpty()) {
                        this.s2CDataBuilder_.dispose();
                        this.s2CDataBuilder_ = null;
                        this.s2CData_ = other.s2CData_;
                        this.bitField0_ &= 0xFFFFFFFB;
                        this.s2CDataBuilder_ = TeamHandler.OnTeamUpdatePush.alwaysUseFieldBuilders ? getS2CDataFieldBuilder() : null;
                    } else {
                        this.s2CDataBuilder_.addAllMessages(other.s2CData_);
                    }
                }
                if (other.hasFollow())
                    setFollow(other.getFollow());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CTeamId())
                    return false;
                for (int i = 0; i < getS2CDataCount(); i++) {
                    if (!getS2CData(i).isInitialized())
                        return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.OnTeamUpdatePush parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.OnTeamUpdatePush) TeamHandler.OnTeamUpdatePush.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.OnTeamUpdatePush) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CIsAcceptAutoTeam() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CIsAcceptAutoTeam() {
                return this.s2CIsAcceptAutoTeam_;
            }

            public Builder setS2CIsAcceptAutoTeam(int value) {
                this.bitField0_ |= 0x1;
                this.s2CIsAcceptAutoTeam_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CIsAcceptAutoTeam() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CIsAcceptAutoTeam_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CTeamId() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CTeamId() {
                Object ref = this.s2CTeamId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.s2CTeamId_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CTeamIdBytes() {
                Object ref = this.s2CTeamId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CTeamId_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CTeamId(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CTeamId_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CTeamId() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CTeamId_ = TeamHandler.OnTeamUpdatePush.getDefaultInstance().getS2CTeamId();
                onChanged();
                return this;
            }

            public Builder setS2CTeamIdBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CTeamId_ = value;
                onChanged();
                return this;
            }

            private void ensureS2CDataIsMutable() {
                if ((this.bitField0_ & 0x4) != 4) {
                    this.s2CData_ = new ArrayList<>(this.s2CData_);
                    this.bitField0_ |= 0x4;
                }
            }

            public List<TeamHandler.TeamMember> getS2CDataList() {
                if (this.s2CDataBuilder_ == null)
                    return Collections.unmodifiableList(this.s2CData_);
                return this.s2CDataBuilder_.getMessageList();
            }

            public int getS2CDataCount() {
                if (this.s2CDataBuilder_ == null)
                    return this.s2CData_.size();
                return this.s2CDataBuilder_.getCount();
            }

            public TeamHandler.TeamMember getS2CData(int index) {
                if (this.s2CDataBuilder_ == null)
                    return this.s2CData_.get(index);
                return (TeamHandler.TeamMember) this.s2CDataBuilder_.getMessage(index);
            }

            public Builder setS2CData(int index, TeamHandler.TeamMember value) {
                if (this.s2CDataBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CDataIsMutable();
                    this.s2CData_.set(index, value);
                    onChanged();
                } else {
                    this.s2CDataBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setS2CData(int index, TeamHandler.TeamMember.Builder builderForValue) {
                if (this.s2CDataBuilder_ == null) {
                    ensureS2CDataIsMutable();
                    this.s2CData_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CDataBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addS2CData(TeamHandler.TeamMember value) {
                if (this.s2CDataBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CDataIsMutable();
                    this.s2CData_.add(value);
                    onChanged();
                } else {
                    this.s2CDataBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addS2CData(int index, TeamHandler.TeamMember value) {
                if (this.s2CDataBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CDataIsMutable();
                    this.s2CData_.add(index, value);
                    onChanged();
                } else {
                    this.s2CDataBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addS2CData(TeamHandler.TeamMember.Builder builderForValue) {
                if (this.s2CDataBuilder_ == null) {
                    ensureS2CDataIsMutable();
                    this.s2CData_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.s2CDataBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addS2CData(int index, TeamHandler.TeamMember.Builder builderForValue) {
                if (this.s2CDataBuilder_ == null) {
                    ensureS2CDataIsMutable();
                    this.s2CData_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CDataBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllS2CData(Iterable<? extends TeamHandler.TeamMember> values) {
                if (this.s2CDataBuilder_ == null) {
                    ensureS2CDataIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.s2CData_);
                    onChanged();
                } else {
                    this.s2CDataBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearS2CData() {
                if (this.s2CDataBuilder_ == null) {
                    this.s2CData_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                    onChanged();
                } else {
                    this.s2CDataBuilder_.clear();
                }
                return this;
            }

            public Builder removeS2CData(int index) {
                if (this.s2CDataBuilder_ == null) {
                    ensureS2CDataIsMutable();
                    this.s2CData_.remove(index);
                    onChanged();
                } else {
                    this.s2CDataBuilder_.remove(index);
                }
                return this;
            }

            public TeamHandler.TeamMember.Builder getS2CDataBuilder(int index) {
                return (TeamHandler.TeamMember.Builder) getS2CDataFieldBuilder().getBuilder(index);
            }

            public TeamHandler.TeamMemberOrBuilder getS2CDataOrBuilder(int index) {
                if (this.s2CDataBuilder_ == null)
                    return this.s2CData_.get(index);
                return (TeamHandler.TeamMemberOrBuilder) this.s2CDataBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends TeamHandler.TeamMemberOrBuilder> getS2CDataOrBuilderList() {
                if (this.s2CDataBuilder_ != null)
                    return this.s2CDataBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.s2CData_);
            }

            public TeamHandler.TeamMember.Builder addS2CDataBuilder() {
                return (TeamHandler.TeamMember.Builder) getS2CDataFieldBuilder().addBuilder(TeamHandler.TeamMember.getDefaultInstance());
            }

            public TeamHandler.TeamMember.Builder addS2CDataBuilder(int index) {
                return (TeamHandler.TeamMember.Builder) getS2CDataFieldBuilder().addBuilder(index, TeamHandler.TeamMember.getDefaultInstance());
            }

            public List<TeamHandler.TeamMember.Builder> getS2CDataBuilderList() {
                return getS2CDataFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<TeamHandler.TeamMember, TeamHandler.TeamMember.Builder, TeamHandler.TeamMemberOrBuilder> getS2CDataFieldBuilder() {
                if (this.s2CDataBuilder_ == null) {
                    this.s2CDataBuilder_ = new RepeatedFieldBuilder(this.s2CData_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean());
                    this.s2CData_ = null;
                }
                return this.s2CDataBuilder_;
            }

            public boolean hasFollow() {
                return ((this.bitField0_ & 0x8) == 8);
            }

            public int getFollow() {
                return this.follow_;
            }

            public Builder setFollow(int value) {
                this.bitField0_ |= 0x8;
                this.follow_ = value;
                onChanged();
                return this;
            }

            public Builder clearFollow() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.follow_ = 0;
                onChanged();
                return this;
            }
        }
    }

    public static final class OnTeamMemberUpdatePush extends GeneratedMessage implements OnTeamMemberUpdatePushOrBuilder {
        private static final OnTeamMemberUpdatePush defaultInstance = new OnTeamMemberUpdatePush(true);
        private final UnknownFieldSet unknownFields;

        private OnTeamMemberUpdatePush(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private OnTeamMemberUpdatePush(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static OnTeamMemberUpdatePush getDefaultInstance() {
            return defaultInstance;
        }

        public OnTeamMemberUpdatePush getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private OnTeamMemberUpdatePush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    TeamHandler.TeamMember.Builder subBuilder;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 18:
                            subBuilder = null;
                            if ((this.bitField0_ & 0x1) == 1) subBuilder = this.s2CData_.toBuilder();
                            this.s2CData_ = (TeamHandler.TeamMember) input.readMessage(TeamHandler.TeamMember.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(this.s2CData_);
                                this.s2CData_ = subBuilder.buildPartial();
                            }
                            this.bitField0_ |= 0x1;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_OnTeamMemberUpdatePush_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_OnTeamMemberUpdatePush_fieldAccessorTable.ensureFieldAccessorsInitialized(OnTeamMemberUpdatePush.class, Builder.class);
        }

        public static Parser<OnTeamMemberUpdatePush> PARSER = (Parser<OnTeamMemberUpdatePush>) new AbstractParser<OnTeamMemberUpdatePush>() {
            public TeamHandler.OnTeamMemberUpdatePush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.OnTeamMemberUpdatePush(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_DATA_FIELD_NUMBER = 2;
        private TeamHandler.TeamMember s2CData_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<OnTeamMemberUpdatePush> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CData() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public TeamHandler.TeamMember getS2CData() {
            return this.s2CData_;
        }

        public TeamHandler.TeamMemberOrBuilder getS2CDataOrBuilder() {
            return this.s2CData_;
        }

        private void initFields() {
            this.s2CData_ = TeamHandler.TeamMember.getDefaultInstance();
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CData()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!getS2CData().isInitialized()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeMessage(2, (MessageLite) this.s2CData_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeMessageSize(2, (MessageLite) this.s2CData_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static OnTeamMemberUpdatePush parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (OnTeamMemberUpdatePush) PARSER.parseFrom(data);
        }

        public static OnTeamMemberUpdatePush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OnTeamMemberUpdatePush) PARSER.parseFrom(data, extensionRegistry);
        }

        public static OnTeamMemberUpdatePush parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (OnTeamMemberUpdatePush) PARSER.parseFrom(data);
        }

        public static OnTeamMemberUpdatePush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OnTeamMemberUpdatePush) PARSER.parseFrom(data, extensionRegistry);
        }

        public static OnTeamMemberUpdatePush parseFrom(InputStream input) throws IOException {
            return (OnTeamMemberUpdatePush) PARSER.parseFrom(input);
        }

        public static OnTeamMemberUpdatePush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnTeamMemberUpdatePush) PARSER.parseFrom(input, extensionRegistry);
        }

        public static OnTeamMemberUpdatePush parseDelimitedFrom(InputStream input) throws IOException {
            return (OnTeamMemberUpdatePush) PARSER.parseDelimitedFrom(input);
        }

        public static OnTeamMemberUpdatePush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnTeamMemberUpdatePush) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static OnTeamMemberUpdatePush parseFrom(CodedInputStream input) throws IOException {
            return (OnTeamMemberUpdatePush) PARSER.parseFrom(input);
        }

        public static OnTeamMemberUpdatePush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnTeamMemberUpdatePush) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(OnTeamMemberUpdatePush prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.OnTeamMemberUpdatePushOrBuilder {
            private int bitField0_;
            private TeamHandler.TeamMember s2CData_;
            private SingleFieldBuilder<TeamHandler.TeamMember, TeamHandler.TeamMember.Builder, TeamHandler.TeamMemberOrBuilder> s2CDataBuilder_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_OnTeamMemberUpdatePush_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_OnTeamMemberUpdatePush_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.OnTeamMemberUpdatePush.class, Builder.class);
            }

            private Builder() {
                this.s2CData_ = TeamHandler.TeamMember.getDefaultInstance();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CData_ = TeamHandler.TeamMember.getDefaultInstance();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.OnTeamMemberUpdatePush.alwaysUseFieldBuilders) getS2CDataFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                if (this.s2CDataBuilder_ == null) {
                    this.s2CData_ = TeamHandler.TeamMember.getDefaultInstance();
                } else {
                    this.s2CDataBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_OnTeamMemberUpdatePush_descriptor;
            }

            public TeamHandler.OnTeamMemberUpdatePush getDefaultInstanceForType() {
                return TeamHandler.OnTeamMemberUpdatePush.getDefaultInstance();
            }

            public TeamHandler.OnTeamMemberUpdatePush build() {
                TeamHandler.OnTeamMemberUpdatePush result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.OnTeamMemberUpdatePush buildPartial() {
                TeamHandler.OnTeamMemberUpdatePush result = new TeamHandler.OnTeamMemberUpdatePush(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                if (this.s2CDataBuilder_ == null) {
                    result.s2CData_ = this.s2CData_;
                } else {
                    result.s2CData_ = (TeamHandler.TeamMember) this.s2CDataBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.OnTeamMemberUpdatePush)
                    return mergeFrom((TeamHandler.OnTeamMemberUpdatePush) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.OnTeamMemberUpdatePush other) {
                if (other == TeamHandler.OnTeamMemberUpdatePush.getDefaultInstance()) return this;
                if (other.hasS2CData()) mergeS2CData(other.getS2CData());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CData()) return false;
                if (!getS2CData().isInitialized()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.OnTeamMemberUpdatePush parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.OnTeamMemberUpdatePush) TeamHandler.OnTeamMemberUpdatePush.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.OnTeamMemberUpdatePush) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CData() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public TeamHandler.TeamMember getS2CData() {
                if (this.s2CDataBuilder_ == null) return this.s2CData_;
                return (TeamHandler.TeamMember) this.s2CDataBuilder_.getMessage();
            }

            public Builder setS2CData(TeamHandler.TeamMember value) {
                if (this.s2CDataBuilder_ == null) {
                    if (value == null) throw new NullPointerException();
                    this.s2CData_ = value;
                    onChanged();
                } else {
                    this.s2CDataBuilder_.setMessage(value);
                }
                this.bitField0_ |= 0x1;
                return this;
            }

            public Builder setS2CData(TeamHandler.TeamMember.Builder builderForValue) {
                if (this.s2CDataBuilder_ == null) {
                    this.s2CData_ = builderForValue.build();
                    onChanged();
                } else {
                    this.s2CDataBuilder_.setMessage(builderForValue.build());
                }
                this.bitField0_ |= 0x1;
                return this;
            }

            public Builder mergeS2CData(TeamHandler.TeamMember value) {
                if (this.s2CDataBuilder_ == null) {
                    if ((this.bitField0_ & 0x1) == 1 && this.s2CData_ != TeamHandler.TeamMember.getDefaultInstance()) {
                        this.s2CData_ = TeamHandler.TeamMember.newBuilder(this.s2CData_).mergeFrom(value).buildPartial();
                    } else {
                        this.s2CData_ = value;
                    }
                    onChanged();
                } else {
                    this.s2CDataBuilder_.mergeFrom(value);
                }
                this.bitField0_ |= 0x1;
                return this;
            }

            public Builder clearS2CData() {
                if (this.s2CDataBuilder_ == null) {
                    this.s2CData_ = TeamHandler.TeamMember.getDefaultInstance();
                    onChanged();
                } else {
                    this.s2CDataBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public TeamHandler.TeamMember.Builder getS2CDataBuilder() {
                this.bitField0_ |= 0x1;
                onChanged();
                return (TeamHandler.TeamMember.Builder) getS2CDataFieldBuilder().getBuilder();
            }

            public TeamHandler.TeamMemberOrBuilder getS2CDataOrBuilder() {
                if (this.s2CDataBuilder_ != null)
                    return (TeamHandler.TeamMemberOrBuilder) this.s2CDataBuilder_.getMessageOrBuilder();
                return this.s2CData_;
            }

            private SingleFieldBuilder<TeamHandler.TeamMember, TeamHandler.TeamMember.Builder, TeamHandler.TeamMemberOrBuilder> getS2CDataFieldBuilder() {
                if (this.s2CDataBuilder_ == null) {
                    this.s2CDataBuilder_ = new SingleFieldBuilder(getS2CData(), getParentForChildren(), isClean());
                    this.s2CData_ = null;
                }
                return this.s2CDataBuilder_;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class GetTeamMembersRequest
            extends GeneratedMessage
            implements GetTeamMembersRequestOrBuilder {
        private static final GetTeamMembersRequest defaultInstance = new GetTeamMembersRequest(true);
        private final UnknownFieldSet unknownFields;

        private GetTeamMembersRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetTeamMembersRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetTeamMembersRequest getDefaultInstance() {
            return defaultInstance;
        }

        public GetTeamMembersRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetTeamMembersRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_GetTeamMembersRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_GetTeamMembersRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(GetTeamMembersRequest.class, Builder.class);
        }

        public static Parser<GetTeamMembersRequest> PARSER = (Parser<GetTeamMembersRequest>) new AbstractParser<GetTeamMembersRequest>() {
            public TeamHandler.GetTeamMembersRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.GetTeamMembersRequest(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetTeamMembersRequest> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GetTeamMembersRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetTeamMembersRequest) PARSER.parseFrom(data);
        }

        public static GetTeamMembersRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetTeamMembersRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetTeamMembersRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetTeamMembersRequest) PARSER.parseFrom(data);
        }

        public static GetTeamMembersRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetTeamMembersRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetTeamMembersRequest parseFrom(InputStream input) throws IOException {
            return (GetTeamMembersRequest) PARSER.parseFrom(input);
        }

        public static GetTeamMembersRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetTeamMembersRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GetTeamMembersRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (GetTeamMembersRequest) PARSER.parseDelimitedFrom(input);
        }

        public static GetTeamMembersRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetTeamMembersRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GetTeamMembersRequest parseFrom(CodedInputStream input) throws IOException {
            return (GetTeamMembersRequest) PARSER.parseFrom(input);
        }

        public static GetTeamMembersRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetTeamMembersRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GetTeamMembersRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.GetTeamMembersRequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_GetTeamMembersRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_GetTeamMembersRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.GetTeamMembersRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.GetTeamMembersRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_GetTeamMembersRequest_descriptor;
            }

            public TeamHandler.GetTeamMembersRequest getDefaultInstanceForType() {
                return TeamHandler.GetTeamMembersRequest.getDefaultInstance();
            }

            public TeamHandler.GetTeamMembersRequest build() {
                TeamHandler.GetTeamMembersRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.GetTeamMembersRequest buildPartial() {
                TeamHandler.GetTeamMembersRequest result = new TeamHandler.GetTeamMembersRequest(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.GetTeamMembersRequest)
                    return mergeFrom((TeamHandler.GetTeamMembersRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.GetTeamMembersRequest other) {
                if (other == TeamHandler.GetTeamMembersRequest.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.GetTeamMembersRequest parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.GetTeamMembersRequest) TeamHandler.GetTeamMembersRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.GetTeamMembersRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class GetTeamMembersResponse
            extends GeneratedMessage
            implements GetTeamMembersResponseOrBuilder {
        private static final GetTeamMembersResponse defaultInstance = new GetTeamMembersResponse(true);
        private final UnknownFieldSet unknownFields;

        private GetTeamMembersResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetTeamMembersResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetTeamMembersResponse getDefaultInstance() {
            return defaultInstance;
        }

        public GetTeamMembersResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetTeamMembersResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    TeamHandler.TeamTarget.Builder subBuilder;
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.s2CIsAcceptAutoTeam_ = input.readInt32();
                            break;
                        case 42:
                            if ((mutable_bitField0_ & 0x4) != 4) {
                                this.s2CTeamMembers_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x4;
                            }
                            this.s2CTeamMembers_.add(input.readMessage(TeamHandler.TeamMemberDetail.PARSER, extensionRegistry));
                            break;
                        case 50:
                            subBuilder = null;
                            if ((this.bitField0_ & 0x4) == 4) subBuilder = this.s2CTeamTarget_.toBuilder();
                            this.s2CTeamTarget_ = (TeamHandler.TeamTarget) input.readMessage(TeamHandler.TeamTarget.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(this.s2CTeamTarget_);
                                this.s2CTeamTarget_ = subBuilder.buildPartial();
                            }
                            this.bitField0_ |= 0x4;
                            break;
                        case 58:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x8;
                            this.s2CMsg_ = bs;
                            break;
                        case 64:
                            this.bitField0_ |= 0x10;
                            this.follow_ = input.readInt32();
                            break;
                        case 72:
                            this.bitField0_ |= 0x20;
                            this.haveApply_ = input.readInt32();
                            break;
                        case 80:
                            this.bitField0_ |= 0x40;
                            this.expBuff_ = input.readInt32();
                            break;
                        case 88:
                            this.bitField0_ |= 0x80;
                            this.goldBuff_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x4) == 4)
                    this.s2CTeamMembers_ = Collections.unmodifiableList(this.s2CTeamMembers_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_GetTeamMembersResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_GetTeamMembersResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(GetTeamMembersResponse.class, Builder.class);
        }

        public static Parser<GetTeamMembersResponse> PARSER = (Parser<GetTeamMembersResponse>) new AbstractParser<GetTeamMembersResponse>() {
            public TeamHandler.GetTeamMembersResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.GetTeamMembersResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_ISACCEPTAUTOTEAM_FIELD_NUMBER = 2;
        private int s2CIsAcceptAutoTeam_;
        public static final int S2C_TEAMMEMBERS_FIELD_NUMBER = 5;
        private List<TeamHandler.TeamMemberDetail> s2CTeamMembers_;
        public static final int S2C_TEAMTARGET_FIELD_NUMBER = 6;
        private TeamHandler.TeamTarget s2CTeamTarget_;
        public static final int S2C_MSG_FIELD_NUMBER = 7;
        private Object s2CMsg_;
        public static final int FOLLOW_FIELD_NUMBER = 8;
        private int follow_;
        public static final int HAVEAPPLY_FIELD_NUMBER = 9;
        private int haveApply_;
        public static final int EXPBUFF_FIELD_NUMBER = 10;
        private int expBuff_;
        public static final int GOLDBUFF_FIELD_NUMBER = 11;
        private int goldBuff_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetTeamMembersResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CIsAcceptAutoTeam() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getS2CIsAcceptAutoTeam() {
            return this.s2CIsAcceptAutoTeam_;
        }

        public List<TeamHandler.TeamMemberDetail> getS2CTeamMembersList() {
            return this.s2CTeamMembers_;
        }

        public List<? extends TeamHandler.TeamMemberDetailOrBuilder> getS2CTeamMembersOrBuilderList() {
            return (List) this.s2CTeamMembers_;
        }

        public int getS2CTeamMembersCount() {
            return this.s2CTeamMembers_.size();
        }

        public TeamHandler.TeamMemberDetail getS2CTeamMembers(int index) {
            return this.s2CTeamMembers_.get(index);
        }

        public TeamHandler.TeamMemberDetailOrBuilder getS2CTeamMembersOrBuilder(int index) {
            return this.s2CTeamMembers_.get(index);
        }

        public boolean hasS2CTeamTarget() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public TeamHandler.TeamTarget getS2CTeamTarget() {
            return this.s2CTeamTarget_;
        }

        public TeamHandler.TeamTargetOrBuilder getS2CTeamTargetOrBuilder() {
            return this.s2CTeamTarget_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x8) == 8);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasFollow() {
            return ((this.bitField0_ & 0x10) == 16);
        }

        public int getFollow() {
            return this.follow_;
        }

        public boolean hasHaveApply() {
            return ((this.bitField0_ & 0x20) == 32);
        }

        public int getHaveApply() {
            return this.haveApply_;
        }

        public boolean hasExpBuff() {
            return ((this.bitField0_ & 0x40) == 64);
        }

        public int getExpBuff() {
            return this.expBuff_;
        }

        public boolean hasGoldBuff() {
            return ((this.bitField0_ & 0x80) == 128);
        }

        public int getGoldBuff() {
            return this.goldBuff_;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CIsAcceptAutoTeam_ = 0;
            this.s2CTeamMembers_ = Collections.emptyList();
            this.s2CTeamTarget_ = TeamHandler.TeamTarget.getDefaultInstance();
            this.s2CMsg_ = "";
            this.follow_ = 0;
            this.haveApply_ = 0;
            this.expBuff_ = 0;
            this.goldBuff_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getS2CTeamMembersCount(); i++) {
                if (!getS2CTeamMembers(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            if (hasS2CTeamTarget() && !getS2CTeamTarget().isInitialized()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        static {
            defaultInstance.initFields();
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                output.writeInt32(2, this.s2CIsAcceptAutoTeam_);
            for (int i = 0; i < this.s2CTeamMembers_.size(); i++)
                output.writeMessage(5, (MessageLite) this.s2CTeamMembers_.get(i));
            if ((this.bitField0_ & 0x4) == 4)
                output.writeMessage(6, (MessageLite) this.s2CTeamTarget_);
            if ((this.bitField0_ & 0x8) == 8)
                output.writeBytes(7, getS2CMsgBytes());
            if ((this.bitField0_ & 0x10) == 16)
                output.writeInt32(8, this.follow_);
            if ((this.bitField0_ & 0x20) == 32)
                output.writeInt32(9, this.haveApply_);
            if ((this.bitField0_ & 0x40) == 64)
                output.writeInt32(10, this.expBuff_);
            if ((this.bitField0_ & 0x80) == 128)
                output.writeInt32(11, this.goldBuff_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeInt32Size(2, this.s2CIsAcceptAutoTeam_);
            for (int i = 0; i < this.s2CTeamMembers_.size(); i++)
                size += CodedOutputStream.computeMessageSize(5, (MessageLite) this.s2CTeamMembers_.get(i));
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeMessageSize(6, (MessageLite) this.s2CTeamTarget_);
            if ((this.bitField0_ & 0x8) == 8)
                size += CodedOutputStream.computeBytesSize(7, getS2CMsgBytes());
            if ((this.bitField0_ & 0x10) == 16)
                size += CodedOutputStream.computeInt32Size(8, this.follow_);
            if ((this.bitField0_ & 0x20) == 32)
                size += CodedOutputStream.computeInt32Size(9, this.haveApply_);
            if ((this.bitField0_ & 0x40) == 64)
                size += CodedOutputStream.computeInt32Size(10, this.expBuff_);
            if ((this.bitField0_ & 0x80) == 128)
                size += CodedOutputStream.computeInt32Size(11, this.goldBuff_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GetTeamMembersResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetTeamMembersResponse) PARSER.parseFrom(data);
        }

        public static GetTeamMembersResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetTeamMembersResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetTeamMembersResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetTeamMembersResponse) PARSER.parseFrom(data);
        }

        public static GetTeamMembersResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetTeamMembersResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetTeamMembersResponse parseFrom(InputStream input) throws IOException {
            return (GetTeamMembersResponse) PARSER.parseFrom(input);
        }

        public static GetTeamMembersResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetTeamMembersResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GetTeamMembersResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (GetTeamMembersResponse) PARSER.parseDelimitedFrom(input);
        }

        public static GetTeamMembersResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetTeamMembersResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GetTeamMembersResponse parseFrom(CodedInputStream input) throws IOException {
            return (GetTeamMembersResponse) PARSER.parseFrom(input);
        }

        public static GetTeamMembersResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetTeamMembersResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GetTeamMembersResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.GetTeamMembersResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private int s2CIsAcceptAutoTeam_;
            private List<TeamHandler.TeamMemberDetail> s2CTeamMembers_;
            private RepeatedFieldBuilder<TeamHandler.TeamMemberDetail, TeamHandler.TeamMemberDetail.Builder, TeamHandler.TeamMemberDetailOrBuilder> s2CTeamMembersBuilder_;
            private TeamHandler.TeamTarget s2CTeamTarget_;
            private SingleFieldBuilder<TeamHandler.TeamTarget, TeamHandler.TeamTarget.Builder, TeamHandler.TeamTargetOrBuilder> s2CTeamTargetBuilder_;
            private Object s2CMsg_;
            private int follow_;
            private int haveApply_;
            private int expBuff_;
            private int goldBuff_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_GetTeamMembersResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_GetTeamMembersResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.GetTeamMembersResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CTeamMembers_ = Collections.emptyList();
                this.s2CTeamTarget_ = TeamHandler.TeamTarget.getDefaultInstance();
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CTeamMembers_ = Collections.emptyList();
                this.s2CTeamTarget_ = TeamHandler.TeamTarget.getDefaultInstance();
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.GetTeamMembersResponse.alwaysUseFieldBuilders) {
                    getS2CTeamMembersFieldBuilder();
                    getS2CTeamTargetFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CIsAcceptAutoTeam_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                if (this.s2CTeamMembersBuilder_ == null) {
                    this.s2CTeamMembers_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                } else {
                    this.s2CTeamMembersBuilder_.clear();
                }
                if (this.s2CTeamTargetBuilder_ == null) {
                    this.s2CTeamTarget_ = TeamHandler.TeamTarget.getDefaultInstance();
                } else {
                    this.s2CTeamTargetBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFF7;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFEF;
                this.follow_ = 0;
                this.bitField0_ &= 0xFFFFFFDF;
                this.haveApply_ = 0;
                this.bitField0_ &= 0xFFFFFFBF;
                this.expBuff_ = 0;
                this.bitField0_ &= 0xFFFFFF7F;
                this.goldBuff_ = 0;
                this.bitField0_ &= 0xFFFFFEFF;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_GetTeamMembersResponse_descriptor;
            }

            public TeamHandler.GetTeamMembersResponse getDefaultInstanceForType() {
                return TeamHandler.GetTeamMembersResponse.getDefaultInstance();
            }

            public TeamHandler.GetTeamMembersResponse build() {
                TeamHandler.GetTeamMembersResponse result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.GetTeamMembersResponse buildPartial() {
                TeamHandler.GetTeamMembersResponse result = new TeamHandler.GetTeamMembersResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.s2CIsAcceptAutoTeam_ = this.s2CIsAcceptAutoTeam_;
                if (this.s2CTeamMembersBuilder_ == null) {
                    if ((this.bitField0_ & 0x4) == 4) {
                        this.s2CTeamMembers_ = Collections.unmodifiableList(this.s2CTeamMembers_);
                        this.bitField0_ &= 0xFFFFFFFB;
                    }
                    result.s2CTeamMembers_ = this.s2CTeamMembers_;
                } else {
                    result.s2CTeamMembers_ = this.s2CTeamMembersBuilder_.build();
                }
                if ((from_bitField0_ & 0x8) == 8)
                    to_bitField0_ |= 0x4;
                if (this.s2CTeamTargetBuilder_ == null) {
                    result.s2CTeamTarget_ = this.s2CTeamTarget_;
                } else {
                    result.s2CTeamTarget_ = (TeamHandler.TeamTarget) this.s2CTeamTargetBuilder_.build();
                }
                if ((from_bitField0_ & 0x10) == 16)
                    to_bitField0_ |= 0x8;
                result.s2CMsg_ = this.s2CMsg_;
                if ((from_bitField0_ & 0x20) == 32)
                    to_bitField0_ |= 0x10;
                result.follow_ = this.follow_;
                if ((from_bitField0_ & 0x40) == 64)
                    to_bitField0_ |= 0x20;
                result.haveApply_ = this.haveApply_;
                if ((from_bitField0_ & 0x80) == 128)
                    to_bitField0_ |= 0x40;
                result.expBuff_ = this.expBuff_;
                if ((from_bitField0_ & 0x100) == 256)
                    to_bitField0_ |= 0x80;
                result.goldBuff_ = this.goldBuff_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.GetTeamMembersResponse)
                    return mergeFrom((TeamHandler.GetTeamMembersResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.GetTeamMembersResponse other) {
                if (other == TeamHandler.GetTeamMembersResponse.getDefaultInstance())
                    return this;
                if (other.hasS2CCode())
                    setS2CCode(other.getS2CCode());
                if (other.hasS2CIsAcceptAutoTeam())
                    setS2CIsAcceptAutoTeam(other.getS2CIsAcceptAutoTeam());
                if (this.s2CTeamMembersBuilder_ == null) {
                    if (!other.s2CTeamMembers_.isEmpty()) {
                        if (this.s2CTeamMembers_.isEmpty()) {
                            this.s2CTeamMembers_ = other.s2CTeamMembers_;
                            this.bitField0_ &= 0xFFFFFFFB;
                        } else {
                            ensureS2CTeamMembersIsMutable();
                            this.s2CTeamMembers_.addAll(other.s2CTeamMembers_);
                        }
                        onChanged();
                    }
                } else if (!other.s2CTeamMembers_.isEmpty()) {
                    if (this.s2CTeamMembersBuilder_.isEmpty()) {
                        this.s2CTeamMembersBuilder_.dispose();
                        this.s2CTeamMembersBuilder_ = null;
                        this.s2CTeamMembers_ = other.s2CTeamMembers_;
                        this.bitField0_ &= 0xFFFFFFFB;
                        this.s2CTeamMembersBuilder_ = TeamHandler.GetTeamMembersResponse.alwaysUseFieldBuilders ? getS2CTeamMembersFieldBuilder() : null;
                    } else {
                        this.s2CTeamMembersBuilder_.addAllMessages(other.s2CTeamMembers_);
                    }
                }
                if (other.hasS2CTeamTarget())
                    mergeS2CTeamTarget(other.getS2CTeamTarget());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x10;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (other.hasFollow())
                    setFollow(other.getFollow());
                if (other.hasHaveApply())
                    setHaveApply(other.getHaveApply());
                if (other.hasExpBuff())
                    setExpBuff(other.getExpBuff());
                if (other.hasGoldBuff())
                    setGoldBuff(other.getGoldBuff());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode())
                    return false;
                for (int i = 0; i < getS2CTeamMembersCount(); i++) {
                    if (!getS2CTeamMembers(i).isInitialized())
                        return false;
                }
                if (hasS2CTeamTarget() && !getS2CTeamTarget().isInitialized())
                    return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.GetTeamMembersResponse parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.GetTeamMembersResponse) TeamHandler.GetTeamMembersResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.GetTeamMembersResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CIsAcceptAutoTeam() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getS2CIsAcceptAutoTeam() {
                return this.s2CIsAcceptAutoTeam_;
            }

            public Builder setS2CIsAcceptAutoTeam(int value) {
                this.bitField0_ |= 0x2;
                this.s2CIsAcceptAutoTeam_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CIsAcceptAutoTeam() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CIsAcceptAutoTeam_ = 0;
                onChanged();
                return this;
            }

            private void ensureS2CTeamMembersIsMutable() {
                if ((this.bitField0_ & 0x4) != 4) {
                    this.s2CTeamMembers_ = new ArrayList<>(this.s2CTeamMembers_);
                    this.bitField0_ |= 0x4;
                }
            }

            public List<TeamHandler.TeamMemberDetail> getS2CTeamMembersList() {
                if (this.s2CTeamMembersBuilder_ == null)
                    return Collections.unmodifiableList(this.s2CTeamMembers_);
                return this.s2CTeamMembersBuilder_.getMessageList();
            }

            public int getS2CTeamMembersCount() {
                if (this.s2CTeamMembersBuilder_ == null)
                    return this.s2CTeamMembers_.size();
                return this.s2CTeamMembersBuilder_.getCount();
            }

            public TeamHandler.TeamMemberDetail getS2CTeamMembers(int index) {
                if (this.s2CTeamMembersBuilder_ == null)
                    return this.s2CTeamMembers_.get(index);
                return (TeamHandler.TeamMemberDetail) this.s2CTeamMembersBuilder_.getMessage(index);
            }

            public Builder setS2CTeamMembers(int index, TeamHandler.TeamMemberDetail value) {
                if (this.s2CTeamMembersBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CTeamMembersIsMutable();
                    this.s2CTeamMembers_.set(index, value);
                    onChanged();
                } else {
                    this.s2CTeamMembersBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setS2CTeamMembers(int index, TeamHandler.TeamMemberDetail.Builder builderForValue) {
                if (this.s2CTeamMembersBuilder_ == null) {
                    ensureS2CTeamMembersIsMutable();
                    this.s2CTeamMembers_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CTeamMembersBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addS2CTeamMembers(TeamHandler.TeamMemberDetail value) {
                if (this.s2CTeamMembersBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CTeamMembersIsMutable();
                    this.s2CTeamMembers_.add(value);
                    onChanged();
                } else {
                    this.s2CTeamMembersBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addS2CTeamMembers(int index, TeamHandler.TeamMemberDetail value) {
                if (this.s2CTeamMembersBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CTeamMembersIsMutable();
                    this.s2CTeamMembers_.add(index, value);
                    onChanged();
                } else {
                    this.s2CTeamMembersBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addS2CTeamMembers(TeamHandler.TeamMemberDetail.Builder builderForValue) {
                if (this.s2CTeamMembersBuilder_ == null) {
                    ensureS2CTeamMembersIsMutable();
                    this.s2CTeamMembers_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.s2CTeamMembersBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addS2CTeamMembers(int index, TeamHandler.TeamMemberDetail.Builder builderForValue) {
                if (this.s2CTeamMembersBuilder_ == null) {
                    ensureS2CTeamMembersIsMutable();
                    this.s2CTeamMembers_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CTeamMembersBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllS2CTeamMembers(Iterable<? extends TeamHandler.TeamMemberDetail> values) {
                if (this.s2CTeamMembersBuilder_ == null) {
                    ensureS2CTeamMembersIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.s2CTeamMembers_);
                    onChanged();
                } else {
                    this.s2CTeamMembersBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearS2CTeamMembers() {
                if (this.s2CTeamMembersBuilder_ == null) {
                    this.s2CTeamMembers_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                    onChanged();
                } else {
                    this.s2CTeamMembersBuilder_.clear();
                }
                return this;
            }

            public Builder removeS2CTeamMembers(int index) {
                if (this.s2CTeamMembersBuilder_ == null) {
                    ensureS2CTeamMembersIsMutable();
                    this.s2CTeamMembers_.remove(index);
                    onChanged();
                } else {
                    this.s2CTeamMembersBuilder_.remove(index);
                }
                return this;
            }

            public TeamHandler.TeamMemberDetail.Builder getS2CTeamMembersBuilder(int index) {
                return (TeamHandler.TeamMemberDetail.Builder) getS2CTeamMembersFieldBuilder().getBuilder(index);
            }

            public TeamHandler.TeamMemberDetailOrBuilder getS2CTeamMembersOrBuilder(int index) {
                if (this.s2CTeamMembersBuilder_ == null)
                    return this.s2CTeamMembers_.get(index);
                return (TeamHandler.TeamMemberDetailOrBuilder) this.s2CTeamMembersBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends TeamHandler.TeamMemberDetailOrBuilder> getS2CTeamMembersOrBuilderList() {
                if (this.s2CTeamMembersBuilder_ != null)
                    return this.s2CTeamMembersBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.s2CTeamMembers_);
            }

            public TeamHandler.TeamMemberDetail.Builder addS2CTeamMembersBuilder() {
                return (TeamHandler.TeamMemberDetail.Builder) getS2CTeamMembersFieldBuilder().addBuilder(TeamHandler.TeamMemberDetail.getDefaultInstance());
            }

            public TeamHandler.TeamMemberDetail.Builder addS2CTeamMembersBuilder(int index) {
                return (TeamHandler.TeamMemberDetail.Builder) getS2CTeamMembersFieldBuilder().addBuilder(index, TeamHandler.TeamMemberDetail.getDefaultInstance());
            }

            public List<TeamHandler.TeamMemberDetail.Builder> getS2CTeamMembersBuilderList() {
                return getS2CTeamMembersFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<TeamHandler.TeamMemberDetail, TeamHandler.TeamMemberDetail.Builder, TeamHandler.TeamMemberDetailOrBuilder> getS2CTeamMembersFieldBuilder() {
                if (this.s2CTeamMembersBuilder_ == null) {
                    this.s2CTeamMembersBuilder_ = new RepeatedFieldBuilder(this.s2CTeamMembers_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean());
                    this.s2CTeamMembers_ = null;
                }
                return this.s2CTeamMembersBuilder_;
            }

            public boolean hasS2CTeamTarget() {
                return ((this.bitField0_ & 0x8) == 8);
            }

            public TeamHandler.TeamTarget getS2CTeamTarget() {
                if (this.s2CTeamTargetBuilder_ == null)
                    return this.s2CTeamTarget_;
                return (TeamHandler.TeamTarget) this.s2CTeamTargetBuilder_.getMessage();
            }

            public Builder setS2CTeamTarget(TeamHandler.TeamTarget value) {
                if (this.s2CTeamTargetBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    this.s2CTeamTarget_ = value;
                    onChanged();
                } else {
                    this.s2CTeamTargetBuilder_.setMessage(value);
                }
                this.bitField0_ |= 0x8;
                return this;
            }

            public Builder setS2CTeamTarget(TeamHandler.TeamTarget.Builder builderForValue) {
                if (this.s2CTeamTargetBuilder_ == null) {
                    this.s2CTeamTarget_ = builderForValue.build();
                    onChanged();
                } else {
                    this.s2CTeamTargetBuilder_.setMessage(builderForValue.build());
                }
                this.bitField0_ |= 0x8;
                return this;
            }

            public Builder mergeS2CTeamTarget(TeamHandler.TeamTarget value) {
                if (this.s2CTeamTargetBuilder_ == null) {
                    if ((this.bitField0_ & 0x8) == 8 && this.s2CTeamTarget_ != TeamHandler.TeamTarget.getDefaultInstance()) {
                        this.s2CTeamTarget_ = TeamHandler.TeamTarget.newBuilder(this.s2CTeamTarget_).mergeFrom(value).buildPartial();
                    } else {
                        this.s2CTeamTarget_ = value;
                    }
                    onChanged();
                } else {
                    this.s2CTeamTargetBuilder_.mergeFrom(value);
                }
                this.bitField0_ |= 0x8;
                return this;
            }

            public Builder clearS2CTeamTarget() {
                if (this.s2CTeamTargetBuilder_ == null) {
                    this.s2CTeamTarget_ = TeamHandler.TeamTarget.getDefaultInstance();
                    onChanged();
                } else {
                    this.s2CTeamTargetBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFF7;
                return this;
            }

            public TeamHandler.TeamTarget.Builder getS2CTeamTargetBuilder() {
                this.bitField0_ |= 0x8;
                onChanged();
                return (TeamHandler.TeamTarget.Builder) getS2CTeamTargetFieldBuilder().getBuilder();
            }

            public TeamHandler.TeamTargetOrBuilder getS2CTeamTargetOrBuilder() {
                if (this.s2CTeamTargetBuilder_ != null)
                    return (TeamHandler.TeamTargetOrBuilder) this.s2CTeamTargetBuilder_.getMessageOrBuilder();
                return this.s2CTeamTarget_;
            }

            private SingleFieldBuilder<TeamHandler.TeamTarget, TeamHandler.TeamTarget.Builder, TeamHandler.TeamTargetOrBuilder> getS2CTeamTargetFieldBuilder() {
                if (this.s2CTeamTargetBuilder_ == null) {
                    this.s2CTeamTargetBuilder_ = new SingleFieldBuilder(getS2CTeamTarget(), getParentForChildren(), isClean());
                    this.s2CTeamTarget_ = null;
                }
                return this.s2CTeamTargetBuilder_;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x10) == 16);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x10;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFEF;
                this.s2CMsg_ = TeamHandler.GetTeamMembersResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x10;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public boolean hasFollow() {
                return ((this.bitField0_ & 0x20) == 32);
            }

            public int getFollow() {
                return this.follow_;
            }

            public Builder setFollow(int value) {
                this.bitField0_ |= 0x20;
                this.follow_ = value;
                onChanged();
                return this;
            }

            public Builder clearFollow() {
                this.bitField0_ &= 0xFFFFFFDF;
                this.follow_ = 0;
                onChanged();
                return this;
            }

            public boolean hasHaveApply() {
                return ((this.bitField0_ & 0x40) == 64);
            }

            public int getHaveApply() {
                return this.haveApply_;
            }

            public Builder setHaveApply(int value) {
                this.bitField0_ |= 0x40;
                this.haveApply_ = value;
                onChanged();
                return this;
            }

            public Builder clearHaveApply() {
                this.bitField0_ &= 0xFFFFFFBF;
                this.haveApply_ = 0;
                onChanged();
                return this;
            }

            public boolean hasExpBuff() {
                return ((this.bitField0_ & 0x80) == 128);
            }

            public int getExpBuff() {
                return this.expBuff_;
            }

            public Builder setExpBuff(int value) {
                this.bitField0_ |= 0x80;
                this.expBuff_ = value;
                onChanged();
                return this;
            }

            public Builder clearExpBuff() {
                this.bitField0_ &= 0xFFFFFF7F;
                this.expBuff_ = 0;
                onChanged();
                return this;
            }

            public boolean hasGoldBuff() {
                return ((this.bitField0_ & 0x100) == 256);
            }

            public int getGoldBuff() {
                return this.goldBuff_;
            }

            public Builder setGoldBuff(int value) {
                this.bitField0_ |= 0x100;
                this.goldBuff_ = value;
                onChanged();
                return this;
            }

            public Builder clearGoldBuff() {
                this.bitField0_ &= 0xFFFFFEFF;
                this.goldBuff_ = 0;
                onChanged();
                return this;
            }
        }
    }

    public static final class GetNearbyPlayersRequest extends GeneratedMessage implements GetNearbyPlayersRequestOrBuilder {
        private static final GetNearbyPlayersRequest defaultInstance = new GetNearbyPlayersRequest(true);
        private final UnknownFieldSet unknownFields;

        private GetNearbyPlayersRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetNearbyPlayersRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetNearbyPlayersRequest getDefaultInstance() {
            return defaultInstance;
        }

        public GetNearbyPlayersRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetNearbyPlayersRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_GetNearbyPlayersRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_GetNearbyPlayersRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(GetNearbyPlayersRequest.class, Builder.class);
        }

        public static Parser<GetNearbyPlayersRequest> PARSER = (Parser<GetNearbyPlayersRequest>) new AbstractParser<GetNearbyPlayersRequest>() {
            public TeamHandler.GetNearbyPlayersRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.GetNearbyPlayersRequest(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetNearbyPlayersRequest> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GetNearbyPlayersRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetNearbyPlayersRequest) PARSER.parseFrom(data);
        }

        public static GetNearbyPlayersRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetNearbyPlayersRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetNearbyPlayersRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetNearbyPlayersRequest) PARSER.parseFrom(data);
        }

        public static GetNearbyPlayersRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetNearbyPlayersRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetNearbyPlayersRequest parseFrom(InputStream input) throws IOException {
            return (GetNearbyPlayersRequest) PARSER.parseFrom(input);
        }

        public static GetNearbyPlayersRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetNearbyPlayersRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GetNearbyPlayersRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (GetNearbyPlayersRequest) PARSER.parseDelimitedFrom(input);
        }

        public static GetNearbyPlayersRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetNearbyPlayersRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GetNearbyPlayersRequest parseFrom(CodedInputStream input) throws IOException {
            return (GetNearbyPlayersRequest) PARSER.parseFrom(input);
        }

        public static GetNearbyPlayersRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetNearbyPlayersRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GetNearbyPlayersRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.GetNearbyPlayersRequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_GetNearbyPlayersRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_GetNearbyPlayersRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.GetNearbyPlayersRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.GetNearbyPlayersRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_GetNearbyPlayersRequest_descriptor;
            }

            public TeamHandler.GetNearbyPlayersRequest getDefaultInstanceForType() {
                return TeamHandler.GetNearbyPlayersRequest.getDefaultInstance();
            }

            public TeamHandler.GetNearbyPlayersRequest build() {
                TeamHandler.GetNearbyPlayersRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.GetNearbyPlayersRequest buildPartial() {
                TeamHandler.GetNearbyPlayersRequest result = new TeamHandler.GetNearbyPlayersRequest(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.GetNearbyPlayersRequest)
                    return mergeFrom((TeamHandler.GetNearbyPlayersRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.GetNearbyPlayersRequest other) {
                if (other == TeamHandler.GetNearbyPlayersRequest.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.GetNearbyPlayersRequest parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.GetNearbyPlayersRequest) TeamHandler.GetNearbyPlayersRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.GetNearbyPlayersRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class GetNearbyPlayersResponse
            extends GeneratedMessage
            implements GetNearbyPlayersResponseOrBuilder {
        private static final GetNearbyPlayersResponse defaultInstance = new GetNearbyPlayersResponse(true);
        private final UnknownFieldSet unknownFields;

        private GetNearbyPlayersResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetNearbyPlayersResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetNearbyPlayersResponse getDefaultInstance() {
            return defaultInstance;
        }

        public GetNearbyPlayersResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetNearbyPlayersResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            if ((mutable_bitField0_ & 0x2) != 2) {
                                this.s2CPlayers_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x2;
                            }
                            this.s2CPlayers_.add(input.readMessage(TeamHandler.Player.PARSER, extensionRegistry));
                            break;
                        case 24:
                            this.bitField0_ |= 0x2;
                            this.s2CNowCount_ = input.readInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 0x4;
                            this.s2CMaxCount_ = input.readInt32();
                            break;
                        case 42:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x8;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x2) == 2) this.s2CPlayers_ = Collections.unmodifiableList(this.s2CPlayers_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_GetNearbyPlayersResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_GetNearbyPlayersResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(GetNearbyPlayersResponse.class, Builder.class);
        }

        public static Parser<GetNearbyPlayersResponse> PARSER = (Parser<GetNearbyPlayersResponse>) new AbstractParser<GetNearbyPlayersResponse>() {
            public TeamHandler.GetNearbyPlayersResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.GetNearbyPlayersResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_PLAYERS_FIELD_NUMBER = 2;
        private List<TeamHandler.Player> s2CPlayers_;
        public static final int S2C_NOWCOUNT_FIELD_NUMBER = 3;
        private int s2CNowCount_;
        public static final int S2C_MAXCOUNT_FIELD_NUMBER = 4;
        private int s2CMaxCount_;
        public static final int S2C_MSG_FIELD_NUMBER = 5;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetNearbyPlayersResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public List<TeamHandler.Player> getS2CPlayersList() {
            return this.s2CPlayers_;
        }

        public List<? extends TeamHandler.PlayerOrBuilder> getS2CPlayersOrBuilderList() {
            return (List) this.s2CPlayers_;
        }

        public int getS2CPlayersCount() {
            return this.s2CPlayers_.size();
        }

        static {
            defaultInstance.initFields();
        }


        public TeamHandler.Player getS2CPlayers(int index) {
            return this.s2CPlayers_.get(index);
        }


        public TeamHandler.PlayerOrBuilder getS2CPlayersOrBuilder(int index) {
            return this.s2CPlayers_.get(index);
        }


        public boolean hasS2CNowCount() {
            return ((this.bitField0_ & 0x2) == 2);
        }


        public int getS2CNowCount() {
            return this.s2CNowCount_;
        }


        public boolean hasS2CMaxCount() {
            return ((this.bitField0_ & 0x4) == 4);
        }


        public int getS2CMaxCount() {
            return this.s2CMaxCount_;
        }


        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x8) == 8);
        }


        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                return (String) ref;
            }
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                this.s2CMsg_ = s;
            }
            return s;
        }


        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }


        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CPlayers_ = Collections.emptyList();
            this.s2CNowCount_ = 0;
            this.s2CMaxCount_ = 0;
            this.s2CMsg_ = "";
        }


        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getS2CPlayersCount(); i++) {
                if (!getS2CPlayers(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }


        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeInt32(1, this.s2CCode_);
            }
            for (int i = 0; i < this.s2CPlayers_.size(); i++) {
                output.writeMessage(2, (MessageLite) this.s2CPlayers_.get(i));
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeInt32(3, this.s2CNowCount_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                output.writeInt32(4, this.s2CMaxCount_);
            }
            if ((this.bitField0_ & 0x8) == 8) {
                output.writeBytes(5, getS2CMsgBytes());
            }
            getUnknownFields().writeTo(output);
        }


        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            }
            for (int i = 0; i < this.s2CPlayers_.size(); i++) {
                size += CodedOutputStream.computeMessageSize(2, (MessageLite) this.s2CPlayers_.get(i));
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeInt32Size(3, this.s2CNowCount_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                size += CodedOutputStream.computeInt32Size(4, this.s2CMaxCount_);
            }
            if ((this.bitField0_ & 0x8) == 8) {
                size += CodedOutputStream.computeBytesSize(5, getS2CMsgBytes());
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }


        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }


        public static GetNearbyPlayersResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetNearbyPlayersResponse) PARSER.parseFrom(data);
        }


        public static GetNearbyPlayersResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetNearbyPlayersResponse) PARSER.parseFrom(data, extensionRegistry);
        }


        public static GetNearbyPlayersResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetNearbyPlayersResponse) PARSER.parseFrom(data);
        }


        public static GetNearbyPlayersResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetNearbyPlayersResponse) PARSER.parseFrom(data, extensionRegistry);
        }


        public static GetNearbyPlayersResponse parseFrom(InputStream input) throws IOException {
            return (GetNearbyPlayersResponse) PARSER.parseFrom(input);
        }


        public static GetNearbyPlayersResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetNearbyPlayersResponse) PARSER.parseFrom(input, extensionRegistry);
        }


        public static GetNearbyPlayersResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (GetNearbyPlayersResponse) PARSER.parseDelimitedFrom(input);
        }


        public static GetNearbyPlayersResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetNearbyPlayersResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }


        public static GetNearbyPlayersResponse parseFrom(CodedInputStream input) throws IOException {
            return (GetNearbyPlayersResponse) PARSER.parseFrom(input);
        }


        public static GetNearbyPlayersResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetNearbyPlayersResponse) PARSER.parseFrom(input, extensionRegistry);
        }


        public static Builder newBuilder() {
            return Builder.create();
        }


        public Builder newBuilderForType() {
            return newBuilder();
        }


        public static Builder newBuilder(GetNearbyPlayersResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }


        public Builder toBuilder() {
            return newBuilder(this);
        }


        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }


        public static final class Builder
                extends GeneratedMessage.Builder<Builder>
                implements TeamHandler.GetNearbyPlayersResponseOrBuilder {
            private int bitField0_;


            private int s2CCode_;


            private List<TeamHandler.Player> s2CPlayers_;


            private RepeatedFieldBuilder<TeamHandler.Player, TeamHandler.Player.Builder, TeamHandler.PlayerOrBuilder> s2CPlayersBuilder_;


            private int s2CNowCount_;


            private int s2CMaxCount_;


            private Object s2CMsg_;


            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_GetNearbyPlayersResponse_descriptor;
            }


            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_GetNearbyPlayersResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.GetNearbyPlayersResponse.class, Builder.class);
            }


            private Builder() {
                this.s2CPlayers_ = Collections.emptyList();
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }


            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CPlayers_ = Collections.emptyList();
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }


            private void maybeForceBuilderInitialization() {
                if (TeamHandler.GetNearbyPlayersResponse.alwaysUseFieldBuilders) {
                    getS2CPlayersFieldBuilder();
                }
            }


            private static Builder create() {
                return new Builder();
            }


            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                if (this.s2CPlayersBuilder_ == null) {
                    this.s2CPlayers_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFD;
                } else {
                    this.s2CPlayersBuilder_.clear();
                }
                this.s2CNowCount_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                this.s2CMaxCount_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFEF;
                return this;
            }


            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }


            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_GetNearbyPlayersResponse_descriptor;
            }


            public TeamHandler.GetNearbyPlayersResponse getDefaultInstanceForType() {
                return TeamHandler.GetNearbyPlayersResponse.getDefaultInstance();
            }


            public TeamHandler.GetNearbyPlayersResponse build() {
                TeamHandler.GetNearbyPlayersResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }


            public TeamHandler.GetNearbyPlayersResponse buildPartial() {
                TeamHandler.GetNearbyPlayersResponse result = new TeamHandler.GetNearbyPlayersResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) {
                    to_bitField0_ |= 0x1;
                }
                result.s2CCode_ = this.s2CCode_;
                if (this.s2CPlayersBuilder_ == null) {
                    if ((this.bitField0_ & 0x2) == 2) {
                        this.s2CPlayers_ = Collections.unmodifiableList(this.s2CPlayers_);
                        this.bitField0_ &= 0xFFFFFFFD;
                    }
                    result.s2CPlayers_ = this.s2CPlayers_;
                } else {
                    result.s2CPlayers_ = this.s2CPlayersBuilder_.build();
                }
                if ((from_bitField0_ & 0x4) == 4) {
                    to_bitField0_ |= 0x2;
                }
                result.s2CNowCount_ = this.s2CNowCount_;
                if ((from_bitField0_ & 0x8) == 8) {
                    to_bitField0_ |= 0x4;
                }
                result.s2CMaxCount_ = this.s2CMaxCount_;
                if ((from_bitField0_ & 0x10) == 16) {
                    to_bitField0_ |= 0x8;
                }
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }


            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.GetNearbyPlayersResponse) {
                    return mergeFrom((TeamHandler.GetNearbyPlayersResponse) other);
                }
                super.mergeFrom(other);
                return this;
            }


            public Builder mergeFrom(TeamHandler.GetNearbyPlayersResponse other) {
                if (other == TeamHandler.GetNearbyPlayersResponse.getDefaultInstance()) {
                    return this;
                }
                if (other.hasS2CCode()) {
                    setS2CCode(other.getS2CCode());
                }
                if (this.s2CPlayersBuilder_ == null) {
                    if (!other.s2CPlayers_.isEmpty()) {
                        if (this.s2CPlayers_.isEmpty()) {
                            this.s2CPlayers_ = other.s2CPlayers_;
                            this.bitField0_ &= 0xFFFFFFFD;
                        } else {
                            ensureS2CPlayersIsMutable();
                            this.s2CPlayers_.addAll(other.s2CPlayers_);
                        }
                        onChanged();
                    }
                } else if (!other.s2CPlayers_.isEmpty()) {
                    if (this.s2CPlayersBuilder_.isEmpty()) {
                        this.s2CPlayersBuilder_.dispose();
                        this.s2CPlayersBuilder_ = null;
                        this.s2CPlayers_ = other.s2CPlayers_;
                        this.bitField0_ &= 0xFFFFFFFD;
                        this.s2CPlayersBuilder_ = TeamHandler.GetNearbyPlayersResponse.alwaysUseFieldBuilders ? getS2CPlayersFieldBuilder() : null;
                    } else {
                        this.s2CPlayersBuilder_.addAllMessages(other.s2CPlayers_);
                    }
                }
                if (other.hasS2CNowCount()) {
                    setS2CNowCount(other.getS2CNowCount());
                }
                if (other.hasS2CMaxCount()) {
                    setS2CMaxCount(other.getS2CMaxCount());
                }
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x10;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }


            public final boolean isInitialized() {
                if (!hasS2CCode()) {
                    return false;
                }
                for (int i = 0; i < getS2CPlayersCount(); i++) {
                    if (!getS2CPlayers(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }


            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.GetNearbyPlayersResponse parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.GetNearbyPlayersResponse) TeamHandler.GetNearbyPlayersResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.GetNearbyPlayersResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }


            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }


            public int getS2CCode() {
                return this.s2CCode_;
            }


            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }


            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }


            private void ensureS2CPlayersIsMutable() {
                if ((this.bitField0_ & 0x2) != 2) {
                    this.s2CPlayers_ = new ArrayList<>(this.s2CPlayers_);
                    this.bitField0_ |= 0x2;
                }
            }


            public List<TeamHandler.Player> getS2CPlayersList() {
                if (this.s2CPlayersBuilder_ == null) {
                    return Collections.unmodifiableList(this.s2CPlayers_);
                }
                return this.s2CPlayersBuilder_.getMessageList();
            }


            public int getS2CPlayersCount() {
                if (this.s2CPlayersBuilder_ == null) {
                    return this.s2CPlayers_.size();
                }
                return this.s2CPlayersBuilder_.getCount();
            }


            public TeamHandler.Player getS2CPlayers(int index) {
                if (this.s2CPlayersBuilder_ == null) {
                    return this.s2CPlayers_.get(index);
                }
                return (TeamHandler.Player) this.s2CPlayersBuilder_.getMessage(index);
            }


            public Builder setS2CPlayers(int index, TeamHandler.Player value) {
                if (this.s2CPlayersBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureS2CPlayersIsMutable();
                    this.s2CPlayers_.set(index, value);
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.setMessage(index, value);
                }
                return this;
            }


            public Builder setS2CPlayers(int index, TeamHandler.Player.Builder builderForValue) {
                if (this.s2CPlayersBuilder_ == null) {
                    ensureS2CPlayersIsMutable();
                    this.s2CPlayers_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }


            public Builder addS2CPlayers(TeamHandler.Player value) {
                if (this.s2CPlayersBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureS2CPlayersIsMutable();
                    this.s2CPlayers_.add(value);
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.addMessage(value);
                }
                return this;
            }


            public Builder addS2CPlayers(int index, TeamHandler.Player value) {
                if (this.s2CPlayersBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureS2CPlayersIsMutable();
                    this.s2CPlayers_.add(index, value);
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.addMessage(index, value);
                }
                return this;
            }


            public Builder addS2CPlayers(TeamHandler.Player.Builder builderForValue) {
                if (this.s2CPlayersBuilder_ == null) {
                    ensureS2CPlayersIsMutable();
                    this.s2CPlayers_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }


            public Builder addS2CPlayers(int index, TeamHandler.Player.Builder builderForValue) {
                if (this.s2CPlayersBuilder_ == null) {
                    ensureS2CPlayersIsMutable();
                    this.s2CPlayers_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }


            public Builder addAllS2CPlayers(Iterable<? extends TeamHandler.Player> values) {
                if (this.s2CPlayersBuilder_ == null) {
                    ensureS2CPlayersIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.s2CPlayers_);
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.addAllMessages(values);
                }
                return this;
            }


            public Builder clearS2CPlayers() {
                if (this.s2CPlayersBuilder_ == null) {
                    this.s2CPlayers_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFD;
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.clear();
                }
                return this;
            }


            public Builder removeS2CPlayers(int index) {
                if (this.s2CPlayersBuilder_ == null) {
                    ensureS2CPlayersIsMutable();
                    this.s2CPlayers_.remove(index);
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.remove(index);
                }
                return this;
            }


            public TeamHandler.Player.Builder getS2CPlayersBuilder(int index) {
                return (TeamHandler.Player.Builder) getS2CPlayersFieldBuilder().getBuilder(index);
            }


            public TeamHandler.PlayerOrBuilder getS2CPlayersOrBuilder(int index) {
                if (this.s2CPlayersBuilder_ == null) {
                    return this.s2CPlayers_.get(index);
                }
                return (TeamHandler.PlayerOrBuilder) this.s2CPlayersBuilder_.getMessageOrBuilder(index);
            }


            public List<? extends TeamHandler.PlayerOrBuilder> getS2CPlayersOrBuilderList() {
                if (this.s2CPlayersBuilder_ != null) {
                    return this.s2CPlayersBuilder_.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList((List) this.s2CPlayers_);
            }


            public TeamHandler.Player.Builder addS2CPlayersBuilder() {
                return (TeamHandler.Player.Builder) getS2CPlayersFieldBuilder().addBuilder(TeamHandler.Player.getDefaultInstance());
            }


            public TeamHandler.Player.Builder addS2CPlayersBuilder(int index) {
                return (TeamHandler.Player.Builder) getS2CPlayersFieldBuilder().addBuilder(index, TeamHandler.Player.getDefaultInstance());
            }


            public List<TeamHandler.Player.Builder> getS2CPlayersBuilderList() {
                return getS2CPlayersFieldBuilder().getBuilderList();
            }


            private RepeatedFieldBuilder<TeamHandler.Player, TeamHandler.Player.Builder, TeamHandler.PlayerOrBuilder> getS2CPlayersFieldBuilder() {
                if (this.s2CPlayersBuilder_ == null) {
                    this.s2CPlayersBuilder_ = new RepeatedFieldBuilder(this.s2CPlayers_, ((this.bitField0_ & 0x2) == 2), getParentForChildren(), isClean());
                    this.s2CPlayers_ = null;
                }
                return this.s2CPlayersBuilder_;
            }


            public boolean hasS2CNowCount() {
                return ((this.bitField0_ & 0x4) == 4);
            }


            public int getS2CNowCount() {
                return this.s2CNowCount_;
            }


            public Builder setS2CNowCount(int value) {
                this.bitField0_ |= 0x4;
                this.s2CNowCount_ = value;
                onChanged();
                return this;
            }


            public Builder clearS2CNowCount() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.s2CNowCount_ = 0;
                onChanged();
                return this;
            }


            public boolean hasS2CMaxCount() {
                return ((this.bitField0_ & 0x8) == 8);
            }


            public int getS2CMaxCount() {
                return this.s2CMaxCount_;
            }


            public Builder setS2CMaxCount(int value) {
                this.bitField0_ |= 0x8;
                this.s2CMaxCount_ = value;
                onChanged();
                return this;
            }


            public Builder clearS2CMaxCount() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.s2CMaxCount_ = 0;
                onChanged();
                return this;
            }


            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x10) == 16);
            }


            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.s2CMsg_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setS2CMsg(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x10;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }


            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFEF;
                this.s2CMsg_ = TeamHandler.GetNearbyPlayersResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }


            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x10;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }
    }


    public static final class NearTeamLeader
            extends GeneratedMessage
            implements NearTeamLeaderOrBuilder {
        private static final NearTeamLeader defaultInstance = new NearTeamLeader(true);
        private final UnknownFieldSet unknownFields;

        private NearTeamLeader(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private NearTeamLeader(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static NearTeamLeader getDefaultInstance() {
            return defaultInstance;
        }

        public NearTeamLeader getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private NearTeamLeader(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.name_ = bs;
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.lv_ = input.readInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.pro_ = input.readInt32();
                            break;
                        case 34:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x8;
                            this.guildName_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_NearTeamLeader_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_NearTeamLeader_fieldAccessorTable.ensureFieldAccessorsInitialized(NearTeamLeader.class, Builder.class);
        }

        public static Parser<NearTeamLeader> PARSER = (Parser<NearTeamLeader>) new AbstractParser<NearTeamLeader>() {
            public TeamHandler.NearTeamLeader parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.NearTeamLeader(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int NAME_FIELD_NUMBER = 1;
        private Object name_;
        public static final int LV_FIELD_NUMBER = 2;
        private int lv_;
        public static final int PRO_FIELD_NUMBER = 3;
        private int pro_;
        public static final int GUILDNAME_FIELD_NUMBER = 4;
        private Object guildName_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<NearTeamLeader> getParserForType() {
            return PARSER;
        }

        public boolean hasName() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getName() {
            Object ref = this.name_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.name_ = s;
            return s;
        }

        public ByteString getNameBytes() {
            Object ref = this.name_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.name_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasLv() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        static {
            defaultInstance.initFields();
        }


        public int getLv() {
            return this.lv_;
        }


        public boolean hasPro() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public int getPro() {
            return this.pro_;
        }

        public boolean hasGuildName() {
            return ((this.bitField0_ & 0x8) == 8);
        }

        public String getGuildName() {
            Object ref = this.guildName_;
            if (ref instanceof String) {
                return (String) ref;
            }
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                this.guildName_ = s;
            }
            return s;
        }

        public ByteString getGuildNameBytes() {
            Object ref = this.guildName_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.guildName_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.name_ = "";
            this.lv_ = 0;
            this.pro_ = 0;
            this.guildName_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeBytes(1, getNameBytes());
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeInt32(2, this.lv_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                output.writeInt32(3, this.pro_);
            }
            if ((this.bitField0_ & 0x8) == 8) {
                output.writeBytes(4, getGuildNameBytes());
            }
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeBytesSize(1, getNameBytes());
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeInt32Size(2, this.lv_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                size += CodedOutputStream.computeInt32Size(3, this.pro_);
            }
            if ((this.bitField0_ & 0x8) == 8) {
                size += CodedOutputStream.computeBytesSize(4, getGuildNameBytes());
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static NearTeamLeader parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (NearTeamLeader) PARSER.parseFrom(data);
        }

        public static NearTeamLeader parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (NearTeamLeader) PARSER.parseFrom(data, extensionRegistry);
        }

        public static NearTeamLeader parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (NearTeamLeader) PARSER.parseFrom(data);
        }

        public static NearTeamLeader parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (NearTeamLeader) PARSER.parseFrom(data, extensionRegistry);
        }

        public static NearTeamLeader parseFrom(InputStream input) throws IOException {
            return (NearTeamLeader) PARSER.parseFrom(input);
        }

        public static NearTeamLeader parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (NearTeamLeader) PARSER.parseFrom(input, extensionRegistry);
        }

        public static NearTeamLeader parseDelimitedFrom(InputStream input) throws IOException {
            return (NearTeamLeader) PARSER.parseDelimitedFrom(input);
        }

        public static NearTeamLeader parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (NearTeamLeader) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static NearTeamLeader parseFrom(CodedInputStream input) throws IOException {
            return (NearTeamLeader) PARSER.parseFrom(input);
        }

        public static NearTeamLeader parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (NearTeamLeader) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(NearTeamLeader prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder
                extends GeneratedMessage.Builder<Builder>
                implements TeamHandler.NearTeamLeaderOrBuilder {
            private int bitField0_;
            private Object name_;
            private int lv_;
            private int pro_;
            private Object guildName_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_NearTeamLeader_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_NearTeamLeader_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.NearTeamLeader.class, Builder.class);
            }

            private Builder() {
                this.name_ = "";
                this.guildName_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.name_ = "";
                this.guildName_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.NearTeamLeader.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.name_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                this.lv_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                this.pro_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                this.guildName_ = "";
                this.bitField0_ &= 0xFFFFFFF7;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_NearTeamLeader_descriptor;
            }

            public TeamHandler.NearTeamLeader getDefaultInstanceForType() {
                return TeamHandler.NearTeamLeader.getDefaultInstance();
            }

            public TeamHandler.NearTeamLeader build() {
                TeamHandler.NearTeamLeader result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public TeamHandler.NearTeamLeader buildPartial() {
                TeamHandler.NearTeamLeader result = new TeamHandler.NearTeamLeader(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) {
                    to_bitField0_ |= 0x1;
                }
                result.name_ = this.name_;
                if ((from_bitField0_ & 0x2) == 2) {
                    to_bitField0_ |= 0x2;
                }
                result.lv_ = this.lv_;
                if ((from_bitField0_ & 0x4) == 4) {
                    to_bitField0_ |= 0x4;
                }
                result.pro_ = this.pro_;
                if ((from_bitField0_ & 0x8) == 8) {
                    to_bitField0_ |= 0x8;
                }
                result.guildName_ = this.guildName_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.NearTeamLeader) {
                    return mergeFrom((TeamHandler.NearTeamLeader) other);
                }
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.NearTeamLeader other) {
                if (other == TeamHandler.NearTeamLeader.getDefaultInstance()) {
                    return this;
                }
                if (other.hasName()) {
                    this.bitField0_ |= 0x1;
                    this.name_ = other.name_;
                    onChanged();
                }
                if (other.hasLv()) {
                    setLv(other.getLv());
                }
                if (other.hasPro()) {
                    setPro(other.getPro());
                }
                if (other.hasGuildName()) {
                    this.bitField0_ |= 0x8;
                    this.guildName_ = other.guildName_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.NearTeamLeader parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.NearTeamLeader) TeamHandler.NearTeamLeader.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.NearTeamLeader) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            public boolean hasName() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public String getName() {
                Object ref = this.name_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.name_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }

            public ByteString getNameBytes() {
                Object ref = this.name_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.name_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setName(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x1;
                this.name_ = value;
                onChanged();
                return this;
            }

            public Builder clearName() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.name_ = TeamHandler.NearTeamLeader.getDefaultInstance().getName();
                onChanged();
                return this;
            }

            public Builder setNameBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x1;
                this.name_ = value;
                onChanged();
                return this;
            }

            public boolean hasLv() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getLv() {
                return this.lv_;
            }

            public Builder setLv(int value) {
                this.bitField0_ |= 0x2;
                this.lv_ = value;
                onChanged();
                return this;
            }

            public Builder clearLv() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.lv_ = 0;
                onChanged();
                return this;
            }

            public boolean hasPro() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public int getPro() {
                return this.pro_;
            }

            public Builder setPro(int value) {
                this.bitField0_ |= 0x4;
                this.pro_ = value;
                onChanged();
                return this;
            }

            public Builder clearPro() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.pro_ = 0;
                onChanged();
                return this;
            }

            public boolean hasGuildName() {
                return ((this.bitField0_ & 0x8) == 8);
            }

            public String getGuildName() {
                Object ref = this.guildName_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.guildName_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }

            public ByteString getGuildNameBytes() {
                Object ref = this.guildName_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.guildName_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setGuildName(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x8;
                this.guildName_ = value;
                onChanged();
                return this;
            }

            public Builder clearGuildName() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.guildName_ = TeamHandler.NearTeamLeader.getDefaultInstance().getGuildName();
                onChanged();
                return this;
            }

            public Builder setGuildNameBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x8;
                this.guildName_ = value;
                onChanged();
                return this;
            }
        }
    }

    public static final class NearTeamMember
            extends GeneratedMessage
            implements NearTeamMemberOrBuilder {
        private static final NearTeamMember defaultInstance = new NearTeamMember(true);
        private final UnknownFieldSet unknownFields;

        private NearTeamMember(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private NearTeamMember(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static NearTeamMember getDefaultInstance() {
            return defaultInstance;
        }

        public NearTeamMember getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private NearTeamMember(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.pro_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.lv_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_NearTeamMember_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_NearTeamMember_fieldAccessorTable.ensureFieldAccessorsInitialized(NearTeamMember.class, Builder.class);
        }

        public static Parser<NearTeamMember> PARSER = (Parser<NearTeamMember>) new AbstractParser<NearTeamMember>() {
            public TeamHandler.NearTeamMember parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.NearTeamMember(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int PRO_FIELD_NUMBER = 1;
        private int pro_;
        public static final int LV_FIELD_NUMBER = 2;
        private int lv_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<NearTeamMember> getParserForType() {
            return PARSER;
        }

        public boolean hasPro() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getPro() {
            return this.pro_;
        }

        public boolean hasLv() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getLv() {
            return this.lv_;
        }

        private void initFields() {
            this.pro_ = 0;
            this.lv_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.pro_);
            if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.lv_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.pro_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.lv_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static NearTeamMember parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (NearTeamMember) PARSER.parseFrom(data);
        }

        public static NearTeamMember parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (NearTeamMember) PARSER.parseFrom(data, extensionRegistry);
        }

        public static NearTeamMember parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (NearTeamMember) PARSER.parseFrom(data);
        }

        public static NearTeamMember parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (NearTeamMember) PARSER.parseFrom(data, extensionRegistry);
        }

        public static NearTeamMember parseFrom(InputStream input) throws IOException {
            return (NearTeamMember) PARSER.parseFrom(input);
        }

        public static NearTeamMember parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (NearTeamMember) PARSER.parseFrom(input, extensionRegistry);
        }

        public static NearTeamMember parseDelimitedFrom(InputStream input) throws IOException {
            return (NearTeamMember) PARSER.parseDelimitedFrom(input);
        }

        public static NearTeamMember parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (NearTeamMember) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static NearTeamMember parseFrom(CodedInputStream input) throws IOException {
            return (NearTeamMember) PARSER.parseFrom(input);
        }

        public static NearTeamMember parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (NearTeamMember) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(NearTeamMember prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.NearTeamMemberOrBuilder {
            private int bitField0_;
            private int pro_;
            private int lv_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_NearTeamMember_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_NearTeamMember_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.NearTeamMember.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.NearTeamMember.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.pro_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.lv_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_NearTeamMember_descriptor;
            }

            public TeamHandler.NearTeamMember getDefaultInstanceForType() {
                return TeamHandler.NearTeamMember.getDefaultInstance();
            }

            public TeamHandler.NearTeamMember build() {
                TeamHandler.NearTeamMember result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.NearTeamMember buildPartial() {
                TeamHandler.NearTeamMember result = new TeamHandler.NearTeamMember(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.pro_ = this.pro_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.lv_ = this.lv_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.NearTeamMember) return mergeFrom((TeamHandler.NearTeamMember) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.NearTeamMember other) {
                if (other == TeamHandler.NearTeamMember.getDefaultInstance()) return this;
                if (other.hasPro()) setPro(other.getPro());
                if (other.hasLv()) setLv(other.getLv());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.NearTeamMember parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.NearTeamMember) TeamHandler.NearTeamMember.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.NearTeamMember) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasPro() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getPro() {
                return this.pro_;
            }

            public Builder setPro(int value) {
                this.bitField0_ |= 0x1;
                this.pro_ = value;
                onChanged();
                return this;
            }

            public Builder clearPro() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.pro_ = 0;
                onChanged();
                return this;
            }

            public boolean hasLv() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getLv() {
                return this.lv_;
            }

            public Builder setLv(int value) {
                this.bitField0_ |= 0x2;
                this.lv_ = value;
                onChanged();
                return this;
            }

            public Builder clearLv() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.lv_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class NearTeam
            extends GeneratedMessage
            implements NearTeamOrBuilder {
        private static final NearTeam defaultInstance = new NearTeam(true);
        private final UnknownFieldSet unknownFields;

        private NearTeam(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private NearTeam(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static NearTeam getDefaultInstance() {
            return defaultInstance;
        }

        public NearTeam getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private NearTeam(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    TeamHandler.NearTeamLeader.Builder subBuilder;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.teamId_ = bs;
                            break;
                        case 18:
                            subBuilder = null;
                            if ((this.bitField0_ & 0x2) == 2) subBuilder = this.leader_.toBuilder();
                            this.leader_ = (TeamHandler.NearTeamLeader) input.readMessage(TeamHandler.NearTeamLeader.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(this.leader_);
                                this.leader_ = subBuilder.buildPartial();
                            }
                            this.bitField0_ |= 0x2;
                            break;
                        case 26:
                            if ((mutable_bitField0_ & 0x4) != 4) {
                                this.members_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x4;
                            }
                            this.members_.add(input.readMessage(TeamHandler.NearTeamMember.PARSER, extensionRegistry));
                            break;
                        case 32:
                            this.bitField0_ |= 0x4;
                            this.apply_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x4) == 4) this.members_ = Collections.unmodifiableList(this.members_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_NearTeam_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_NearTeam_fieldAccessorTable.ensureFieldAccessorsInitialized(NearTeam.class, Builder.class);
        }

        public static Parser<NearTeam> PARSER = (Parser<NearTeam>) new AbstractParser<NearTeam>() {
            public TeamHandler.NearTeam parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.NearTeam(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int TEAMID_FIELD_NUMBER = 1;
        private Object teamId_;
        public static final int LEADER_FIELD_NUMBER = 2;
        private TeamHandler.NearTeamLeader leader_;
        public static final int MEMBERS_FIELD_NUMBER = 3;
        private List<TeamHandler.NearTeamMember> members_;
        public static final int APPLY_FIELD_NUMBER = 4;
        private int apply_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<NearTeam> getParserForType() {
            return PARSER;
        }

        public boolean hasTeamId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getTeamId() {
            Object ref = this.teamId_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.teamId_ = s;
            return s;
        }

        public ByteString getTeamIdBytes() {
            Object ref = this.teamId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.teamId_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasLeader() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public TeamHandler.NearTeamLeader getLeader() {
            return this.leader_;
        }

        static {
            defaultInstance.initFields();
        }

        public TeamHandler.NearTeamLeaderOrBuilder getLeaderOrBuilder() {
            return this.leader_;
        }

        public List<TeamHandler.NearTeamMember> getMembersList() {
            return this.members_;
        }

        public List<? extends TeamHandler.NearTeamMemberOrBuilder> getMembersOrBuilderList() {
            return (List) this.members_;
        }

        public int getMembersCount() {
            return this.members_.size();
        }

        public TeamHandler.NearTeamMember getMembers(int index) {
            return this.members_.get(index);
        }

        public TeamHandler.NearTeamMemberOrBuilder getMembersOrBuilder(int index) {
            return this.members_.get(index);
        }

        public boolean hasApply() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public int getApply() {
            return this.apply_;
        }

        private void initFields() {
            this.teamId_ = "";
            this.leader_ = TeamHandler.NearTeamLeader.getDefaultInstance();
            this.members_ = Collections.emptyList();
            this.apply_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeBytes(1, getTeamIdBytes());
            if ((this.bitField0_ & 0x2) == 2)
                output.writeMessage(2, (MessageLite) this.leader_);
            for (int i = 0; i < this.members_.size(); i++)
                output.writeMessage(3, (MessageLite) this.members_.get(i));
            if ((this.bitField0_ & 0x4) == 4)
                output.writeInt32(4, this.apply_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeBytesSize(1, getTeamIdBytes());
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeMessageSize(2, (MessageLite) this.leader_);
            for (int i = 0; i < this.members_.size(); i++)
                size += CodedOutputStream.computeMessageSize(3, (MessageLite) this.members_.get(i));
            if ((this.bitField0_ & 0x4) == 4)
                size += CodedOutputStream.computeInt32Size(4, this.apply_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static NearTeam parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (NearTeam) PARSER.parseFrom(data);
        }

        public static NearTeam parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (NearTeam) PARSER.parseFrom(data, extensionRegistry);
        }

        public static NearTeam parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (NearTeam) PARSER.parseFrom(data);
        }

        public static NearTeam parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (NearTeam) PARSER.parseFrom(data, extensionRegistry);
        }

        public static NearTeam parseFrom(InputStream input) throws IOException {
            return (NearTeam) PARSER.parseFrom(input);
        }

        public static NearTeam parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (NearTeam) PARSER.parseFrom(input, extensionRegistry);
        }

        public static NearTeam parseDelimitedFrom(InputStream input) throws IOException {
            return (NearTeam) PARSER.parseDelimitedFrom(input);
        }

        public static NearTeam parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (NearTeam) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static NearTeam parseFrom(CodedInputStream input) throws IOException {
            return (NearTeam) PARSER.parseFrom(input);
        }

        public static NearTeam parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (NearTeam) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(NearTeam prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.NearTeamOrBuilder {
            private int bitField0_;
            private Object teamId_;
            private TeamHandler.NearTeamLeader leader_;
            private SingleFieldBuilder<TeamHandler.NearTeamLeader, TeamHandler.NearTeamLeader.Builder, TeamHandler.NearTeamLeaderOrBuilder> leaderBuilder_;
            private List<TeamHandler.NearTeamMember> members_;
            private RepeatedFieldBuilder<TeamHandler.NearTeamMember, TeamHandler.NearTeamMember.Builder, TeamHandler.NearTeamMemberOrBuilder> membersBuilder_;
            private int apply_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_NearTeam_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_NearTeam_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.NearTeam.class, Builder.class);
            }

            private Builder() {
                this.teamId_ = "";
                this.leader_ = TeamHandler.NearTeamLeader.getDefaultInstance();
                this.members_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.teamId_ = "";
                this.leader_ = TeamHandler.NearTeamLeader.getDefaultInstance();
                this.members_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.NearTeam.alwaysUseFieldBuilders) {
                    getLeaderFieldBuilder();
                    getMembersFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.teamId_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                if (this.leaderBuilder_ == null) {
                    this.leader_ = TeamHandler.NearTeamLeader.getDefaultInstance();
                } else {
                    this.leaderBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFD;
                if (this.membersBuilder_ == null) {
                    this.members_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                } else {
                    this.membersBuilder_.clear();
                }
                this.apply_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_NearTeam_descriptor;
            }

            public TeamHandler.NearTeam getDefaultInstanceForType() {
                return TeamHandler.NearTeam.getDefaultInstance();
            }

            public TeamHandler.NearTeam build() {
                TeamHandler.NearTeam result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.NearTeam buildPartial() {
                TeamHandler.NearTeam result = new TeamHandler.NearTeam(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.teamId_ = this.teamId_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                if (this.leaderBuilder_ == null) {
                    result.leader_ = this.leader_;
                } else {
                    result.leader_ = (TeamHandler.NearTeamLeader) this.leaderBuilder_.build();
                }
                if (this.membersBuilder_ == null) {
                    if ((this.bitField0_ & 0x4) == 4) {
                        this.members_ = Collections.unmodifiableList(this.members_);
                        this.bitField0_ &= 0xFFFFFFFB;
                    }
                    result.members_ = this.members_;
                } else {
                    result.members_ = this.membersBuilder_.build();
                }
                if ((from_bitField0_ & 0x8) == 8)
                    to_bitField0_ |= 0x4;
                result.apply_ = this.apply_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.NearTeam)
                    return mergeFrom((TeamHandler.NearTeam) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.NearTeam other) {
                if (other == TeamHandler.NearTeam.getDefaultInstance())
                    return this;
                if (other.hasTeamId()) {
                    this.bitField0_ |= 0x1;
                    this.teamId_ = other.teamId_;
                    onChanged();
                }
                if (other.hasLeader())
                    mergeLeader(other.getLeader());
                if (this.membersBuilder_ == null) {
                    if (!other.members_.isEmpty()) {
                        if (this.members_.isEmpty()) {
                            this.members_ = other.members_;
                            this.bitField0_ &= 0xFFFFFFFB;
                        } else {
                            ensureMembersIsMutable();
                            this.members_.addAll(other.members_);
                        }
                        onChanged();
                    }
                } else if (!other.members_.isEmpty()) {
                    if (this.membersBuilder_.isEmpty()) {
                        this.membersBuilder_.dispose();
                        this.membersBuilder_ = null;
                        this.members_ = other.members_;
                        this.bitField0_ &= 0xFFFFFFFB;
                        this.membersBuilder_ = TeamHandler.NearTeam.alwaysUseFieldBuilders ? getMembersFieldBuilder() : null;
                    } else {
                        this.membersBuilder_.addAllMessages(other.members_);
                    }
                }
                if (other.hasApply())
                    setApply(other.getApply());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.NearTeam parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.NearTeam) TeamHandler.NearTeam.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.NearTeam) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasTeamId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public String getTeamId() {
                Object ref = this.teamId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.teamId_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getTeamIdBytes() {
                Object ref = this.teamId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.teamId_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setTeamId(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.teamId_ = value;
                onChanged();
                return this;
            }

            public Builder clearTeamId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.teamId_ = TeamHandler.NearTeam.getDefaultInstance().getTeamId();
                onChanged();
                return this;
            }

            public Builder setTeamIdBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.teamId_ = value;
                onChanged();
                return this;
            }

            public boolean hasLeader() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public TeamHandler.NearTeamLeader getLeader() {
                if (this.leaderBuilder_ == null)
                    return this.leader_;
                return (TeamHandler.NearTeamLeader) this.leaderBuilder_.getMessage();
            }

            public Builder setLeader(TeamHandler.NearTeamLeader value) {
                if (this.leaderBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    this.leader_ = value;
                    onChanged();
                } else {
                    this.leaderBuilder_.setMessage(value);
                }
                this.bitField0_ |= 0x2;
                return this;
            }

            public Builder setLeader(TeamHandler.NearTeamLeader.Builder builderForValue) {
                if (this.leaderBuilder_ == null) {
                    this.leader_ = builderForValue.build();
                    onChanged();
                } else {
                    this.leaderBuilder_.setMessage(builderForValue.build());
                }
                this.bitField0_ |= 0x2;
                return this;
            }

            public Builder mergeLeader(TeamHandler.NearTeamLeader value) {
                if (this.leaderBuilder_ == null) {
                    if ((this.bitField0_ & 0x2) == 2 && this.leader_ != TeamHandler.NearTeamLeader.getDefaultInstance()) {
                        this.leader_ = TeamHandler.NearTeamLeader.newBuilder(this.leader_).mergeFrom(value).buildPartial();
                    } else {
                        this.leader_ = value;
                    }
                    onChanged();
                } else {
                    this.leaderBuilder_.mergeFrom(value);
                }
                this.bitField0_ |= 0x2;
                return this;
            }

            public Builder clearLeader() {
                if (this.leaderBuilder_ == null) {
                    this.leader_ = TeamHandler.NearTeamLeader.getDefaultInstance();
                    onChanged();
                } else {
                    this.leaderBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public TeamHandler.NearTeamLeader.Builder getLeaderBuilder() {
                this.bitField0_ |= 0x2;
                onChanged();
                return (TeamHandler.NearTeamLeader.Builder) getLeaderFieldBuilder().getBuilder();
            }

            public TeamHandler.NearTeamLeaderOrBuilder getLeaderOrBuilder() {
                if (this.leaderBuilder_ != null)
                    return (TeamHandler.NearTeamLeaderOrBuilder) this.leaderBuilder_.getMessageOrBuilder();
                return this.leader_;
            }

            private SingleFieldBuilder<TeamHandler.NearTeamLeader, TeamHandler.NearTeamLeader.Builder, TeamHandler.NearTeamLeaderOrBuilder> getLeaderFieldBuilder() {
                if (this.leaderBuilder_ == null) {
                    this.leaderBuilder_ = new SingleFieldBuilder(getLeader(), getParentForChildren(), isClean());
                    this.leader_ = null;
                }
                return this.leaderBuilder_;
            }

            private void ensureMembersIsMutable() {
                if ((this.bitField0_ & 0x4) != 4) {
                    this.members_ = new ArrayList<>(this.members_);
                    this.bitField0_ |= 0x4;
                }
            }

            public List<TeamHandler.NearTeamMember> getMembersList() {
                if (this.membersBuilder_ == null)
                    return Collections.unmodifiableList(this.members_);
                return this.membersBuilder_.getMessageList();
            }

            public int getMembersCount() {
                if (this.membersBuilder_ == null)
                    return this.members_.size();
                return this.membersBuilder_.getCount();
            }

            public TeamHandler.NearTeamMember getMembers(int index) {
                if (this.membersBuilder_ == null)
                    return this.members_.get(index);
                return (TeamHandler.NearTeamMember) this.membersBuilder_.getMessage(index);
            }

            public Builder setMembers(int index, TeamHandler.NearTeamMember value) {
                if (this.membersBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureMembersIsMutable();
                    this.members_.set(index, value);
                    onChanged();
                } else {
                    this.membersBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setMembers(int index, TeamHandler.NearTeamMember.Builder builderForValue) {
                if (this.membersBuilder_ == null) {
                    ensureMembersIsMutable();
                    this.members_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.membersBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addMembers(TeamHandler.NearTeamMember value) {
                if (this.membersBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureMembersIsMutable();
                    this.members_.add(value);
                    onChanged();
                } else {
                    this.membersBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addMembers(int index, TeamHandler.NearTeamMember value) {
                if (this.membersBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureMembersIsMutable();
                    this.members_.add(index, value);
                    onChanged();
                } else {
                    this.membersBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addMembers(TeamHandler.NearTeamMember.Builder builderForValue) {
                if (this.membersBuilder_ == null) {
                    ensureMembersIsMutable();
                    this.members_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.membersBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addMembers(int index, TeamHandler.NearTeamMember.Builder builderForValue) {
                if (this.membersBuilder_ == null) {
                    ensureMembersIsMutable();
                    this.members_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.membersBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllMembers(Iterable<? extends TeamHandler.NearTeamMember> values) {
                if (this.membersBuilder_ == null) {
                    ensureMembersIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.members_);
                    onChanged();
                } else {
                    this.membersBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearMembers() {
                if (this.membersBuilder_ == null) {
                    this.members_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                    onChanged();
                } else {
                    this.membersBuilder_.clear();
                }
                return this;
            }

            public Builder removeMembers(int index) {
                if (this.membersBuilder_ == null) {
                    ensureMembersIsMutable();
                    this.members_.remove(index);
                    onChanged();
                } else {
                    this.membersBuilder_.remove(index);
                }
                return this;
            }

            public TeamHandler.NearTeamMember.Builder getMembersBuilder(int index) {
                return (TeamHandler.NearTeamMember.Builder) getMembersFieldBuilder().getBuilder(index);
            }

            public TeamHandler.NearTeamMemberOrBuilder getMembersOrBuilder(int index) {
                if (this.membersBuilder_ == null)
                    return this.members_.get(index);
                return (TeamHandler.NearTeamMemberOrBuilder) this.membersBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends TeamHandler.NearTeamMemberOrBuilder> getMembersOrBuilderList() {
                if (this.membersBuilder_ != null)
                    return this.membersBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.members_);
            }

            public TeamHandler.NearTeamMember.Builder addMembersBuilder() {
                return (TeamHandler.NearTeamMember.Builder) getMembersFieldBuilder().addBuilder(TeamHandler.NearTeamMember.getDefaultInstance());
            }

            public TeamHandler.NearTeamMember.Builder addMembersBuilder(int index) {
                return (TeamHandler.NearTeamMember.Builder) getMembersFieldBuilder().addBuilder(index, TeamHandler.NearTeamMember.getDefaultInstance());
            }

            public List<TeamHandler.NearTeamMember.Builder> getMembersBuilderList() {
                return getMembersFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<TeamHandler.NearTeamMember, TeamHandler.NearTeamMember.Builder, TeamHandler.NearTeamMemberOrBuilder> getMembersFieldBuilder() {
                if (this.membersBuilder_ == null) {
                    this.membersBuilder_ = new RepeatedFieldBuilder(this.members_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean());
                    this.members_ = null;
                }
                return this.membersBuilder_;
            }

            public boolean hasApply() {
                return ((this.bitField0_ & 0x8) == 8);
            }

            public int getApply() {
                return this.apply_;
            }

            public Builder setApply(int value) {
                this.bitField0_ |= 0x8;
                this.apply_ = value;
                onChanged();
                return this;
            }

            public Builder clearApply() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.apply_ = 0;
                onChanged();
                return this;
            }
        }
    }

    public static final class GetNearTeamsRequest extends GeneratedMessage implements GetNearTeamsRequestOrBuilder {
        private static final GetNearTeamsRequest defaultInstance = new GetNearTeamsRequest(true);
        private final UnknownFieldSet unknownFields;

        private GetNearTeamsRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetNearTeamsRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetNearTeamsRequest getDefaultInstance() {
            return defaultInstance;
        }

        public GetNearTeamsRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetNearTeamsRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_GetNearTeamsRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_GetNearTeamsRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(GetNearTeamsRequest.class, Builder.class);
        }

        public static Parser<GetNearTeamsRequest> PARSER = (Parser<GetNearTeamsRequest>) new AbstractParser<GetNearTeamsRequest>() {
            public TeamHandler.GetNearTeamsRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.GetNearTeamsRequest(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetNearTeamsRequest> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GetNearTeamsRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetNearTeamsRequest) PARSER.parseFrom(data);
        }

        public static GetNearTeamsRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetNearTeamsRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetNearTeamsRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetNearTeamsRequest) PARSER.parseFrom(data);
        }

        public static GetNearTeamsRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetNearTeamsRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetNearTeamsRequest parseFrom(InputStream input) throws IOException {
            return (GetNearTeamsRequest) PARSER.parseFrom(input);
        }

        public static GetNearTeamsRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetNearTeamsRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GetNearTeamsRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (GetNearTeamsRequest) PARSER.parseDelimitedFrom(input);
        }

        public static GetNearTeamsRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetNearTeamsRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GetNearTeamsRequest parseFrom(CodedInputStream input) throws IOException {
            return (GetNearTeamsRequest) PARSER.parseFrom(input);
        }

        public static GetNearTeamsRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetNearTeamsRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GetNearTeamsRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.GetNearTeamsRequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_GetNearTeamsRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_GetNearTeamsRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.GetNearTeamsRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.GetNearTeamsRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_GetNearTeamsRequest_descriptor;
            }

            public TeamHandler.GetNearTeamsRequest getDefaultInstanceForType() {
                return TeamHandler.GetNearTeamsRequest.getDefaultInstance();
            }

            public TeamHandler.GetNearTeamsRequest build() {
                TeamHandler.GetNearTeamsRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.GetNearTeamsRequest buildPartial() {
                TeamHandler.GetNearTeamsRequest result = new TeamHandler.GetNearTeamsRequest(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.GetNearTeamsRequest)
                    return mergeFrom((TeamHandler.GetNearTeamsRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.GetNearTeamsRequest other) {
                if (other == TeamHandler.GetNearTeamsRequest.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.GetNearTeamsRequest parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.GetNearTeamsRequest) TeamHandler.GetNearTeamsRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.GetNearTeamsRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class GetNearTeamsResponse
            extends GeneratedMessage
            implements GetNearTeamsResponseOrBuilder {
        private static final GetNearTeamsResponse defaultInstance = new GetNearTeamsResponse(true);
        private final UnknownFieldSet unknownFields;

        private GetNearTeamsResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetNearTeamsResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetNearTeamsResponse getDefaultInstance() {
            return defaultInstance;
        }

        public GetNearTeamsResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetNearTeamsResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                        case 26:
                            if ((mutable_bitField0_ & 0x4) != 4) {
                                this.teams_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x4;
                            }
                            this.teams_.add(input.readMessage(TeamHandler.NearTeam.PARSER, extensionRegistry));
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x4) == 4) this.teams_ = Collections.unmodifiableList(this.teams_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_GetNearTeamsResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_GetNearTeamsResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(GetNearTeamsResponse.class, Builder.class);
        }

        public static Parser<GetNearTeamsResponse> PARSER = (Parser<GetNearTeamsResponse>) new AbstractParser<GetNearTeamsResponse>() {
            public TeamHandler.GetNearTeamsResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.GetNearTeamsResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        public static final int TEAMS_FIELD_NUMBER = 3;
        private List<TeamHandler.NearTeam> teams_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetNearTeamsResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        static {
            defaultInstance.initFields();
        }

        public List<TeamHandler.NearTeam> getTeamsList() {
            return this.teams_;
        }

        public List<? extends TeamHandler.NearTeamOrBuilder> getTeamsOrBuilderList() {
            return (List) this.teams_;
        }

        public int getTeamsCount() {
            return this.teams_.size();
        }

        public TeamHandler.NearTeam getTeams(int index) {
            return this.teams_.get(index);
        }

        public TeamHandler.NearTeamOrBuilder getTeamsOrBuilder(int index) {
            return this.teams_.get(index);
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
            this.teams_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(2, getS2CMsgBytes());
            for (int i = 0; i < this.teams_.size(); i++)
                output.writeMessage(3, (MessageLite) this.teams_.get(i));
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            for (int i = 0; i < this.teams_.size(); i++)
                size += CodedOutputStream.computeMessageSize(3, (MessageLite) this.teams_.get(i));
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GetNearTeamsResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetNearTeamsResponse) PARSER.parseFrom(data);
        }

        public static GetNearTeamsResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetNearTeamsResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetNearTeamsResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetNearTeamsResponse) PARSER.parseFrom(data);
        }

        public static GetNearTeamsResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetNearTeamsResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetNearTeamsResponse parseFrom(InputStream input) throws IOException {
            return (GetNearTeamsResponse) PARSER.parseFrom(input);
        }

        public static GetNearTeamsResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetNearTeamsResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GetNearTeamsResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (GetNearTeamsResponse) PARSER.parseDelimitedFrom(input);
        }

        public static GetNearTeamsResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetNearTeamsResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GetNearTeamsResponse parseFrom(CodedInputStream input) throws IOException {
            return (GetNearTeamsResponse) PARSER.parseFrom(input);
        }

        public static GetNearTeamsResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetNearTeamsResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GetNearTeamsResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.GetNearTeamsResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;
            private List<TeamHandler.NearTeam> teams_;
            private RepeatedFieldBuilder<TeamHandler.NearTeam, TeamHandler.NearTeam.Builder, TeamHandler.NearTeamOrBuilder> teamsBuilder_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_GetNearTeamsResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_GetNearTeamsResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.GetNearTeamsResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                this.teams_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                this.teams_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.GetNearTeamsResponse.alwaysUseFieldBuilders)
                    getTeamsFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                if (this.teamsBuilder_ == null) {
                    this.teams_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                } else {
                    this.teamsBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_GetNearTeamsResponse_descriptor;
            }

            public TeamHandler.GetNearTeamsResponse getDefaultInstanceForType() {
                return TeamHandler.GetNearTeamsResponse.getDefaultInstance();
            }

            public TeamHandler.GetNearTeamsResponse build() {
                TeamHandler.GetNearTeamsResponse result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.GetNearTeamsResponse buildPartial() {
                TeamHandler.GetNearTeamsResponse result = new TeamHandler.GetNearTeamsResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2)
                    to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                if (this.teamsBuilder_ == null) {
                    if ((this.bitField0_ & 0x4) == 4) {
                        this.teams_ = Collections.unmodifiableList(this.teams_);
                        this.bitField0_ &= 0xFFFFFFFB;
                    }
                    result.teams_ = this.teams_;
                } else {
                    result.teams_ = this.teamsBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.GetNearTeamsResponse)
                    return mergeFrom((TeamHandler.GetNearTeamsResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.GetNearTeamsResponse other) {
                if (other == TeamHandler.GetNearTeamsResponse.getDefaultInstance())
                    return this;
                if (other.hasS2CCode())
                    setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                if (this.teamsBuilder_ == null) {
                    if (!other.teams_.isEmpty()) {
                        if (this.teams_.isEmpty()) {
                            this.teams_ = other.teams_;
                            this.bitField0_ &= 0xFFFFFFFB;
                        } else {
                            ensureTeamsIsMutable();
                            this.teams_.addAll(other.teams_);
                        }
                        onChanged();
                    }
                } else if (!other.teams_.isEmpty()) {
                    if (this.teamsBuilder_.isEmpty()) {
                        this.teamsBuilder_.dispose();
                        this.teamsBuilder_ = null;
                        this.teams_ = other.teams_;
                        this.bitField0_ &= 0xFFFFFFFB;
                        this.teamsBuilder_ = TeamHandler.GetNearTeamsResponse.alwaysUseFieldBuilders ? getTeamsFieldBuilder() : null;
                    } else {
                        this.teamsBuilder_.addAllMessages(other.teams_);
                    }
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode())
                    return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.GetNearTeamsResponse parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.GetNearTeamsResponse) TeamHandler.GetNearTeamsResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.GetNearTeamsResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = TeamHandler.GetNearTeamsResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            private void ensureTeamsIsMutable() {
                if ((this.bitField0_ & 0x4) != 4) {
                    this.teams_ = new ArrayList<>(this.teams_);
                    this.bitField0_ |= 0x4;
                }
            }

            public List<TeamHandler.NearTeam> getTeamsList() {
                if (this.teamsBuilder_ == null)
                    return Collections.unmodifiableList(this.teams_);
                return this.teamsBuilder_.getMessageList();
            }

            public int getTeamsCount() {
                if (this.teamsBuilder_ == null)
                    return this.teams_.size();
                return this.teamsBuilder_.getCount();
            }

            public TeamHandler.NearTeam getTeams(int index) {
                if (this.teamsBuilder_ == null)
                    return this.teams_.get(index);
                return (TeamHandler.NearTeam) this.teamsBuilder_.getMessage(index);
            }

            public Builder setTeams(int index, TeamHandler.NearTeam value) {
                if (this.teamsBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureTeamsIsMutable();
                    this.teams_.set(index, value);
                    onChanged();
                } else {
                    this.teamsBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setTeams(int index, TeamHandler.NearTeam.Builder builderForValue) {
                if (this.teamsBuilder_ == null) {
                    ensureTeamsIsMutable();
                    this.teams_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.teamsBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addTeams(TeamHandler.NearTeam value) {
                if (this.teamsBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureTeamsIsMutable();
                    this.teams_.add(value);
                    onChanged();
                } else {
                    this.teamsBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addTeams(int index, TeamHandler.NearTeam value) {
                if (this.teamsBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureTeamsIsMutable();
                    this.teams_.add(index, value);
                    onChanged();
                } else {
                    this.teamsBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addTeams(TeamHandler.NearTeam.Builder builderForValue) {
                if (this.teamsBuilder_ == null) {
                    ensureTeamsIsMutable();
                    this.teams_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.teamsBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addTeams(int index, TeamHandler.NearTeam.Builder builderForValue) {
                if (this.teamsBuilder_ == null) {
                    ensureTeamsIsMutable();
                    this.teams_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.teamsBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllTeams(Iterable<? extends TeamHandler.NearTeam> values) {
                if (this.teamsBuilder_ == null) {
                    ensureTeamsIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.teams_);
                    onChanged();
                } else {
                    this.teamsBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearTeams() {
                if (this.teamsBuilder_ == null) {
                    this.teams_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFB;
                    onChanged();
                } else {
                    this.teamsBuilder_.clear();
                }
                return this;
            }

            public Builder removeTeams(int index) {
                if (this.teamsBuilder_ == null) {
                    ensureTeamsIsMutable();
                    this.teams_.remove(index);
                    onChanged();
                } else {
                    this.teamsBuilder_.remove(index);
                }
                return this;
            }

            public TeamHandler.NearTeam.Builder getTeamsBuilder(int index) {
                return (TeamHandler.NearTeam.Builder) getTeamsFieldBuilder().getBuilder(index);
            }

            public TeamHandler.NearTeamOrBuilder getTeamsOrBuilder(int index) {
                if (this.teamsBuilder_ == null)
                    return this.teams_.get(index);
                return (TeamHandler.NearTeamOrBuilder) this.teamsBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends TeamHandler.NearTeamOrBuilder> getTeamsOrBuilderList() {
                if (this.teamsBuilder_ != null)
                    return this.teamsBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.teams_);
            }

            public TeamHandler.NearTeam.Builder addTeamsBuilder() {
                return (TeamHandler.NearTeam.Builder) getTeamsFieldBuilder().addBuilder(TeamHandler.NearTeam.getDefaultInstance());
            }

            public TeamHandler.NearTeam.Builder addTeamsBuilder(int index) {
                return (TeamHandler.NearTeam.Builder) getTeamsFieldBuilder().addBuilder(index, TeamHandler.NearTeam.getDefaultInstance());
            }

            public List<TeamHandler.NearTeam.Builder> getTeamsBuilderList() {
                return getTeamsFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<TeamHandler.NearTeam, TeamHandler.NearTeam.Builder, TeamHandler.NearTeamOrBuilder> getTeamsFieldBuilder() {
                if (this.teamsBuilder_ == null) {
                    this.teamsBuilder_ = new RepeatedFieldBuilder(this.teams_, ((this.bitField0_ & 0x4) == 4), getParentForChildren(), isClean());
                    this.teams_ = null;
                }
                return this.teamsBuilder_;
            }
        }
    }

    public static final class KickOutTeamRequest extends GeneratedMessage implements KickOutTeamRequestOrBuilder {
        private static final KickOutTeamRequest defaultInstance = new KickOutTeamRequest(true);
        private final UnknownFieldSet unknownFields;

        private KickOutTeamRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private KickOutTeamRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static KickOutTeamRequest getDefaultInstance() {
            return defaultInstance;
        }

        public KickOutTeamRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private KickOutTeamRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.c2SPlayerId_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_KickOutTeamRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_KickOutTeamRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(KickOutTeamRequest.class, Builder.class);
        }

        public static Parser<KickOutTeamRequest> PARSER = (Parser<KickOutTeamRequest>) new AbstractParser<KickOutTeamRequest>() {
            public TeamHandler.KickOutTeamRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.KickOutTeamRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int C2S_PLAYERID_FIELD_NUMBER = 1;
        private Object c2SPlayerId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<KickOutTeamRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasC2SPlayerId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getC2SPlayerId() {
            Object ref = this.c2SPlayerId_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.c2SPlayerId_ = s;
            return s;
        }

        public ByteString getC2SPlayerIdBytes() {
            Object ref = this.c2SPlayerId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.c2SPlayerId_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.c2SPlayerId_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasC2SPlayerId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SPlayerIdBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SPlayerIdBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static KickOutTeamRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (KickOutTeamRequest) PARSER.parseFrom(data);
        }

        public static KickOutTeamRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (KickOutTeamRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static KickOutTeamRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (KickOutTeamRequest) PARSER.parseFrom(data);
        }

        public static KickOutTeamRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (KickOutTeamRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static KickOutTeamRequest parseFrom(InputStream input) throws IOException {
            return (KickOutTeamRequest) PARSER.parseFrom(input);
        }

        public static KickOutTeamRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (KickOutTeamRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static KickOutTeamRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (KickOutTeamRequest) PARSER.parseDelimitedFrom(input);
        }

        public static KickOutTeamRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (KickOutTeamRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static KickOutTeamRequest parseFrom(CodedInputStream input) throws IOException {
            return (KickOutTeamRequest) PARSER.parseFrom(input);
        }

        public static KickOutTeamRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (KickOutTeamRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(KickOutTeamRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.KickOutTeamRequestOrBuilder {
            private int bitField0_;
            private Object c2SPlayerId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_KickOutTeamRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_KickOutTeamRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.KickOutTeamRequest.class, Builder.class);
            }

            private Builder() {
                this.c2SPlayerId_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.c2SPlayerId_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.KickOutTeamRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.c2SPlayerId_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_KickOutTeamRequest_descriptor;
            }

            public TeamHandler.KickOutTeamRequest getDefaultInstanceForType() {
                return TeamHandler.KickOutTeamRequest.getDefaultInstance();
            }

            public TeamHandler.KickOutTeamRequest build() {
                TeamHandler.KickOutTeamRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.KickOutTeamRequest buildPartial() {
                TeamHandler.KickOutTeamRequest result = new TeamHandler.KickOutTeamRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.c2SPlayerId_ = this.c2SPlayerId_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.KickOutTeamRequest)
                    return mergeFrom((TeamHandler.KickOutTeamRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.KickOutTeamRequest other) {
                if (other == TeamHandler.KickOutTeamRequest.getDefaultInstance()) return this;
                if (other.hasC2SPlayerId()) {
                    this.bitField0_ |= 0x1;
                    this.c2SPlayerId_ = other.c2SPlayerId_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasC2SPlayerId()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.KickOutTeamRequest parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.KickOutTeamRequest) TeamHandler.KickOutTeamRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.KickOutTeamRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasC2SPlayerId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public String getC2SPlayerId() {
                Object ref = this.c2SPlayerId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.c2SPlayerId_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getC2SPlayerIdBytes() {
                Object ref = this.c2SPlayerId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.c2SPlayerId_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setC2SPlayerId(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.c2SPlayerId_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2SPlayerId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.c2SPlayerId_ = TeamHandler.KickOutTeamRequest.getDefaultInstance().getC2SPlayerId();
                onChanged();
                return this;
            }

            public Builder setC2SPlayerIdBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.c2SPlayerId_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class KickOutTeamResponse
            extends GeneratedMessage
            implements KickOutTeamResponseOrBuilder {
        private static final KickOutTeamResponse defaultInstance = new KickOutTeamResponse(true);
        private final UnknownFieldSet unknownFields;

        private KickOutTeamResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private KickOutTeamResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static KickOutTeamResponse getDefaultInstance() {
            return defaultInstance;
        }

        public KickOutTeamResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private KickOutTeamResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_KickOutTeamResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_KickOutTeamResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(KickOutTeamResponse.class, Builder.class);
        }

        public static Parser<KickOutTeamResponse> PARSER = (Parser<KickOutTeamResponse>) new AbstractParser<KickOutTeamResponse>() {
            public TeamHandler.KickOutTeamResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.KickOutTeamResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<KickOutTeamResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static KickOutTeamResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (KickOutTeamResponse) PARSER.parseFrom(data);
        }

        public static KickOutTeamResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (KickOutTeamResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static KickOutTeamResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (KickOutTeamResponse) PARSER.parseFrom(data);
        }

        public static KickOutTeamResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (KickOutTeamResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static KickOutTeamResponse parseFrom(InputStream input) throws IOException {
            return (KickOutTeamResponse) PARSER.parseFrom(input);
        }

        public static KickOutTeamResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (KickOutTeamResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static KickOutTeamResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (KickOutTeamResponse) PARSER.parseDelimitedFrom(input);
        }

        public static KickOutTeamResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (KickOutTeamResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static KickOutTeamResponse parseFrom(CodedInputStream input) throws IOException {
            return (KickOutTeamResponse) PARSER.parseFrom(input);
        }

        public static KickOutTeamResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (KickOutTeamResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(KickOutTeamResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.KickOutTeamResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_KickOutTeamResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_KickOutTeamResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.KickOutTeamResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.KickOutTeamResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_KickOutTeamResponse_descriptor;
            }

            public TeamHandler.KickOutTeamResponse getDefaultInstanceForType() {
                return TeamHandler.KickOutTeamResponse.getDefaultInstance();
            }

            public TeamHandler.KickOutTeamResponse build() {
                TeamHandler.KickOutTeamResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.KickOutTeamResponse buildPartial() {
                TeamHandler.KickOutTeamResponse result = new TeamHandler.KickOutTeamResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.KickOutTeamResponse)
                    return mergeFrom((TeamHandler.KickOutTeamResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.KickOutTeamResponse other) {
                if (other == TeamHandler.KickOutTeamResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.KickOutTeamResponse parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.KickOutTeamResponse) TeamHandler.KickOutTeamResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.KickOutTeamResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = TeamHandler.KickOutTeamResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class LeaveTeamRequest
            extends GeneratedMessage
            implements LeaveTeamRequestOrBuilder {
        private static final LeaveTeamRequest defaultInstance = new LeaveTeamRequest(true);
        private final UnknownFieldSet unknownFields;

        private LeaveTeamRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private LeaveTeamRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static LeaveTeamRequest getDefaultInstance() {
            return defaultInstance;
        }

        public LeaveTeamRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private LeaveTeamRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_LeaveTeamRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_LeaveTeamRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(LeaveTeamRequest.class, Builder.class);
        }

        public static Parser<LeaveTeamRequest> PARSER = (Parser<LeaveTeamRequest>) new AbstractParser<LeaveTeamRequest>() {
            public TeamHandler.LeaveTeamRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.LeaveTeamRequest(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<LeaveTeamRequest> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static LeaveTeamRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (LeaveTeamRequest) PARSER.parseFrom(data);
        }

        public static LeaveTeamRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LeaveTeamRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LeaveTeamRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (LeaveTeamRequest) PARSER.parseFrom(data);
        }

        public static LeaveTeamRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LeaveTeamRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LeaveTeamRequest parseFrom(InputStream input) throws IOException {
            return (LeaveTeamRequest) PARSER.parseFrom(input);
        }

        public static LeaveTeamRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LeaveTeamRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static LeaveTeamRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (LeaveTeamRequest) PARSER.parseDelimitedFrom(input);
        }

        public static LeaveTeamRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LeaveTeamRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static LeaveTeamRequest parseFrom(CodedInputStream input) throws IOException {
            return (LeaveTeamRequest) PARSER.parseFrom(input);
        }

        public static LeaveTeamRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LeaveTeamRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(LeaveTeamRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.LeaveTeamRequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_LeaveTeamRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_LeaveTeamRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.LeaveTeamRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.LeaveTeamRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_LeaveTeamRequest_descriptor;
            }

            public TeamHandler.LeaveTeamRequest getDefaultInstanceForType() {
                return TeamHandler.LeaveTeamRequest.getDefaultInstance();
            }

            public TeamHandler.LeaveTeamRequest build() {
                TeamHandler.LeaveTeamRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.LeaveTeamRequest buildPartial() {
                TeamHandler.LeaveTeamRequest result = new TeamHandler.LeaveTeamRequest(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.LeaveTeamRequest)
                    return mergeFrom((TeamHandler.LeaveTeamRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.LeaveTeamRequest other) {
                if (other == TeamHandler.LeaveTeamRequest.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.LeaveTeamRequest parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.LeaveTeamRequest) TeamHandler.LeaveTeamRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.LeaveTeamRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class LeaveTeamResponse
            extends GeneratedMessage
            implements LeaveTeamResponseOrBuilder {
        private static final LeaveTeamResponse defaultInstance = new LeaveTeamResponse(true);
        private final UnknownFieldSet unknownFields;

        private LeaveTeamResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private LeaveTeamResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static LeaveTeamResponse getDefaultInstance() {
            return defaultInstance;
        }

        public LeaveTeamResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private LeaveTeamResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_LeaveTeamResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_LeaveTeamResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(LeaveTeamResponse.class, Builder.class);
        }

        public static Parser<LeaveTeamResponse> PARSER = (Parser<LeaveTeamResponse>) new AbstractParser<LeaveTeamResponse>() {
            public TeamHandler.LeaveTeamResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.LeaveTeamResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<LeaveTeamResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static LeaveTeamResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (LeaveTeamResponse) PARSER.parseFrom(data);
        }

        public static LeaveTeamResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LeaveTeamResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LeaveTeamResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (LeaveTeamResponse) PARSER.parseFrom(data);
        }

        public static LeaveTeamResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LeaveTeamResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LeaveTeamResponse parseFrom(InputStream input) throws IOException {
            return (LeaveTeamResponse) PARSER.parseFrom(input);
        }

        public static LeaveTeamResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LeaveTeamResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static LeaveTeamResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (LeaveTeamResponse) PARSER.parseDelimitedFrom(input);
        }

        public static LeaveTeamResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LeaveTeamResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static LeaveTeamResponse parseFrom(CodedInputStream input) throws IOException {
            return (LeaveTeamResponse) PARSER.parseFrom(input);
        }

        public static LeaveTeamResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LeaveTeamResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(LeaveTeamResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.LeaveTeamResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_LeaveTeamResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_LeaveTeamResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.LeaveTeamResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.LeaveTeamResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_LeaveTeamResponse_descriptor;
            }

            public TeamHandler.LeaveTeamResponse getDefaultInstanceForType() {
                return TeamHandler.LeaveTeamResponse.getDefaultInstance();
            }

            public TeamHandler.LeaveTeamResponse build() {
                TeamHandler.LeaveTeamResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.LeaveTeamResponse buildPartial() {
                TeamHandler.LeaveTeamResponse result = new TeamHandler.LeaveTeamResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.LeaveTeamResponse)
                    return mergeFrom((TeamHandler.LeaveTeamResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.LeaveTeamResponse other) {
                if (other == TeamHandler.LeaveTeamResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.LeaveTeamResponse parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.LeaveTeamResponse) TeamHandler.LeaveTeamResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.LeaveTeamResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = TeamHandler.LeaveTeamResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class ChangeTeamLeaderRequest
            extends GeneratedMessage
            implements ChangeTeamLeaderRequestOrBuilder {
        private static final ChangeTeamLeaderRequest defaultInstance = new ChangeTeamLeaderRequest(true);
        private final UnknownFieldSet unknownFields;

        private ChangeTeamLeaderRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private ChangeTeamLeaderRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static ChangeTeamLeaderRequest getDefaultInstance() {
            return defaultInstance;
        }

        public ChangeTeamLeaderRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private ChangeTeamLeaderRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.c2SPlayerId_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_ChangeTeamLeaderRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_ChangeTeamLeaderRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ChangeTeamLeaderRequest.class, Builder.class);
        }

        public static Parser<ChangeTeamLeaderRequest> PARSER = (Parser<ChangeTeamLeaderRequest>) new AbstractParser<ChangeTeamLeaderRequest>() {
            public TeamHandler.ChangeTeamLeaderRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.ChangeTeamLeaderRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int C2S_PLAYERID_FIELD_NUMBER = 1;
        private Object c2SPlayerId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<ChangeTeamLeaderRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasC2SPlayerId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getC2SPlayerId() {
            Object ref = this.c2SPlayerId_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.c2SPlayerId_ = s;
            return s;
        }

        public ByteString getC2SPlayerIdBytes() {
            Object ref = this.c2SPlayerId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.c2SPlayerId_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.c2SPlayerId_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasC2SPlayerId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SPlayerIdBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SPlayerIdBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static ChangeTeamLeaderRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (ChangeTeamLeaderRequest) PARSER.parseFrom(data);
        }

        public static ChangeTeamLeaderRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (ChangeTeamLeaderRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static ChangeTeamLeaderRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (ChangeTeamLeaderRequest) PARSER.parseFrom(data);
        }

        public static ChangeTeamLeaderRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (ChangeTeamLeaderRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static ChangeTeamLeaderRequest parseFrom(InputStream input) throws IOException {
            return (ChangeTeamLeaderRequest) PARSER.parseFrom(input);
        }

        public static ChangeTeamLeaderRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ChangeTeamLeaderRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static ChangeTeamLeaderRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (ChangeTeamLeaderRequest) PARSER.parseDelimitedFrom(input);
        }

        public static ChangeTeamLeaderRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ChangeTeamLeaderRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static ChangeTeamLeaderRequest parseFrom(CodedInputStream input) throws IOException {
            return (ChangeTeamLeaderRequest) PARSER.parseFrom(input);
        }

        public static ChangeTeamLeaderRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ChangeTeamLeaderRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ChangeTeamLeaderRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.ChangeTeamLeaderRequestOrBuilder {
            private int bitField0_;
            private Object c2SPlayerId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_ChangeTeamLeaderRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_ChangeTeamLeaderRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.ChangeTeamLeaderRequest.class, Builder.class);
            }

            private Builder() {
                this.c2SPlayerId_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.c2SPlayerId_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.ChangeTeamLeaderRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.c2SPlayerId_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_ChangeTeamLeaderRequest_descriptor;
            }

            public TeamHandler.ChangeTeamLeaderRequest getDefaultInstanceForType() {
                return TeamHandler.ChangeTeamLeaderRequest.getDefaultInstance();
            }

            public TeamHandler.ChangeTeamLeaderRequest build() {
                TeamHandler.ChangeTeamLeaderRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.ChangeTeamLeaderRequest buildPartial() {
                TeamHandler.ChangeTeamLeaderRequest result = new TeamHandler.ChangeTeamLeaderRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.c2SPlayerId_ = this.c2SPlayerId_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.ChangeTeamLeaderRequest)
                    return mergeFrom((TeamHandler.ChangeTeamLeaderRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.ChangeTeamLeaderRequest other) {
                if (other == TeamHandler.ChangeTeamLeaderRequest.getDefaultInstance()) return this;
                if (other.hasC2SPlayerId()) {
                    this.bitField0_ |= 0x1;
                    this.c2SPlayerId_ = other.c2SPlayerId_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasC2SPlayerId()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.ChangeTeamLeaderRequest parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.ChangeTeamLeaderRequest) TeamHandler.ChangeTeamLeaderRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.ChangeTeamLeaderRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasC2SPlayerId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public String getC2SPlayerId() {
                Object ref = this.c2SPlayerId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.c2SPlayerId_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getC2SPlayerIdBytes() {
                Object ref = this.c2SPlayerId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.c2SPlayerId_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setC2SPlayerId(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.c2SPlayerId_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2SPlayerId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.c2SPlayerId_ = TeamHandler.ChangeTeamLeaderRequest.getDefaultInstance().getC2SPlayerId();
                onChanged();
                return this;
            }

            public Builder setC2SPlayerIdBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.c2SPlayerId_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class ChangeTeamLeaderResponse
            extends GeneratedMessage
            implements ChangeTeamLeaderResponseOrBuilder {
        private static final ChangeTeamLeaderResponse defaultInstance = new ChangeTeamLeaderResponse(true);
        private final UnknownFieldSet unknownFields;

        private ChangeTeamLeaderResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private ChangeTeamLeaderResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static ChangeTeamLeaderResponse getDefaultInstance() {
            return defaultInstance;
        }

        public ChangeTeamLeaderResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private ChangeTeamLeaderResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_ChangeTeamLeaderResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_ChangeTeamLeaderResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(ChangeTeamLeaderResponse.class, Builder.class);
        }

        public static Parser<ChangeTeamLeaderResponse> PARSER = (Parser<ChangeTeamLeaderResponse>) new AbstractParser<ChangeTeamLeaderResponse>() {
            public TeamHandler.ChangeTeamLeaderResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.ChangeTeamLeaderResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<ChangeTeamLeaderResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static ChangeTeamLeaderResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (ChangeTeamLeaderResponse) PARSER.parseFrom(data);
        }

        public static ChangeTeamLeaderResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (ChangeTeamLeaderResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static ChangeTeamLeaderResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (ChangeTeamLeaderResponse) PARSER.parseFrom(data);
        }

        public static ChangeTeamLeaderResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (ChangeTeamLeaderResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static ChangeTeamLeaderResponse parseFrom(InputStream input) throws IOException {
            return (ChangeTeamLeaderResponse) PARSER.parseFrom(input);
        }

        public static ChangeTeamLeaderResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ChangeTeamLeaderResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static ChangeTeamLeaderResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (ChangeTeamLeaderResponse) PARSER.parseDelimitedFrom(input);
        }

        public static ChangeTeamLeaderResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ChangeTeamLeaderResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static ChangeTeamLeaderResponse parseFrom(CodedInputStream input) throws IOException {
            return (ChangeTeamLeaderResponse) PARSER.parseFrom(input);
        }

        public static ChangeTeamLeaderResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (ChangeTeamLeaderResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ChangeTeamLeaderResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.ChangeTeamLeaderResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_ChangeTeamLeaderResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_ChangeTeamLeaderResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.ChangeTeamLeaderResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.ChangeTeamLeaderResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_ChangeTeamLeaderResponse_descriptor;
            }

            public TeamHandler.ChangeTeamLeaderResponse getDefaultInstanceForType() {
                return TeamHandler.ChangeTeamLeaderResponse.getDefaultInstance();
            }

            public TeamHandler.ChangeTeamLeaderResponse build() {
                TeamHandler.ChangeTeamLeaderResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.ChangeTeamLeaderResponse buildPartial() {
                TeamHandler.ChangeTeamLeaderResponse result = new TeamHandler.ChangeTeamLeaderResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.ChangeTeamLeaderResponse)
                    return mergeFrom((TeamHandler.ChangeTeamLeaderResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.ChangeTeamLeaderResponse other) {
                if (other == TeamHandler.ChangeTeamLeaderResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.ChangeTeamLeaderResponse parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.ChangeTeamLeaderResponse) TeamHandler.ChangeTeamLeaderResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.ChangeTeamLeaderResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = TeamHandler.ChangeTeamLeaderResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class SetAutoAcceptTeamRequest
            extends GeneratedMessage
            implements SetAutoAcceptTeamRequestOrBuilder {
        private static final SetAutoAcceptTeamRequest defaultInstance = new SetAutoAcceptTeamRequest(true);
        private final UnknownFieldSet unknownFields;

        private SetAutoAcceptTeamRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SetAutoAcceptTeamRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SetAutoAcceptTeamRequest getDefaultInstance() {
            return defaultInstance;
        }

        public SetAutoAcceptTeamRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SetAutoAcceptTeamRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.c2SIsAccept_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_SetAutoAcceptTeamRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_SetAutoAcceptTeamRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(SetAutoAcceptTeamRequest.class, Builder.class);
        }

        public static Parser<SetAutoAcceptTeamRequest> PARSER = (Parser<SetAutoAcceptTeamRequest>) new AbstractParser<SetAutoAcceptTeamRequest>() {
            public TeamHandler.SetAutoAcceptTeamRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.SetAutoAcceptTeamRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int C2S_ISACCEPT_FIELD_NUMBER = 1;
        private int c2SIsAccept_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SetAutoAcceptTeamRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasC2SIsAccept() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getC2SIsAccept() {
            return this.c2SIsAccept_;
        }

        private void initFields() {
            this.c2SIsAccept_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasC2SIsAccept()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.c2SIsAccept_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.c2SIsAccept_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SetAutoAcceptTeamRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SetAutoAcceptTeamRequest) PARSER.parseFrom(data);
        }

        public static SetAutoAcceptTeamRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SetAutoAcceptTeamRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SetAutoAcceptTeamRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SetAutoAcceptTeamRequest) PARSER.parseFrom(data);
        }

        public static SetAutoAcceptTeamRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SetAutoAcceptTeamRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SetAutoAcceptTeamRequest parseFrom(InputStream input) throws IOException {
            return (SetAutoAcceptTeamRequest) PARSER.parseFrom(input);
        }

        public static SetAutoAcceptTeamRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SetAutoAcceptTeamRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static SetAutoAcceptTeamRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (SetAutoAcceptTeamRequest) PARSER.parseDelimitedFrom(input);
        }

        public static SetAutoAcceptTeamRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SetAutoAcceptTeamRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static SetAutoAcceptTeamRequest parseFrom(CodedInputStream input) throws IOException {
            return (SetAutoAcceptTeamRequest) PARSER.parseFrom(input);
        }

        public static SetAutoAcceptTeamRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SetAutoAcceptTeamRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SetAutoAcceptTeamRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.SetAutoAcceptTeamRequestOrBuilder {
            private int bitField0_;
            private int c2SIsAccept_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_SetAutoAcceptTeamRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_SetAutoAcceptTeamRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.SetAutoAcceptTeamRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.SetAutoAcceptTeamRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.c2SIsAccept_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_SetAutoAcceptTeamRequest_descriptor;
            }

            public TeamHandler.SetAutoAcceptTeamRequest getDefaultInstanceForType() {
                return TeamHandler.SetAutoAcceptTeamRequest.getDefaultInstance();
            }

            public TeamHandler.SetAutoAcceptTeamRequest build() {
                TeamHandler.SetAutoAcceptTeamRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.SetAutoAcceptTeamRequest buildPartial() {
                TeamHandler.SetAutoAcceptTeamRequest result = new TeamHandler.SetAutoAcceptTeamRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.c2SIsAccept_ = this.c2SIsAccept_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.SetAutoAcceptTeamRequest)
                    return mergeFrom((TeamHandler.SetAutoAcceptTeamRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.SetAutoAcceptTeamRequest other) {
                if (other == TeamHandler.SetAutoAcceptTeamRequest.getDefaultInstance()) return this;
                if (other.hasC2SIsAccept()) setC2SIsAccept(other.getC2SIsAccept());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasC2SIsAccept()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.SetAutoAcceptTeamRequest parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.SetAutoAcceptTeamRequest) TeamHandler.SetAutoAcceptTeamRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.SetAutoAcceptTeamRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasC2SIsAccept() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getC2SIsAccept() {
                return this.c2SIsAccept_;
            }

            public Builder setC2SIsAccept(int value) {
                this.bitField0_ |= 0x1;
                this.c2SIsAccept_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2SIsAccept() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.c2SIsAccept_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class SetAutoAcceptTeamResponse
            extends GeneratedMessage
            implements SetAutoAcceptTeamResponseOrBuilder {
        private static final SetAutoAcceptTeamResponse defaultInstance = new SetAutoAcceptTeamResponse(true);
        private final UnknownFieldSet unknownFields;

        private SetAutoAcceptTeamResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SetAutoAcceptTeamResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SetAutoAcceptTeamResponse getDefaultInstance() {
            return defaultInstance;
        }

        public SetAutoAcceptTeamResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SetAutoAcceptTeamResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.s2CIsAcceptAutoTeam_ = input.readInt32();
                            break;
                        case 26:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x4;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_SetAutoAcceptTeamResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_SetAutoAcceptTeamResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(SetAutoAcceptTeamResponse.class, Builder.class);
        }

        public static Parser<SetAutoAcceptTeamResponse> PARSER = (Parser<SetAutoAcceptTeamResponse>) new AbstractParser<SetAutoAcceptTeamResponse>() {
            public TeamHandler.SetAutoAcceptTeamResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.SetAutoAcceptTeamResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_ISACCEPTAUTOTEAM_FIELD_NUMBER = 2;
        private int s2CIsAcceptAutoTeam_;
        public static final int S2C_MSG_FIELD_NUMBER = 3;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SetAutoAcceptTeamResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CIsAcceptAutoTeam() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getS2CIsAcceptAutoTeam() {
            return this.s2CIsAcceptAutoTeam_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CIsAcceptAutoTeam_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.s2CIsAcceptAutoTeam_);
            if ((this.bitField0_ & 0x4) == 4) output.writeBytes(3, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.s2CIsAcceptAutoTeam_);
            if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeBytesSize(3, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SetAutoAcceptTeamResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SetAutoAcceptTeamResponse) PARSER.parseFrom(data);
        }

        public static SetAutoAcceptTeamResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SetAutoAcceptTeamResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SetAutoAcceptTeamResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SetAutoAcceptTeamResponse) PARSER.parseFrom(data);
        }

        public static SetAutoAcceptTeamResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SetAutoAcceptTeamResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SetAutoAcceptTeamResponse parseFrom(InputStream input) throws IOException {
            return (SetAutoAcceptTeamResponse) PARSER.parseFrom(input);
        }

        public static SetAutoAcceptTeamResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SetAutoAcceptTeamResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static SetAutoAcceptTeamResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (SetAutoAcceptTeamResponse) PARSER.parseDelimitedFrom(input);
        }

        public static SetAutoAcceptTeamResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SetAutoAcceptTeamResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static SetAutoAcceptTeamResponse parseFrom(CodedInputStream input) throws IOException {
            return (SetAutoAcceptTeamResponse) PARSER.parseFrom(input);
        }

        public static SetAutoAcceptTeamResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SetAutoAcceptTeamResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SetAutoAcceptTeamResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.SetAutoAcceptTeamResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private int s2CIsAcceptAutoTeam_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_SetAutoAcceptTeamResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_SetAutoAcceptTeamResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.SetAutoAcceptTeamResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.SetAutoAcceptTeamResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CIsAcceptAutoTeam_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_SetAutoAcceptTeamResponse_descriptor;
            }

            public TeamHandler.SetAutoAcceptTeamResponse getDefaultInstanceForType() {
                return TeamHandler.SetAutoAcceptTeamResponse.getDefaultInstance();
            }

            public TeamHandler.SetAutoAcceptTeamResponse build() {
                TeamHandler.SetAutoAcceptTeamResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.SetAutoAcceptTeamResponse buildPartial() {
                TeamHandler.SetAutoAcceptTeamResponse result = new TeamHandler.SetAutoAcceptTeamResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CIsAcceptAutoTeam_ = this.s2CIsAcceptAutoTeam_;
                if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.SetAutoAcceptTeamResponse)
                    return mergeFrom((TeamHandler.SetAutoAcceptTeamResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.SetAutoAcceptTeamResponse other) {
                if (other == TeamHandler.SetAutoAcceptTeamResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CIsAcceptAutoTeam()) setS2CIsAcceptAutoTeam(other.getS2CIsAcceptAutoTeam());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x4;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.SetAutoAcceptTeamResponse parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.SetAutoAcceptTeamResponse) TeamHandler.SetAutoAcceptTeamResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.SetAutoAcceptTeamResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CIsAcceptAutoTeam() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getS2CIsAcceptAutoTeam() {
                return this.s2CIsAcceptAutoTeam_;
            }

            public Builder setS2CIsAcceptAutoTeam(int value) {
                this.bitField0_ |= 0x2;
                this.s2CIsAcceptAutoTeam_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CIsAcceptAutoTeam() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CIsAcceptAutoTeam_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x4;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.s2CMsg_ = TeamHandler.SetAutoAcceptTeamResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x4;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class CancelAutoRequest
            extends GeneratedMessage
            implements CancelAutoRequestOrBuilder {
        private static final CancelAutoRequest defaultInstance = new CancelAutoRequest(true);
        private final UnknownFieldSet unknownFields;

        private CancelAutoRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private CancelAutoRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static CancelAutoRequest getDefaultInstance() {
            return defaultInstance;
        }

        public CancelAutoRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private CancelAutoRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_CancelAutoRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_CancelAutoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(CancelAutoRequest.class, Builder.class);
        }

        public static Parser<CancelAutoRequest> PARSER = (Parser<CancelAutoRequest>) new AbstractParser<CancelAutoRequest>() {
            public TeamHandler.CancelAutoRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.CancelAutoRequest(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<CancelAutoRequest> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static CancelAutoRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (CancelAutoRequest) PARSER.parseFrom(data);
        }

        public static CancelAutoRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (CancelAutoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static CancelAutoRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (CancelAutoRequest) PARSER.parseFrom(data);
        }

        public static CancelAutoRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (CancelAutoRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static CancelAutoRequest parseFrom(InputStream input) throws IOException {
            return (CancelAutoRequest) PARSER.parseFrom(input);
        }

        public static CancelAutoRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (CancelAutoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static CancelAutoRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (CancelAutoRequest) PARSER.parseDelimitedFrom(input);
        }

        public static CancelAutoRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (CancelAutoRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static CancelAutoRequest parseFrom(CodedInputStream input) throws IOException {
            return (CancelAutoRequest) PARSER.parseFrom(input);
        }

        public static CancelAutoRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (CancelAutoRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(CancelAutoRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.CancelAutoRequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_CancelAutoRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_CancelAutoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.CancelAutoRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.CancelAutoRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_CancelAutoRequest_descriptor;
            }

            public TeamHandler.CancelAutoRequest getDefaultInstanceForType() {
                return TeamHandler.CancelAutoRequest.getDefaultInstance();
            }

            public TeamHandler.CancelAutoRequest build() {
                TeamHandler.CancelAutoRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.CancelAutoRequest buildPartial() {
                TeamHandler.CancelAutoRequest result = new TeamHandler.CancelAutoRequest(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.CancelAutoRequest)
                    return mergeFrom((TeamHandler.CancelAutoRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.CancelAutoRequest other) {
                if (other == TeamHandler.CancelAutoRequest.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.CancelAutoRequest parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.CancelAutoRequest) TeamHandler.CancelAutoRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.CancelAutoRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class CancelAutoResponse
            extends GeneratedMessage
            implements CancelAutoResponseOrBuilder {
        private static final CancelAutoResponse defaultInstance = new CancelAutoResponse(true);
        private final UnknownFieldSet unknownFields;

        private CancelAutoResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private CancelAutoResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static CancelAutoResponse getDefaultInstance() {
            return defaultInstance;
        }

        public CancelAutoResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private CancelAutoResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_CancelAutoResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_CancelAutoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(CancelAutoResponse.class, Builder.class);
        }

        public static Parser<CancelAutoResponse> PARSER = (Parser<CancelAutoResponse>) new AbstractParser<CancelAutoResponse>() {
            public TeamHandler.CancelAutoResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.CancelAutoResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<CancelAutoResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static CancelAutoResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (CancelAutoResponse) PARSER.parseFrom(data);
        }

        public static CancelAutoResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (CancelAutoResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static CancelAutoResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (CancelAutoResponse) PARSER.parseFrom(data);
        }

        public static CancelAutoResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (CancelAutoResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static CancelAutoResponse parseFrom(InputStream input) throws IOException {
            return (CancelAutoResponse) PARSER.parseFrom(input);
        }

        public static CancelAutoResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (CancelAutoResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static CancelAutoResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (CancelAutoResponse) PARSER.parseDelimitedFrom(input);
        }

        public static CancelAutoResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (CancelAutoResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static CancelAutoResponse parseFrom(CodedInputStream input) throws IOException {
            return (CancelAutoResponse) PARSER.parseFrom(input);
        }

        public static CancelAutoResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (CancelAutoResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(CancelAutoResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.CancelAutoResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_CancelAutoResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_CancelAutoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.CancelAutoResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.CancelAutoResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_CancelAutoResponse_descriptor;
            }

            public TeamHandler.CancelAutoResponse getDefaultInstanceForType() {
                return TeamHandler.CancelAutoResponse.getDefaultInstance();
            }

            public TeamHandler.CancelAutoResponse build() {
                TeamHandler.CancelAutoResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.CancelAutoResponse buildPartial() {
                TeamHandler.CancelAutoResponse result = new TeamHandler.CancelAutoResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.CancelAutoResponse)
                    return mergeFrom((TeamHandler.CancelAutoResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.CancelAutoResponse other) {
                if (other == TeamHandler.CancelAutoResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.CancelAutoResponse parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.CancelAutoResponse) TeamHandler.CancelAutoResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.CancelAutoResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = TeamHandler.CancelAutoResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class FormTeamRequest
            extends GeneratedMessage
            implements FormTeamRequestOrBuilder {
        private static final FormTeamRequest defaultInstance = new FormTeamRequest(true);
        private final UnknownFieldSet unknownFields;

        private FormTeamRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private FormTeamRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static FormTeamRequest getDefaultInstance() {
            return defaultInstance;
        }

        public FormTeamRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private FormTeamRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.c2SPlayerId_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_FormTeamRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_FormTeamRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FormTeamRequest.class, Builder.class);
        }

        public static Parser<FormTeamRequest> PARSER = (Parser<FormTeamRequest>) new AbstractParser<FormTeamRequest>() {
            public TeamHandler.FormTeamRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.FormTeamRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int C2S_PLAYERID_FIELD_NUMBER = 1;
        private Object c2SPlayerId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<FormTeamRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasC2SPlayerId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getC2SPlayerId() {
            Object ref = this.c2SPlayerId_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.c2SPlayerId_ = s;
            return s;
        }

        public ByteString getC2SPlayerIdBytes() {
            Object ref = this.c2SPlayerId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.c2SPlayerId_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.c2SPlayerId_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasC2SPlayerId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SPlayerIdBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SPlayerIdBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static FormTeamRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (FormTeamRequest) PARSER.parseFrom(data);
        }

        public static FormTeamRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (FormTeamRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static FormTeamRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (FormTeamRequest) PARSER.parseFrom(data);
        }

        public static FormTeamRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (FormTeamRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static FormTeamRequest parseFrom(InputStream input) throws IOException {
            return (FormTeamRequest) PARSER.parseFrom(input);
        }

        public static FormTeamRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FormTeamRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static FormTeamRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (FormTeamRequest) PARSER.parseDelimitedFrom(input);
        }

        public static FormTeamRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FormTeamRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static FormTeamRequest parseFrom(CodedInputStream input) throws IOException {
            return (FormTeamRequest) PARSER.parseFrom(input);
        }

        public static FormTeamRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FormTeamRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(FormTeamRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.FormTeamRequestOrBuilder {
            private int bitField0_;
            private Object c2SPlayerId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_FormTeamRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_FormTeamRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.FormTeamRequest.class, Builder.class);
            }

            private Builder() {
                this.c2SPlayerId_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.c2SPlayerId_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.FormTeamRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.c2SPlayerId_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_FormTeamRequest_descriptor;
            }

            public TeamHandler.FormTeamRequest getDefaultInstanceForType() {
                return TeamHandler.FormTeamRequest.getDefaultInstance();
            }

            public TeamHandler.FormTeamRequest build() {
                TeamHandler.FormTeamRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.FormTeamRequest buildPartial() {
                TeamHandler.FormTeamRequest result = new TeamHandler.FormTeamRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.c2SPlayerId_ = this.c2SPlayerId_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.FormTeamRequest) return mergeFrom((TeamHandler.FormTeamRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.FormTeamRequest other) {
                if (other == TeamHandler.FormTeamRequest.getDefaultInstance()) return this;
                if (other.hasC2SPlayerId()) {
                    this.bitField0_ |= 0x1;
                    this.c2SPlayerId_ = other.c2SPlayerId_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasC2SPlayerId()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.FormTeamRequest parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.FormTeamRequest) TeamHandler.FormTeamRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.FormTeamRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasC2SPlayerId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public String getC2SPlayerId() {
                Object ref = this.c2SPlayerId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.c2SPlayerId_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getC2SPlayerIdBytes() {
                Object ref = this.c2SPlayerId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.c2SPlayerId_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setC2SPlayerId(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.c2SPlayerId_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2SPlayerId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.c2SPlayerId_ = TeamHandler.FormTeamRequest.getDefaultInstance().getC2SPlayerId();
                onChanged();
                return this;
            }

            public Builder setC2SPlayerIdBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.c2SPlayerId_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class FormTeamResponse
            extends GeneratedMessage
            implements FormTeamResponseOrBuilder {
        private static final FormTeamResponse defaultInstance = new FormTeamResponse(true);
        private final UnknownFieldSet unknownFields;

        private FormTeamResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private FormTeamResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static FormTeamResponse getDefaultInstance() {
            return defaultInstance;
        }

        public FormTeamResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private FormTeamResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_FormTeamResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_FormTeamResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FormTeamResponse.class, Builder.class);
        }

        public static Parser<FormTeamResponse> PARSER = (Parser<FormTeamResponse>) new AbstractParser<FormTeamResponse>() {
            public TeamHandler.FormTeamResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.FormTeamResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<FormTeamResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static FormTeamResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (FormTeamResponse) PARSER.parseFrom(data);
        }

        public static FormTeamResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (FormTeamResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static FormTeamResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (FormTeamResponse) PARSER.parseFrom(data);
        }

        public static FormTeamResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (FormTeamResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static FormTeamResponse parseFrom(InputStream input) throws IOException {
            return (FormTeamResponse) PARSER.parseFrom(input);
        }

        public static FormTeamResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FormTeamResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static FormTeamResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (FormTeamResponse) PARSER.parseDelimitedFrom(input);
        }

        public static FormTeamResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FormTeamResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static FormTeamResponse parseFrom(CodedInputStream input) throws IOException {
            return (FormTeamResponse) PARSER.parseFrom(input);
        }

        public static FormTeamResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FormTeamResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(FormTeamResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.FormTeamResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_FormTeamResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_FormTeamResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.FormTeamResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.FormTeamResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_FormTeamResponse_descriptor;
            }

            public TeamHandler.FormTeamResponse getDefaultInstanceForType() {
                return TeamHandler.FormTeamResponse.getDefaultInstance();
            }

            public TeamHandler.FormTeamResponse build() {
                TeamHandler.FormTeamResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.FormTeamResponse buildPartial() {
                TeamHandler.FormTeamResponse result = new TeamHandler.FormTeamResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.FormTeamResponse)
                    return mergeFrom((TeamHandler.FormTeamResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.FormTeamResponse other) {
                if (other == TeamHandler.FormTeamResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.FormTeamResponse parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.FormTeamResponse) TeamHandler.FormTeamResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.FormTeamResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = TeamHandler.FormTeamResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class CreateTeamRequest
            extends GeneratedMessage
            implements CreateTeamRequestOrBuilder {
        private static final CreateTeamRequest defaultInstance = new CreateTeamRequest(true);
        private final UnknownFieldSet unknownFields;

        private CreateTeamRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private CreateTeamRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static CreateTeamRequest getDefaultInstance() {
            return defaultInstance;
        }

        public CreateTeamRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private CreateTeamRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_CreateTeamRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_CreateTeamRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(CreateTeamRequest.class, Builder.class);
        }

        public static Parser<CreateTeamRequest> PARSER = (Parser<CreateTeamRequest>) new AbstractParser<CreateTeamRequest>() {
            public TeamHandler.CreateTeamRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.CreateTeamRequest(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<CreateTeamRequest> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static CreateTeamRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (CreateTeamRequest) PARSER.parseFrom(data);
        }

        public static CreateTeamRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (CreateTeamRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static CreateTeamRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (CreateTeamRequest) PARSER.parseFrom(data);
        }

        public static CreateTeamRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (CreateTeamRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static CreateTeamRequest parseFrom(InputStream input) throws IOException {
            return (CreateTeamRequest) PARSER.parseFrom(input);
        }

        public static CreateTeamRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (CreateTeamRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static CreateTeamRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (CreateTeamRequest) PARSER.parseDelimitedFrom(input);
        }

        public static CreateTeamRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (CreateTeamRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static CreateTeamRequest parseFrom(CodedInputStream input) throws IOException {
            return (CreateTeamRequest) PARSER.parseFrom(input);
        }

        public static CreateTeamRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (CreateTeamRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(CreateTeamRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.CreateTeamRequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_CreateTeamRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_CreateTeamRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.CreateTeamRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.CreateTeamRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_CreateTeamRequest_descriptor;
            }

            public TeamHandler.CreateTeamRequest getDefaultInstanceForType() {
                return TeamHandler.CreateTeamRequest.getDefaultInstance();
            }

            public TeamHandler.CreateTeamRequest build() {
                TeamHandler.CreateTeamRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.CreateTeamRequest buildPartial() {
                TeamHandler.CreateTeamRequest result = new TeamHandler.CreateTeamRequest(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.CreateTeamRequest)
                    return mergeFrom((TeamHandler.CreateTeamRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.CreateTeamRequest other) {
                if (other == TeamHandler.CreateTeamRequest.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.CreateTeamRequest parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.CreateTeamRequest) TeamHandler.CreateTeamRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.CreateTeamRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class CreateTeamResponse
            extends GeneratedMessage
            implements CreateTeamResponseOrBuilder {
        private static final CreateTeamResponse defaultInstance = new CreateTeamResponse(true);
        private final UnknownFieldSet unknownFields;

        private CreateTeamResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private CreateTeamResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static CreateTeamResponse getDefaultInstance() {
            return defaultInstance;
        }

        public CreateTeamResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private CreateTeamResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_CreateTeamResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_CreateTeamResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(CreateTeamResponse.class, Builder.class);
        }

        public static Parser<CreateTeamResponse> PARSER = (Parser<CreateTeamResponse>) new AbstractParser<CreateTeamResponse>() {
            public TeamHandler.CreateTeamResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.CreateTeamResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<CreateTeamResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static CreateTeamResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (CreateTeamResponse) PARSER.parseFrom(data);
        }

        public static CreateTeamResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (CreateTeamResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static CreateTeamResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (CreateTeamResponse) PARSER.parseFrom(data);
        }

        public static CreateTeamResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (CreateTeamResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static CreateTeamResponse parseFrom(InputStream input) throws IOException {
            return (CreateTeamResponse) PARSER.parseFrom(input);
        }

        public static CreateTeamResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (CreateTeamResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static CreateTeamResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (CreateTeamResponse) PARSER.parseDelimitedFrom(input);
        }

        public static CreateTeamResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (CreateTeamResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static CreateTeamResponse parseFrom(CodedInputStream input) throws IOException {
            return (CreateTeamResponse) PARSER.parseFrom(input);
        }

        public static CreateTeamResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (CreateTeamResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(CreateTeamResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.CreateTeamResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_CreateTeamResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_CreateTeamResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.CreateTeamResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.CreateTeamResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_CreateTeamResponse_descriptor;
            }

            public TeamHandler.CreateTeamResponse getDefaultInstanceForType() {
                return TeamHandler.CreateTeamResponse.getDefaultInstance();
            }

            public TeamHandler.CreateTeamResponse build() {
                TeamHandler.CreateTeamResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.CreateTeamResponse buildPartial() {
                TeamHandler.CreateTeamResponse result = new TeamHandler.CreateTeamResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.CreateTeamResponse)
                    return mergeFrom((TeamHandler.CreateTeamResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.CreateTeamResponse other) {
                if (other == TeamHandler.CreateTeamResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.CreateTeamResponse parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.CreateTeamResponse) TeamHandler.CreateTeamResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.CreateTeamResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = TeamHandler.CreateTeamResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class QueryTeamByTargetRequest
            extends GeneratedMessage
            implements QueryTeamByTargetRequestOrBuilder {
        private static final QueryTeamByTargetRequest defaultInstance = new QueryTeamByTargetRequest(true);
        private final UnknownFieldSet unknownFields;

        private QueryTeamByTargetRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private QueryTeamByTargetRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static QueryTeamByTargetRequest getDefaultInstance() {
            return defaultInstance;
        }

        public QueryTeamByTargetRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private QueryTeamByTargetRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.c2STargetId_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.c2SDifficulty_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_QueryTeamByTargetRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_QueryTeamByTargetRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryTeamByTargetRequest.class, Builder.class);
        }

        public static Parser<QueryTeamByTargetRequest> PARSER = (Parser<QueryTeamByTargetRequest>) new AbstractParser<QueryTeamByTargetRequest>() {
            public TeamHandler.QueryTeamByTargetRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.QueryTeamByTargetRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int C2S_TARGETID_FIELD_NUMBER = 1;
        private int c2STargetId_;
        public static final int C2S_DIFFICULTY_FIELD_NUMBER = 2;
        private int c2SDifficulty_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<QueryTeamByTargetRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasC2STargetId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getC2STargetId() {
            return this.c2STargetId_;
        }

        public boolean hasC2SDifficulty() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getC2SDifficulty() {
            return this.c2SDifficulty_;
        }

        private void initFields() {
            this.c2STargetId_ = 0;
            this.c2SDifficulty_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasC2STargetId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasC2SDifficulty()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.c2STargetId_);
            if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.c2SDifficulty_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.c2STargetId_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.c2SDifficulty_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static QueryTeamByTargetRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (QueryTeamByTargetRequest) PARSER.parseFrom(data);
        }

        public static QueryTeamByTargetRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (QueryTeamByTargetRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static QueryTeamByTargetRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (QueryTeamByTargetRequest) PARSER.parseFrom(data);
        }

        public static QueryTeamByTargetRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (QueryTeamByTargetRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static QueryTeamByTargetRequest parseFrom(InputStream input) throws IOException {
            return (QueryTeamByTargetRequest) PARSER.parseFrom(input);
        }

        public static QueryTeamByTargetRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (QueryTeamByTargetRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static QueryTeamByTargetRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (QueryTeamByTargetRequest) PARSER.parseDelimitedFrom(input);
        }

        public static QueryTeamByTargetRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (QueryTeamByTargetRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static QueryTeamByTargetRequest parseFrom(CodedInputStream input) throws IOException {
            return (QueryTeamByTargetRequest) PARSER.parseFrom(input);
        }

        public static QueryTeamByTargetRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (QueryTeamByTargetRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(QueryTeamByTargetRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.QueryTeamByTargetRequestOrBuilder {
            private int bitField0_;
            private int c2STargetId_;
            private int c2SDifficulty_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_QueryTeamByTargetRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_QueryTeamByTargetRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.QueryTeamByTargetRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.QueryTeamByTargetRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.c2STargetId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.c2SDifficulty_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_QueryTeamByTargetRequest_descriptor;
            }

            public TeamHandler.QueryTeamByTargetRequest getDefaultInstanceForType() {
                return TeamHandler.QueryTeamByTargetRequest.getDefaultInstance();
            }

            public TeamHandler.QueryTeamByTargetRequest build() {
                TeamHandler.QueryTeamByTargetRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.QueryTeamByTargetRequest buildPartial() {
                TeamHandler.QueryTeamByTargetRequest result = new TeamHandler.QueryTeamByTargetRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.c2STargetId_ = this.c2STargetId_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.c2SDifficulty_ = this.c2SDifficulty_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.QueryTeamByTargetRequest)
                    return mergeFrom((TeamHandler.QueryTeamByTargetRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.QueryTeamByTargetRequest other) {
                if (other == TeamHandler.QueryTeamByTargetRequest.getDefaultInstance()) return this;
                if (other.hasC2STargetId()) setC2STargetId(other.getC2STargetId());
                if (other.hasC2SDifficulty()) setC2SDifficulty(other.getC2SDifficulty());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasC2STargetId()) return false;
                if (!hasC2SDifficulty()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.QueryTeamByTargetRequest parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.QueryTeamByTargetRequest) TeamHandler.QueryTeamByTargetRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.QueryTeamByTargetRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasC2STargetId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getC2STargetId() {
                return this.c2STargetId_;
            }

            public Builder setC2STargetId(int value) {
                this.bitField0_ |= 0x1;
                this.c2STargetId_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2STargetId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.c2STargetId_ = 0;
                onChanged();
                return this;
            }

            public boolean hasC2SDifficulty() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getC2SDifficulty() {
                return this.c2SDifficulty_;
            }

            public Builder setC2SDifficulty(int value) {
                this.bitField0_ |= 0x2;
                this.c2SDifficulty_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2SDifficulty() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.c2SDifficulty_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class QueryTeamByTargetResponse
            extends GeneratedMessage
            implements QueryTeamByTargetResponseOrBuilder {
        private static final QueryTeamByTargetResponse defaultInstance = new QueryTeamByTargetResponse(true);
        private final UnknownFieldSet unknownFields;

        private QueryTeamByTargetResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private QueryTeamByTargetResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static QueryTeamByTargetResponse getDefaultInstance() {
            return defaultInstance;
        }

        public QueryTeamByTargetResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private QueryTeamByTargetResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            if ((mutable_bitField0_ & 0x2) != 2) {
                                this.s2CTeams_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x2;
                            }
                            this.s2CTeams_.add(input.readMessage(TeamHandler.Team.PARSER, extensionRegistry));
                            break;
                        case 26:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x2) == 2) this.s2CTeams_ = Collections.unmodifiableList(this.s2CTeams_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_QueryTeamByTargetResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_QueryTeamByTargetResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryTeamByTargetResponse.class, Builder.class);
        }

        public static Parser<QueryTeamByTargetResponse> PARSER = (Parser<QueryTeamByTargetResponse>) new AbstractParser<QueryTeamByTargetResponse>() {
            public TeamHandler.QueryTeamByTargetResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.QueryTeamByTargetResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_TEAMS_FIELD_NUMBER = 2;
        private List<TeamHandler.Team> s2CTeams_;
        public static final int S2C_MSG_FIELD_NUMBER = 3;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<QueryTeamByTargetResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public List<TeamHandler.Team> getS2CTeamsList() {
            return this.s2CTeams_;
        }

        public List<? extends TeamHandler.TeamOrBuilder> getS2CTeamsOrBuilderList() {
            return (List) this.s2CTeams_;
        }

        public int getS2CTeamsCount() {
            return this.s2CTeams_.size();
        }

        static {
            defaultInstance.initFields();
        }


        public TeamHandler.Team getS2CTeams(int index) {
            return this.s2CTeams_.get(index);
        }


        public TeamHandler.TeamOrBuilder getS2CTeamsOrBuilder(int index) {
            return this.s2CTeams_.get(index);
        }


        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }


        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                return (String) ref;
            }
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                this.s2CMsg_ = s;
            }
            return s;
        }


        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }


        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CTeams_ = Collections.emptyList();
            this.s2CMsg_ = "";
        }


        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getS2CTeamsCount(); i++) {
                if (!getS2CTeams(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }


        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeInt32(1, this.s2CCode_);
            }
            for (int i = 0; i < this.s2CTeams_.size(); i++) {
                output.writeMessage(2, (MessageLite) this.s2CTeams_.get(i));
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeBytes(3, getS2CMsgBytes());
            }
            getUnknownFields().writeTo(output);
        }


        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            }
            for (int i = 0; i < this.s2CTeams_.size(); i++) {
                size += CodedOutputStream.computeMessageSize(2, (MessageLite) this.s2CTeams_.get(i));
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeBytesSize(3, getS2CMsgBytes());
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }


        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }


        public static QueryTeamByTargetResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (QueryTeamByTargetResponse) PARSER.parseFrom(data);
        }


        public static QueryTeamByTargetResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (QueryTeamByTargetResponse) PARSER.parseFrom(data, extensionRegistry);
        }


        public static QueryTeamByTargetResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (QueryTeamByTargetResponse) PARSER.parseFrom(data);
        }


        public static QueryTeamByTargetResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (QueryTeamByTargetResponse) PARSER.parseFrom(data, extensionRegistry);
        }


        public static QueryTeamByTargetResponse parseFrom(InputStream input) throws IOException {
            return (QueryTeamByTargetResponse) PARSER.parseFrom(input);
        }


        public static QueryTeamByTargetResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (QueryTeamByTargetResponse) PARSER.parseFrom(input, extensionRegistry);
        }


        public static QueryTeamByTargetResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (QueryTeamByTargetResponse) PARSER.parseDelimitedFrom(input);
        }


        public static QueryTeamByTargetResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (QueryTeamByTargetResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }


        public static QueryTeamByTargetResponse parseFrom(CodedInputStream input) throws IOException {
            return (QueryTeamByTargetResponse) PARSER.parseFrom(input);
        }


        public static QueryTeamByTargetResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (QueryTeamByTargetResponse) PARSER.parseFrom(input, extensionRegistry);
        }


        public static Builder newBuilder() {
            return Builder.create();
        }


        public Builder newBuilderForType() {
            return newBuilder();
        }


        public static Builder newBuilder(QueryTeamByTargetResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }


        public Builder toBuilder() {
            return newBuilder(this);
        }


        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }


        public static final class Builder
                extends GeneratedMessage.Builder<Builder>
                implements TeamHandler.QueryTeamByTargetResponseOrBuilder {
            private int bitField0_;


            private int s2CCode_;


            private List<TeamHandler.Team> s2CTeams_;


            private RepeatedFieldBuilder<TeamHandler.Team, TeamHandler.Team.Builder, TeamHandler.TeamOrBuilder> s2CTeamsBuilder_;


            private Object s2CMsg_;


            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_QueryTeamByTargetResponse_descriptor;
            }


            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_QueryTeamByTargetResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.QueryTeamByTargetResponse.class, Builder.class);
            }


            private Builder() {
                this.s2CTeams_ = Collections.emptyList();
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }


            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CTeams_ = Collections.emptyList();
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }


            private void maybeForceBuilderInitialization() {
                if (TeamHandler.QueryTeamByTargetResponse.alwaysUseFieldBuilders) {
                    getS2CTeamsFieldBuilder();
                }
            }


            private static Builder create() {
                return new Builder();
            }


            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                if (this.s2CTeamsBuilder_ == null) {
                    this.s2CTeams_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFD;
                } else {
                    this.s2CTeamsBuilder_.clear();
                }
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }


            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }


            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_QueryTeamByTargetResponse_descriptor;
            }


            public TeamHandler.QueryTeamByTargetResponse getDefaultInstanceForType() {
                return TeamHandler.QueryTeamByTargetResponse.getDefaultInstance();
            }


            public TeamHandler.QueryTeamByTargetResponse build() {
                TeamHandler.QueryTeamByTargetResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }


            public TeamHandler.QueryTeamByTargetResponse buildPartial() {
                TeamHandler.QueryTeamByTargetResponse result = new TeamHandler.QueryTeamByTargetResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) {
                    to_bitField0_ |= 0x1;
                }
                result.s2CCode_ = this.s2CCode_;
                if (this.s2CTeamsBuilder_ == null) {
                    if ((this.bitField0_ & 0x2) == 2) {
                        this.s2CTeams_ = Collections.unmodifiableList(this.s2CTeams_);
                        this.bitField0_ &= 0xFFFFFFFD;
                    }
                    result.s2CTeams_ = this.s2CTeams_;
                } else {
                    result.s2CTeams_ = this.s2CTeamsBuilder_.build();
                }
                if ((from_bitField0_ & 0x4) == 4) {
                    to_bitField0_ |= 0x2;
                }
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }


            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.QueryTeamByTargetResponse) {
                    return mergeFrom((TeamHandler.QueryTeamByTargetResponse) other);
                }
                super.mergeFrom(other);
                return this;
            }


            public Builder mergeFrom(TeamHandler.QueryTeamByTargetResponse other) {
                if (other == TeamHandler.QueryTeamByTargetResponse.getDefaultInstance()) {
                    return this;
                }
                if (other.hasS2CCode()) {
                    setS2CCode(other.getS2CCode());
                }
                if (this.s2CTeamsBuilder_ == null) {
                    if (!other.s2CTeams_.isEmpty()) {
                        if (this.s2CTeams_.isEmpty()) {
                            this.s2CTeams_ = other.s2CTeams_;
                            this.bitField0_ &= 0xFFFFFFFD;
                        } else {
                            ensureS2CTeamsIsMutable();
                            this.s2CTeams_.addAll(other.s2CTeams_);
                        }
                        onChanged();
                    }
                } else if (!other.s2CTeams_.isEmpty()) {
                    if (this.s2CTeamsBuilder_.isEmpty()) {
                        this.s2CTeamsBuilder_.dispose();
                        this.s2CTeamsBuilder_ = null;
                        this.s2CTeams_ = other.s2CTeams_;
                        this.bitField0_ &= 0xFFFFFFFD;
                        this.s2CTeamsBuilder_ = TeamHandler.QueryTeamByTargetResponse.alwaysUseFieldBuilders ? getS2CTeamsFieldBuilder() : null;
                    } else {
                        this.s2CTeamsBuilder_.addAllMessages(other.s2CTeams_);
                    }
                }
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x4;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }


            public final boolean isInitialized() {
                if (!hasS2CCode()) {
                    return false;
                }
                for (int i = 0; i < getS2CTeamsCount(); i++) {
                    if (!getS2CTeams(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }


            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.QueryTeamByTargetResponse parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.QueryTeamByTargetResponse) TeamHandler.QueryTeamByTargetResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.QueryTeamByTargetResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }


            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }


            public int getS2CCode() {
                return this.s2CCode_;
            }


            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }


            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }


            private void ensureS2CTeamsIsMutable() {
                if ((this.bitField0_ & 0x2) != 2) {
                    this.s2CTeams_ = new ArrayList<>(this.s2CTeams_);
                    this.bitField0_ |= 0x2;
                }
            }


            public List<TeamHandler.Team> getS2CTeamsList() {
                if (this.s2CTeamsBuilder_ == null) {
                    return Collections.unmodifiableList(this.s2CTeams_);
                }
                return this.s2CTeamsBuilder_.getMessageList();
            }


            public int getS2CTeamsCount() {
                if (this.s2CTeamsBuilder_ == null) {
                    return this.s2CTeams_.size();
                }
                return this.s2CTeamsBuilder_.getCount();
            }


            public TeamHandler.Team getS2CTeams(int index) {
                if (this.s2CTeamsBuilder_ == null) {
                    return this.s2CTeams_.get(index);
                }
                return (TeamHandler.Team) this.s2CTeamsBuilder_.getMessage(index);
            }


            public Builder setS2CTeams(int index, TeamHandler.Team value) {
                if (this.s2CTeamsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureS2CTeamsIsMutable();
                    this.s2CTeams_.set(index, value);
                    onChanged();
                } else {
                    this.s2CTeamsBuilder_.setMessage(index, value);
                }
                return this;
            }


            public Builder setS2CTeams(int index, TeamHandler.Team.Builder builderForValue) {
                if (this.s2CTeamsBuilder_ == null) {
                    ensureS2CTeamsIsMutable();
                    this.s2CTeams_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CTeamsBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }


            public Builder addS2CTeams(TeamHandler.Team value) {
                if (this.s2CTeamsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureS2CTeamsIsMutable();
                    this.s2CTeams_.add(value);
                    onChanged();
                } else {
                    this.s2CTeamsBuilder_.addMessage(value);
                }
                return this;
            }


            public Builder addS2CTeams(int index, TeamHandler.Team value) {
                if (this.s2CTeamsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureS2CTeamsIsMutable();
                    this.s2CTeams_.add(index, value);
                    onChanged();
                } else {
                    this.s2CTeamsBuilder_.addMessage(index, value);
                }
                return this;
            }


            public Builder addS2CTeams(TeamHandler.Team.Builder builderForValue) {
                if (this.s2CTeamsBuilder_ == null) {
                    ensureS2CTeamsIsMutable();
                    this.s2CTeams_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.s2CTeamsBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }


            public Builder addS2CTeams(int index, TeamHandler.Team.Builder builderForValue) {
                if (this.s2CTeamsBuilder_ == null) {
                    ensureS2CTeamsIsMutable();
                    this.s2CTeams_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CTeamsBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }


            public Builder addAllS2CTeams(Iterable<? extends TeamHandler.Team> values) {
                if (this.s2CTeamsBuilder_ == null) {
                    ensureS2CTeamsIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.s2CTeams_);
                    onChanged();
                } else {
                    this.s2CTeamsBuilder_.addAllMessages(values);
                }
                return this;
            }


            public Builder clearS2CTeams() {
                if (this.s2CTeamsBuilder_ == null) {
                    this.s2CTeams_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFD;
                    onChanged();
                } else {
                    this.s2CTeamsBuilder_.clear();
                }
                return this;
            }


            public Builder removeS2CTeams(int index) {
                if (this.s2CTeamsBuilder_ == null) {
                    ensureS2CTeamsIsMutable();
                    this.s2CTeams_.remove(index);
                    onChanged();
                } else {
                    this.s2CTeamsBuilder_.remove(index);
                }
                return this;
            }


            public TeamHandler.Team.Builder getS2CTeamsBuilder(int index) {
                return (TeamHandler.Team.Builder) getS2CTeamsFieldBuilder().getBuilder(index);
            }


            public TeamHandler.TeamOrBuilder getS2CTeamsOrBuilder(int index) {
                if (this.s2CTeamsBuilder_ == null) {
                    return this.s2CTeams_.get(index);
                }
                return (TeamHandler.TeamOrBuilder) this.s2CTeamsBuilder_.getMessageOrBuilder(index);
            }


            public List<? extends TeamHandler.TeamOrBuilder> getS2CTeamsOrBuilderList() {
                if (this.s2CTeamsBuilder_ != null) {
                    return this.s2CTeamsBuilder_.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList((List) this.s2CTeams_);
            }


            public TeamHandler.Team.Builder addS2CTeamsBuilder() {
                return (TeamHandler.Team.Builder) getS2CTeamsFieldBuilder().addBuilder(TeamHandler.Team.getDefaultInstance());
            }


            public TeamHandler.Team.Builder addS2CTeamsBuilder(int index) {
                return (TeamHandler.Team.Builder) getS2CTeamsFieldBuilder().addBuilder(index, TeamHandler.Team.getDefaultInstance());
            }


            public List<TeamHandler.Team.Builder> getS2CTeamsBuilderList() {
                return getS2CTeamsFieldBuilder().getBuilderList();
            }


            private RepeatedFieldBuilder<TeamHandler.Team, TeamHandler.Team.Builder, TeamHandler.TeamOrBuilder> getS2CTeamsFieldBuilder() {
                if (this.s2CTeamsBuilder_ == null) {
                    this.s2CTeamsBuilder_ = new RepeatedFieldBuilder(this.s2CTeams_, ((this.bitField0_ & 0x2) == 2), getParentForChildren(), isClean());
                    this.s2CTeams_ = null;
                }
                return this.s2CTeamsBuilder_;
            }


            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x4) == 4);
            }


            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        this.s2CMsg_ = s;
                    }
                    return s;
                }
                return (String) ref;
            }


            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }


            public Builder setS2CMsg(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x4;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }


            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.s2CMsg_ = TeamHandler.QueryTeamByTargetResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }


            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 0x4;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }
    }


    public static final class SetTeamTargetRequest
            extends GeneratedMessage
            implements SetTeamTargetRequestOrBuilder {
        private static final SetTeamTargetRequest defaultInstance = new SetTeamTargetRequest(true);
        private final UnknownFieldSet unknownFields;

        private SetTeamTargetRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SetTeamTargetRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SetTeamTargetRequest getDefaultInstance() {
            return defaultInstance;
        }

        public SetTeamTargetRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SetTeamTargetRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.c2STargetId_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.c2SDifficulty_ = input.readInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.c2SMinLevel_ = input.readInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 0x8;
                            this.c2SMaxLevel_ = input.readInt32();
                            break;
                        case 48:
                            this.bitField0_ |= 0x10;
                            this.c2SIsAutoTeam_ = input.readInt32();
                            break;
                        case 56:
                            this.bitField0_ |= 0x20;
                            this.c2SIsAutoStart_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_SetTeamTargetRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_SetTeamTargetRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(SetTeamTargetRequest.class, Builder.class);
        }

        public static Parser<SetTeamTargetRequest> PARSER = (Parser<SetTeamTargetRequest>) new AbstractParser<SetTeamTargetRequest>() {
            public TeamHandler.SetTeamTargetRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.SetTeamTargetRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int C2S_TARGETID_FIELD_NUMBER = 1;
        private int c2STargetId_;
        public static final int C2S_DIFFICULTY_FIELD_NUMBER = 2;
        private int c2SDifficulty_;
        public static final int C2S_MINLEVEL_FIELD_NUMBER = 3;
        private int c2SMinLevel_;
        public static final int C2S_MAXLEVEL_FIELD_NUMBER = 4;
        private int c2SMaxLevel_;
        public static final int C2S_ISAUTOTEAM_FIELD_NUMBER = 6;
        private int c2SIsAutoTeam_;
        public static final int C2S_ISAUTOSTART_FIELD_NUMBER = 7;
        private int c2SIsAutoStart_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SetTeamTargetRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasC2STargetId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getC2STargetId() {
            return this.c2STargetId_;
        }

        public boolean hasC2SDifficulty() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        static {
            defaultInstance.initFields();
        }


        public int getC2SDifficulty() {
            return this.c2SDifficulty_;
        }


        public boolean hasC2SMinLevel() {
            return ((this.bitField0_ & 0x4) == 4);
        }


        public int getC2SMinLevel() {
            return this.c2SMinLevel_;
        }


        public boolean hasC2SMaxLevel() {
            return ((this.bitField0_ & 0x8) == 8);
        }


        public int getC2SMaxLevel() {
            return this.c2SMaxLevel_;
        }


        public boolean hasC2SIsAutoTeam() {
            return ((this.bitField0_ & 0x10) == 16);
        }


        public int getC2SIsAutoTeam() {
            return this.c2SIsAutoTeam_;
        }


        public boolean hasC2SIsAutoStart() {
            return ((this.bitField0_ & 0x20) == 32);
        }


        public int getC2SIsAutoStart() {
            return this.c2SIsAutoStart_;
        }


        private void initFields() {
            this.c2STargetId_ = 0;
            this.c2SDifficulty_ = 0;
            this.c2SMinLevel_ = 0;
            this.c2SMaxLevel_ = 0;
            this.c2SIsAutoTeam_ = 0;
            this.c2SIsAutoStart_ = 0;
        }


        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            if (!hasC2STargetId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasC2SDifficulty()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasC2SMinLevel()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasC2SMaxLevel()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasC2SIsAutoTeam()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasC2SIsAutoStart()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }


        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeInt32(1, this.c2STargetId_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeInt32(2, this.c2SDifficulty_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                output.writeInt32(3, this.c2SMinLevel_);
            }
            if ((this.bitField0_ & 0x8) == 8) {
                output.writeInt32(4, this.c2SMaxLevel_);
            }
            if ((this.bitField0_ & 0x10) == 16) {
                output.writeInt32(6, this.c2SIsAutoTeam_);
            }
            if ((this.bitField0_ & 0x20) == 32) {
                output.writeInt32(7, this.c2SIsAutoStart_);
            }
            getUnknownFields().writeTo(output);
        }


        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeInt32Size(1, this.c2STargetId_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeInt32Size(2, this.c2SDifficulty_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                size += CodedOutputStream.computeInt32Size(3, this.c2SMinLevel_);
            }
            if ((this.bitField0_ & 0x8) == 8) {
                size += CodedOutputStream.computeInt32Size(4, this.c2SMaxLevel_);
            }
            if ((this.bitField0_ & 0x10) == 16) {
                size += CodedOutputStream.computeInt32Size(6, this.c2SIsAutoTeam_);
            }
            if ((this.bitField0_ & 0x20) == 32) {
                size += CodedOutputStream.computeInt32Size(7, this.c2SIsAutoStart_);
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }


        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }


        public static SetTeamTargetRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SetTeamTargetRequest) PARSER.parseFrom(data);
        }


        public static SetTeamTargetRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SetTeamTargetRequest) PARSER.parseFrom(data, extensionRegistry);
        }


        public static SetTeamTargetRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SetTeamTargetRequest) PARSER.parseFrom(data);
        }


        public static SetTeamTargetRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SetTeamTargetRequest) PARSER.parseFrom(data, extensionRegistry);
        }


        public static SetTeamTargetRequest parseFrom(InputStream input) throws IOException {
            return (SetTeamTargetRequest) PARSER.parseFrom(input);
        }


        public static SetTeamTargetRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SetTeamTargetRequest) PARSER.parseFrom(input, extensionRegistry);
        }


        public static SetTeamTargetRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (SetTeamTargetRequest) PARSER.parseDelimitedFrom(input);
        }


        public static SetTeamTargetRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SetTeamTargetRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }


        public static SetTeamTargetRequest parseFrom(CodedInputStream input) throws IOException {
            return (SetTeamTargetRequest) PARSER.parseFrom(input);
        }


        public static SetTeamTargetRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SetTeamTargetRequest) PARSER.parseFrom(input, extensionRegistry);
        }


        public static Builder newBuilder() {
            return Builder.create();
        }


        public Builder newBuilderForType() {
            return newBuilder();
        }


        public static Builder newBuilder(SetTeamTargetRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }


        public Builder toBuilder() {
            return newBuilder(this);
        }


        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }


        public static final class Builder
                extends GeneratedMessage.Builder<Builder>
                implements TeamHandler.SetTeamTargetRequestOrBuilder {
            private int bitField0_;

            private int c2STargetId_;

            private int c2SDifficulty_;

            private int c2SMinLevel_;

            private int c2SMaxLevel_;

            private int c2SIsAutoTeam_;

            private int c2SIsAutoStart_;


            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_SetTeamTargetRequest_descriptor;
            }


            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_SetTeamTargetRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.SetTeamTargetRequest.class, Builder.class);
            }


            private Builder() {
                maybeForceBuilderInitialization();
            }


            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }


            private void maybeForceBuilderInitialization() {
                if (TeamHandler.SetTeamTargetRequest.alwaysUseFieldBuilders) ;
            }


            private static Builder create() {
                return new Builder();
            }


            public Builder clear() {
                super.clear();
                this.c2STargetId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.c2SDifficulty_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                this.c2SMinLevel_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                this.c2SMaxLevel_ = 0;
                this.bitField0_ &= 0xFFFFFFF7;
                this.c2SIsAutoTeam_ = 0;
                this.bitField0_ &= 0xFFFFFFEF;
                this.c2SIsAutoStart_ = 0;
                this.bitField0_ &= 0xFFFFFFDF;
                return this;
            }


            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_SetTeamTargetRequest_descriptor;
            }

            public TeamHandler.SetTeamTargetRequest getDefaultInstanceForType() {
                return TeamHandler.SetTeamTargetRequest.getDefaultInstance();
            }

            public TeamHandler.SetTeamTargetRequest build() {
                TeamHandler.SetTeamTargetRequest result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public TeamHandler.SetTeamTargetRequest buildPartial() {
                TeamHandler.SetTeamTargetRequest result = new TeamHandler.SetTeamTargetRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) {
                    to_bitField0_ |= 0x1;
                }
                result.c2STargetId_ = this.c2STargetId_;
                if ((from_bitField0_ & 0x2) == 2) {
                    to_bitField0_ |= 0x2;
                }
                result.c2SDifficulty_ = this.c2SDifficulty_;
                if ((from_bitField0_ & 0x4) == 4) {
                    to_bitField0_ |= 0x4;
                }
                result.c2SMinLevel_ = this.c2SMinLevel_;
                if ((from_bitField0_ & 0x8) == 8) {
                    to_bitField0_ |= 0x8;
                }
                result.c2SMaxLevel_ = this.c2SMaxLevel_;
                if ((from_bitField0_ & 0x10) == 16) {
                    to_bitField0_ |= 0x10;
                }
                result.c2SIsAutoTeam_ = this.c2SIsAutoTeam_;
                if ((from_bitField0_ & 0x20) == 32) {
                    to_bitField0_ |= 0x20;
                }
                result.c2SIsAutoStart_ = this.c2SIsAutoStart_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.SetTeamTargetRequest) {
                    return mergeFrom((TeamHandler.SetTeamTargetRequest) other);
                }
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.SetTeamTargetRequest other) {
                if (other == TeamHandler.SetTeamTargetRequest.getDefaultInstance()) {
                    return this;
                }
                if (other.hasC2STargetId()) {
                    setC2STargetId(other.getC2STargetId());
                }
                if (other.hasC2SDifficulty()) {
                    setC2SDifficulty(other.getC2SDifficulty());
                }
                if (other.hasC2SMinLevel()) {
                    setC2SMinLevel(other.getC2SMinLevel());
                }
                if (other.hasC2SMaxLevel()) {
                    setC2SMaxLevel(other.getC2SMaxLevel());
                }
                if (other.hasC2SIsAutoTeam()) {
                    setC2SIsAutoTeam(other.getC2SIsAutoTeam());
                }
                if (other.hasC2SIsAutoStart()) {
                    setC2SIsAutoStart(other.getC2SIsAutoStart());
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasC2STargetId()) {
                    return false;
                }
                if (!hasC2SDifficulty()) {
                    return false;
                }
                if (!hasC2SMinLevel()) {
                    return false;
                }
                if (!hasC2SMaxLevel()) {
                    return false;
                }
                if (!hasC2SIsAutoTeam()) {
                    return false;
                }
                if (!hasC2SIsAutoStart()) {
                    return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.SetTeamTargetRequest parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.SetTeamTargetRequest) TeamHandler.SetTeamTargetRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.SetTeamTargetRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            public boolean hasC2STargetId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getC2STargetId() {
                return this.c2STargetId_;
            }

            public Builder setC2STargetId(int value) {
                this.bitField0_ |= 0x1;
                this.c2STargetId_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2STargetId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.c2STargetId_ = 0;
                onChanged();
                return this;
            }

            public boolean hasC2SDifficulty() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getC2SDifficulty() {
                return this.c2SDifficulty_;
            }

            public Builder setC2SDifficulty(int value) {
                this.bitField0_ |= 0x2;
                this.c2SDifficulty_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2SDifficulty() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.c2SDifficulty_ = 0;
                onChanged();
                return this;
            }

            public boolean hasC2SMinLevel() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public int getC2SMinLevel() {
                return this.c2SMinLevel_;
            }

            public Builder setC2SMinLevel(int value) {
                this.bitField0_ |= 0x4;
                this.c2SMinLevel_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2SMinLevel() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.c2SMinLevel_ = 0;
                onChanged();
                return this;
            }

            public boolean hasC2SMaxLevel() {
                return ((this.bitField0_ & 0x8) == 8);
            }

            public int getC2SMaxLevel() {
                return this.c2SMaxLevel_;
            }

            public Builder setC2SMaxLevel(int value) {
                this.bitField0_ |= 0x8;
                this.c2SMaxLevel_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2SMaxLevel() {
                this.bitField0_ &= 0xFFFFFFF7;
                this.c2SMaxLevel_ = 0;
                onChanged();
                return this;
            }

            public boolean hasC2SIsAutoTeam() {
                return ((this.bitField0_ & 0x10) == 16);
            }

            public int getC2SIsAutoTeam() {
                return this.c2SIsAutoTeam_;
            }

            public Builder setC2SIsAutoTeam(int value) {
                this.bitField0_ |= 0x10;
                this.c2SIsAutoTeam_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2SIsAutoTeam() {
                this.bitField0_ &= 0xFFFFFFEF;
                this.c2SIsAutoTeam_ = 0;
                onChanged();
                return this;
            }

            public boolean hasC2SIsAutoStart() {
                return ((this.bitField0_ & 0x20) == 32);
            }

            public int getC2SIsAutoStart() {
                return this.c2SIsAutoStart_;
            }

            public Builder setC2SIsAutoStart(int value) {
                this.bitField0_ |= 0x20;
                this.c2SIsAutoStart_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2SIsAutoStart() {
                this.bitField0_ &= 0xFFFFFFDF;
                this.c2SIsAutoStart_ = 0;
                onChanged();
                return this;
            }
        }
    }

    public static final class SetTeamTargetResponse
            extends GeneratedMessage
            implements SetTeamTargetResponseOrBuilder {
        private static final SetTeamTargetResponse defaultInstance = new SetTeamTargetResponse(true);
        private final UnknownFieldSet unknownFields;

        private SetTeamTargetResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SetTeamTargetResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SetTeamTargetResponse getDefaultInstance() {
            return defaultInstance;
        }

        public SetTeamTargetResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SetTeamTargetResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_SetTeamTargetResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_SetTeamTargetResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(SetTeamTargetResponse.class, Builder.class);
        }

        public static Parser<SetTeamTargetResponse> PARSER = (Parser<SetTeamTargetResponse>) new AbstractParser<SetTeamTargetResponse>() {
            public TeamHandler.SetTeamTargetResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.SetTeamTargetResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SetTeamTargetResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SetTeamTargetResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SetTeamTargetResponse) PARSER.parseFrom(data);
        }

        public static SetTeamTargetResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SetTeamTargetResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SetTeamTargetResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SetTeamTargetResponse) PARSER.parseFrom(data);
        }

        public static SetTeamTargetResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SetTeamTargetResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SetTeamTargetResponse parseFrom(InputStream input) throws IOException {
            return (SetTeamTargetResponse) PARSER.parseFrom(input);
        }

        public static SetTeamTargetResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SetTeamTargetResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static SetTeamTargetResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (SetTeamTargetResponse) PARSER.parseDelimitedFrom(input);
        }

        public static SetTeamTargetResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SetTeamTargetResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static SetTeamTargetResponse parseFrom(CodedInputStream input) throws IOException {
            return (SetTeamTargetResponse) PARSER.parseFrom(input);
        }

        public static SetTeamTargetResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SetTeamTargetResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SetTeamTargetResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.SetTeamTargetResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_SetTeamTargetResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_SetTeamTargetResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.SetTeamTargetResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.SetTeamTargetResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_SetTeamTargetResponse_descriptor;
            }

            public TeamHandler.SetTeamTargetResponse getDefaultInstanceForType() {
                return TeamHandler.SetTeamTargetResponse.getDefaultInstance();
            }

            public TeamHandler.SetTeamTargetResponse build() {
                TeamHandler.SetTeamTargetResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.SetTeamTargetResponse buildPartial() {
                TeamHandler.SetTeamTargetResponse result = new TeamHandler.SetTeamTargetResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.SetTeamTargetResponse)
                    return mergeFrom((TeamHandler.SetTeamTargetResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.SetTeamTargetResponse other) {
                if (other == TeamHandler.SetTeamTargetResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.SetTeamTargetResponse parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.SetTeamTargetResponse) TeamHandler.SetTeamTargetResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.SetTeamTargetResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = TeamHandler.SetTeamTargetResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class GetPlayersByTypeRequest
            extends GeneratedMessage
            implements GetPlayersByTypeRequestOrBuilder {
        private static final GetPlayersByTypeRequest defaultInstance = new GetPlayersByTypeRequest(true);
        private final UnknownFieldSet unknownFields;

        private GetPlayersByTypeRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetPlayersByTypeRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetPlayersByTypeRequest getDefaultInstance() {
            return defaultInstance;
        }

        public GetPlayersByTypeRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetPlayersByTypeRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.c2SType_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_GetPlayersByTypeRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_GetPlayersByTypeRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(GetPlayersByTypeRequest.class, Builder.class);
        }

        public static Parser<GetPlayersByTypeRequest> PARSER = (Parser<GetPlayersByTypeRequest>) new AbstractParser<GetPlayersByTypeRequest>() {
            public TeamHandler.GetPlayersByTypeRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.GetPlayersByTypeRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int C2S_TYPE_FIELD_NUMBER = 1;
        private int c2SType_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetPlayersByTypeRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasC2SType() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getC2SType() {
            return this.c2SType_;
        }

        private void initFields() {
            this.c2SType_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasC2SType()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.c2SType_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.c2SType_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GetPlayersByTypeRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetPlayersByTypeRequest) PARSER.parseFrom(data);
        }

        public static GetPlayersByTypeRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetPlayersByTypeRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetPlayersByTypeRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetPlayersByTypeRequest) PARSER.parseFrom(data);
        }

        public static GetPlayersByTypeRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetPlayersByTypeRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetPlayersByTypeRequest parseFrom(InputStream input) throws IOException {
            return (GetPlayersByTypeRequest) PARSER.parseFrom(input);
        }

        public static GetPlayersByTypeRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetPlayersByTypeRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GetPlayersByTypeRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (GetPlayersByTypeRequest) PARSER.parseDelimitedFrom(input);
        }

        public static GetPlayersByTypeRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetPlayersByTypeRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GetPlayersByTypeRequest parseFrom(CodedInputStream input) throws IOException {
            return (GetPlayersByTypeRequest) PARSER.parseFrom(input);
        }

        public static GetPlayersByTypeRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetPlayersByTypeRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GetPlayersByTypeRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.GetPlayersByTypeRequestOrBuilder {
            private int bitField0_;
            private int c2SType_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_GetPlayersByTypeRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_GetPlayersByTypeRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.GetPlayersByTypeRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.GetPlayersByTypeRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.c2SType_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_GetPlayersByTypeRequest_descriptor;
            }

            public TeamHandler.GetPlayersByTypeRequest getDefaultInstanceForType() {
                return TeamHandler.GetPlayersByTypeRequest.getDefaultInstance();
            }

            public TeamHandler.GetPlayersByTypeRequest build() {
                TeamHandler.GetPlayersByTypeRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.GetPlayersByTypeRequest buildPartial() {
                TeamHandler.GetPlayersByTypeRequest result = new TeamHandler.GetPlayersByTypeRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.c2SType_ = this.c2SType_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.GetPlayersByTypeRequest)
                    return mergeFrom((TeamHandler.GetPlayersByTypeRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.GetPlayersByTypeRequest other) {
                if (other == TeamHandler.GetPlayersByTypeRequest.getDefaultInstance()) return this;
                if (other.hasC2SType()) setC2SType(other.getC2SType());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasC2SType()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.GetPlayersByTypeRequest parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.GetPlayersByTypeRequest) TeamHandler.GetPlayersByTypeRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.GetPlayersByTypeRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasC2SType() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getC2SType() {
                return this.c2SType_;
            }

            public Builder setC2SType(int value) {
                this.bitField0_ |= 0x1;
                this.c2SType_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2SType() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.c2SType_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class GetPlayersByTypeResponse
            extends GeneratedMessage
            implements GetPlayersByTypeResponseOrBuilder {
        private static final GetPlayersByTypeResponse defaultInstance = new GetPlayersByTypeResponse(true);
        private final UnknownFieldSet unknownFields;

        private GetPlayersByTypeResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetPlayersByTypeResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetPlayersByTypeResponse getDefaultInstance() {
            return defaultInstance;
        }

        public GetPlayersByTypeResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetPlayersByTypeResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            if ((mutable_bitField0_ & 0x2) != 2) {
                                this.s2CPlayers_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x2;
                            }
                            this.s2CPlayers_.add(input.readMessage(TeamHandler.Player.PARSER, extensionRegistry));
                            break;
                        case 26:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x2) == 2) this.s2CPlayers_ = Collections.unmodifiableList(this.s2CPlayers_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_GetPlayersByTypeResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_GetPlayersByTypeResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(GetPlayersByTypeResponse.class, Builder.class);
        }

        public static Parser<GetPlayersByTypeResponse> PARSER = (Parser<GetPlayersByTypeResponse>) new AbstractParser<GetPlayersByTypeResponse>() {
            public TeamHandler.GetPlayersByTypeResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.GetPlayersByTypeResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_PLAYERS_FIELD_NUMBER = 2;
        private List<TeamHandler.Player> s2CPlayers_;
        public static final int S2C_MSG_FIELD_NUMBER = 3;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetPlayersByTypeResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public List<TeamHandler.Player> getS2CPlayersList() {
            return this.s2CPlayers_;
        }

        public List<? extends TeamHandler.PlayerOrBuilder> getS2CPlayersOrBuilderList() {
            return (List) this.s2CPlayers_;
        }

        public int getS2CPlayersCount() {
            return this.s2CPlayers_.size();
        }

        static {
            defaultInstance.initFields();
        }

        public TeamHandler.Player getS2CPlayers(int index) {
            return this.s2CPlayers_.get(index);
        }

        public TeamHandler.PlayerOrBuilder getS2CPlayersOrBuilder(int index) {
            return this.s2CPlayers_.get(index);
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String)
                return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8())
                this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CPlayers_ = Collections.emptyList();
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getS2CPlayersCount(); i++) {
                if (!getS2CPlayers(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeInt32(1, this.s2CCode_);
            for (int i = 0; i < this.s2CPlayers_.size(); i++)
                output.writeMessage(2, (MessageLite) this.s2CPlayers_.get(i));
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(3, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            for (int i = 0; i < this.s2CPlayers_.size(); i++)
                size += CodedOutputStream.computeMessageSize(2, (MessageLite) this.s2CPlayers_.get(i));
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(3, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GetPlayersByTypeResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetPlayersByTypeResponse) PARSER.parseFrom(data);
        }

        public static GetPlayersByTypeResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetPlayersByTypeResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetPlayersByTypeResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetPlayersByTypeResponse) PARSER.parseFrom(data);
        }

        public static GetPlayersByTypeResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetPlayersByTypeResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetPlayersByTypeResponse parseFrom(InputStream input) throws IOException {
            return (GetPlayersByTypeResponse) PARSER.parseFrom(input);
        }

        public static GetPlayersByTypeResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetPlayersByTypeResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GetPlayersByTypeResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (GetPlayersByTypeResponse) PARSER.parseDelimitedFrom(input);
        }

        public static GetPlayersByTypeResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetPlayersByTypeResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GetPlayersByTypeResponse parseFrom(CodedInputStream input) throws IOException {
            return (GetPlayersByTypeResponse) PARSER.parseFrom(input);
        }

        public static GetPlayersByTypeResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetPlayersByTypeResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GetPlayersByTypeResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.GetPlayersByTypeResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private List<TeamHandler.Player> s2CPlayers_;
            private RepeatedFieldBuilder<TeamHandler.Player, TeamHandler.Player.Builder, TeamHandler.PlayerOrBuilder> s2CPlayersBuilder_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_GetPlayersByTypeResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_GetPlayersByTypeResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.GetPlayersByTypeResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CPlayers_ = Collections.emptyList();
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CPlayers_ = Collections.emptyList();
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.GetPlayersByTypeResponse.alwaysUseFieldBuilders)
                    getS2CPlayersFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                if (this.s2CPlayersBuilder_ == null) {
                    this.s2CPlayers_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFD;
                } else {
                    this.s2CPlayersBuilder_.clear();
                }
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_GetPlayersByTypeResponse_descriptor;
            }

            public TeamHandler.GetPlayersByTypeResponse getDefaultInstanceForType() {
                return TeamHandler.GetPlayersByTypeResponse.getDefaultInstance();
            }

            public TeamHandler.GetPlayersByTypeResponse build() {
                TeamHandler.GetPlayersByTypeResponse result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.GetPlayersByTypeResponse buildPartial() {
                TeamHandler.GetPlayersByTypeResponse result = new TeamHandler.GetPlayersByTypeResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if (this.s2CPlayersBuilder_ == null) {
                    if ((this.bitField0_ & 0x2) == 2) {
                        this.s2CPlayers_ = Collections.unmodifiableList(this.s2CPlayers_);
                        this.bitField0_ &= 0xFFFFFFFD;
                    }
                    result.s2CPlayers_ = this.s2CPlayers_;
                } else {
                    result.s2CPlayers_ = this.s2CPlayersBuilder_.build();
                }
                if ((from_bitField0_ & 0x4) == 4)
                    to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.GetPlayersByTypeResponse)
                    return mergeFrom((TeamHandler.GetPlayersByTypeResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.GetPlayersByTypeResponse other) {
                if (other == TeamHandler.GetPlayersByTypeResponse.getDefaultInstance())
                    return this;
                if (other.hasS2CCode())
                    setS2CCode(other.getS2CCode());
                if (this.s2CPlayersBuilder_ == null) {
                    if (!other.s2CPlayers_.isEmpty()) {
                        if (this.s2CPlayers_.isEmpty()) {
                            this.s2CPlayers_ = other.s2CPlayers_;
                            this.bitField0_ &= 0xFFFFFFFD;
                        } else {
                            ensureS2CPlayersIsMutable();
                            this.s2CPlayers_.addAll(other.s2CPlayers_);
                        }
                        onChanged();
                    }
                } else if (!other.s2CPlayers_.isEmpty()) {
                    if (this.s2CPlayersBuilder_.isEmpty()) {
                        this.s2CPlayersBuilder_.dispose();
                        this.s2CPlayersBuilder_ = null;
                        this.s2CPlayers_ = other.s2CPlayers_;
                        this.bitField0_ &= 0xFFFFFFFD;
                        this.s2CPlayersBuilder_ = TeamHandler.GetPlayersByTypeResponse.alwaysUseFieldBuilders ? getS2CPlayersFieldBuilder() : null;
                    } else {
                        this.s2CPlayersBuilder_.addAllMessages(other.s2CPlayers_);
                    }
                }
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x4;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode())
                    return false;
                for (int i = 0; i < getS2CPlayersCount(); i++) {
                    if (!getS2CPlayers(i).isInitialized())
                        return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.GetPlayersByTypeResponse parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.GetPlayersByTypeResponse) TeamHandler.GetPlayersByTypeResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.GetPlayersByTypeResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            private void ensureS2CPlayersIsMutable() {
                if ((this.bitField0_ & 0x2) != 2) {
                    this.s2CPlayers_ = new ArrayList<>(this.s2CPlayers_);
                    this.bitField0_ |= 0x2;
                }
            }

            public List<TeamHandler.Player> getS2CPlayersList() {
                if (this.s2CPlayersBuilder_ == null)
                    return Collections.unmodifiableList(this.s2CPlayers_);
                return this.s2CPlayersBuilder_.getMessageList();
            }

            public int getS2CPlayersCount() {
                if (this.s2CPlayersBuilder_ == null)
                    return this.s2CPlayers_.size();
                return this.s2CPlayersBuilder_.getCount();
            }

            public TeamHandler.Player getS2CPlayers(int index) {
                if (this.s2CPlayersBuilder_ == null)
                    return this.s2CPlayers_.get(index);
                return (TeamHandler.Player) this.s2CPlayersBuilder_.getMessage(index);
            }

            public Builder setS2CPlayers(int index, TeamHandler.Player value) {
                if (this.s2CPlayersBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CPlayersIsMutable();
                    this.s2CPlayers_.set(index, value);
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setS2CPlayers(int index, TeamHandler.Player.Builder builderForValue) {
                if (this.s2CPlayersBuilder_ == null) {
                    ensureS2CPlayersIsMutable();
                    this.s2CPlayers_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addS2CPlayers(TeamHandler.Player value) {
                if (this.s2CPlayersBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CPlayersIsMutable();
                    this.s2CPlayers_.add(value);
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addS2CPlayers(int index, TeamHandler.Player value) {
                if (this.s2CPlayersBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CPlayersIsMutable();
                    this.s2CPlayers_.add(index, value);
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addS2CPlayers(TeamHandler.Player.Builder builderForValue) {
                if (this.s2CPlayersBuilder_ == null) {
                    ensureS2CPlayersIsMutable();
                    this.s2CPlayers_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addS2CPlayers(int index, TeamHandler.Player.Builder builderForValue) {
                if (this.s2CPlayersBuilder_ == null) {
                    ensureS2CPlayersIsMutable();
                    this.s2CPlayers_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllS2CPlayers(Iterable<? extends TeamHandler.Player> values) {
                if (this.s2CPlayersBuilder_ == null) {
                    ensureS2CPlayersIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.s2CPlayers_);
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearS2CPlayers() {
                if (this.s2CPlayersBuilder_ == null) {
                    this.s2CPlayers_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFD;
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.clear();
                }
                return this;
            }

            public Builder removeS2CPlayers(int index) {
                if (this.s2CPlayersBuilder_ == null) {
                    ensureS2CPlayersIsMutable();
                    this.s2CPlayers_.remove(index);
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.remove(index);
                }
                return this;
            }

            public TeamHandler.Player.Builder getS2CPlayersBuilder(int index) {
                return (TeamHandler.Player.Builder) getS2CPlayersFieldBuilder().getBuilder(index);
            }

            public TeamHandler.PlayerOrBuilder getS2CPlayersOrBuilder(int index) {
                if (this.s2CPlayersBuilder_ == null)
                    return this.s2CPlayers_.get(index);
                return (TeamHandler.PlayerOrBuilder) this.s2CPlayersBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends TeamHandler.PlayerOrBuilder> getS2CPlayersOrBuilderList() {
                if (this.s2CPlayersBuilder_ != null)
                    return this.s2CPlayersBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.s2CPlayers_);
            }

            public TeamHandler.Player.Builder addS2CPlayersBuilder() {
                return (TeamHandler.Player.Builder) getS2CPlayersFieldBuilder().addBuilder(TeamHandler.Player.getDefaultInstance());
            }

            public TeamHandler.Player.Builder addS2CPlayersBuilder(int index) {
                return (TeamHandler.Player.Builder) getS2CPlayersFieldBuilder().addBuilder(index, TeamHandler.Player.getDefaultInstance());
            }

            public List<TeamHandler.Player.Builder> getS2CPlayersBuilderList() {
                return getS2CPlayersFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<TeamHandler.Player, TeamHandler.Player.Builder, TeamHandler.PlayerOrBuilder> getS2CPlayersFieldBuilder() {
                if (this.s2CPlayersBuilder_ == null) {
                    this.s2CPlayersBuilder_ = new RepeatedFieldBuilder(this.s2CPlayers_, ((this.bitField0_ & 0x2) == 2), getParentForChildren(), isClean());
                    this.s2CPlayers_ = null;
                }
                return this.s2CPlayersBuilder_;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x4;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.s2CMsg_ = TeamHandler.GetPlayersByTypeResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x4;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }
    }

    public static final class GetAppliedPlayersRequest extends GeneratedMessage implements GetAppliedPlayersRequestOrBuilder {
        private static final GetAppliedPlayersRequest defaultInstance = new GetAppliedPlayersRequest(true);
        private final UnknownFieldSet unknownFields;

        private GetAppliedPlayersRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetAppliedPlayersRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetAppliedPlayersRequest getDefaultInstance() {
            return defaultInstance;
        }

        public GetAppliedPlayersRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetAppliedPlayersRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_GetAppliedPlayersRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_GetAppliedPlayersRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(GetAppliedPlayersRequest.class, Builder.class);
        }

        public static Parser<GetAppliedPlayersRequest> PARSER = (Parser<GetAppliedPlayersRequest>) new AbstractParser<GetAppliedPlayersRequest>() {
            public TeamHandler.GetAppliedPlayersRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.GetAppliedPlayersRequest(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetAppliedPlayersRequest> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GetAppliedPlayersRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetAppliedPlayersRequest) PARSER.parseFrom(data);
        }

        public static GetAppliedPlayersRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetAppliedPlayersRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetAppliedPlayersRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetAppliedPlayersRequest) PARSER.parseFrom(data);
        }

        public static GetAppliedPlayersRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetAppliedPlayersRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetAppliedPlayersRequest parseFrom(InputStream input) throws IOException {
            return (GetAppliedPlayersRequest) PARSER.parseFrom(input);
        }

        public static GetAppliedPlayersRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetAppliedPlayersRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GetAppliedPlayersRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (GetAppliedPlayersRequest) PARSER.parseDelimitedFrom(input);
        }

        public static GetAppliedPlayersRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetAppliedPlayersRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GetAppliedPlayersRequest parseFrom(CodedInputStream input) throws IOException {
            return (GetAppliedPlayersRequest) PARSER.parseFrom(input);
        }

        public static GetAppliedPlayersRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetAppliedPlayersRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GetAppliedPlayersRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.GetAppliedPlayersRequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_GetAppliedPlayersRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_GetAppliedPlayersRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.GetAppliedPlayersRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.GetAppliedPlayersRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_GetAppliedPlayersRequest_descriptor;
            }

            public TeamHandler.GetAppliedPlayersRequest getDefaultInstanceForType() {
                return TeamHandler.GetAppliedPlayersRequest.getDefaultInstance();
            }

            public TeamHandler.GetAppliedPlayersRequest build() {
                TeamHandler.GetAppliedPlayersRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.GetAppliedPlayersRequest buildPartial() {
                TeamHandler.GetAppliedPlayersRequest result = new TeamHandler.GetAppliedPlayersRequest(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.GetAppliedPlayersRequest)
                    return mergeFrom((TeamHandler.GetAppliedPlayersRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.GetAppliedPlayersRequest other) {
                if (other == TeamHandler.GetAppliedPlayersRequest.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.GetAppliedPlayersRequest parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.GetAppliedPlayersRequest) TeamHandler.GetAppliedPlayersRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.GetAppliedPlayersRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class GetAppliedPlayersResponse
            extends GeneratedMessage
            implements GetAppliedPlayersResponseOrBuilder {
        private static final GetAppliedPlayersResponse defaultInstance = new GetAppliedPlayersResponse(true);
        private final UnknownFieldSet unknownFields;

        private GetAppliedPlayersResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GetAppliedPlayersResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GetAppliedPlayersResponse getDefaultInstance() {
            return defaultInstance;
        }

        public GetAppliedPlayersResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GetAppliedPlayersResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            if ((mutable_bitField0_ & 0x2) != 2) {
                                this.s2CPlayers_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x2;
                            }
                            this.s2CPlayers_.add(input.readMessage(TeamHandler.TeamMemberBasic.PARSER, extensionRegistry));
                            break;
                        case 26:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x2) == 2) this.s2CPlayers_ = Collections.unmodifiableList(this.s2CPlayers_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_GetAppliedPlayersResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_GetAppliedPlayersResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(GetAppliedPlayersResponse.class, Builder.class);
        }

        public static Parser<GetAppliedPlayersResponse> PARSER = (Parser<GetAppliedPlayersResponse>) new AbstractParser<GetAppliedPlayersResponse>() {
            public TeamHandler.GetAppliedPlayersResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.GetAppliedPlayersResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_PLAYERS_FIELD_NUMBER = 2;
        private List<TeamHandler.TeamMemberBasic> s2CPlayers_;
        public static final int S2C_MSG_FIELD_NUMBER = 3;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GetAppliedPlayersResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public List<TeamHandler.TeamMemberBasic> getS2CPlayersList() {
            return this.s2CPlayers_;
        }

        public List<? extends TeamHandler.TeamMemberBasicOrBuilder> getS2CPlayersOrBuilderList() {
            return (List) this.s2CPlayers_;
        }

        public int getS2CPlayersCount() {
            return this.s2CPlayers_.size();
        }

        static {
            defaultInstance.initFields();
        }

        public TeamHandler.TeamMemberBasic getS2CPlayers(int index) {
            return this.s2CPlayers_.get(index);
        }

        public TeamHandler.TeamMemberBasicOrBuilder getS2CPlayersOrBuilder(int index) {
            return this.s2CPlayers_.get(index);
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String)
                return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8())
                this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CPlayers_ = Collections.emptyList();
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getS2CPlayersCount(); i++) {
                if (!getS2CPlayers(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1)
                output.writeInt32(1, this.s2CCode_);
            for (int i = 0; i < this.s2CPlayers_.size(); i++)
                output.writeMessage(2, (MessageLite) this.s2CPlayers_.get(i));
            if ((this.bitField0_ & 0x2) == 2)
                output.writeBytes(3, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1)
                size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            for (int i = 0; i < this.s2CPlayers_.size(); i++)
                size += CodedOutputStream.computeMessageSize(2, (MessageLite) this.s2CPlayers_.get(i));
            if ((this.bitField0_ & 0x2) == 2)
                size += CodedOutputStream.computeBytesSize(3, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GetAppliedPlayersResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GetAppliedPlayersResponse) PARSER.parseFrom(data);
        }

        public static GetAppliedPlayersResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetAppliedPlayersResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetAppliedPlayersResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GetAppliedPlayersResponse) PARSER.parseFrom(data);
        }

        public static GetAppliedPlayersResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GetAppliedPlayersResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GetAppliedPlayersResponse parseFrom(InputStream input) throws IOException {
            return (GetAppliedPlayersResponse) PARSER.parseFrom(input);
        }

        public static GetAppliedPlayersResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetAppliedPlayersResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GetAppliedPlayersResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (GetAppliedPlayersResponse) PARSER.parseDelimitedFrom(input);
        }

        public static GetAppliedPlayersResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetAppliedPlayersResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GetAppliedPlayersResponse parseFrom(CodedInputStream input) throws IOException {
            return (GetAppliedPlayersResponse) PARSER.parseFrom(input);
        }

        public static GetAppliedPlayersResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GetAppliedPlayersResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GetAppliedPlayersResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.GetAppliedPlayersResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private List<TeamHandler.TeamMemberBasic> s2CPlayers_;
            private RepeatedFieldBuilder<TeamHandler.TeamMemberBasic, TeamHandler.TeamMemberBasic.Builder, TeamHandler.TeamMemberBasicOrBuilder> s2CPlayersBuilder_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_GetAppliedPlayersResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_GetAppliedPlayersResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.GetAppliedPlayersResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CPlayers_ = Collections.emptyList();
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CPlayers_ = Collections.emptyList();
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.GetAppliedPlayersResponse.alwaysUseFieldBuilders)
                    getS2CPlayersFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                if (this.s2CPlayersBuilder_ == null) {
                    this.s2CPlayers_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFD;
                } else {
                    this.s2CPlayersBuilder_.clear();
                }
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_GetAppliedPlayersResponse_descriptor;
            }

            public TeamHandler.GetAppliedPlayersResponse getDefaultInstanceForType() {
                return TeamHandler.GetAppliedPlayersResponse.getDefaultInstance();
            }

            public TeamHandler.GetAppliedPlayersResponse build() {
                TeamHandler.GetAppliedPlayersResponse result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.GetAppliedPlayersResponse buildPartial() {
                TeamHandler.GetAppliedPlayersResponse result = new TeamHandler.GetAppliedPlayersResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1)
                    to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if (this.s2CPlayersBuilder_ == null) {
                    if ((this.bitField0_ & 0x2) == 2) {
                        this.s2CPlayers_ = Collections.unmodifiableList(this.s2CPlayers_);
                        this.bitField0_ &= 0xFFFFFFFD;
                    }
                    result.s2CPlayers_ = this.s2CPlayers_;
                } else {
                    result.s2CPlayers_ = this.s2CPlayersBuilder_.build();
                }
                if ((from_bitField0_ & 0x4) == 4)
                    to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.GetAppliedPlayersResponse)
                    return mergeFrom((TeamHandler.GetAppliedPlayersResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.GetAppliedPlayersResponse other) {
                if (other == TeamHandler.GetAppliedPlayersResponse.getDefaultInstance())
                    return this;
                if (other.hasS2CCode())
                    setS2CCode(other.getS2CCode());
                if (this.s2CPlayersBuilder_ == null) {
                    if (!other.s2CPlayers_.isEmpty()) {
                        if (this.s2CPlayers_.isEmpty()) {
                            this.s2CPlayers_ = other.s2CPlayers_;
                            this.bitField0_ &= 0xFFFFFFFD;
                        } else {
                            ensureS2CPlayersIsMutable();
                            this.s2CPlayers_.addAll(other.s2CPlayers_);
                        }
                        onChanged();
                    }
                } else if (!other.s2CPlayers_.isEmpty()) {
                    if (this.s2CPlayersBuilder_.isEmpty()) {
                        this.s2CPlayersBuilder_.dispose();
                        this.s2CPlayersBuilder_ = null;
                        this.s2CPlayers_ = other.s2CPlayers_;
                        this.bitField0_ &= 0xFFFFFFFD;
                        this.s2CPlayersBuilder_ = TeamHandler.GetAppliedPlayersResponse.alwaysUseFieldBuilders ? getS2CPlayersFieldBuilder() : null;
                    } else {
                        this.s2CPlayersBuilder_.addAllMessages(other.s2CPlayers_);
                    }
                }
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x4;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode())
                    return false;
                for (int i = 0; i < getS2CPlayersCount(); i++) {
                    if (!getS2CPlayers(i).isInitialized())
                        return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.GetAppliedPlayersResponse parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.GetAppliedPlayersResponse) TeamHandler.GetAppliedPlayersResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.GetAppliedPlayersResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            private void ensureS2CPlayersIsMutable() {
                if ((this.bitField0_ & 0x2) != 2) {
                    this.s2CPlayers_ = new ArrayList<>(this.s2CPlayers_);
                    this.bitField0_ |= 0x2;
                }
            }

            public List<TeamHandler.TeamMemberBasic> getS2CPlayersList() {
                if (this.s2CPlayersBuilder_ == null)
                    return Collections.unmodifiableList(this.s2CPlayers_);
                return this.s2CPlayersBuilder_.getMessageList();
            }

            public int getS2CPlayersCount() {
                if (this.s2CPlayersBuilder_ == null)
                    return this.s2CPlayers_.size();
                return this.s2CPlayersBuilder_.getCount();
            }

            public TeamHandler.TeamMemberBasic getS2CPlayers(int index) {
                if (this.s2CPlayersBuilder_ == null)
                    return this.s2CPlayers_.get(index);
                return (TeamHandler.TeamMemberBasic) this.s2CPlayersBuilder_.getMessage(index);
            }

            public Builder setS2CPlayers(int index, TeamHandler.TeamMemberBasic value) {
                if (this.s2CPlayersBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CPlayersIsMutable();
                    this.s2CPlayers_.set(index, value);
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setS2CPlayers(int index, TeamHandler.TeamMemberBasic.Builder builderForValue) {
                if (this.s2CPlayersBuilder_ == null) {
                    ensureS2CPlayersIsMutable();
                    this.s2CPlayers_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addS2CPlayers(TeamHandler.TeamMemberBasic value) {
                if (this.s2CPlayersBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CPlayersIsMutable();
                    this.s2CPlayers_.add(value);
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addS2CPlayers(int index, TeamHandler.TeamMemberBasic value) {
                if (this.s2CPlayersBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensureS2CPlayersIsMutable();
                    this.s2CPlayers_.add(index, value);
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addS2CPlayers(TeamHandler.TeamMemberBasic.Builder builderForValue) {
                if (this.s2CPlayersBuilder_ == null) {
                    ensureS2CPlayersIsMutable();
                    this.s2CPlayers_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addS2CPlayers(int index, TeamHandler.TeamMemberBasic.Builder builderForValue) {
                if (this.s2CPlayersBuilder_ == null) {
                    ensureS2CPlayersIsMutable();
                    this.s2CPlayers_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllS2CPlayers(Iterable<? extends TeamHandler.TeamMemberBasic> values) {
                if (this.s2CPlayersBuilder_ == null) {
                    ensureS2CPlayersIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.s2CPlayers_);
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearS2CPlayers() {
                if (this.s2CPlayersBuilder_ == null) {
                    this.s2CPlayers_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFD;
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.clear();
                }
                return this;
            }

            public Builder removeS2CPlayers(int index) {
                if (this.s2CPlayersBuilder_ == null) {
                    ensureS2CPlayersIsMutable();
                    this.s2CPlayers_.remove(index);
                    onChanged();
                } else {
                    this.s2CPlayersBuilder_.remove(index);
                }
                return this;
            }

            public TeamHandler.TeamMemberBasic.Builder getS2CPlayersBuilder(int index) {
                return (TeamHandler.TeamMemberBasic.Builder) getS2CPlayersFieldBuilder().getBuilder(index);
            }

            public TeamHandler.TeamMemberBasicOrBuilder getS2CPlayersOrBuilder(int index) {
                if (this.s2CPlayersBuilder_ == null)
                    return this.s2CPlayers_.get(index);
                return (TeamHandler.TeamMemberBasicOrBuilder) this.s2CPlayersBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends TeamHandler.TeamMemberBasicOrBuilder> getS2CPlayersOrBuilderList() {
                if (this.s2CPlayersBuilder_ != null)
                    return this.s2CPlayersBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.s2CPlayers_);
            }

            public TeamHandler.TeamMemberBasic.Builder addS2CPlayersBuilder() {
                return (TeamHandler.TeamMemberBasic.Builder) getS2CPlayersFieldBuilder().addBuilder(TeamHandler.TeamMemberBasic.getDefaultInstance());
            }

            public TeamHandler.TeamMemberBasic.Builder addS2CPlayersBuilder(int index) {
                return (TeamHandler.TeamMemberBasic.Builder) getS2CPlayersFieldBuilder().addBuilder(index, TeamHandler.TeamMemberBasic.getDefaultInstance());
            }

            public List<TeamHandler.TeamMemberBasic.Builder> getS2CPlayersBuilderList() {
                return getS2CPlayersFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<TeamHandler.TeamMemberBasic, TeamHandler.TeamMemberBasic.Builder, TeamHandler.TeamMemberBasicOrBuilder> getS2CPlayersFieldBuilder() {
                if (this.s2CPlayersBuilder_ == null) {
                    this.s2CPlayersBuilder_ = new RepeatedFieldBuilder(this.s2CPlayers_, ((this.bitField0_ & 0x2) == 2), getParentForChildren(), isClean());
                    this.s2CPlayers_ = null;
                }
                return this.s2CPlayersBuilder_;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8())
                        this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x4;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.s2CMsg_ = TeamHandler.GetAppliedPlayersResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null)
                    throw new NullPointerException();
                this.bitField0_ |= 0x4;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }
    }

    public static final class JoinTeamRequest extends GeneratedMessage implements JoinTeamRequestOrBuilder {
        private static final JoinTeamRequest defaultInstance = new JoinTeamRequest(true);
        private final UnknownFieldSet unknownFields;

        private JoinTeamRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private JoinTeamRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static JoinTeamRequest getDefaultInstance() {
            return defaultInstance;
        }

        public JoinTeamRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private JoinTeamRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.c2STeamId_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_JoinTeamRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_JoinTeamRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(JoinTeamRequest.class, Builder.class);
        }

        public static Parser<JoinTeamRequest> PARSER = (Parser<JoinTeamRequest>) new AbstractParser<JoinTeamRequest>() {
            public TeamHandler.JoinTeamRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.JoinTeamRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int C2S_TEAMID_FIELD_NUMBER = 1;
        private Object c2STeamId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<JoinTeamRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasC2STeamId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getC2STeamId() {
            Object ref = this.c2STeamId_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.c2STeamId_ = s;
            return s;
        }

        public ByteString getC2STeamIdBytes() {
            Object ref = this.c2STeamId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.c2STeamId_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.c2STeamId_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasC2STeamId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2STeamIdBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2STeamIdBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static JoinTeamRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (JoinTeamRequest) PARSER.parseFrom(data);
        }

        public static JoinTeamRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (JoinTeamRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static JoinTeamRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (JoinTeamRequest) PARSER.parseFrom(data);
        }

        public static JoinTeamRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (JoinTeamRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static JoinTeamRequest parseFrom(InputStream input) throws IOException {
            return (JoinTeamRequest) PARSER.parseFrom(input);
        }

        public static JoinTeamRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (JoinTeamRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static JoinTeamRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (JoinTeamRequest) PARSER.parseDelimitedFrom(input);
        }

        public static JoinTeamRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (JoinTeamRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static JoinTeamRequest parseFrom(CodedInputStream input) throws IOException {
            return (JoinTeamRequest) PARSER.parseFrom(input);
        }

        public static JoinTeamRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (JoinTeamRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(JoinTeamRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.JoinTeamRequestOrBuilder {
            private int bitField0_;
            private Object c2STeamId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_JoinTeamRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_JoinTeamRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.JoinTeamRequest.class, Builder.class);
            }

            private Builder() {
                this.c2STeamId_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.c2STeamId_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.JoinTeamRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.c2STeamId_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_JoinTeamRequest_descriptor;
            }

            public TeamHandler.JoinTeamRequest getDefaultInstanceForType() {
                return TeamHandler.JoinTeamRequest.getDefaultInstance();
            }

            public TeamHandler.JoinTeamRequest build() {
                TeamHandler.JoinTeamRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.JoinTeamRequest buildPartial() {
                TeamHandler.JoinTeamRequest result = new TeamHandler.JoinTeamRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.c2STeamId_ = this.c2STeamId_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.JoinTeamRequest) return mergeFrom((TeamHandler.JoinTeamRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.JoinTeamRequest other) {
                if (other == TeamHandler.JoinTeamRequest.getDefaultInstance()) return this;
                if (other.hasC2STeamId()) {
                    this.bitField0_ |= 0x1;
                    this.c2STeamId_ = other.c2STeamId_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasC2STeamId()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.JoinTeamRequest parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.JoinTeamRequest) TeamHandler.JoinTeamRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.JoinTeamRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasC2STeamId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public String getC2STeamId() {
                Object ref = this.c2STeamId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.c2STeamId_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getC2STeamIdBytes() {
                Object ref = this.c2STeamId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.c2STeamId_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setC2STeamId(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.c2STeamId_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2STeamId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.c2STeamId_ = TeamHandler.JoinTeamRequest.getDefaultInstance().getC2STeamId();
                onChanged();
                return this;
            }

            public Builder setC2STeamIdBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.c2STeamId_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }
    }


    public static final class JoinTeamResponse
            extends GeneratedMessage
            implements JoinTeamResponseOrBuilder {
        private static final JoinTeamResponse defaultInstance = new JoinTeamResponse(true);
        private final UnknownFieldSet unknownFields;

        private JoinTeamResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private JoinTeamResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static JoinTeamResponse getDefaultInstance() {
            return defaultInstance;
        }

        public JoinTeamResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private JoinTeamResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_JoinTeamResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_JoinTeamResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(JoinTeamResponse.class, Builder.class);
        }

        public static Parser<JoinTeamResponse> PARSER = (Parser<JoinTeamResponse>) new AbstractParser<JoinTeamResponse>() {
            public TeamHandler.JoinTeamResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.JoinTeamResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<JoinTeamResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static JoinTeamResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (JoinTeamResponse) PARSER.parseFrom(data);
        }

        public static JoinTeamResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (JoinTeamResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static JoinTeamResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (JoinTeamResponse) PARSER.parseFrom(data);
        }

        public static JoinTeamResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (JoinTeamResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static JoinTeamResponse parseFrom(InputStream input) throws IOException {
            return (JoinTeamResponse) PARSER.parseFrom(input);
        }

        public static JoinTeamResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (JoinTeamResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static JoinTeamResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (JoinTeamResponse) PARSER.parseDelimitedFrom(input);
        }

        public static JoinTeamResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (JoinTeamResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static JoinTeamResponse parseFrom(CodedInputStream input) throws IOException {
            return (JoinTeamResponse) PARSER.parseFrom(input);
        }

        public static JoinTeamResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (JoinTeamResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(JoinTeamResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.JoinTeamResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_JoinTeamResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_JoinTeamResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.JoinTeamResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.JoinTeamResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_JoinTeamResponse_descriptor;
            }

            public TeamHandler.JoinTeamResponse getDefaultInstanceForType() {
                return TeamHandler.JoinTeamResponse.getDefaultInstance();
            }

            public TeamHandler.JoinTeamResponse build() {
                TeamHandler.JoinTeamResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.JoinTeamResponse buildPartial() {
                TeamHandler.JoinTeamResponse result = new TeamHandler.JoinTeamResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.JoinTeamResponse)
                    return mergeFrom((TeamHandler.JoinTeamResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.JoinTeamResponse other) {
                if (other == TeamHandler.JoinTeamResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.JoinTeamResponse parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.JoinTeamResponse) TeamHandler.JoinTeamResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.JoinTeamResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = TeamHandler.JoinTeamResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class AutoJoinTeamRequest
            extends GeneratedMessage
            implements AutoJoinTeamRequestOrBuilder {
        private static final AutoJoinTeamRequest defaultInstance = new AutoJoinTeamRequest(true);
        private final UnknownFieldSet unknownFields;

        private AutoJoinTeamRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private AutoJoinTeamRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static AutoJoinTeamRequest getDefaultInstance() {
            return defaultInstance;
        }

        public AutoJoinTeamRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private AutoJoinTeamRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.c2STargetId_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.c2SDifficulty_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_AutoJoinTeamRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_AutoJoinTeamRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(AutoJoinTeamRequest.class, Builder.class);
        }

        public static Parser<AutoJoinTeamRequest> PARSER = (Parser<AutoJoinTeamRequest>) new AbstractParser<AutoJoinTeamRequest>() {
            public TeamHandler.AutoJoinTeamRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.AutoJoinTeamRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int C2S_TARGETID_FIELD_NUMBER = 1;
        private int c2STargetId_;
        public static final int C2S_DIFFICULTY_FIELD_NUMBER = 2;
        private int c2SDifficulty_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<AutoJoinTeamRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasC2STargetId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getC2STargetId() {
            return this.c2STargetId_;
        }

        public boolean hasC2SDifficulty() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getC2SDifficulty() {
            return this.c2SDifficulty_;
        }

        private void initFields() {
            this.c2STargetId_ = 0;
            this.c2SDifficulty_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasC2STargetId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasC2SDifficulty()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.c2STargetId_);
            if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.c2SDifficulty_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.c2STargetId_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.c2SDifficulty_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static AutoJoinTeamRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (AutoJoinTeamRequest) PARSER.parseFrom(data);
        }

        public static AutoJoinTeamRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (AutoJoinTeamRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static AutoJoinTeamRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (AutoJoinTeamRequest) PARSER.parseFrom(data);
        }

        public static AutoJoinTeamRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (AutoJoinTeamRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static AutoJoinTeamRequest parseFrom(InputStream input) throws IOException {
            return (AutoJoinTeamRequest) PARSER.parseFrom(input);
        }

        public static AutoJoinTeamRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (AutoJoinTeamRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static AutoJoinTeamRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (AutoJoinTeamRequest) PARSER.parseDelimitedFrom(input);
        }

        public static AutoJoinTeamRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (AutoJoinTeamRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static AutoJoinTeamRequest parseFrom(CodedInputStream input) throws IOException {
            return (AutoJoinTeamRequest) PARSER.parseFrom(input);
        }

        public static AutoJoinTeamRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (AutoJoinTeamRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(AutoJoinTeamRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.AutoJoinTeamRequestOrBuilder {
            private int bitField0_;
            private int c2STargetId_;
            private int c2SDifficulty_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_AutoJoinTeamRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_AutoJoinTeamRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.AutoJoinTeamRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.AutoJoinTeamRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.c2STargetId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.c2SDifficulty_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_AutoJoinTeamRequest_descriptor;
            }

            public TeamHandler.AutoJoinTeamRequest getDefaultInstanceForType() {
                return TeamHandler.AutoJoinTeamRequest.getDefaultInstance();
            }

            public TeamHandler.AutoJoinTeamRequest build() {
                TeamHandler.AutoJoinTeamRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.AutoJoinTeamRequest buildPartial() {
                TeamHandler.AutoJoinTeamRequest result = new TeamHandler.AutoJoinTeamRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.c2STargetId_ = this.c2STargetId_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.c2SDifficulty_ = this.c2SDifficulty_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.AutoJoinTeamRequest)
                    return mergeFrom((TeamHandler.AutoJoinTeamRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.AutoJoinTeamRequest other) {
                if (other == TeamHandler.AutoJoinTeamRequest.getDefaultInstance()) return this;
                if (other.hasC2STargetId()) setC2STargetId(other.getC2STargetId());
                if (other.hasC2SDifficulty()) setC2SDifficulty(other.getC2SDifficulty());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasC2STargetId()) return false;
                if (!hasC2SDifficulty()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.AutoJoinTeamRequest parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.AutoJoinTeamRequest) TeamHandler.AutoJoinTeamRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.AutoJoinTeamRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasC2STargetId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getC2STargetId() {
                return this.c2STargetId_;
            }

            public Builder setC2STargetId(int value) {
                this.bitField0_ |= 0x1;
                this.c2STargetId_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2STargetId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.c2STargetId_ = 0;
                onChanged();
                return this;
            }

            public boolean hasC2SDifficulty() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getC2SDifficulty() {
                return this.c2SDifficulty_;
            }

            public Builder setC2SDifficulty(int value) {
                this.bitField0_ |= 0x2;
                this.c2SDifficulty_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2SDifficulty() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.c2SDifficulty_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class AutoJoinTeamResponse
            extends GeneratedMessage
            implements AutoJoinTeamResponseOrBuilder {
        private static final AutoJoinTeamResponse defaultInstance = new AutoJoinTeamResponse(true);
        private final UnknownFieldSet unknownFields;

        private AutoJoinTeamResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private AutoJoinTeamResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static AutoJoinTeamResponse getDefaultInstance() {
            return defaultInstance;
        }

        public AutoJoinTeamResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private AutoJoinTeamResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_AutoJoinTeamResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_AutoJoinTeamResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(AutoJoinTeamResponse.class, Builder.class);
        }

        public static Parser<AutoJoinTeamResponse> PARSER = (Parser<AutoJoinTeamResponse>) new AbstractParser<AutoJoinTeamResponse>() {
            public TeamHandler.AutoJoinTeamResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.AutoJoinTeamResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<AutoJoinTeamResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static AutoJoinTeamResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (AutoJoinTeamResponse) PARSER.parseFrom(data);
        }

        public static AutoJoinTeamResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (AutoJoinTeamResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static AutoJoinTeamResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (AutoJoinTeamResponse) PARSER.parseFrom(data);
        }

        public static AutoJoinTeamResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (AutoJoinTeamResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static AutoJoinTeamResponse parseFrom(InputStream input) throws IOException {
            return (AutoJoinTeamResponse) PARSER.parseFrom(input);
        }

        public static AutoJoinTeamResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (AutoJoinTeamResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static AutoJoinTeamResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (AutoJoinTeamResponse) PARSER.parseDelimitedFrom(input);
        }

        public static AutoJoinTeamResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (AutoJoinTeamResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static AutoJoinTeamResponse parseFrom(CodedInputStream input) throws IOException {
            return (AutoJoinTeamResponse) PARSER.parseFrom(input);
        }

        public static AutoJoinTeamResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (AutoJoinTeamResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(AutoJoinTeamResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.AutoJoinTeamResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_AutoJoinTeamResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_AutoJoinTeamResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.AutoJoinTeamResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.AutoJoinTeamResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_AutoJoinTeamResponse_descriptor;
            }

            public TeamHandler.AutoJoinTeamResponse getDefaultInstanceForType() {
                return TeamHandler.AutoJoinTeamResponse.getDefaultInstance();
            }

            public TeamHandler.AutoJoinTeamResponse build() {
                TeamHandler.AutoJoinTeamResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.AutoJoinTeamResponse buildPartial() {
                TeamHandler.AutoJoinTeamResponse result = new TeamHandler.AutoJoinTeamResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.AutoJoinTeamResponse)
                    return mergeFrom((TeamHandler.AutoJoinTeamResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.AutoJoinTeamResponse other) {
                if (other == TeamHandler.AutoJoinTeamResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.AutoJoinTeamResponse parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.AutoJoinTeamResponse) TeamHandler.AutoJoinTeamResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.AutoJoinTeamResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = TeamHandler.AutoJoinTeamResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class SummonRequest
            extends GeneratedMessage
            implements SummonRequestOrBuilder {
        private static final SummonRequest defaultInstance = new SummonRequest(true);
        private final UnknownFieldSet unknownFields;

        private SummonRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SummonRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SummonRequest getDefaultInstance() {
            return defaultInstance;
        }

        public SummonRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SummonRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.c2STeamMemberId_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_SummonRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_SummonRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(SummonRequest.class, Builder.class);
        }

        public static Parser<SummonRequest> PARSER = (Parser<SummonRequest>) new AbstractParser<SummonRequest>() {
            public TeamHandler.SummonRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.SummonRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int C2S_TEAMMEMBERID_FIELD_NUMBER = 1;
        private Object c2STeamMemberId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SummonRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasC2STeamMemberId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getC2STeamMemberId() {
            Object ref = this.c2STeamMemberId_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.c2STeamMemberId_ = s;
            return s;
        }

        public ByteString getC2STeamMemberIdBytes() {
            Object ref = this.c2STeamMemberId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.c2STeamMemberId_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.c2STeamMemberId_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasC2STeamMemberId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2STeamMemberIdBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2STeamMemberIdBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SummonRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SummonRequest) PARSER.parseFrom(data);
        }

        public static SummonRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SummonRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SummonRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SummonRequest) PARSER.parseFrom(data);
        }

        public static SummonRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SummonRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SummonRequest parseFrom(InputStream input) throws IOException {
            return (SummonRequest) PARSER.parseFrom(input);
        }

        public static SummonRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SummonRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static SummonRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (SummonRequest) PARSER.parseDelimitedFrom(input);
        }

        public static SummonRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SummonRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static SummonRequest parseFrom(CodedInputStream input) throws IOException {
            return (SummonRequest) PARSER.parseFrom(input);
        }

        public static SummonRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SummonRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SummonRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.SummonRequestOrBuilder {
            private int bitField0_;
            private Object c2STeamMemberId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_SummonRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_SummonRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.SummonRequest.class, Builder.class);
            }

            private Builder() {
                this.c2STeamMemberId_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.c2STeamMemberId_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.SummonRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.c2STeamMemberId_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_SummonRequest_descriptor;
            }

            public TeamHandler.SummonRequest getDefaultInstanceForType() {
                return TeamHandler.SummonRequest.getDefaultInstance();
            }

            public TeamHandler.SummonRequest build() {
                TeamHandler.SummonRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.SummonRequest buildPartial() {
                TeamHandler.SummonRequest result = new TeamHandler.SummonRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.c2STeamMemberId_ = this.c2STeamMemberId_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.SummonRequest) return mergeFrom((TeamHandler.SummonRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.SummonRequest other) {
                if (other == TeamHandler.SummonRequest.getDefaultInstance()) return this;
                if (other.hasC2STeamMemberId()) {
                    this.bitField0_ |= 0x1;
                    this.c2STeamMemberId_ = other.c2STeamMemberId_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasC2STeamMemberId()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.SummonRequest parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.SummonRequest) TeamHandler.SummonRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.SummonRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasC2STeamMemberId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public String getC2STeamMemberId() {
                Object ref = this.c2STeamMemberId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.c2STeamMemberId_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getC2STeamMemberIdBytes() {
                Object ref = this.c2STeamMemberId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.c2STeamMemberId_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setC2STeamMemberId(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.c2STeamMemberId_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2STeamMemberId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.c2STeamMemberId_ = TeamHandler.SummonRequest.getDefaultInstance().getC2STeamMemberId();
                onChanged();
                return this;
            }

            public Builder setC2STeamMemberIdBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.c2STeamMemberId_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class SummonResponse
            extends GeneratedMessage
            implements SummonResponseOrBuilder {
        private static final SummonResponse defaultInstance = new SummonResponse(true);
        private final UnknownFieldSet unknownFields;

        private SummonResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SummonResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SummonResponse getDefaultInstance() {
            return defaultInstance;
        }

        public SummonResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SummonResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_SummonResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_SummonResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(SummonResponse.class, Builder.class);
        }

        public static Parser<SummonResponse> PARSER = (Parser<SummonResponse>) new AbstractParser<SummonResponse>() {
            public TeamHandler.SummonResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.SummonResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SummonResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SummonResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SummonResponse) PARSER.parseFrom(data);
        }

        public static SummonResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SummonResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SummonResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SummonResponse) PARSER.parseFrom(data);
        }

        public static SummonResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SummonResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SummonResponse parseFrom(InputStream input) throws IOException {
            return (SummonResponse) PARSER.parseFrom(input);
        }

        public static SummonResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SummonResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static SummonResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (SummonResponse) PARSER.parseDelimitedFrom(input);
        }

        public static SummonResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SummonResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static SummonResponse parseFrom(CodedInputStream input) throws IOException {
            return (SummonResponse) PARSER.parseFrom(input);
        }

        public static SummonResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SummonResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SummonResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.SummonResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_SummonResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_SummonResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.SummonResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.SummonResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_SummonResponse_descriptor;
            }

            public TeamHandler.SummonResponse getDefaultInstanceForType() {
                return TeamHandler.SummonResponse.getDefaultInstance();
            }

            public TeamHandler.SummonResponse build() {
                TeamHandler.SummonResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.SummonResponse buildPartial() {
                TeamHandler.SummonResponse result = new TeamHandler.SummonResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.SummonResponse) return mergeFrom((TeamHandler.SummonResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.SummonResponse other) {
                if (other == TeamHandler.SummonResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.SummonResponse parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.SummonResponse) TeamHandler.SummonResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.SummonResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = TeamHandler.SummonResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class SummonConfirmRequest
            extends GeneratedMessage
            implements SummonConfirmRequestOrBuilder {
        private static final SummonConfirmRequest defaultInstance = new SummonConfirmRequest(true);
        private final UnknownFieldSet unknownFields;

        private SummonConfirmRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SummonConfirmRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SummonConfirmRequest getDefaultInstance() {
            return defaultInstance;
        }

        public SummonConfirmRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SummonConfirmRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.c2SId_ = bs;
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.s2COperate_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_SummonConfirmRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_SummonConfirmRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(SummonConfirmRequest.class, Builder.class);
        }

        public static Parser<SummonConfirmRequest> PARSER = (Parser<SummonConfirmRequest>) new AbstractParser<SummonConfirmRequest>() {
            public TeamHandler.SummonConfirmRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.SummonConfirmRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int C2S_ID_FIELD_NUMBER = 1;
        private Object c2SId_;
        public static final int S2C_OPERATE_FIELD_NUMBER = 2;
        private int s2COperate_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SummonConfirmRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasC2SId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getC2SId() {
            Object ref = this.c2SId_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.c2SId_ = s;
            return s;
        }

        public ByteString getC2SIdBytes() {
            Object ref = this.c2SId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.c2SId_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasS2COperate() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getS2COperate() {
            return this.s2COperate_;
        }

        private void initFields() {
            this.c2SId_ = "";
            this.s2COperate_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasC2SId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2COperate()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getC2SIdBytes());
            if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.s2COperate_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getC2SIdBytes());
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.s2COperate_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SummonConfirmRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SummonConfirmRequest) PARSER.parseFrom(data);
        }

        public static SummonConfirmRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SummonConfirmRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SummonConfirmRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SummonConfirmRequest) PARSER.parseFrom(data);
        }

        public static SummonConfirmRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SummonConfirmRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SummonConfirmRequest parseFrom(InputStream input) throws IOException {
            return (SummonConfirmRequest) PARSER.parseFrom(input);
        }

        public static SummonConfirmRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SummonConfirmRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static SummonConfirmRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (SummonConfirmRequest) PARSER.parseDelimitedFrom(input);
        }

        public static SummonConfirmRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SummonConfirmRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static SummonConfirmRequest parseFrom(CodedInputStream input) throws IOException {
            return (SummonConfirmRequest) PARSER.parseFrom(input);
        }

        public static SummonConfirmRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SummonConfirmRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SummonConfirmRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.SummonConfirmRequestOrBuilder {
            private int bitField0_;
            private Object c2SId_;
            private int s2COperate_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_SummonConfirmRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_SummonConfirmRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.SummonConfirmRequest.class, Builder.class);
            }

            private Builder() {
                this.c2SId_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.c2SId_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.SummonConfirmRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.c2SId_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2COperate_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_SummonConfirmRequest_descriptor;
            }

            public TeamHandler.SummonConfirmRequest getDefaultInstanceForType() {
                return TeamHandler.SummonConfirmRequest.getDefaultInstance();
            }

            public TeamHandler.SummonConfirmRequest build() {
                TeamHandler.SummonConfirmRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.SummonConfirmRequest buildPartial() {
                TeamHandler.SummonConfirmRequest result = new TeamHandler.SummonConfirmRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.c2SId_ = this.c2SId_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2COperate_ = this.s2COperate_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.SummonConfirmRequest)
                    return mergeFrom((TeamHandler.SummonConfirmRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.SummonConfirmRequest other) {
                if (other == TeamHandler.SummonConfirmRequest.getDefaultInstance()) return this;
                if (other.hasC2SId()) {
                    this.bitField0_ |= 0x1;
                    this.c2SId_ = other.c2SId_;
                    onChanged();
                }
                if (other.hasS2COperate()) setS2COperate(other.getS2COperate());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasC2SId()) return false;
                if (!hasS2COperate()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.SummonConfirmRequest parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.SummonConfirmRequest) TeamHandler.SummonConfirmRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.SummonConfirmRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasC2SId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public String getC2SId() {
                Object ref = this.c2SId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.c2SId_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getC2SIdBytes() {
                Object ref = this.c2SId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.c2SId_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setC2SId(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.c2SId_ = value;
                onChanged();
                return this;
            }

            public Builder clearC2SId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.c2SId_ = TeamHandler.SummonConfirmRequest.getDefaultInstance().getC2SId();
                onChanged();
                return this;
            }

            public Builder setC2SIdBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.c2SId_ = value;
                onChanged();
                return this;
            }

            public boolean hasS2COperate() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getS2COperate() {
                return this.s2COperate_;
            }

            public Builder setS2COperate(int value) {
                this.bitField0_ |= 0x2;
                this.s2COperate_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2COperate() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2COperate_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class SummonConfirmResponse
            extends GeneratedMessage
            implements SummonConfirmResponseOrBuilder {
        private static final SummonConfirmResponse defaultInstance = new SummonConfirmResponse(true);
        private final UnknownFieldSet unknownFields;

        private SummonConfirmResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SummonConfirmResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SummonConfirmResponse getDefaultInstance() {
            return defaultInstance;
        }

        public SummonConfirmResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SummonConfirmResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_SummonConfirmResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_SummonConfirmResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(SummonConfirmResponse.class, Builder.class);
        }

        public static Parser<SummonConfirmResponse> PARSER = (Parser<SummonConfirmResponse>) new AbstractParser<SummonConfirmResponse>() {
            public TeamHandler.SummonConfirmResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.SummonConfirmResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<SummonConfirmResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SummonConfirmResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SummonConfirmResponse) PARSER.parseFrom(data);
        }

        public static SummonConfirmResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SummonConfirmResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SummonConfirmResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SummonConfirmResponse) PARSER.parseFrom(data);
        }

        public static SummonConfirmResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SummonConfirmResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static SummonConfirmResponse parseFrom(InputStream input) throws IOException {
            return (SummonConfirmResponse) PARSER.parseFrom(input);
        }

        public static SummonConfirmResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SummonConfirmResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static SummonConfirmResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (SummonConfirmResponse) PARSER.parseDelimitedFrom(input);
        }

        public static SummonConfirmResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SummonConfirmResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static SummonConfirmResponse parseFrom(CodedInputStream input) throws IOException {
            return (SummonConfirmResponse) PARSER.parseFrom(input);
        }

        public static SummonConfirmResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SummonConfirmResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SummonConfirmResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.SummonConfirmResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_SummonConfirmResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_SummonConfirmResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.SummonConfirmResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.SummonConfirmResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_SummonConfirmResponse_descriptor;
            }

            public TeamHandler.SummonConfirmResponse getDefaultInstanceForType() {
                return TeamHandler.SummonConfirmResponse.getDefaultInstance();
            }

            public TeamHandler.SummonConfirmResponse build() {
                TeamHandler.SummonConfirmResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.SummonConfirmResponse buildPartial() {
                TeamHandler.SummonConfirmResponse result = new TeamHandler.SummonConfirmResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.SummonConfirmResponse)
                    return mergeFrom((TeamHandler.SummonConfirmResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.SummonConfirmResponse other) {
                if (other == TeamHandler.SummonConfirmResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.SummonConfirmResponse parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.SummonConfirmResponse) TeamHandler.SummonConfirmResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.SummonConfirmResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = TeamHandler.SummonConfirmResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class OnSummonTeamPush
            extends GeneratedMessage
            implements OnSummonTeamPushOrBuilder {
        private static final OnSummonTeamPush defaultInstance = new OnSummonTeamPush(true);
        private final UnknownFieldSet unknownFields;

        private OnSummonTeamPush(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private OnSummonTeamPush(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static OnSummonTeamPush getDefaultInstance() {
            return defaultInstance;
        }

        public OnSummonTeamPush getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private OnSummonTeamPush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.s2CId_ = bs;
                            break;
                        case 26:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CContent_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_OnSummonTeamPush_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_OnSummonTeamPush_fieldAccessorTable.ensureFieldAccessorsInitialized(OnSummonTeamPush.class, Builder.class);
        }

        public static Parser<OnSummonTeamPush> PARSER = (Parser<OnSummonTeamPush>) new AbstractParser<OnSummonTeamPush>() {
            public TeamHandler.OnSummonTeamPush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.OnSummonTeamPush(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_ID_FIELD_NUMBER = 2;
        private Object s2CId_;
        public static final int S2C_CONTENT_FIELD_NUMBER = 3;
        private Object s2CContent_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<OnSummonTeamPush> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getS2CId() {
            Object ref = this.s2CId_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CId_ = s;
            return s;
        }

        public ByteString getS2CIdBytes() {
            Object ref = this.s2CId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CId_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasS2CContent() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CContent() {
            Object ref = this.s2CContent_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CContent_ = s;
            return s;
        }

        public ByteString getS2CContentBytes() {
            Object ref = this.s2CContent_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CContent_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CId_ = "";
            this.s2CContent_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            if (!hasS2CContent()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeBytes(2, getS2CIdBytes());
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(3, getS2CContentBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(2, getS2CIdBytes());
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(3, getS2CContentBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static OnSummonTeamPush parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (OnSummonTeamPush) PARSER.parseFrom(data);
        }

        public static OnSummonTeamPush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OnSummonTeamPush) PARSER.parseFrom(data, extensionRegistry);
        }

        public static OnSummonTeamPush parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (OnSummonTeamPush) PARSER.parseFrom(data);
        }

        public static OnSummonTeamPush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OnSummonTeamPush) PARSER.parseFrom(data, extensionRegistry);
        }

        public static OnSummonTeamPush parseFrom(InputStream input) throws IOException {
            return (OnSummonTeamPush) PARSER.parseFrom(input);
        }

        public static OnSummonTeamPush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnSummonTeamPush) PARSER.parseFrom(input, extensionRegistry);
        }

        public static OnSummonTeamPush parseDelimitedFrom(InputStream input) throws IOException {
            return (OnSummonTeamPush) PARSER.parseDelimitedFrom(input);
        }

        public static OnSummonTeamPush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnSummonTeamPush) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static OnSummonTeamPush parseFrom(CodedInputStream input) throws IOException {
            return (OnSummonTeamPush) PARSER.parseFrom(input);
        }

        public static OnSummonTeamPush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnSummonTeamPush) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(OnSummonTeamPush prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.OnSummonTeamPushOrBuilder {
            private int bitField0_;
            private Object s2CId_;
            private Object s2CContent_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_OnSummonTeamPush_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_OnSummonTeamPush_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.OnSummonTeamPush.class, Builder.class);
            }

            private Builder() {
                this.s2CId_ = "";
                this.s2CContent_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CId_ = "";
                this.s2CContent_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.OnSummonTeamPush.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CId_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CContent_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_OnSummonTeamPush_descriptor;
            }

            public TeamHandler.OnSummonTeamPush getDefaultInstanceForType() {
                return TeamHandler.OnSummonTeamPush.getDefaultInstance();
            }

            public TeamHandler.OnSummonTeamPush build() {
                TeamHandler.OnSummonTeamPush result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.OnSummonTeamPush buildPartial() {
                TeamHandler.OnSummonTeamPush result = new TeamHandler.OnSummonTeamPush(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CId_ = this.s2CId_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CContent_ = this.s2CContent_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.OnSummonTeamPush)
                    return mergeFrom((TeamHandler.OnSummonTeamPush) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.OnSummonTeamPush other) {
                if (other == TeamHandler.OnSummonTeamPush.getDefaultInstance()) return this;
                if (other.hasS2CId()) {
                    this.bitField0_ |= 0x1;
                    this.s2CId_ = other.s2CId_;
                    onChanged();
                }
                if (other.hasS2CContent()) {
                    this.bitField0_ |= 0x2;
                    this.s2CContent_ = other.s2CContent_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CId()) return false;
                if (!hasS2CContent()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.OnSummonTeamPush parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.OnSummonTeamPush) TeamHandler.OnSummonTeamPush.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.OnSummonTeamPush) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public String getS2CId() {
                Object ref = this.s2CId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CId_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CIdBytes() {
                Object ref = this.s2CId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CId_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CId(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.s2CId_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CId_ = TeamHandler.OnSummonTeamPush.getDefaultInstance().getS2CId();
                onChanged();
                return this;
            }

            public Builder setS2CIdBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.s2CId_ = value;
                onChanged();
                return this;
            }

            public boolean hasS2CContent() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CContent() {
                Object ref = this.s2CContent_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CContent_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CContentBytes() {
                Object ref = this.s2CContent_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CContent_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CContent(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CContent_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CContent() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CContent_ = TeamHandler.OnSummonTeamPush.getDefaultInstance().getS2CContent();
                onChanged();
                return this;
            }

            public Builder setS2CContentBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CContent_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class GotoTeamTargetRequest
            extends GeneratedMessage
            implements GotoTeamTargetRequestOrBuilder {
        private static final GotoTeamTargetRequest defaultInstance = new GotoTeamTargetRequest(true);
        private final UnknownFieldSet unknownFields;

        private GotoTeamTargetRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GotoTeamTargetRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GotoTeamTargetRequest getDefaultInstance() {
            return defaultInstance;
        }

        public GotoTeamTargetRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GotoTeamTargetRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.targetId_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.difficulty_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_GotoTeamTargetRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_GotoTeamTargetRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(GotoTeamTargetRequest.class, Builder.class);
        }

        public static Parser<GotoTeamTargetRequest> PARSER = (Parser<GotoTeamTargetRequest>) new AbstractParser<GotoTeamTargetRequest>() {
            public TeamHandler.GotoTeamTargetRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.GotoTeamTargetRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int TARGETID_FIELD_NUMBER = 1;
        private int targetId_;
        public static final int DIFFICULTY_FIELD_NUMBER = 2;
        private int difficulty_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GotoTeamTargetRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasTargetId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getTargetId() {
            return this.targetId_;
        }

        public boolean hasDifficulty() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getDifficulty() {
            return this.difficulty_;
        }

        private void initFields() {
            this.targetId_ = 0;
            this.difficulty_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.targetId_);
            if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.difficulty_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.targetId_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.difficulty_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GotoTeamTargetRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GotoTeamTargetRequest) PARSER.parseFrom(data);
        }

        public static GotoTeamTargetRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GotoTeamTargetRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GotoTeamTargetRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GotoTeamTargetRequest) PARSER.parseFrom(data);
        }

        public static GotoTeamTargetRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GotoTeamTargetRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GotoTeamTargetRequest parseFrom(InputStream input) throws IOException {
            return (GotoTeamTargetRequest) PARSER.parseFrom(input);
        }

        public static GotoTeamTargetRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GotoTeamTargetRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GotoTeamTargetRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (GotoTeamTargetRequest) PARSER.parseDelimitedFrom(input);
        }

        public static GotoTeamTargetRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GotoTeamTargetRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GotoTeamTargetRequest parseFrom(CodedInputStream input) throws IOException {
            return (GotoTeamTargetRequest) PARSER.parseFrom(input);
        }

        public static GotoTeamTargetRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GotoTeamTargetRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GotoTeamTargetRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.GotoTeamTargetRequestOrBuilder {
            private int bitField0_;
            private int targetId_;
            private int difficulty_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_GotoTeamTargetRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_GotoTeamTargetRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.GotoTeamTargetRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.GotoTeamTargetRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.targetId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.difficulty_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_GotoTeamTargetRequest_descriptor;
            }

            public TeamHandler.GotoTeamTargetRequest getDefaultInstanceForType() {
                return TeamHandler.GotoTeamTargetRequest.getDefaultInstance();
            }

            public TeamHandler.GotoTeamTargetRequest build() {
                TeamHandler.GotoTeamTargetRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.GotoTeamTargetRequest buildPartial() {
                TeamHandler.GotoTeamTargetRequest result = new TeamHandler.GotoTeamTargetRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.targetId_ = this.targetId_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.difficulty_ = this.difficulty_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.GotoTeamTargetRequest)
                    return mergeFrom((TeamHandler.GotoTeamTargetRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.GotoTeamTargetRequest other) {
                if (other == TeamHandler.GotoTeamTargetRequest.getDefaultInstance()) return this;
                if (other.hasTargetId()) setTargetId(other.getTargetId());
                if (other.hasDifficulty()) setDifficulty(other.getDifficulty());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.GotoTeamTargetRequest parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.GotoTeamTargetRequest) TeamHandler.GotoTeamTargetRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.GotoTeamTargetRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasTargetId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getTargetId() {
                return this.targetId_;
            }

            public Builder setTargetId(int value) {
                this.bitField0_ |= 0x1;
                this.targetId_ = value;
                onChanged();
                return this;
            }

            public Builder clearTargetId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.targetId_ = 0;
                onChanged();
                return this;
            }

            public boolean hasDifficulty() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getDifficulty() {
                return this.difficulty_;
            }

            public Builder setDifficulty(int value) {
                this.bitField0_ |= 0x2;
                this.difficulty_ = value;
                onChanged();
                return this;
            }

            public Builder clearDifficulty() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.difficulty_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class GotoTeamTargetResponse
            extends GeneratedMessage
            implements GotoTeamTargetResponseOrBuilder {
        private static final GotoTeamTargetResponse defaultInstance = new GotoTeamTargetResponse(true);
        private final UnknownFieldSet unknownFields;

        private GotoTeamTargetResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private GotoTeamTargetResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static GotoTeamTargetResponse getDefaultInstance() {
            return defaultInstance;
        }

        public GotoTeamTargetResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private GotoTeamTargetResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_GotoTeamTargetResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_GotoTeamTargetResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(GotoTeamTargetResponse.class, Builder.class);
        }

        public static Parser<GotoTeamTargetResponse> PARSER = (Parser<GotoTeamTargetResponse>) new AbstractParser<GotoTeamTargetResponse>() {
            public TeamHandler.GotoTeamTargetResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.GotoTeamTargetResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<GotoTeamTargetResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static GotoTeamTargetResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (GotoTeamTargetResponse) PARSER.parseFrom(data);
        }

        public static GotoTeamTargetResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GotoTeamTargetResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GotoTeamTargetResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (GotoTeamTargetResponse) PARSER.parseFrom(data);
        }

        public static GotoTeamTargetResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (GotoTeamTargetResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static GotoTeamTargetResponse parseFrom(InputStream input) throws IOException {
            return (GotoTeamTargetResponse) PARSER.parseFrom(input);
        }

        public static GotoTeamTargetResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GotoTeamTargetResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static GotoTeamTargetResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (GotoTeamTargetResponse) PARSER.parseDelimitedFrom(input);
        }

        public static GotoTeamTargetResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GotoTeamTargetResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static GotoTeamTargetResponse parseFrom(CodedInputStream input) throws IOException {
            return (GotoTeamTargetResponse) PARSER.parseFrom(input);
        }

        public static GotoTeamTargetResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (GotoTeamTargetResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(GotoTeamTargetResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.GotoTeamTargetResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_GotoTeamTargetResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_GotoTeamTargetResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.GotoTeamTargetResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.GotoTeamTargetResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_GotoTeamTargetResponse_descriptor;
            }

            public TeamHandler.GotoTeamTargetResponse getDefaultInstanceForType() {
                return TeamHandler.GotoTeamTargetResponse.getDefaultInstance();
            }

            public TeamHandler.GotoTeamTargetResponse build() {
                TeamHandler.GotoTeamTargetResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.GotoTeamTargetResponse buildPartial() {
                TeamHandler.GotoTeamTargetResponse result = new TeamHandler.GotoTeamTargetResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.GotoTeamTargetResponse)
                    return mergeFrom((TeamHandler.GotoTeamTargetResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.GotoTeamTargetResponse other) {
                if (other == TeamHandler.GotoTeamTargetResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.GotoTeamTargetResponse parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.GotoTeamTargetResponse) TeamHandler.GotoTeamTargetResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.GotoTeamTargetResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = TeamHandler.GotoTeamTargetResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class AcrossMatchRequest
            extends GeneratedMessage
            implements AcrossMatchRequestOrBuilder {
        private static final AcrossMatchRequest defaultInstance = new AcrossMatchRequest(true);
        private final UnknownFieldSet unknownFields;

        private AcrossMatchRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private AcrossMatchRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static AcrossMatchRequest getDefaultInstance() {
            return defaultInstance;
        }

        public AcrossMatchRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private AcrossMatchRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.targetId_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.difficulty_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_AcrossMatchRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_AcrossMatchRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(AcrossMatchRequest.class, Builder.class);
        }

        public static Parser<AcrossMatchRequest> PARSER = (Parser<AcrossMatchRequest>) new AbstractParser<AcrossMatchRequest>() {
            public TeamHandler.AcrossMatchRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.AcrossMatchRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int TARGETID_FIELD_NUMBER = 1;
        private int targetId_;
        public static final int DIFFICULTY_FIELD_NUMBER = 2;
        private int difficulty_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<AcrossMatchRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasTargetId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getTargetId() {
            return this.targetId_;
        }

        public boolean hasDifficulty() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getDifficulty() {
            return this.difficulty_;
        }

        private void initFields() {
            this.targetId_ = 0;
            this.difficulty_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.targetId_);
            if ((this.bitField0_ & 0x2) == 2) output.writeInt32(2, this.difficulty_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.targetId_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt32Size(2, this.difficulty_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static AcrossMatchRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (AcrossMatchRequest) PARSER.parseFrom(data);
        }

        public static AcrossMatchRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (AcrossMatchRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static AcrossMatchRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (AcrossMatchRequest) PARSER.parseFrom(data);
        }

        public static AcrossMatchRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (AcrossMatchRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static AcrossMatchRequest parseFrom(InputStream input) throws IOException {
            return (AcrossMatchRequest) PARSER.parseFrom(input);
        }

        public static AcrossMatchRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (AcrossMatchRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static AcrossMatchRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (AcrossMatchRequest) PARSER.parseDelimitedFrom(input);
        }

        public static AcrossMatchRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (AcrossMatchRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static AcrossMatchRequest parseFrom(CodedInputStream input) throws IOException {
            return (AcrossMatchRequest) PARSER.parseFrom(input);
        }

        public static AcrossMatchRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (AcrossMatchRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(AcrossMatchRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.AcrossMatchRequestOrBuilder {
            private int bitField0_;
            private int targetId_;
            private int difficulty_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_AcrossMatchRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_AcrossMatchRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.AcrossMatchRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.AcrossMatchRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.targetId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.difficulty_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_AcrossMatchRequest_descriptor;
            }

            public TeamHandler.AcrossMatchRequest getDefaultInstanceForType() {
                return TeamHandler.AcrossMatchRequest.getDefaultInstance();
            }

            public TeamHandler.AcrossMatchRequest build() {
                TeamHandler.AcrossMatchRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.AcrossMatchRequest buildPartial() {
                TeamHandler.AcrossMatchRequest result = new TeamHandler.AcrossMatchRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.targetId_ = this.targetId_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.difficulty_ = this.difficulty_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.AcrossMatchRequest)
                    return mergeFrom((TeamHandler.AcrossMatchRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.AcrossMatchRequest other) {
                if (other == TeamHandler.AcrossMatchRequest.getDefaultInstance()) return this;
                if (other.hasTargetId()) setTargetId(other.getTargetId());
                if (other.hasDifficulty()) setDifficulty(other.getDifficulty());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.AcrossMatchRequest parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.AcrossMatchRequest) TeamHandler.AcrossMatchRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.AcrossMatchRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasTargetId() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getTargetId() {
                return this.targetId_;
            }

            public Builder setTargetId(int value) {
                this.bitField0_ |= 0x1;
                this.targetId_ = value;
                onChanged();
                return this;
            }

            public Builder clearTargetId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.targetId_ = 0;
                onChanged();
                return this;
            }

            public boolean hasDifficulty() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public int getDifficulty() {
                return this.difficulty_;
            }

            public Builder setDifficulty(int value) {
                this.bitField0_ |= 0x2;
                this.difficulty_ = value;
                onChanged();
                return this;
            }

            public Builder clearDifficulty() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.difficulty_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class AcrossMatchResponse
            extends GeneratedMessage
            implements AcrossMatchResponseOrBuilder {
        private static final AcrossMatchResponse defaultInstance = new AcrossMatchResponse(true);
        private final UnknownFieldSet unknownFields;

        private AcrossMatchResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private AcrossMatchResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static AcrossMatchResponse getDefaultInstance() {
            return defaultInstance;
        }

        public AcrossMatchResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private AcrossMatchResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_AcrossMatchResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_AcrossMatchResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(AcrossMatchResponse.class, Builder.class);
        }

        public static Parser<AcrossMatchResponse> PARSER = (Parser<AcrossMatchResponse>) new AbstractParser<AcrossMatchResponse>() {
            public TeamHandler.AcrossMatchResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.AcrossMatchResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<AcrossMatchResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static AcrossMatchResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (AcrossMatchResponse) PARSER.parseFrom(data);
        }

        public static AcrossMatchResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (AcrossMatchResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static AcrossMatchResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (AcrossMatchResponse) PARSER.parseFrom(data);
        }

        public static AcrossMatchResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (AcrossMatchResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static AcrossMatchResponse parseFrom(InputStream input) throws IOException {
            return (AcrossMatchResponse) PARSER.parseFrom(input);
        }

        public static AcrossMatchResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (AcrossMatchResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static AcrossMatchResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (AcrossMatchResponse) PARSER.parseDelimitedFrom(input);
        }

        public static AcrossMatchResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (AcrossMatchResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static AcrossMatchResponse parseFrom(CodedInputStream input) throws IOException {
            return (AcrossMatchResponse) PARSER.parseFrom(input);
        }

        public static AcrossMatchResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (AcrossMatchResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(AcrossMatchResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.AcrossMatchResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_AcrossMatchResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_AcrossMatchResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.AcrossMatchResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.AcrossMatchResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_AcrossMatchResponse_descriptor;
            }

            public TeamHandler.AcrossMatchResponse getDefaultInstanceForType() {
                return TeamHandler.AcrossMatchResponse.getDefaultInstance();
            }

            public TeamHandler.AcrossMatchResponse build() {
                TeamHandler.AcrossMatchResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.AcrossMatchResponse buildPartial() {
                TeamHandler.AcrossMatchResponse result = new TeamHandler.AcrossMatchResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.AcrossMatchResponse)
                    return mergeFrom((TeamHandler.AcrossMatchResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.AcrossMatchResponse other) {
                if (other == TeamHandler.AcrossMatchResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.AcrossMatchResponse parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.AcrossMatchResponse) TeamHandler.AcrossMatchResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.AcrossMatchResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = TeamHandler.AcrossMatchResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class LeaveAcrossMatchRequest
            extends GeneratedMessage
            implements LeaveAcrossMatchRequestOrBuilder {
        private static final LeaveAcrossMatchRequest defaultInstance = new LeaveAcrossMatchRequest(true);
        private final UnknownFieldSet unknownFields;

        private LeaveAcrossMatchRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private LeaveAcrossMatchRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static LeaveAcrossMatchRequest getDefaultInstance() {
            return defaultInstance;
        }

        public LeaveAcrossMatchRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private LeaveAcrossMatchRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            continue;
                    }
                    if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) done = true;
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_LeaveAcrossMatchRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_LeaveAcrossMatchRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(LeaveAcrossMatchRequest.class, Builder.class);
        }

        public static Parser<LeaveAcrossMatchRequest> PARSER = (Parser<LeaveAcrossMatchRequest>) new AbstractParser<LeaveAcrossMatchRequest>() {
            public TeamHandler.LeaveAcrossMatchRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.LeaveAcrossMatchRequest(input, extensionRegistry);
            }
        };
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<LeaveAcrossMatchRequest> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static LeaveAcrossMatchRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (LeaveAcrossMatchRequest) PARSER.parseFrom(data);
        }

        public static LeaveAcrossMatchRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LeaveAcrossMatchRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LeaveAcrossMatchRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (LeaveAcrossMatchRequest) PARSER.parseFrom(data);
        }

        public static LeaveAcrossMatchRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LeaveAcrossMatchRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LeaveAcrossMatchRequest parseFrom(InputStream input) throws IOException {
            return (LeaveAcrossMatchRequest) PARSER.parseFrom(input);
        }

        public static LeaveAcrossMatchRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LeaveAcrossMatchRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static LeaveAcrossMatchRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (LeaveAcrossMatchRequest) PARSER.parseDelimitedFrom(input);
        }

        public static LeaveAcrossMatchRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LeaveAcrossMatchRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static LeaveAcrossMatchRequest parseFrom(CodedInputStream input) throws IOException {
            return (LeaveAcrossMatchRequest) PARSER.parseFrom(input);
        }

        public static LeaveAcrossMatchRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LeaveAcrossMatchRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(LeaveAcrossMatchRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.LeaveAcrossMatchRequestOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_LeaveAcrossMatchRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_LeaveAcrossMatchRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.LeaveAcrossMatchRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.LeaveAcrossMatchRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_LeaveAcrossMatchRequest_descriptor;
            }

            public TeamHandler.LeaveAcrossMatchRequest getDefaultInstanceForType() {
                return TeamHandler.LeaveAcrossMatchRequest.getDefaultInstance();
            }

            public TeamHandler.LeaveAcrossMatchRequest build() {
                TeamHandler.LeaveAcrossMatchRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.LeaveAcrossMatchRequest buildPartial() {
                TeamHandler.LeaveAcrossMatchRequest result = new TeamHandler.LeaveAcrossMatchRequest(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.LeaveAcrossMatchRequest)
                    return mergeFrom((TeamHandler.LeaveAcrossMatchRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.LeaveAcrossMatchRequest other) {
                if (other == TeamHandler.LeaveAcrossMatchRequest.getDefaultInstance()) return this;
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.LeaveAcrossMatchRequest parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.LeaveAcrossMatchRequest) TeamHandler.LeaveAcrossMatchRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.LeaveAcrossMatchRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class LeaveAcrossMatchResponse
            extends GeneratedMessage
            implements LeaveAcrossMatchResponseOrBuilder {
        private static final LeaveAcrossMatchResponse defaultInstance = new LeaveAcrossMatchResponse(true);
        private final UnknownFieldSet unknownFields;

        private LeaveAcrossMatchResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private LeaveAcrossMatchResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static LeaveAcrossMatchResponse getDefaultInstance() {
            return defaultInstance;
        }

        public LeaveAcrossMatchResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private LeaveAcrossMatchResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_LeaveAcrossMatchResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_LeaveAcrossMatchResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(LeaveAcrossMatchResponse.class, Builder.class);
        }

        public static Parser<LeaveAcrossMatchResponse> PARSER = (Parser<LeaveAcrossMatchResponse>) new AbstractParser<LeaveAcrossMatchResponse>() {
            public TeamHandler.LeaveAcrossMatchResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.LeaveAcrossMatchResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<LeaveAcrossMatchResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static LeaveAcrossMatchResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (LeaveAcrossMatchResponse) PARSER.parseFrom(data);
        }

        public static LeaveAcrossMatchResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LeaveAcrossMatchResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LeaveAcrossMatchResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (LeaveAcrossMatchResponse) PARSER.parseFrom(data);
        }

        public static LeaveAcrossMatchResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LeaveAcrossMatchResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static LeaveAcrossMatchResponse parseFrom(InputStream input) throws IOException {
            return (LeaveAcrossMatchResponse) PARSER.parseFrom(input);
        }

        public static LeaveAcrossMatchResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LeaveAcrossMatchResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static LeaveAcrossMatchResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (LeaveAcrossMatchResponse) PARSER.parseDelimitedFrom(input);
        }

        public static LeaveAcrossMatchResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LeaveAcrossMatchResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static LeaveAcrossMatchResponse parseFrom(CodedInputStream input) throws IOException {
            return (LeaveAcrossMatchResponse) PARSER.parseFrom(input);
        }

        public static LeaveAcrossMatchResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LeaveAcrossMatchResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(LeaveAcrossMatchResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.LeaveAcrossMatchResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_LeaveAcrossMatchResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_LeaveAcrossMatchResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.LeaveAcrossMatchResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.LeaveAcrossMatchResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_LeaveAcrossMatchResponse_descriptor;
            }

            public TeamHandler.LeaveAcrossMatchResponse getDefaultInstanceForType() {
                return TeamHandler.LeaveAcrossMatchResponse.getDefaultInstance();
            }

            public TeamHandler.LeaveAcrossMatchResponse build() {
                TeamHandler.LeaveAcrossMatchResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.LeaveAcrossMatchResponse buildPartial() {
                TeamHandler.LeaveAcrossMatchResponse result = new TeamHandler.LeaveAcrossMatchResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.LeaveAcrossMatchResponse)
                    return mergeFrom((TeamHandler.LeaveAcrossMatchResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.LeaveAcrossMatchResponse other) {
                if (other == TeamHandler.LeaveAcrossMatchResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.LeaveAcrossMatchResponse parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.LeaveAcrossMatchResponse) TeamHandler.LeaveAcrossMatchResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.LeaveAcrossMatchResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = TeamHandler.LeaveAcrossMatchResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class FollowLeaderRequest
            extends GeneratedMessage
            implements FollowLeaderRequestOrBuilder {
        private static final FollowLeaderRequest defaultInstance = new FollowLeaderRequest(true);
        private final UnknownFieldSet unknownFields;

        private FollowLeaderRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private FollowLeaderRequest(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static FollowLeaderRequest getDefaultInstance() {
            return defaultInstance;
        }

        public FollowLeaderRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private FollowLeaderRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.follow_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_FollowLeaderRequest_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_FollowLeaderRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(FollowLeaderRequest.class, Builder.class);
        }

        public static Parser<FollowLeaderRequest> PARSER = (Parser<FollowLeaderRequest>) new AbstractParser<FollowLeaderRequest>() {
            public TeamHandler.FollowLeaderRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.FollowLeaderRequest(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int FOLLOW_FIELD_NUMBER = 1;
        private int follow_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<FollowLeaderRequest> getParserForType() {
            return PARSER;
        }

        public boolean hasFollow() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getFollow() {
            return this.follow_;
        }

        private void initFields() {
            this.follow_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasFollow()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.follow_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.follow_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static FollowLeaderRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (FollowLeaderRequest) PARSER.parseFrom(data);
        }

        public static FollowLeaderRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (FollowLeaderRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static FollowLeaderRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (FollowLeaderRequest) PARSER.parseFrom(data);
        }

        public static FollowLeaderRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (FollowLeaderRequest) PARSER.parseFrom(data, extensionRegistry);
        }

        public static FollowLeaderRequest parseFrom(InputStream input) throws IOException {
            return (FollowLeaderRequest) PARSER.parseFrom(input);
        }

        public static FollowLeaderRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FollowLeaderRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static FollowLeaderRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (FollowLeaderRequest) PARSER.parseDelimitedFrom(input);
        }

        public static FollowLeaderRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FollowLeaderRequest) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static FollowLeaderRequest parseFrom(CodedInputStream input) throws IOException {
            return (FollowLeaderRequest) PARSER.parseFrom(input);
        }

        public static FollowLeaderRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FollowLeaderRequest) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(FollowLeaderRequest prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.FollowLeaderRequestOrBuilder {
            private int bitField0_;
            private int follow_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_FollowLeaderRequest_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_FollowLeaderRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.FollowLeaderRequest.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.FollowLeaderRequest.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.follow_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_FollowLeaderRequest_descriptor;
            }

            public TeamHandler.FollowLeaderRequest getDefaultInstanceForType() {
                return TeamHandler.FollowLeaderRequest.getDefaultInstance();
            }

            public TeamHandler.FollowLeaderRequest build() {
                TeamHandler.FollowLeaderRequest result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.FollowLeaderRequest buildPartial() {
                TeamHandler.FollowLeaderRequest result = new TeamHandler.FollowLeaderRequest(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.follow_ = this.follow_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.FollowLeaderRequest)
                    return mergeFrom((TeamHandler.FollowLeaderRequest) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.FollowLeaderRequest other) {
                if (other == TeamHandler.FollowLeaderRequest.getDefaultInstance()) return this;
                if (other.hasFollow()) setFollow(other.getFollow());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasFollow()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.FollowLeaderRequest parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.FollowLeaderRequest) TeamHandler.FollowLeaderRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.FollowLeaderRequest) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasFollow() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getFollow() {
                return this.follow_;
            }

            public Builder setFollow(int value) {
                this.bitField0_ |= 0x1;
                this.follow_ = value;
                onChanged();
                return this;
            }

            public Builder clearFollow() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.follow_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class FollowLeaderResponse
            extends GeneratedMessage
            implements FollowLeaderResponseOrBuilder {
        private static final FollowLeaderResponse defaultInstance = new FollowLeaderResponse(true);
        private final UnknownFieldSet unknownFields;

        private FollowLeaderResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private FollowLeaderResponse(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static FollowLeaderResponse getDefaultInstance() {
            return defaultInstance;
        }

        public FollowLeaderResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private FollowLeaderResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CCode_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.s2CMsg_ = bs;
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_FollowLeaderResponse_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_FollowLeaderResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(FollowLeaderResponse.class, Builder.class);
        }

        public static Parser<FollowLeaderResponse> PARSER = (Parser<FollowLeaderResponse>) new AbstractParser<FollowLeaderResponse>() {
            public TeamHandler.FollowLeaderResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.FollowLeaderResponse(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_CODE_FIELD_NUMBER = 1;
        private int s2CCode_;
        public static final int S2C_MSG_FIELD_NUMBER = 2;
        private Object s2CMsg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<FollowLeaderResponse> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CCode() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CCode() {
            return this.s2CCode_;
        }

        public boolean hasS2CMsg() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getS2CMsg() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.s2CMsg_ = s;
            return s;
        }

        public ByteString getS2CMsgBytes() {
            Object ref = this.s2CMsg_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.s2CMsg_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        private void initFields() {
            this.s2CCode_ = 0;
            this.s2CMsg_ = "";
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            if (!hasS2CCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getS2CMsgBytes());
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.s2CCode_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getS2CMsgBytes());
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static FollowLeaderResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (FollowLeaderResponse) PARSER.parseFrom(data);
        }

        public static FollowLeaderResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (FollowLeaderResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static FollowLeaderResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (FollowLeaderResponse) PARSER.parseFrom(data);
        }

        public static FollowLeaderResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (FollowLeaderResponse) PARSER.parseFrom(data, extensionRegistry);
        }

        public static FollowLeaderResponse parseFrom(InputStream input) throws IOException {
            return (FollowLeaderResponse) PARSER.parseFrom(input);
        }

        public static FollowLeaderResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FollowLeaderResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static FollowLeaderResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (FollowLeaderResponse) PARSER.parseDelimitedFrom(input);
        }

        public static FollowLeaderResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FollowLeaderResponse) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static FollowLeaderResponse parseFrom(CodedInputStream input) throws IOException {
            return (FollowLeaderResponse) PARSER.parseFrom(input);
        }

        public static FollowLeaderResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (FollowLeaderResponse) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(FollowLeaderResponse prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.FollowLeaderResponseOrBuilder {
            private int bitField0_;
            private int s2CCode_;
            private Object s2CMsg_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_FollowLeaderResponse_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_FollowLeaderResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.FollowLeaderResponse.class, Builder.class);
            }

            private Builder() {
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CMsg_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.FollowLeaderResponse.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.s2CCode_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CMsg_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_FollowLeaderResponse_descriptor;
            }

            public TeamHandler.FollowLeaderResponse getDefaultInstanceForType() {
                return TeamHandler.FollowLeaderResponse.getDefaultInstance();
            }

            public TeamHandler.FollowLeaderResponse build() {
                TeamHandler.FollowLeaderResponse result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.FollowLeaderResponse buildPartial() {
                TeamHandler.FollowLeaderResponse result = new TeamHandler.FollowLeaderResponse(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.s2CCode_ = this.s2CCode_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.s2CMsg_ = this.s2CMsg_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.FollowLeaderResponse)
                    return mergeFrom((TeamHandler.FollowLeaderResponse) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.FollowLeaderResponse other) {
                if (other == TeamHandler.FollowLeaderResponse.getDefaultInstance()) return this;
                if (other.hasS2CCode()) setS2CCode(other.getS2CCode());
                if (other.hasS2CMsg()) {
                    this.bitField0_ |= 0x2;
                    this.s2CMsg_ = other.s2CMsg_;
                    onChanged();
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasS2CCode()) return false;
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.FollowLeaderResponse parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.FollowLeaderResponse) TeamHandler.FollowLeaderResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.FollowLeaderResponse) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasS2CCode() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getS2CCode() {
                return this.s2CCode_;
            }

            public Builder setS2CCode(int value) {
                this.bitField0_ |= 0x1;
                this.s2CCode_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CCode() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CCode_ = 0;
                onChanged();
                return this;
            }

            public boolean hasS2CMsg() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getS2CMsg() {
                Object ref = this.s2CMsg_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.s2CMsg_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getS2CMsgBytes() {
                Object ref = this.s2CMsg_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.s2CMsg_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setS2CMsg(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }

            public Builder clearS2CMsg() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.s2CMsg_ = TeamHandler.FollowLeaderResponse.getDefaultInstance().getS2CMsg();
                onChanged();
                return this;
            }

            public Builder setS2CMsgBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.s2CMsg_ = value;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class OnTeamTargetPush
            extends GeneratedMessage
            implements OnTeamTargetPushOrBuilder {
        private static final OnTeamTargetPush defaultInstance = new OnTeamTargetPush(true);
        private final UnknownFieldSet unknownFields;

        private OnTeamTargetPush(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private OnTeamTargetPush(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static OnTeamTargetPush getDefaultInstance() {
            return defaultInstance;
        }

        public OnTeamTargetPush getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private OnTeamTargetPush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    TeamHandler.TeamTarget.Builder subBuilder;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.s2CIsAcceptAutoTeam_ = input.readInt32();
                            break;
                        case 18:
                            subBuilder = null;
                            if ((this.bitField0_ & 0x2) == 2)
                                subBuilder = this.s2CTeamTarget_.toBuilder();
                            this.s2CTeamTarget_ = (TeamHandler.TeamTarget) input.readMessage(TeamHandler.TeamTarget.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(this.s2CTeamTarget_);
                                this.s2CTeamTarget_ = subBuilder.buildPartial();
                            }
                            this.bitField0_ |= 0x2;
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.haveApply_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_OnTeamTargetPush_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_OnTeamTargetPush_fieldAccessorTable.ensureFieldAccessorsInitialized(OnTeamTargetPush.class, Builder.class);
        }

        public static Parser<OnTeamTargetPush> PARSER = (Parser<OnTeamTargetPush>) new AbstractParser<OnTeamTargetPush>() {
            public TeamHandler.OnTeamTargetPush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.OnTeamTargetPush(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int S2C_ISACCEPTAUTOTEAM_FIELD_NUMBER = 1;
        private int s2CIsAcceptAutoTeam_;
        public static final int S2C_TEAMTARGET_FIELD_NUMBER = 2;
        private TeamHandler.TeamTarget s2CTeamTarget_;
        public static final int HAVEAPPLY_FIELD_NUMBER = 3;
        private int haveApply_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<OnTeamTargetPush> getParserForType() {
            return PARSER;
        }

        public boolean hasS2CIsAcceptAutoTeam() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getS2CIsAcceptAutoTeam() {
            return this.s2CIsAcceptAutoTeam_;
        }

        public boolean hasS2CTeamTarget() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        static {
            defaultInstance.initFields();
        }


        public TeamHandler.TeamTarget getS2CTeamTarget() {
            return this.s2CTeamTarget_;
        }


        public TeamHandler.TeamTargetOrBuilder getS2CTeamTargetOrBuilder() {
            return this.s2CTeamTarget_;
        }


        public boolean hasHaveApply() {
            return ((this.bitField0_ & 0x4) == 4);
        }


        public int getHaveApply() {
            return this.haveApply_;
        }


        private void initFields() {
            this.s2CIsAcceptAutoTeam_ = 0;
            this.s2CTeamTarget_ = TeamHandler.TeamTarget.getDefaultInstance();
            this.haveApply_ = 0;
        }


        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            if (hasS2CTeamTarget() && !getS2CTeamTarget().isInitialized()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }


        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeInt32(1, this.s2CIsAcceptAutoTeam_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeMessage(2, (MessageLite) this.s2CTeamTarget_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                output.writeInt32(3, this.haveApply_);
            }
            getUnknownFields().writeTo(output);
        }


        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeInt32Size(1, this.s2CIsAcceptAutoTeam_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeMessageSize(2, (MessageLite) this.s2CTeamTarget_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                size += CodedOutputStream.computeInt32Size(3, this.haveApply_);
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }


        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }


        public static OnTeamTargetPush parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (OnTeamTargetPush) PARSER.parseFrom(data);
        }


        public static OnTeamTargetPush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OnTeamTargetPush) PARSER.parseFrom(data, extensionRegistry);
        }


        public static OnTeamTargetPush parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (OnTeamTargetPush) PARSER.parseFrom(data);
        }


        public static OnTeamTargetPush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OnTeamTargetPush) PARSER.parseFrom(data, extensionRegistry);
        }


        public static OnTeamTargetPush parseFrom(InputStream input) throws IOException {
            return (OnTeamTargetPush) PARSER.parseFrom(input);
        }


        public static OnTeamTargetPush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnTeamTargetPush) PARSER.parseFrom(input, extensionRegistry);
        }


        public static OnTeamTargetPush parseDelimitedFrom(InputStream input) throws IOException {
            return (OnTeamTargetPush) PARSER.parseDelimitedFrom(input);
        }


        public static OnTeamTargetPush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnTeamTargetPush) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }


        public static OnTeamTargetPush parseFrom(CodedInputStream input) throws IOException {
            return (OnTeamTargetPush) PARSER.parseFrom(input);
        }


        public static OnTeamTargetPush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnTeamTargetPush) PARSER.parseFrom(input, extensionRegistry);
        }


        public static Builder newBuilder() {
            return Builder.create();
        }


        public Builder newBuilderForType() {
            return newBuilder();
        }


        public static Builder newBuilder(OnTeamTargetPush prototype) {
            return newBuilder().mergeFrom(prototype);
        }


        public Builder toBuilder() {
            return newBuilder(this);
        }


        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }


        public static final class Builder
                extends GeneratedMessage.Builder<Builder>
                implements TeamHandler.OnTeamTargetPushOrBuilder {
            private int bitField0_;


            private int s2CIsAcceptAutoTeam_;


            private TeamHandler.TeamTarget s2CTeamTarget_;


            private SingleFieldBuilder<TeamHandler.TeamTarget, TeamHandler.TeamTarget.Builder, TeamHandler.TeamTargetOrBuilder> s2CTeamTargetBuilder_;


            private int haveApply_;


            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_OnTeamTargetPush_descriptor;
            }


            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_OnTeamTargetPush_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.OnTeamTargetPush.class, Builder.class);
            }


            private Builder() {
                this.s2CTeamTarget_ = TeamHandler.TeamTarget.getDefaultInstance();
                maybeForceBuilderInitialization();
            }


            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.s2CTeamTarget_ = TeamHandler.TeamTarget.getDefaultInstance();
                maybeForceBuilderInitialization();
            }


            private void maybeForceBuilderInitialization() {
                if (TeamHandler.OnTeamTargetPush.alwaysUseFieldBuilders) {
                    getS2CTeamTargetFieldBuilder();
                }
            }


            private static Builder create() {
                return new Builder();
            }


            public Builder clear() {
                super.clear();
                this.s2CIsAcceptAutoTeam_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                if (this.s2CTeamTargetBuilder_ == null) {
                    this.s2CTeamTarget_ = TeamHandler.TeamTarget.getDefaultInstance();
                } else {
                    this.s2CTeamTargetBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFD;
                this.haveApply_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }


            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }


            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_OnTeamTargetPush_descriptor;
            }


            public TeamHandler.OnTeamTargetPush getDefaultInstanceForType() {
                return TeamHandler.OnTeamTargetPush.getDefaultInstance();
            }


            public TeamHandler.OnTeamTargetPush build() {
                TeamHandler.OnTeamTargetPush result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }


            public TeamHandler.OnTeamTargetPush buildPartial() {
                TeamHandler.OnTeamTargetPush result = new TeamHandler.OnTeamTargetPush(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) {
                    to_bitField0_ |= 0x1;
                }
                result.s2CIsAcceptAutoTeam_ = this.s2CIsAcceptAutoTeam_;
                if ((from_bitField0_ & 0x2) == 2) {
                    to_bitField0_ |= 0x2;
                }
                if (this.s2CTeamTargetBuilder_ == null) {
                    result.s2CTeamTarget_ = this.s2CTeamTarget_;
                } else {
                    result.s2CTeamTarget_ = (TeamHandler.TeamTarget) this.s2CTeamTargetBuilder_.build();
                }
                if ((from_bitField0_ & 0x4) == 4) {
                    to_bitField0_ |= 0x4;
                }
                result.haveApply_ = this.haveApply_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }


            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.OnTeamTargetPush) {
                    return mergeFrom((TeamHandler.OnTeamTargetPush) other);
                }
                super.mergeFrom(other);
                return this;
            }


            public Builder mergeFrom(TeamHandler.OnTeamTargetPush other) {
                if (other == TeamHandler.OnTeamTargetPush.getDefaultInstance()) {
                    return this;
                }
                if (other.hasS2CIsAcceptAutoTeam()) {
                    setS2CIsAcceptAutoTeam(other.getS2CIsAcceptAutoTeam());
                }
                if (other.hasS2CTeamTarget()) {
                    mergeS2CTeamTarget(other.getS2CTeamTarget());
                }
                if (other.hasHaveApply()) {
                    setHaveApply(other.getHaveApply());
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }


            public final boolean isInitialized() {
                if (hasS2CTeamTarget() && !getS2CTeamTarget().isInitialized()) {
                    return false;
                }
                return true;
            }


            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.OnTeamTargetPush parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.OnTeamTargetPush) TeamHandler.OnTeamTargetPush.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.OnTeamTargetPush) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }


            public boolean hasS2CIsAcceptAutoTeam() {
                return ((this.bitField0_ & 0x1) == 1);
            }


            public int getS2CIsAcceptAutoTeam() {
                return this.s2CIsAcceptAutoTeam_;
            }


            public Builder setS2CIsAcceptAutoTeam(int value) {
                this.bitField0_ |= 0x1;
                this.s2CIsAcceptAutoTeam_ = value;
                onChanged();
                return this;
            }


            public Builder clearS2CIsAcceptAutoTeam() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.s2CIsAcceptAutoTeam_ = 0;
                onChanged();
                return this;
            }


            public boolean hasS2CTeamTarget() {
                return ((this.bitField0_ & 0x2) == 2);
            }


            public TeamHandler.TeamTarget getS2CTeamTarget() {
                if (this.s2CTeamTargetBuilder_ == null) {
                    return this.s2CTeamTarget_;
                }
                return (TeamHandler.TeamTarget) this.s2CTeamTargetBuilder_.getMessage();
            }


            public Builder setS2CTeamTarget(TeamHandler.TeamTarget value) {
                if (this.s2CTeamTargetBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    this.s2CTeamTarget_ = value;
                    onChanged();
                } else {
                    this.s2CTeamTargetBuilder_.setMessage(value);
                }
                this.bitField0_ |= 0x2;
                return this;
            }


            public Builder setS2CTeamTarget(TeamHandler.TeamTarget.Builder builderForValue) {
                if (this.s2CTeamTargetBuilder_ == null) {
                    this.s2CTeamTarget_ = builderForValue.build();
                    onChanged();
                } else {
                    this.s2CTeamTargetBuilder_.setMessage(builderForValue.build());
                }
                this.bitField0_ |= 0x2;
                return this;
            }


            public Builder mergeS2CTeamTarget(TeamHandler.TeamTarget value) {
                if (this.s2CTeamTargetBuilder_ == null) {
                    if ((this.bitField0_ & 0x2) == 2 && this.s2CTeamTarget_ != TeamHandler.TeamTarget.getDefaultInstance()) {
                        this.s2CTeamTarget_ = TeamHandler.TeamTarget.newBuilder(this.s2CTeamTarget_).mergeFrom(value).buildPartial();
                    } else {
                        this.s2CTeamTarget_ = value;
                    }
                    onChanged();
                } else {
                    this.s2CTeamTargetBuilder_.mergeFrom(value);
                }
                this.bitField0_ |= 0x2;
                return this;
            }


            public Builder clearS2CTeamTarget() {
                if (this.s2CTeamTargetBuilder_ == null) {
                    this.s2CTeamTarget_ = TeamHandler.TeamTarget.getDefaultInstance();
                    onChanged();
                } else {
                    this.s2CTeamTargetBuilder_.clear();
                }
                this.bitField0_ &= 0xFFFFFFFD;
                return this;
            }


            public TeamHandler.TeamTarget.Builder getS2CTeamTargetBuilder() {
                this.bitField0_ |= 0x2;
                onChanged();
                return (TeamHandler.TeamTarget.Builder) getS2CTeamTargetFieldBuilder().getBuilder();
            }


            public TeamHandler.TeamTargetOrBuilder getS2CTeamTargetOrBuilder() {
                if (this.s2CTeamTargetBuilder_ != null) {
                    return (TeamHandler.TeamTargetOrBuilder) this.s2CTeamTargetBuilder_.getMessageOrBuilder();
                }
                return this.s2CTeamTarget_;
            }


            private SingleFieldBuilder<TeamHandler.TeamTarget, TeamHandler.TeamTarget.Builder, TeamHandler.TeamTargetOrBuilder> getS2CTeamTargetFieldBuilder() {
                if (this.s2CTeamTargetBuilder_ == null) {
                    this.s2CTeamTargetBuilder_ = new SingleFieldBuilder(getS2CTeamTarget(), getParentForChildren(), isClean());
                    this.s2CTeamTarget_ = null;
                }
                return this.s2CTeamTargetBuilder_;
            }


            public boolean hasHaveApply() {
                return ((this.bitField0_ & 0x4) == 4);
            }


            public int getHaveApply() {
                return this.haveApply_;
            }


            public Builder setHaveApply(int value) {
                this.bitField0_ |= 0x4;
                this.haveApply_ = value;
                onChanged();
                return this;
            }


            public Builder clearHaveApply() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.haveApply_ = 0;
                onChanged();
                return this;
            }
        }
    }


    public static final class AcrossPlayer
            extends GeneratedMessage
            implements AcrossPlayerOrBuilder {
        private static final AcrossPlayer defaultInstance = new AcrossPlayer(true);
        private final UnknownFieldSet unknownFields;

        private AcrossPlayer(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private AcrossPlayer(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static AcrossPlayer getDefaultInstance() {
            return defaultInstance;
        }

        public AcrossPlayer getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private AcrossPlayer(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.pro_ = input.readInt32();
                            break;
                        case 18:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x2;
                            this.name_ = bs;
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.level_ = input.readInt32();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_AcrossPlayer_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_AcrossPlayer_fieldAccessorTable.ensureFieldAccessorsInitialized(AcrossPlayer.class, Builder.class);
        }

        public static Parser<AcrossPlayer> PARSER = (Parser<AcrossPlayer>) new AbstractParser<AcrossPlayer>() {
            public TeamHandler.AcrossPlayer parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.AcrossPlayer(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int PRO_FIELD_NUMBER = 1;
        private int pro_;
        public static final int NAME_FIELD_NUMBER = 2;
        private Object name_;
        public static final int LEVEL_FIELD_NUMBER = 3;
        private int level_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<AcrossPlayer> getParserForType() {
            return PARSER;
        }

        public boolean hasPro() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getPro() {
            return this.pro_;
        }

        public boolean hasName() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public String getName() {
            Object ref = this.name_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.name_ = s;
            return s;
        }

        public ByteString getNameBytes() {
            Object ref = this.name_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.name_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasLevel() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public int getLevel() {
            return this.level_;
        }

        private void initFields() {
            this.pro_ = 0;
            this.name_ = "";
            this.level_ = 0;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeInt32(1, this.pro_);
            if ((this.bitField0_ & 0x2) == 2) output.writeBytes(2, getNameBytes());
            if ((this.bitField0_ & 0x4) == 4) output.writeInt32(3, this.level_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeInt32Size(1, this.pro_);
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeBytesSize(2, getNameBytes());
            if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt32Size(3, this.level_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static AcrossPlayer parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (AcrossPlayer) PARSER.parseFrom(data);
        }

        public static AcrossPlayer parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (AcrossPlayer) PARSER.parseFrom(data, extensionRegistry);
        }

        public static AcrossPlayer parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (AcrossPlayer) PARSER.parseFrom(data);
        }

        public static AcrossPlayer parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (AcrossPlayer) PARSER.parseFrom(data, extensionRegistry);
        }

        public static AcrossPlayer parseFrom(InputStream input) throws IOException {
            return (AcrossPlayer) PARSER.parseFrom(input);
        }

        public static AcrossPlayer parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (AcrossPlayer) PARSER.parseFrom(input, extensionRegistry);
        }

        public static AcrossPlayer parseDelimitedFrom(InputStream input) throws IOException {
            return (AcrossPlayer) PARSER.parseDelimitedFrom(input);
        }

        public static AcrossPlayer parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (AcrossPlayer) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static AcrossPlayer parseFrom(CodedInputStream input) throws IOException {
            return (AcrossPlayer) PARSER.parseFrom(input);
        }

        public static AcrossPlayer parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (AcrossPlayer) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(AcrossPlayer prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.AcrossPlayerOrBuilder {
            private int bitField0_;
            private int pro_;
            private Object name_;
            private int level_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_AcrossPlayer_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_AcrossPlayer_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.AcrossPlayer.class, Builder.class);
            }

            private Builder() {
                this.name_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.name_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.AcrossPlayer.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.pro_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.name_ = "";
                this.bitField0_ &= 0xFFFFFFFD;
                this.level_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_AcrossPlayer_descriptor;
            }

            public TeamHandler.AcrossPlayer getDefaultInstanceForType() {
                return TeamHandler.AcrossPlayer.getDefaultInstance();
            }

            public TeamHandler.AcrossPlayer build() {
                TeamHandler.AcrossPlayer result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.AcrossPlayer buildPartial() {
                TeamHandler.AcrossPlayer result = new TeamHandler.AcrossPlayer(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.pro_ = this.pro_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.name_ = this.name_;
                if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;
                result.level_ = this.level_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.AcrossPlayer) return mergeFrom((TeamHandler.AcrossPlayer) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.AcrossPlayer other) {
                if (other == TeamHandler.AcrossPlayer.getDefaultInstance()) return this;
                if (other.hasPro()) setPro(other.getPro());
                if (other.hasName()) {
                    this.bitField0_ |= 0x2;
                    this.name_ = other.name_;
                    onChanged();
                }
                if (other.hasLevel()) setLevel(other.getLevel());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.AcrossPlayer parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.AcrossPlayer) TeamHandler.AcrossPlayer.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.AcrossPlayer) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasPro() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public int getPro() {
                return this.pro_;
            }

            public Builder setPro(int value) {
                this.bitField0_ |= 0x1;
                this.pro_ = value;
                onChanged();
                return this;
            }

            public Builder clearPro() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.pro_ = 0;
                onChanged();
                return this;
            }

            public boolean hasName() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public String getName() {
                Object ref = this.name_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.name_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getNameBytes() {
                Object ref = this.name_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.name_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setName(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.name_ = value;
                onChanged();
                return this;
            }

            public Builder clearName() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.name_ = TeamHandler.AcrossPlayer.getDefaultInstance().getName();
                onChanged();
                return this;
            }

            public Builder setNameBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x2;
                this.name_ = value;
                onChanged();
                return this;
            }

            public boolean hasLevel() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public int getLevel() {
                return this.level_;
            }

            public Builder setLevel(int value) {
                this.bitField0_ |= 0x4;
                this.level_ = value;
                onChanged();
                return this;
            }

            public Builder clearLevel() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.level_ = 0;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class OnAcrossTeamInfoPush
            extends GeneratedMessage
            implements OnAcrossTeamInfoPushOrBuilder {
        private static final OnAcrossTeamInfoPush defaultInstance = new OnAcrossTeamInfoPush(true);
        private final UnknownFieldSet unknownFields;

        private OnAcrossTeamInfoPush(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private OnAcrossTeamInfoPush(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static OnAcrossTeamInfoPush getDefaultInstance() {
            return defaultInstance;
        }

        public OnAcrossTeamInfoPush getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private OnAcrossTeamInfoPush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8:
                            this.bitField0_ |= 0x1;
                            this.targetId_ = input.readInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.difficulty_ = input.readInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.second_ = input.readInt32();
                            break;
                        case 34:
                            if ((mutable_bitField0_ & 0x8) != 8) {
                                this.players_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x8;
                            }
                            this.players_.add(input.readMessage(TeamHandler.AcrossPlayer.PARSER, extensionRegistry));
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x8) == 8) this.players_ = Collections.unmodifiableList(this.players_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_OnAcrossTeamInfoPush_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_OnAcrossTeamInfoPush_fieldAccessorTable.ensureFieldAccessorsInitialized(OnAcrossTeamInfoPush.class, Builder.class);
        }

        public static Parser<OnAcrossTeamInfoPush> PARSER = (Parser<OnAcrossTeamInfoPush>) new AbstractParser<OnAcrossTeamInfoPush>() {
            public TeamHandler.OnAcrossTeamInfoPush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.OnAcrossTeamInfoPush(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int TARGETID_FIELD_NUMBER = 1;
        private int targetId_;
        public static final int DIFFICULTY_FIELD_NUMBER = 2;
        private int difficulty_;
        public static final int SECOND_FIELD_NUMBER = 3;
        private int second_;
        public static final int PLAYERS_FIELD_NUMBER = 4;
        private List<TeamHandler.AcrossPlayer> players_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<OnAcrossTeamInfoPush> getParserForType() {
            return PARSER;
        }

        public boolean hasTargetId() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public int getTargetId() {
            return this.targetId_;
        }

        public boolean hasDifficulty() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public int getDifficulty() {
            return this.difficulty_;
        }

        static {
            defaultInstance.initFields();
        }


        public boolean hasSecond() {
            return ((this.bitField0_ & 0x4) == 4);
        }


        public int getSecond() {
            return this.second_;
        }


        public List<TeamHandler.AcrossPlayer> getPlayersList() {
            return this.players_;
        }


        public List<? extends TeamHandler.AcrossPlayerOrBuilder> getPlayersOrBuilderList() {
            return (List) this.players_;
        }


        public int getPlayersCount() {
            return this.players_.size();
        }


        public TeamHandler.AcrossPlayer getPlayers(int index) {
            return this.players_.get(index);
        }


        public TeamHandler.AcrossPlayerOrBuilder getPlayersOrBuilder(int index) {
            return this.players_.get(index);
        }


        private void initFields() {
            this.targetId_ = 0;
            this.difficulty_ = 0;
            this.second_ = 0;
            this.players_ = Collections.emptyList();
        }


        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            }
            if (isInitialized == 0) {
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }


        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) {
                output.writeInt32(1, this.targetId_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                output.writeInt32(2, this.difficulty_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                output.writeInt32(3, this.second_);
            }
            for (int i = 0; i < this.players_.size(); i++) {
                output.writeMessage(4, (MessageLite) this.players_.get(i));
            }
            getUnknownFields().writeTo(output);
        }


        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) {
                return size;
            }
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) {
                size += CodedOutputStream.computeInt32Size(1, this.targetId_);
            }
            if ((this.bitField0_ & 0x2) == 2) {
                size += CodedOutputStream.computeInt32Size(2, this.difficulty_);
            }
            if ((this.bitField0_ & 0x4) == 4) {
                size += CodedOutputStream.computeInt32Size(3, this.second_);
            }
            for (int i = 0; i < this.players_.size(); i++) {
                size += CodedOutputStream.computeMessageSize(4, (MessageLite) this.players_.get(i));
            }
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }


        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }


        public static OnAcrossTeamInfoPush parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (OnAcrossTeamInfoPush) PARSER.parseFrom(data);
        }


        public static OnAcrossTeamInfoPush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OnAcrossTeamInfoPush) PARSER.parseFrom(data, extensionRegistry);
        }


        public static OnAcrossTeamInfoPush parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (OnAcrossTeamInfoPush) PARSER.parseFrom(data);
        }


        public static OnAcrossTeamInfoPush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OnAcrossTeamInfoPush) PARSER.parseFrom(data, extensionRegistry);
        }


        public static OnAcrossTeamInfoPush parseFrom(InputStream input) throws IOException {
            return (OnAcrossTeamInfoPush) PARSER.parseFrom(input);
        }


        public static OnAcrossTeamInfoPush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnAcrossTeamInfoPush) PARSER.parseFrom(input, extensionRegistry);
        }


        public static OnAcrossTeamInfoPush parseDelimitedFrom(InputStream input) throws IOException {
            return (OnAcrossTeamInfoPush) PARSER.parseDelimitedFrom(input);
        }


        public static OnAcrossTeamInfoPush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnAcrossTeamInfoPush) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }


        public static OnAcrossTeamInfoPush parseFrom(CodedInputStream input) throws IOException {
            return (OnAcrossTeamInfoPush) PARSER.parseFrom(input);
        }


        public static OnAcrossTeamInfoPush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnAcrossTeamInfoPush) PARSER.parseFrom(input, extensionRegistry);
        }


        public static Builder newBuilder() {
            return Builder.create();
        }


        public Builder newBuilderForType() {
            return newBuilder();
        }


        public static Builder newBuilder(OnAcrossTeamInfoPush prototype) {
            return newBuilder().mergeFrom(prototype);
        }


        public Builder toBuilder() {
            return newBuilder(this);
        }


        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }


        public static final class Builder
                extends GeneratedMessage.Builder<Builder>
                implements TeamHandler.OnAcrossTeamInfoPushOrBuilder {
            private int bitField0_;

            private int targetId_;

            private int difficulty_;

            private int second_;

            private List<TeamHandler.AcrossPlayer> players_;

            private RepeatedFieldBuilder<TeamHandler.AcrossPlayer, TeamHandler.AcrossPlayer.Builder, TeamHandler.AcrossPlayerOrBuilder> playersBuilder_;


            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_OnAcrossTeamInfoPush_descriptor;
            }


            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_OnAcrossTeamInfoPush_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.OnAcrossTeamInfoPush.class, Builder.class);
            }


            private Builder() {
                this.players_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }


            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.players_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }


            private void maybeForceBuilderInitialization() {
                if (TeamHandler.OnAcrossTeamInfoPush.alwaysUseFieldBuilders) {
                    getPlayersFieldBuilder();
                }
            }


            private static Builder create() {
                return new Builder();
            }


            public Builder clear() {
                super.clear();
                this.targetId_ = 0;
                this.bitField0_ &= 0xFFFFFFFE;
                this.difficulty_ = 0;
                this.bitField0_ &= 0xFFFFFFFD;
                this.second_ = 0;
                this.bitField0_ &= 0xFFFFFFFB;
                if (this.playersBuilder_ == null) {
                    this.players_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFF7;
                } else {
                    this.playersBuilder_.clear();
                }
                return this;
            }


            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }


            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_OnAcrossTeamInfoPush_descriptor;
            }


            public TeamHandler.OnAcrossTeamInfoPush getDefaultInstanceForType() {
                return TeamHandler.OnAcrossTeamInfoPush.getDefaultInstance();
            }


            public TeamHandler.OnAcrossTeamInfoPush build() {
                TeamHandler.OnAcrossTeamInfoPush result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }


            public TeamHandler.OnAcrossTeamInfoPush buildPartial() {
                TeamHandler.OnAcrossTeamInfoPush result = new TeamHandler.OnAcrossTeamInfoPush(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) {
                    to_bitField0_ |= 0x1;
                }
                result.targetId_ = this.targetId_;
                if ((from_bitField0_ & 0x2) == 2) {
                    to_bitField0_ |= 0x2;
                }
                result.difficulty_ = this.difficulty_;
                if ((from_bitField0_ & 0x4) == 4) {
                    to_bitField0_ |= 0x4;
                }
                result.second_ = this.second_;
                if (this.playersBuilder_ == null) {
                    if ((this.bitField0_ & 0x8) == 8) {
                        this.players_ = Collections.unmodifiableList(this.players_);
                        this.bitField0_ &= 0xFFFFFFF7;
                    }
                    result.players_ = this.players_;
                } else {
                    result.players_ = this.playersBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }


            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.OnAcrossTeamInfoPush) {
                    return mergeFrom((TeamHandler.OnAcrossTeamInfoPush) other);
                }
                super.mergeFrom(other);
                return this;
            }


            public Builder mergeFrom(TeamHandler.OnAcrossTeamInfoPush other) {
                if (other == TeamHandler.OnAcrossTeamInfoPush.getDefaultInstance()) {
                    return this;
                }
                if (other.hasTargetId()) {
                    setTargetId(other.getTargetId());
                }
                if (other.hasDifficulty()) {
                    setDifficulty(other.getDifficulty());
                }
                if (other.hasSecond()) {
                    setSecond(other.getSecond());
                }
                if (this.playersBuilder_ == null) {
                    if (!other.players_.isEmpty()) {
                        if (this.players_.isEmpty()) {
                            this.players_ = other.players_;
                            this.bitField0_ &= 0xFFFFFFF7;
                        } else {
                            ensurePlayersIsMutable();
                            this.players_.addAll(other.players_);
                        }
                        onChanged();
                    }
                } else if (!other.players_.isEmpty()) {
                    if (this.playersBuilder_.isEmpty()) {
                        this.playersBuilder_.dispose();
                        this.playersBuilder_ = null;
                        this.players_ = other.players_;
                        this.bitField0_ &= 0xFFFFFFF7;
                        this.playersBuilder_ = TeamHandler.OnAcrossTeamInfoPush.alwaysUseFieldBuilders ? getPlayersFieldBuilder() : null;
                    } else {
                        this.playersBuilder_.addAllMessages(other.players_);
                    }
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }


            public final boolean isInitialized() {
                return true;
            }


            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.OnAcrossTeamInfoPush parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.OnAcrossTeamInfoPush) TeamHandler.OnAcrossTeamInfoPush.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.OnAcrossTeamInfoPush) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }


            public boolean hasTargetId() {
                return ((this.bitField0_ & 0x1) == 1);
            }


            public int getTargetId() {
                return this.targetId_;
            }


            public Builder setTargetId(int value) {
                this.bitField0_ |= 0x1;
                this.targetId_ = value;
                onChanged();
                return this;
            }


            public Builder clearTargetId() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.targetId_ = 0;
                onChanged();
                return this;
            }


            public boolean hasDifficulty() {
                return ((this.bitField0_ & 0x2) == 2);
            }


            public int getDifficulty() {
                return this.difficulty_;
            }


            public Builder setDifficulty(int value) {
                this.bitField0_ |= 0x2;
                this.difficulty_ = value;
                onChanged();
                return this;
            }


            public Builder clearDifficulty() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.difficulty_ = 0;
                onChanged();
                return this;
            }

            public boolean hasSecond() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public int getSecond() {
                return this.second_;
            }

            public Builder setSecond(int value) {
                this.bitField0_ |= 0x4;
                this.second_ = value;
                onChanged();
                return this;
            }

            public Builder clearSecond() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.second_ = 0;
                onChanged();
                return this;
            }

            private void ensurePlayersIsMutable() {
                if ((this.bitField0_ & 0x8) != 8) {
                    this.players_ = new ArrayList<>(this.players_);
                    this.bitField0_ |= 0x8;
                }
            }

            public List<TeamHandler.AcrossPlayer> getPlayersList() {
                if (this.playersBuilder_ == null) {
                    return Collections.unmodifiableList(this.players_);
                }
                return this.playersBuilder_.getMessageList();
            }

            public int getPlayersCount() {
                if (this.playersBuilder_ == null) {
                    return this.players_.size();
                }
                return this.playersBuilder_.getCount();
            }

            public TeamHandler.AcrossPlayer getPlayers(int index) {
                if (this.playersBuilder_ == null) {
                    return this.players_.get(index);
                }
                return (TeamHandler.AcrossPlayer) this.playersBuilder_.getMessage(index);
            }

            public Builder setPlayers(int index, TeamHandler.AcrossPlayer value) {
                if (this.playersBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensurePlayersIsMutable();
                    this.players_.set(index, value);
                    onChanged();
                } else {
                    this.playersBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setPlayers(int index, TeamHandler.AcrossPlayer.Builder builderForValue) {
                if (this.playersBuilder_ == null) {
                    ensurePlayersIsMutable();
                    this.players_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.playersBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addPlayers(TeamHandler.AcrossPlayer value) {
                if (this.playersBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensurePlayersIsMutable();
                    this.players_.add(value);
                    onChanged();
                } else {
                    this.playersBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addPlayers(int index, TeamHandler.AcrossPlayer value) {
                if (this.playersBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensurePlayersIsMutable();
                    this.players_.add(index, value);
                    onChanged();
                } else {
                    this.playersBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addPlayers(TeamHandler.AcrossPlayer.Builder builderForValue) {
                if (this.playersBuilder_ == null) {
                    ensurePlayersIsMutable();
                    this.players_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.playersBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addPlayers(int index, TeamHandler.AcrossPlayer.Builder builderForValue) {
                if (this.playersBuilder_ == null) {
                    ensurePlayersIsMutable();
                    this.players_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.playersBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllPlayers(Iterable<? extends TeamHandler.AcrossPlayer> values) {
                if (this.playersBuilder_ == null) {
                    ensurePlayersIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.players_);
                    onChanged();
                } else {
                    this.playersBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearPlayers() {
                if (this.playersBuilder_ == null) {
                    this.players_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFF7;
                    onChanged();
                } else {
                    this.playersBuilder_.clear();
                }
                return this;
            }

            public Builder removePlayers(int index) {
                if (this.playersBuilder_ == null) {
                    ensurePlayersIsMutable();
                    this.players_.remove(index);
                    onChanged();
                } else {
                    this.playersBuilder_.remove(index);
                }
                return this;
            }

            public TeamHandler.AcrossPlayer.Builder getPlayersBuilder(int index) {
                return (TeamHandler.AcrossPlayer.Builder) getPlayersFieldBuilder().getBuilder(index);
            }

            public TeamHandler.AcrossPlayerOrBuilder getPlayersOrBuilder(int index) {
                if (this.playersBuilder_ == null) {
                    return this.players_.get(index);
                }
                return (TeamHandler.AcrossPlayerOrBuilder) this.playersBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends TeamHandler.AcrossPlayerOrBuilder> getPlayersOrBuilderList() {
                if (this.playersBuilder_ != null) {
                    return this.playersBuilder_.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList((List) this.players_);
            }

            public TeamHandler.AcrossPlayer.Builder addPlayersBuilder() {
                return (TeamHandler.AcrossPlayer.Builder) getPlayersFieldBuilder().addBuilder(TeamHandler.AcrossPlayer.getDefaultInstance());
            }

            public TeamHandler.AcrossPlayer.Builder addPlayersBuilder(int index) {
                return (TeamHandler.AcrossPlayer.Builder) getPlayersFieldBuilder().addBuilder(index, TeamHandler.AcrossPlayer.getDefaultInstance());
            }

            public List<TeamHandler.AcrossPlayer.Builder> getPlayersBuilderList() {
                return getPlayersFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<TeamHandler.AcrossPlayer, TeamHandler.AcrossPlayer.Builder, TeamHandler.AcrossPlayerOrBuilder> getPlayersFieldBuilder() {
                if (this.playersBuilder_ == null) {
                    this.playersBuilder_ = new RepeatedFieldBuilder(this.players_, ((this.bitField0_ & 0x8) == 8), getParentForChildren(), isClean());
                    this.players_ = null;
                }
                return this.playersBuilder_;
            }
        }
    }

    public static final class MumberHurtInfo
            extends GeneratedMessage
            implements MumberHurtInfoOrBuilder {
        private static final MumberHurtInfo defaultInstance = new MumberHurtInfo(true);
        private final UnknownFieldSet unknownFields;

        private MumberHurtInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private MumberHurtInfo(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static MumberHurtInfo getDefaultInstance() {
            return defaultInstance;
        }

        public MumberHurtInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private MumberHurtInfo(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    ByteString bs;
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            bs = input.readBytes();
                            this.bitField0_ |= 0x1;
                            this.playerName_ = bs;
                            break;
                        case 16:
                            this.bitField0_ |= 0x2;
                            this.hurt_ = input.readInt64();
                            break;
                        case 24:
                            this.bitField0_ |= 0x4;
                            this.cure_ = input.readInt64();
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_MumberHurtInfo_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_MumberHurtInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(MumberHurtInfo.class, Builder.class);
        }

        public static Parser<MumberHurtInfo> PARSER = (Parser<MumberHurtInfo>) new AbstractParser<MumberHurtInfo>() {
            public TeamHandler.MumberHurtInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.MumberHurtInfo(input, extensionRegistry);
            }
        };
        private int bitField0_;
        public static final int PLAYERNAME_FIELD_NUMBER = 1;
        private Object playerName_;
        public static final int HURT_FIELD_NUMBER = 2;
        private long hurt_;
        public static final int CURE_FIELD_NUMBER = 3;
        private long cure_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<MumberHurtInfo> getParserForType() {
            return PARSER;
        }

        public boolean hasPlayerName() {
            return ((this.bitField0_ & 0x1) == 1);
        }

        public String getPlayerName() {
            Object ref = this.playerName_;
            if (ref instanceof String) return (String) ref;
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) this.playerName_ = s;
            return s;
        }

        public ByteString getPlayerNameBytes() {
            Object ref = this.playerName_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                this.playerName_ = b;
                return b;
            }
            return (ByteString) ref;
        }

        public boolean hasHurt() {
            return ((this.bitField0_ & 0x2) == 2);
        }

        public long getHurt() {
            return this.hurt_;
        }

        public boolean hasCure() {
            return ((this.bitField0_ & 0x4) == 4);
        }

        public long getCure() {
            return this.cure_;
        }

        private void initFields() {
            this.playerName_ = "";
            this.hurt_ = 0L;
            this.cure_ = 0L;
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 0x1) == 1) output.writeBytes(1, getPlayerNameBytes());
            if ((this.bitField0_ & 0x2) == 2) output.writeInt64(2, this.hurt_);
            if ((this.bitField0_ & 0x4) == 4) output.writeInt64(3, this.cure_);
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1) return size;
            size = 0;
            if ((this.bitField0_ & 0x1) == 1) size += CodedOutputStream.computeBytesSize(1, getPlayerNameBytes());
            if ((this.bitField0_ & 0x2) == 2) size += CodedOutputStream.computeInt64Size(2, this.hurt_);
            if ((this.bitField0_ & 0x4) == 4) size += CodedOutputStream.computeInt64Size(3, this.cure_);
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static MumberHurtInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (MumberHurtInfo) PARSER.parseFrom(data);
        }

        public static MumberHurtInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (MumberHurtInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static MumberHurtInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (MumberHurtInfo) PARSER.parseFrom(data);
        }

        public static MumberHurtInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (MumberHurtInfo) PARSER.parseFrom(data, extensionRegistry);
        }

        public static MumberHurtInfo parseFrom(InputStream input) throws IOException {
            return (MumberHurtInfo) PARSER.parseFrom(input);
        }

        public static MumberHurtInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (MumberHurtInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static MumberHurtInfo parseDelimitedFrom(InputStream input) throws IOException {
            return (MumberHurtInfo) PARSER.parseDelimitedFrom(input);
        }

        public static MumberHurtInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (MumberHurtInfo) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static MumberHurtInfo parseFrom(CodedInputStream input) throws IOException {
            return (MumberHurtInfo) PARSER.parseFrom(input);
        }

        public static MumberHurtInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (MumberHurtInfo) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(MumberHurtInfo prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.MumberHurtInfoOrBuilder {
            private int bitField0_;
            private Object playerName_;
            private long hurt_;
            private long cure_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_MumberHurtInfo_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_MumberHurtInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.MumberHurtInfo.class, Builder.class);
            }

            private Builder() {
                this.playerName_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.playerName_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.MumberHurtInfo.alwaysUseFieldBuilders) ;
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.playerName_ = "";
                this.bitField0_ &= 0xFFFFFFFE;
                this.hurt_ = 0L;
                this.bitField0_ &= 0xFFFFFFFD;
                this.cure_ = 0L;
                this.bitField0_ &= 0xFFFFFFFB;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_MumberHurtInfo_descriptor;
            }

            public TeamHandler.MumberHurtInfo getDefaultInstanceForType() {
                return TeamHandler.MumberHurtInfo.getDefaultInstance();
            }

            public TeamHandler.MumberHurtInfo build() {
                TeamHandler.MumberHurtInfo result = buildPartial();
                if (!result.isInitialized()) throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.MumberHurtInfo buildPartial() {
                TeamHandler.MumberHurtInfo result = new TeamHandler.MumberHurtInfo(this);
                int from_bitField0_ = this.bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 0x1) == 1) to_bitField0_ |= 0x1;
                result.playerName_ = this.playerName_;
                if ((from_bitField0_ & 0x2) == 2) to_bitField0_ |= 0x2;
                result.hurt_ = this.hurt_;
                if ((from_bitField0_ & 0x4) == 4) to_bitField0_ |= 0x4;
                result.cure_ = this.cure_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.MumberHurtInfo) return mergeFrom((TeamHandler.MumberHurtInfo) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.MumberHurtInfo other) {
                if (other == TeamHandler.MumberHurtInfo.getDefaultInstance()) return this;
                if (other.hasPlayerName()) {
                    this.bitField0_ |= 0x1;
                    this.playerName_ = other.playerName_;
                    onChanged();
                }
                if (other.hasHurt()) setHurt(other.getHurt());
                if (other.hasCure()) setCure(other.getCure());
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.MumberHurtInfo parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.MumberHurtInfo) TeamHandler.MumberHurtInfo.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.MumberHurtInfo) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) mergeFrom(parsedMessage);
                }
                return this;
            }

            public boolean hasPlayerName() {
                return ((this.bitField0_ & 0x1) == 1);
            }

            public String getPlayerName() {
                Object ref = this.playerName_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) this.playerName_ = s;
                    return s;
                }
                return (String) ref;
            }

            public ByteString getPlayerNameBytes() {
                Object ref = this.playerName_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    this.playerName_ = b;
                    return b;
                }
                return (ByteString) ref;
            }

            public Builder setPlayerName(String value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.playerName_ = value;
                onChanged();
                return this;
            }

            public Builder clearPlayerName() {
                this.bitField0_ &= 0xFFFFFFFE;
                this.playerName_ = TeamHandler.MumberHurtInfo.getDefaultInstance().getPlayerName();
                onChanged();
                return this;
            }

            public Builder setPlayerNameBytes(ByteString value) {
                if (value == null) throw new NullPointerException();
                this.bitField0_ |= 0x1;
                this.playerName_ = value;
                onChanged();
                return this;
            }

            public boolean hasHurt() {
                return ((this.bitField0_ & 0x2) == 2);
            }

            public long getHurt() {
                return this.hurt_;
            }

            public Builder setHurt(long value) {
                this.bitField0_ |= 0x2;
                this.hurt_ = value;
                onChanged();
                return this;
            }

            public Builder clearHurt() {
                this.bitField0_ &= 0xFFFFFFFD;
                this.hurt_ = 0L;
                onChanged();
                return this;
            }

            public boolean hasCure() {
                return ((this.bitField0_ & 0x4) == 4);
            }

            public long getCure() {
                return this.cure_;
            }

            public Builder setCure(long value) {
                this.bitField0_ |= 0x4;
                this.cure_ = value;
                onChanged();
                return this;
            }

            public Builder clearCure() {
                this.bitField0_ &= 0xFFFFFFFB;
                this.cure_ = 0L;
                onChanged();
                return this;
            }
        }

        static {
            defaultInstance.initFields();
        }

    }


    public static final class OnTeamMumberHurtPush
            extends GeneratedMessage
            implements OnTeamMumberHurtPushOrBuilder {
        private static final OnTeamMumberHurtPush defaultInstance = new OnTeamMumberHurtPush(true);
        private final UnknownFieldSet unknownFields;

        private OnTeamMumberHurtPush(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private OnTeamMumberHurtPush(boolean noInit) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static OnTeamMumberHurtPush getDefaultInstance() {
            return defaultInstance;
        }

        public OnTeamMumberHurtPush getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private OnTeamMumberHurtPush(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10:
                            if ((mutable_bitField0_ & 0x1) != 1) {
                                this.players_ = new ArrayList<>();
                                mutable_bitField0_ |= 0x1;
                            }
                            this.players_.add(input.readMessage(TeamHandler.MumberHurtInfo.PARSER, extensionRegistry));
                            break;
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw (new InvalidProtocolBufferException(e.getMessage())).setUnfinishedMessage(this);
            } finally {
                if ((mutable_bitField0_ & 0x1) == 1) this.players_ = Collections.unmodifiableList(this.players_);
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TeamHandler.internal_static_pomelo_area_OnTeamMumberHurtPush_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TeamHandler.internal_static_pomelo_area_OnTeamMumberHurtPush_fieldAccessorTable.ensureFieldAccessorsInitialized(OnTeamMumberHurtPush.class, Builder.class);
        }

        public static Parser<OnTeamMumberHurtPush> PARSER = (Parser<OnTeamMumberHurtPush>) new AbstractParser<OnTeamMumberHurtPush>() {
            public TeamHandler.OnTeamMumberHurtPush parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new TeamHandler.OnTeamMumberHurtPush(input, extensionRegistry);
            }
        };
        public static final int PLAYERS_FIELD_NUMBER = 1;
        private List<TeamHandler.MumberHurtInfo> players_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private static final long serialVersionUID = 0L;

        public Parser<OnTeamMumberHurtPush> getParserForType() {
            return PARSER;
        }

        public List<TeamHandler.MumberHurtInfo> getPlayersList() {
            return this.players_;
        }

        public List<? extends TeamHandler.MumberHurtInfoOrBuilder> getPlayersOrBuilderList() {
            return (List) this.players_;
        }

        public int getPlayersCount() {
            return this.players_.size();
        }

        public TeamHandler.MumberHurtInfo getPlayers(int index) {
            return this.players_.get(index);
        }

        public TeamHandler.MumberHurtInfoOrBuilder getPlayersOrBuilder(int index) {
            return this.players_.get(index);
        }

        static {
            defaultInstance.initFields();
        }

        private void initFields() {
            this.players_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            for (int i = 0; i < this.players_.size(); i++)
                output.writeMessage(1, (MessageLite) this.players_.get(i));
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSerializedSize;
            if (size != -1)
                return size;
            size = 0;
            for (int i = 0; i < this.players_.size(); i++)
                size += CodedOutputStream.computeMessageSize(1, (MessageLite) this.players_.get(i));
            size += getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static OnTeamMumberHurtPush parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (OnTeamMumberHurtPush) PARSER.parseFrom(data);
        }

        public static OnTeamMumberHurtPush parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OnTeamMumberHurtPush) PARSER.parseFrom(data, extensionRegistry);
        }

        public static OnTeamMumberHurtPush parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (OnTeamMumberHurtPush) PARSER.parseFrom(data);
        }

        public static OnTeamMumberHurtPush parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OnTeamMumberHurtPush) PARSER.parseFrom(data, extensionRegistry);
        }

        public static OnTeamMumberHurtPush parseFrom(InputStream input) throws IOException {
            return (OnTeamMumberHurtPush) PARSER.parseFrom(input);
        }

        public static OnTeamMumberHurtPush parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnTeamMumberHurtPush) PARSER.parseFrom(input, extensionRegistry);
        }

        public static OnTeamMumberHurtPush parseDelimitedFrom(InputStream input) throws IOException {
            return (OnTeamMumberHurtPush) PARSER.parseDelimitedFrom(input);
        }

        public static OnTeamMumberHurtPush parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnTeamMumberHurtPush) PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static OnTeamMumberHurtPush parseFrom(CodedInputStream input) throws IOException {
            return (OnTeamMumberHurtPush) PARSER.parseFrom(input);
        }

        public static OnTeamMumberHurtPush parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OnTeamMumberHurtPush) PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(OnTeamMumberHurtPush prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TeamHandler.OnTeamMumberHurtPushOrBuilder {
            private int bitField0_;
            private List<TeamHandler.MumberHurtInfo> players_;
            private RepeatedFieldBuilder<TeamHandler.MumberHurtInfo, TeamHandler.MumberHurtInfo.Builder, TeamHandler.MumberHurtInfoOrBuilder> playersBuilder_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TeamHandler.internal_static_pomelo_area_OnTeamMumberHurtPush_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TeamHandler.internal_static_pomelo_area_OnTeamMumberHurtPush_fieldAccessorTable.ensureFieldAccessorsInitialized(TeamHandler.OnTeamMumberHurtPush.class, Builder.class);
            }

            private Builder() {
                this.players_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                this.players_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TeamHandler.OnTeamMumberHurtPush.alwaysUseFieldBuilders)
                    getPlayersFieldBuilder();
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                if (this.playersBuilder_ == null) {
                    this.players_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFE;
                } else {
                    this.playersBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return TeamHandler.internal_static_pomelo_area_OnTeamMumberHurtPush_descriptor;
            }

            public TeamHandler.OnTeamMumberHurtPush getDefaultInstanceForType() {
                return TeamHandler.OnTeamMumberHurtPush.getDefaultInstance();
            }

            public TeamHandler.OnTeamMumberHurtPush build() {
                TeamHandler.OnTeamMumberHurtPush result = buildPartial();
                if (!result.isInitialized())
                    throw newUninitializedMessageException(result);
                return result;
            }

            public TeamHandler.OnTeamMumberHurtPush buildPartial() {
                TeamHandler.OnTeamMumberHurtPush result = new TeamHandler.OnTeamMumberHurtPush(this);
                int from_bitField0_ = this.bitField0_;
                if (this.playersBuilder_ == null) {
                    if ((this.bitField0_ & 0x1) == 1) {
                        this.players_ = Collections.unmodifiableList(this.players_);
                        this.bitField0_ &= 0xFFFFFFFE;
                    }
                    result.players_ = this.players_;
                } else {
                    result.players_ = this.playersBuilder_.build();
                }
                onBuilt();
                return result;
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof TeamHandler.OnTeamMumberHurtPush)
                    return mergeFrom((TeamHandler.OnTeamMumberHurtPush) other);
                super.mergeFrom(other);
                return this;
            }

            public Builder mergeFrom(TeamHandler.OnTeamMumberHurtPush other) {
                if (other == TeamHandler.OnTeamMumberHurtPush.getDefaultInstance())
                    return this;
                if (this.playersBuilder_ == null) {
                    if (!other.players_.isEmpty()) {
                        if (this.players_.isEmpty()) {
                            this.players_ = other.players_;
                            this.bitField0_ &= 0xFFFFFFFE;
                        } else {
                            ensurePlayersIsMutable();
                            this.players_.addAll(other.players_);
                        }
                        onChanged();
                    }
                } else if (!other.players_.isEmpty()) {
                    if (this.playersBuilder_.isEmpty()) {
                        this.playersBuilder_.dispose();
                        this.playersBuilder_ = null;
                        this.players_ = other.players_;
                        this.bitField0_ &= 0xFFFFFFFE;
                        this.playersBuilder_ = TeamHandler.OnTeamMumberHurtPush.alwaysUseFieldBuilders ? getPlayersFieldBuilder() : null;
                    } else {
                        this.playersBuilder_.addAllMessages(other.players_);
                    }
                }
                mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                TeamHandler.OnTeamMumberHurtPush parsedMessage = null;
                try {
                    parsedMessage = (TeamHandler.OnTeamMumberHurtPush) TeamHandler.OnTeamMumberHurtPush.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (TeamHandler.OnTeamMumberHurtPush) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null)
                        mergeFrom(parsedMessage);
                }
                return this;
            }

            private void ensurePlayersIsMutable() {
                if ((this.bitField0_ & 0x1) != 1) {
                    this.players_ = new ArrayList<>(this.players_);
                    this.bitField0_ |= 0x1;
                }
            }

            public List<TeamHandler.MumberHurtInfo> getPlayersList() {
                if (this.playersBuilder_ == null)
                    return Collections.unmodifiableList(this.players_);
                return this.playersBuilder_.getMessageList();
            }

            public int getPlayersCount() {
                if (this.playersBuilder_ == null)
                    return this.players_.size();
                return this.playersBuilder_.getCount();
            }

            public TeamHandler.MumberHurtInfo getPlayers(int index) {
                if (this.playersBuilder_ == null)
                    return this.players_.get(index);
                return (TeamHandler.MumberHurtInfo) this.playersBuilder_.getMessage(index);
            }

            public Builder setPlayers(int index, TeamHandler.MumberHurtInfo value) {
                if (this.playersBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensurePlayersIsMutable();
                    this.players_.set(index, value);
                    onChanged();
                } else {
                    this.playersBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setPlayers(int index, TeamHandler.MumberHurtInfo.Builder builderForValue) {
                if (this.playersBuilder_ == null) {
                    ensurePlayersIsMutable();
                    this.players_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    this.playersBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addPlayers(TeamHandler.MumberHurtInfo value) {
                if (this.playersBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensurePlayersIsMutable();
                    this.players_.add(value);
                    onChanged();
                } else {
                    this.playersBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addPlayers(int index, TeamHandler.MumberHurtInfo value) {
                if (this.playersBuilder_ == null) {
                    if (value == null)
                        throw new NullPointerException();
                    ensurePlayersIsMutable();
                    this.players_.add(index, value);
                    onChanged();
                } else {
                    this.playersBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addPlayers(TeamHandler.MumberHurtInfo.Builder builderForValue) {
                if (this.playersBuilder_ == null) {
                    ensurePlayersIsMutable();
                    this.players_.add(builderForValue.build());
                    onChanged();
                } else {
                    this.playersBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addPlayers(int index, TeamHandler.MumberHurtInfo.Builder builderForValue) {
                if (this.playersBuilder_ == null) {
                    ensurePlayersIsMutable();
                    this.players_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    this.playersBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllPlayers(Iterable<? extends TeamHandler.MumberHurtInfo> values) {
                if (this.playersBuilder_ == null) {
                    ensurePlayersIsMutable();
                    AbstractMessageLite.Builder.addAll(values, this.players_);
                    onChanged();
                } else {
                    this.playersBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearPlayers() {
                if (this.playersBuilder_ == null) {
                    this.players_ = Collections.emptyList();
                    this.bitField0_ &= 0xFFFFFFFE;
                    onChanged();
                } else {
                    this.playersBuilder_.clear();
                }
                return this;
            }

            public Builder removePlayers(int index) {
                if (this.playersBuilder_ == null) {
                    ensurePlayersIsMutable();
                    this.players_.remove(index);
                    onChanged();
                } else {
                    this.playersBuilder_.remove(index);
                }
                return this;
            }

            public TeamHandler.MumberHurtInfo.Builder getPlayersBuilder(int index) {
                return (TeamHandler.MumberHurtInfo.Builder) getPlayersFieldBuilder().getBuilder(index);
            }

            public TeamHandler.MumberHurtInfoOrBuilder getPlayersOrBuilder(int index) {
                if (this.playersBuilder_ == null)
                    return this.players_.get(index);
                return (TeamHandler.MumberHurtInfoOrBuilder) this.playersBuilder_.getMessageOrBuilder(index);
            }

            public List<? extends TeamHandler.MumberHurtInfoOrBuilder> getPlayersOrBuilderList() {
                if (this.playersBuilder_ != null)
                    return this.playersBuilder_.getMessageOrBuilderList();
                return Collections.unmodifiableList((List) this.players_);
            }

            public TeamHandler.MumberHurtInfo.Builder addPlayersBuilder() {
                return (TeamHandler.MumberHurtInfo.Builder) getPlayersFieldBuilder().addBuilder(TeamHandler.MumberHurtInfo.getDefaultInstance());
            }

            public TeamHandler.MumberHurtInfo.Builder addPlayersBuilder(int index) {
                return (TeamHandler.MumberHurtInfo.Builder) getPlayersFieldBuilder().addBuilder(index, TeamHandler.MumberHurtInfo.getDefaultInstance());
            }

            public List<TeamHandler.MumberHurtInfo.Builder> getPlayersBuilderList() {
                return getPlayersFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<TeamHandler.MumberHurtInfo, TeamHandler.MumberHurtInfo.Builder, TeamHandler.MumberHurtInfoOrBuilder> getPlayersFieldBuilder() {
                if (this.playersBuilder_ == null) {
                    this.playersBuilder_ = new RepeatedFieldBuilder(this.players_, ((this.bitField0_ & 0x1) == 1), getParentForChildren(), isClean());
                    this.players_ = null;
                }
                return this.playersBuilder_;
            }
        }
    }

    public static Descriptors.FileDescriptor getDescriptor() {
        return descriptor;
    }


    static {
        String[] descriptorData = {"\n\021teamHandler.proto\022\013pomelo.area\032\fcommon.proto\"\n\nTeamTarget\022\020\n\btargetId\030\001 \002(\005\022\022\n\ndifficulty\030\002 \002(\005\022\020\n\bminLevel\030\003 \002(\005\022\020\n\bmaxLevel\030\004 \002(\005\022\022\n\nisAutoTeam\030\006 \002(\005\022\023\n\013isAutoStart\030\007 \002(\005\"k\n\017TeamMemberBasic\022\n\n\002id\030\001 \002(\t\022\013\n\003pro\030\002 \002(\005\022\f\n\004name\030\003 \002(\t\022\r\n\005level\030\004 \002(\005\022\017\n\007upLevel\030\005 \002(\005\022\021\n\tguildName\030\006 \002(\t\"\001\n\nTeamMember\022\n\n\002id\030\001 \002(\t\022\013\n\003pro\030\002 \001(\005\022\f\n\004name\030\003 \001(\t\022\r\n\005level\030\004 \001(\005\022\020\n\bisLeader\030\005 \001(\005\022\016\n\006status\030\006 \001(\005\022\016\n\006areaId\030\007 ", "\001(\005\022\016\n\006follow\030\b \001(\005\"ä\001\n\020TeamMemberDetail\022\n\n\002id\030\001 \002(\t\022\013\n\003pro\030\002 \001(\005\022\f\n\004name\030\003 \001(\t\022\r\n\005level\030\004 \001(\005\022\020\n\bisLeader\030\005 \001(\005\022\037\n\007avatars\030\006 \003(\0132\016.pomelo.Avatar\022\022\n\nfightPower\030\007 \002(\005\022\016\n\006status\030\b \001(\005\022\017\n\007areaDes\030\t \001(\t\022\017\n\007upLevel\030\n \001(\005\022\016\n\006follow\030\013 \001(\005\022\021\n\tguildName\030\f \001(\t\"´\001\n\004Team\022\n\n\002id\030\001 \002(\t\022\020\n\bleaderId\030\002 \001(\t\022\021\n\tisApplied\030\003 \001(\005\0221\n\013teamMembers\030\004 \003(\0132\034.pomelo.area.TeamMemberBasic\022\020\n\bminLevel\030\005 \002(\005\022\020\n\bmaxLevel\030\006 \002(\005\022\020\n\bt", "argetId\030\007 \001(\005\022\022\n\nisFighting\030\b \001(\b\"u\n\006Player\022\n\n\002id\030\001 \002(\t\022\013\n\003pro\030\002 \001(\005\022\f\n\004name\030\003 \001(\t\022\r\n\005level\030\004 \001(\005\022\017\n\007upLevel\030\005 \001(\005\022\021\n\tguildName\030\006 \002(\t\022\021\n\tisInvited\030\007 \001(\005\"\n\020OnTeamUpdatePush\022\034\n\024s2c_isAcceptAutoTeam\030\001 \001(\005\022\022\n\ns2c_teamId\030\002 \002(\t\022)\n\bs2c_data\030\003 \003(\0132\027.pomelo.area.TeamMember\022\016\n\006follow\030\004 \001(\005\"C\n\026OnTeamMemberUpdatePush\022)\n\bs2c_data\030\002 \002(\0132\027.pomelo.area.TeamMember\"\027\n\025GetTeamMembersRequest\"\002\n\026GetTeamMembersRespon", "se\022\020\n\bs2c_code\030\001 \002(\005\022\034\n\024s2c_isAcceptAutoTeam\030\002 \001(\005\0226\n\017s2c_teamMembers\030\005 \003(\0132\035.pomelo.area.TeamMemberDetail\022/\n\016s2c_teamTarget\030\006 \001(\0132\027.pomelo.area.TeamTarget\022\017\n\007s2c_msg\030\007 \001(\t\022\016\n\006follow\030\b \001(\005\022\021\n\thaveApply\030\t \001(\005\022\017\n\007expBuff\030\n \001(\005\022\020\n\bgoldBuff\030\013 \001(\005\"\031\n\027GetNearbyPlayersRequest\"\001\n\030GetNearbyPlayersResponse\022\020\n\bs2c_code\030\001 \002(\005\022(\n\013s2c_players\030\002 \003(\0132\023.pomelo.area.Player\022\024\n\fs2c_nowCount\030\003 \001(\005\022\024\n\fs2c_maxCount\030\004 \001", "(\005\022\017\n\007s2c_msg\030\005 \001(\t\"J\n\016NearTeamLeader\022\f\n\004name\030\001 \001(\t\022\n\n\002lv\030\002 \001(\005\022\013\n\003pro\030\003 \001(\005\022\021\n\tguildName\030\004 \001(\t\")\n\016NearTeamMember\022\013\n\003pro\030\001 \001(\005\022\n\n\002lv\030\002 \001(\005\"\001\n\bNearTeam\022\016\n\006teamId\030\001 \001(\t\022+\n\006leader\030\002 \001(\0132\033.pomelo.area.NearTeamLeader\022,\n\007members\030\003 \003(\0132\033.pomelo.area.NearTeamMember\022\r\n\005apply\030\004 \001(\005\"\025\n\023GetNearTeamsRequest\"_\n\024GetNearTeamsResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\022$\n\005teams\030\003 \003(\0132\025.pomelo.area.NearTeam\"*\n\022Kic", "kOutTeamRequest\022\024\n\fc2s_playerId\030\001 \002(\t\"8\n\023KickOutTeamResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"\022\n\020LeaveTeamRequest\"6\n\021LeaveTeamResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"/\n\027ChangeTeamLeaderRequest\022\024\n\fc2s_playerId\030\001 \002(\t\"=\n\030ChangeTeamLeaderResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"0\n\030SetAutoAcceptTeamRequest\022\024\n\fc2s_isAccept\030\001 \002(\005\"\\\n\031SetAutoAcceptTeamResponse\022\020\n\bs2c_code\030\001 \002(\005\022\034\n\024s2c_isAcceptAuto", "Team\030\002 \001(\005\022\017\n\007s2c_msg\030\003 \001(\t\"\023\n\021CancelAutoRequest\"7\n\022CancelAutoResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"'\n\017FormTeamRequest\022\024\n\fc2s_playerId\030\001 \002(\t\"5\n\020FormTeamResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"\023\n\021CreateTeamRequest\"7\n\022CreateTeamResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"H\n\030QueryTeamByTargetRequest\022\024\n\fc2s_targetId\030\001 \002(\005\022\026\n\016c2s_difficulty\030\002 \002(\005\"d\n\031QueryTeamByTargetResponse\022\020\n\bs2c_code\030\001 \002(\005", "\022$\n\ts2c_teams\030\002 \003(\0132\021.pomelo.area.Team\022\017\n\007s2c_msg\030\003 \001(\t\"¡\001\n\024SetTeamTargetRequest\022\024\n\fc2s_targetId\030\001 \002(\005\022\026\n\016c2s_difficulty\030\002 \002(\005\022\024\n\fc2s_minLevel\030\003 \002(\005\022\024\n\fc2s_maxLevel\030\004 \002(\005\022\026\n\016c2s_isAutoTeam\030\006 \002(\005\022\027\n\017c2s_isAutoStart\030\007 \002(\005\":\n\025SetTeamTargetResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"+\n\027GetPlayersByTypeRequest\022\020\n\bc2s_type\030\001 \002(\005\"g\n\030GetPlayersByTypeResponse\022\020\n\bs2c_code\030\001 \002(\005\022(\n\013s2c_players\030\002 \003(\0132\023.pomelo", ".area.Player\022\017\n\007s2c_msg\030\003 \001(\t\"\032\n\030GetAppliedPlayersRequest\"q\n\031GetAppliedPlayersResponse\022\020\n\bs2c_code\030\001 \002(\005\0221\n\013s2c_players\030\002 \003(\0132\034.pomelo.area.TeamMemberBasic\022\017\n\007s2c_msg\030\003 \001(\t\"%\n\017JoinTeamRequest\022\022\n\nc2s_teamId\030\001 \002(\t\"5\n\020JoinTeamResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"C\n\023AutoJoinTeamRequest\022\024\n\fc2s_targetId\030\001 \002(\005\022\026\n\016c2s_difficulty\030\002 \002(\005\"9\n\024AutoJoinTeamResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\")\n\rSu", "mmonRequest\022\030\n\020c2s_teamMemberId\030\001 \002(\t\"3\n\016SummonResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\";\n\024SummonConfirmRequest\022\016\n\006c2s_id\030\001 \002(\t\022\023\n\013s2c_operate\030\002 \002(\005\":\n\025SummonConfirmResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"7\n\020OnSummonTeamPush\022\016\n\006s2c_id\030\002 \002(\t\022\023\n\013s2c_content\030\003 \002(\t\"=\n\025GotoTeamTargetRequest\022\020\n\btargetId\030\001 \001(\005\022\022\n\ndifficulty\030\002 \001(\005\";\n\026GotoTeamTargetResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\":\n\022Acro", "ssMatchRequest\022\020\n\btargetId\030\001 \001(\005\022\022\n\ndifficulty\030\002 \001(\005\"8\n\023AcrossMatchResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"\031\n\027LeaveAcrossMatchRequest\"=\n\030LeaveAcrossMatchResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"%\n\023FollowLeaderRequest\022\016\n\006follow\030\001 \002(\005\"9\n\024FollowLeaderResponse\022\020\n\bs2c_code\030\001 \002(\005\022\017\n\007s2c_msg\030\002 \001(\t\"t\n\020OnTeamTargetPush\022\034\n\024s2c_isAcceptAutoTeam\030\001 \001(\005\022/\n\016s2c_teamTarget\030\002 \001(\0132\027.pomelo.area.TeamTarget\022\021\n", "\thaveApply\030\003 \001(\005\"8\n\fAcrossPlayer\022\013\n\003pro\030\001 \001(\005\022\f\n\004name\030\002 \001(\t\022\r\n\005level\030\003 \001(\005\"x\n\024OnAcrossTeamInfoPush\022\020\n\btargetId\030\001 \001(\005\022\022\n\ndifficulty\030\002 \001(\005\022\016\n\006second\030\003 \001(\005\022*\n\007players\030\004 \003(\0132\031.pomelo.area.AcrossPlayer\"@\n\016MumberHurtInfo\022\022\n\nplayerName\030\001 \001(\t\022\f\n\004hurt\030\002 \001(\003\022\f\n\004cure\030\003 \001(\003\"D\n\024OnTeamMumberHurtPush\022,\n\007players\030\001 \003(\0132\033.pomelo.area.MumberHurtInfo2\020\n\013teamHandler\022`\n\025gotoTeamTargetRequest\022\".pomelo.area.GotoTeamTarg", "etRequest\032#.pomelo.area.GotoTeamTargetResponse\022H\n\rsummonRequest\022\032.pomelo.area.SummonRequest\032\033.pomelo.area.SummonResponse\022]\n\024summonConfirmRequest\022!.pomelo.area.SummonConfirmRequest\032\".pomelo.area.SummonConfirmResponse\022Z\n\023autoJoinTeamRequest\022 .pomelo.area.AutoJoinTeamRequest\032!.pomelo.area.AutoJoinTeamResponse\022N\n\017joinTeamRequest\022\034.pomelo.area.JoinTeamRequest\032\035.pomelo.area.JoinTeamResponse\022i\n\030getApplie", "dPlayersRequest\022%.pomelo.area.GetAppliedPlayersRequest\032&.pomelo.area.GetAppliedPlayersResponse\022f\n\027getPlayersByTypeRequest\022$.pomelo.area.GetPlayersByTypeRequest\032%.pomelo.area.GetPlayersByTypeResponse\022i\n\030queryTeamByTargetRequest\022%.pomelo.area.QueryTeamByTargetRequest\032&.pomelo.area.QueryTeamByTargetResponse\022]\n\024setTeamTargetRequest\022!.pomelo.area.SetTeamTargetRequest\032\".pomelo.area.SetTeamTargetResponse", "\022T\n\021createTeamRequest\022\036.pomelo.area.CreateTeamRequest\032\037.pomelo.area.CreateTeamResponse\022Z\n\023followLeaderRequest\022 .pomelo.area.FollowLeaderRequest\032!.pomelo.area.FollowLeaderResponse\022N\n\017formTeamRequest\022\034.pomelo.area.FormTeamRequest\032\035.pomelo.area.FormTeamResponse\022`\n\025getTeamMembersRequest\022\".pomelo.area.GetTeamMembersRequest\032#.pomelo.area.GetTeamMembersResponse\022f\n\027getNearbyPlayersRequest\022$.pomelo.area.Ge", "tNearbyPlayersRequest\032%.pomelo.area.GetNearbyPlayersResponse\022Z\n\023getNearTeamsRequest\022 .pomelo.area.GetNearTeamsRequest\032!.pomelo.area.GetNearTeamsResponse\022f\n\027changeTeamLeaderRequest\022$.pomelo.area.ChangeTeamLeaderRequest\032%.pomelo.area.ChangeTeamLeaderResponse\022W\n\022kickOutTeamRequest\022\037.pomelo.area.KickOutTeamRequest\032 .pomelo.area.KickOutTeamResponse\022Q\n\020leaveTeamRequest\022\035.pomelo.area.LeaveTeamRequest\032\036.p", "omelo.area.LeaveTeamResponse\022i\n\030setAutoAcceptTeamRequest\022%.pomelo.area.SetAutoAcceptTeamRequest\032&.pomelo.area.SetAutoAcceptTeamResponse\022T\n\021cancelAutoRequest\022\036.pomelo.area.CancelAutoRequest\032\037.pomelo.area.CancelAutoResponse\022W\n\022acrossMatchRequest\022\037.pomelo.area.AcrossMatchRequest\032 .pomelo.area.AcrossMatchResponse\022f\n\027leaveAcrossMatchRequest\022$.pomelo.area.LeaveAcrossMatchRequest\032%.pomelo.area.LeaveAcros", "sMatchResponse2¬\003\n\bteamPush\022?\n\020onSummonTeamPush\022\035.pomelo.area.OnSummonTeamPush\032\f.pomelo.Void\022?\n\020onTeamUpdatePush\022\035.pomelo.area.OnTeamUpdatePush\032\f.pomelo.Void\022K\n\026onTeamMemberUpdatePush\022#.pomelo.area.OnTeamMemberUpdatePush\032\f.pomelo.Void\022?\n\020onTeamTargetPush\022\035.pomelo.area.OnTeamTargetPush\032\f.pomelo.Void\022G\n\024onAcrossTeamInfoPush\022!.pomelo.area.OnAcrossTeamInfoPush\032\f.pomelo.Void\022G\n\024onTeamMumberHurtPush\022!.p", "omelo.area.OnTeamMumberHurtPush\032\f.pomelo.Void"};


        Descriptors.FileDescriptor.InternalDescriptorAssigner assigner = new Descriptors.FileDescriptor.InternalDescriptorAssigner() {
            public ExtensionRegistry assignDescriptors(Descriptors.FileDescriptor root) {
                TeamHandler.descriptor = root;
                return null;
            }
        };

        Descriptors.FileDescriptor.internalBuildGeneratedFileFrom(descriptorData, new Descriptors.FileDescriptor[]{

                Common.getDescriptor()}, assigner);
    }

    private static final Descriptors.Descriptor internal_static_pomelo_area_TeamTarget_descriptor = getDescriptor().getMessageTypes().get(0);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_TeamTarget_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_TeamTarget_descriptor, new String[]{"TargetId", "Difficulty", "MinLevel", "MaxLevel", "IsAutoTeam", "IsAutoStart"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_TeamMemberBasic_descriptor = getDescriptor().getMessageTypes().get(1);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_TeamMemberBasic_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_TeamMemberBasic_descriptor, new String[]{"Id", "Pro", "Name", "Level", "UpLevel", "GuildName"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_TeamMember_descriptor = getDescriptor().getMessageTypes().get(2);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_TeamMember_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_TeamMember_descriptor, new String[]{"Id", "Pro", "Name", "Level", "IsLeader", "Status", "AreaId", "Follow"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_TeamMemberDetail_descriptor = getDescriptor().getMessageTypes().get(3);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_TeamMemberDetail_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_TeamMemberDetail_descriptor, new String[]{"Id", "Pro", "Name", "Level", "IsLeader", "Avatars", "FightPower", "Status", "AreaDes", "UpLevel", "Follow", "GuildName"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_Team_descriptor = getDescriptor().getMessageTypes().get(4);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_Team_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_Team_descriptor, new String[]{"Id", "LeaderId", "IsApplied", "TeamMembers", "MinLevel", "MaxLevel", "TargetId", "IsFighting"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_Player_descriptor = getDescriptor().getMessageTypes().get(5);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_Player_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_Player_descriptor, new String[]{"Id", "Pro", "Name", "Level", "UpLevel", "GuildName", "IsInvited"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_OnTeamUpdatePush_descriptor = getDescriptor().getMessageTypes().get(6);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_OnTeamUpdatePush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_OnTeamUpdatePush_descriptor, new String[]{"S2CIsAcceptAutoTeam", "S2CTeamId", "S2CData", "Follow"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_OnTeamMemberUpdatePush_descriptor = getDescriptor().getMessageTypes().get(7);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_OnTeamMemberUpdatePush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_OnTeamMemberUpdatePush_descriptor, new String[]{"S2CData"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetTeamMembersRequest_descriptor = getDescriptor().getMessageTypes().get(8);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetTeamMembersRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetTeamMembersRequest_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetTeamMembersResponse_descriptor = getDescriptor().getMessageTypes().get(9);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetTeamMembersResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetTeamMembersResponse_descriptor, new String[]{"S2CCode", "S2CIsAcceptAutoTeam", "S2CTeamMembers", "S2CTeamTarget", "S2CMsg", "Follow", "HaveApply", "ExpBuff", "GoldBuff"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetNearbyPlayersRequest_descriptor = getDescriptor().getMessageTypes().get(10);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetNearbyPlayersRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetNearbyPlayersRequest_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetNearbyPlayersResponse_descriptor = getDescriptor().getMessageTypes().get(11);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetNearbyPlayersResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetNearbyPlayersResponse_descriptor, new String[]{"S2CCode", "S2CPlayers", "S2CNowCount", "S2CMaxCount", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_NearTeamLeader_descriptor = getDescriptor().getMessageTypes().get(12);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_NearTeamLeader_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_NearTeamLeader_descriptor, new String[]{"Name", "Lv", "Pro", "GuildName"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_NearTeamMember_descriptor = getDescriptor().getMessageTypes().get(13);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_NearTeamMember_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_NearTeamMember_descriptor, new String[]{"Pro", "Lv"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_NearTeam_descriptor = getDescriptor().getMessageTypes().get(14);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_NearTeam_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_NearTeam_descriptor, new String[]{"TeamId", "Leader", "Members", "Apply"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetNearTeamsRequest_descriptor = getDescriptor().getMessageTypes().get(15);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetNearTeamsRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetNearTeamsRequest_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetNearTeamsResponse_descriptor = getDescriptor().getMessageTypes().get(16);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetNearTeamsResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetNearTeamsResponse_descriptor, new String[]{"S2CCode", "S2CMsg", "Teams"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_KickOutTeamRequest_descriptor = getDescriptor().getMessageTypes().get(17);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_KickOutTeamRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_KickOutTeamRequest_descriptor, new String[]{"C2SPlayerId"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_KickOutTeamResponse_descriptor = getDescriptor().getMessageTypes().get(18);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_KickOutTeamResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_KickOutTeamResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_LeaveTeamRequest_descriptor = getDescriptor().getMessageTypes().get(19);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_LeaveTeamRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_LeaveTeamRequest_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_LeaveTeamResponse_descriptor = getDescriptor().getMessageTypes().get(20);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_LeaveTeamResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_LeaveTeamResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_ChangeTeamLeaderRequest_descriptor = getDescriptor().getMessageTypes().get(21);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ChangeTeamLeaderRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ChangeTeamLeaderRequest_descriptor, new String[]{"C2SPlayerId"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_ChangeTeamLeaderResponse_descriptor = getDescriptor().getMessageTypes().get(22);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_ChangeTeamLeaderResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_ChangeTeamLeaderResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SetAutoAcceptTeamRequest_descriptor = getDescriptor().getMessageTypes().get(23);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SetAutoAcceptTeamRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SetAutoAcceptTeamRequest_descriptor, new String[]{"C2SIsAccept"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SetAutoAcceptTeamResponse_descriptor = getDescriptor().getMessageTypes().get(24);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SetAutoAcceptTeamResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SetAutoAcceptTeamResponse_descriptor, new String[]{"S2CCode", "S2CIsAcceptAutoTeam", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_CancelAutoRequest_descriptor = getDescriptor().getMessageTypes().get(25);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_CancelAutoRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_CancelAutoRequest_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_CancelAutoResponse_descriptor = getDescriptor().getMessageTypes().get(26);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_CancelAutoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_CancelAutoResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_FormTeamRequest_descriptor = getDescriptor().getMessageTypes().get(27);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FormTeamRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FormTeamRequest_descriptor, new String[]{"C2SPlayerId"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_FormTeamResponse_descriptor = getDescriptor().getMessageTypes().get(28);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FormTeamResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FormTeamResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_CreateTeamRequest_descriptor = getDescriptor().getMessageTypes().get(29);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_CreateTeamRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_CreateTeamRequest_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_CreateTeamResponse_descriptor = getDescriptor().getMessageTypes().get(30);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_CreateTeamResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_CreateTeamResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_QueryTeamByTargetRequest_descriptor = getDescriptor().getMessageTypes().get(31);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_QueryTeamByTargetRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_QueryTeamByTargetRequest_descriptor, new String[]{"C2STargetId", "C2SDifficulty"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_QueryTeamByTargetResponse_descriptor = getDescriptor().getMessageTypes().get(32);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_QueryTeamByTargetResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_QueryTeamByTargetResponse_descriptor, new String[]{"S2CCode", "S2CTeams", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SetTeamTargetRequest_descriptor = getDescriptor().getMessageTypes().get(33);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SetTeamTargetRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SetTeamTargetRequest_descriptor, new String[]{"C2STargetId", "C2SDifficulty", "C2SMinLevel", "C2SMaxLevel", "C2SIsAutoTeam", "C2SIsAutoStart"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SetTeamTargetResponse_descriptor = getDescriptor().getMessageTypes().get(34);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SetTeamTargetResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SetTeamTargetResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetPlayersByTypeRequest_descriptor = getDescriptor().getMessageTypes().get(35);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetPlayersByTypeRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetPlayersByTypeRequest_descriptor, new String[]{"C2SType"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetPlayersByTypeResponse_descriptor = getDescriptor().getMessageTypes().get(36);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetPlayersByTypeResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetPlayersByTypeResponse_descriptor, new String[]{"S2CCode", "S2CPlayers", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetAppliedPlayersRequest_descriptor = getDescriptor().getMessageTypes().get(37);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetAppliedPlayersRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetAppliedPlayersRequest_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_GetAppliedPlayersResponse_descriptor = getDescriptor().getMessageTypes().get(38);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GetAppliedPlayersResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GetAppliedPlayersResponse_descriptor, new String[]{"S2CCode", "S2CPlayers", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_JoinTeamRequest_descriptor = getDescriptor().getMessageTypes().get(39);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_JoinTeamRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_JoinTeamRequest_descriptor, new String[]{"C2STeamId"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_JoinTeamResponse_descriptor = getDescriptor().getMessageTypes().get(40);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_JoinTeamResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_JoinTeamResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_AutoJoinTeamRequest_descriptor = getDescriptor().getMessageTypes().get(41);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_AutoJoinTeamRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_AutoJoinTeamRequest_descriptor, new String[]{"C2STargetId", "C2SDifficulty"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_AutoJoinTeamResponse_descriptor = getDescriptor().getMessageTypes().get(42);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_AutoJoinTeamResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_AutoJoinTeamResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SummonRequest_descriptor = getDescriptor().getMessageTypes().get(43);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SummonRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SummonRequest_descriptor, new String[]{"C2STeamMemberId"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SummonResponse_descriptor = getDescriptor().getMessageTypes().get(44);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SummonResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SummonResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SummonConfirmRequest_descriptor = getDescriptor().getMessageTypes().get(45);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SummonConfirmRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SummonConfirmRequest_descriptor, new String[]{"C2SId", "S2COperate"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_SummonConfirmResponse_descriptor = getDescriptor().getMessageTypes().get(46);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_SummonConfirmResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_SummonConfirmResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_OnSummonTeamPush_descriptor = getDescriptor().getMessageTypes().get(47);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_OnSummonTeamPush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_OnSummonTeamPush_descriptor, new String[]{"S2CId", "S2CContent"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_GotoTeamTargetRequest_descriptor = getDescriptor().getMessageTypes().get(48);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GotoTeamTargetRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GotoTeamTargetRequest_descriptor, new String[]{"TargetId", "Difficulty"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_GotoTeamTargetResponse_descriptor = getDescriptor().getMessageTypes().get(49);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_GotoTeamTargetResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_GotoTeamTargetResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_AcrossMatchRequest_descriptor = getDescriptor().getMessageTypes().get(50);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_AcrossMatchRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_AcrossMatchRequest_descriptor, new String[]{"TargetId", "Difficulty"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_AcrossMatchResponse_descriptor = getDescriptor().getMessageTypes().get(51);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_AcrossMatchResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_AcrossMatchResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_LeaveAcrossMatchRequest_descriptor = getDescriptor().getMessageTypes().get(52);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_LeaveAcrossMatchRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_LeaveAcrossMatchRequest_descriptor, new String[0]);


    private static final Descriptors.Descriptor internal_static_pomelo_area_LeaveAcrossMatchResponse_descriptor = getDescriptor().getMessageTypes().get(53);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_LeaveAcrossMatchResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_LeaveAcrossMatchResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_FollowLeaderRequest_descriptor = getDescriptor().getMessageTypes().get(54);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FollowLeaderRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FollowLeaderRequest_descriptor, new String[]{"Follow"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_FollowLeaderResponse_descriptor = getDescriptor().getMessageTypes().get(55);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_FollowLeaderResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_FollowLeaderResponse_descriptor, new String[]{"S2CCode", "S2CMsg"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_OnTeamTargetPush_descriptor = getDescriptor().getMessageTypes().get(56);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_OnTeamTargetPush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_OnTeamTargetPush_descriptor, new String[]{"S2CIsAcceptAutoTeam", "S2CTeamTarget", "HaveApply"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_AcrossPlayer_descriptor = getDescriptor().getMessageTypes().get(57);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_AcrossPlayer_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_AcrossPlayer_descriptor, new String[]{"Pro", "Name", "Level"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_OnAcrossTeamInfoPush_descriptor = getDescriptor().getMessageTypes().get(58);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_OnAcrossTeamInfoPush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_OnAcrossTeamInfoPush_descriptor, new String[]{"TargetId", "Difficulty", "Second", "Players"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_MumberHurtInfo_descriptor = getDescriptor().getMessageTypes().get(59);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_MumberHurtInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_MumberHurtInfo_descriptor, new String[]{"PlayerName", "Hurt", "Cure"});


    private static final Descriptors.Descriptor internal_static_pomelo_area_OnTeamMumberHurtPush_descriptor = getDescriptor().getMessageTypes().get(60);
    private static GeneratedMessage.FieldAccessorTable internal_static_pomelo_area_OnTeamMumberHurtPush_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_pomelo_area_OnTeamMumberHurtPush_descriptor, new String[]{"Players"});
    private static Descriptors.FileDescriptor descriptor;

    static {
        Common.getDescriptor();
    }

    public static interface OnTeamMumberHurtPushOrBuilder extends MessageOrBuilder {
        List<TeamHandler.MumberHurtInfo> getPlayersList();

        TeamHandler.MumberHurtInfo getPlayers(int param1Int);

        int getPlayersCount();

        List<? extends TeamHandler.MumberHurtInfoOrBuilder> getPlayersOrBuilderList();

        TeamHandler.MumberHurtInfoOrBuilder getPlayersOrBuilder(int param1Int);
    }

    public static interface MumberHurtInfoOrBuilder extends MessageOrBuilder {
        boolean hasPlayerName();

        String getPlayerName();

        ByteString getPlayerNameBytes();

        boolean hasHurt();

        long getHurt();

        boolean hasCure();

        long getCure();
    }

    public static interface OnAcrossTeamInfoPushOrBuilder extends MessageOrBuilder {
        boolean hasTargetId();

        int getTargetId();

        boolean hasDifficulty();

        int getDifficulty();

        boolean hasSecond();

        int getSecond();

        List<TeamHandler.AcrossPlayer> getPlayersList();

        TeamHandler.AcrossPlayer getPlayers(int param1Int);

        int getPlayersCount();

        List<? extends TeamHandler.AcrossPlayerOrBuilder> getPlayersOrBuilderList();

        TeamHandler.AcrossPlayerOrBuilder getPlayersOrBuilder(int param1Int);
    }

    public static interface AcrossPlayerOrBuilder extends MessageOrBuilder {
        boolean hasPro();

        int getPro();

        boolean hasName();

        String getName();

        ByteString getNameBytes();

        boolean hasLevel();

        int getLevel();
    }

    public static interface OnTeamTargetPushOrBuilder extends MessageOrBuilder {
        boolean hasS2CIsAcceptAutoTeam();

        int getS2CIsAcceptAutoTeam();

        boolean hasS2CTeamTarget();

        TeamHandler.TeamTarget getS2CTeamTarget();

        TeamHandler.TeamTargetOrBuilder getS2CTeamTargetOrBuilder();

        boolean hasHaveApply();

        int getHaveApply();
    }

    public static interface FollowLeaderResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface FollowLeaderRequestOrBuilder extends MessageOrBuilder {
        boolean hasFollow();

        int getFollow();
    }

    public static interface LeaveAcrossMatchResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface LeaveAcrossMatchRequestOrBuilder extends MessageOrBuilder {
    }

    public static interface AcrossMatchResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface AcrossMatchRequestOrBuilder extends MessageOrBuilder {
        boolean hasTargetId();

        int getTargetId();

        boolean hasDifficulty();

        int getDifficulty();
    }

    public static interface GotoTeamTargetResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface GotoTeamTargetRequestOrBuilder extends MessageOrBuilder {
        boolean hasTargetId();

        int getTargetId();

        boolean hasDifficulty();

        int getDifficulty();
    }

    public static interface OnSummonTeamPushOrBuilder extends MessageOrBuilder {
        boolean hasS2CId();

        String getS2CId();

        ByteString getS2CIdBytes();

        boolean hasS2CContent();

        String getS2CContent();

        ByteString getS2CContentBytes();
    }

    public static interface SummonConfirmResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface SummonConfirmRequestOrBuilder extends MessageOrBuilder {
        boolean hasC2SId();

        String getC2SId();

        ByteString getC2SIdBytes();

        boolean hasS2COperate();

        int getS2COperate();
    }

    public static interface SummonResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface SummonRequestOrBuilder extends MessageOrBuilder {
        boolean hasC2STeamMemberId();

        String getC2STeamMemberId();

        ByteString getC2STeamMemberIdBytes();
    }

    public static interface AutoJoinTeamResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface AutoJoinTeamRequestOrBuilder extends MessageOrBuilder {
        boolean hasC2STargetId();

        int getC2STargetId();

        boolean hasC2SDifficulty();

        int getC2SDifficulty();
    }

    public static interface JoinTeamResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface JoinTeamRequestOrBuilder extends MessageOrBuilder {
        boolean hasC2STeamId();

        String getC2STeamId();

        ByteString getC2STeamIdBytes();
    }

    public static interface GetAppliedPlayersResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        List<TeamHandler.TeamMemberBasic> getS2CPlayersList();

        TeamHandler.TeamMemberBasic getS2CPlayers(int param1Int);

        int getS2CPlayersCount();

        List<? extends TeamHandler.TeamMemberBasicOrBuilder> getS2CPlayersOrBuilderList();

        TeamHandler.TeamMemberBasicOrBuilder getS2CPlayersOrBuilder(int param1Int);

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface GetAppliedPlayersRequestOrBuilder extends MessageOrBuilder {
    }

    public static interface GetPlayersByTypeResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        List<TeamHandler.Player> getS2CPlayersList();

        TeamHandler.Player getS2CPlayers(int param1Int);

        int getS2CPlayersCount();

        List<? extends TeamHandler.PlayerOrBuilder> getS2CPlayersOrBuilderList();

        TeamHandler.PlayerOrBuilder getS2CPlayersOrBuilder(int param1Int);

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface GetPlayersByTypeRequestOrBuilder extends MessageOrBuilder {
        boolean hasC2SType();

        int getC2SType();
    }

    public static interface SetTeamTargetResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface SetTeamTargetRequestOrBuilder extends MessageOrBuilder {
        boolean hasC2STargetId();

        int getC2STargetId();

        boolean hasC2SDifficulty();

        int getC2SDifficulty();

        boolean hasC2SMinLevel();

        int getC2SMinLevel();

        boolean hasC2SMaxLevel();

        int getC2SMaxLevel();

        boolean hasC2SIsAutoTeam();

        int getC2SIsAutoTeam();

        boolean hasC2SIsAutoStart();

        int getC2SIsAutoStart();
    }

    public static interface QueryTeamByTargetResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        List<TeamHandler.Team> getS2CTeamsList();

        TeamHandler.Team getS2CTeams(int param1Int);

        int getS2CTeamsCount();

        List<? extends TeamHandler.TeamOrBuilder> getS2CTeamsOrBuilderList();

        TeamHandler.TeamOrBuilder getS2CTeamsOrBuilder(int param1Int);

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface QueryTeamByTargetRequestOrBuilder extends MessageOrBuilder {
        boolean hasC2STargetId();

        int getC2STargetId();

        boolean hasC2SDifficulty();

        int getC2SDifficulty();
    }

    public static interface CreateTeamResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface CreateTeamRequestOrBuilder extends MessageOrBuilder {
    }

    public static interface FormTeamResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface FormTeamRequestOrBuilder extends MessageOrBuilder {
        boolean hasC2SPlayerId();

        String getC2SPlayerId();

        ByteString getC2SPlayerIdBytes();
    }

    public static interface CancelAutoResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface CancelAutoRequestOrBuilder extends MessageOrBuilder {
    }

    public static interface SetAutoAcceptTeamResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CIsAcceptAutoTeam();

        int getS2CIsAcceptAutoTeam();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface SetAutoAcceptTeamRequestOrBuilder extends MessageOrBuilder {
        boolean hasC2SIsAccept();

        int getC2SIsAccept();
    }

    public static interface ChangeTeamLeaderResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface ChangeTeamLeaderRequestOrBuilder extends MessageOrBuilder {
        boolean hasC2SPlayerId();

        String getC2SPlayerId();

        ByteString getC2SPlayerIdBytes();
    }

    public static interface LeaveTeamResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface LeaveTeamRequestOrBuilder extends MessageOrBuilder {
    }

    public static interface KickOutTeamResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface KickOutTeamRequestOrBuilder extends MessageOrBuilder {
        boolean hasC2SPlayerId();

        String getC2SPlayerId();

        ByteString getC2SPlayerIdBytes();
    }

    public static interface GetNearTeamsResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        List<TeamHandler.NearTeam> getTeamsList();

        TeamHandler.NearTeam getTeams(int param1Int);

        int getTeamsCount();

        List<? extends TeamHandler.NearTeamOrBuilder> getTeamsOrBuilderList();

        TeamHandler.NearTeamOrBuilder getTeamsOrBuilder(int param1Int);
    }

    public static interface GetNearTeamsRequestOrBuilder extends MessageOrBuilder {
    }

    public static interface NearTeamOrBuilder extends MessageOrBuilder {
        boolean hasTeamId();

        String getTeamId();

        ByteString getTeamIdBytes();

        boolean hasLeader();

        TeamHandler.NearTeamLeader getLeader();

        TeamHandler.NearTeamLeaderOrBuilder getLeaderOrBuilder();

        List<TeamHandler.NearTeamMember> getMembersList();

        TeamHandler.NearTeamMember getMembers(int param1Int);

        int getMembersCount();

        List<? extends TeamHandler.NearTeamMemberOrBuilder> getMembersOrBuilderList();

        TeamHandler.NearTeamMemberOrBuilder getMembersOrBuilder(int param1Int);

        boolean hasApply();

        int getApply();
    }

    public static interface NearTeamMemberOrBuilder extends MessageOrBuilder {
        boolean hasPro();

        int getPro();

        boolean hasLv();

        int getLv();
    }

    public static interface NearTeamLeaderOrBuilder extends MessageOrBuilder {
        boolean hasName();

        String getName();

        ByteString getNameBytes();

        boolean hasLv();

        int getLv();

        boolean hasPro();

        int getPro();

        boolean hasGuildName();

        String getGuildName();

        ByteString getGuildNameBytes();
    }

    public static interface GetNearbyPlayersResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        List<TeamHandler.Player> getS2CPlayersList();

        TeamHandler.Player getS2CPlayers(int param1Int);

        int getS2CPlayersCount();

        List<? extends TeamHandler.PlayerOrBuilder> getS2CPlayersOrBuilderList();

        TeamHandler.PlayerOrBuilder getS2CPlayersOrBuilder(int param1Int);

        boolean hasS2CNowCount();

        int getS2CNowCount();

        boolean hasS2CMaxCount();

        int getS2CMaxCount();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();
    }

    public static interface GetNearbyPlayersRequestOrBuilder extends MessageOrBuilder {
    }

    public static interface GetTeamMembersResponseOrBuilder extends MessageOrBuilder {
        boolean hasS2CCode();

        int getS2CCode();

        boolean hasS2CIsAcceptAutoTeam();

        int getS2CIsAcceptAutoTeam();

        List<TeamHandler.TeamMemberDetail> getS2CTeamMembersList();

        TeamHandler.TeamMemberDetail getS2CTeamMembers(int param1Int);

        int getS2CTeamMembersCount();

        List<? extends TeamHandler.TeamMemberDetailOrBuilder> getS2CTeamMembersOrBuilderList();

        TeamHandler.TeamMemberDetailOrBuilder getS2CTeamMembersOrBuilder(int param1Int);

        boolean hasS2CTeamTarget();

        TeamHandler.TeamTarget getS2CTeamTarget();

        TeamHandler.TeamTargetOrBuilder getS2CTeamTargetOrBuilder();

        boolean hasS2CMsg();

        String getS2CMsg();

        ByteString getS2CMsgBytes();

        boolean hasFollow();

        int getFollow();

        boolean hasHaveApply();

        int getHaveApply();

        boolean hasExpBuff();

        int getExpBuff();

        boolean hasGoldBuff();

        int getGoldBuff();
    }

    public static interface GetTeamMembersRequestOrBuilder extends MessageOrBuilder {
    }

    public static interface OnTeamMemberUpdatePushOrBuilder extends MessageOrBuilder {
        boolean hasS2CData();

        TeamHandler.TeamMember getS2CData();

        TeamHandler.TeamMemberOrBuilder getS2CDataOrBuilder();
    }

    public static interface OnTeamUpdatePushOrBuilder extends MessageOrBuilder {
        boolean hasS2CIsAcceptAutoTeam();

        int getS2CIsAcceptAutoTeam();

        boolean hasS2CTeamId();

        String getS2CTeamId();

        ByteString getS2CTeamIdBytes();

        List<TeamHandler.TeamMember> getS2CDataList();

        TeamHandler.TeamMember getS2CData(int param1Int);

        int getS2CDataCount();

        List<? extends TeamHandler.TeamMemberOrBuilder> getS2CDataOrBuilderList();

        TeamHandler.TeamMemberOrBuilder getS2CDataOrBuilder(int param1Int);

        boolean hasFollow();

        int getFollow();
    }

    public static interface PlayerOrBuilder extends MessageOrBuilder {
        boolean hasId();

        String getId();

        ByteString getIdBytes();

        boolean hasPro();

        int getPro();

        boolean hasName();

        String getName();

        ByteString getNameBytes();

        boolean hasLevel();

        int getLevel();

        boolean hasUpLevel();

        int getUpLevel();

        boolean hasGuildName();

        String getGuildName();

        ByteString getGuildNameBytes();

        boolean hasIsInvited();

        int getIsInvited();
    }

    public static interface TeamOrBuilder extends MessageOrBuilder {
        boolean hasId();

        String getId();

        ByteString getIdBytes();

        boolean hasLeaderId();

        String getLeaderId();

        ByteString getLeaderIdBytes();

        boolean hasIsApplied();

        int getIsApplied();

        List<TeamHandler.TeamMemberBasic> getTeamMembersList();

        TeamHandler.TeamMemberBasic getTeamMembers(int param1Int);

        int getTeamMembersCount();

        List<? extends TeamHandler.TeamMemberBasicOrBuilder> getTeamMembersOrBuilderList();

        TeamHandler.TeamMemberBasicOrBuilder getTeamMembersOrBuilder(int param1Int);

        boolean hasMinLevel();

        int getMinLevel();

        boolean hasMaxLevel();

        int getMaxLevel();

        boolean hasTargetId();

        int getTargetId();

        boolean hasIsFighting();

        boolean getIsFighting();
    }

    public static interface TeamMemberDetailOrBuilder extends MessageOrBuilder {
        boolean hasId();

        String getId();

        ByteString getIdBytes();

        boolean hasPro();

        int getPro();

        boolean hasName();

        String getName();

        ByteString getNameBytes();

        boolean hasLevel();

        int getLevel();

        boolean hasIsLeader();

        int getIsLeader();

        List<Common.Avatar> getAvatarsList();

        Common.Avatar getAvatars(int param1Int);

        int getAvatarsCount();

        List<? extends Common.AvatarOrBuilder> getAvatarsOrBuilderList();

        Common.AvatarOrBuilder getAvatarsOrBuilder(int param1Int);

        boolean hasFightPower();

        int getFightPower();

        boolean hasStatus();

        int getStatus();

        boolean hasAreaDes();

        String getAreaDes();

        ByteString getAreaDesBytes();

        boolean hasUpLevel();

        int getUpLevel();

        boolean hasFollow();

        int getFollow();

        boolean hasGuildName();

        String getGuildName();

        ByteString getGuildNameBytes();
    }

    public static interface TeamMemberOrBuilder extends MessageOrBuilder {
        boolean hasId();

        String getId();

        ByteString getIdBytes();

        boolean hasPro();

        int getPro();

        boolean hasName();

        String getName();

        ByteString getNameBytes();

        boolean hasLevel();

        int getLevel();

        boolean hasIsLeader();

        int getIsLeader();

        boolean hasStatus();

        int getStatus();

        boolean hasAreaId();

        int getAreaId();

        boolean hasFollow();

        int getFollow();
    }

    public static interface TeamMemberBasicOrBuilder extends MessageOrBuilder {
        boolean hasId();

        String getId();

        ByteString getIdBytes();

        boolean hasPro();

        int getPro();

        boolean hasName();

        String getName();

        ByteString getNameBytes();

        boolean hasLevel();

        int getLevel();

        boolean hasUpLevel();

        int getUpLevel();

        boolean hasGuildName();

        String getGuildName();

        ByteString getGuildNameBytes();
    }

    public static interface TeamTargetOrBuilder extends MessageOrBuilder {
        boolean hasTargetId();

        int getTargetId();

        boolean hasDifficulty();

        int getDifficulty();

        boolean hasMinLevel();

        int getMinLevel();

        boolean hasMaxLevel();

        int getMaxLevel();

        boolean hasIsAutoTeam();

        int getIsAutoTeam();

        boolean hasIsAutoStart();

        int getIsAutoStart();
    }
}


